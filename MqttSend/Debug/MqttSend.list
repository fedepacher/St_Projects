
MqttSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0801675c  0801675c  0002675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d44  08016d44  000303b0  2**0
                  CONTENTS
  4 .ARM          00000008  08016d44  08016d44  00026d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d4c  08016d4c  000303b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d4c  08016d4c  00026d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d50  08016d50  00026d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  08016d54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010114  200003b0  08017104  000303b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200104c4  08017104  000304c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048917  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000085dd  00000000  00000000  00078cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000033d8  00000000  00000000  000812d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003058  00000000  00000000  000846b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003958a  00000000  00000000  00087708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000309a5  00000000  00000000  000c0c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00138833  00000000  00000000  000f1637  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00229e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eb40  00000000  00000000  00229ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003b0 	.word	0x200003b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016744 	.word	0x08016744

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003b4 	.word	0x200003b4
 80001ec:	08016744 	.word	0x08016744

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <ESP_timeoutBegin>:
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength);

/*
 * @brief INTERNAL Timeout setup.
 */
static void ESP_timeoutBegin(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	// Get entry time.
	//ESP_t0 = HAL_GetTick();
	ESP_t0 = xTaskGetTickCount();
 8000e30:	f011 fa4e 	bl	80122d0 <xTaskGetTickCount>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <ESP_timeoutBegin+0x14>)
 8000e38:	601a      	str	r2, [r3, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200003cc 	.word	0x200003cc

08000e44 <ESP_timeoutIsExpired>:
/*
 * @brief INTERNAL Timeout checker.
 * @param interval_ms Interval time in ms.
 * @return True if timeout expired.
 */
static bool ESP_timeoutIsExpired(const uint16_t interval_ms) {
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
	// Check if the given interval is in the past.
	//return (interval_ms < (HAL_GetTick() - ESP_t0));
	return (interval_ms < (xTaskGetTickCount() - ESP_t0));
 8000e4e:	88fc      	ldrh	r4, [r7, #6]
 8000e50:	f011 fa3e 	bl	80122d0 <xTaskGetTickCount>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <ESP_timeoutIsExpired+0x2c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	bf34      	ite	cc
 8000e60:	2301      	movcc	r3, #1
 8000e62:	2300      	movcs	r3, #0
 8000e64:	b2db      	uxtb	r3, r3

}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003cc 	.word	0x200003cc

08000e74 <ESP_Delay>:
/*
 * @brief Creates non-blocking delay.
 * @param delay_ms Delay time in ms.
 * @return SUCCESS, INPROGRESS.
 */
ESP8266_StatusTypeDef ESP_Delay(const uint16_t delay_ms){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
	// Function entry.
	if(!ESP82_inProgress){
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <ESP_Delay+0x58>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	f083 0301 	eor.w	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <ESP_Delay+0x1c>
		// Start timeout.
		ESP_timeoutBegin();
 8000e8c:	f7ff ffce 	bl	8000e2c <ESP_timeoutBegin>
	}

	ESP82_inProgress = !ESP_timeoutIsExpired(delay_ms);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffd6 	bl	8000e44 <ESP_timeoutIsExpired>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <ESP_Delay+0x58>)
 8000eb2:	701a      	strb	r2, [r3, #0]

	if(ESP82_inProgress)
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <ESP_Delay+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <ESP_Delay+0x4c>
		return ESP8266_BUSY;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e000      	b.n	8000ec2 <ESP_Delay+0x4e>
	else
		return ESP8266_OK;
 8000ec0:	2300      	movs	r3, #0

}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200003d0 	.word	0x200003d0

08000ed0 <ESP_ConnectWifi>:
 * @param resetToDefault If true, reset the module to default settings before connecting.
 * @param ssid AP name.
 * @param pass AP password.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_ConnectWifi(const bool resetToDefault, const char * ssid, const char * pass) {
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	73fb      	strb	r3, [r7, #15]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <ESP_ConnectWifi+0x134>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <ESP_ConnectWifi+0x1c>
 8000ee6:	4b48      	ldr	r3, [pc, #288]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	e000      	b.n	8000eee <ESP_ConnectWifi+0x1e>
 8000eec:	2300      	movs	r3, #0
 8000eee:	4a46      	ldr	r2, [pc, #280]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000ef0:	7013      	strb	r3, [r2, #0]
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	d87c      	bhi.n	8000ff4 <ESP_ConnectWifi+0x124>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <ESP_ConnectWifi+0x30>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f37 	.word	0x08000f37
 8000f08:	08000f63 	.word	0x08000f63
 8000f0c:	08000f8d 	.word	0x08000f8d
 8000f10:	08000fb3 	.word	0x08000fb3
 8000f14:	08000fdf 	.word	0x08000fdf
	case ESP82_State0:
			// Wait for startup phase to finish.
			if(ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART))) {
 8000f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f1c:	f7ff ffaa 	bl	8000e74 <ESP_Delay>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <ESP_ConnectWifi+0x62>
				// To the next state.
				internalState = ESP82_State1;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e001      	b.n	8000f36 <ESP_ConnectWifi+0x66>
			} else {
				// INPROGRESS or SUCCESS if no reset is requested.
				return result;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	e061      	b.n	8000ffa <ESP_ConnectWifi+0x12a>
			}
	//nobreak;
	case ESP82_State1:
		// AT+RESTORE (if requested).
		if(!resetToDefault || (ESP8266_OK == (result = atCommand((uint8_t*)"AT\r\n", 4, (uint8_t*) AT_OK_STRING)))) {
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d109      	bne.n	8000f56 <ESP_ConnectWifi+0x86>
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <ESP_ConnectWifi+0x13c>)
 8000f44:	2104      	movs	r1, #4
 8000f46:	4832      	ldr	r0, [pc, #200]	; (8001010 <ESP_ConnectWifi+0x140>)
 8000f48:	f000 f93e 	bl	80011c8 <atCommand>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <ESP_ConnectWifi+0x8e>
			// To the next state.
			internalState = ESP82_State2;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e001      	b.n	8000f62 <ESP_ConnectWifi+0x92>
		} else {
			// Exit on ERROR or INPROGRESS.
			return result;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	e04b      	b.n	8000ffa <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State2:
		// If resetted, wait for restart to finish.
		if(!resetToDefault || (ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART)))){
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d108      	bne.n	8000f80 <ESP_ConnectWifi+0xb0>
 8000f6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f72:	f7ff ff7f 	bl	8000e74 <ESP_Delay>
 8000f76:	4603      	mov	r3, r0
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <ESP_ConnectWifi+0xb8>
				// To the next state.
				internalState = ESP82_State3;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <ESP_ConnectWifi+0xbc>
		}else{
			// INPROGRESS or SUCCESS if no reset is requested.
			return result;
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	e036      	b.n	8000ffa <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State3:
		// AT+CWMODE (client mode)
		if((ESP8266_OK == (result = atCommand((uint8_t*)"AT+CWMODE=1\r\n", 13, (uint8_t*) AT_OK_STRING))) && (ssid != NULL)){
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	; (800100c <ESP_ConnectWifi+0x13c>)
 8000f8e:	210d      	movs	r1, #13
 8000f90:	4820      	ldr	r0, [pc, #128]	; (8001014 <ESP_ConnectWifi+0x144>)
 8000f92:	f000 f919 	bl	80011c8 <atCommand>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d106      	bne.n	8000fae <ESP_ConnectWifi+0xde>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <ESP_ConnectWifi+0xde>
			// To the next state.
			internalState = ESP82_State4;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e001      	b.n	8000fb2 <ESP_ConnectWifi+0xe2>
		} else{
			// Exit on ERROR, INPROGRESS or SUCCESS (if no SSID is provided).
			return result;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	e023      	b.n	8000ffa <ESP_ConnectWifi+0x12a>
		}

		// nobreak;
	case ESP82_State4:
		// Size check.
		if ((strlen(ssid) + strlen(pass)) > (ESP_BUFFERSIZE_CMD - 17)) {
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	f7ff f91c 	bl	80001f0 <strlen>
 8000fb8:	4604      	mov	r4, r0
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff f918 	bl	80001f0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4423      	add	r3, r4
 8000fc4:	2b6f      	cmp	r3, #111	; 0x6f
 8000fc6:	d901      	bls.n	8000fcc <ESP_ConnectWifi+0xfc>
			return false;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e016      	b.n	8000ffa <ESP_ConnectWifi+0x12a>
		}

		// AT+CWJAP prepare.
		sprintf((char *)ESP82_cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4911      	ldr	r1, [pc, #68]	; (8001018 <ESP_ConnectWifi+0x148>)
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <ESP_ConnectWifi+0x14c>)
 8000fd4:	f014 f83e 	bl	8015054 <siprintf>

		// To the next state.
		internalState = ESP82_State5;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000fda:	2205      	movs	r2, #5
 8000fdc:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State5:
		// AT+CWJAP
		return atCommand(ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <ESP_ConnectWifi+0x14c>)
 8000fe0:	f7ff f906 	bl	80001f0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <ESP_ConnectWifi+0x13c>)
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <ESP_ConnectWifi+0x14c>)
 8000fec:	f000 f8ec 	bl	80011c8 <atCommand>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	e002      	b.n	8000ffa <ESP_ConnectWifi+0x12a>

		//nobreak;
	default:
		// To the first state.
		internalState = ESP82_State0;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <ESP_ConnectWifi+0x138>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	200003d0 	.word	0x200003d0
 8001008:	20000454 	.word	0x20000454
 800100c:	08016774 	.word	0x08016774
 8001010:	0801677c 	.word	0x0801677c
 8001014:	08016784 	.word	0x08016784
 8001018:	08016794 	.word	0x08016794
 800101c:	200003d4 	.word	0x200003d4

08001020 <ESP_IsConnectedWifi>:

/*
 * @brief Connection test.
 * @return SUCCESS, INPROGRESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_IsConnectedWifi(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	return atCommand((uint8_t*)"AT+CIPSTATUS\r\n", 14, (uint8_t*) AT_OK_STRING);
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <ESP_IsConnectedWifi+0x14>)
 8001026:	210e      	movs	r1, #14
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <ESP_IsConnectedWifi+0x18>)
 800102a:	f000 f8cd 	bl	80011c8 <atCommand>
 800102e:	4603      	mov	r3, r0
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08016774 	.word	0x08016774
 8001038:	080167ac 	.word	0x080167ac

0800103c <ESP_StartTCP>:
 * @param port Remote port.
 * @param keepalive Keep-alive time between 0 to 7200 seconds.
 * @param ssl Starts SSL connection.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_StartTCP(const char * host, const uint16_t port, const uint16_t keepalive, const bool ssl) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4603      	mov	r3, r0
 800104c:	817b      	strh	r3, [r7, #10]
 800104e:	460b      	mov	r3, r1
 8001050:	813b      	strh	r3, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	71fb      	strb	r3, [r7, #7]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <ESP_StartTCP+0xc8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <ESP_StartTCP+0x28>
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <ESP_StartTCP+0xcc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	e000      	b.n	8001066 <ESP_StartTCP+0x2a>
 8001064:	2300      	movs	r3, #0
 8001066:	4a28      	ldr	r2, [pc, #160]	; (8001108 <ESP_StartTCP+0xcc>)
 8001068:	7013      	strb	r3, [r2, #0]
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <ESP_StartTCP+0xcc>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d021      	beq.n	80010b6 <ESP_StartTCP+0x7a>
 8001072:	2b02      	cmp	r3, #2
 8001074:	d037      	beq.n	80010e6 <ESP_StartTCP+0xaa>
 8001076:	2b00      	cmp	r3, #0
 8001078:	d140      	bne.n	80010fc <ESP_StartTCP+0xc0>
	case ESP82_State0:
		// Size check.
		if(strlen(host) > (ESP_BUFFERSIZE_CMD - 34)){
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f7ff f8b8 	bl	80001f0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	2b5e      	cmp	r3, #94	; 0x5e
 8001084:	d901      	bls.n	800108a <ESP_StartTCP+0x4e>
			return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e038      	b.n	80010fc <ESP_StartTCP+0xc0>
		}

		// Keepalive check.
		if(keepalive > 7200){
 800108a:	893b      	ldrh	r3, [r7, #8]
 800108c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001090:	d901      	bls.n	8001096 <ESP_StartTCP+0x5a>
			return false;
 8001092:	2300      	movs	r3, #0
 8001094:	e032      	b.n	80010fc <ESP_StartTCP+0xc0>
		}

		// prepare AT+CIPSTART
		//sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i,%i\r\n", (ssl ? "SSL" : "TCP"), host, port, keepalive);
		sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i\r\n", (ssl ? "SSL" : "TCP"), host, port);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <ESP_StartTCP+0x64>
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <ESP_StartTCP+0xd0>)
 800109e:	e000      	b.n	80010a2 <ESP_StartTCP+0x66>
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <ESP_StartTCP+0xd4>)
 80010a2:	897b      	ldrh	r3, [r7, #10]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	491a      	ldr	r1, [pc, #104]	; (8001114 <ESP_StartTCP+0xd8>)
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <ESP_StartTCP+0xdc>)
 80010ac:	f013 ffd2 	bl	8015054 <siprintf>


		// To the next state.
		internalState = ESP82_State1;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <ESP_StartTCP+0xcc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State1:
		// AT+CIPSSLSIZE (or skip)
		if(!ssl || (ESP8266_OK == (result = atCommand((uint8_t*)ESP_SSLSIZE_str, 20, (uint8_t*) AT_OK_STRING)))){
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f083 0301 	eor.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10b      	bne.n	80010da <ESP_StartTCP+0x9e>
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <ESP_StartTCP+0xe0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <ESP_StartTCP+0xe4>)
 80010c8:	2114      	movs	r1, #20
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f87c 	bl	80011c8 <atCommand>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <ESP_StartTCP+0xa6>
			// To the next state.
			internalState = ESP82_State2;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <ESP_StartTCP+0xcc>)
 80010dc:	2202      	movs	r2, #2
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e001      	b.n	80010e6 <ESP_StartTCP+0xaa>
		}else{
			// Exit on ERROR or INPROGRESS.
			return result;
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	e00a      	b.n	80010fc <ESP_StartTCP+0xc0>
		}
		//nobreak;
	case ESP82_State2:
		// AT+CIPSTART
		return atCommand((uint8_t*)ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <ESP_StartTCP+0xdc>)
 80010e8:	f7ff f882 	bl	80001f0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <ESP_StartTCP+0xe4>)
 80010f0:	4619      	mov	r1, r3
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <ESP_StartTCP+0xdc>)
 80010f4:	f000 f868 	bl	80011c8 <atCommand>
 80010f8:	4603      	mov	r3, r0
 80010fa:	e7ff      	b.n	80010fc <ESP_StartTCP+0xc0>
	}
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003d0 	.word	0x200003d0
 8001108:	20000455 	.word	0x20000455
 800110c:	080167bc 	.word	0x080167bc
 8001110:	080167c0 	.word	0x080167c0
 8001114:	080167c4 	.word	0x080167c4
 8001118:	200003d4 	.word	0x200003d4
 800111c:	20000000 	.word	0x20000000
 8001120:	08016774 	.word	0x08016774

08001124 <ESP_SendData>:
 * @brief  Send data over the wifi connection.
 * @param  Buffer: the buffer to send
 * @param  Length: the Buffer's data size.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef ESP_SendData(uint8_t* Buffer, uint32_t Length) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Ret = ESP8266_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

	if (Buffer != NULL) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d027      	beq.n	8001188 <ESP_SendData+0x64>
		//uint32_t tickStart;
		//TickType_t tickStart;

		/* Construct the CIPSEND command */
		memset(ESP82_cmdBuffer, '\0', ESP_BUFFERSIZE_CMD);
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	2100      	movs	r1, #0
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <ESP_SendData+0x70>)
 800113e:	f013 fb88 	bl	8014852 <memset>
		sprintf((char *) ESP82_cmdBuffer, "AT+CIPSEND=%lu%c%c", Length  , '\r', '\n');
 8001142:	230a      	movs	r3, #10
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	230d      	movs	r3, #13
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4913      	ldr	r1, [pc, #76]	; (8001198 <ESP_SendData+0x74>)
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <ESP_SendData+0x70>)
 800114e:	f013 ff81 	bl	8015054 <siprintf>

		/* The CIPSEND command doesn't have a return command
		 until the data is actually sent. Thus we check here whether
		 we got the '>' prompt or not. */
		Ret = atCommand(ESP82_cmdBuffer, strlen((char *) ESP82_cmdBuffer),
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <ESP_SendData+0x70>)
 8001154:	f7ff f84c 	bl	80001f0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <ESP_SendData+0x78>)
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <ESP_SendData+0x70>)
 8001160:	f000 f832 	bl	80011c8 <atCommand>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
				(uint8_t*) AT_SEND_PROMPT_STRING);

		/* Return Error */
		if (Ret != ESP8266_OK) {
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <ESP_SendData+0x4e>
			return ESP8266_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00b      	b.n	800118a <ESP_SendData+0x66>
		}

		/* Wait before sending data. */
		osDelay(1000); //not blocking delay
 8001172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001176:	f00f fcd9 	bl	8010b2c <osDelay>

		/* Send the data */
		Ret = atCommand(Buffer, Length, (uint8_t*) AT_SEND_OK_STRING);//AT_IPD_STRING);//
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <ESP_SendData+0x7c>)
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f822 	bl	80011c8 <atCommand>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
	}

	return Ret;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200003d4 	.word	0x200003d4
 8001198:	080167e0 	.word	0x080167e0
 800119c:	080167f4 	.word	0x080167f4
 80011a0:	080167fc 	.word	0x080167fc

080011a4 <ESP_ReceiveData>:
 * @param Length data buffer length.
 * @param RetLength data length received.
 * @return SUCCESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_ReceiveData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
	ESP8266_StatusTypeDef Ret;

	/* Receive the data from the host */
	Ret = getData(Buffer, Length, RetLength);
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f8df 	bl	8001378 <getData>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]

	return Ret;
 80011be:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <atCommand>:


ESP8266_StatusTypeDef atCommand(uint8_t* cmd, uint32_t Length, const uint8_t* Token) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <atCommand+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <atCommand+0x1a>
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <atCommand+0x5c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	e000      	b.n	80011e4 <atCommand+0x1c>
 80011e2:	2300      	movs	r3, #0
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <atCommand+0x5c>)
 80011e6:	7013      	strb	r3, [r2, #0]
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <atCommand+0x5c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <atCommand+0x2e>
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d00c      	beq.n	800120e <atCommand+0x46>
 80011f4:	e010      	b.n	8001218 <atCommand+0x50>
	case ESP82_State0:

		result = executeAtCmd(cmd, Length);
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f815 	bl	8001228 <executeAtCmd>
 80011fe:	4603      	mov	r3, r0
 8001200:	75fb      	strb	r3, [r7, #23]

		// To the next state.
		if(result == ESP8266_OK)
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <atCommand+0x46>
			internalState = ESP82_State1;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <atCommand+0x5c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
	case ESP82_State1:
		return responseAtCmd(Token);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f820 	bl	8001254 <responseAtCmd>
 8001214:	4603      	mov	r3, r0
 8001216:	e7ff      	b.n	8001218 <atCommand+0x50>

	}
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003d0 	.word	0x200003d0
 8001224:	20000456 	.word	0x20000456

08001228 <executeAtCmd>:
 * @brief  Run the AT command
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef executeAtCmd(uint8_t* cmd, uint32_t Length) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]

	/* Send the command */
	if (HAL_UART_F_Send((char*)cmd, Length) < 0) {
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f003 fecf 	bl	8004fdc <HAL_UART_F_Send>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	da01      	bge.n	8001248 <executeAtCmd+0x20>
		return ESP8266_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <executeAtCmd+0x22>
	}
	return ESP8266_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <responseAtCmd>:
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef responseAtCmd(const uint8_t* Token) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	uint32_t idx = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
	uint8_t RxChar;
	uint8_t status_io = 0;//0 is ok
 8001260:	2300      	movs	r3, #0
 8001262:	72fb      	strb	r3, [r7, #11]

	/* Reset the Rx buffer to make sure no previous data exist */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8001264:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001268:	2100      	movs	r1, #0
 800126a:	481d      	ldr	r0, [pc, #116]	; (80012e0 <responseAtCmd+0x8c>)
 800126c:	f013 faf1 	bl	8014852 <memset>
	//uint32_t currentTime = 0;
	/* Wait for reception */
	//do {
	while(1){
		/* Wait to recieve data */
		if (ESP_Receive(&RxChar, 1) != 0) {
 8001270:	f107 030a 	add.w	r3, r7, #10
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f836 	bl	80012e8 <ESP_Receive>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <responseAtCmd+0x46>
			RxBuffer[idx++] = RxChar;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60fa      	str	r2, [r7, #12]
 8001288:	7ab9      	ldrb	r1, [r7, #10]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <responseAtCmd+0x8c>)
 800128c:	54d1      	strb	r1, [r2, r3]
			status_io = 1;
			break;
		}

		/* Check that max buffer size has not been reached */
		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001294:	4293      	cmp	r3, r2
 8001296:	d106      	bne.n	80012a6 <responseAtCmd+0x52>
 8001298:	e002      	b.n	80012a0 <responseAtCmd+0x4c>
			status_io = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	72fb      	strb	r3, [r7, #11]
			break;
 800129e:	e015      	b.n	80012cc <responseAtCmd+0x78>
			status_io = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	72fb      	strb	r3, [r7, #11]
			break;
 80012a4:	e012      	b.n	80012cc <responseAtCmd+0x78>
		}

		/* Extract the Token */
		if (strstr((char *) RxBuffer, (char *) Token) != NULL) {
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <responseAtCmd+0x8c>)
 80012aa:	f013 ff10 	bl	80150ce <strstr>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <responseAtCmd+0x66>
			status_io = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	72fb      	strb	r3, [r7, #11]
			break;
 80012b8:	e008      	b.n	80012cc <responseAtCmd+0x78>
			//return ESP8266_OK;
		}

		/* Check if the message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <responseAtCmd+0x90>)
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <responseAtCmd+0x8c>)
 80012be:	f013 ff06 	bl	80150ce <strstr>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0d3      	beq.n	8001270 <responseAtCmd+0x1c>
			status_io = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	72fb      	strb	r3, [r7, #11]
		}
		//currentTime++;
		//osDelay(1);
	}//while(currentTime < ESP_LONG_TIME_OUT);

	if(status_io == 1)
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <responseAtCmd+0x82>
		return ESP8266_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <responseAtCmd+0x84>
	return ESP8266_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000d6f0 	.word	0x2000d6f0
 80012e4:	08016808 	.word	0x08016808

080012e8 <ESP_Receive>:




static int32_t ESP_Receive(uint8_t *Buffer, uint32_t Length) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	uint32_t ReadData = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	/* Loop until data received */
	while (Length--) {
 80012f6:	e032      	b.n	800135e <ESP_Receive+0x76>
		//uint32_t tickStart = HAL_GetTick();
		TickType_t tickStart = xTaskGetTickCount();
 80012f8:	f010 ffea 	bl	80122d0 <xTaskGetTickCount>
 80012fc:	6138      	str	r0, [r7, #16]
		uint32_t currentTime = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
		do {
			if (WiFiRxBuffer.head != WiFiRxBuffer.tail) {
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <ESP_Receive+0x8c>)
 8001304:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <ESP_Receive+0x8c>)
 800130a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800130e:	429a      	cmp	r2, r3
 8001310:	d01c      	beq.n	800134c <ESP_Receive+0x64>
				/* serial data available, so return data to user */
				*Buffer++ = WiFiRxBuffer.data[WiFiRxBuffer.head++];
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <ESP_Receive+0x8c>)
 8001314:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	b291      	uxth	r1, r2
 800131c:	4a15      	ldr	r2, [pc, #84]	; (8001374 <ESP_Receive+0x8c>)
 800131e:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <ESP_Receive+0x8c>)
 800132c:	5c52      	ldrb	r2, [r2, r1]
 800132e:	701a      	strb	r2, [r3, #0]

				ReadData++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]

				/* check for ring buffer wrap */
				if (WiFiRxBuffer.head >= ESP_BUFFERSIZE_CIRCULAR) {
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <ESP_Receive+0x8c>)
 8001338:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800133c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001340:	d30d      	bcc.n	800135e <ESP_Receive+0x76>
					/* Ring buffer wrap, so reset head pointer to start of buffer */
					WiFiRxBuffer.head = 0;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <ESP_Receive+0x8c>)
 8001344:	2200      	movs	r2, #0
 8001346:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
				}
				break;
 800134a:	e008      	b.n	800135e <ESP_Receive+0x76>
			}
		} while((xTaskGetTickCount() - tickStart) < ESP_DEFAULT_TIME_OUT);
 800134c:	f010 ffc0 	bl	80122d0 <xTaskGetTickCount>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800135a:	4293      	cmp	r3, r2
 800135c:	d9d1      	bls.n	8001302 <ESP_Receive+0x1a>
	while (Length--) {
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	603a      	str	r2, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1c7      	bne.n	80012f8 <ESP_Receive+0x10>
	}

	return ReadData;
 8001368:	697b      	ldr	r3, [r7, #20]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000dccc 	.word	0x2000dccc

08001378 <getData>:
 * @param  Buffer The buffer where to fill the received data
 * @param  Length the maximum data size to receive.
 * @param  RetLength Length of received data
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	uint8_t RxChar;
	uint32_t idx = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t LengthString[4];
	uint32_t LengthValue;
	uint8_t i = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	77fb      	strb	r3, [r7, #31]
	ESP8266_Boolean newChunk = ESP8266_FALSE;
 800138c:	2300      	movs	r3, #0
 800138e:	77bb      	strb	r3, [r7, #30]

	/* Reset the reception data length */
	*RetLength = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

	/* Reset the reception buffer */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8001396:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800139a:	2100      	movs	r1, #0
 800139c:	484f      	ldr	r0, [pc, #316]	; (80014dc <getData+0x164>)
 800139e:	f013 fa58 	bl	8014852 <memset>
	 by the string "+IPD,<chunk_size>:". Thus to get the actual data we need to:
	 - Receive data until getting the "+IPD," token, a new chunk is marked.
	 - Extract the 'chunk_size' then read the next 'chunk_size' bytes as actual data
	 - Mark end of the chunk.
	 - Repeat steps above until no more data is available. */
	uint32_t currentTime = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
	do{
	//while(1){
		if (ESP_Receive(&RxChar, 1) != 0) {
 80013a6:	f107 0317 	add.w	r3, r7, #23
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff9b 	bl	80012e8 <ESP_Receive>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d028      	beq.n	800140a <getData+0x92>
			/* The data chunk starts with +IPD,<chunk length>: */
			if (newChunk == ESP8266_TRUE) {
 80013b8:	7fbb      	ldrb	r3, [r7, #30]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d119      	bne.n	80013f2 <getData+0x7a>
				/* Read the next lendthValue bytes as part from the actual data. */
				if (LengthValue--) {
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	623a      	str	r2, [r7, #32]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00a      	beq.n	80013de <getData+0x66>
					*Buffer++ = RxChar;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60fa      	str	r2, [r7, #12]
 80013ce:	7dfa      	ldrb	r2, [r7, #23]
 80013d0:	701a      	strb	r2, [r3, #0]
					(*RetLength)++;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e009      	b.n	80013f2 <getData+0x7a>
				} else {
					/* Clear the buffer as the new chunk has ended. */
					newChunk = ESP8266_FALSE;
 80013de:	2300      	movs	r3, #0
 80013e0:	77bb      	strb	r3, [r7, #30]
					memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 80013e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013e6:	2100      	movs	r1, #0
 80013e8:	483c      	ldr	r0, [pc, #240]	; (80014dc <getData+0x164>)
 80013ea:	f013 fa32 	bl	8014852 <memset>
					idx = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			RxBuffer[idx++] = RxChar;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	627a      	str	r2, [r7, #36]	; 0x24
 80013f8:	7df9      	ldrb	r1, [r7, #23]
 80013fa:	4a38      	ldr	r2, [pc, #224]	; (80014dc <getData+0x164>)
 80013fc:	54d1      	strb	r1, [r2, r3]
			} else {
				break;
			}
		}

		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001404:	4293      	cmp	r3, r2
 8001406:	d110      	bne.n	800142a <getData+0xb2>
 8001408:	e007      	b.n	800141a <getData+0xa2>
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 800140a:	7fbb      	ldrb	r3, [r7, #30]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d158      	bne.n	80014c2 <getData+0x14a>
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d055      	beq.n	80014c2 <getData+0x14a>
				return ESP8266_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e05b      	b.n	80014d2 <getData+0x15a>
			/* In case of Buffer overflow, return error */
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 800141a:	7fbb      	ldrb	r3, [r7, #30]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d150      	bne.n	80014c2 <getData+0x14a>
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d04d      	beq.n	80014c2 <getData+0x14a>
				return ESP8266_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e053      	b.n	80014d2 <getData+0x15a>
				break;
			}
		}

		/* When a new chunk is met, extact its size */
		if ((strstr((char *) RxBuffer, AT_IPD_STRING) != NULL)
 800142a:	492d      	ldr	r1, [pc, #180]	; (80014e0 <getData+0x168>)
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <getData+0x164>)
 800142e:	f013 fe4e 	bl	80150ce <strstr>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d026      	beq.n	8001486 <getData+0x10e>
				&& (newChunk == ESP8266_FALSE)) {
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d123      	bne.n	8001486 <getData+0x10e>
			i = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
			memset(LengthString, '\0', 4);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2204      	movs	r2, #4
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f013 fa01 	bl	8014852 <memset>
			do {
				ESP_Receive(&RxChar, 1);
 8001450:	f107 0317 	add.w	r3, r7, #23
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff46 	bl	80012e8 <ESP_Receive>
				LengthString[i++] = RxChar;
 800145c:	7ffb      	ldrb	r3, [r7, #31]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	77fa      	strb	r2, [r7, #31]
 8001462:	7dfa      	ldrb	r2, [r7, #23]
 8001464:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001468:	440b      	add	r3, r1
 800146a:	f803 2c18 	strb.w	r2, [r3, #-24]
			} while (RxChar != ':');
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b3a      	cmp	r3, #58	; 0x3a
 8001472:	d1ed      	bne.n	8001450 <getData+0xd8>

			/* Get the buffer length */
			LengthValue = atoi((char *) LengthString);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4618      	mov	r0, r3
 800147a:	f013 f99f 	bl	80147bc <atoi>
 800147e:	4603      	mov	r3, r0
 8001480:	623b      	str	r3, [r7, #32]

			newChunk = ESP8266_TRUE;
 8001482:	2301      	movs	r3, #1
 8001484:	77bb      	strb	r3, [r7, #30]
		}

		/* Check if message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 8001486:	4917      	ldr	r1, [pc, #92]	; (80014e4 <getData+0x16c>)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <getData+0x164>)
 800148a:	f013 fe20 	bl	80150ce <strstr>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <getData+0x120>
			return ESP8266_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e01c      	b.n	80014d2 <getData+0x15a>
		}

		/* Check for the chunk end */
		if (strstr((char *) RxBuffer, AT_IPD_OK_STRING) != NULL) {
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <getData+0x170>)
 800149a:	4810      	ldr	r0, [pc, #64]	; (80014dc <getData+0x164>)
 800149c:	f013 fe17 	bl	80150ce <strstr>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <getData+0x132>
			newChunk = ESP8266_FALSE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	77bb      	strb	r3, [r7, #30]
		}
		currentTime++;
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
		osDelay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f00f fb3b 	bl	8010b2c <osDelay>
	}while(currentTime < ESP_LONG_TIME_OUT);
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014bc:	4293      	cmp	r3, r2
 80014be:	f67f af72 	bls.w	80013a6 <getData+0x2e>

	if(currentTime > ESP_LONG_TIME_OUT)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <getData+0x158>
		return ESP8266_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <getData+0x15a>

	return ESP8266_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000d6f0 	.word	0x2000d6f0
 80014e0:	08016810 	.word	0x08016810
 80014e4:	08016808 	.word	0x08016808
 80014e8:	08016818 	.word	0x08016818

080014ec <MQTTSerialize_connectLength>:
int MQTTSerialize_connectLength(MQTTPacket_connectData* options, MQTTProperties* connectProperties,
  MQTTProperties* willProperties)
#else
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
#endif
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	int len = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7a1b      	ldrb	r3, [r3, #8]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d102      	bne.n	8001506 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8001500:	230c      	movs	r3, #12
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e005      	b.n	8001512 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion >= 4)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7a1b      	ldrb	r3, [r3, #8]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d901      	bls.n	8001512 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800150e:	230a      	movs	r3, #10
 8001510:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	330c      	adds	r3, #12
 8001516:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800151a:	f000 fa29 	bl	8001970 <MQTTstrlen>
 800151e:	4603      	mov	r3, r0
 8001520:	3302      	adds	r3, #2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7edb      	ldrb	r3, [r3, #27]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3324      	adds	r3, #36	; 0x24
 8001534:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001538:	f000 fa1a 	bl	8001970 <MQTTstrlen>
 800153c:	4603      	mov	r3, r0
 800153e:	1c9c      	adds	r4, r3, #2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3330      	adds	r3, #48	; 0x30
 8001544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001548:	f000 fa12 	bl	8001970 <MQTTstrlen>
 800154c:	4603      	mov	r3, r0
 800154e:	4423      	add	r3, r4
 8001550:	3302      	adds	r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <MQTTSerialize_connectLength+0x7c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00a      	beq.n	800157e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3340      	adds	r3, #64	; 0x40
 800156c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001570:	f000 f9fe 	bl	8001970 <MQTTstrlen>
 8001574:	4603      	mov	r3, r0
 8001576:	3302      	adds	r3, #2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <MQTTSerialize_connectLength+0xa2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00a      	beq.n	80015a4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	334c      	adds	r3, #76	; 0x4c
 8001592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001596:	f000 f9eb 	bl	8001970 <MQTTstrlen>
 800159a:	4603      	mov	r3, r0
 800159c:	3302      	adds	r3, #2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
		  len += MQTTProperties_len(willProperties);
	}
#endif

	FUNC_EXIT_RC(len);
	return len;
 80015a4:	68fb      	ldr	r3, [r7, #12]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
	...

080015b0 <MQTTSerialize_connect>:
int MQTTV5Serialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options,
  MQTTProperties* connectProperties, MQTTProperties* willProperties)
#else
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
#endif
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
	int len = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
	FUNC_ENTRY;
	#if defined(MQTTV5)
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options,
		         connectProperties, willProperties)) > buflen)
	#else
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff8a 	bl	80014ec <MQTTSerialize_connectLength>
 80015d8:	6238      	str	r0, [r7, #32]
 80015da:	6a38      	ldr	r0, [r7, #32]
 80015dc:	f000 f92e 	bl	800183c <MQTTPacket_len>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4293      	cmp	r3, r2
 80015e6:	da03      	bge.n	80015f0 <MQTTSerialize_connect+0x40>
	#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80015e8:	f06f 0301 	mvn.w	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80015ee:	e0ca      	b.n	8001786 <MQTTSerialize_connect+0x1d6>
	}

	header.byte = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80015f4:	7e3b      	ldrb	r3, [r7, #24]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f362 1307 	bfi	r3, r2, #4, #4
 80015fc:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80015fe:	7e3a      	ldrb	r2, [r7, #24]
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f927 	bl	800185a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f8c1 	bl	8001798 <MQTTPacket_encode>
 8001616:	4602      	mov	r2, r0
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 5 || options->MQTTVersion == 4)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7a1b      	ldrb	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d003      	beq.n	800162e <MQTTSerialize_connect+0x7e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7a1b      	ldrb	r3, [r3, #8]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d106      	bne.n	800163c <MQTTSerialize_connect+0x8c>
		writeCString(&ptr, "MQTT");
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4957      	ldr	r1, [pc, #348]	; (8001790 <MQTTSerialize_connect+0x1e0>)
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f94e 	bl	80018d6 <writeCString>
 800163a:	e00a      	b.n	8001652 <MQTTSerialize_connect+0xa2>
	else if (options->MQTTVersion == 3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7a1b      	ldrb	r3, [r3, #8]
 8001640:	2b03      	cmp	r3, #3
 8001642:	f040 809f 	bne.w	8001784 <MQTTSerialize_connect+0x1d4>
		writeCString(&ptr, "MQIsdp");
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4952      	ldr	r1, [pc, #328]	; (8001794 <MQTTSerialize_connect+0x1e4>)
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f942 	bl	80018d6 <writeCString>
	else
	  goto exit;
	writeChar(&ptr, (char)options->MQTTVersion);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a1a      	ldrb	r2, [r3, #8]
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f8fc 	bl	800185a <writeChar>

	flags.all = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e9b      	ldrb	r3, [r3, #26]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	7d3b      	ldrb	r3, [r7, #20]
 8001672:	f362 0341 	bfi	r3, r2, #1, #1
 8001676:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7edb      	ldrb	r3, [r3, #27]
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2da      	uxtb	r2, r3
 8001686:	7d3b      	ldrb	r3, [r7, #20]
 8001688:	f362 0382 	bfi	r3, r2, #2, #1
 800168c:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800168e:	7d3b      	ldrb	r3, [r7, #20]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d013      	beq.n	80016c2 <MQTTSerialize_connect+0x112>
	{
		flags.bits.willQoS = options->will.qos;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	7d3b      	ldrb	r3, [r7, #20]
 80016a8:	f362 03c4 	bfi	r3, r2, #3, #2
 80016ac:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	7d3b      	ldrb	r3, [r7, #20]
 80016bc:	f362 1345 	bfi	r3, r2, #5, #1
 80016c0:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <MQTTSerialize_connect+0x122>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <MQTTSerialize_connect+0x12a>
		flags.bits.username = 1;
 80016d2:	7d3b      	ldrb	r3, [r7, #20]
 80016d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d8:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <MQTTSerialize_connect+0x13a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <MQTTSerialize_connect+0x142>
		flags.bits.password = 1;
 80016ea:	7d3b      	ldrb	r3, [r7, #20]
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80016f2:	7d3a      	ldrb	r2, [r7, #20]
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f8ad 	bl	800185a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8b1b      	ldrh	r3, [r3, #24]
 8001704:	461a      	mov	r2, r3
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8b9 	bl	8001884 <writeInt>
#if defined(MQTTV5)
	if (options->MQTTVersion == 5)
	  MQTTProperties_write(&ptr, connectProperties);
#endif
	writeMQTTString(&ptr, options->clientID);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f107 001c 	add.w	r0, r7, #28
 8001718:	330c      	adds	r3, #12
 800171a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171c:	f000 f8fa 	bl	8001914 <writeMQTTString>
	if (options->willFlag)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7edb      	ldrb	r3, [r3, #27]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00d      	beq.n	8001744 <MQTTSerialize_connect+0x194>
#if defined(MQTTV5)
		/* write will properties */
		if (options->MQTTVersion == 5 && willProperties)
		  MQTTProperties_write(&ptr, willProperties);
#endif
		writeMQTTString(&ptr, options->will.topicName);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f107 001c 	add.w	r0, r7, #28
 800172e:	3324      	adds	r3, #36	; 0x24
 8001730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001732:	f000 f8ef 	bl	8001914 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f107 001c 	add.w	r0, r7, #28
 800173c:	3330      	adds	r3, #48	; 0x30
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	f000 f8e8 	bl	8001914 <writeMQTTString>
	}
	if (flags.bits.username)
 8001744:	7d3b      	ldrb	r3, [r7, #20]
 8001746:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <MQTTSerialize_connect+0x1ae>
		writeMQTTString(&ptr, options->username);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f107 001c 	add.w	r0, r7, #28
 8001756:	3340      	adds	r3, #64	; 0x40
 8001758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800175a:	f000 f8db 	bl	8001914 <writeMQTTString>
	if (flags.bits.password)
 800175e:	7d3b      	ldrb	r3, [r7, #20]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <MQTTSerialize_connect+0x1c8>
		writeMQTTString(&ptr, options->password);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f107 001c 	add.w	r0, r7, #28
 8001770:	334c      	adds	r3, #76	; 0x4c
 8001772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001774:	f000 f8ce 	bl	8001914 <writeMQTTString>

	rc = ptr - buf;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	e000      	b.n	8001786 <MQTTSerialize_connect+0x1d6>
	  goto exit;
 8001784:	bf00      	nop

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001788:	4618      	mov	r0, r3
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08016820 	.word	0x08016820
 8001794:	08016828 	.word	0x08016828

08001798 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	425a      	negs	r2, r3
 80017aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017b2:	bf58      	it	pl
 80017b4:	4253      	negpl	r3, r2
 80017b6:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da00      	bge.n	80017c0 <MQTTPacket_encode+0x28>
 80017be:	337f      	adds	r3, #127	; 0x7f
 80017c0:	11db      	asrs	r3, r3, #7
 80017c2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dd03      	ble.n	80017d2 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d0:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	7afa      	ldrb	r2, [r7, #11]
 80017e0:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dcde      	bgt.n	80017a6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <MQTTPacket_VBIlen>:
	return len;
}


int MQTTPacket_VBIlen(int rem_len)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	int rc = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]

	if (rem_len < 128)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b7f      	cmp	r3, #127	; 0x7f
 8001806:	dc02      	bgt.n	800180e <MQTTPacket_VBIlen+0x18>
		rc = 1;
 8001808:	2301      	movs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e00f      	b.n	800182e <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 16384)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001814:	da02      	bge.n	800181c <MQTTPacket_VBIlen+0x26>
		rc = 2;
 8001816:	2302      	movs	r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e008      	b.n	800182e <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 2097152)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001822:	da02      	bge.n	800182a <MQTTPacket_VBIlen+0x34>
		rc = 3;
 8001824:	2303      	movs	r3, #3
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e001      	b.n	800182e <MQTTPacket_VBIlen+0x38>
	else
		rc = 4;
 800182a:	2304      	movs	r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
  return rc;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* header byte + remaining length */
	return rem_len + 1  + MQTTPacket_VBIlen(rem_len);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	1c5c      	adds	r4, r3, #1
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffd4 	bl	80017f6 <MQTTPacket_VBIlen>
 800184e:	4603      	mov	r3, r0
 8001850:	4423      	add	r3, r4
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bd90      	pop	{r4, r7, pc}

0800185a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	da00      	bge.n	8001896 <writeInt+0x12>
 8001894:	33ff      	adds	r3, #255	; 0xff
 8001896:	121b      	asrs	r3, r3, #8
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	425a      	negs	r2, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	bf58      	it	pl
 80018b6:	4253      	negpl	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7fe fc85 	bl	80001f0 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80018ea:	68f9      	ldr	r1, [r7, #12]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffc9 	bl	8001884 <writeInt>
	memcpy(*pptr, string, len);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6839      	ldr	r1, [r7, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f012 ff9e 	bl	801483c <memcpy>
	*pptr += len;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	441a      	add	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4638      	mov	r0, r7
 800191e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	dd12      	ble.n	800194e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4619      	mov	r1, r3
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff ffa9 	bl	8001884 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f012 ff7e 	bl	801483c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	441a      	add	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800194c:	e00c      	b.n	8001968 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff ffbc 	bl	80018d6 <writeCString>
}
 800195e:	e003      	b.n	8001968 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff ff8e 	bl	8001884 <writeInt>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc31 	bl	80001f0 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e001      	b.n	8001998 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	617b      	str	r3, [r7, #20]
	return rc;
 8001998:	697b      	ldr	r3, [r7, #20]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <MQTTSerialize_publishLength>:
#if defined(MQTTV5)
int MQTTV5Serialize_publishLength(int qos, MQTTString topicName, int payloadlen, MQTTProperties* properties)
#else
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
#endif
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	4638      	mov	r0, r7
 80019ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80019b4:	463b      	mov	r3, r7
 80019b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ba:	f7ff ffd9 	bl	8001970 <MQTTstrlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	1c9a      	adds	r2, r3, #2
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	4413      	add	r3, r2
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd02      	ble.n	80019d8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3302      	adds	r3, #2
 80019d6:	617b      	str	r3, [r7, #20]
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 80019d8:	697b      	ldr	r3, [r7, #20]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <MQTTSerialize_publish>:
		MQTTString topicName, MQTTProperties* properties, unsigned char* payload, int payloadlen)
#else
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
#endif
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b08a      	sub	sp, #40	; 0x28
 80019e6:	af02      	add	r7, sp, #8
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTV5Serialize_publishLength(qos, topicName, payloadlen, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0c:	6838      	ldr	r0, [r7, #0]
 8001a0e:	f7ff ffc8 	bl	80019a2 <MQTTSerialize_publishLength>
 8001a12:	61b8      	str	r0, [r7, #24]
 8001a14:	69b8      	ldr	r0, [r7, #24]
 8001a16:	f7ff ff11 	bl	800183c <MQTTPacket_len>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	da03      	bge.n	8001a2a <MQTTSerialize_publish+0x48>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001a22:	f06f 0301 	mvn.w	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001a28:	e04d      	b.n	8001ac6 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f362 1307 	bfi	r3, r2, #4, #4
 8001a32:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	7c3b      	ldrb	r3, [r7, #16]
 8001a3e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a42:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7c3b      	ldrb	r3, [r7, #16]
 8001a4e:	f362 0342 	bfi	r3, r2, #1, #2
 8001a52:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001a54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	f362 0300 	bfi	r3, r2, #0, #1
 8001a64:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001a66:	7c3a      	ldrb	r2, [r7, #16]
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fef3 	bl	800185a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe8d 	bl	8001798 <MQTTPacket_encode>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4413      	add	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001a86:	f107 0014 	add.w	r0, r7, #20
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a90:	f7ff ff40 	bl	8001914 <writeMQTTString>

	if (qos > 0)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd06      	ble.n	8001aa8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001a9a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff feee 	bl	8001884 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
		goto exit;
#endif

	memcpy(ptr, payload, payloadlen);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f012 fec4 	bl	801483c <memcpy>
	ptr += payloadlen;
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	4413      	add	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <MQTTSerialize_subscribeLength>:
#if defined(MQTTV5)
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[], MQTTProperties* properties)
#else
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
#endif
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001ada:	2302      	movs	r3, #2
 8001adc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e013      	b.n	8001b0c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	461a      	mov	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af8:	f7ff ff3a 	bl	8001970 <MQTTstrlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	3303      	adds	r3, #3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	4413      	add	r3, r2
 8001b04:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbe7      	blt.n	8001ae4 <MQTTSerialize_subscribeLength+0x14>
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001b14:	68bb      	ldr	r3, [r7, #8]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <MQTTSerialize_subscribe>:
		MQTTProperties* properties, int count, MQTTString topicFilters[], int requestedQoSs[], struct subscribeOptions options[])
#else
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
#endif
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b08a      	sub	sp, #40	; 0x28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b4c:	f7ff ffc0 	bl	8001ad0 <MQTTSerialize_subscribeLength>
 8001b50:	61f8      	str	r0, [r7, #28]
 8001b52:	69f8      	ldr	r0, [r7, #28]
 8001b54:	f7ff fe72 	bl	800183c <MQTTPacket_len>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	da03      	bge.n	8001b68 <MQTTSerialize_subscribe+0x4a>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001b60:	f06f 0301 	mvn.w	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001b66:	e053      	b.n	8001c10 <MQTTSerialize_subscribe+0xf2>
	}

	header.byte = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	743b      	strb	r3, [r7, #16]
	header.bits.type = SUBSCRIBE;
 8001b6c:	7c3b      	ldrb	r3, [r7, #16]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	f362 1307 	bfi	r3, r2, #4, #4
 8001b74:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	7c3b      	ldrb	r3, [r7, #16]
 8001b80:	f362 03c3 	bfi	r3, r2, #3, #1
 8001b84:	743b      	strb	r3, [r7, #16]
	header.bits.qos = 1;
 8001b86:	7c3b      	ldrb	r3, [r7, #16]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f362 0342 	bfi	r3, r2, #1, #2
 8001b8e:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001b90:	7c3a      	ldrb	r2, [r7, #16]
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fe5e 	bl	800185a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fdf8 	bl	8001798 <MQTTPacket_encode>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

	writeInt(&ptr, packetid);
 8001bb0:	88ba      	ldrh	r2, [r7, #4]
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe63 	bl	8001884 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
	  goto exit;
#endif

	for (i = 0; i < count; ++i)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	e01c      	b.n	8001bfe <MQTTSerialize_subscribe+0xe0>
	{
		unsigned char opts = requestedQoSs[i];
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	76fb      	strb	r3, [r7, #27]
			opts |= (options[i].noLocal << 2); /* 1 bit */
			opts |= (options[i].retainAsPublished << 3); /* 1 bit */
			opts |= (options[i].retainHandling << 4); /* 2 bits */
		}
#endif
		writeMQTTString(&ptr, topicFilters[i]);
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bde:	4413      	add	r3, r2
 8001be0:	f107 0014 	add.w	r0, r7, #20
 8001be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be6:	f7ff fe95 	bl	8001914 <writeMQTTString>
		writeChar(&ptr, opts);
 8001bea:	7efa      	ldrb	r2, [r7, #27]
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe31 	bl	800185a <writeChar>
	for (i = 0; i < count; ++i)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbde      	blt.n	8001bc4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <BMP280_i2c_read_reg>:


extern I2C_HandleTypeDef hi2c1;

uint8_t BMP280_i2c_read_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t* data, uint16_t lenght)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	603a      	str	r2, [r7, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_buff[1];

	tx_buff[0] = internal_adr;
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, TIMEOUT);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <BMP280_i2c_read_reg+0x54>)
 8001c48:	f004 fee2 	bl	8006a10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, data, lenght, TIMEOUT);
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	b299      	uxth	r1, r3
 8001c54:	88ba      	ldrh	r2, [r7, #4]
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <BMP280_i2c_read_reg+0x54>)
 8001c62:	f004 ffc9 	bl	8006bf8 <HAL_I2C_Master_Receive>

	return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000e538 	.word	0x2000e538

08001c74 <BMP280_i2c_write_reg>:


void BMP280_i2c_write_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	71bb      	strb	r3, [r7, #6]
 8001c82:	4613      	mov	r3, r2
 8001c84:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, sizeof(tx_buff), TIMEOUT);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <BMP280_i2c_write_reg+0x38>)
 8001ca0:	f004 feb6 	bl	8006a10 <HAL_I2C_Master_Transmit>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000e538 	.word	0x2000e538

08001cb0 <BMP280_get_calib_values>:

void BMP280_get_calib_values(bmp280_dev *dev)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	uint8_t temp[BMP280_CALIB_DATA_SIZE], starting_address=0x88;
 8001cb8:	2388      	movs	r3, #136	; 0x88
 8001cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, temp, BMP280_CALIB_DATA_SIZE);
 8001cbe:	f107 020c 	add.w	r2, r7, #12
 8001cc2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	20ee      	movs	r0, #238	; 0xee
 8001cca:	f7ff ffa7 	bl	8001c1c <BMP280_i2c_read_reg>

	dev->calib_param.dig_t1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	7b3b      	ldrb	r3, [r7, #12]
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	b29a      	uxth	r2, r3
	dev->calib_param.dig_t1 =
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	801a      	strh	r2, [r3, #0]
	dev->calib_param.dig_t2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t2 =
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	805a      	strh	r2, [r3, #2]
	dev->calib_param.dig_t3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001cf4:	7c7b      	ldrb	r3, [r7, #17]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	7c3b      	ldrb	r3, [r7, #16]
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t3 =
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	809a      	strh	r2, [r3, #4]
	dev->calib_param.dig_p1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7cbb      	ldrb	r3, [r7, #18]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	b29a      	uxth	r2, r3
	dev->calib_param.dig_p1 =
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	80da      	strh	r2, [r3, #6]
	dev->calib_param.dig_p2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001d1a:	7d7b      	ldrb	r3, [r7, #21]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	7d3b      	ldrb	r3, [r7, #20]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p2 =
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	811a      	strh	r2, [r3, #8]
	dev->calib_param.dig_p3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	7dbb      	ldrb	r3, [r7, #22]
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p3 =
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	815a      	strh	r2, [r3, #10]
	dev->calib_param.dig_p4 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001d3e:	7e7b      	ldrb	r3, [r7, #25]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	7e3b      	ldrb	r3, [r7, #24]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p4 =
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	819a      	strh	r2, [r3, #12]
	dev->calib_param.dig_p5 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001d50:	7efb      	ldrb	r3, [r7, #27]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	7ebb      	ldrb	r3, [r7, #26]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p5 =
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	81da      	strh	r2, [r3, #14]
	dev->calib_param.dig_p6 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001d62:	7f7b      	ldrb	r3, [r7, #29]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7f3b      	ldrb	r3, [r7, #28]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p6 =
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	821a      	strh	r2, [r3, #16]
	dev->calib_param.dig_p7 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001d74:	7ffb      	ldrb	r3, [r7, #31]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	7fbb      	ldrb	r3, [r7, #30]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p7 =
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	825a      	strh	r2, [r3, #18]
	dev->calib_param.dig_p8 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001d86:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p8 =
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	829a      	strh	r2, [r3, #20]
	dev->calib_param.dig_p9 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p9 =
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	82da      	strh	r2, [r3, #22]

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <BMP280_init>:

void BMP280_init(bmp280_dev *dev)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	uint8_t register_F4 = 0b01010111;
 8001dc2:	2357      	movs	r3, #87	; 0x57
 8001dc4:	73fb      	strb	r3, [r7, #15]
	uint8_t register_F5 = 0b10010000;
 8001dc6:	2390      	movs	r3, #144	; 0x90
 8001dc8:	73bb      	strb	r3, [r7, #14]

	BMP280_i2c_write_reg(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	21f4      	movs	r1, #244	; 0xf4
 8001dd0:	20ee      	movs	r0, #238	; 0xee
 8001dd2:	f7ff ff4f 	bl	8001c74 <BMP280_i2c_write_reg>
	BMP280_i2c_write_reg(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001dd6:	7bbb      	ldrb	r3, [r7, #14]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	21f5      	movs	r1, #245	; 0xf5
 8001ddc:	20ee      	movs	r0, #238	; 0xee
 8001dde:	f7ff ff49 	bl	8001c74 <BMP280_i2c_write_reg>

	BMP280_get_calib_values(dev);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff64 	bl	8001cb0 <BMP280_get_calib_values>
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <BMP280_calc_values>:

void BMP280_calc_values(bmp280_dev *dev)
{
 8001df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df4:	b090      	sub	sp, #64	; 0x40
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	uint8_t rx_buff[6], starting_address=0xF7;
 8001dfa:	23f7      	movs	r3, #247	; 0xf7
 8001dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t * data = NULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38

	do
	{
		BMP280_i2c_read_reg(BMP280_dev_address, 0xF3, data, 1);
 8001e04:	2301      	movs	r3, #1
 8001e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e08:	21f3      	movs	r1, #243	; 0xf3
 8001e0a:	20ee      	movs	r0, #238	; 0xee
 8001e0c:	f7ff ff06 	bl	8001c1c <BMP280_i2c_read_reg>
	} while(((*(data)&0b00001000)==8)||((*(data)&0b00000001)==1));
 8001e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f3      	bne.n	8001e04 <BMP280_calc_values+0x14>
 8001e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ed      	bne.n	8001e04 <BMP280_calc_values+0x14>


	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, rx_buff, sizeof(rx_buff));
 8001e28:	f107 0220 	add.w	r2, r7, #32
 8001e2c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001e30:	2306      	movs	r3, #6
 8001e32:	20ee      	movs	r0, #238	; 0xee
 8001e34:	f7ff fef2 	bl	8001c1c <BMP280_i2c_read_reg>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 8001e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e3c:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[4];
 8001e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e42:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[5];
 8001e44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e48:	617b      	str	r3, [r7, #20]
	dev->raw_data.temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	031a      	lsls	r2, r3, #12
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	441a      	add	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	4413      	add	r3, r2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	61da      	str	r2, [r3, #28]

	temp[2]=rx_buff[0];
 8001e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e64:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[1];
 8001e66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e6a:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[2];
 8001e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e70:	617b      	str	r3, [r7, #20]
	dev->raw_data.pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	031a      	lsls	r2, r3, #12
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	441a      	add	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	621a      	str	r2, [r3, #32]

	double var1, var2;
	var1=(((double)dev->raw_data.temperature_raw)/16384.0-((double)dev->calib_param.dig_t1)/1024.0)*((double)dev->calib_param.dig_t2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb5a 	bl	8000544 <__aeabi_i2d>
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4bd0      	ldr	r3, [pc, #832]	; (80021d8 <BMP280_calc_values+0x3e8>)
 8001e96:	f7fe fce9 	bl	800086c <__aeabi_ddiv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	4625      	mov	r5, r4
 8001ea0:	461c      	mov	r4, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb3c 	bl	8000524 <__aeabi_ui2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4bca      	ldr	r3, [pc, #808]	; (80021dc <BMP280_calc_values+0x3ec>)
 8001eb2:	f7fe fcdb 	bl	800086c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe f9f3 	bl	80002a8 <__aeabi_dsub>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	4625      	mov	r5, r4
 8001ec8:	461c      	mov	r4, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb37 	bl	8000544 <__aeabi_i2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4620      	mov	r0, r4
 8001edc:	4629      	mov	r1, r5
 8001ede:	f7fe fb9b 	bl	8000618 <__aeabi_dmul>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=((((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0)*(((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0))*((double)dev->calib_param.dig_t3);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb28 	bl	8000544 <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001efc:	f7fe fcb6 	bl	800086c <__aeabi_ddiv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	4625      	mov	r5, r4
 8001f06:	461c      	mov	r4, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb09 	bl	8000524 <__aeabi_ui2d>
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4bb2      	ldr	r3, [pc, #712]	; (80021e0 <BMP280_calc_values+0x3f0>)
 8001f18:	f7fe fca8 	bl	800086c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe f9c0 	bl	80002a8 <__aeabi_dsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4625      	mov	r5, r4
 8001f2e:	461c      	mov	r4, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb05 	bl	8000544 <__aeabi_i2d>
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001f42:	f7fe fc93 	bl	800086c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fae6 	bl	8000524 <__aeabi_ui2d>
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4ba0      	ldr	r3, [pc, #640]	; (80021e0 <BMP280_calc_values+0x3f0>)
 8001f5e:	f7fe fc85 	bl	800086c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4640      	mov	r0, r8
 8001f68:	4649      	mov	r1, r9
 8001f6a:	f7fe f99d 	bl	80002a8 <__aeabi_dsub>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f7fe fb4f 	bl	8000618 <__aeabi_dmul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4625      	mov	r5, r4
 8001f80:	461c      	mov	r4, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fadb 	bl	8000544 <__aeabi_i2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4620      	mov	r0, r4
 8001f94:	4629      	mov	r1, r5
 8001f96:	f7fe fb3f 	bl	8000618 <__aeabi_dmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	dev->calib_param.t_fine = (int32_t)(var1+var2);
 8001fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fa6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001faa:	f7fe f97f 	bl	80002ac <__adddf3>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	f7fe fd41 	bl	8000a3c <__aeabi_d2iz>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
volatile	float T = (var1+var2)/5120.0;
 8001fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fc8:	f7fe f970 	bl	80002ac <__adddf3>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <BMP280_calc_values+0x3f4>)
 8001fda:	f7fe fc47 	bl	800086c <__aeabi_ddiv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	f7fe fd51 	bl	8000a8c <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

	var1=((double)dev->calib_param.t_fine/2.0)-64000.0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe faa6 	bl	8000544 <__aeabi_i2d>
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002000:	f7fe fc34 	bl	800086c <__aeabi_ddiv>
 8002004:	4603      	mov	r3, r0
 8002006:	460c      	mov	r4, r1
 8002008:	4618      	mov	r0, r3
 800200a:	4621      	mov	r1, r4
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b75      	ldr	r3, [pc, #468]	; (80021e8 <BMP280_calc_values+0x3f8>)
 8002012:	f7fe f949 	bl	80002a8 <__aeabi_dsub>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=var1*var1*((double)dev->calib_param.dig_p6)/32768.0;
 800201e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002022:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002026:	f7fe faf7 	bl	8000618 <__aeabi_dmul>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	4625      	mov	r5, r4
 8002030:	461c      	mov	r4, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa83 	bl	8000544 <__aeabi_i2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f7fe fae7 	bl	8000618 <__aeabi_dmul>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <BMP280_calc_values+0x3fc>)
 8002058:	f7fe fc08 	bl	800086c <__aeabi_ddiv>
 800205c:	4603      	mov	r3, r0
 800205e:	460c      	mov	r4, r1
 8002060:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=var2+var1*((double)dev->calib_param.dig_p5)*2.0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fa6a 	bl	8000544 <__aeabi_i2d>
 8002070:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002074:	f7fe fad0 	bl	8000618 <__aeabi_dmul>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	f7fe f912 	bl	80002ac <__adddf3>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	461a      	mov	r2, r3
 800208e:	4623      	mov	r3, r4
 8002090:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002094:	f7fe f90a 	bl	80002ac <__adddf3>
 8002098:	4603      	mov	r3, r0
 800209a:	460c      	mov	r4, r1
 800209c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=(var2/4.0)+(((double)dev->calib_param.dig_p4)*65536.0);
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <BMP280_calc_values+0x400>)
 80020a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020aa:	f7fe fbdf 	bl	800086c <__aeabi_ddiv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	4625      	mov	r5, r4
 80020b4:	461c      	mov	r4, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa41 	bl	8000544 <__aeabi_i2d>
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <BMP280_calc_values+0x404>)
 80020c8:	f7fe faa6 	bl	8000618 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe f8ea 	bl	80002ac <__adddf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var1=(((double)dev->calib_param.dig_p3)*var1*var1/524288.0+((double)dev->calib_param.dig_p2)*var1)/524288.0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa2c 	bl	8000544 <__aeabi_i2d>
 80020ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020f0:	f7fe fa92 	bl	8000618 <__aeabi_dmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	4618      	mov	r0, r3
 80020fa:	4621      	mov	r1, r4
 80020fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002100:	f7fe fa8a 	bl	8000618 <__aeabi_dmul>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	4618      	mov	r0, r3
 800210a:	4621      	mov	r1, r4
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <BMP280_calc_values+0x408>)
 8002112:	f7fe fbab 	bl	800086c <__aeabi_ddiv>
 8002116:	4603      	mov	r3, r0
 8002118:	460c      	mov	r4, r1
 800211a:	4625      	mov	r5, r4
 800211c:	461c      	mov	r4, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa0d 	bl	8000544 <__aeabi_i2d>
 800212a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800212e:	f7fe fa73 	bl	8000618 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe f8b7 	bl	80002ac <__adddf3>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <BMP280_calc_values+0x408>)
 800214c:	f7fe fb8e 	bl	800086c <__aeabi_ddiv>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var1=(1.0+var1/32768.0)*((double)dev->calib_param.dig_p1);
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <BMP280_calc_values+0x3fc>)
 800215e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002162:	f7fe fb83 	bl	800086c <__aeabi_ddiv>
 8002166:	4603      	mov	r3, r0
 8002168:	460c      	mov	r4, r1
 800216a:	4618      	mov	r0, r3
 800216c:	4621      	mov	r1, r4
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <BMP280_calc_values+0x40c>)
 8002174:	f7fe f89a 	bl	80002ac <__adddf3>
 8002178:	4603      	mov	r3, r0
 800217a:	460c      	mov	r4, r1
 800217c:	4625      	mov	r5, r4
 800217e:	461c      	mov	r4, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	88db      	ldrh	r3, [r3, #6]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9cd 	bl	8000524 <__aeabi_ui2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe fa41 	bl	8000618 <__aeabi_dmul>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
volatile	double p=1048576.0-(double)dev->raw_data.pressure_raw;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9be 	bl	8000524 <__aeabi_ui2d>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	461a      	mov	r2, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	f04f 0000 	mov.w	r0, #0
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <BMP280_calc_values+0x410>)
 80021b6:	f7fe f877 	bl	80002a8 <__aeabi_dsub>
 80021ba:	4603      	mov	r3, r0
 80021bc:	460c      	mov	r4, r1
 80021be:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p=(p-(var2/4096.0))*6250.0/var1;
 80021c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <BMP280_calc_values+0x414>)
 80021cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021d0:	f7fe fb4c 	bl	800086c <__aeabi_ddiv>
 80021d4:	e018      	b.n	8002208 <BMP280_calc_values+0x418>
 80021d6:	bf00      	nop
 80021d8:	40d00000 	.word	0x40d00000
 80021dc:	40900000 	.word	0x40900000
 80021e0:	40c00000 	.word	0x40c00000
 80021e4:	40b40000 	.word	0x40b40000
 80021e8:	40ef4000 	.word	0x40ef4000
 80021ec:	40e00000 	.word	0x40e00000
 80021f0:	40100000 	.word	0x40100000
 80021f4:	40f00000 	.word	0x40f00000
 80021f8:	41200000 	.word	0x41200000
 80021fc:	3ff00000 	.word	0x3ff00000
 8002200:	41300000 	.word	0x41300000
 8002204:	40b00000 	.word	0x40b00000
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f84a 	bl	80002a8 <__aeabi_dsub>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	4618      	mov	r0, r3
 800221a:	4621      	mov	r1, r4
 800221c:	a358      	add	r3, pc, #352	; (adr r3, 8002380 <BMP280_calc_values+0x590>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f9f9 	bl	8000618 <__aeabi_dmul>
 8002226:	4603      	mov	r3, r0
 8002228:	460c      	mov	r4, r1
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002232:	f7fe fb1b 	bl	800086c <__aeabi_ddiv>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1=((double)dev->calib_param.dig_p9)*p*p/2147483648.0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f97d 	bl	8000544 <__aeabi_i2d>
 800224a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	f7fe f9e1 	bl	8000618 <__aeabi_dmul>
 8002256:	4603      	mov	r3, r0
 8002258:	460c      	mov	r4, r1
 800225a:	4618      	mov	r0, r3
 800225c:	4621      	mov	r1, r4
 800225e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002262:	461a      	mov	r2, r3
 8002264:	4623      	mov	r3, r4
 8002266:	f7fe f9d7 	bl	8000618 <__aeabi_dmul>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	4618      	mov	r0, r3
 8002270:	4621      	mov	r1, r4
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <BMP280_calc_values+0x578>)
 8002278:	f7fe faf8 	bl	800086c <__aeabi_ddiv>
 800227c:	4603      	mov	r3, r0
 800227e:	460c      	mov	r4, r1
 8002280:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=p*((double)dev->calib_param.dig_p8)/32768.0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f95a 	bl	8000544 <__aeabi_i2d>
 8002290:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002294:	461a      	mov	r2, r3
 8002296:	4623      	mov	r3, r4
 8002298:	f7fe f9be 	bl	8000618 <__aeabi_dmul>
 800229c:	4603      	mov	r3, r0
 800229e:	460c      	mov	r4, r1
 80022a0:	4618      	mov	r0, r3
 80022a2:	4621      	mov	r1, r4
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <BMP280_calc_values+0x57c>)
 80022aa:	f7fe fadf 	bl	800086c <__aeabi_ddiv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	460c      	mov	r4, r1
 80022b2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	p=p+(var1+var2+((double)dev->calib_param.dig_p7))/16.0;
 80022b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022be:	f7fd fff5 	bl	80002ac <__adddf3>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	4625      	mov	r5, r4
 80022c8:	461c      	mov	r4, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f937 	bl	8000544 <__aeabi_i2d>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f7fd ffe5 	bl	80002ac <__adddf3>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	4618      	mov	r0, r3
 80022e8:	4621      	mov	r1, r4
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <BMP280_calc_values+0x580>)
 80022f0:	f7fe fabc 	bl	800086c <__aeabi_ddiv>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	4618      	mov	r0, r3
 80022fa:	4621      	mov	r1, r4
 80022fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002300:	461a      	mov	r2, r3
 8002302:	4623      	mov	r3, r4
 8002304:	f7fd ffd2 	bl	80002ac <__adddf3>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
 800230c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	dev->data.temperature=T;
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
	dev->data.pressure=p;
 8002316:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800231a:	4618      	mov	r0, r3
 800231c:	4621      	mov	r1, r4
 800231e:	f7fe fbb5 	bl	8000a8c <__aeabi_d2f>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
	dev->data.altitude=44330.0f*(1-powf(dev->data.pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800232e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002374 <BMP280_calc_values+0x584>
 8002332:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002336:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002378 <BMP280_calc_values+0x588>
 800233a:	eeb0 0a66 	vmov.f32	s0, s13
 800233e:	f013 fcfb 	bl	8015d38 <powf>
 8002342:	eeb0 7a40 	vmov.f32	s14, s0
 8002346:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800234a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800237c <BMP280_calc_values+0x58c>
 8002352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800235c:	bf00      	nop
 800235e:	3740      	adds	r7, #64	; 0x40
 8002360:	46bd      	mov	sp, r7
 8002362:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002366:	bf00      	nop
 8002368:	41e00000 	.word	0x41e00000
 800236c:	40e00000 	.word	0x40e00000
 8002370:	40300000 	.word	0x40300000
 8002374:	47c5e680 	.word	0x47c5e680
 8002378:	3e42dcae 	.word	0x3e42dcae
 800237c:	472d2a00 	.word	0x472d2a00
 8002380:	00000000 	.word	0x00000000
 8002384:	40b86a00 	.word	0x40b86a00

08002388 <buttonPressed>:
/*=====[Prototipos de funciones privadas]====================================*/

/*=====[Implementaciones de funciones publicas]==============================*/


void buttonPressed(button_t* config){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	config->time_down = xTaskGetTickCount();
 8002390:	f00f ff9e 	bl	80122d0 <xTaskGetTickCount>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
	config->pressed = true;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	759a      	strb	r2, [r3, #22]
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <buttonReleased>:

void buttonReleased(button_t* config){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	config->time_up = xTaskGetTickCount();
 80023b0:	f00f ff8e 	bl	80122d0 <xTaskGetTickCount>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
	if(config->time_up >= config->time_down)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d307      	bcc.n	80023d6 <buttonReleased+0x2e>
		config->messure_time = config->time_up - config->time_down;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	e006      	b.n	80023e4 <buttonReleased+0x3c>
	else
		config->messure_time = config->time_down - config->time_up ;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
	config->released = true;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	75da      	strb	r2, [r3, #23]
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <fsmButtonInit>:

void fsmButtonInit(button_t* config){
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	719a      	strb	r2, [r3, #6]
	config->countFalling = 0;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	751a      	strb	r2, [r3, #20]
	config->countRising = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	755a      	strb	r2, [r3, #21]
	config->pressed = false;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	759a      	strb	r2, [r3, #22]
	config->released = false;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	75da      	strb	r2, [r3, #23]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <fsmButtonError>:

void fsmButtonError(button_t* config){
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	719a      	strb	r2, [r3, #6]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <fsmButtonUpdate>:

void fsmButtonUpdate(button_t* config) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	switch (config->fsmButtonState) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	799b      	ldrb	r3, [r3, #6]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d875      	bhi.n	800253c <fsmButtonUpdate+0xfc>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <fsmButtonUpdate+0x18>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002469 	.word	0x08002469
 800245c:	08002493 	.word	0x08002493
 8002460:	080024d9 	.word	0x080024d9
 8002464:	080024f7 	.word	0x080024f7
	case STATE_BUTTON_UP:
		config->pressed = false;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	759a      	strb	r2, [r3, #22]
		config->released = false;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	75da      	strb	r2, [r3, #23]
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f004 f9ee 	bl	8006860 <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	d15c      	bne.n	8002544 <fsmButtonUpdate+0x104>
			config->fsmButtonState = STATE_BUTTON_FALLING;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	719a      	strb	r2, [r3, #6]
		}

		break;
 8002490:	e058      	b.n	8002544 <fsmButtonUpdate+0x104>
	case STATE_BUTTON_FALLING:
		if (config->countFalling >= DEBOUNCE_TIME) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7d1b      	ldrb	r3, [r3, #20]
 8002496:	2b27      	cmp	r3, #39	; 0x27
 8002498:	d917      	bls.n	80024ca <fsmButtonUpdate+0x8a>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	889b      	ldrh	r3, [r3, #4]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f004 f9db 	bl	8006860 <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <fsmButtonUpdate+0x7e>
				config->fsmButtonState = STATE_BUTTON_DOWN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	719a      	strb	r2, [r3, #6]
				buttonPressed(config);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff66 	bl	8002388 <buttonPressed>
 80024bc:	e002      	b.n	80024c4 <fsmButtonUpdate+0x84>

			} else{
				config->fsmButtonState = STATE_BUTTON_UP;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	719a      	strb	r2, [r3, #6]
			}
			config->countFalling = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	751a      	strb	r2, [r3, #20]
		}
		config->countFalling++;	//1 cycle = 1ms
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7d1b      	ldrb	r3, [r3, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	751a      	strb	r2, [r3, #20]
		break;
 80024d6:	e038      	b.n	800254a <fsmButtonUpdate+0x10a>
	case STATE_BUTTON_DOWN:
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f004 f9bc 	bl	8006860 <HAL_GPIO_ReadPin>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12c      	bne.n	8002548 <fsmButtonUpdate+0x108>
			config->fsmButtonState = STATE_BUTTON_RISING;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	719a      	strb	r2, [r3, #6]
		}
		break;
 80024f4:	e028      	b.n	8002548 <fsmButtonUpdate+0x108>
	case STATE_BUTTON_RISING:
		if (config->countRising >= DEBOUNCE_TIME) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7d5b      	ldrb	r3, [r3, #21]
 80024fa:	2b27      	cmp	r3, #39	; 0x27
 80024fc:	d917      	bls.n	800252e <fsmButtonUpdate+0xee>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	889b      	ldrh	r3, [r3, #4]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f004 f9a9 	bl	8006860 <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <fsmButtonUpdate+0xe2>
				config->fsmButtonState = STATE_BUTTON_UP;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	719a      	strb	r2, [r3, #6]
				buttonReleased(config);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff44 	bl	80023a8 <buttonReleased>
 8002520:	e002      	b.n	8002528 <fsmButtonUpdate+0xe8>
				} else{
					config->fsmButtonState = STATE_BUTTON_DOWN;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	719a      	strb	r2, [r3, #6]
				}
			config->countRising = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	755a      	strb	r2, [r3, #21]
		}
		config->countRising++;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7d5b      	ldrb	r3, [r3, #21]
 8002532:	3301      	adds	r3, #1
 8002534:	b2da      	uxtb	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	755a      	strb	r2, [r3, #21]
		break;
 800253a:	e006      	b.n	800254a <fsmButtonUpdate+0x10a>
	default:
		fsmButtonError(config);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff71 	bl	8002424 <fsmButtonError>
		break;
 8002542:	e002      	b.n	800254a <fsmButtonUpdate+0x10a>
		break;
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <fsmButtonUpdate+0x10a>
		break;
 8002548:	bf00      	nop
	}

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop

08002554 <vLedWrite>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
void vLedWrite(led_t led, GPIO_PinState ledON) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	460a      	mov	r2, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b06      	cmp	r3, #6
 8002568:	d905      	bls.n	8002576 <vLedWrite+0x22>
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <vLedWrite+0xc0>)
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <vLedWrite+0xc4>)
 800256e:	2117      	movs	r1, #23
 8002570:	482a      	ldr	r0, [pc, #168]	; (800261c <vLedWrite+0xc8>)
 8002572:	f012 f905 	bl	8014780 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d847      	bhi.n	800260c <vLedWrite+0xb8>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <vLedWrite+0x30>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025a1 	.word	0x080025a1
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025d1 	.word	0x080025d1
 8002594:	080025e1 	.word	0x080025e1
 8002598:	080025ef 	.word	0x080025ef
 800259c:	080025fd 	.word	0x080025fd
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledON);
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <vLedWrite+0xcc>)
 80025aa:	f004 f971 	bl	8006890 <HAL_GPIO_WritePin>
			break;
 80025ae:	e02d      	b.n	800260c <vLedWrite+0xb8>
	case LED_2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledON);
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	461a      	mov	r2, r3
 80025b4:	2120      	movs	r1, #32
 80025b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ba:	f004 f969 	bl	8006890 <HAL_GPIO_WritePin>
			break;
 80025be:	e025      	b.n	800260c <vLedWrite+0xb8>
	case LED_3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ledON);
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	461a      	mov	r2, r3
 80025c4:	2101      	movs	r1, #1
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f004 f961 	bl	8006890 <HAL_GPIO_WritePin>
		break;
 80025ce:	e01d      	b.n	800260c <vLedWrite+0xb8>
	case LED_4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ledON);
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	461a      	mov	r2, r3
 80025d4:	2110      	movs	r1, #16
 80025d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025da:	f004 f959 	bl	8006890 <HAL_GPIO_WritePin>
		break;
 80025de:	e015      	b.n	800260c <vLedWrite+0xb8>
	case LED_5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ledON);
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	461a      	mov	r2, r3
 80025e4:	2104      	movs	r1, #4
 80025e6:	480e      	ldr	r0, [pc, #56]	; (8002620 <vLedWrite+0xcc>)
 80025e8:	f004 f952 	bl	8006890 <HAL_GPIO_WritePin>
		break;
 80025ec:	e00e      	b.n	800260c <vLedWrite+0xb8>
	case LED_6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ledON);
 80025ee:	79bb      	ldrb	r3, [r7, #6]
 80025f0:	461a      	mov	r2, r3
 80025f2:	2104      	movs	r1, #4
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <vLedWrite+0xd0>)
 80025f6:	f004 f94b 	bl	8006890 <HAL_GPIO_WritePin>
		break;
 80025fa:	e007      	b.n	800260c <vLedWrite+0xb8>
	case LED_7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ledON);
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002604:	4806      	ldr	r0, [pc, #24]	; (8002620 <vLedWrite+0xcc>)
 8002606:	f004 f943 	bl	8006890 <HAL_GPIO_WritePin>
		break;
 800260a:	bf00      	nop
	}
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08016830 	.word	0x08016830
 8002618:	08016ab4 	.word	0x08016ab4
 800261c:	08016840 	.word	0x08016840
 8002620:	48000400 	.word	0x48000400
 8002624:	48001c00 	.word	0x48001c00

08002628 <vLedToggle>:

/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 */
void vLedToggle(led_t led) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d905      	bls.n	8002644 <vLedToggle+0x1c>
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <vLedToggle+0x9c>)
 800263a:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <vLedToggle+0xa0>)
 800263c:	2147      	movs	r1, #71	; 0x47
 800263e:	4823      	ldr	r0, [pc, #140]	; (80026cc <vLedToggle+0xa4>)
 8002640:	f012 f89e 	bl	8014780 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d838      	bhi.n	80026bc <vLedToggle+0x94>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <vLedToggle+0x28>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	0800266d 	.word	0x0800266d
 8002654:	08002679 	.word	0x08002679
 8002658:	08002685 	.word	0x08002685
 800265c:	08002691 	.word	0x08002691
 8002660:	0800269d 	.word	0x0800269d
 8002664:	080026a7 	.word	0x080026a7
 8002668:	080026b1 	.word	0x080026b1
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LEDO_Port, LEDO_Pin);
		break;*/
	case LED_1:
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800266c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002670:	4817      	ldr	r0, [pc, #92]	; (80026d0 <vLedToggle+0xa8>)
 8002672:	f004 f925 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 8002676:	e021      	b.n	80026bc <vLedToggle+0x94>
	case LED_2:
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002678:	2120      	movs	r1, #32
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f004 f91f 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 8002682:	e01b      	b.n	80026bc <vLedToggle+0x94>
	case LED_3:
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002684:	2101      	movs	r1, #1
 8002686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268a:	f004 f919 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 800268e:	e015      	b.n	80026bc <vLedToggle+0x94>
	case LED_4:
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002690:	2110      	movs	r1, #16
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f004 f913 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 800269a:	e00f      	b.n	80026bc <vLedToggle+0x94>
	case LED_5:
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800269c:	2104      	movs	r1, #4
 800269e:	480c      	ldr	r0, [pc, #48]	; (80026d0 <vLedToggle+0xa8>)
 80026a0:	f004 f90e 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 80026a4:	e00a      	b.n	80026bc <vLedToggle+0x94>
	case LED_6:
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 80026a6:	2104      	movs	r1, #4
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <vLedToggle+0xac>)
 80026aa:	f004 f909 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 80026ae:	e005      	b.n	80026bc <vLedToggle+0x94>
	case LED_7:
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 80026b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026b4:	4806      	ldr	r0, [pc, #24]	; (80026d0 <vLedToggle+0xa8>)
 80026b6:	f004 f903 	bl	80068c0 <HAL_GPIO_TogglePin>
		break;
 80026ba:	bf00      	nop
	}

}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	08016830 	.word	0x08016830
 80026c8:	08016ac0 	.word	0x08016ac0
 80026cc:	08016840 	.word	0x08016840
 80026d0:	48000400 	.word	0x48000400
 80026d4:	48001c00 	.word	0x48001c00

080026d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80026f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80026f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002700:	e000      	b.n	8002704 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002702:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002704:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f9      	beq.n	8002702 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800270e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffc7 	bl	80026d8 <ITM_SendChar>
	for (i = 0; i < len; i++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x16>
	return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002768:	f002 fc87 	bl	800507a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800276c:	f000 f83c 	bl	80027e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002770:	f000 fcfa 	bl	8003168 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002774:	f000 f8e6 	bl	8002944 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002778:	f000 f95e 	bl	8002a38 <MX_ADC3_Init>
  MX_DCMI_Init();
 800277c:	f000 f9c2 	bl	8002b04 <MX_DCMI_Init>
  MX_FMC_Init();
 8002780:	f000 fc44 	bl	800300c <MX_FMC_Init>
  MX_I2C1_Init();
 8002784:	f000 f9f2 	bl	8002b6c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002788:	f000 fa30 	bl	8002bec <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800278c:	f000 fa6e 	bl	8002c6c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002790:	f000 fa9a 	bl	8002cc8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002794:	f000 fac8 	bl	8002d28 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8002798:	f000 faf6 	bl	8002d88 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800279c:	f000 fb20 	bl	8002de0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80027a0:	f000 fbc6 	bl	8002f30 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80027a4:	f000 fbf4 	bl	8002f90 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80027a8:	f00e f8b0 	bl	801090c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027ac:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <main+0x70>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <main+0x74>)
 80027b2:	f00e f915 	bl	80109e0 <osThreadNew>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <main+0x78>)
 80027ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initTasks();
 80027bc:	f001 f974 	bl	8003aa8 <initTasks>


  printf("Iniciando\r\n");//simepre tiene que estar un primer printf para que funcione bien
 80027c0:	4807      	ldr	r0, [pc, #28]	; (80027e0 <main+0x7c>)
 80027c2:	f012 fc2f 	bl	8015024 <puts>
  printf("Espere...\r\n");
 80027c6:	4807      	ldr	r0, [pc, #28]	; (80027e4 <main+0x80>)
 80027c8:	f012 fc2c 	bl	8015024 <puts>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80027cc:	f00e f8d2 	bl	8010974 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <main+0x6c>
 80027d2:	bf00      	nop
 80027d4:	08016acc 	.word	0x08016acc
 80027d8:	08003529 	.word	0x08003529
 80027dc:	2000e4d0 	.word	0x2000e4d0
 80027e0:	08016860 	.word	0x08016860
 80027e4:	0801686c 	.word	0x0801686c

080027e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0ba      	sub	sp, #232	; 0xe8
 80027ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027f2:	2244      	movs	r2, #68	; 0x44
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f012 f82b 	bl	8014852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	228c      	movs	r2, #140	; 0x8c
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f012 f81d 	bl	8014852 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002818:	f005 ff02 	bl	8008620 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <SystemClock_Config+0x150>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	4a45      	ldr	r2, [pc, #276]	; (8002938 <SystemClock_Config+0x150>)
 8002824:	f023 0318 	bic.w	r3, r3, #24
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800282c:	2314      	movs	r3, #20
 800282e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002832:	2301      	movs	r3, #1
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002838:	2301      	movs	r3, #1
 800283a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002844:	2360      	movs	r3, #96	; 0x60
 8002846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002850:	2301      	movs	r3, #1
 8002852:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 800285c:	2328      	movs	r3, #40	; 0x28
 800285e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002874:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002878:	4618      	mov	r0, r3
 800287a:	f006 f833 	bl	80088e4 <HAL_RCC_OscConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002884:	f000 fe6c 	bl	8003560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002888:	230f      	movs	r3, #15
 800288a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288e:	2303      	movs	r3, #3
 8002890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028aa:	2104      	movs	r1, #4
 80028ac:	4618      	mov	r0, r3
 80028ae:	f006 fc3f 	bl	8009130 <HAL_RCC_ClockConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028b8:	f000 fe52 	bl	8003560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80028bc:	4b1f      	ldr	r3, [pc, #124]	; (800293c <SystemClock_Config+0x154>)
 80028be:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80028e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028e4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80028e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028ea:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028ec:	2301      	movs	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80028f4:	2318      	movs	r3, #24
 80028f6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002900:	2302      	movs	r3, #2
 8002902:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <SystemClock_Config+0x158>)
 8002906:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	4618      	mov	r0, r3
 800290c:	f006 fe46 	bl	800959c <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002916:	f000 fe23 	bl	8003560 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800291a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800291e:	f005 fe9d 	bl	800865c <HAL_PWREx_ControlVoltageScaling>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <SystemClock_Config+0x144>
  {
    Error_Handler();
 8002928:	f000 fe1a 	bl	8003560 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800292c:	f007 fdf4 	bl	800a518 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002930:	bf00      	nop
 8002932:	37e8      	adds	r7, #232	; 0xe8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	000868e3 	.word	0x000868e3
 8002940:	01110000 	.word	0x01110000

08002944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002966:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002968:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <MX_ADC1_Init+0xec>)
 800296a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <MX_ADC1_Init+0xe8>)
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <MX_ADC1_Init+0xe8>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002986:	2204      	movs	r2, #4
 8002988:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <MX_ADC1_Init+0xe8>)
 800298c:	2200      	movs	r2, #0
 800298e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002992:	2200      	movs	r2, #0
 8002994:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002998:	2201      	movs	r2, #1
 800299a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <MX_ADC1_Init+0xe8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029cc:	4817      	ldr	r0, [pc, #92]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029ce:	f002 fd3f 	bl	8005450 <HAL_ADC_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80029d8:	f000 fdc2 	bl	8003560 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	4619      	mov	r1, r3
 80029e6:	4811      	ldr	r0, [pc, #68]	; (8002a2c <MX_ADC1_Init+0xe8>)
 80029e8:	f003 fa30 	bl	8005e4c <HAL_ADCEx_MultiModeConfigChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80029f2:	f000 fdb5 	bl	8003560 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_ADC1_Init+0xf0>)
 80029f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029fa:	2306      	movs	r3, #6
 80029fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a02:	237f      	movs	r3, #127	; 0x7f
 8002a04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a06:	2304      	movs	r3, #4
 8002a08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4806      	ldr	r0, [pc, #24]	; (8002a2c <MX_ADC1_Init+0xe8>)
 8002a14:	f002 fe74 	bl	8005700 <HAL_ADC_ConfigChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002a1e:	f000 fd9f 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000e7a8 	.word	0x2000e7a8
 8002a30:	50040000 	.word	0x50040000
 8002a34:	10c00010 	.word	0x10c00010

08002a38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <MX_ADC3_Init+0xc4>)
 8002a52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a6e:	2204      	movs	r2, #4
 8002a70:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ab4:	4810      	ldr	r0, [pc, #64]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002ab6:	f002 fccb 	bl	8005450 <HAL_ADC_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8002ac0:	f000 fd4e 	bl	8003560 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_ADC3_Init+0xc8>)
 8002ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ac8:	2306      	movs	r3, #6
 8002aca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ad0:	237f      	movs	r3, #127	; 0x7f
 8002ad2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_ADC3_Init+0xc0>)
 8002ae2:	f002 fe0d 	bl	8005700 <HAL_ADC_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002aec:	f000 fd38 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	2000e810 	.word	0x2000e810
 8002afc:	50040200 	.word	0x50040200
 8002b00:	36902000 	.word	0x36902000

08002b04 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <MX_DCMI_Init+0x64>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_DCMI_Init+0x60>)
 8002b52:	f003 fb39 	bl	80061c8 <HAL_DCMI_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002b5c:	f000 fd00 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000e878 	.word	0x2000e878
 8002b68:	50050000 	.word	0x50050000

08002b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <MX_I2C1_Init+0x78>)
 8002b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <MX_I2C1_Init+0x7c>)
 8002b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ba6:	480e      	ldr	r0, [pc, #56]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002ba8:	f003 fea3 	bl	80068f2 <HAL_I2C_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bb2:	f000 fcd5 	bl	8003560 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002bba:	f004 fbfb 	bl	80073b4 <HAL_I2CEx_ConfigAnalogFilter>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bc4:	f000 fccc 	bl	8003560 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_I2C1_Init+0x74>)
 8002bcc:	f004 fc3d 	bl	800744a <HAL_I2CEx_ConfigDigitalFilter>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bd6:	f000 fcc3 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000e538 	.word	0x2000e538
 8002be4:	40005400 	.word	0x40005400
 8002be8:	10909cec 	.word	0x10909cec

08002bec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <MX_I2C2_Init+0x78>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <MX_I2C2_Init+0x7c>)
 8002bfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c26:	480e      	ldr	r0, [pc, #56]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c28:	f003 fe63 	bl	80068f2 <HAL_I2C_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c32:	f000 fc95 	bl	8003560 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c36:	2100      	movs	r1, #0
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c3a:	f004 fbbb 	bl	80073b4 <HAL_I2CEx_ConfigAnalogFilter>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c44:	f000 fc8c 	bl	8003560 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_I2C2_Init+0x74>)
 8002c4c:	f004 fbfd 	bl	800744a <HAL_I2CEx_ConfigDigitalFilter>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c56:	f000 fc83 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000e584 	.word	0x2000e584
 8002c64:	40005800 	.word	0x40005800
 8002c68:	10909cec 	.word	0x10909cec

08002c6c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <MX_LPUART1_UART_Init+0x54>)
 8002c74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <MX_LPUART1_UART_Init+0x58>)
 8002c7a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c92:	220c      	movs	r2, #12
 8002c94:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <MX_LPUART1_UART_Init+0x50>)
 8002caa:	f009 f99b 	bl	800bfe4 <HAL_UART_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002cb4:	f000 fc54 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	2000e6a4 	.word	0x2000e6a4
 8002cc0:	40008000 	.word	0x40008000
 8002cc4:	00033324 	.word	0x00033324

08002cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cce:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <MX_USART1_UART_Init+0x5c>)
 8002cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USART1_UART_Init+0x58>)
 8002d0c:	f009 f96a 	bl	800bfe4 <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d16:	f000 fc23 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000e8d0 	.word	0x2000e8d0
 8002d24:	40013800 	.word	0x40013800

08002d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <MX_USART2_UART_Init+0x5c>)
 8002d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_USART2_UART_Init+0x58>)
 8002d6c:	f009 f93a 	bl	800bfe4 <HAL_UART_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d76:	f000 fbf3 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000ea24 	.word	0x2000ea24
 8002d84:	40004400 	.word	0x40004400

08002d88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002d8e:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <MX_QUADSPI_Init+0x54>)
 8002d90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002d94:	22ff      	movs	r2, #255	; 0xff
 8002d96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002dc2:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_QUADSPI_Init+0x50>)
 8002dc4:	f005 fcc0 	bl	8008748 <HAL_QSPI_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002dce:	f000 fbc7 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000eaa4 	.word	0x2000eaa4
 8002ddc:	a0001000 	.word	0xa0001000

08002de0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002de6:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <MX_SAI1_Init+0x140>)
 8002de8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002e20:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e22:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <MX_SAI1_Init+0x144>)
 8002e24:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e32:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002e3e:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e40:	2208      	movs	r2, #8
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002e68:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002e74:	4829      	ldr	r0, [pc, #164]	; (8002f1c <MX_SAI1_Init+0x13c>)
 8002e76:	f007 fe2b 	bl	800aad0 <HAL_SAI_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002e80:	f000 fb6e 	bl	8003560 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <MX_SAI1_Init+0x14c>)
 8002e88:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002e92:	2203      	movs	r2, #3
 8002e94:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <MX_SAI1_Init+0x148>)
 8002f0a:	f007 fde1 	bl	800aad0 <HAL_SAI_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8002f14:	f000 fb24 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	2000e9a0 	.word	0x2000e9a0
 8002f20:	40015404 	.word	0x40015404
 8002f24:	0002ee00 	.word	0x0002ee00
 8002f28:	2000e724 	.word	0x2000e724
 8002f2c:	40015424 	.word	0x40015424

08002f30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <MX_SDMMC1_SD_Init+0x5c>)
 8002f38:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002f5e:	480a      	ldr	r0, [pc, #40]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f60:	f007 ff5a 	bl	800ae18 <HAL_SD_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8002f6a:	f000 faf9 	bl	8003560 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_SDMMC1_SD_Init+0x58>)
 8002f74:	f008 f9b2 	bl	800b2dc <HAL_SD_ConfigWideBusOperation>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8002f7e:	f000 faef 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000e5d0 	.word	0x2000e5d0
 8002f8c:	40012800 	.word	0x40012800

08002f90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <MX_SPI2_Init+0x74>)
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <MX_SPI2_Init+0x78>)
 8002f98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_SPI2_Init+0x74>)
 8002f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_SPI2_Init+0x74>)
 8002faa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fde:	2207      	movs	r2, #7
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <MX_SPI2_Init+0x74>)
 8002fea:	2208      	movs	r2, #8
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <MX_SPI2_Init+0x74>)
 8002ff0:	f008 fcc6 	bl	800b980 <HAL_SPI_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ffa:	f000 fab1 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000e4d4 	.word	0x2000e4d4
 8003008:	40003800 	.word	0x40003800

0800300c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8003012:	463b      	mov	r3, r7
 8003014:	2220      	movs	r2, #32
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f011 fc1a 	bl	8014852 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <MX_FMC_Init+0x150>)
 8003020:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003024:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003026:	4b4d      	ldr	r3, [pc, #308]	; (800315c <MX_FMC_Init+0x150>)
 8003028:	4a4d      	ldr	r2, [pc, #308]	; (8003160 <MX_FMC_Init+0x154>)
 800302a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800302c:	4b4b      	ldr	r3, [pc, #300]	; (800315c <MX_FMC_Init+0x150>)
 800302e:	2202      	movs	r2, #2
 8003030:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <MX_FMC_Init+0x150>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003038:	4b48      	ldr	r3, [pc, #288]	; (800315c <MX_FMC_Init+0x150>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <MX_FMC_Init+0x150>)
 8003040:	2210      	movs	r2, #16
 8003042:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <MX_FMC_Init+0x150>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800304a:	4b44      	ldr	r3, [pc, #272]	; (800315c <MX_FMC_Init+0x150>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <MX_FMC_Init+0x150>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8003056:	4b41      	ldr	r3, [pc, #260]	; (800315c <MX_FMC_Init+0x150>)
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <MX_FMC_Init+0x150>)
 800305e:	2200      	movs	r2, #0
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <MX_FMC_Init+0x150>)
 8003064:	2200      	movs	r2, #0
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <MX_FMC_Init+0x150>)
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <MX_FMC_Init+0x150>)
 8003070:	2200      	movs	r2, #0
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <MX_FMC_Init+0x150>)
 8003076:	2200      	movs	r2, #0
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <MX_FMC_Init+0x150>)
 800307c:	2200      	movs	r2, #0
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <MX_FMC_Init+0x150>)
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003086:	230f      	movs	r3, #15
 8003088:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800308a:	230f      	movs	r3, #15
 800308c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800308e:	23ff      	movs	r3, #255	; 0xff
 8003090:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003092:	230f      	movs	r3, #15
 8003094:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003096:	2310      	movs	r3, #16
 8003098:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800309a:	2311      	movs	r3, #17
 800309c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80030a2:	463b      	mov	r3, r7
 80030a4:	2200      	movs	r2, #0
 80030a6:	4619      	mov	r1, r3
 80030a8:	482c      	ldr	r0, [pc, #176]	; (800315c <MX_FMC_Init+0x150>)
 80030aa:	f008 fcf3 	bl	800ba94 <HAL_SRAM_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80030b4:	f000 fa54 	bl	8003560 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <MX_FMC_Init+0x158>)
 80030ba:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80030be:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <MX_FMC_Init+0x158>)
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <MX_FMC_Init+0x154>)
 80030c4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <MX_FMC_Init+0x158>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <MX_FMC_Init+0x158>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <MX_FMC_Init+0x158>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <MX_FMC_Init+0x158>)
 80030da:	2210      	movs	r2, #16
 80030dc:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <MX_FMC_Init+0x158>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <MX_FMC_Init+0x158>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MX_FMC_Init+0x158>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <MX_FMC_Init+0x158>)
 80030f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <MX_FMC_Init+0x158>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <MX_FMC_Init+0x158>)
 8003100:	2200      	movs	r2, #0
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <MX_FMC_Init+0x158>)
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <MX_FMC_Init+0x158>)
 800310c:	2200      	movs	r2, #0
 800310e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <MX_FMC_Init+0x158>)
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <MX_FMC_Init+0x158>)
 8003118:	2200      	movs	r2, #0
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <MX_FMC_Init+0x158>)
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003122:	230f      	movs	r3, #15
 8003124:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003126:	230f      	movs	r3, #15
 8003128:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800312a:	23ff      	movs	r3, #255	; 0xff
 800312c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800312e:	230f      	movs	r3, #15
 8003130:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003132:	2310      	movs	r3, #16
 8003134:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003136:	2311      	movs	r3, #17
 8003138:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800313e:	463b      	mov	r3, r7
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	4807      	ldr	r0, [pc, #28]	; (8003164 <MX_FMC_Init+0x158>)
 8003146:	f008 fca5 	bl	800ba94 <HAL_SRAM_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8003150:	f000 fa06 	bl	8003560 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	2000e654 	.word	0x2000e654
 8003160:	a0000104 	.word	0xa0000104
 8003164:	2000e950 	.word	0x2000e950

08003168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08e      	sub	sp, #56	; 0x38
 800316c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800317e:	4bb3      	ldr	r3, [pc, #716]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4ab2      	ldr	r2, [pc, #712]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800318a:	4bb0      	ldr	r3, [pc, #704]	; (800344c <MX_GPIO_Init+0x2e4>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003196:	4bad      	ldr	r3, [pc, #692]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	4aac      	ldr	r2, [pc, #688]	; (800344c <MX_GPIO_Init+0x2e4>)
 800319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a2:	4baa      	ldr	r3, [pc, #680]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ae:	4ba7      	ldr	r3, [pc, #668]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	4aa6      	ldr	r2, [pc, #664]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031b4:	f043 0310 	orr.w	r3, r3, #16
 80031b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ba:	4ba4      	ldr	r3, [pc, #656]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c6:	4ba1      	ldr	r3, [pc, #644]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	4aa0      	ldr	r2, [pc, #640]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d2:	4b9e      	ldr	r3, [pc, #632]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	4b9b      	ldr	r3, [pc, #620]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	4a9a      	ldr	r2, [pc, #616]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ea:	4b98      	ldr	r3, [pc, #608]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f6:	4b95      	ldr	r3, [pc, #596]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a94      	ldr	r2, [pc, #592]	; (800344c <MX_GPIO_Init+0x2e4>)
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003202:	4b92      	ldr	r3, [pc, #584]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800320e:	f005 fa8b 	bl	8008728 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	4a8d      	ldr	r2, [pc, #564]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <MX_GPIO_Init+0x2e4>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	4a87      	ldr	r2, [pc, #540]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003236:	4b85      	ldr	r3, [pc, #532]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003242:	4b82      	ldr	r3, [pc, #520]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4a81      	ldr	r2, [pc, #516]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003248:	f043 0320 	orr.w	r3, r3, #32
 800324c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324e:	4b7f      	ldr	r3, [pc, #508]	; (800344c <MX_GPIO_Init+0x2e4>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800325a:	2201      	movs	r2, #1
 800325c:	2104      	movs	r1, #4
 800325e:	487c      	ldr	r0, [pc, #496]	; (8003450 <MX_GPIO_Init+0x2e8>)
 8003260:	f003 fb16 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8003264:	2200      	movs	r2, #0
 8003266:	2101      	movs	r1, #1
 8003268:	487a      	ldr	r0, [pc, #488]	; (8003454 <MX_GPIO_Init+0x2ec>)
 800326a:	f003 fb11 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	2143      	movs	r1, #67	; 0x43
 8003272:	4877      	ldr	r0, [pc, #476]	; (8003450 <MX_GPIO_Init+0x2e8>)
 8003274:	f003 fb0c 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|LEDx_Pin, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	21c0      	movs	r1, #192	; 0xc0
 800327c:	4876      	ldr	r0, [pc, #472]	; (8003458 <MX_GPIO_Init+0x2f0>)
 800327e:	f003 fb07 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 8003282:	2201      	movs	r2, #1
 8003284:	2131      	movs	r1, #49	; 0x31
 8003286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328a:	f003 fb01 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED7_Pin, GPIO_PIN_SET);
 800328e:	2201      	movs	r2, #1
 8003290:	f241 0104 	movw	r1, #4100	; 0x1004
 8003294:	4871      	ldr	r0, [pc, #452]	; (800345c <MX_GPIO_Init+0x2f4>)
 8003296:	f003 fafb 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a0:	486e      	ldr	r0, [pc, #440]	; (800345c <MX_GPIO_Init+0x2f4>)
 80032a2:	f003 faf5 	bl	8006890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80032a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	4866      	ldr	r0, [pc, #408]	; (8003454 <MX_GPIO_Init+0x2ec>)
 80032bc:	f003 f84c 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80032c0:	2347      	movs	r3, #71	; 0x47
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c4:	2301      	movs	r3, #1
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d4:	4619      	mov	r1, r3
 80032d6:	485e      	ldr	r0, [pc, #376]	; (8003450 <MX_GPIO_Init+0x2e8>)
 80032d8:	f003 f83e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80032dc:	2330      	movs	r3, #48	; 0x30
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ec:	2305      	movs	r3, #5
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	4859      	ldr	r0, [pc, #356]	; (800345c <MX_GPIO_Init+0x2f4>)
 80032f8:	f003 f82e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80032fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800330e:	2305      	movs	r3, #5
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800331c:	f003 f81c 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003324:	2301      	movs	r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8003330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	4847      	ldr	r0, [pc, #284]	; (8003454 <MX_GPIO_Init+0x2ec>)
 8003338:	f003 f80e 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800333c:	2340      	movs	r3, #64	; 0x40
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800334c:	2303      	movs	r3, #3
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003354:	4619      	mov	r1, r3
 8003356:	483f      	ldr	r0, [pc, #252]	; (8003454 <MX_GPIO_Init+0x2ec>)
 8003358:	f002 fffe 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 800335c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800336e:	2303      	movs	r3, #3
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003376:	4619      	mov	r1, r3
 8003378:	4835      	ldr	r0, [pc, #212]	; (8003450 <MX_GPIO_Init+0x2e8>)
 800337a:	f002 ffed 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800337e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003390:	2302      	movs	r3, #2
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003398:	4619      	mov	r1, r3
 800339a:	4830      	ldr	r0, [pc, #192]	; (800345c <MX_GPIO_Init+0x2f4>)
 800339c:	f002 ffdc 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b0:	4619      	mov	r1, r3
 80033b2:	4827      	ldr	r0, [pc, #156]	; (8003450 <MX_GPIO_Init+0x2e8>)
 80033b4:	f002 ffd0 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_RST_Pin LEDx_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin|LEDx_Pin;
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033bc:	2301      	movs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033cc:	4619      	mov	r1, r3
 80033ce:	4822      	ldr	r0, [pc, #136]	; (8003458 <MX_GPIO_Init+0x2f0>)
 80033d0:	f002 ffc2 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80033d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <MX_GPIO_Init+0x2f8>)
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80033e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e6:	4619      	mov	r1, r3
 80033e8:	481e      	ldr	r0, [pc, #120]	; (8003464 <MX_GPIO_Init+0x2fc>)
 80033ea:	f002 ffb5 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80033ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8003400:	230e      	movs	r3, #14
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003408:	4619      	mov	r1, r3
 800340a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800340e:	f002 ffa3 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin PC1 */
  GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8003412:	2303      	movs	r3, #3
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003416:	230b      	movs	r3, #11
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003422:	4619      	mov	r1, r3
 8003424:	480c      	ldr	r0, [pc, #48]	; (8003458 <MX_GPIO_Init+0x2f0>)
 8003426:	f002 ff97 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 800342a:	2304      	movs	r3, #4
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800343a:	2306      	movs	r3, #6
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800343e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003442:	4619      	mov	r1, r3
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <MX_GPIO_Init+0x2f0>)
 8003446:	f002 ff87 	bl	8006358 <HAL_GPIO_Init>
 800344a:	e00d      	b.n	8003468 <MX_GPIO_Init+0x300>
 800344c:	40021000 	.word	0x40021000
 8003450:	48001c00 	.word	0x48001c00
 8003454:	48002000 	.word	0x48002000
 8003458:	48000800 	.word	0x48000800
 800345c:	48000400 	.word	0x48000400
 8003460:	10110000 	.word	0x10110000
 8003464:	48001800 	.word	0x48001800

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8003468:	2320      	movs	r3, #32
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <MX_GPIO_Init+0x3b0>)
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	4828      	ldr	r0, [pc, #160]	; (800351c <MX_GPIO_Init+0x3b4>)
 800347c:	f002 ff6c 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED4_Pin;
 8003480:	2331      	movs	r3, #49	; 0x31
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003484:	2301      	movs	r3, #1
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349a:	f002 ff5d 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800349e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a8:	2302      	movs	r3, #2
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	481b      	ldr	r0, [pc, #108]	; (8003520 <MX_GPIO_Init+0x3b8>)
 80034b4:	f002 ff50 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 80034b8:	2302      	movs	r3, #2
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80034bc:	230b      	movs	r3, #11
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ce:	f002 ff43 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED7_Pin;
 80034d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d8:	2301      	movs	r3, #1
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e8:	4619      	mov	r1, r3
 80034ea:	480e      	ldr	r0, [pc, #56]	; (8003524 <MX_GPIO_Init+0x3bc>)
 80034ec:	f002 ff34 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80034f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80034f6:	2311      	movs	r3, #17
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <MX_GPIO_Init+0x3bc>)
 800350a:	f002 ff25 	bl	8006358 <HAL_GPIO_Init>

}
 800350e:	bf00      	nop
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	10110000 	.word	0x10110000
 800351c:	48000800 	.word	0x48000800
 8003520:	48001400 	.word	0x48001400
 8003524:	48000400 	.word	0x48000400

08003528 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003530:	f010 fb2c 	bl	8013b8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1 / portTICK_PERIOD_MS);
 8003534:	2001      	movs	r0, #1
 8003536:	f00d faf9 	bl	8010b2c <osDelay>
 800353a:	e7fb      	b.n	8003534 <StartDefaultTask+0xc>

0800353c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800354e:	f001 fdad 	bl	80050ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40001000 	.word	0x40001000

08003560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <mqtt_Connect>:
const uint8_t END_STRING_N[] = "\n";
//int32_t transport_socket;
static int strpos(char *hay, char *needle, int offset);
static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght);

ESP8266_StatusTypeDef mqtt_Connect(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b0ba      	sub	sp, #232	; 0xe8
 8003574:	af00      	add	r7, sp, #0
	//MQTTTransport transporter;
	//int32_t result;
	int32_t length;
	unsigned char buffer[128];

	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	int32_t internalState = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int32_t trial = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <mqtt_Connect+0xcc>)
 800358a:	463b      	mov	r3, r7
 800358c:	4611      	mov	r1, r2
 800358e:	2258      	movs	r2, #88	; 0x58
 8003590:	4618      	mov	r0, r3
 8003592:	f011 f953 	bl	801483c <memcpy>

	while (trial < TRIAL_CONNECTION_TIME) {
 8003596:	e046      	b.n	8003626 <mqtt_Connect+0xb6>
		switch (internalState) {
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d042      	beq.n	8003626 <mqtt_Connect+0xb6>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d039      	beq.n	8003618 <mqtt_Connect+0xa8>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d000      	beq.n	80035aa <mqtt_Connect+0x3a>
 80035a8:	e03d      	b.n	8003626 <mqtt_Connect+0xb6>
			//transporter.state = 0;

			// Populate the connect struct.


			connectData.MQTTVersion = 3; //4
 80035aa:	2303      	movs	r3, #3
 80035ac:	723b      	strb	r3, [r7, #8]
			connectData.clientID.cstring = "fede";
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <mqtt_Connect+0xd0>)
 80035b0:	60fb      	str	r3, [r7, #12]
			connectData.keepAliveInterval = CONNECTION_KEEPALIVE_S * 2;
 80035b2:	2378      	movs	r3, #120	; 0x78
 80035b4:	833b      	strh	r3, [r7, #24]
			//connectData.willFlag = 1;
			//connectData.will.qos = 2;
			memset((char*)buffer, '\0', strlen((char*)buffer));
 80035b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc fe18 	bl	80001f0 <strlen>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f011 f942 	bl	8014852 <memset>
			length = MQTTSerialize_connect(buffer, sizeof(buffer),
 80035ce:	463a      	mov	r2, r7
 80035d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd ffea 	bl	80015b0 <MQTTSerialize_connect>
 80035dc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					&connectData);

			// Send CONNECT to the mqtt broker.

			Status = ESP_SendData(buffer, length);
 80035e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80035e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd fd9a 	bl	8001124 <ESP_SendData>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

			//if ((result = transport_sendPacketBuffer(transport_socket, buffer,length)) == length) {
			if (Status == ESP8266_OK) {
 80035f6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <mqtt_Connect+0x96>
				//Status = ESP8266_OK;
				internalState = 2;			//internalState++;
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003604:	e00f      	b.n	8003626 <mqtt_Connect+0xb6>
			} else {
				//Status = ESP8266_ERROR;
				internalState = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				trial++;
 800360c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003610:	3301      	adds	r3, #1
 8003612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003616:	e006      	b.n	8003626 <mqtt_Connect+0xb6>
					break;
				}
			}*/
			break;
		case 2:
			Status = ESP8266_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			trial = TRIAL_CONNECTION_TIME;
 800361e:	2305      	movs	r3, #5
 8003620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			break;
 8003624:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362a:	2b04      	cmp	r3, #4
 800362c:	ddb4      	ble.n	8003598 <mqtt_Connect+0x28>
		}
	}

	return Status;
 800362e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8003632:	4618      	mov	r0, r3
 8003634:	37e8      	adds	r7, #232	; 0xe8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08016880 	.word	0x08016880
 8003640:	08016878 	.word	0x08016878

08003644 <mqtt_Publisher>:

ESP8266_StatusTypeDef mqtt_Publisher(char *topic, int32_t data) {
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b0b6      	sub	sp, #216	; 0xd8
 8003648:	af08      	add	r7, sp, #32
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	unsigned char buffer[128];
	int32_t length;
	int32_t trial = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int32_t internalState = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

	// Populate the publish message.
	MQTTString topicString = MQTTString_initializer;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	2300      	movs	r3, #0
 800366a:	623b      	str	r3, [r7, #32]
	topicString.cstring = topic;//"test/rgb";
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	61bb      	str	r3, [r7, #24]
	unsigned char payload[16];
	int qos = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	memset((char*)buffer, '\0', strlen((char*)buffer));
 8003676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc fdb8 	bl	80001f0 <strlen>
 8003680:	4602      	mov	r2, r0
 8003682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f011 f8e2 	bl	8014852 <memset>
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
 800368e:	f107 0008 	add.w	r0, r7, #8
 8003692:	230a      	movs	r3, #10
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	230d      	movs	r3, #13
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	492c      	ldr	r1, [pc, #176]	; (800374c <mqtt_Publisher+0x108>)
 800369c:	f011 fcda 	bl	8015054 <siprintf>
 80036a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80036a4:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80036a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036ac:	9306      	str	r3, [sp, #24]
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	9305      	str	r3, [sp, #20]
 80036b4:	ac02      	add	r4, sp, #8
 80036b6:	f107 0318 	add.w	r3, r7, #24
 80036ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036c2:	2300      	movs	r3, #0
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ce:	2200      	movs	r2, #0
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	4628      	mov	r0, r5
 80036d4:	f7fe f985 	bl	80019e2 <MQTTSerialize_publish>
 80036d8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			topicString, payload,
			(length = sprintf((char *)payload, "%d%c%c", data , '\r', '\n')));

	// Send PUBLISH to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 80036dc:	e02b      	b.n	8003736 <mqtt_Publisher+0xf2>
		switch (internalState) {
 80036de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <mqtt_Publisher+0xa8>
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d01e      	beq.n	8003728 <mqtt_Publisher+0xe4>
 80036ea:	e024      	b.n	8003736 <mqtt_Publisher+0xf2>
				case 0:
					Status = ESP_SendData(buffer, length);
 80036ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fd14 	bl	8001124 <ESP_SendData>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

					if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 8003702:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <mqtt_Publisher+0xd2>
						internalState++;
 800370a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800370e:	3301      	adds	r3, #1
 8003710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003714:	e00f      	b.n	8003736 <mqtt_Publisher+0xf2>
					} else {
						internalState = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
						trial++;
 800371c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003720:	3301      	adds	r3, #1
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					}
				break;
 8003726:	e006      	b.n	8003736 <mqtt_Publisher+0xf2>
				case 1:
					Status = ESP8266_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					trial = TRIAL_CONNECTION_TIME;
 800372e:	2305      	movs	r3, #5
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					break;
 8003734:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800373a:	2b04      	cmp	r3, #4
 800373c:	ddcf      	ble.n	80036de <mqtt_Publisher+0x9a>
		}
	}
	return Status;
 800373e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8003742:	4618      	mov	r0, r3
 8003744:	37b8      	adds	r7, #184	; 0xb8
 8003746:	46bd      	mov	sp, r7
 8003748:	bdb0      	pop	{r4, r5, r7, pc}
 800374a:	bf00      	nop
 800374c:	080168d8 	.word	0x080168d8

08003750 <mqtt_SubscriberPacket>:

	}
	return Status;
}

ESP8266_StatusTypeDef mqtt_SubscriberPacket(char *topic) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ae      	sub	sp, #184	; 0xb8
 8003754:	af04      	add	r7, sp, #16
 8003756:	6078      	str	r0, [r7, #4]
	int length;
	unsigned char buffer[128];
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	int32_t trial = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int32_t internalState = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// Populate the subscribe message.
	MQTTString topicFilters[1] = { MQTTString_initializer };
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
	topicFilters[0].cstring = topic;//"test/rgb";
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60fb      	str	r3, [r7, #12]
	int requestedQoSs[1] = { 0 };
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
	length = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1,
 800377e:	f107 0018 	add.w	r0, r7, #24
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	9302      	str	r3, [sp, #8]
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	2301      	movs	r3, #1
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	2200      	movs	r2, #0
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	f7fe f9c1 	bl	8001b1e <MQTTSerialize_subscribe>
 800379c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			topicFilters, requestedQoSs);

	// Send SUBSCRIBE to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 80037a0:	e02b      	b.n	80037fa <mqtt_SubscriberPacket+0xaa>
		switch (internalState) {
 80037a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <mqtt_SubscriberPacket+0x60>
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d01e      	beq.n	80037ec <mqtt_SubscriberPacket+0x9c>
 80037ae:	e024      	b.n	80037fa <mqtt_SubscriberPacket+0xaa>
		case 0:
			Status = ESP_SendData(buffer, length);
 80037b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fcb2 	bl	8001124 <ESP_SendData>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

			if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 80037c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <mqtt_SubscriberPacket+0x8a>
				internalState++;
 80037ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037d2:	3301      	adds	r3, #1
 80037d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037d8:	e00f      	b.n	80037fa <mqtt_SubscriberPacket+0xaa>
			} else {
				internalState = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				trial++;
 80037e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			break;
 80037ea:	e006      	b.n	80037fa <mqtt_SubscriberPacket+0xaa>
		case 1:
			Status = ESP8266_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			trial = TRIAL_CONNECTION_TIME;
 80037f2:	2305      	movs	r3, #5
 80037f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			break;
 80037f8:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 80037fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037fe:	2b04      	cmp	r3, #4
 8003800:	ddcf      	ble.n	80037a2 <mqtt_SubscriberPacket+0x52>
		}
	}
	return Status;
 8003802:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8003806:	4618      	mov	r0, r3
 8003808:	37a8      	adds	r7, #168	; 0xa8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <mqtt_SubscriberReceive>:

	return Status;
}*/


ESP8266_StatusTypeDef mqtt_SubscriberReceive(char topic[], int32_t* pData) {
 800380e:	b580      	push	{r7, lr}
 8003810:	b0a4      	sub	sp, #144	; 0x90
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t dato[MQTT_BUFFERSIZE];


	//alocate memory for the receiving buffer
	//dato = (uint8_t*) malloc(MQTT_BUFFERSIZE * sizeof(uint8_t));
	memset(dato, '\0', MQTT_BUFFERSIZE);
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f011 f813 	bl	8014852 <memset>
	ESP_ReceiveData(dato, MQTT_BUFFERSIZE, &RetLength);
 800382c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003830:	f107 0308 	add.w	r3, r7, #8
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fcb4 	bl	80011a4 <ESP_ReceiveData>
	*(pData) = findIntData(topic, dato, RetLength);
 800383c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003840:	f107 0308 	add.w	r3, r7, #8
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f85a 	bl	8003900 <findIntData>
 800384c:	4602      	mov	r2, r0
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	601a      	str	r2, [r3, #0]
	//free(dato);

	return Status;
 8003852:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003856:	4618      	mov	r0, r3
 8003858:	3790      	adds	r7, #144	; 0x90
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <strpos>:





static int strpos(char *hay, char *needle, int offset) {
 800385e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003860:	b089      	sub	sp, #36	; 0x24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	466b      	mov	r3, sp
 800386c:	461e      	mov	r6, r3
	char haystack[strlen(hay)];
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7fc fcbe 	bl	80001f0 <strlen>
 8003874:	4603      	mov	r3, r0
 8003876:	3b01      	subs	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	4601      	mov	r1, r0
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f04f 0400 	mov.w	r4, #0
 8003888:	00d4      	lsls	r4, r2, #3
 800388a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4601      	mov	r1, r0
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f04f 0400 	mov.w	r4, #0
 800389e:	00d4      	lsls	r4, r2, #3
 80038a0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80038a4:	00cb      	lsls	r3, r1, #3
 80038a6:	1dc3      	adds	r3, r0, #7
 80038a8:	08db      	lsrs	r3, r3, #3
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	ebad 0d03 	sub.w	sp, sp, r3
 80038b0:	466b      	mov	r3, sp
 80038b2:	3300      	adds	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
	strncpy(haystack, hay + offset, strlen(hay) - offset);
 80038b6:	69bc      	ldr	r4, [r7, #24]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	18d5      	adds	r5, r2, r3
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7fc fc96 	bl	80001f0 <strlen>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	4629      	mov	r1, r5
 80038ce:	4620      	mov	r0, r4
 80038d0:	f011 fbe8 	bl	80150a4 <strncpy>
	char *p = strstr(haystack, needle);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f011 fbf8 	bl	80150ce <strstr>
 80038de:	6178      	str	r0, [r7, #20]
	if (p)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <strpos+0x94>
		return p - haystack + offset;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	1a9a      	subs	r2, r3, r2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	e001      	b.n	80038f6 <strpos+0x98>
	return -1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f6:	46b5      	mov	sp, r6
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3724      	adds	r7, #36	; 0x24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003900 <findIntData>:

static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght) {
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b091      	sub	sp, #68	; 0x44
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	466b      	mov	r3, sp
 800390e:	461d      	mov	r5, r3
	uint8_t newdata[lenght];
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4603      	mov	r3, r0
 8003914:	3b01      	subs	r3, #1
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
 8003918:	4601      	mov	r1, r0
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f04f 0400 	mov.w	r4, #0
 8003926:	00d4      	lsls	r4, r2, #3
 8003928:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800392c:	00cb      	lsls	r3, r1, #3
 800392e:	4601      	mov	r1, r0
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f04f 0400 	mov.w	r4, #0
 800393c:	00d4      	lsls	r4, r2, #3
 800393e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	1dc3      	adds	r3, r0, #7
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	ebad 0d03 	sub.w	sp, sp, r3
 800394e:	466b      	mov	r3, sp
 8003950:	3300      	adds	r3, #0
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t i = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t data_begin;
	int32_t data_end;

	/* remove \0 */
	memset((char*) newdata, '\0', lenght);
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f010 ff75 	bl	8014852 <memset>
	for (i = 0; i < lenght; i++) {
 8003968:	2300      	movs	r3, #0
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
 800396c:	e011      	b.n	8003992 <findIntData+0x92>
		if (*(data + i) != '\0') {
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <findIntData+0x8c>
			newdata[j++] = *(data + i);
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	441a      	add	r2, r3
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	63b9      	str	r1, [r7, #56]	; 0x38
 8003986:	7811      	ldrb	r1, [r2, #0]
 8003988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < lenght; i++) {
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	3301      	adds	r3, #1
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
 8003992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3e9      	bcc.n	800396e <findIntData+0x6e>
		}
	}
	data_begin = strpos((char*)newdata, (char*)topic, 0);	//get index where string topic begins
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2200      	movs	r2, #0
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5c 	bl	800385e <strpos>
 80039a6:	62b8      	str	r0, [r7, #40]	; 0x28
	data_end = strpos((char*)newdata, (char*)END_STRING_R_N, 0);		//get index where \r\n ends
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2200      	movs	r2, #0
 80039ac:	493c      	ldr	r1, [pc, #240]	; (8003aa0 <findIntData+0x1a0>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff55 	bl	800385e <strpos>
 80039b4:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(data_end == -1 && data_begin != -1){
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039bc:	d10a      	bne.n	80039d4 <findIntData+0xd4>
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c4:	d006      	beq.n	80039d4 <findIntData+0xd4>
		data_end = strpos((char*)newdata, (char*)END_STRING_N, 0);		//get index where \n ends
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	2200      	movs	r2, #0
 80039ca:	4936      	ldr	r1, [pc, #216]	; (8003aa4 <findIntData+0x1a4>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff46 	bl	800385e <strpos>
 80039d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	}


	if (data_begin != -1 && data_end != -1) {
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d05a      	beq.n	8003a92 <findIntData+0x192>
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e2:	d056      	beq.n	8003a92 <findIntData+0x192>
 80039e4:	466b      	mov	r3, sp
 80039e6:	461e      	mov	r6, r3
		i = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
		int value = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t index_start = data_begin + strlen(topic);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7fc fbfd 	bl	80001f0 <strlen>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	4413      	add	r3, r2
 80039fc:	623b      	str	r3, [r7, #32]
		int32_t st_lenght = data_end - index_start + 1; //sume uno porque el atoi me convertia mal si el st tenia un solo valor, es por eso que inicializo el primer elemtento del arreglo con el '0'
 80039fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
		uint8_t st[st_lenght];
 8003a08:	69f8      	ldr	r0, [r7, #28]
 8003a0a:	1e43      	subs	r3, r0, #1
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4619      	mov	r1, r3
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	00d4      	lsls	r4, r2, #3
 8003a20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003a24:	00cb      	lsls	r3, r1, #3
 8003a26:	4603      	mov	r3, r0
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	f04f 0400 	mov.w	r4, #0
 8003a36:	00d4      	lsls	r4, r2, #3
 8003a38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003a3c:	00cb      	lsls	r3, r1, #3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	3307      	adds	r3, #7
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	ebad 0d03 	sub.w	sp, sp, r3
 8003a4a:	466b      	mov	r3, sp
 8003a4c:	3300      	adds	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
		st[0] = '0';//inicializado en cero el primer elemento para que el atoi convierta los numero como el 1, 2 ....9 bien sino los convertia 10, 20 ..... 90
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2230      	movs	r2, #48	; 0x30
 8003a54:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 8003a56:	2301      	movs	r3, #1
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5a:	e00e      	b.n	8003a7a <findIntData+0x17a>
			st[i] = *(newdata + index_start + i - 1);
 8003a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	440b      	add	r3, r1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	7819      	ldrb	r1, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	4413      	add	r3, r2
 8003a70:	460a      	mov	r2, r1
 8003a72:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	3301      	adds	r3, #1
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3ec      	bcc.n	8003a5c <findIntData+0x15c>
		}

		value = atoi((char*) st);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f010 fe99 	bl	80147bc <atoi>
 8003a8a:	6278      	str	r0, [r7, #36]	; 0x24

		return value;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	46b5      	mov	sp, r6
 8003a90:	e001      	b.n	8003a96 <findIntData+0x196>

	}
	return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a96:	46ad      	mov	sp, r5

}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3744      	adds	r7, #68	; 0x44
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa0:	08016af0 	.word	0x08016af0
 8003aa4:	08016af4 	.word	0x08016af4

08003aa8 <initTasks>:
void subTask(void *argument);
void analizeTask(void *argument);
void printConsoleTask(void *argument);
void buttonsTask(void *argument);

void initTasks(void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8

	HAL_UART_F_Init();
 8003aae:	f001 fa79 	bl	8004fa4 <HAL_UART_F_Init>

	/* Led initialize */
	int i;
	uint8_t flag_error_mem = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	72fb      	strb	r3, [r7, #11]

	//led init
	for(i = 0; i < LED_COUNT; i++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e008      	b.n	8003ace <initTasks+0x26>
		vLedWrite(i, GPIO_PIN_RESET);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fd46 	bl	8002554 <vLedWrite>
	for(i = 0; i < LED_COUNT; i++){
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	ddf3      	ble.n	8003abc <initTasks+0x14>
	}

	//button set
	button_down.GPIOx = JOY_DOWN_GPIO_Port;
 8003ad4:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <initTasks+0x148>)
 8003ad6:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <initTasks+0x14c>)
 8003ad8:	601a      	str	r2, [r3, #0]
	button_down.GPIO_Pin = JOY_DOWN_Pin;
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <initTasks+0x148>)
 8003adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ae0:	809a      	strh	r2, [r3, #4]

	//sensor check
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP280_dev_address, 2, 100) == HAL_OK) {
 8003ae2:	2364      	movs	r3, #100	; 0x64
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	21ee      	movs	r1, #238	; 0xee
 8003ae8:	4843      	ldr	r0, [pc, #268]	; (8003bf8 <initTasks+0x150>)
 8003aea:	f003 f97b 	bl	8006de4 <HAL_I2C_IsDeviceReady>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <initTasks+0x60>
		BMP280_init(&dev);
 8003af4:	4841      	ldr	r0, [pc, #260]	; (8003bfc <initTasks+0x154>)
 8003af6:	f7fe f960 	bl	8001dba <BMP280_init>
		BMP280_calc_values(&dev);
 8003afa:	4840      	ldr	r0, [pc, #256]	; (8003bfc <initTasks+0x154>)
 8003afc:	f7fe f978 	bl	8001df0 <BMP280_calc_values>
		dev.data.init_height = dev.data.altitude;
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <initTasks+0x154>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a3d      	ldr	r2, [pc, #244]	; (8003bfc <initTasks+0x154>)
 8003b06:	6313      	str	r3, [r2, #48]	; 0x30
	}


	strcpy((char*)dataSub.topic, topic_sub2);
 8003b08:	493d      	ldr	r1, [pc, #244]	; (8003c00 <initTasks+0x158>)
 8003b0a:	483e      	ldr	r0, [pc, #248]	; (8003c04 <initTasks+0x15c>)
 8003b0c:	f011 fac2 	bl	8015094 <strcpy>

	xSemaphoreMutexUart = xSemaphoreCreateMutex();
 8003b10:	2001      	movs	r0, #1
 8003b12:	f00d fa78 	bl	8011006 <xQueueCreateMutex>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <initTasks+0x160>)
 8003b1a:	601a      	str	r2, [r3, #0]
	//xSemaphorePub = xSemaphoreCreateBinary();

	xQueuePrintConsole = xQueueCreate(100, sizeof(uint8_t));
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2101      	movs	r1, #1
 8003b20:	2064      	movs	r0, #100	; 0x64
 8003b22:	f00d f9f4 	bl	8010f0e <xQueueGenericCreate>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <initTasks+0x164>)
 8003b2a:	601a      	str	r2, [r3, #0]

	xQueueDataRx = xQueueCreate(5, sizeof(int32_t));
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2104      	movs	r1, #4
 8003b30:	2005      	movs	r0, #5
 8003b32:	f00d f9ec 	bl	8010f0e <xQueueGenericCreate>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <initTasks+0x168>)
 8003b3a:	601a      	str	r2, [r3, #0]
	//xSemaphorePub != NULL && xSemaphoreSub != NULL &&
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <initTasks+0x160>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d042      	beq.n	8003bca <initTasks+0x122>
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <initTasks+0x168>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03e      	beq.n	8003bca <initTasks+0x122>
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <initTasks+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03a      	beq.n	8003bca <initTasks+0x122>
		BaseType_t res = xTaskCreate(wifiConnectTask, "wifi", STACK_SIZE, 0,
 8003b54:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <initTasks+0x16c>)
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	2320      	movs	r3, #32
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b62:	492d      	ldr	r1, [pc, #180]	; (8003c18 <initTasks+0x170>)
 8003b64:	482d      	ldr	r0, [pc, #180]	; (8003c1c <initTasks+0x174>)
 8003b66:	f00e f841 	bl	8011bec <xTaskCreate>
 8003b6a:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, &wifiTask);
		if (res != pdPASS) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d004      	beq.n	8003b7c <initTasks+0xd4>
			printf("error creacion de tarea wifi\r\n");
 8003b72:	482b      	ldr	r0, [pc, #172]	; (8003c20 <initTasks+0x178>)
 8003b74:	f011 fa56 	bl	8015024 <puts>
			flag_error_mem = 1;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(ledTask, "led", 128, 0,
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	2318      	movs	r3, #24
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	4926      	ldr	r1, [pc, #152]	; (8003c24 <initTasks+0x17c>)
 8003b8a:	4827      	ldr	r0, [pc, #156]	; (8003c28 <initTasks+0x180>)
 8003b8c:	f00e f82e 	bl	8011bec <xTaskCreate>
 8003b90:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityNormal, 0);
		if (res != pdPASS) {
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d004      	beq.n	8003ba2 <initTasks+0xfa>
			printf("error creacion de tarea led\r\n");
 8003b98:	4824      	ldr	r0, [pc, #144]	; (8003c2c <initTasks+0x184>)
 8003b9a:	f011 fa43 	bl	8015024 <puts>
			flag_error_mem = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(printConsoleTask, "print", 128, 0,
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	2320      	movs	r3, #32
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	4920      	ldr	r1, [pc, #128]	; (8003c30 <initTasks+0x188>)
 8003bb0:	4820      	ldr	r0, [pc, #128]	; (8003c34 <initTasks+0x18c>)
 8003bb2:	f00e f81b 	bl	8011bec <xTaskCreate>
 8003bb6:	6078      	str	r0, [r7, #4]
						(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d00b      	beq.n	8003bd6 <initTasks+0x12e>
			printf("error creacion de tarea led\r\n");
 8003bbe:	481b      	ldr	r0, [pc, #108]	; (8003c2c <initTasks+0x184>)
 8003bc0:	f011 fa30 	bl	8015024 <puts>
			flag_error_mem = 1;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	72fb      	strb	r3, [r7, #11]
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003bc8:	e005      	b.n	8003bd6 <initTasks+0x12e>
			printf("error creacion de tarea analize\r\n");
			flag_error_mem = 1;

		}*/
	} else {
		printf("error creacion de semaforo\r\n");
 8003bca:	481b      	ldr	r0, [pc, #108]	; (8003c38 <initTasks+0x190>)
 8003bcc:	f011 fa2a 	bl	8015024 <puts>
		flag_error_mem = 1;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	72fb      	strb	r3, [r7, #11]
 8003bd4:	e000      	b.n	8003bd8 <initTasks+0x130>
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003bd6:	bf00      	nop
	}

	if(flag_error_mem == 1)
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d103      	bne.n	8003be6 <initTasks+0x13e>
		vLedWrite(LED_4, GPIO_PIN_SET);
 8003bde:	2101      	movs	r1, #1
 8003be0:	2003      	movs	r0, #3
 8003be2:	f7fe fcb7 	bl	8002554 <vLedWrite>

}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000eb54 	.word	0x2000eb54
 8003bf4:	48002000 	.word	0x48002000
 8003bf8:	2000e538 	.word	0x2000e538
 8003bfc:	2000eaf4 	.word	0x2000eaf4
 8003c00:	20000034 	.word	0x20000034
 8003c04:	2000eb2c 	.word	0x2000eb2c
 8003c08:	2000eb28 	.word	0x2000eb28
 8003c0c:	2000eb44 	.word	0x2000eb44
 8003c10:	2000eaf0 	.word	0x2000eaf0
 8003c14:	2000eb4c 	.word	0x2000eb4c
 8003c18:	080168ec 	.word	0x080168ec
 8003c1c:	08003c3d 	.word	0x08003c3d
 8003c20:	080168f4 	.word	0x080168f4
 8003c24:	08016914 	.word	0x08016914
 8003c28:	08003f35 	.word	0x08003f35
 8003c2c:	08016918 	.word	0x08016918
 8003c30:	08016938 	.word	0x08016938
 8003c34:	08003f59 	.word	0x08003f59
 8003c38:	08016940 	.word	0x08016940

08003c3c <wifiConnectTask>:

void wifiConnectTask(void *argument) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
	//uint8_t info[60] = "Conectando a wifi, Espere por favor.. \r\n";
	ESP8266_StatusTypeDef Status;
	//ESP8266_ConnectionInfoTypeDef connection_info;
	//esp_state state_esp = INIT;
	//esp8266_broker_setup(&connection_info);
	int internalState = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
	TickType_t t = xTaskGetTickCount();
 8003c48:	f00e fb42 	bl	80122d0 <xTaskGetTickCount>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60bb      	str	r3, [r7, #8]
	printf("Conectando a wifi, Espere por favor.. \r\n");
 8003c50:	48a0      	ldr	r0, [pc, #640]	; (8003ed4 <wifiConnectTask+0x298>)
 8003c52:	f011 f9e7 	bl	8015024 <puts>
	for (;;) {
		switch (internalState) {
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	f200 8136 	bhi.w	8003eca <wifiConnectTask+0x28e>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <wifiConnectTask+0x28>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003cbf 	.word	0x08003cbf
 8003c6c:	08003cf3 	.word	0x08003cf3
 8003c70:	08003d23 	.word	0x08003d23
 8003c74:	08003d6b 	.word	0x08003d6b
 8003c78:	08003d9b 	.word	0x08003d9b
 8003c7c:	08003ea9 	.word	0x08003ea9
		case 0:
			// Turn the LED off.
			vLedWrite(LED_2, GPIO_PIN_RESET);
 8003c80:	2100      	movs	r1, #0
 8003c82:	2001      	movs	r0, #1
 8003c84:	f7fe fc66 	bl	8002554 <vLedWrite>
			// Connect to wifi (restore to default first).
			Status = ESP_ConnectWifi(true, WIFI_AP_SSID, WIFI_AP_PASS);
 8003c88:	4a93      	ldr	r2, [pc, #588]	; (8003ed8 <wifiConnectTask+0x29c>)
 8003c8a:	4994      	ldr	r1, [pc, #592]	; (8003edc <wifiConnectTask+0x2a0>)
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f7fd f91f 	bl	8000ed0 <ESP_ConnectWifi>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <wifiConnectTask+0x70>
				// To the next state.
				internalState++;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2002      	movs	r0, #2
 8003ca6:	f7fe fc55 	bl	8002554 <vLedWrite>
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}

			break;
 8003caa:	e103      	b.n	8003eb4 <wifiConnectTask+0x278>
				if (Status == ESP8266_ERROR)
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	f040 8100 	bne.w	8003eb4 <wifiConnectTask+0x278>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7fe fc4c 	bl	8002554 <vLedWrite>
			break;
 8003cbc:	e0fa      	b.n	8003eb4 <wifiConnectTask+0x278>
		case 1:
			// Wait 1sec.
			Status = ESP_Delay(1000);
 8003cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cc2:	f7fd f8d7 	bl	8000e74 <ESP_Delay>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <wifiConnectTask+0xa4>
				// To the next state.
				internalState++;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f7fe fc3b 	bl	8002554 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003cde:	e0eb      	b.n	8003eb8 <wifiConnectTask+0x27c>
				if (Status == ESP8266_ERROR)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	f040 80e8 	bne.w	8003eb8 <wifiConnectTask+0x27c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2002      	movs	r0, #2
 8003cec:	f7fe fc32 	bl	8002554 <vLedWrite>
			break;
 8003cf0:	e0e2      	b.n	8003eb8 <wifiConnectTask+0x27c>
		case 2:
			// Check the wifi connection status.
			Status = ESP_IsConnectedWifi();
 8003cf2:	f7fd f995 	bl	8001020 <ESP_IsConnectedWifi>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <wifiConnectTask+0xd4>
				// To the next state.
				internalState++;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	3301      	adds	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003d06:	2100      	movs	r1, #0
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fe fc23 	bl	8002554 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003d0e:	e0d5      	b.n	8003ebc <wifiConnectTask+0x280>
				if (Status == ESP8266_ERROR)
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	f040 80d2 	bne.w	8003ebc <wifiConnectTask+0x280>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2002      	movs	r0, #2
 8003d1c:	f7fe fc1a 	bl	8002554 <vLedWrite>
			break;
 8003d20:	e0cc      	b.n	8003ebc <wifiConnectTask+0x280>
		case 3:
			// Start TCP connection.
			Status = ESP_StartTCP(network_host, network_port, network_keepalive,
 8003d22:	4b6f      	ldr	r3, [pc, #444]	; (8003ee0 <wifiConnectTask+0x2a4>)
 8003d24:	8819      	ldrh	r1, [r3, #0]
 8003d26:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <wifiConnectTask+0x2a8>)
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <wifiConnectTask+0x2ac>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	486c      	ldr	r0, [pc, #432]	; (8003eec <wifiConnectTask+0x2b0>)
 8003d3a:	f7fd f97f 	bl	800103c <ESP_StartTCP>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	74fb      	strb	r3, [r7, #19]
					network_ssl);
			if (Status == ESP8266_OK) {
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <wifiConnectTask+0x11c>
				// To the next state.
				internalState++;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003d4e:	2100      	movs	r1, #0
 8003d50:	2002      	movs	r0, #2
 8003d52:	f7fe fbff 	bl	8002554 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003d56:	e0b3      	b.n	8003ec0 <wifiConnectTask+0x284>
				if (Status == ESP8266_ERROR)
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f040 80b0 	bne.w	8003ec0 <wifiConnectTask+0x284>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003d60:	2101      	movs	r1, #1
 8003d62:	2002      	movs	r0, #2
 8003d64:	f7fe fbf6 	bl	8002554 <vLedWrite>
			break;
 8003d68:	e0aa      	b.n	8003ec0 <wifiConnectTask+0x284>
		case 4:
			// Send the mqtt data.
			Status = mqtt_Connect();
 8003d6a:	f7ff fc01 	bl	8003570 <mqtt_Connect>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <wifiConnectTask+0x14c>
				internalState++;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	2002      	movs	r0, #2
 8003d82:	f7fe fbe7 	bl	8002554 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003d86:	e09d      	b.n	8003ec4 <wifiConnectTask+0x288>
				if (Status == ESP8266_ERROR)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 809a 	bne.w	8003ec4 <wifiConnectTask+0x288>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003d90:	2101      	movs	r1, #1
 8003d92:	2002      	movs	r0, #2
 8003d94:	f7fe fbde 	bl	8002554 <vLedWrite>
			break;
 8003d98:	e094      	b.n	8003ec4 <wifiConnectTask+0x288>
		case 5:
			Status = mqtt_SubscriberPacket(dataSub.topic);
 8003d9a:	4855      	ldr	r0, [pc, #340]	; (8003ef0 <wifiConnectTask+0x2b4>)
 8003d9c:	f7ff fcd8 	bl	8003750 <mqtt_SubscriberPacket>
 8003da0:	4603      	mov	r3, r0
 8003da2:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d174      	bne.n	8003e94 <wifiConnectTask+0x258>
				internalState++;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003db0:	2100      	movs	r1, #0
 8003db2:	2002      	movs	r0, #2
 8003db4:	f7fe fbce 	bl	8002554 <vLedWrite>
				vLedWrite(LED_2, GPIO_PIN_SET);
 8003db8:	2101      	movs	r1, #1
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f7fe fbca 	bl	8002554 <vLedWrite>


				vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f00e f8c5 	bl	8011f58 <vTaskDelayUntil>


				xSemaphoreSub = xSemaphoreCreateBinary();
 8003dce:	2203      	movs	r2, #3
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f00d f89b 	bl	8010f0e <xQueueGenericCreate>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <wifiConnectTask+0x2b8>)
 8003ddc:	601a      	str	r2, [r3, #0]
				//xSemaphorePub = xSemaphoreCreateBinary();

				xQueueDataPub = xQueueCreate(20, sizeof(dataPubi_t));
 8003dde:	2200      	movs	r2, #0
 8003de0:	2118      	movs	r1, #24
 8003de2:	2014      	movs	r0, #20
 8003de4:	f00d f893 	bl	8010f0e <xQueueGenericCreate>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <wifiConnectTask+0x2bc>)
 8003dec:	601a      	str	r2, [r3, #0]

				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <wifiConnectTask+0x2b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04a      	beq.n	8003e8c <wifiConnectTask+0x250>
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <wifiConnectTask+0x2bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d046      	beq.n	8003e8c <wifiConnectTask+0x250>
					BaseType_t res;
					res = xTaskCreate(subTask, "subscribe", STACK_SIZE, 0,
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	2321      	movs	r3, #33	; 0x21
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2300      	movs	r3, #0
 8003e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0c:	493b      	ldr	r1, [pc, #236]	; (8003efc <wifiConnectTask+0x2c0>)
 8003e0e:	483c      	ldr	r0, [pc, #240]	; (8003f00 <wifiConnectTask+0x2c4>)
 8003e10:	f00d feec 	bl	8011bec <xTaskCreate>
 8003e14:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d002      	beq.n	8003e22 <wifiConnectTask+0x1e6>
						printf("error creacion de tarea sub\r\n");
 8003e1c:	4839      	ldr	r0, [pc, #228]	; (8003f04 <wifiConnectTask+0x2c8>)
 8003e1e:	f011 f901 	bl	8015024 <puts>
					}
					res = xTaskCreate(analizeTask, "analize data", 128, 0,
 8003e22:	2300      	movs	r3, #0
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	2318      	movs	r3, #24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	4936      	ldr	r1, [pc, #216]	; (8003f08 <wifiConnectTask+0x2cc>)
 8003e30:	4836      	ldr	r0, [pc, #216]	; (8003f0c <wifiConnectTask+0x2d0>)
 8003e32:	f00d fedb 	bl	8011bec <xTaskCreate>
 8003e36:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d002      	beq.n	8003e44 <wifiConnectTask+0x208>
						printf("error creacion de tarea analize\r\n");
 8003e3e:	4834      	ldr	r0, [pc, #208]	; (8003f10 <wifiConnectTask+0x2d4>)
 8003e40:	f011 f8f0 	bl	8015024 <puts>
					}
					res = xTaskCreate(pubTask, "publish", STACK_SIZE, 0,
 8003e44:	2300      	movs	r3, #0
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	2318      	movs	r3, #24
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e52:	4930      	ldr	r1, [pc, #192]	; (8003f14 <wifiConnectTask+0x2d8>)
 8003e54:	4830      	ldr	r0, [pc, #192]	; (8003f18 <wifiConnectTask+0x2dc>)
 8003e56:	f00d fec9 	bl	8011bec <xTaskCreate>
 8003e5a:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d002      	beq.n	8003e68 <wifiConnectTask+0x22c>
						printf("error creacion de tarea pub\r\n");
 8003e62:	482e      	ldr	r0, [pc, #184]	; (8003f1c <wifiConnectTask+0x2e0>)
 8003e64:	f011 f8de 	bl	8015024 <puts>
					}
					res = xTaskCreate(buttonsTask, "buttons", 128, 0,
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	2321      	movs	r3, #33	; 0x21
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	492a      	ldr	r1, [pc, #168]	; (8003f20 <wifiConnectTask+0x2e4>)
 8003e76:	482b      	ldr	r0, [pc, #172]	; (8003f24 <wifiConnectTask+0x2e8>)
 8003e78:	f00d feb8 	bl	8011bec <xTaskCreate>
 8003e7c:	60f8      	str	r0, [r7, #12]
									(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00f      	beq.n	8003ea4 <wifiConnectTask+0x268>
						printf("error creacion de tarea buttons\r\n");
 8003e84:	4828      	ldr	r0, [pc, #160]	; (8003f28 <wifiConnectTask+0x2ec>)
 8003e86:	f011 f8cd 	bl	8015024 <puts>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 8003e8a:	e00b      	b.n	8003ea4 <wifiConnectTask+0x268>

					}
					//xSemaphoreGive(xSemaphorePub);
				}
				else{
					printf("error creacion de semaforo\r\n");
 8003e8c:	4827      	ldr	r0, [pc, #156]	; (8003f2c <wifiConnectTask+0x2f0>)
 8003e8e:	f011 f8c9 	bl	8015024 <puts>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003e92:	e019      	b.n	8003ec8 <wifiConnectTask+0x28c>
				if (Status == ESP8266_ERROR)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d116      	bne.n	8003ec8 <wifiConnectTask+0x28c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f7fe fb59 	bl	8002554 <vLedWrite>
			break;
 8003ea2:	e011      	b.n	8003ec8 <wifiConnectTask+0x28c>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 8003ea4:	bf00      	nop
			break;
 8003ea6:	e00f      	b.n	8003ec8 <wifiConnectTask+0x28c>
		case 6:
			vTaskDelete(wifiTask);
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <wifiConnectTask+0x2f4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f00d ffe1 	bl	8011e74 <vTaskDelete>
			break;
 8003eb2:	e00a      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003eb4:	bf00      	nop
 8003eb6:	e008      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003eb8:	bf00      	nop
 8003eba:	e006      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003ebc:	bf00      	nop
 8003ebe:	e004      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <wifiConnectTask+0x28e>
			break;
 8003ec8:	bf00      	nop
		}

		osDelay(1 / portTICK_PERIOD_MS);
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f00c fe2e 	bl	8010b2c <osDelay>
		switch (internalState) {
 8003ed0:	e6c1      	b.n	8003c56 <wifiConnectTask+0x1a>
 8003ed2:	bf00      	nop
 8003ed4:	0801695c 	.word	0x0801695c
 8003ed8:	08016984 	.word	0x08016984
 8003edc:	08016994 	.word	0x08016994
 8003ee0:	20000024 	.word	0x20000024
 8003ee4:	20000026 	.word	0x20000026
 8003ee8:	20000457 	.word	0x20000457
 8003eec:	20000004 	.word	0x20000004
 8003ef0:	2000eb2c 	.word	0x2000eb2c
 8003ef4:	2000eb6c 	.word	0x2000eb6c
 8003ef8:	2000eb48 	.word	0x2000eb48
 8003efc:	080169a0 	.word	0x080169a0
 8003f00:	08003fed 	.word	0x08003fed
 8003f04:	080169ac 	.word	0x080169ac
 8003f08:	080169cc 	.word	0x080169cc
 8003f0c:	08004065 	.word	0x08004065
 8003f10:	080169dc 	.word	0x080169dc
 8003f14:	08016a00 	.word	0x08016a00
 8003f18:	08003f91 	.word	0x08003f91
 8003f1c:	08016a08 	.word	0x08016a08
 8003f20:	08016a28 	.word	0x08016a28
 8003f24:	080040cd 	.word	0x080040cd
 8003f28:	08016a30 	.word	0x08016a30
 8003f2c:	08016940 	.word	0x08016940
 8003f30:	2000eb4c 	.word	0x2000eb4c

08003f34 <ledTask>:
	}
	vTaskDelete(wifiTask);
}

void ledTask(void *argument) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

	TickType_t t = xTaskGetTickCount();
 8003f3c:	f00e f9c8 	bl	80122d0 <xTaskGetTickCount>
 8003f40:	4603      	mov	r3, r0
 8003f42:	60fb      	str	r3, [r7, #12]
	for (;;) {
		vLedToggle(LED_1);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fe fb6f 	bl	8002628 <vLedToggle>
		vTaskDelayUntil(&t, pdMS_TO_TICKS(100));
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	2164      	movs	r1, #100	; 0x64
 8003f50:	4618      	mov	r0, r3
 8003f52:	f00e f801 	bl	8011f58 <vTaskDelayUntil>
		vLedToggle(LED_1);
 8003f56:	e7f5      	b.n	8003f44 <ledTask+0x10>

08003f58 <printConsoleTask>:
	}
}

void printConsoleTask(void *argument){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
/*	uint8_t dato1 = 'w';
	printf("%c",dato1);
	uint8_t a1 = 'a';
	printf("%c",(char*)a1);*/
	for(;;){
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <printConsoleTask+0x34>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f107 010f 	add.w	r1, r7, #15
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f00d fa7b 	bl	8011468 <xQueueReceive>
		taskENTER_CRITICAL();
 8003f72:	f00f fb1b 	bl	80135ac <vPortEnterCritical>
		printf("%c", dataQueuePrint);
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f010 ffe2 	bl	8014f44 <putchar>
		taskEXIT_CRITICAL();
 8003f80:	f00f fb42 	bl	8013608 <vPortExitCritical>
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f00e f861 	bl	801204c <vTaskDelay>
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 8003f8a:	e7e9      	b.n	8003f60 <printConsoleTask+0x8>
 8003f8c:	2000eb44 	.word	0x2000eb44

08003f90 <pubTask>:
	}
}

void pubTask(void *argument) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	//uint32_t data = 0;
	//TickType_t t = xTaskGetTickCount();
	dataPubi_t dataQueuePub;
	//xSemaphoreTake(xSemaphorePub, portMAX_DELAY);
	for (;;) {
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <pubTask+0x54>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f107 010c 	add.w	r1, r7, #12
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00d fa5f 	bl	8011468 <xQueueReceive>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <pubTask+0x58>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f00d fb34 	bl	8011620 <xQueueSemaphoreTake>
		Status = mqtt_Publisher(dataQueuePub.topic, dataQueuePub.data);
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	f107 030c 	add.w	r3, r7, #12
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb3f 	bl	8003644 <mqtt_Publisher>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		xSemaphoreGive(xSemaphoreMutexUart);
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <pubTask+0x58>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f00d f82f 	bl	8011038 <xQueueGenericSend>
		if (Status == ESP8266_OK) {

		}
		//data++;
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f00e f836 	bl	801204c <vTaskDelay>
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 8003fe0:	e7da      	b.n	8003f98 <pubTask+0x8>
 8003fe2:	bf00      	nop
 8003fe4:	2000eb48 	.word	0x2000eb48
 8003fe8:	2000eb28 	.word	0x2000eb28

08003fec <subTask>:

		//vTaskDelayUntil(&t, pdMS_TO_TICKS(15000));
	}
}

void subTask(void *argument) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;


	for (;;) {
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <subTask+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00d fb0f 	bl	8011620 <xQueueSemaphoreTake>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <subTask+0x68>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f644 6120 	movw	r1, #20000	; 0x4e20
 800400a:	4618      	mov	r0, r3
 800400c:	f00d fb08 	bl	8011620 <xQueueSemaphoreTake>
		Status = mqtt_SubscriberReceive(dataSub.topic, &dataSub.data);
 8004010:	4911      	ldr	r1, [pc, #68]	; (8004058 <subTask+0x6c>)
 8004012:	4812      	ldr	r0, [pc, #72]	; (800405c <subTask+0x70>)
 8004014:	f7ff fbfb 	bl	800380e <mqtt_SubscriberReceive>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xSemaphoreMutexUart);
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <subTask+0x68>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	f00d f807 	bl	8011038 <xQueueGenericSend>

		if (Status == ESP8266_OK) {
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <subTask+0x5c>
			if (dataSub.data != -1)
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <subTask+0x70>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004038:	d006      	beq.n	8004048 <subTask+0x5c>
				xQueueSend(xQueueDataRx, &dataSub.data, 100);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <subTask+0x74>)
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	2264      	movs	r2, #100	; 0x64
 8004042:	4905      	ldr	r1, [pc, #20]	; (8004058 <subTask+0x6c>)
 8004044:	f00c fff8 	bl	8011038 <xQueueGenericSend>
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8004048:	2001      	movs	r0, #1
 800404a:	f00d ffff 	bl	801204c <vTaskDelay>
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 800404e:	e7d1      	b.n	8003ff4 <subTask+0x8>
 8004050:	2000eb6c 	.word	0x2000eb6c
 8004054:	2000eb28 	.word	0x2000eb28
 8004058:	2000eb40 	.word	0x2000eb40
 800405c:	2000eb2c 	.word	0x2000eb2c
 8004060:	2000eaf0 	.word	0x2000eaf0

08004064 <analizeTask>:
	}
}

void analizeTask(void *argument) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	int32_t dataQueueRx;
	for (;;) {
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <analizeTask+0x64>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004078:	4618      	mov	r0, r3
 800407a:	f00d f9f5 	bl	8011468 <xQueueReceive>
		if (dataQueueRx == 10009){
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f242 7219 	movw	r2, #10009	; 0x2719
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <analizeTask+0x2c>
			vLedWrite(LED_7, GPIO_PIN_SET);
 8004088:	2101      	movs	r1, #1
 800408a:	2006      	movs	r0, #6
 800408c:	f7fe fa62 	bl	8002554 <vLedWrite>
		}
		if (dataQueueRx == 20009){
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f644 6229 	movw	r2, #20009	; 0x4e29
 8004096:	4293      	cmp	r3, r2
 8004098:	d103      	bne.n	80040a2 <analizeTask+0x3e>
			vLedWrite(LED_7, GPIO_PIN_RESET);
 800409a:	2100      	movs	r1, #0
 800409c:	2006      	movs	r0, #6
 800409e:	f7fe fa59 	bl	8002554 <vLedWrite>
		}
		if (dataQueueRx % 2 == 0) {
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <analizeTask+0x52>
			vLedWrite(LED_2, GPIO_PIN_SET);
 80040ac:	2101      	movs	r1, #1
 80040ae:	2001      	movs	r0, #1
 80040b0:	f7fe fa50 	bl	8002554 <vLedWrite>
 80040b4:	e003      	b.n	80040be <analizeTask+0x5a>
		} else {
			vLedWrite(LED_2, GPIO_PIN_RESET);
 80040b6:	2100      	movs	r1, #0
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fe fa4b 	bl	8002554 <vLedWrite>
		}

		vTaskDelay(1 / portTICK_PERIOD_MS);
 80040be:	2001      	movs	r0, #1
 80040c0:	f00d ffc4 	bl	801204c <vTaskDelay>
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 80040c4:	e7d2      	b.n	800406c <analizeTask+0x8>
 80040c6:	bf00      	nop
 80040c8:	2000eaf0 	.word	0x2000eaf0

080040cc <buttonsTask>:
	}
}

void buttonsTask(void *argument){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08c      	sub	sp, #48	; 0x30
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

	int32_t data_pub = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cont_aux = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cont = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
	dataPubi_t data_st;
	bool flag = false;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	fsmButtonInit(&button_down);
 80040e6:	4836      	ldr	r0, [pc, #216]	; (80041c0 <buttonsTask+0xf4>)
 80040e8:	f7fe f983 	bl	80023f2 <fsmButtonInit>
	for (;;) {
		//update FSM button
		fsmButtonUpdate(&button_down);
 80040ec:	4834      	ldr	r0, [pc, #208]	; (80041c0 <buttonsTask+0xf4>)
 80040ee:	f7fe f9a7 	bl	8002440 <fsmButtonUpdate>

		if(button_down.released){
 80040f2:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <buttonsTask+0xf4>)
 80040f4:	7ddb      	ldrb	r3, [r3, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d037      	beq.n	800416a <buttonsTask+0x9e>
			flag = !flag;
 80040fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f083 0301 	eor.w	r3, r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(flag){
 800411e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <buttonsTask+0x6a>
				data_pub = 1000;
 8004126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
				vLedWrite(LED_6, GPIO_PIN_SET);
 800412c:	2101      	movs	r1, #1
 800412e:	2005      	movs	r0, #5
 8004130:	f7fe fa10 	bl	8002554 <vLedWrite>
 8004134:	e006      	b.n	8004144 <buttonsTask+0x78>
			}
			else{
				data_pub = 2000;
 8004136:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
				vLedWrite(LED_6, GPIO_PIN_RESET);
 800413c:	2100      	movs	r1, #0
 800413e:	2005      	movs	r0, #5
 8004140:	f7fe fa08 	bl	8002554 <vLedWrite>
			}
			cont = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
			strcpy((char*)data_st.topic, topic_pub2);
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	491d      	ldr	r1, [pc, #116]	; (80041c4 <buttonsTask+0xf8>)
 800414e:	4618      	mov	r0, r3
 8004150:	f010 ffa0 	bl	8015094 <strcpy>
			data_st.data = data_pub;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	61fb      	str	r3, [r7, #28]
			xQueueSend(xQueueDataPub, &data_st, 1000);
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <buttonsTask+0xfc>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	f107 0108 	add.w	r1, r7, #8
 8004160:	2300      	movs	r3, #0
 8004162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004166:	f00c ff67 	bl	8011038 <xQueueGenericSend>
		}
		if(cont > 10000){
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004170:	4293      	cmp	r3, r2
 8004172:	d91e      	bls.n	80041b2 <buttonsTask+0xe6>
			BMP280_calc_values(&dev);
 8004174:	4815      	ldr	r0, [pc, #84]	; (80041cc <buttonsTask+0x100>)
 8004176:	f7fd fe3b 	bl	8001df0 <BMP280_calc_values>
			cont = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
			cont_aux++;
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	3301      	adds	r3, #1
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
			strcpy(data_st.topic, topic_pub1);
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	4911      	ldr	r1, [pc, #68]	; (80041d0 <buttonsTask+0x104>)
 800418a:	4618      	mov	r0, r3
 800418c:	f010 ff82 	bl	8015094 <strcpy>
			data_st.data = dev.data.temperature;
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <buttonsTask+0x100>)
 8004192:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419a:	ee17 3a90 	vmov	r3, s15
 800419e:	61fb      	str	r3, [r7, #28]
			xQueueSend(xQueueDataPub, &data_st, 1000);
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <buttonsTask+0xfc>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f107 0108 	add.w	r1, r7, #8
 80041a8:	2300      	movs	r3, #0
 80041aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ae:	f00c ff43 	bl	8011038 <xQueueGenericSend>
		}
		cont++;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80041b8:	2001      	movs	r0, #1
 80041ba:	f00d ff47 	bl	801204c <vTaskDelay>
		fsmButtonUpdate(&button_down);
 80041be:	e795      	b.n	80040ec <buttonsTask+0x20>
 80041c0:	2000eb54 	.word	0x2000eb54
 80041c4:	20000040 	.word	0x20000040
 80041c8:	2000eb48 	.word	0x2000eb48
 80041cc:	2000eaf4 	.word	0x2000eaf4
 80041d0:	20000028 	.word	0x20000028

080041d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_MspInit+0x4c>)
 80041dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <HAL_MspInit+0x4c>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6613      	str	r3, [r2, #96]	; 0x60
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_MspInit+0x4c>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_MspInit+0x4c>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_MspInit+0x4c>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_MspInit+0x4c>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	210f      	movs	r1, #15
 800420e:	f06f 0001 	mvn.w	r0, #1
 8004212:	f001 ffa1 	bl	8006158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a33      	ldr	r2, [pc, #204]	; (8004310 <HAL_ADC_MspInit+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d12d      	bne.n	80042a2 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a31      	ldr	r2, [pc, #196]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 800424e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004250:	4b30      	ldr	r3, [pc, #192]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10b      	bne.n	8004270 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 800425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 800425e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004270:	4b29      	ldr	r3, [pc, #164]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	4a28      	ldr	r2, [pc, #160]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 800427e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8004288:	2318      	movs	r3, #24
 800428a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800428c:	230b      	movs	r3, #11
 800428e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	4619      	mov	r1, r3
 800429a:	4820      	ldr	r0, [pc, #128]	; (800431c <HAL_ADC_MspInit+0xf8>)
 800429c:	f002 f85c 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80042a0:	e032      	b.n	8004308 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_ADC_MspInit+0xfc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d12d      	bne.n	8004308 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 80042b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_ADC_MspInit+0xf0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10b      	bne.n	80042d6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042dc:	f043 0320 	orr.w	r3, r3, #32
 80042e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_ADC_MspInit+0xf4>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80042ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80042f4:	230b      	movs	r3, #11
 80042f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80042fc:	f107 031c 	add.w	r3, r7, #28
 8004300:	4619      	mov	r1, r3
 8004302:	4808      	ldr	r0, [pc, #32]	; (8004324 <HAL_ADC_MspInit+0x100>)
 8004304:	f002 f828 	bl	8006358 <HAL_GPIO_Init>
}
 8004308:	bf00      	nop
 800430a:	3730      	adds	r7, #48	; 0x30
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	50040000 	.word	0x50040000
 8004314:	20000458 	.word	0x20000458
 8004318:	40021000 	.word	0x40021000
 800431c:	48000800 	.word	0x48000800
 8004320:	50040200 	.word	0x50040200
 8004324:	48001400 	.word	0x48001400

08004328 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	; 0x30
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a33      	ldr	r2, [pc, #204]	; (8004414 <HAL_DCMI_MspInit+0xec>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d160      	bne.n	800440c <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	4a32      	ldr	r2, [pc, #200]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004356:	4b30      	ldr	r3, [pc, #192]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004362:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	4a26      	ldr	r2, [pc, #152]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 8004398:	f043 0310 	orr.w	r3, r3, #16
 800439c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_DCMI_MspInit+0xf0>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 80043aa:	f645 7320 	movw	r3, #24352	; 0x5f20
 80043ae:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80043bc:	230a      	movs	r3, #10
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	4619      	mov	r1, r3
 80043c6:	4815      	ldr	r0, [pc, #84]	; (800441c <HAL_DCMI_MspInit+0xf4>)
 80043c8:	f001 ffc6 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80043cc:	23b0      	movs	r3, #176	; 0xb0
 80043ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2302      	movs	r3, #2
 80043d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80043dc:	230a      	movs	r3, #10
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043e0:	f107 031c 	add.w	r3, r7, #28
 80043e4:	4619      	mov	r1, r3
 80043e6:	480e      	ldr	r0, [pc, #56]	; (8004420 <HAL_DCMI_MspInit+0xf8>)
 80043e8:	f001 ffb6 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80043ec:	2320      	movs	r3, #32
 80043ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80043fc:	230a      	movs	r3, #10
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	4619      	mov	r1, r3
 8004406:	4807      	ldr	r0, [pc, #28]	; (8004424 <HAL_DCMI_MspInit+0xfc>)
 8004408:	f001 ffa6 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800440c:	bf00      	nop
 800440e:	3730      	adds	r7, #48	; 0x30
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	50050000 	.word	0x50050000
 8004418:	40021000 	.word	0x40021000
 800441c:	48001c00 	.word	0x48001c00
 8004420:	48002000 	.word	0x48002000
 8004424:	48001000 	.word	0x48001000

08004428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08c      	sub	sp, #48	; 0x30
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3d      	ldr	r2, [pc, #244]	; (800453c <HAL_I2C_MspInit+0x114>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d129      	bne.n	800449e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_I2C_MspInit+0x118>)
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8004462:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004468:	2312      	movs	r3, #18
 800446a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004470:	2303      	movs	r3, #3
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004474:	2304      	movs	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4619      	mov	r1, r3
 800447e:	4831      	ldr	r0, [pc, #196]	; (8004544 <HAL_I2C_MspInit+0x11c>)
 8004480:	f001 ff6a 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004484:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <HAL_I2C_MspInit+0x118>)
 800448a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800449c:	e049      	b.n	8004532 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_I2C_MspInit+0x120>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d144      	bne.n	8004532 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_I2C_MspInit+0x118>)
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80044d8:	2310      	movs	r3, #16
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044dc:	2312      	movs	r3, #18
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044e0:	2301      	movs	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	2303      	movs	r3, #3
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044e8:	2304      	movs	r3, #4
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80044ec:	f107 031c 	add.w	r3, r7, #28
 80044f0:	4619      	mov	r1, r3
 80044f2:	4816      	ldr	r0, [pc, #88]	; (800454c <HAL_I2C_MspInit+0x124>)
 80044f4:	f001 ff30 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80044f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044fe:	2312      	movs	r3, #18
 8004500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004502:	2301      	movs	r3, #1
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004506:	2303      	movs	r3, #3
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800450a:	2304      	movs	r3, #4
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800450e:	f107 031c 	add.w	r3, r7, #28
 8004512:	4619      	mov	r1, r3
 8004514:	480b      	ldr	r0, [pc, #44]	; (8004544 <HAL_I2C_MspInit+0x11c>)
 8004516:	f001 ff1f 	bl	8006358 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_I2C_MspInit+0x118>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	4a08      	ldr	r2, [pc, #32]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004524:	6593      	str	r3, [r2, #88]	; 0x58
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_I2C_MspInit+0x118>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
}
 8004532:	bf00      	nop
 8004534:	3730      	adds	r7, #48	; 0x30
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40005400 	.word	0x40005400
 8004540:	40021000 	.word	0x40021000
 8004544:	48000400 	.word	0x48000400
 8004548:	40005800 	.word	0x40005800
 800454c:	48001c00 	.word	0x48001c00

08004550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b090      	sub	sp, #64	; 0x40
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a68      	ldr	r2, [pc, #416]	; (8004710 <HAL_UART_MspInit+0x1c0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d12b      	bne.n	80045ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004572:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	4a61      	ldr	r2, [pc, #388]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 80045a2:	f004 f8c1 	bl	8008728 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80045a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	2303      	movs	r3, #3
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80045b8:	2308      	movs	r3, #8
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045c0:	4619      	mov	r1, r3
 80045c2:	4855      	ldr	r0, [pc, #340]	; (8004718 <HAL_UART_MspInit+0x1c8>)
 80045c4:	f001 fec8 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045c8:	e09e      	b.n	8004708 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a53      	ldr	r2, [pc, #332]	; (800471c <HAL_UART_MspInit+0x1cc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d14f      	bne.n	8004674 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045d4:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d8:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045de:	6613      	str	r3, [r2, #96]	; 0x60
 80045e0:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ec:	4b49      	ldr	r3, [pc, #292]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	4a48      	ldr	r2, [pc, #288]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f8:	4b46      	ldr	r3, [pc, #280]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004604:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	4a42      	ldr	r2, [pc, #264]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 800460a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800461c:	f004 f884 	bl	8008728 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462c:	2303      	movs	r3, #3
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004630:	2307      	movs	r3, #7
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8004634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004638:	4619      	mov	r1, r3
 800463a:	4839      	ldr	r0, [pc, #228]	; (8004720 <HAL_UART_MspInit+0x1d0>)
 800463c:	f001 fe8c 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8004640:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464e:	2303      	movs	r3, #3
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004652:	2307      	movs	r3, #7
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	482e      	ldr	r0, [pc, #184]	; (8004718 <HAL_UART_MspInit+0x1c8>)
 800465e:	f001 fe7b 	bl	8006358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004662:	2200      	movs	r2, #0
 8004664:	2105      	movs	r1, #5
 8004666:	2025      	movs	r0, #37	; 0x25
 8004668:	f001 fd76 	bl	8006158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800466c:	2025      	movs	r0, #37	; 0x25
 800466e:	f001 fd8f 	bl	8006190 <HAL_NVIC_EnableIRQ>
}
 8004672:	e049      	b.n	8004708 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <HAL_UART_MspInit+0x1d4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d144      	bne.n	8004708 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	4a24      	ldr	r2, [pc, #144]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	6593      	str	r3, [r2, #88]	; 0x58
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004696:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_UART_MspInit+0x1c4>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80046c6:	2340      	movs	r3, #64	; 0x40
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d2:	2303      	movs	r3, #3
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046d6:	2307      	movs	r3, #7
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80046da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046de:	4619      	mov	r1, r3
 80046e0:	4811      	ldr	r0, [pc, #68]	; (8004728 <HAL_UART_MspInit+0x1d8>)
 80046e2:	f001 fe39 	bl	8006358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 80046e6:	2304      	movs	r3, #4
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f2:	2303      	movs	r3, #3
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046f6:	2307      	movs	r3, #7
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80046fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004704:	f001 fe28 	bl	8006358 <HAL_GPIO_Init>
}
 8004708:	bf00      	nop
 800470a:	3740      	adds	r7, #64	; 0x40
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40008000 	.word	0x40008000
 8004714:	40021000 	.word	0x40021000
 8004718:	48001800 	.word	0x48001800
 800471c:	40013800 	.word	0x40013800
 8004720:	48000400 	.word	0x48000400
 8004724:	40004400 	.word	0x40004400
 8004728:	48000c00 	.word	0x48000c00

0800472c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_UART_MspDeInit+0x8c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10b      	bne.n	8004756 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	65d3      	str	r3, [r2, #92]	; 0x5c
  
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOG, ARD_D0_Pin|ARD_D1_Pin);
 800474a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800474e:	481c      	ldr	r0, [pc, #112]	; (80047c0 <HAL_UART_MspDeInit+0x94>)
 8004750:	f001 ff94 	bl	800667c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004754:	e02b      	b.n	80047ae <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_UART_MspDeInit+0x98>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d112      	bne.n	8004786 <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004760:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476a:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(USART1_TX_GPIO_Port, USART1_TX_Pin);
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4816      	ldr	r0, [pc, #88]	; (80047c8 <HAL_UART_MspDeInit+0x9c>)
 8004770:	f001 ff84 	bl	800667c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin);
 8004774:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004778:	4811      	ldr	r0, [pc, #68]	; (80047c0 <HAL_UART_MspDeInit+0x94>)
 800477a:	f001 ff7f 	bl	800667c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800477e:	2025      	movs	r0, #37	; 0x25
 8004780:	f001 fd14 	bl	80061ac <HAL_NVIC_DisableIRQ>
}
 8004784:	e013      	b.n	80047ae <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_UART_MspDeInit+0xa0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10e      	bne.n	80047ae <HAL_UART_MspDeInit+0x82>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <HAL_UART_MspDeInit+0x90>)
 8004796:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800479a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(USART2_RX_GPIO_Port, USART2_RX_Pin);
 800479c:	2140      	movs	r1, #64	; 0x40
 800479e:	480c      	ldr	r0, [pc, #48]	; (80047d0 <HAL_UART_MspDeInit+0xa4>)
 80047a0:	f001 ff6c 	bl	800667c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(USART2_TX_GPIO_Port, USART2_TX_Pin);
 80047a4:	2104      	movs	r1, #4
 80047a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047aa:	f001 ff67 	bl	800667c <HAL_GPIO_DeInit>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40008000 	.word	0x40008000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	48001800 	.word	0x48001800
 80047c4:	40013800 	.word	0x40013800
 80047c8:	48000400 	.word	0x48000400
 80047cc:	40004400 	.word	0x40004400
 80047d0:	48000c00 	.word	0x48000c00

080047d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a26      	ldr	r2, [pc, #152]	; (800488c <HAL_QSPI_MspInit+0xb8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d145      	bne.n	8004882 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80047f6:	4b26      	ldr	r3, [pc, #152]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 80047f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fa:	4a25      	ldr	r2, [pc, #148]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6513      	str	r3, [r2, #80]	; 0x50
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 8004804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	4a19      	ldr	r2, [pc, #100]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_QSPI_MspInit+0xbc>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800483e:	f640 0303 	movw	r3, #2051	; 0x803
 8004842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004844:	2302      	movs	r3, #2
 8004846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800484c:	2303      	movs	r3, #3
 800484e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004850:	230a      	movs	r3, #10
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	4619      	mov	r1, r3
 800485a:	480e      	ldr	r0, [pc, #56]	; (8004894 <HAL_QSPI_MspInit+0xc0>)
 800485c:	f001 fd7c 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8004860:	23c8      	movs	r3, #200	; 0xc8
 8004862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004864:	2302      	movs	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486c:	2303      	movs	r3, #3
 800486e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004870:	230a      	movs	r3, #10
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4619      	mov	r1, r3
 800487a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800487e:	f001 fd6b 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004882:	bf00      	nop
 8004884:	3728      	adds	r7, #40	; 0x28
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	a0001000 	.word	0xa0001000
 8004890:	40021000 	.word	0x40021000
 8004894:	48000400 	.word	0x48000400

08004898 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a25      	ldr	r2, [pc, #148]	; (800494c <HAL_SD_MspInit+0xb4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d144      	bne.n	8004944 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80048ba:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	4a24      	ldr	r2, [pc, #144]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c4:	6613      	str	r3, [r2, #96]	; 0x60
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048d8:	f043 0308 	orr.w	r3, r3, #8
 80048dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048de:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_SD_MspInit+0xb8>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004902:	2304      	movs	r3, #4
 8004904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004906:	2302      	movs	r3, #2
 8004908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490e:	2303      	movs	r3, #3
 8004910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004912:	230c      	movs	r3, #12
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	4619      	mov	r1, r3
 800491c:	480d      	ldr	r0, [pc, #52]	; (8004954 <HAL_SD_MspInit+0xbc>)
 800491e:	f001 fd1b 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8004922:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004926:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004930:	2303      	movs	r3, #3
 8004932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004934:	230c      	movs	r3, #12
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4619      	mov	r1, r3
 800493e:	4806      	ldr	r0, [pc, #24]	; (8004958 <HAL_SD_MspInit+0xc0>)
 8004940:	f001 fd0a 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004944:	bf00      	nop
 8004946:	3728      	adds	r7, #40	; 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40012800 	.word	0x40012800
 8004950:	40021000 	.word	0x40021000
 8004954:	48000c00 	.word	0x48000c00
 8004958:	48000800 	.word	0x48000800

0800495c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <HAL_SPI_MspInit+0xb4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d144      	bne.n	8004a08 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800497e:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 8004984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004988:	6593      	str	r3, [r2, #88]	; 0x58
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_SPI_MspInit+0xb8>)
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80049c6:	2306      	movs	r3, #6
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d2:	2303      	movs	r3, #3
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049d6:	2305      	movs	r3, #5
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	480d      	ldr	r0, [pc, #52]	; (8004a18 <HAL_SPI_MspInit+0xbc>)
 80049e2:	f001 fcb9 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	2302      	movs	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049f8:	2305      	movs	r3, #5
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80049fc:	f107 0314 	add.w	r3, r7, #20
 8004a00:	4619      	mov	r1, r3
 8004a02:	4806      	ldr	r0, [pc, #24]	; (8004a1c <HAL_SPI_MspInit+0xc0>)
 8004a04:	f001 fca8 	bl	8006358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a08:	bf00      	nop
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40003800 	.word	0x40003800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	48002000 	.word	0x48002000
 8004a1c:	48000400 	.word	0x48000400

08004a20 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <HAL_FMC_MspInit+0xc4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14f      	bne.n	8004adc <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8004a3c:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <HAL_FMC_MspInit+0xc4>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a42:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <HAL_FMC_MspInit+0xc8>)
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <HAL_FMC_MspInit+0xc8>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6513      	str	r3, [r2, #80]	; 0x50
 8004a4e:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <HAL_FMC_MspInit+0xc8>)
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8004a5a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004a5e:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a60:	2302      	movs	r3, #2
 8004a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	481d      	ldr	r0, [pc, #116]	; (8004aec <HAL_FMC_MspInit+0xcc>)
 8004a76:	f001 fc6f 	bl	8006358 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8004a7a:	f240 233f 	movw	r3, #575	; 0x23f
 8004a7e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a90:	1d3b      	adds	r3, r7, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4816      	ldr	r0, [pc, #88]	; (8004af0 <HAL_FMC_MspInit+0xd0>)
 8004a96:	f001 fc5f 	bl	8006358 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8004a9a:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8004a9e:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004aac:	230c      	movs	r3, #12
 8004aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	480f      	ldr	r0, [pc, #60]	; (8004af4 <HAL_FMC_MspInit+0xd4>)
 8004ab6:	f001 fc4f 	bl	8006358 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8004aba:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004abe:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004acc:	230c      	movs	r3, #12
 8004ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4808      	ldr	r0, [pc, #32]	; (8004af8 <HAL_FMC_MspInit+0xd8>)
 8004ad6:	f001 fc3f 	bl	8006358 <HAL_GPIO_Init>
 8004ada:	e000      	b.n	8004ade <HAL_FMC_MspInit+0xbe>
    return;
 8004adc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000045c 	.word	0x2000045c
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	48001000 	.word	0x48001000
 8004af0:	48001800 	.word	0x48001800
 8004af4:	48000c00 	.word	0x48000c00
 8004af8:	48001400 	.word	0x48001400

08004afc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004b04:	f7ff ff8c 	bl	8004a20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a33      	ldr	r2, [pc, #204]	; (8004bec <HAL_SAI_MspInit+0xdc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d135      	bne.n	8004b8e <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004b2a:	4b32      	ldr	r3, [pc, #200]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	4a31      	ldr	r2, [pc, #196]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b34:	6613      	str	r3, [r2, #96]	; 0x60
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a29      	ldr	r2, [pc, #164]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004b4a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8004b4c:	2354      	movs	r3, #84	; 0x54
 8004b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4619      	mov	r1, r3
 8004b66:	4824      	ldr	r0, [pc, #144]	; (8004bf8 <HAL_SAI_MspInit+0xe8>)
 8004b68:	f001 fbf6 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004b7e:	230d      	movs	r3, #13
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	4619      	mov	r1, r3
 8004b88:	481c      	ldr	r0, [pc, #112]	; (8004bfc <HAL_SAI_MspInit+0xec>)
 8004b8a:	f001 fbe5 	bl	8006358 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_SAI_MspInit+0xf0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d124      	bne.n	8004be2 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004baa:	6613      	str	r3, [r2, #96]	; 0x60
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_SAI_MspInit+0xe4>)
 8004bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <HAL_SAI_MspInit+0xe0>)
 8004bc0:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004bd2:	230d      	movs	r3, #13
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4806      	ldr	r0, [pc, #24]	; (8004bf8 <HAL_SAI_MspInit+0xe8>)
 8004bde:	f001 fbbb 	bl	8006358 <HAL_GPIO_Init>

    }
}
 8004be2:	bf00      	nop
 8004be4:	3728      	adds	r7, #40	; 0x28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40015404 	.word	0x40015404
 8004bf0:	20000460 	.word	0x20000460
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	48001000 	.word	0x48001000
 8004bfc:	48000400 	.word	0x48000400
 8004c00:	40015424 	.word	0x40015424

08004c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8004c14:	2200      	movs	r2, #0
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	2036      	movs	r0, #54	; 0x36
 8004c1a:	f001 fa9d 	bl	8006158 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004c1e:	2036      	movs	r0, #54	; 0x36
 8004c20:	f001 fab6 	bl	8006190 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_InitTick+0x9c>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <HAL_InitTick+0x9c>)
 8004c2a:	f043 0310 	orr.w	r3, r3, #16
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_InitTick+0x9c>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c3c:	f107 0210 	add.w	r2, r7, #16
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f004 fc16 	bl	8009478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f004 fbe8 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 8004c50:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_InitTick+0xa0>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	0c9b      	lsrs	r3, r3, #18
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <HAL_InitTick+0xa8>)
 8004c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004c80:	4809      	ldr	r0, [pc, #36]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c82:	f006 ff4f 	bl	800bb24 <HAL_TIM_Base_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004c8c:	4806      	ldr	r0, [pc, #24]	; (8004ca8 <HAL_InitTick+0xa4>)
 8004c8e:	f006 ff7f 	bl	800bb90 <HAL_TIM_Base_Start_IT>
 8004c92:	4603      	mov	r3, r0
 8004c94:	e000      	b.n	8004c98 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3730      	adds	r7, #48	; 0x30
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	431bde83 	.word	0x431bde83
 8004ca8:	2000eb70 	.word	0x2000eb70
 8004cac:	40001000 	.word	0x40001000

08004cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	vLedWrite(LED_5, GPIO_PIN_SET);
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	2004      	movs	r0, #4
 8004cc6:	f7fd fc45 	bl	8002554 <vLedWrite>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cca:	e7fe      	b.n	8004cca <HardFault_Handler+0xc>

08004ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd0:	e7fe      	b.n	8004cd0 <MemManage_Handler+0x4>

08004cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd6:	e7fe      	b.n	8004cd6 <BusFault_Handler+0x4>

08004cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cdc:	e7fe      	b.n	8004cdc <UsageFault_Handler+0x4>

08004cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cf0:	4802      	ldr	r0, [pc, #8]	; (8004cfc <USART1_IRQHandler+0x10>)
 8004cf2:	f007 faf9 	bl	800c2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000e8d0 	.word	0x2000e8d0

08004d00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d04:	4802      	ldr	r0, [pc, #8]	; (8004d10 <TIM6_DAC_IRQHandler+0x10>)
 8004d06:	f006 ff6d 	bl	800bbe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	2000eb70 	.word	0x2000eb70

08004d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d18:	4802      	ldr	r0, [pc, #8]	; (8004d24 <OTG_FS_IRQHandler+0x10>)
 8004d1a:	f002 fd35 	bl	8007788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	200100b8 	.word	0x200100b8

08004d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
	return 1;
 8004d2c:	2301      	movs	r3, #1
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_kill>:

int _kill(int pid, int sig)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d42:	f00f fd3f 	bl	80147c4 <__errno>
 8004d46:	4602      	mov	r2, r0
 8004d48:	2316      	movs	r3, #22
 8004d4a:	6013      	str	r3, [r2, #0]
	return -1;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_exit>:

void _exit (int status)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff ffe7 	bl	8004d38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004d6a:	e7fe      	b.n	8004d6a <_exit+0x12>

08004d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e00a      	b.n	8004d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d7e:	f3af 8000 	nop.w
 8004d82:	4601      	mov	r1, r0
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	60ba      	str	r2, [r7, #8]
 8004d8a:	b2ca      	uxtb	r2, r1
 8004d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3301      	adds	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	dbf0      	blt.n	8004d7e <_read+0x12>
	}

return len;
 8004d9c:	687b      	ldr	r3, [r7, #4]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
	return -1;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dce:	605a      	str	r2, [r3, #4]
	return 0;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <_isatty>:

int _isatty(int file)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
	return 1;
 8004de6:	2301      	movs	r3, #1
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <_sbrk+0x50>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <_sbrk+0x16>
		heap_end = &end;
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <_sbrk+0x50>)
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <_sbrk+0x54>)
 8004e24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <_sbrk+0x50>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <_sbrk+0x50>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	466a      	mov	r2, sp
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d907      	bls.n	8004e4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e3a:	f00f fcc3 	bl	80147c4 <__errno>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	230c      	movs	r3, #12
 8004e42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e48:	e006      	b.n	8004e58 <_sbrk+0x48>
	}

	heap_end += incr;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <_sbrk+0x50>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	4a03      	ldr	r2, [pc, #12]	; (8004e60 <_sbrk+0x50>)
 8004e54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000464 	.word	0x20000464
 8004e64:	200104c8 	.word	0x200104c8

08004e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <SystemInit+0x64>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	4a16      	ldr	r2, [pc, #88]	; (8004ecc <SystemInit+0x64>)
 8004e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <SystemInit+0x68>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <SystemInit+0x68>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004e88:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <SystemInit+0x68>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <SystemInit+0x68>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <SystemInit+0x68>)
 8004e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <SystemInit+0x68>)
 8004ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <SystemInit+0x68>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <SystemInit+0x68>)
 8004eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <SystemInit+0x68>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <SystemInit+0x64>)
 8004eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	e000ed00 	.word	0xe000ed00
 8004ed0:	40021000 	.word	0x40021000

08004ed4 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Callback when new data is received on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	static BaseType_t xHigherPriorityTaskWoken;

	xHigherPriorityTaskWoken = pdFALSE;
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_UART_RxCpltCallback+0xa4>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

	if (huart->Instance == USART1) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <HAL_UART_RxCpltCallback+0xa8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d135      	bne.n	8004f58 <HAL_UART_RxCpltCallback+0x84>
		uint8_t dato = WiFiRxBuffer.data[WiFiRxBuffer.tail];
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004eee:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b22      	ldr	r3, [pc, #136]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004ef6:	5c9b      	ldrb	r3, [r3, r2]
 8004ef8:	73fb      	strb	r3, [r7, #15]


		if (++WiFiRxBuffer.tail >= ESP_BUFFERSIZE_CIRCULAR) {
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004efc:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8004f00:	3301      	adds	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f06:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f0c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f14:	d303      	bcc.n	8004f1e <HAL_UART_RxCpltCallback+0x4a>
			WiFiRxBuffer.tail = 0;
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}

		// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(huart, (uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f20:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_UART_RxCpltCallback+0xac>)
 8004f28:	4413      	add	r3, r2
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f007 f938 	bl	800c1a4 <HAL_UART_Receive_IT>
		if(xSemaphoreSub != NULL)
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_UART_RxCpltCallback+0xb0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_UART_RxCpltCallback+0x74>
			xSemaphoreGiveFromISR(xSemaphoreSub, &xHigherPriorityTaskWoken);
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <HAL_UART_RxCpltCallback+0xb0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	490d      	ldr	r1, [pc, #52]	; (8004f78 <HAL_UART_RxCpltCallback+0xa4>)
 8004f42:	4618      	mov	r0, r3
 8004f44:	f00c fa06 	bl	8011354 <xQueueGiveFromISR>

#if DEBUG == 1
		xQueueSendFromISR(xQueuePrintConsole, &dato, &xHigherPriorityTaskWoken);
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <HAL_UART_RxCpltCallback+0xb4>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	f107 010f 	add.w	r1, r7, #15
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <HAL_UART_RxCpltCallback+0xa4>)
 8004f54:	f00c f96a 	bl	801122c <xQueueGenericSendFromISR>
#endif
	}
	/* If xHigherPriorityTaskWoken was set to true you
	    we should yield.  The actual macro used here is
	    port specific. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_UART_RxCpltCallback+0xa4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_UART_RxCpltCallback+0x9c>
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_UART_RxCpltCallback+0xb8>)
 8004f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	f3bf 8f6f 	isb	sy
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000468 	.word	0x20000468
 8004f7c:	40013800 	.word	0x40013800
 8004f80:	2000dccc 	.word	0x2000dccc
 8004f84:	2000eb6c 	.word	0x2000eb6c
 8004f88:	2000eb44 	.word	0x2000eb44
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <HAL_UART_ErrorCallback>:
/**
 * @brief  Function called when error happens on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	WIFI_Handler();
 8004f98:	f000 f83a 	bl	8005010 <WIFI_Handler>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_UART_F_Init>:

void HAL_UART_F_Init(void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0

	WiFiRxBuffer.head = 0;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <HAL_UART_F_Init+0x30>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	WiFiRxBuffer.tail = 0;
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_UART_F_Init+0x30>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

	HAL_UART_Receive_IT(&huart1,
			(uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_UART_F_Init+0x30>)
 8004fba:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8004fbe:	461a      	mov	r2, r3
	HAL_UART_Receive_IT(&huart1,
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_UART_F_Init+0x30>)
 8004fc2:	4413      	add	r3, r2
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4803      	ldr	r0, [pc, #12]	; (8004fd8 <HAL_UART_F_Init+0x34>)
 8004fca:	f007 f8eb 	bl	800c1a4 <HAL_UART_Receive_IT>

}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000dccc 	.word	0x2000dccc
 8004fd8:	2000e8d0 	.word	0x2000e8d0

08004fdc <HAL_UART_F_Send>:
void HAL_UART_F_DeInit(void) {
	/* Reset USART configuration to default */
	HAL_UART_DeInit(&huart1);
}

int8_t HAL_UART_F_Send(const char* Buffer, const uint8_t Length) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
	/* It is using a blocking call to ensure that the AT commands were correctly sent. */
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) Buffer, Length) != HAL_OK){//, ESP_DEFAULT_TIME_OUT
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4806      	ldr	r0, [pc, #24]	; (800500c <HAL_UART_F_Send+0x30>)
 8004ff2:	f007 f87b 	bl	800c0ec <HAL_UART_Transmit_IT>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_UART_F_Send+0x26>
	//if (HAL_UART_Transmit(&huart1, (uint8_t*) Buffer, Length, ESP_DEFAULT_TIME_OUT) != HAL_OK){
		return -1;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005000:	e000      	b.n	8005004 <HAL_UART_F_Send+0x28>
	}
	return 0;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	2000e8d0 	.word	0x2000e8d0

08005010 <WIFI_Handler>:
/**
 * @brief  Handler to deinialize the ESP8266 UART interface in case of errors.
 * @param  None
 * @retval None.
 */
static void WIFI_Handler(void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8005014:	4803      	ldr	r0, [pc, #12]	; (8005024 <WIFI_Handler+0x14>)
 8005016:	f007 f833 	bl	800c080 <HAL_UART_DeInit>
	vLedWrite(LED_5, GPIO_PIN_SET);
 800501a:	2101      	movs	r1, #1
 800501c:	2004      	movs	r0, #4
 800501e:	f7fd fa99 	bl	8002554 <vLedWrite>
	while (1) {
 8005022:	e7fe      	b.n	8005022 <WIFI_Handler+0x12>
 8005024:	2000e8d0 	.word	0x2000e8d0

08005028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005060 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800502c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800502e:	e003      	b.n	8005038 <LoopCopyDataInit>

08005030 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005032:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005034:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005036:	3104      	adds	r1, #4

08005038 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005038:	480b      	ldr	r0, [pc, #44]	; (8005068 <LoopForever+0xa>)
	ldr	r3, =_edata
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <LoopForever+0xe>)
	adds	r2, r0, r1
 800503c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800503e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005040:	d3f6      	bcc.n	8005030 <CopyDataInit>
	ldr	r2, =_sbss
 8005042:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005044:	e002      	b.n	800504c <LoopFillZerobss>

08005046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005046:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005048:	f842 3b04 	str.w	r3, [r2], #4

0800504c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <LoopForever+0x16>)
	cmp	r2, r3
 800504e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005050:	d3f9      	bcc.n	8005046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005052:	f7ff ff09 	bl	8004e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005056:	f00f fbcd 	bl	80147f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800505a:	f7fd fb83 	bl	8002764 <main>

0800505e <LoopForever>:

LoopForever:
    b LoopForever
 800505e:	e7fe      	b.n	800505e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005060:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8005064:	08016d54 	.word	0x08016d54
	ldr	r0, =_sdata
 8005068:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800506c:	200003b0 	.word	0x200003b0
	ldr	r2, =_sbss
 8005070:	200003b0 	.word	0x200003b0
	ldr	r3, = _ebss
 8005074:	200104c4 	.word	0x200104c4

08005078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005078:	e7fe      	b.n	8005078 <ADC1_2_IRQHandler>

0800507a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005084:	2003      	movs	r0, #3
 8005086:	f001 f85c 	bl	8006142 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800508a:	2000      	movs	r0, #0
 800508c:	f7ff fdba 	bl	8004c04 <HAL_InitTick>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	71fb      	strb	r3, [r7, #7]
 800509a:	e001      	b.n	80050a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800509c:	f7ff f89a 	bl	80041d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050a0:	79fb      	ldrb	r3, [r7, #7]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_IncTick+0x1c>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_IncTick+0x20>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <HAL_IncTick+0x1c>)
 80050bc:	6013      	str	r3, [r2, #0]
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	2000ebb0 	.word	0x2000ebb0
 80050cc:	20000054 	.word	0x20000054

080050d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return uwTick;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_GetTick+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000ebb0 	.word	0x2000ebb0

080050e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7ff ffee 	bl	80050d0 <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005100:	d004      	beq.n	800510c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_Delay+0x40>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800510c:	bf00      	nop
 800510e:	f7ff ffdf 	bl	80050d0 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	429a      	cmp	r2, r3
 800511c:	d8f7      	bhi.n	800510e <HAL_Delay+0x26>
  {
  }
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000054 	.word	0x20000054

0800512c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005194:	b490      	push	{r4, r7}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3360      	adds	r3, #96	; 0x60
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <LL_ADC_SetOffset+0x40>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc90      	pop	{r4, r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	03fff000 	.word	0x03fff000

080051d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80051d8:	b490      	push	{r4, r7}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3360      	adds	r3, #96	; 0x60
 80051e6:	461a      	mov	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc90      	pop	{r4, r7}
 80051fe:	4770      	bx	lr

08005200 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005200:	b490      	push	{r4, r7}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3360      	adds	r3, #96	; 0x60
 8005210:	461a      	mov	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bc90      	pop	{r4, r7}
 800522e:	4770      	bx	lr

08005230 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	615a      	str	r2, [r3, #20]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005256:	b490      	push	{r4, r7}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3330      	adds	r3, #48	; 0x30
 8005266:	461a      	mov	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	4413      	add	r3, r2
 8005274:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	211f      	movs	r1, #31
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0e9b      	lsrs	r3, r3, #26
 800528c:	f003 011f 	and.w	r1, r3, #31
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc90      	pop	{r4, r7}
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052a8:	b490      	push	{r4, r7}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3314      	adds	r3, #20
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	0e5b      	lsrs	r3, r3, #25
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	4413      	add	r3, r2
 80052c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	0d1b      	lsrs	r3, r3, #20
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	2107      	movs	r1, #7
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	0d1b      	lsrs	r3, r3, #20
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc90      	pop	{r4, r7}
 80052f6:	4770      	bx	lr

080052f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005310:	43db      	mvns	r3, r3
 8005312:	401a      	ands	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0318 	and.w	r3, r3, #24
 800531a:	4908      	ldr	r1, [pc, #32]	; (800533c <LL_ADC_SetChannelSingleDiff+0x44>)
 800531c:	40d9      	lsrs	r1, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	400b      	ands	r3, r1
 8005322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005326:	431a      	orrs	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	0007ffff 	.word	0x0007ffff

08005340 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6093      	str	r3, [r2, #8]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005378:	d101      	bne.n	800537e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800539c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c8:	d101      	bne.n	80053ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <LL_ADC_IsEnabled+0x18>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <LL_ADC_IsEnabled+0x1a>
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d101      	bne.n	800541a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b08      	cmp	r3, #8
 800543a:	d101      	bne.n	8005440 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800545c:	2300      	movs	r3, #0
 800545e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e137      	b.n	80056da <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fe fed3 	bl	8004224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff67 	bl	8005364 <LL_ADC_IsDeepPowerDownEnabled>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff4d 	bl	8005340 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff82 	bl	80053b4 <LL_ADC_IsInternalRegulatorEnabled>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d113      	bne.n	80054de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ff66 	bl	800538c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80054c0:	4b88      	ldr	r3, [pc, #544]	; (80056e4 <HAL_ADC_Init+0x294>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	099b      	lsrs	r3, r3, #6
 80054c6:	4a88      	ldr	r2, [pc, #544]	; (80056e8 <HAL_ADC_Init+0x298>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80054d0:	e002      	b.n	80054d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f9      	bne.n	80054d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ff66 	bl	80053b4 <LL_ADC_IsInternalRegulatorEnabled>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f043 0210 	orr.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff77 	bl	8005402 <LL_ADC_REG_IsConversionOngoing>
 8005514:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 80d2 	bne.w	80056c8 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 80ce 	bne.w	80056c8 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005534:	f043 0202 	orr.w	r2, r3, #2
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff4b 	bl	80053dc <LL_ADC_IsEnabled>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d115      	bne.n	8005578 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800554c:	4867      	ldr	r0, [pc, #412]	; (80056ec <HAL_ADC_Init+0x29c>)
 800554e:	f7ff ff45 	bl	80053dc <LL_ADC_IsEnabled>
 8005552:	4604      	mov	r4, r0
 8005554:	4866      	ldr	r0, [pc, #408]	; (80056f0 <HAL_ADC_Init+0x2a0>)
 8005556:	f7ff ff41 	bl	80053dc <LL_ADC_IsEnabled>
 800555a:	4603      	mov	r3, r0
 800555c:	431c      	orrs	r4, r3
 800555e:	4865      	ldr	r0, [pc, #404]	; (80056f4 <HAL_ADC_Init+0x2a4>)
 8005560:	f7ff ff3c 	bl	80053dc <LL_ADC_IsEnabled>
 8005564:	4603      	mov	r3, r0
 8005566:	4323      	orrs	r3, r4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	4861      	ldr	r0, [pc, #388]	; (80056f8 <HAL_ADC_Init+0x2a8>)
 8005574:	f7ff fdda 	bl	800512c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7e5b      	ldrb	r3, [r3, #25]
 800557c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005582:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005588:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800558e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005596:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d106      	bne.n	80055b4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	3b01      	subs	r3, #1
 80055ac:	045b      	lsls	r3, r3, #17
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	4b49      	ldr	r3, [pc, #292]	; (80056fc <HAL_ADC_Init+0x2ac>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	69b9      	ldr	r1, [r7, #24]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff ff0a 	bl	8005402 <LL_ADC_REG_IsConversionOngoing>
 80055ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff17 	bl	8005428 <LL_ADC_INJ_IsConversionOngoing>
 80055fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d140      	bne.n	8005684 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d13d      	bne.n	8005684 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	7e1b      	ldrb	r3, [r3, #24]
 8005610:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005612:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800561a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562a:	f023 0306 	bic.w	r3, r3, #6
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	430b      	orrs	r3, r1
 8005636:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800563e:	2b01      	cmp	r3, #1
 8005640:	d118      	bne.n	8005674 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005658:	4311      	orrs	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005664:	430a      	orrs	r2, r1
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	611a      	str	r2, [r3, #16]
 8005672:	e007      	b.n	8005684 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d10c      	bne.n	80056a6 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	f023 010f 	bic.w	r1, r3, #15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
 80056a4:	e007      	b.n	80056b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 020f 	bic.w	r2, r2, #15
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	659a      	str	r2, [r3, #88]	; 0x58
 80056c6:	e007      	b.n	80056d8 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	f043 0210 	orr.w	r2, r3, #16
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3724      	adds	r7, #36	; 0x24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd90      	pop	{r4, r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000004c 	.word	0x2000004c
 80056e8:	053e2d63 	.word	0x053e2d63
 80056ec:	50040000 	.word	0x50040000
 80056f0:	50040100 	.word	0x50040100
 80056f4:	50040200 	.word	0x50040200
 80056f8:	50040300 	.word	0x50040300
 80056fc:	fff0c007 	.word	0xfff0c007

08005700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b0a6      	sub	sp, #152	; 0x98
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x22>
 800571e:	2302      	movs	r3, #2
 8005720:	e364      	b.n	8005dec <HAL_ADC_ConfigChannel+0x6ec>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fe67 	bl	8005402 <LL_ADC_REG_IsConversionOngoing>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8345 	bne.w	8005dc6 <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b05      	cmp	r3, #5
 8005742:	d824      	bhi.n	800578e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	3b02      	subs	r3, #2
 800574a:	2b03      	cmp	r3, #3
 800574c:	d81b      	bhi.n	8005786 <HAL_ADC_ConfigChannel+0x86>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <HAL_ADC_ConfigChannel+0x54>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	0800576d 	.word	0x0800576d
 800575c:	08005775 	.word	0x08005775
 8005760:	0800577d 	.word	0x0800577d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	220c      	movs	r2, #12
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	e011      	b.n	8005790 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2212      	movs	r2, #18
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	e00d      	b.n	8005790 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2218      	movs	r2, #24
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	e009      	b.n	8005790 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	e004      	b.n	8005790 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2206      	movs	r2, #6
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	e000      	b.n	8005790 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800578e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	f7ff fd5a 	bl	8005256 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fe2b 	bl	8005402 <LL_ADC_REG_IsConversionOngoing>
 80057ac:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fe37 	bl	8005428 <LL_ADC_INJ_IsConversionOngoing>
 80057ba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8163 	bne.w	8005a8e <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 815e 	bne.w	8005a8e <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057da:	d10f      	bne.n	80057fc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	4619      	mov	r1, r3
 80057e8:	f7ff fd5e 	bl	80052a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fd1b 	bl	8005230 <LL_ADC_SetSamplingTimeCommonConfig>
 80057fa:	e00e      	b.n	800581a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	461a      	mov	r2, r3
 800580a:	f7ff fd4d 	bl	80052a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fd0b 	bl	8005230 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d00a      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6919      	ldr	r1, [r3, #16]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800584c:	f7ff fca2 	bl	8005194 <LL_ADC_SetOffset>
 8005850:	e11d      	b.n	8005a8e <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fcbd 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 800585e:	4603      	mov	r3, r0
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_ADC_ConfigChannel+0x17e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fcb2 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005874:	4603      	mov	r3, r0
 8005876:	0e9b      	lsrs	r3, r3, #26
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	e012      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x1a4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fca7 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 800588a:	4603      	mov	r3, r0
 800588c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800589a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x1bc>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e9b      	lsrs	r3, r3, #26
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	e00a      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x1d2>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c4:	fa93 f3a3 	rbit	r3, r3
 80058c8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80058ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058cc:	fab3 f383 	clz	r3, r3
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d106      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc8e 	bl	8005200 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fc74 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x210>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fc69 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005906:	4603      	mov	r3, r0
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	f003 021f 	and.w	r2, r3, #31
 800590e:	e010      	b.n	8005932 <HAL_ADC_ConfigChannel+0x232>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fc5e 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 800591c:	4603      	mov	r3, r0
 800591e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <HAL_ADC_ConfigChannel+0x24a>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	0e9b      	lsrs	r3, r3, #26
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	e00a      	b.n	8005960 <HAL_ADC_ConfigChannel+0x260>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005952:	fa93 f3a3 	rbit	r3, r3
 8005956:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595a:	fab3 f383 	clz	r3, r3
 800595e:	b2db      	uxtb	r3, r3
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2200      	movs	r2, #0
 800596a:	2101      	movs	r1, #1
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff fc47 	bl	8005200 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fc2d 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_ADC_ConfigChannel+0x29e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2102      	movs	r1, #2
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fc22 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005994:	4603      	mov	r3, r0
 8005996:	0e9b      	lsrs	r3, r3, #26
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	e010      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x2c0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fc17 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80059b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x2d8>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0e9b      	lsrs	r3, r3, #26
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	e00a      	b.n	80059ee <HAL_ADC_ConfigChannel+0x2ee>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80059e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d106      	bne.n	8005a00 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2102      	movs	r1, #2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fc00 	bl	8005200 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2103      	movs	r1, #3
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fbe6 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x32c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2103      	movs	r1, #3
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fbdb 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005a22:	4603      	mov	r3, r0
 8005a24:	0e9b      	lsrs	r3, r3, #26
 8005a26:	f003 021f 	and.w	r2, r3, #31
 8005a2a:	e010      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x34e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2103      	movs	r1, #3
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fbd0 	bl	80051d8 <LL_ADC_GetOffsetChannel>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a46:	fab3 f383 	clz	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_ADC_ConfigChannel+0x366>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	0e9b      	lsrs	r3, r3, #26
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	e00a      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x37c>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	fab3 f383 	clz	r3, r3
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d106      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2103      	movs	r1, #3
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fbb9 	bl	8005200 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fca2 	bl	80053dc <LL_ADC_IsEnabled>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 810c 	bne.w	8005cb8 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	461a      	mov	r2, r3
 8005aae:	f7ff fc23 	bl	80052f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4aae      	ldr	r2, [pc, #696]	; (8005d70 <HAL_ADC_ConfigChannel+0x670>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f040 80fd 	bne.w	8005cb8 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10b      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x3e6>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	0e9b      	lsrs	r3, r3, #26
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b09      	cmp	r3, #9
 8005adc:	bf94      	ite	ls
 8005ade:	2301      	movls	r3, #1
 8005ae0:	2300      	movhi	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e012      	b.n	8005b0c <HAL_ADC_ConfigChannel+0x40c>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	fa93 f3a3 	rbit	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	fab3 f383 	clz	r3, r3
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	3301      	adds	r3, #1
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	bf94      	ite	ls
 8005b06:	2301      	movls	r3, #1
 8005b08:	2300      	movhi	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d064      	beq.n	8005bda <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x42c>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	0e9b      	lsrs	r3, r3, #26
 8005b22:	3301      	adds	r3, #1
 8005b24:	069b      	lsls	r3, r3, #26
 8005b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b2a:	e00e      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x44a>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	fa93 f3a3 	rbit	r3, r3
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	fab3 f383 	clz	r3, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	069b      	lsls	r3, r3, #26
 8005b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x46a>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	0e9b      	lsrs	r3, r3, #26
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2101      	movs	r1, #1
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
 8005b68:	e010      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x48c>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	fa93 f3a3 	rbit	r3, r3
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	3301      	adds	r3, #1
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2101      	movs	r1, #1
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <HAL_ADC_ConfigChannel+0x4b2>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0e9b      	lsrs	r3, r3, #26
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f003 021f 	and.w	r2, r3, #31
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	e011      	b.n	8005bd6 <HAL_ADC_ConfigChannel+0x4d6>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	e069      	b.n	8005cae <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <HAL_ADC_ConfigChannel+0x4f6>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	0e9b      	lsrs	r3, r3, #26
 8005bec:	3301      	adds	r3, #1
 8005bee:	069b      	lsls	r3, r3, #26
 8005bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bf4:	e00e      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x514>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	fa93 f3a3 	rbit	r3, r3
 8005c02:	61fb      	str	r3, [r7, #28]
  return result;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	fab3 f383 	clz	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	069b      	lsls	r3, r3, #26
 8005c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x534>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0e9b      	lsrs	r3, r3, #26
 8005c26:	3301      	adds	r3, #1
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	e010      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x556>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	fa93 f3a3 	rbit	r3, r3
 8005c40:	617b      	str	r3, [r7, #20]
  return result;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	fab3 f383 	clz	r3, r3
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	ea42 0103 	orr.w	r1, r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10d      	bne.n	8005c82 <HAL_ADC_ConfigChannel+0x582>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0e9b      	lsrs	r3, r3, #26
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f003 021f 	and.w	r2, r3, #31
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	3b1e      	subs	r3, #30
 8005c7a:	051b      	lsls	r3, r3, #20
 8005c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c80:	e014      	b.n	8005cac <HAL_ADC_ConfigChannel+0x5ac>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	fa93 f3a3 	rbit	r3, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
  return result;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	fab3 f383 	clz	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	f003 021f 	and.w	r2, r3, #31
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3b1e      	subs	r3, #30
 8005ca6:	051b      	lsls	r3, r3, #20
 8005ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cac:	430b      	orrs	r3, r1
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	6892      	ldr	r2, [r2, #8]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f7ff faf8 	bl	80052a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <HAL_ADC_ConfigChannel+0x674>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 808d 	beq.w	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cc6:	482c      	ldr	r0, [pc, #176]	; (8005d78 <HAL_ADC_ConfigChannel+0x678>)
 8005cc8:	f7ff fa56 	bl	8005178 <LL_ADC_GetCommonPathInternalCh>
 8005ccc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <HAL_ADC_ConfigChannel+0x67c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d12b      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x632>
 8005cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d125      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <HAL_ADC_ConfigChannel+0x680>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_ADC_ConfigChannel+0x5fa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a23      	ldr	r2, [pc, #140]	; (8005d84 <HAL_ADC_ConfigChannel+0x684>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d16f      	bne.n	8005dda <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d02:	4619      	mov	r1, r3
 8005d04:	481c      	ldr	r0, [pc, #112]	; (8005d78 <HAL_ADC_ConfigChannel+0x678>)
 8005d06:	f7ff fa24 	bl	8005152 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005d0a:	4b1f      	ldr	r3, [pc, #124]	; (8005d88 <HAL_ADC_ConfigChannel+0x688>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	4a1e      	ldr	r2, [pc, #120]	; (8005d8c <HAL_ADC_ConfigChannel+0x68c>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	099a      	lsrs	r2, r3, #6
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005d22:	e002      	b.n	8005d2a <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f9      	bne.n	8005d24 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d30:	e053      	b.n	8005dda <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <HAL_ADC_ConfigChannel+0x690>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d12b      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x694>
 8005d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d125      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <HAL_ADC_ConfigChannel+0x680>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_ADC_ConfigChannel+0x65c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a0b      	ldr	r2, [pc, #44]	; (8005d84 <HAL_ADC_ConfigChannel+0x684>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d140      	bne.n	8005dde <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d64:	4619      	mov	r1, r3
 8005d66:	4804      	ldr	r0, [pc, #16]	; (8005d78 <HAL_ADC_ConfigChannel+0x678>)
 8005d68:	f7ff f9f3 	bl	8005152 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d6c:	e037      	b.n	8005dde <HAL_ADC_ConfigChannel+0x6de>
 8005d6e:	bf00      	nop
 8005d70:	407f0000 	.word	0x407f0000
 8005d74:	80080000 	.word	0x80080000
 8005d78:	50040300 	.word	0x50040300
 8005d7c:	c7520000 	.word	0xc7520000
 8005d80:	50040000 	.word	0x50040000
 8005d84:	50040200 	.word	0x50040200
 8005d88:	2000004c 	.word	0x2000004c
 8005d8c:	053e2d63 	.word	0x053e2d63
 8005d90:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <HAL_ADC_ConfigChannel+0x6f4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d120      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11a      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <HAL_ADC_ConfigChannel+0x6f8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d115      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	480f      	ldr	r0, [pc, #60]	; (8005dfc <HAL_ADC_ConfigChannel+0x6fc>)
 8005dc0:	f7ff f9c7 	bl	8005152 <LL_ADC_SetCommonPathInternalCh>
 8005dc4:	e00c      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005dd8:	e002      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005de8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3798      	adds	r7, #152	; 0x98
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	80000001 	.word	0x80000001
 8005df8:	50040000 	.word	0x50040000
 8005dfc:	50040300 	.word	0x50040300

08005e00 <LL_ADC_IsEnabled>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <LL_ADC_IsEnabled+0x18>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <LL_ADC_IsEnabled+0x1a>
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_ADC_REG_IsConversionOngoing>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d101      	bne.n	8005e3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b0a1      	sub	sp, #132	; 0x84
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e08f      	b.n	8005f8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a47      	ldr	r2, [pc, #284]	; (8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d102      	bne.n	8005e82 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005e7c:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e001      	b.n	8005e86 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e072      	b.n	8005f8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ffbd 	bl	8005e26 <LL_ADC_REG_IsConversionOngoing>
 8005eac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff ffb7 	bl	8005e26 <LL_ADC_REG_IsConversionOngoing>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d154      	bne.n	8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d151      	bne.n	8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ec4:	4b35      	ldr	r3, [pc, #212]	; (8005f9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ec6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d02c      	beq.n	8005f2a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ee2:	035b      	lsls	r3, r3, #13
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eec:	4829      	ldr	r0, [pc, #164]	; (8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005eee:	f7ff ff87 	bl	8005e00 <LL_ADC_IsEnabled>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4828      	ldr	r0, [pc, #160]	; (8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005ef6:	f7ff ff83 	bl	8005e00 <LL_ADC_IsEnabled>
 8005efa:	4603      	mov	r3, r0
 8005efc:	431c      	orrs	r4, r3
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f00:	f7ff ff7e 	bl	8005e00 <LL_ADC_IsEnabled>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4323      	orrs	r3, r4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d137      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f14:	f023 030f 	bic.w	r3, r3, #15
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	6811      	ldr	r1, [r2, #0]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	6892      	ldr	r2, [r2, #8]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	431a      	orrs	r2, r3
 8005f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f28:	e028      	b.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f36:	4817      	ldr	r0, [pc, #92]	; (8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005f38:	f7ff ff62 	bl	8005e00 <LL_ADC_IsEnabled>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4816      	ldr	r0, [pc, #88]	; (8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005f40:	f7ff ff5e 	bl	8005e00 <LL_ADC_IsEnabled>
 8005f44:	4603      	mov	r3, r0
 8005f46:	431c      	orrs	r4, r3
 8005f48:	4815      	ldr	r0, [pc, #84]	; (8005fa0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f4a:	f7ff ff59 	bl	8005e00 <LL_ADC_IsEnabled>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4323      	orrs	r3, r4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d112      	bne.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f5e:	f023 030f 	bic.w	r3, r3, #15
 8005f62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f66:	e009      	b.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f7a:	e000      	b.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005f86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3784      	adds	r7, #132	; 0x84
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	50040000 	.word	0x50040000
 8005f98:	50040100 	.word	0x50040100
 8005f9c:	50040300 	.word	0x50040300
 8005fa0:	50040200 	.word	0x50040200

08005fa4 <__NVIC_SetPriorityGrouping>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fd6:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	60d3      	str	r3, [r2, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <__NVIC_GetPriorityGrouping>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <__NVIC_GetPriorityGrouping+0x18>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0a1b      	lsrs	r3, r3, #8
 8005ff6:	f003 0307 	and.w	r3, r3, #7
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <__NVIC_EnableIRQ>:
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006016:	2b00      	cmp	r3, #0
 8006018:	db0b      	blt.n	8006032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	f003 021f 	and.w	r2, r3, #31
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <__NVIC_EnableIRQ+0x38>)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2001      	movs	r0, #1
 800602a:	fa00 f202 	lsl.w	r2, r0, r2
 800602e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	e000e100 	.word	0xe000e100

08006044 <__NVIC_DisableIRQ>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800604e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db10      	blt.n	8006078 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	f003 021f 	and.w	r2, r3, #31
 800605c:	4909      	ldr	r1, [pc, #36]	; (8006084 <__NVIC_DisableIRQ+0x40>)
 800605e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2001      	movs	r0, #1
 8006066:	fa00 f202 	lsl.w	r2, r0, r2
 800606a:	3320      	adds	r3, #32
 800606c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006070:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006074:	f3bf 8f6f 	isb	sy
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000e100 	.word	0xe000e100

08006088 <__NVIC_SetPriority>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	db0a      	blt.n	80060b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	490c      	ldr	r1, [pc, #48]	; (80060d4 <__NVIC_SetPriority+0x4c>)
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	440b      	add	r3, r1
 80060ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060b0:	e00a      	b.n	80060c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	4908      	ldr	r1, [pc, #32]	; (80060d8 <__NVIC_SetPriority+0x50>)
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	3b04      	subs	r3, #4
 80060c0:	0112      	lsls	r2, r2, #4
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	440b      	add	r3, r1
 80060c6:	761a      	strb	r2, [r3, #24]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	e000e100 	.word	0xe000e100
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <NVIC_EncodePriority>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f1c3 0307 	rsb	r3, r3, #7
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf28      	it	cs
 80060fa:	2304      	movcs	r3, #4
 80060fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3304      	adds	r3, #4
 8006102:	2b06      	cmp	r3, #6
 8006104:	d902      	bls.n	800610c <NVIC_EncodePriority+0x30>
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3b03      	subs	r3, #3
 800610a:	e000      	b.n	800610e <NVIC_EncodePriority+0x32>
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43da      	mvns	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	401a      	ands	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	43d9      	mvns	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	4313      	orrs	r3, r2
}
 8006136:	4618      	mov	r0, r3
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ff2a 	bl	8005fa4 <__NVIC_SetPriorityGrouping>
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800616a:	f7ff ff3f 	bl	8005fec <__NVIC_GetPriorityGrouping>
 800616e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	6978      	ldr	r0, [r7, #20]
 8006176:	f7ff ffb1 	bl	80060dc <NVIC_EncodePriority>
 800617a:	4602      	mov	r2, r0
 800617c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ff80 	bl	8006088 <__NVIC_SetPriority>
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff32 	bl	8006008 <__NVIC_EnableIRQ>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80061b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ff42 	bl	8006044 <__NVIC_DisableIRQ>
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e075      	b.n	80062c6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fe f89a 	bl	8004328 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800620a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b2a      	ldr	r3, [pc, #168]	; (80062d0 <HAL_DCMI_Init+0x108>)
 8006226:	400b      	ands	r3, r1
 8006228:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800623e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800624a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006256:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006262:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800626e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b10      	cmp	r3, #16
 800627e:	d112      	bne.n	80062a6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7f1b      	ldrb	r3, [r3, #28]
 8006284:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7f5b      	ldrb	r3, [r3, #29]
 800628a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800628c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7f9b      	ldrb	r3, [r3, #30]
 8006292:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006294:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7fdb      	ldrb	r3, [r3, #31]
 800629c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80062a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80062a4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 021f 	orr.w	r2, r2, #31
 80062b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	ffe0f007 	.word	0xffe0f007

080062d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d005      	beq.n	80062f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2204      	movs	r2, #4
 80062f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
 80062f6:	e029      	b.n	800634c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 020e 	bic.w	r2, r2, #14
 8006306:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631c:	f003 021c 	and.w	r2, r3, #28
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	2101      	movs	r1, #1
 8006326:	fa01 f202 	lsl.w	r2, r1, r2
 800632a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	4798      	blx	r3
    }
  }
  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006366:	e166      	b.n	8006636 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2101      	movs	r1, #1
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	4013      	ands	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8158 	beq.w	8006630 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d00b      	beq.n	80063a0 <HAL_GPIO_Init+0x48>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d007      	beq.n	80063a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006394:	2b11      	cmp	r3, #17
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b12      	cmp	r3, #18
 800639e:	d130      	bne.n	8006402 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063d6:	2201      	movs	r2, #1
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43db      	mvns	r3, r3
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4013      	ands	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0201 	and.w	r2, r3, #1
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2203      	movs	r2, #3
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_Init+0xea>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b12      	cmp	r3, #18
 8006440:	d123      	bne.n	800648a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	08da      	lsrs	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3208      	adds	r2, #8
 800644a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	220f      	movs	r2, #15
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43db      	mvns	r3, r3
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	08da      	lsrs	r2, r3, #3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3208      	adds	r2, #8
 8006484:	6939      	ldr	r1, [r7, #16]
 8006486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	2203      	movs	r2, #3
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4013      	ands	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0203 	and.w	r2, r3, #3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80b2 	beq.w	8006630 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064cc:	4b61      	ldr	r3, [pc, #388]	; (8006654 <HAL_GPIO_Init+0x2fc>)
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	4a60      	ldr	r2, [pc, #384]	; (8006654 <HAL_GPIO_Init+0x2fc>)
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	6613      	str	r3, [r2, #96]	; 0x60
 80064d8:	4b5e      	ldr	r3, [pc, #376]	; (8006654 <HAL_GPIO_Init+0x2fc>)
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064e4:	4a5c      	ldr	r2, [pc, #368]	; (8006658 <HAL_GPIO_Init+0x300>)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	3302      	adds	r3, #2
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	220f      	movs	r2, #15
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4013      	ands	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800650e:	d02b      	beq.n	8006568 <HAL_GPIO_Init+0x210>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a52      	ldr	r2, [pc, #328]	; (800665c <HAL_GPIO_Init+0x304>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d025      	beq.n	8006564 <HAL_GPIO_Init+0x20c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a51      	ldr	r2, [pc, #324]	; (8006660 <HAL_GPIO_Init+0x308>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d01f      	beq.n	8006560 <HAL_GPIO_Init+0x208>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a50      	ldr	r2, [pc, #320]	; (8006664 <HAL_GPIO_Init+0x30c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d019      	beq.n	800655c <HAL_GPIO_Init+0x204>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a4f      	ldr	r2, [pc, #316]	; (8006668 <HAL_GPIO_Init+0x310>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_GPIO_Init+0x200>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a4e      	ldr	r2, [pc, #312]	; (800666c <HAL_GPIO_Init+0x314>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00d      	beq.n	8006554 <HAL_GPIO_Init+0x1fc>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a4d      	ldr	r2, [pc, #308]	; (8006670 <HAL_GPIO_Init+0x318>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <HAL_GPIO_Init+0x1f8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a4c      	ldr	r2, [pc, #304]	; (8006674 <HAL_GPIO_Init+0x31c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_GPIO_Init+0x1f4>
 8006548:	2307      	movs	r3, #7
 800654a:	e00e      	b.n	800656a <HAL_GPIO_Init+0x212>
 800654c:	2308      	movs	r3, #8
 800654e:	e00c      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006550:	2306      	movs	r3, #6
 8006552:	e00a      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006554:	2305      	movs	r3, #5
 8006556:	e008      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006558:	2304      	movs	r3, #4
 800655a:	e006      	b.n	800656a <HAL_GPIO_Init+0x212>
 800655c:	2303      	movs	r3, #3
 800655e:	e004      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006560:	2302      	movs	r3, #2
 8006562:	e002      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_GPIO_Init+0x212>
 8006568:	2300      	movs	r3, #0
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	f002 0203 	and.w	r2, r2, #3
 8006570:	0092      	lsls	r2, r2, #2
 8006572:	4093      	lsls	r3, r2
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800657a:	4937      	ldr	r1, [pc, #220]	; (8006658 <HAL_GPIO_Init+0x300>)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	3302      	adds	r3, #2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006588:	4b3b      	ldr	r3, [pc, #236]	; (8006678 <HAL_GPIO_Init+0x320>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	43db      	mvns	r3, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4013      	ands	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065ac:	4a32      	ldr	r2, [pc, #200]	; (8006678 <HAL_GPIO_Init+0x320>)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_GPIO_Init+0x320>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065d6:	4a28      	ldr	r2, [pc, #160]	; (8006678 <HAL_GPIO_Init+0x320>)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065dc:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_GPIO_Init+0x320>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <HAL_GPIO_Init+0x320>)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_GPIO_Init+0x320>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	43db      	mvns	r3, r3
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4013      	ands	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800662a:	4a13      	ldr	r2, [pc, #76]	; (8006678 <HAL_GPIO_Init+0x320>)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	f47f ae91 	bne.w	8006368 <HAL_GPIO_Init+0x10>
  }
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000
 8006658:	40010000 	.word	0x40010000
 800665c:	48000400 	.word	0x48000400
 8006660:	48000800 	.word	0x48000800
 8006664:	48000c00 	.word	0x48000c00
 8006668:	48001000 	.word	0x48001000
 800666c:	48001400 	.word	0x48001400
 8006670:	48001800 	.word	0x48001800
 8006674:	48001c00 	.word	0x48001c00
 8006678:	40010400 	.word	0x40010400

0800667c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800668a:	e0c9      	b.n	8006820 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800668c:	2201      	movs	r2, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	4013      	ands	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80bc 	beq.w	800681a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80066a2:	4a66      	ldr	r2, [pc, #408]	; (800683c <HAL_GPIO_DeInit+0x1c0>)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	3302      	adds	r3, #2
 80066aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	220f      	movs	r2, #15
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066ca:	d02b      	beq.n	8006724 <HAL_GPIO_DeInit+0xa8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a5c      	ldr	r2, [pc, #368]	; (8006840 <HAL_GPIO_DeInit+0x1c4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d025      	beq.n	8006720 <HAL_GPIO_DeInit+0xa4>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a5b      	ldr	r2, [pc, #364]	; (8006844 <HAL_GPIO_DeInit+0x1c8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01f      	beq.n	800671c <HAL_GPIO_DeInit+0xa0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a5a      	ldr	r2, [pc, #360]	; (8006848 <HAL_GPIO_DeInit+0x1cc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d019      	beq.n	8006718 <HAL_GPIO_DeInit+0x9c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a59      	ldr	r2, [pc, #356]	; (800684c <HAL_GPIO_DeInit+0x1d0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_GPIO_DeInit+0x98>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a58      	ldr	r2, [pc, #352]	; (8006850 <HAL_GPIO_DeInit+0x1d4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00d      	beq.n	8006710 <HAL_GPIO_DeInit+0x94>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_GPIO_DeInit+0x1d8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d007      	beq.n	800670c <HAL_GPIO_DeInit+0x90>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a56      	ldr	r2, [pc, #344]	; (8006858 <HAL_GPIO_DeInit+0x1dc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_GPIO_DeInit+0x8c>
 8006704:	2307      	movs	r3, #7
 8006706:	e00e      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006708:	2308      	movs	r3, #8
 800670a:	e00c      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 800670c:	2306      	movs	r3, #6
 800670e:	e00a      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006710:	2305      	movs	r3, #5
 8006712:	e008      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006714:	2304      	movs	r3, #4
 8006716:	e006      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006718:	2303      	movs	r3, #3
 800671a:	e004      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 800671c:	2302      	movs	r3, #2
 800671e:	e002      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <HAL_GPIO_DeInit+0xaa>
 8006724:	2300      	movs	r3, #0
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	f002 0203 	and.w	r2, r2, #3
 800672c:	0092      	lsls	r2, r2, #2
 800672e:	4093      	lsls	r3, r2
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	429a      	cmp	r2, r3
 8006734:	d132      	bne.n	800679c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006736:	4b49      	ldr	r3, [pc, #292]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	43db      	mvns	r3, r3
 800673e:	4947      	ldr	r1, [pc, #284]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 8006740:	4013      	ands	r3, r2
 8006742:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006744:	4b45      	ldr	r3, [pc, #276]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	43db      	mvns	r3, r3
 800674c:	4943      	ldr	r1, [pc, #268]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 800674e:	4013      	ands	r3, r2
 8006750:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006752:	4b42      	ldr	r3, [pc, #264]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	43db      	mvns	r3, r3
 800675a:	4940      	ldr	r1, [pc, #256]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 800675c:	4013      	ands	r3, r2
 800675e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006760:	4b3e      	ldr	r3, [pc, #248]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	43db      	mvns	r3, r3
 8006768:	493c      	ldr	r1, [pc, #240]	; (800685c <HAL_GPIO_DeInit+0x1e0>)
 800676a:	4013      	ands	r3, r2
 800676c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	220f      	movs	r2, #15
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800677e:	4a2f      	ldr	r2, [pc, #188]	; (800683c <HAL_GPIO_DeInit+0x1c0>)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	3302      	adds	r3, #2
 8006786:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	43da      	mvns	r2, r3
 800678e:	482b      	ldr	r0, [pc, #172]	; (800683c <HAL_GPIO_DeInit+0x1c0>)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	400a      	ands	r2, r1
 8006796:	3302      	adds	r3, #2
 8006798:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	2103      	movs	r1, #3
 80067a6:	fa01 f303 	lsl.w	r3, r1, r3
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	08da      	lsrs	r2, r3, #3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3208      	adds	r2, #8
 80067b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	220f      	movs	r2, #15
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	43db      	mvns	r3, r3
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	08d2      	lsrs	r2, r2, #3
 80067d0:	4019      	ands	r1, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3208      	adds	r2, #8
 80067d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	2103      	movs	r1, #3
 80067e4:	fa01 f303 	lsl.w	r3, r1, r3
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	2101      	movs	r1, #1
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	fa01 f303 	lsl.w	r3, r1, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	401a      	ands	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	2103      	movs	r1, #3
 800680e:	fa01 f303 	lsl.w	r3, r1, r3
 8006812:	43db      	mvns	r3, r3
 8006814:	401a      	ands	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	3301      	adds	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f af2f 	bne.w	800668c <HAL_GPIO_DeInit+0x10>
  }
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	48000400 	.word	0x48000400
 8006844:	48000800 	.word	0x48000800
 8006848:	48000c00 	.word	0x48000c00
 800684c:	48001000 	.word	0x48001000
 8006850:	48001400 	.word	0x48001400
 8006854:	48001800 	.word	0x48001800
 8006858:	48001c00 	.word	0x48001c00
 800685c:	40010400 	.word	0x40010400

08006860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
 800687c:	e001      	b.n	8006882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
 800689c:	4613      	mov	r3, r2
 800689e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068a0:	787b      	ldrb	r3, [r7, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068ac:	e002      	b.n	80068b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	887b      	ldrh	r3, [r7, #2]
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068d8:	887a      	ldrh	r2, [r7, #2]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80068de:	e002      	b.n	80068e6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	619a      	str	r2, [r3, #24]
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e081      	b.n	8006a08 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fd fd85 	bl	8004428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	; 0x24
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006942:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006952:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d107      	bne.n	800696c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006968:	609a      	str	r2, [r3, #8]
 800696a:	e006      	b.n	800697a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006978:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d104      	bne.n	800698c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	021a      	lsls	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69d9      	ldr	r1, [r3, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0201 	orr.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	817b      	strh	r3, [r7, #10]
 8006a20:	4613      	mov	r3, r2
 8006a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	f040 80da 	bne.w	8006be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_I2C_Master_Transmit+0x30>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0d3      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a48:	f7fe fb42 	bl	80050d0 <HAL_GetTick>
 8006a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	2319      	movs	r3, #25
 8006a54:	2201      	movs	r2, #1
 8006a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 faed 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e0be      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2221      	movs	r2, #33	; 0x21
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2210      	movs	r2, #16
 8006a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	893a      	ldrh	r2, [r7, #8]
 8006a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2bff      	cmp	r3, #255	; 0xff
 8006a9a:	d90e      	bls.n	8006aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	22ff      	movs	r2, #255	; 0xff
 8006aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	8979      	ldrh	r1, [r7, #10]
 8006aaa:	4b51      	ldr	r3, [pc, #324]	; (8006bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fc50 	bl	8007358 <I2C_TransferConfig>
 8006ab8:	e06c      	b.n	8006b94 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	8979      	ldrh	r1, [r7, #10]
 8006acc:	4b48      	ldr	r3, [pc, #288]	; (8006bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 fc3f 	bl	8007358 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006ada:	e05b      	b.n	8006b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	6a39      	ldr	r1, [r7, #32]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 faea 	bl	80070ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e07b      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	781a      	ldrb	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d034      	beq.n	8006b94 <HAL_I2C_Master_Transmit+0x184>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d130      	bne.n	8006b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fa7c 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e04d      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2bff      	cmp	r3, #255	; 0xff
 8006b54:	d90e      	bls.n	8006b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	22ff      	movs	r2, #255	; 0xff
 8006b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	8979      	ldrh	r1, [r7, #10]
 8006b64:	2300      	movs	r3, #0
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fbf3 	bl	8007358 <I2C_TransferConfig>
 8006b72:	e00f      	b.n	8006b94 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	8979      	ldrh	r1, [r7, #10]
 8006b86:	2300      	movs	r3, #0
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fbe2 	bl	8007358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d19e      	bne.n	8006adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fac9 	bl	800713a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e01a      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6859      	ldr	r1, [r3, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006bc6:	400b      	ands	r3, r1
 8006bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	80002000 	.word	0x80002000
 8006bf4:	fe00e800 	.word	0xfe00e800

08006bf8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	461a      	mov	r2, r3
 8006c04:	460b      	mov	r3, r1
 8006c06:	817b      	strh	r3, [r7, #10]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	f040 80db 	bne.w	8006dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_I2C_Master_Receive+0x30>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e0d4      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c30:	f7fe fa4e 	bl	80050d0 <HAL_GetTick>
 8006c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	2319      	movs	r3, #25
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f9f9 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e0bf      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2222      	movs	r2, #34	; 0x22
 8006c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	893a      	ldrh	r2, [r7, #8]
 8006c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2bff      	cmp	r3, #255	; 0xff
 8006c82:	d90e      	bls.n	8006ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	22ff      	movs	r2, #255	; 0xff
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	8979      	ldrh	r1, [r7, #10]
 8006c92:	4b52      	ldr	r3, [pc, #328]	; (8006ddc <HAL_I2C_Master_Receive+0x1e4>)
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fb5c 	bl	8007358 <I2C_TransferConfig>
 8006ca0:	e06d      	b.n	8006d7e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	4b49      	ldr	r3, [pc, #292]	; (8006ddc <HAL_I2C_Master_Receive+0x1e4>)
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fb4b 	bl	8007358 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006cc2:	e05c      	b.n	8006d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	6a39      	ldr	r1, [r7, #32]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fa73 	bl	80071b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e07c      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d034      	beq.n	8006d7e <HAL_I2C_Master_Receive+0x186>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d130      	bne.n	8006d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	2200      	movs	r2, #0
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f987 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e04d      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2bff      	cmp	r3, #255	; 0xff
 8006d3e:	d90e      	bls.n	8006d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	8979      	ldrh	r1, [r7, #10]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fafe 	bl	8007358 <I2C_TransferConfig>
 8006d5c:	e00f      	b.n	8006d7e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	8979      	ldrh	r1, [r7, #10]
 8006d70:	2300      	movs	r3, #0
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 faed 	bl	8007358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d19d      	bne.n	8006cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	6a39      	ldr	r1, [r7, #32]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f9d4 	bl	800713a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e01a      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2220      	movs	r2, #32
 8006da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <HAL_I2C_Master_Receive+0x1e8>)
 8006db0:	400b      	ands	r3, r1
 8006db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006dd0:	2302      	movs	r3, #2
  }
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	80002400 	.word	0x80002400
 8006de0:	fe00e800 	.word	0xfe00e800

08006de4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	460b      	mov	r3, r1
 8006df2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	f040 80f1 	bne.w	8006fe8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e14:	d101      	bne.n	8006e1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006e16:	2302      	movs	r3, #2
 8006e18:	e0e7      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_I2C_IsDeviceReady+0x44>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e0e0      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2224      	movs	r2, #36	; 0x24
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d107      	bne.n	8006e56 <HAL_I2C_IsDeviceReady+0x72>
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e54:	e004      	b.n	8006e60 <HAL_I2C_IsDeviceReady+0x7c>
 8006e56:	897b      	ldrh	r3, [r7, #10]
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006e66:	f7fe f933 	bl	80050d0 <HAL_GetTick>
 8006e6a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	bf0c      	ite	eq
 8006e7a:	2301      	moveq	r3, #1
 8006e7c:	2300      	movne	r3, #0
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b10      	cmp	r3, #16
 8006e8e:	bf0c      	ite	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	2300      	movne	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006e98:	e034      	b.n	8006f04 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea0:	d01a      	beq.n	8006ed8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fe f915 	bl	80050d0 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <HAL_I2C_IsDeviceReady+0xd4>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e088      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f04:	7ffb      	ldrb	r3, [r7, #31]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <HAL_I2C_IsDeviceReady+0x12c>
 8006f0a:	7fbb      	ldrb	r3, [r7, #30]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0c4      	beq.n	8006e9a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d01a      	beq.n	8006f54 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2120      	movs	r1, #32
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f886 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e058      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e04a      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2120      	movs	r1, #32
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f86b 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e03d      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2210      	movs	r2, #16
 8006f74:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d118      	bne.n	8006fb8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f94:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2120      	movs	r1, #32
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f84a 	bl	800703a <I2C_WaitOnFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e01c      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	f63f af3b 	bhi.w	8006e3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006fe8:	2302      	movs	r3, #2
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d103      	bne.n	8007010 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b01      	cmp	r3, #1
 800701c:	d007      	beq.n	800702e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0201 	orr.w	r2, r2, #1
 800702c:	619a      	str	r2, [r3, #24]
  }
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800704a:	e022      	b.n	8007092 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007052:	d01e      	beq.n	8007092 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007054:	f7fe f83c 	bl	80050d0 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d302      	bcc.n	800706a <I2C_WaitOnFlagUntilTimeout+0x30>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d113      	bne.n	8007092 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	f043 0220 	orr.w	r2, r3, #32
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e00f      	b.n	80070b2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0cd      	beq.n	800704c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070c6:	e02c      	b.n	8007122 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f8dd 	bl	800728c <I2C_IsAcknowledgeFailed>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e02a      	b.n	8007132 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e2:	d01e      	beq.n	8007122 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e4:	f7fd fff4 	bl	80050d0 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d302      	bcc.n	80070fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d113      	bne.n	8007122 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	f043 0220 	orr.w	r2, r3, #32
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e007      	b.n	8007132 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d1cb      	bne.n	80070c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007146:	e028      	b.n	800719a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f89d 	bl	800728c <I2C_IsAcknowledgeFailed>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e026      	b.n	80071aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fd ffb8 	bl	80050d0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d113      	bne.n	800719a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e007      	b.n	80071aa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d1cf      	bne.n	8007148 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071c0:	e055      	b.n	800726e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f860 	bl	800728c <I2C_IsAcknowledgeFailed>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e053      	b.n	800727e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d129      	bne.n	8007238 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d105      	bne.n	80071fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e03f      	b.n	800727e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2220      	movs	r2, #32
 8007204:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007212:	400b      	ands	r3, r1
 8007214:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e022      	b.n	800727e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007238:	f7fd ff4a 	bl	80050d0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10f      	bne.n	800726e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e007      	b.n	800727e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b04      	cmp	r3, #4
 800727a:	d1a2      	bne.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	fe00e800 	.word	0xfe00e800

0800728c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d151      	bne.n	800734a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072a6:	e022      	b.n	80072ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ae:	d01e      	beq.n	80072ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b0:	f7fd ff0e 	bl	80050d0 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d302      	bcc.n	80072c6 <I2C_IsAcknowledgeFailed+0x3a>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d113      	bne.n	80072ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f043 0220 	orr.w	r2, r3, #32
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e02e      	b.n	800734c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d1d5      	bne.n	80072a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2210      	movs	r2, #16
 8007302:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2220      	movs	r2, #32
 800730a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fe70 	bl	8006ff2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6859      	ldr	r1, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <I2C_IsAcknowledgeFailed+0xc8>)
 800731e:	400b      	ands	r3, r1
 8007320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	f043 0204 	orr.w	r2, r3, #4
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	fe00e800 	.word	0xfe00e800

08007358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	607b      	str	r3, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	817b      	strh	r3, [r7, #10]
 8007366:	4613      	mov	r3, r2
 8007368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	0d5b      	lsrs	r3, r3, #21
 8007374:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <I2C_TransferConfig+0x58>)
 800737a:	430b      	orrs	r3, r1
 800737c:	43db      	mvns	r3, r3
 800737e:	ea02 0103 	and.w	r1, r2, r3
 8007382:	897b      	ldrh	r3, [r7, #10]
 8007384:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007388:	7a7b      	ldrb	r3, [r7, #9]
 800738a:	041b      	lsls	r3, r3, #16
 800738c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	431a      	orrs	r2, r3
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	03ff63ff 	.word	0x03ff63ff

080073b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d138      	bne.n	800743c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e032      	b.n	800743e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2224      	movs	r2, #36	; 0x24
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007406:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b20      	cmp	r3, #32
 800745e:	d139      	bne.n	80074d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800746a:	2302      	movs	r3, #2
 800746c:	e033      	b.n	80074d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2224      	movs	r2, #36	; 0x24
 800747a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800749c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e000      	b.n	80074d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074d4:	2302      	movs	r3, #2
  }
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e4:	b08f      	sub	sp, #60	; 0x3c
 80074e6:	af0a      	add	r7, sp, #40	; 0x28
 80074e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e116      	b.n	8007722 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f00c fd1a 	bl	8013f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2203      	movs	r2, #3
 8007518:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f006 fd19 	bl	800df6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	687e      	ldr	r6, [r7, #4]
 8007540:	466d      	mov	r5, sp
 8007542:	f106 0410 	add.w	r4, r6, #16
 8007546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800754a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800754c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800754e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007552:	e885 0003 	stmia.w	r5, {r0, r1}
 8007556:	1d33      	adds	r3, r6, #4
 8007558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800755a:	6838      	ldr	r0, [r7, #0]
 800755c:	f006 fc06 	bl	800dd6c <USB_CoreInit>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e0d7      	b.n	8007722 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2100      	movs	r1, #0
 8007578:	4618      	mov	r0, r3
 800757a:	f006 fd07 	bl	800df8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	e04a      	b.n	800761a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007584:	7bfa      	ldrb	r2, [r7, #15]
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	333d      	adds	r3, #61	; 0x3d
 8007594:	2201      	movs	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007598:	7bfa      	ldrb	r2, [r7, #15]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	333c      	adds	r3, #60	; 0x3c
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80075ac:	7bfa      	ldrb	r2, [r7, #15]
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	b298      	uxth	r0, r3
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	1a9b      	subs	r3, r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	3342      	adds	r3, #66	; 0x42
 80075c0:	4602      	mov	r2, r0
 80075c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80075c4:	7bfa      	ldrb	r2, [r7, #15]
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4613      	mov	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	333f      	adds	r3, #63	; 0x3f
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	3344      	adds	r3, #68	; 0x44
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075ec:	7bfa      	ldrb	r2, [r7, #15]
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	3348      	adds	r3, #72	; 0x48
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	3350      	adds	r3, #80	; 0x50
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	3301      	adds	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
 800761a:	7bfa      	ldrb	r2, [r7, #15]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d3af      	bcc.n	8007584 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	e044      	b.n	80076b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800762a:	7bfa      	ldrb	r2, [r7, #15]
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	4613      	mov	r3, r2
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007640:	7bfa      	ldrb	r2, [r7, #15]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007652:	7bfa      	ldrb	r2, [r7, #15]
 8007654:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007656:	7bfa      	ldrb	r2, [r7, #15]
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	3301      	adds	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
 80076b4:	7bfa      	ldrb	r2, [r7, #15]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d3b5      	bcc.n	800762a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	687e      	ldr	r6, [r7, #4]
 80076c6:	466d      	mov	r5, sp
 80076c8:	f106 0410 	add.w	r4, r6, #16
 80076cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80076dc:	1d33      	adds	r3, r6, #4
 80076de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e0:	6838      	ldr	r0, [r7, #0]
 80076e2:	f006 fc7d 	bl	800dfe0 <USB_DevInit>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e014      	b.n	8007722 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b01      	cmp	r3, #1
 800770e:	d102      	bne.n	8007716 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 ff61 	bl	80085d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f007 fbf6 	bl	800ef0c <USB_DevDisconnect>

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800772a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <HAL_PCD_Start+0x1c>
 8007742:	2302      	movs	r3, #2
 8007744:	e01c      	b.n	8007780 <HAL_PCD_Start+0x56>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	2b01      	cmp	r3, #1
 8007754:	d105      	bne.n	8007762 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f007 fbb8 	bl	800eedc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f006 fbe9 	bl	800df48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007788:	b590      	push	{r4, r7, lr}
 800778a:	b08d      	sub	sp, #52	; 0x34
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f007 fc5f 	bl	800f062 <USB_GetMode>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 838f 	bne.w	8007eca <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f007 fbc3 	bl	800ef3c <USB_ReadInterrupts>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8385 	beq.w	8007ec8 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f007 fbba 	bl	800ef3c <USB_ReadInterrupts>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d107      	bne.n	80077e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f002 0202 	and.w	r2, r2, #2
 80077e0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f007 fba8 	bl	800ef3c <USB_ReadInterrupts>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d161      	bne.n	80078ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0210 	bic.w	r2, r2, #16
 8007804:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f003 020f 	and.w	r2, r3, #15
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	0c5b      	lsrs	r3, r3, #17
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	2b02      	cmp	r3, #2
 8007830:	d124      	bne.n	800787c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d035      	beq.n	80078aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800784c:	b29b      	uxth	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	6a38      	ldr	r0, [r7, #32]
 8007852:	f007 fa20 	bl	800ec96 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	091b      	lsrs	r3, r3, #4
 800785e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007862:	441a      	add	r2, r3
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	091b      	lsrs	r3, r3, #4
 8007870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007874:	441a      	add	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	619a      	str	r2, [r3, #24]
 800787a:	e016      	b.n	80078aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	0c5b      	lsrs	r3, r3, #17
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	2b06      	cmp	r3, #6
 8007886:	d110      	bne.n	80078aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800788e:	2208      	movs	r2, #8
 8007890:	4619      	mov	r1, r3
 8007892:	6a38      	ldr	r0, [r7, #32]
 8007894:	f007 f9ff 	bl	800ec96 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	699a      	ldr	r2, [r3, #24]
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	091b      	lsrs	r3, r3, #4
 80078a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078a4:	441a      	add	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0210 	orr.w	r2, r2, #16
 80078b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f007 fb3c 	bl	800ef3c <USB_ReadInterrupts>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078ce:	d16e      	bne.n	80079ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f007 fb42 	bl	800ef62 <USB_ReadDevAllOutEpInterrupt>
 80078de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80078e0:	e062      	b.n	80079a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d057      	beq.n	800799c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f007 fb67 	bl	800efca <USB_ReadDevOutEPInterrupt>
 80078fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00c      	beq.n	8007922 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2301      	movs	r3, #1
 8007918:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800791a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd81 	bl	8008424 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00c      	beq.n	8007946 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	461a      	mov	r2, r3
 800793a:	2308      	movs	r3, #8
 800793c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800793e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fdbd 	bl	80084c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	d008      	beq.n	8007962 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	461a      	mov	r2, r3
 800795e:	2310      	movs	r3, #16
 8007960:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	2320      	movs	r3, #32
 800797c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	461a      	mov	r2, r3
 8007996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800799a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	3301      	adds	r3, #1
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d199      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f007 fac2 	bl	800ef3c <USB_ReadInterrupts>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079c2:	f040 8087 	bne.w	8007ad4 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f007 fae3 	bl	800ef96 <USB_ReadDevAllInEpInterrupt>
 80079d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80079d6:	e07a      	b.n	8007ace <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d06f      	beq.n	8007ac2 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f007 fb0a 	bl	800f006 <USB_ReadDevInEPInterrupt>
 80079f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2201      	movs	r2, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	43db      	mvns	r3, r3
 8007a18:	69f9      	ldr	r1, [r7, #28]
 8007a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1e:	4013      	ands	r3, r2
 8007a20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2301      	movs	r3, #1
 8007a32:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f00c fb17 	bl	801406e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	461a      	mov	r2, r3
 8007a58:	2308      	movs	r3, #8
 8007a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	461a      	mov	r2, r3
 8007a74:	2310      	movs	r3, #16
 8007a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d008      	beq.n	8007ab0 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	461a      	mov	r2, r3
 8007aac:	2302      	movs	r3, #2
 8007aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc29 	bl	8008314 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d181      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f007 fa2f 	bl	800ef3c <USB_ReadInterrupts>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ae8:	d122      	bne.n	8007b30 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f00c fdc8 	bl	80146a8 <HAL_PCDEx_LPM_Callback>
 8007b18:	e002      	b.n	8007b20 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f00c fb14 	bl	8014148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695a      	ldr	r2, [r3, #20]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f007 fa01 	bl	800ef3c <USB_ReadInterrupts>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b44:	d112      	bne.n	8007b6c <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d102      	bne.n	8007b5c <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f00c fad0 	bl	80140fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007b6a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f007 f9e3 	bl	800ef3c <USB_ReadInterrupts>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b80:	d121      	bne.n	8007bc6 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007b90:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d111      	bne.n	8007bc0 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007baa:	089b      	lsrs	r3, r3, #2
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f00c fd75 	bl	80146a8 <HAL_PCDEx_LPM_Callback>
 8007bbe:	e002      	b.n	8007bc6 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f00c fa9b 	bl	80140fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f007 f9b6 	bl	800ef3c <USB_ReadInterrupts>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bda:	f040 80c5 	bne.w	8007d68 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2110      	movs	r1, #16
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f006 fb3d 	bl	800e278 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bfe:	2300      	movs	r3, #0
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c02:	e056      	b.n	8007cb2 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c10:	461a      	mov	r2, r3
 8007c12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c36:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	461a      	mov	r2, r3
 8007c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007caa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	3301      	adds	r3, #1
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d3a3      	bcc.n	8007c04 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007cce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce8:	f043 030b 	orr.w	r3, r3, #11
 8007cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cfe:	f043 030b 	orr.w	r3, r3, #11
 8007d02:	6453      	str	r3, [r2, #68]	; 0x44
 8007d04:	e015      	b.n	8007d32 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d18:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007d1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d2c:	f043 030b 	orr.w	r3, r3, #11
 8007d30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f007 f9b6 	bl	800f0c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f007 f8e5 	bl	800ef3c <USB_ReadInterrupts>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7c:	d124      	bne.n	8007dc8 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f007 f97b 	bl	800f07e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f006 fad4 	bl	800e33a <USB_GetDevSpeed>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681c      	ldr	r4, [r3, #0]
 8007d9e:	f001 fb33 	bl	8009408 <HAL_RCC_GetHCLKFreq>
 8007da2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	4620      	mov	r0, r4
 8007dae:	f006 f82f 	bl	800de10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f00c f983 	bl	80140be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695a      	ldr	r2, [r3, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f007 f8b5 	bl	800ef3c <USB_ReadInterrupts>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d10a      	bne.n	8007df2 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f00c f960 	bl	80140a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695a      	ldr	r2, [r3, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f002 0208 	and.w	r2, r2, #8
 8007df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f007 f8a0 	bl	800ef3c <USB_ReadInterrupts>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e06:	d10f      	bne.n	8007e28 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f00c f9d2 	bl	80141bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f007 f885 	bl	800ef3c <USB_ReadInterrupts>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e3c:	d10f      	bne.n	8007e5e <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f00c f9a5 	bl	8014198 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f007 f86a 	bl	800ef3c <USB_ReadInterrupts>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e72:	d10a      	bne.n	8007e8a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f00c f9b3 	bl	80141e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	695a      	ldr	r2, [r3, #20]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f007 f854 	bl	800ef3c <USB_ReadInterrupts>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d115      	bne.n	8007eca <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f00c f9a3 	bl	80141fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6859      	ldr	r1, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
 8007ec6:	e000      	b.n	8007eca <HAL_PCD_IRQHandler+0x742>
      return;
 8007ec8:	bf00      	nop
    }
  }
}
 8007eca:	3734      	adds	r7, #52	; 0x34
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd90      	pop	{r4, r7, pc}

08007ed0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_PCD_SetAddress+0x1a>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e013      	b.n	8007f12 <HAL_PCD_SetAddress+0x42>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f006 ffc4 	bl	800ee90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	4603      	mov	r3, r0
 8007f2a:	70fb      	strb	r3, [r7, #3]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	803b      	strh	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da0f      	bge.n	8007f60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	f003 020f 	and.w	r2, r3, #15
 8007f46:	4613      	mov	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	3338      	adds	r3, #56	; 0x38
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	3304      	adds	r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	705a      	strb	r2, [r3, #1]
 8007f5e:	e00f      	b.n	8007f80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	f003 020f 	and.w	r2, r3, #15
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	1a9b      	subs	r3, r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	3304      	adds	r3, #4
 8007f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f8c:	883a      	ldrh	r2, [r7, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	78ba      	ldrb	r2, [r7, #2]
 8007f96:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007faa:	78bb      	ldrb	r3, [r7, #2]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d102      	bne.n	8007fb6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_PCD_EP_Open+0xaa>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e00e      	b.n	8007fe2 <HAL_PCD_EP_Open+0xc8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f006 f9d0 	bl	800e378 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da0f      	bge.n	800801e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	f003 020f 	and.w	r2, r3, #15
 8008004:	4613      	mov	r3, r2
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	3338      	adds	r3, #56	; 0x38
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	3304      	adds	r3, #4
 8008014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	705a      	strb	r2, [r3, #1]
 800801c:	e00f      	b.n	800803e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	4613      	mov	r3, r2
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	3304      	adds	r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	b2da      	uxtb	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_PCD_EP_Close+0x6e>
 8008054:	2302      	movs	r3, #2
 8008056:	e00e      	b.n	8008076 <HAL_PCD_EP_Close+0x8c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	4618      	mov	r0, r3
 8008068:	f006 fa0e 	bl	800e488 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	460b      	mov	r3, r1
 800808c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	f003 020f 	and.w	r2, r3, #15
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	3304      	adds	r3, #4
 80080a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2200      	movs	r2, #0
 80080be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6979      	ldr	r1, [r7, #20]
 80080dc:	4618      	mov	r0, r3
 80080de:	f006 fc8b 	bl	800e9f8 <USB_EP0StartXfer>
 80080e2:	e005      	b.n	80080f0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f006 faa8 	bl	800e640 <USB_EPStartXfer>
  }

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	f003 020f 	and.w	r2, r3, #15
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800811c:	681b      	ldr	r3, [r3, #0]
}
 800811e:	4618      	mov	r0, r3
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b086      	sub	sp, #24
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	460b      	mov	r3, r1
 8008138:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	3338      	adds	r3, #56	; 0x38
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2201      	movs	r2, #1
 8008168:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	b2da      	uxtb	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6979      	ldr	r1, [r7, #20]
 8008186:	4618      	mov	r0, r3
 8008188:	f006 fc36 	bl	800e9f8 <USB_EP0StartXfer>
 800818c:	e005      	b.n	800819a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6979      	ldr	r1, [r7, #20]
 8008194:	4618      	mov	r0, r3
 8008196:	f006 fa53 	bl	800e640 <USB_EPStartXfer>
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	f003 020f 	and.w	r2, r3, #15
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d901      	bls.n	80081c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e04e      	b.n	8008260 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80081c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da0f      	bge.n	80081ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	3338      	adds	r3, #56	; 0x38
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	3304      	adds	r3, #4
 80081e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	705a      	strb	r2, [r3, #1]
 80081e8:	e00d      	b.n	8008206 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80081ea:	78fa      	ldrb	r2, [r7, #3]
 80081ec:	4613      	mov	r3, r2
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	b2da      	uxtb	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800821e:	2b01      	cmp	r3, #1
 8008220:	d101      	bne.n	8008226 <HAL_PCD_EP_SetStall+0x82>
 8008222:	2302      	movs	r3, #2
 8008224:	e01c      	b.n	8008260 <HAL_PCD_EP_SetStall+0xbc>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	4618      	mov	r0, r3
 8008236:	f006 fd57 	bl	800ece8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	f003 030f 	and.w	r3, r3, #15
 8008240:	2b00      	cmp	r3, #0
 8008242:	d108      	bne.n	8008256 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800824e:	4619      	mov	r1, r3
 8008250:	4610      	mov	r0, r2
 8008252:	f006 ff37 	bl	800f0c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	f003 020f 	and.w	r2, r3, #15
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d901      	bls.n	8008286 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e042      	b.n	800830c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	da0f      	bge.n	80082ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	f003 020f 	and.w	r2, r3, #15
 8008294:	4613      	mov	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	3338      	adds	r3, #56	; 0x38
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	3304      	adds	r3, #4
 80082a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	705a      	strb	r2, [r3, #1]
 80082ac:	e00f      	b.n	80082ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	4613      	mov	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	3304      	adds	r3, #4
 80082c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_PCD_EP_ClrStall+0x86>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e00e      	b.n	800830c <HAL_PCD_EP_ClrStall+0xa4>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68f9      	ldr	r1, [r7, #12]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f006 fd61 	bl	800edc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3338      	adds	r3, #56	; 0x38
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d901      	bls.n	800834c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e067      	b.n	800841c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	695a      	ldr	r2, [r3, #20]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	429a      	cmp	r2, r3
 8008360:	d902      	bls.n	8008368 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	3303      	adds	r3, #3
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008370:	e026      	b.n	80083c0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	429a      	cmp	r2, r3
 8008386:	d902      	bls.n	800838e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	3303      	adds	r3, #3
 8008392:	089b      	lsrs	r3, r3, #2
 8008394:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	68d9      	ldr	r1, [r3, #12]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	b2da      	uxtb	r2, r3
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f006 fc46 	bl	800ec34 <USB_WritePacket>

    ep->xfer_buff  += len;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	441a      	add	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d809      	bhi.n	80083ea <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083de:	429a      	cmp	r2, r3
 80083e0:	d203      	bcs.n	80083ea <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1c3      	bne.n	8008372 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d811      	bhi.n	800841a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	2201      	movs	r2, #1
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	43db      	mvns	r3, r3
 8008410:	6939      	ldr	r1, [r7, #16]
 8008412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008416:	4013      	ands	r3, r2
 8008418:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3720      	adds	r7, #32
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	333c      	adds	r3, #60	; 0x3c
 800843c:	3304      	adds	r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a19      	ldr	r2, [pc, #100]	; (80084bc <PCD_EP_OutXfrComplete_int+0x98>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d124      	bne.n	80084a4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	461a      	mov	r2, r3
 8008472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008476:	6093      	str	r3, [r2, #8]
 8008478:	e01a      	b.n	80084b0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d008      	beq.n	8008496 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	461a      	mov	r2, r3
 8008492:	2320      	movs	r3, #32
 8008494:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f00b fdcb 	bl	8014038 <HAL_PCD_DataOutStageCallback>
 80084a2:	e005      	b.n	80084b0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f00b fdc4 	bl	8014038 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	4f54310a 	.word	0x4f54310a

080084c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	333c      	adds	r3, #60	; 0x3c
 80084d8:	3304      	adds	r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <PCD_EP_OutSetupPacket_int+0x64>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d90e      	bls.n	8008514 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008512:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f00b fd7d 	bl	8014014 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	4f54300a 	.word	0x4f54300a

08008528 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	4613      	mov	r3, r2
 8008536:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d107      	bne.n	8008556 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008546:	883b      	ldrh	r3, [r7, #0]
 8008548:	0419      	lsls	r1, r3, #16
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	430a      	orrs	r2, r1
 8008552:	629a      	str	r2, [r3, #40]	; 0x28
 8008554:	e028      	b.n	80085a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e00d      	b.n	8008586 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	3340      	adds	r3, #64	; 0x40
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	7bfa      	ldrb	r2, [r7, #15]
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	3b01      	subs	r3, #1
 800858c:	429a      	cmp	r2, r3
 800858e:	d3ec      	bcc.n	800856a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008590:	883b      	ldrh	r3, [r7, #0]
 8008592:	0418      	lsls	r0, r3, #16
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6819      	ldr	r1, [r3, #0]
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	3b01      	subs	r3, #1
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	4302      	orrs	r2, r0
 80085a0:	3340      	adds	r3, #64	; 0x40
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860a:	f043 0303 	orr.w	r3, r3, #3
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008624:	4b05      	ldr	r3, [pc, #20]	; (800863c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a04      	ldr	r2, [pc, #16]	; (800863c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800862a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800862e:	6013      	str	r3, [r2, #0]
}
 8008630:	bf00      	nop
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40007000 	.word	0x40007000

08008640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <HAL_PWREx_GetVoltageRange+0x18>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800864c:	4618      	mov	r0, r3
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40007000 	.word	0x40007000

0800865c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866a:	d130      	bne.n	80086ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800866c:	4b23      	ldr	r3, [pc, #140]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008678:	d038      	beq.n	80086ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800867a:	4b20      	ldr	r3, [pc, #128]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008682:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008688:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800868a:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2232      	movs	r2, #50	; 0x32
 8008690:	fb02 f303 	mul.w	r3, r2, r3
 8008694:	4a1b      	ldr	r2, [pc, #108]	; (8008704 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008696:	fba2 2303 	umull	r2, r3, r2, r3
 800869a:	0c9b      	lsrs	r3, r3, #18
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086a0:	e002      	b.n	80086a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086a8:	4b14      	ldr	r3, [pc, #80]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b4:	d102      	bne.n	80086bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f2      	bne.n	80086a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086bc:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c8:	d110      	bne.n	80086ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e00f      	b.n	80086ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086da:	d007      	beq.n	80086ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80086dc:	4b07      	ldr	r3, [pc, #28]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80086e4:	4a05      	ldr	r2, [pc, #20]	; (80086fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80086e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40007000 	.word	0x40007000
 8008700:	2000004c 	.word	0x2000004c
 8008704:	431bde83 	.word	0x431bde83

08008708 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <HAL_PWREx_EnableVddUSB+0x1c>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4a04      	ldr	r2, [pc, #16]	; (8008724 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008716:	6053      	str	r3, [r2, #4]
}
 8008718:	bf00      	nop
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40007000 	.word	0x40007000

08008728 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_PWREx_EnableVddIO2+0x1c>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4a04      	ldr	r2, [pc, #16]	; (8008744 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008736:	6053      	str	r3, [r2, #4]
}
 8008738:	bf00      	nop
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40007000 	.word	0x40007000

08008748 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af02      	add	r7, sp, #8
 800874e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008750:	f7fc fcbe 	bl	80050d0 <HAL_GetTick>
 8008754:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e075      	b.n	800884c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_QSPI_Init+0x28>
 800876c:	2302      	movs	r3, #2
 800876e:	e06d      	b.n	800884c <HAL_QSPI_Init+0x104>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fc f821 	bl	80047d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008792:	f241 3188 	movw	r1, #5000	; 0x1388
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f85e 	bl	8008858 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	021a      	lsls	r2, r3, #8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	2120      	movs	r1, #32
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f856 	bl	8008874 <QSPI_WaitFlagStateUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d137      	bne.n	8008842 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087dc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6852      	ldr	r2, [r2, #4]
 80087e4:	0611      	lsls	r1, r2, #24
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68d2      	ldr	r2, [r2, #12]
 80087ea:	4311      	orrs	r1, r2
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	69d2      	ldr	r2, [r2, #28]
 80087f0:	4311      	orrs	r1, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6a12      	ldr	r2, [r2, #32]
 80087f6:	4311      	orrs	r1, r2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	4b13      	ldr	r3, [pc, #76]	; (8008854 <HAL_QSPI_Init+0x10c>)
 8008808:	4013      	ands	r3, r2
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	6912      	ldr	r2, [r2, #16]
 800880e:	0411      	lsls	r1, r2, #16
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6952      	ldr	r2, [r2, #20]
 8008814:	4311      	orrs	r1, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6992      	ldr	r2, [r2, #24]
 800881a:	4311      	orrs	r1, r2
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6812      	ldr	r2, [r2, #0]
 8008820:	430b      	orrs	r3, r1
 8008822:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800884a:	7afb      	ldrb	r3, [r7, #11]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	ffe0f8fe 	.word	0xffe0f8fe

08008858 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008884:	e01a      	b.n	80088bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888c:	d016      	beq.n	80088bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888e:	f7fc fc1f 	bl	80050d0 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	429a      	cmp	r2, r3
 800889c:	d302      	bcc.n	80088a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b0:	f043 0201 	orr.w	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e00e      	b.n	80088da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	4013      	ands	r3, r2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf14      	ite	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	2300      	moveq	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d1d6      	bne.n	8008886 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f000 bc16 	b.w	8009124 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088f8:	4ba0      	ldr	r3, [pc, #640]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 030c 	and.w	r3, r3, #12
 8008900:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008902:	4b9e      	ldr	r3, [pc, #632]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80e4 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <HAL_RCC_OscConfig+0x4c>
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	2b0c      	cmp	r3, #12
 8008924:	f040 808b 	bne.w	8008a3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b01      	cmp	r3, #1
 800892c:	f040 8087 	bne.w	8008a3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008930:	4b92      	ldr	r3, [pc, #584]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_RCC_OscConfig+0x64>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e3ed      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	4b8b      	ldr	r3, [pc, #556]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <HAL_RCC_OscConfig+0x7e>
 8008958:	4b88      	ldr	r3, [pc, #544]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008960:	e005      	b.n	800896e <HAL_RCC_OscConfig+0x8a>
 8008962:	4b86      	ldr	r3, [pc, #536]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008968:	091b      	lsrs	r3, r3, #4
 800896a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800896e:	4293      	cmp	r3, r2
 8008970:	d223      	bcs.n	80089ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fdb0 	bl	80094dc <RCC_SetFlashLatencyFromMSIRange>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e3ce      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008986:	4b7d      	ldr	r3, [pc, #500]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a7c      	ldr	r2, [pc, #496]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 800898c:	f043 0308 	orr.w	r3, r3, #8
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	4b7a      	ldr	r3, [pc, #488]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	4977      	ldr	r1, [pc, #476]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089a4:	4b75      	ldr	r3, [pc, #468]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	4972      	ldr	r1, [pc, #456]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	604b      	str	r3, [r1, #4]
 80089b8:	e025      	b.n	8008a06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089ba:	4b70      	ldr	r3, [pc, #448]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a6f      	ldr	r2, [pc, #444]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089c0:	f043 0308 	orr.w	r3, r3, #8
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	4b6d      	ldr	r3, [pc, #436]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	496a      	ldr	r1, [pc, #424]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089d8:	4b68      	ldr	r3, [pc, #416]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	4965      	ldr	r1, [pc, #404]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fd70 	bl	80094dc <RCC_SetFlashLatencyFromMSIRange>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e38e      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a06:	f000 fc75 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	4b5b      	ldr	r3, [pc, #364]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	4a5a      	ldr	r2, [pc, #360]	; (8008b80 <HAL_RCC_OscConfig+0x29c>)
 8008a18:	5cd3      	ldrb	r3, [r2, r3]
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8008a22:	4a58      	ldr	r2, [pc, #352]	; (8008b84 <HAL_RCC_OscConfig+0x2a0>)
 8008a24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008a26:	4b58      	ldr	r3, [pc, #352]	; (8008b88 <HAL_RCC_OscConfig+0x2a4>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fc f8ea 	bl	8004c04 <HAL_InitTick>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d052      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	e372      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d032      	beq.n	8008aac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008a46:	4b4d      	ldr	r3, [pc, #308]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a4c      	ldr	r2, [pc, #304]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a4c:	f043 0301 	orr.w	r3, r3, #1
 8008a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a52:	f7fc fb3d 	bl	80050d0 <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a5a:	f7fc fb39 	bl	80050d0 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e35b      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a6c:	4b43      	ldr	r3, [pc, #268]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a78:	4b40      	ldr	r3, [pc, #256]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a3f      	ldr	r2, [pc, #252]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a7e:	f043 0308 	orr.w	r3, r3, #8
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4b3d      	ldr	r3, [pc, #244]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	493a      	ldr	r1, [pc, #232]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a96:	4b39      	ldr	r3, [pc, #228]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	4935      	ldr	r1, [pc, #212]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	604b      	str	r3, [r1, #4]
 8008aaa:	e01a      	b.n	8008ae2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a32      	ldr	r2, [pc, #200]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008ab2:	f023 0301 	bic.w	r3, r3, #1
 8008ab6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ab8:	f7fc fb0a 	bl	80050d0 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ac0:	f7fc fb06 	bl	80050d0 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e328      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008ad2:	4b2a      	ldr	r3, [pc, #168]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x1dc>
 8008ade:	e000      	b.n	8008ae2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ae0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d073      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d005      	beq.n	8008b00 <HAL_RCC_OscConfig+0x21c>
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	d10e      	bne.n	8008b18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d10b      	bne.n	8008b18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b00:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d063      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x2f0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d15f      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e305      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b20:	d106      	bne.n	8008b30 <HAL_RCC_OscConfig+0x24c>
 8008b22:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a15      	ldr	r2, [pc, #84]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e01d      	b.n	8008b6c <HAL_RCC_OscConfig+0x288>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x270>
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a0f      	ldr	r2, [pc, #60]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	e00b      	b.n	8008b6c <HAL_RCC_OscConfig+0x288>
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a05      	ldr	r2, [pc, #20]	; (8008b7c <HAL_RCC_OscConfig+0x298>)
 8008b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01b      	beq.n	8008bac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b74:	f7fc faac 	bl	80050d0 <HAL_GetTick>
 8008b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b7a:	e010      	b.n	8008b9e <HAL_RCC_OscConfig+0x2ba>
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	08016af8 	.word	0x08016af8
 8008b84:	2000004c 	.word	0x2000004c
 8008b88:	20000050 	.word	0x20000050
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b8c:	f7fc faa0 	bl	80050d0 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b64      	cmp	r3, #100	; 0x64
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e2c2      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b9e:	4baf      	ldr	r3, [pc, #700]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x2a8>
 8008baa:	e014      	b.n	8008bd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bac:	f7fc fa90 	bl	80050d0 <HAL_GetTick>
 8008bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bb4:	f7fc fa8c 	bl	80050d0 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b64      	cmp	r3, #100	; 0x64
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e2ae      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008bc6:	4ba5      	ldr	r3, [pc, #660]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x2d0>
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d060      	beq.n	8008ca4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d005      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x310>
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b0c      	cmp	r3, #12
 8008bec:	d119      	bne.n	8008c22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d116      	bne.n	8008c22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bf4:	4b99      	ldr	r3, [pc, #612]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <HAL_RCC_OscConfig+0x328>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e28b      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c0c:	4b93      	ldr	r3, [pc, #588]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	061b      	lsls	r3, r3, #24
 8008c1a:	4990      	ldr	r1, [pc, #576]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c20:	e040      	b.n	8008ca4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d023      	beq.n	8008c72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c2a:	4b8c      	ldr	r3, [pc, #560]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a8b      	ldr	r2, [pc, #556]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c36:	f7fc fa4b 	bl	80050d0 <HAL_GetTick>
 8008c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c3c:	e008      	b.n	8008c50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c3e:	f7fc fa47 	bl	80050d0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e269      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c50:	4b82      	ldr	r3, [pc, #520]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0f0      	beq.n	8008c3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c5c:	4b7f      	ldr	r3, [pc, #508]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	061b      	lsls	r3, r3, #24
 8008c6a:	497c      	ldr	r1, [pc, #496]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	604b      	str	r3, [r1, #4]
 8008c70:	e018      	b.n	8008ca4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c72:	4b7a      	ldr	r3, [pc, #488]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a79      	ldr	r2, [pc, #484]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c7e:	f7fc fa27 	bl	80050d0 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c84:	e008      	b.n	8008c98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c86:	f7fc fa23 	bl	80050d0 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e245      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c98:	4b70      	ldr	r3, [pc, #448]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1f0      	bne.n	8008c86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d03c      	beq.n	8008d2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01c      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cb8:	4b68      	ldr	r3, [pc, #416]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cbe:	4a67      	ldr	r2, [pc, #412]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008cc0:	f043 0301 	orr.w	r3, r3, #1
 8008cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc8:	f7fc fa02 	bl	80050d0 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cd0:	f7fc f9fe 	bl	80050d0 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e220      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ce2:	4b5e      	ldr	r3, [pc, #376]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0ef      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x3ec>
 8008cf0:	e01b      	b.n	8008d2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cf2:	4b5a      	ldr	r3, [pc, #360]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf8:	4a58      	ldr	r2, [pc, #352]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008cfa:	f023 0301 	bic.w	r3, r3, #1
 8008cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d02:	f7fc f9e5 	bl	80050d0 <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d0a:	f7fc f9e1 	bl	80050d0 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e203      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d1c:	4b4f      	ldr	r3, [pc, #316]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1ef      	bne.n	8008d0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a6 	beq.w	8008e84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008d3c:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10d      	bne.n	8008d64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d48:	4b44      	ldr	r3, [pc, #272]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4c:	4a43      	ldr	r2, [pc, #268]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d52:	6593      	str	r3, [r2, #88]	; 0x58
 8008d54:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	60bb      	str	r3, [r7, #8]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d60:	2301      	movs	r3, #1
 8008d62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d64:	4b3e      	ldr	r3, [pc, #248]	; (8008e60 <HAL_RCC_OscConfig+0x57c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d118      	bne.n	8008da2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d70:	4b3b      	ldr	r3, [pc, #236]	; (8008e60 <HAL_RCC_OscConfig+0x57c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a3a      	ldr	r2, [pc, #232]	; (8008e60 <HAL_RCC_OscConfig+0x57c>)
 8008d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d7c:	f7fc f9a8 	bl	80050d0 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d84:	f7fc f9a4 	bl	80050d0 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e1c6      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d96:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <HAL_RCC_OscConfig+0x57c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f0      	beq.n	8008d84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d108      	bne.n	8008dbc <HAL_RCC_OscConfig+0x4d8>
 8008daa:	4b2c      	ldr	r3, [pc, #176]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db0:	4a2a      	ldr	r2, [pc, #168]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008dba:	e024      	b.n	8008e06 <HAL_RCC_OscConfig+0x522>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b05      	cmp	r3, #5
 8008dc2:	d110      	bne.n	8008de6 <HAL_RCC_OscConfig+0x502>
 8008dc4:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dca:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dcc:	f043 0304 	orr.w	r3, r3, #4
 8008dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008dd4:	4b21      	ldr	r3, [pc, #132]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dda:	4a20      	ldr	r2, [pc, #128]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008de4:	e00f      	b.n	8008e06 <HAL_RCC_OscConfig+0x522>
 8008de6:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dec:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008dfe:	f023 0304 	bic.w	r3, r3, #4
 8008e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0e:	f7fc f95f 	bl	80050d0 <HAL_GetTick>
 8008e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e14:	e00a      	b.n	8008e2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e16:	f7fc f95b 	bl	80050d0 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d901      	bls.n	8008e2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e17b      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <HAL_RCC_OscConfig+0x578>)
 8008e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0ed      	beq.n	8008e16 <HAL_RCC_OscConfig+0x532>
 8008e3a:	e01a      	b.n	8008e72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3c:	f7fc f948 	bl	80050d0 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e42:	e00f      	b.n	8008e64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e44:	f7fc f944 	bl	80050d0 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d906      	bls.n	8008e64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e164      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
 8008e5a:	bf00      	nop
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e64:	4ba8      	ldr	r3, [pc, #672]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e8      	bne.n	8008e44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e72:	7ffb      	ldrb	r3, [r7, #31]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d105      	bne.n	8008e84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e78:	4ba3      	ldr	r3, [pc, #652]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7c:	4aa2      	ldr	r2, [pc, #648]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d03c      	beq.n	8008f0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01c      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e98:	4b9b      	ldr	r3, [pc, #620]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e9e:	4a9a      	ldr	r2, [pc, #616]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea8:	f7fc f912 	bl	80050d0 <HAL_GetTick>
 8008eac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eb0:	f7fc f90e 	bl	80050d0 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e130      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ec2:	4b91      	ldr	r3, [pc, #580]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0ef      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x5cc>
 8008ed0:	e01b      	b.n	8008f0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ed2:	4b8d      	ldr	r3, [pc, #564]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ed8:	4a8b      	ldr	r2, [pc, #556]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008eda:	f023 0301 	bic.w	r3, r3, #1
 8008ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ee2:	f7fc f8f5 	bl	80050d0 <HAL_GetTick>
 8008ee6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ee8:	e008      	b.n	8008efc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eea:	f7fc f8f1 	bl	80050d0 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e113      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008efc:	4b82      	ldr	r3, [pc, #520]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ef      	bne.n	8008eea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8107 	beq.w	8009122 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f040 80cb 	bne.w	80090b4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008f1e:	4b7a      	ldr	r3, [pc, #488]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f003 0203 	and.w	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d12c      	bne.n	8008f8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d123      	bne.n	8008f8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d11b      	bne.n	8008f8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d113      	bne.n	8008f8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6e:	085b      	lsrs	r3, r3, #1
 8008f70:	3b01      	subs	r3, #1
 8008f72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d109      	bne.n	8008f8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	3b01      	subs	r3, #1
 8008f86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d06d      	beq.n	8009068 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2b0c      	cmp	r3, #12
 8008f90:	d068      	beq.n	8009064 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008f92:	4b5d      	ldr	r3, [pc, #372]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008f9e:	4b5a      	ldr	r3, [pc, #360]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e0ba      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008fae:	4b56      	ldr	r3, [pc, #344]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a55      	ldr	r2, [pc, #340]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008fba:	f7fc f889 	bl	80050d0 <HAL_GetTick>
 8008fbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fc2:	f7fc f885 	bl	80050d0 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e0a7      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fd4:	4b4c      	ldr	r3, [pc, #304]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f0      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fe0:	4b49      	ldr	r3, [pc, #292]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	4b49      	ldr	r3, [pc, #292]	; (800910c <HAL_RCC_OscConfig+0x828>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ff0:	3a01      	subs	r2, #1
 8008ff2:	0112      	lsls	r2, r2, #4
 8008ff4:	4311      	orrs	r1, r2
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ffa:	0212      	lsls	r2, r2, #8
 8008ffc:	4311      	orrs	r1, r2
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009002:	0852      	lsrs	r2, r2, #1
 8009004:	3a01      	subs	r2, #1
 8009006:	0552      	lsls	r2, r2, #21
 8009008:	4311      	orrs	r1, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800900e:	0852      	lsrs	r2, r2, #1
 8009010:	3a01      	subs	r2, #1
 8009012:	0652      	lsls	r2, r2, #25
 8009014:	4311      	orrs	r1, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800901a:	06d2      	lsls	r2, r2, #27
 800901c:	430a      	orrs	r2, r1
 800901e:	493a      	ldr	r1, [pc, #232]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009020:	4313      	orrs	r3, r2
 8009022:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009024:	4b38      	ldr	r3, [pc, #224]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a37      	ldr	r2, [pc, #220]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 800902a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800902e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009030:	4b35      	ldr	r3, [pc, #212]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	4a34      	ldr	r2, [pc, #208]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800903a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800903c:	f7fc f848 	bl	80050d0 <HAL_GetTick>
 8009040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009042:	e008      	b.n	8009056 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009044:	f7fc f844 	bl	80050d0 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e066      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009056:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d0f0      	beq.n	8009044 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009062:	e05e      	b.n	8009122 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e05d      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009068:	4b27      	ldr	r3, [pc, #156]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d156      	bne.n	8009122 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a23      	ldr	r2, [pc, #140]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 800907a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800907e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009080:	4b21      	ldr	r3, [pc, #132]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4a20      	ldr	r2, [pc, #128]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 8009086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800908a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800908c:	f7fc f820 	bl	80050d0 <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009092:	e008      	b.n	80090a6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009094:	f7fc f81c 	bl	80050d0 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e03e      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090a6:	4b18      	ldr	r3, [pc, #96]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0f0      	beq.n	8009094 <HAL_RCC_OscConfig+0x7b0>
 80090b2:	e036      	b.n	8009122 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b0c      	cmp	r3, #12
 80090b8:	d031      	beq.n	800911e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ba:	4b13      	ldr	r3, [pc, #76]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a12      	ldr	r2, [pc, #72]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090d8:	f023 0303 	bic.w	r3, r3, #3
 80090dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4a09      	ldr	r2, [pc, #36]	; (8009108 <HAL_RCC_OscConfig+0x824>)
 80090e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80090e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ee:	f7fb ffef 	bl	80050d0 <HAL_GetTick>
 80090f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090f4:	e00c      	b.n	8009110 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090f6:	f7fb ffeb 	bl	80050d0 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d905      	bls.n	8009110 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e00d      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
 8009108:	40021000 	.word	0x40021000
 800910c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <HAL_RCC_OscConfig+0x848>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1ec      	bne.n	80090f6 <HAL_RCC_OscConfig+0x812>
 800911c:	e001      	b.n	8009122 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3720      	adds	r7, #32
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40021000 	.word	0x40021000

08009130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e0c8      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009144:	4b66      	ldr	r3, [pc, #408]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d910      	bls.n	8009174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009152:	4b63      	ldr	r3, [pc, #396]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f023 0207 	bic.w	r2, r3, #7
 800915a:	4961      	ldr	r1, [pc, #388]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	4313      	orrs	r3, r2
 8009160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b5f      	ldr	r3, [pc, #380]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e0b0      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d04c      	beq.n	800921a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d107      	bne.n	8009198 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009188:	4b56      	ldr	r3, [pc, #344]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d121      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e09e      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d107      	bne.n	80091b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80091a0:	4b50      	ldr	r3, [pc, #320]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d115      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e092      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d107      	bne.n	80091c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80091b8:	4b4a      	ldr	r3, [pc, #296]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d109      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e086      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091c8:	4b46      	ldr	r3, [pc, #280]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e07e      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091d8:	4b42      	ldr	r3, [pc, #264]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f023 0203 	bic.w	r2, r3, #3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	493f      	ldr	r1, [pc, #252]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091ea:	f7fb ff71 	bl	80050d0 <HAL_GetTick>
 80091ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091f0:	e00a      	b.n	8009208 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f2:	f7fb ff6d 	bl	80050d0 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009200:	4293      	cmp	r3, r2
 8009202:	d901      	bls.n	8009208 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e066      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 020c 	and.w	r2, r3, #12
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	429a      	cmp	r2, r3
 8009218:	d1eb      	bne.n	80091f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d008      	beq.n	8009238 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009226:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	492c      	ldr	r1, [pc, #176]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009234:	4313      	orrs	r3, r2
 8009236:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009238:	4b29      	ldr	r3, [pc, #164]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d210      	bcs.n	8009268 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009246:	4b26      	ldr	r3, [pc, #152]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f023 0207 	bic.w	r2, r3, #7
 800924e:	4924      	ldr	r1, [pc, #144]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	4313      	orrs	r3, r2
 8009254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009256:	4b22      	ldr	r3, [pc, #136]	; (80092e0 <HAL_RCC_ClockConfig+0x1b0>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d001      	beq.n	8009268 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e036      	b.n	80092d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d008      	beq.n	8009286 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	4918      	ldr	r1, [pc, #96]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009282:	4313      	orrs	r3, r2
 8009284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0308 	and.w	r3, r3, #8
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009292:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4910      	ldr	r1, [pc, #64]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092a6:	f000 f825 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 80092aa:	4601      	mov	r1, r0
 80092ac:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <HAL_RCC_ClockConfig+0x1b4>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	091b      	lsrs	r3, r3, #4
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <HAL_RCC_ClockConfig+0x1b8>)
 80092b8:	5cd3      	ldrb	r3, [r2, r3]
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	fa21 f303 	lsr.w	r3, r1, r3
 80092c2:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <HAL_RCC_ClockConfig+0x1bc>)
 80092c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <HAL_RCC_ClockConfig+0x1c0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fb fc9a 	bl	8004c04 <HAL_InitTick>
 80092d0:	4603      	mov	r3, r0
 80092d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40022000 	.word	0x40022000
 80092e4:	40021000 	.word	0x40021000
 80092e8:	08016af8 	.word	0x08016af8
 80092ec:	2000004c 	.word	0x2000004c
 80092f0:	20000050 	.word	0x20000050

080092f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b089      	sub	sp, #36	; 0x24
 80092f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	2300      	movs	r3, #0
 8009300:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009302:	4b3d      	ldr	r3, [pc, #244]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f003 030c 	and.w	r3, r3, #12
 800930a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800930c:	4b3a      	ldr	r3, [pc, #232]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <HAL_RCC_GetSysClockFreq+0x34>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2b0c      	cmp	r3, #12
 8009320:	d121      	bne.n	8009366 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d11e      	bne.n	8009366 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009328:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d107      	bne.n	8009344 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009334:	4b30      	ldr	r3, [pc, #192]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800933a:	0a1b      	lsrs	r3, r3, #8
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	e005      	b.n	8009350 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009344:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009350:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <HAL_RCC_GetSysClockFreq+0x108>)
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009358:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10d      	bne.n	800937c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009364:	e00a      	b.n	800937c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b04      	cmp	r3, #4
 800936a:	d102      	bne.n	8009372 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800936c:	4b24      	ldr	r3, [pc, #144]	; (8009400 <HAL_RCC_GetSysClockFreq+0x10c>)
 800936e:	61bb      	str	r3, [r7, #24]
 8009370:	e004      	b.n	800937c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b08      	cmp	r3, #8
 8009376:	d101      	bne.n	800937c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009378:	4b22      	ldr	r3, [pc, #136]	; (8009404 <HAL_RCC_GetSysClockFreq+0x110>)
 800937a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b0c      	cmp	r3, #12
 8009380:	d133      	bne.n	80093ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009382:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d002      	beq.n	8009398 <HAL_RCC_GetSysClockFreq+0xa4>
 8009392:	2b03      	cmp	r3, #3
 8009394:	d003      	beq.n	800939e <HAL_RCC_GetSysClockFreq+0xaa>
 8009396:	e005      	b.n	80093a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <HAL_RCC_GetSysClockFreq+0x10c>)
 800939a:	617b      	str	r3, [r7, #20]
      break;
 800939c:	e005      	b.n	80093aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <HAL_RCC_GetSysClockFreq+0x110>)
 80093a0:	617b      	str	r3, [r7, #20]
      break;
 80093a2:	e002      	b.n	80093aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	617b      	str	r3, [r7, #20]
      break;
 80093a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	091b      	lsrs	r3, r3, #4
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	3301      	adds	r3, #1
 80093b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80093b8:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	0a1b      	lsrs	r3, r3, #8
 80093be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	fb02 f203 	mul.w	r2, r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093d0:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	0e5b      	lsrs	r3, r3, #25
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	3301      	adds	r3, #1
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80093ea:	69bb      	ldr	r3, [r7, #24]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3724      	adds	r7, #36	; 0x24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	40021000 	.word	0x40021000
 80093fc:	08016b10 	.word	0x08016b10
 8009400:	00f42400 	.word	0x00f42400
 8009404:	007a1200 	.word	0x007a1200

08009408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800940c:	4b03      	ldr	r3, [pc, #12]	; (800941c <HAL_RCC_GetHCLKFreq+0x14>)
 800940e:	681b      	ldr	r3, [r3, #0]
}
 8009410:	4618      	mov	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	2000004c 	.word	0x2000004c

08009420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009424:	f7ff fff0 	bl	8009408 <HAL_RCC_GetHCLKFreq>
 8009428:	4601      	mov	r1, r0
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	4a04      	ldr	r2, [pc, #16]	; (8009448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009436:	5cd3      	ldrb	r3, [r2, r3]
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009440:	4618      	mov	r0, r3
 8009442:	bd80      	pop	{r7, pc}
 8009444:	40021000 	.word	0x40021000
 8009448:	08016b08 	.word	0x08016b08

0800944c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009450:	f7ff ffda 	bl	8009408 <HAL_RCC_GetHCLKFreq>
 8009454:	4601      	mov	r1, r0
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	0adb      	lsrs	r3, r3, #11
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	4a04      	ldr	r2, [pc, #16]	; (8009474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009462:	5cd3      	ldrb	r3, [r2, r3]
 8009464:	f003 031f 	and.w	r3, r3, #31
 8009468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40021000 	.word	0x40021000
 8009474:	08016b08 	.word	0x08016b08

08009478 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	220f      	movs	r2, #15
 8009486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009488:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <HAL_RCC_GetClockConfig+0x5c>)
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f003 0203 	and.w	r2, r3, #3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009494:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <HAL_RCC_GetClockConfig+0x5c>)
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <HAL_RCC_GetClockConfig+0x5c>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <HAL_RCC_GetClockConfig+0x5c>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	08db      	lsrs	r3, r3, #3
 80094b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <HAL_RCC_GetClockConfig+0x60>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0207 	and.w	r2, r3, #7
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	601a      	str	r2, [r3, #0]
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40021000 	.word	0x40021000
 80094d8:	40022000 	.word	0x40022000

080094dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80094e4:	2300      	movs	r3, #0
 80094e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80094e8:	4b2a      	ldr	r3, [pc, #168]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80094ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80094f4:	f7ff f8a4 	bl	8008640 <HAL_PWREx_GetVoltageRange>
 80094f8:	6178      	str	r0, [r7, #20]
 80094fa:	e014      	b.n	8009526 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80094fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009500:	4a24      	ldr	r2, [pc, #144]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009506:	6593      	str	r3, [r2, #88]	; 0x58
 8009508:	4b22      	ldr	r3, [pc, #136]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800950a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009514:	f7ff f894 	bl	8008640 <HAL_PWREx_GetVoltageRange>
 8009518:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800951a:	4b1e      	ldr	r3, [pc, #120]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800951c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951e:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009524:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800952c:	d10b      	bne.n	8009546 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b80      	cmp	r3, #128	; 0x80
 8009532:	d919      	bls.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2ba0      	cmp	r3, #160	; 0xa0
 8009538:	d902      	bls.n	8009540 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800953a:	2302      	movs	r3, #2
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e013      	b.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009540:	2301      	movs	r3, #1
 8009542:	613b      	str	r3, [r7, #16]
 8009544:	e010      	b.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b80      	cmp	r3, #128	; 0x80
 800954a:	d902      	bls.n	8009552 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800954c:	2303      	movs	r3, #3
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	e00a      	b.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b80      	cmp	r3, #128	; 0x80
 8009556:	d102      	bne.n	800955e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009558:	2302      	movs	r3, #2
 800955a:	613b      	str	r3, [r7, #16]
 800955c:	e004      	b.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b70      	cmp	r3, #112	; 0x70
 8009562:	d101      	bne.n	8009568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009564:	2301      	movs	r3, #1
 8009566:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f023 0207 	bic.w	r2, r3, #7
 8009570:	4909      	ldr	r1, [pc, #36]	; (8009598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	429a      	cmp	r2, r3
 8009584:	d001      	beq.n	800958a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40021000 	.word	0x40021000
 8009598:	40022000 	.word	0x40022000

0800959c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80095a4:	2300      	movs	r3, #0
 80095a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80095a8:	2300      	movs	r3, #0
 80095aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d03f      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c0:	d01c      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80095c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c6:	d802      	bhi.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00e      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80095cc:	e01f      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80095ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095d2:	d003      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80095d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095d8:	d01c      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80095da:	e018      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80095dc:	4b85      	ldr	r3, [pc, #532]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	4a84      	ldr	r2, [pc, #528]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80095e8:	e015      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 ffa1 	bl	800a538 <RCCEx_PLLSAI1_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80095fa:	e00c      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3320      	adds	r3, #32
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f888 	bl	800a718 <RCCEx_PLLSAI2_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	74fb      	strb	r3, [r7, #19]
      break;
 8009612:	e000      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009616:	7cfb      	ldrb	r3, [r7, #19]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800961c:	4b75      	ldr	r3, [pc, #468]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800962a:	4972      	ldr	r1, [pc, #456]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800962c:	4313      	orrs	r3, r2
 800962e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009632:	e001      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009634:	7cfb      	ldrb	r3, [r7, #19]
 8009636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d03f      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800964c:	d01c      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800964e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009652:	d802      	bhi.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00e      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009658:	e01f      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800965a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009660:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009664:	d01c      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8009666:	e018      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009668:	4b62      	ldr	r3, [pc, #392]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	4a61      	ldr	r2, [pc, #388]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800966e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009672:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009674:	e015      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3304      	adds	r3, #4
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f000 ff5b 	bl	800a538 <RCCEx_PLLSAI1_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009686:	e00c      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3320      	adds	r3, #32
 800968c:	2100      	movs	r1, #0
 800968e:	4618      	mov	r0, r3
 8009690:	f001 f842 	bl	800a718 <RCCEx_PLLSAI2_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	74fb      	strb	r3, [r7, #19]
      break;
 800969e:	e000      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80096a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a2:	7cfb      	ldrb	r3, [r7, #19]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10b      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80096a8:	4b52      	ldr	r3, [pc, #328]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b6:	494f      	ldr	r1, [pc, #316]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80096be:	e001      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c0:	7cfb      	ldrb	r3, [r7, #19]
 80096c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 80a0 	beq.w	8009812 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096d2:	2300      	movs	r3, #0
 80096d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80096d6:	4b47      	ldr	r3, [pc, #284]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ec:	4b41      	ldr	r3, [pc, #260]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	4a40      	ldr	r2, [pc, #256]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096f6:	6593      	str	r3, [r2, #88]	; 0x58
 80096f8:	4b3e      	ldr	r3, [pc, #248]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80096fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009700:	60bb      	str	r3, [r7, #8]
 8009702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009704:	2301      	movs	r3, #1
 8009706:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009708:	4b3b      	ldr	r3, [pc, #236]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a3a      	ldr	r2, [pc, #232]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800970e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009714:	f7fb fcdc 	bl	80050d0 <HAL_GetTick>
 8009718:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800971a:	e009      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800971c:	f7fb fcd8 	bl	80050d0 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d902      	bls.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	74fb      	strb	r3, [r7, #19]
        break;
 800972e:	e005      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009730:	4b31      	ldr	r3, [pc, #196]	; (80097f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0ef      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800973c:	7cfb      	ldrb	r3, [r7, #19]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d15c      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009742:	4b2c      	ldr	r3, [pc, #176]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800974c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	429a      	cmp	r2, r3
 800975e:	d019      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009760:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800976a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800976c:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009772:	4a20      	ldr	r2, [pc, #128]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800977c:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009782:	4a1c      	ldr	r2, [pc, #112]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800978c:	4a19      	ldr	r2, [pc, #100]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d016      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800979e:	f7fb fc97 	bl	80050d0 <HAL_GetTick>
 80097a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a4:	e00b      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a6:	f7fb fc93 	bl	80050d0 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d902      	bls.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	74fb      	strb	r3, [r7, #19]
            break;
 80097bc:	e006      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80097c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0ec      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10c      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097d2:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80097d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e2:	4904      	ldr	r1, [pc, #16]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80097ea:	e009      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ec:	7cfb      	ldrb	r3, [r7, #19]
 80097ee:	74bb      	strb	r3, [r7, #18]
 80097f0:	e006      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80097f2:	bf00      	nop
 80097f4:	40021000 	.word	0x40021000
 80097f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fc:	7cfb      	ldrb	r3, [r7, #19]
 80097fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009800:	7c7b      	ldrb	r3, [r7, #17]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d105      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009806:	4ba6      	ldr	r3, [pc, #664]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980a:	4aa5      	ldr	r2, [pc, #660]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800980c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800981e:	4ba0      	ldr	r3, [pc, #640]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009824:	f023 0203 	bic.w	r2, r3, #3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	499c      	ldr	r1, [pc, #624]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800982e:	4313      	orrs	r3, r2
 8009830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009840:	4b97      	ldr	r3, [pc, #604]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009846:	f023 020c 	bic.w	r2, r3, #12
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	4994      	ldr	r1, [pc, #592]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009850:	4313      	orrs	r3, r2
 8009852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00a      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009862:	4b8f      	ldr	r3, [pc, #572]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	498b      	ldr	r1, [pc, #556]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0308 	and.w	r3, r3, #8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009884:	4b86      	ldr	r3, [pc, #536]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009892:	4983      	ldr	r1, [pc, #524]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009894:	4313      	orrs	r3, r2
 8009896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0310 	and.w	r3, r3, #16
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80098a6:	4b7e      	ldr	r3, [pc, #504]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098b4:	497a      	ldr	r1, [pc, #488]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00a      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098c8:	4b75      	ldr	r3, [pc, #468]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d6:	4972      	ldr	r1, [pc, #456]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098ea:	4b6d      	ldr	r3, [pc, #436]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f8:	4969      	ldr	r1, [pc, #420]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800990c:	4b64      	ldr	r3, [pc, #400]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991a:	4961      	ldr	r1, [pc, #388]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800991c:	4313      	orrs	r3, r2
 800991e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800992e:	4b5c      	ldr	r3, [pc, #368]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993c:	4958      	ldr	r1, [pc, #352]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800993e:	4313      	orrs	r3, r2
 8009940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009950:	4b53      	ldr	r3, [pc, #332]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009956:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995e:	4950      	ldr	r1, [pc, #320]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009960:	4313      	orrs	r3, r2
 8009962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009972:	4b4b      	ldr	r3, [pc, #300]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009980:	4947      	ldr	r1, [pc, #284]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009994:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800999a:	f023 0203 	bic.w	r2, r3, #3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a2:	493f      	ldr	r1, [pc, #252]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d028      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099b6:	4b3a      	ldr	r3, [pc, #232]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c4:	4936      	ldr	r1, [pc, #216]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099d4:	d106      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099d6:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	4a31      	ldr	r2, [pc, #196]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80099dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099e0:	60d3      	str	r3, [r2, #12]
 80099e2:	e011      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099ec:	d10c      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3304      	adds	r3, #4
 80099f2:	2101      	movs	r1, #1
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fd9f 	bl	800a538 <RCCEx_PLLSAI1_Config>
 80099fa:	4603      	mov	r3, r0
 80099fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80099fe:	7cfb      	ldrb	r3, [r7, #19]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8009a04:	7cfb      	ldrb	r3, [r7, #19]
 8009a06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d028      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a14:	4b22      	ldr	r3, [pc, #136]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a22:	491f      	ldr	r1, [pc, #124]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a32:	d106      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a34:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	4a19      	ldr	r2, [pc, #100]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3e:	60d3      	str	r3, [r2, #12]
 8009a40:	e011      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a4a:	d10c      	bne.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	2101      	movs	r1, #1
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 fd70 	bl	800a538 <RCCEx_PLLSAI1_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009a5c:	7cfb      	ldrb	r3, [r7, #19]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8009a62:	7cfb      	ldrb	r3, [r7, #19]
 8009a64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d02a      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a72:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a80:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a90:	d108      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a92:	4b03      	ldr	r3, [pc, #12]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	4a02      	ldr	r2, [pc, #8]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a9c:	60d3      	str	r3, [r2, #12]
 8009a9e:	e013      	b.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fd3f 	bl	800a538 <RCCEx_PLLSAI1_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009abe:	7cfb      	ldrb	r3, [r7, #19]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8009ac4:	7cfb      	ldrb	r3, [r7, #19]
 8009ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d02f      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ada:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae2:	4929      	ldr	r1, [pc, #164]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009af2:	d10d      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	2102      	movs	r1, #2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fd1c 	bl	800a538 <RCCEx_PLLSAI1_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b04:	7cfb      	ldrb	r3, [r7, #19]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d014      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009b0a:	7cfb      	ldrb	r3, [r7, #19]
 8009b0c:	74bb      	strb	r3, [r7, #18]
 8009b0e:	e011      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3320      	adds	r3, #32
 8009b1e:	2102      	movs	r1, #2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fdf9 	bl	800a718 <RCCEx_PLLSAI2_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b2a:	7cfb      	ldrb	r3, [r7, #19]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009b30:	7cfb      	ldrb	r3, [r7, #19]
 8009b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b40:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b50:	490d      	ldr	r1, [pc, #52]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b64:	4b08      	ldr	r3, [pc, #32]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b74:	4904      	ldr	r1, [pc, #16]	; (8009b88 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009b7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	40021000 	.word	0x40021000

08009b8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b9e:	d137      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009ba0:	4ba9      	ldr	r3, [pc, #676]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009baa:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb2:	d014      	beq.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bb8:	d01e      	beq.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8009bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bbe:	d001      	beq.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009bc0:	f000 bca0 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009bc4:	4ba0      	ldr	r3, [pc, #640]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	f040 8493 	bne.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 8009bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd8:	61fb      	str	r3, [r7, #28]
      break;
 8009bda:	f000 bc8e 	b.w	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009bde:	4b9a      	ldr	r3, [pc, #616]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	f040 8488 	bne.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 8009bee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009bf2:	61fb      	str	r3, [r7, #28]
      break;
 8009bf4:	f000 bc83 	b.w	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bf8:	4b93      	ldr	r3, [pc, #588]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c04:	f040 847d 	bne.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8009c08:	4b90      	ldr	r3, [pc, #576]	; (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c0a:	61fb      	str	r3, [r7, #28]
      break;
 8009c0c:	f000 bc79 	b.w	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c10:	4b8d      	ldr	r3, [pc, #564]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d023      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d02e      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d139      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009c28:	4b87      	ldr	r3, [pc, #540]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d116      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009c34:	4b84      	ldr	r3, [pc, #528]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8009c40:	4b81      	ldr	r3, [pc, #516]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	091b      	lsrs	r3, r3, #4
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	e005      	b.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8009c4c:	4b7e      	ldr	r3, [pc, #504]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c52:	0a1b      	lsrs	r3, r3, #8
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	4a7d      	ldr	r2, [pc, #500]	; (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009c60:	e01f      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61bb      	str	r3, [r7, #24]
      break;
 8009c66:	e01c      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c68:	4b77      	ldr	r3, [pc, #476]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c74:	d102      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8009c76:	4b77      	ldr	r3, [pc, #476]	; (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009c78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009c7a:	e012      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61bb      	str	r3, [r7, #24]
      break;
 8009c80:	e00f      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c82:	4b71      	ldr	r3, [pc, #452]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c8e:	d102      	bne.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8009c90:	4b71      	ldr	r3, [pc, #452]	; (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c92:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009c94:	e005      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61bb      	str	r3, [r7, #24]
      break;
 8009c9a:	e002      	b.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61bb      	str	r3, [r7, #24]
      break;
 8009ca0:	bf00      	nop
    }

    switch(PeriphClk)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca8:	f000 8384 	beq.w	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb0:	d828      	bhi.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	f000 81fb 	beq.w	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009cb8:	2b10      	cmp	r3, #16
 8009cba:	d811      	bhi.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	f000 8144 	beq.w	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d804      	bhi.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	f000 8107 	beq.w	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009ccc:	f000 bc1a 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	f000 8184 	beq.w	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	f000 81b5 	beq.w	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 8009cdc:	f000 bc12 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	f000 82dd 	beq.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d804      	bhi.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	f000 821e 	beq.w	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 8009cf0:	f000 bc08 	b.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	f000 82f6 	beq.w	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8009cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfe:	f000 8315 	beq.w	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 8009d02:	e3ff      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d08:	f000 8248 	beq.w	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8009d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d10:	d811      	bhi.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d16:	d025      	beq.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1c:	d804      	bhi.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8009d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d22:	f000 838d 	beq.w	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 8009d26:	e3ed      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2c:	d021      	beq.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d32:	d025      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 8009d34:	e3e6      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009d36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d3a:	d021      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d40:	d808      	bhi.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8009d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d46:	f000 83bc 	beq.w	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8009d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d4e:	f000 8296 	beq.w	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 8009d52:	e3d7      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8009d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d58:	d012      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8009d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d5e:	f000 8308 	beq.w	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 8009d62:	e3cf      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009d64:	69b9      	ldr	r1, [r7, #24]
 8009d66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009d6a:	f000 fdaf 	bl	800a8cc <RCCEx_GetSAIxPeriphCLKFreq>
 8009d6e:	61f8      	str	r0, [r7, #28]
      break;
 8009d70:	e3c8      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009d72:	69b9      	ldr	r1, [r7, #24]
 8009d74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009d78:	f000 fda8 	bl	800a8cc <RCCEx_GetSAIxPeriphCLKFreq>
 8009d7c:	61f8      	str	r0, [r7, #28]
      break;
 8009d7e:	e3c1      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009d80:	4b31      	ldr	r3, [pc, #196]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009d8a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d92:	d063      	beq.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8009d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d98:	d803      	bhi.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 808b 	beq.w	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 8009da0:	e09a      	b.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 8009da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009da6:	d021      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009da8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009dac:	d000      	beq.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 8009dae:	e093      	b.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009db0:	4b25      	ldr	r3, [pc, #148]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	f040 8086 	bne.w	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009dbe:	4b22      	ldr	r3, [pc, #136]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0308 	and.w	r3, r3, #8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8009dca:	4b1f      	ldr	r3, [pc, #124]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	091b      	lsrs	r3, r3, #4
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	e005      	b.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	4a1b      	ldr	r2, [pc, #108]	; (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de8:	61fb      	str	r3, [r7, #28]
          break;
 8009dea:	e06e      	b.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009dec:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009df8:	d169      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009dfa:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e06:	d162      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009e08:	4b0f      	ldr	r3, [pc, #60]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	0a1b      	lsrs	r3, r3, #8
 8009e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e12:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	fb02 f203 	mul.w	r2, r2, r3
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	091b      	lsrs	r3, r3, #4
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	3301      	adds	r3, #1
 8009e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	0d5b      	lsrs	r3, r3, #21
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	3301      	adds	r3, #1
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e42:	61fb      	str	r3, [r7, #28]
          break;
 8009e44:	e043      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009e46:	bf00      	nop
 8009e48:	40021000 	.word	0x40021000
 8009e4c:	0003d090 	.word	0x0003d090
 8009e50:	08016b10 	.word	0x08016b10
 8009e54:	00f42400 	.word	0x00f42400
 8009e58:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009e5c:	4bb0      	ldr	r3, [pc, #704]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e68:	d133      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009e6a:	4bad      	ldr	r3, [pc, #692]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e76:	d12c      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009e78:	4ba9      	ldr	r3, [pc, #676]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	0a1b      	lsrs	r3, r3, #8
 8009e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e82:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	fb02 f203 	mul.w	r2, r2, r3
 8009e8c:	4ba4      	ldr	r3, [pc, #656]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	3301      	adds	r3, #1
 8009e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009e9e:	4ba0      	ldr	r3, [pc, #640]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	0d5b      	lsrs	r3, r3, #21
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb2:	61fb      	str	r3, [r7, #28]
          break;
 8009eb4:	e00d      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009eb6:	4b9a      	ldr	r3, [pc, #616]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d108      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 8009ec4:	4b97      	ldr	r3, [pc, #604]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009ec6:	61fb      	str	r3, [r7, #28]
          break;
 8009ec8:	e005      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 8009eca:	bf00      	nop
 8009ecc:	e31a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009ece:	bf00      	nop
 8009ed0:	e318      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009ed2:	bf00      	nop
 8009ed4:	e316      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009ed6:	bf00      	nop
        break;
 8009ed8:	e314      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009eda:	4b91      	ldr	r3, [pc, #580]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	f003 0303 	and.w	r3, r3, #3
 8009ee4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d828      	bhi.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f15 	.word	0x08009f15
 8009f00:	08009f29 	.word	0x08009f29
          frequency = HAL_RCC_GetPCLK2Freq();
 8009f04:	f7ff faa2 	bl	800944c <HAL_RCC_GetPCLK2Freq>
 8009f08:	61f8      	str	r0, [r7, #28]
          break;
 8009f0a:	e01d      	b.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f0c:	f7ff f9f2 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 8009f10:	61f8      	str	r0, [r7, #28]
          break;
 8009f12:	e019      	b.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f14:	4b82      	ldr	r3, [pc, #520]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f20:	d10f      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 8009f22:	4b81      	ldr	r3, [pc, #516]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009f24:	61fb      	str	r3, [r7, #28]
          break;
 8009f26:	e00c      	b.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f28:	4b7d      	ldr	r3, [pc, #500]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d107      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3a:	61fb      	str	r3, [r7, #28]
          break;
 8009f3c:	e003      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 8009f3e:	bf00      	nop
 8009f40:	e2e0      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009f42:	bf00      	nop
 8009f44:	e2de      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009f46:	bf00      	nop
        break;
 8009f48:	e2dc      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009f4a:	4b75      	ldr	r3, [pc, #468]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f50:	f003 030c 	and.w	r3, r3, #12
 8009f54:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2b0c      	cmp	r3, #12
 8009f5a:	d83a      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009f5c:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009f99 	.word	0x08009f99
 8009f68:	08009fd3 	.word	0x08009fd3
 8009f6c:	08009fd3 	.word	0x08009fd3
 8009f70:	08009fd3 	.word	0x08009fd3
 8009f74:	08009fa1 	.word	0x08009fa1
 8009f78:	08009fd3 	.word	0x08009fd3
 8009f7c:	08009fd3 	.word	0x08009fd3
 8009f80:	08009fd3 	.word	0x08009fd3
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fd3 	.word	0x08009fd3
 8009f8c:	08009fd3 	.word	0x08009fd3
 8009f90:	08009fd3 	.word	0x08009fd3
 8009f94:	08009fbd 	.word	0x08009fbd
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f98:	f7ff fa42 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 8009f9c:	61f8      	str	r0, [r7, #28]
          break;
 8009f9e:	e01d      	b.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 8009fa0:	f7ff f9a8 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 8009fa4:	61f8      	str	r0, [r7, #28]
          break;
 8009fa6:	e019      	b.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fa8:	4b5d      	ldr	r3, [pc, #372]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb4:	d10f      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 8009fb6:	4b5c      	ldr	r3, [pc, #368]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009fb8:	61fb      	str	r3, [r7, #28]
          break;
 8009fba:	e00c      	b.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009fbc:	4b58      	ldr	r3, [pc, #352]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d107      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 8009fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fce:	61fb      	str	r3, [r7, #28]
          break;
 8009fd0:	e003      	b.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 8009fd2:	bf00      	nop
 8009fd4:	e296      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009fd6:	bf00      	nop
 8009fd8:	e294      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8009fda:	bf00      	nop
        break;
 8009fdc:	e292      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009fde:	4b50      	ldr	r3, [pc, #320]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009fe8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	d00d      	beq.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8009ff0:	2b10      	cmp	r3, #16
 8009ff2:	d802      	bhi.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 8009ff8:	e024      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d00a      	beq.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 8009ffe:	2b30      	cmp	r3, #48	; 0x30
 800a000:	d012      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 800a002:	e01f      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a004:	f7ff fa0c 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a008:	61f8      	str	r0, [r7, #28]
          break;
 800a00a:	e01b      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a00c:	f7ff f972 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a010:	61f8      	str	r0, [r7, #28]
          break;
 800a012:	e017      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a014:	4b42      	ldr	r3, [pc, #264]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a020:	d10d      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 800a022:	4b41      	ldr	r3, [pc, #260]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a024:	61fb      	str	r3, [r7, #28]
          break;
 800a026:	e00a      	b.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a028:	4b3d      	ldr	r3, [pc, #244]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b02      	cmp	r3, #2
 800a034:	d105      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	61fb      	str	r3, [r7, #28]
          break;
 800a03c:	e001      	b.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 800a03e:	bf00      	nop
 800a040:	e260      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a042:	bf00      	nop
        break;
 800a044:	e25e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a046:	4b36      	ldr	r3, [pc, #216]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a050:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d00d      	beq.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d802      	bhi.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 800a060:	e024      	b.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 800a062:	2b80      	cmp	r3, #128	; 0x80
 800a064:	d00a      	beq.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800a066:	2bc0      	cmp	r3, #192	; 0xc0
 800a068:	d012      	beq.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 800a06a:	e01f      	b.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a06c:	f7ff f9d8 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a070:	61f8      	str	r0, [r7, #28]
          break;
 800a072:	e01b      	b.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800a074:	f7ff f93e 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a078:	61f8      	str	r0, [r7, #28]
          break;
 800a07a:	e017      	b.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a07c:	4b28      	ldr	r3, [pc, #160]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a088:	d10d      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800a08a:	4b27      	ldr	r3, [pc, #156]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a08c:	61fb      	str	r3, [r7, #28]
          break;
 800a08e:	e00a      	b.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a090:	4b23      	ldr	r3, [pc, #140]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d105      	bne.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800a09e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0a2:	61fb      	str	r3, [r7, #28]
          break;
 800a0a4:	e001      	b.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800a0a6:	bf00      	nop
 800a0a8:	e22c      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a0aa:	bf00      	nop
        break;
 800a0ac:	e22a      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a0ae:	4b1c      	ldr	r3, [pc, #112]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c0:	d010      	beq.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c6:	d802      	bhi.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 800a0cc:	e026      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 800a0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d2:	d00b      	beq.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 800a0d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d8:	d012      	beq.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 800a0da:	e01f      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a0dc:	f7ff f9a0 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a0e0:	61f8      	str	r0, [r7, #28]
          break;
 800a0e2:	e01b      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 800a0e4:	f7ff f906 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a0e8:	61f8      	str	r0, [r7, #28]
          break;
 800a0ea:	e017      	b.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f8:	d10d      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 800a0fa:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a0fc:	61fb      	str	r3, [r7, #28]
          break;
 800a0fe:	e00a      	b.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a100:	4b07      	ldr	r3, [pc, #28]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d105      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 800a10e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a112:	61fb      	str	r3, [r7, #28]
          break;
 800a114:	e001      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 800a116:	bf00      	nop
 800a118:	e1f4      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a11a:	bf00      	nop
        break;
 800a11c:	e1f2      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800a11e:	bf00      	nop
 800a120:	40021000 	.word	0x40021000
 800a124:	02dc6c00 	.word	0x02dc6c00
 800a128:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a12c:	4bad      	ldr	r3, [pc, #692]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a132:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a136:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a13e:	d010      	beq.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a144:	d802      	bhi.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 800a14a:	e026      	b.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 800a14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a150:	d00b      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 800a152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a156:	d012      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800a158:	e01f      	b.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7ff f961 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a15e:	61f8      	str	r0, [r7, #28]
          break;
 800a160:	e01b      	b.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a162:	f7ff f8c7 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a166:	61f8      	str	r0, [r7, #28]
          break;
 800a168:	e017      	b.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a16a:	4b9e      	ldr	r3, [pc, #632]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a176:	d10d      	bne.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 800a178:	4b9b      	ldr	r3, [pc, #620]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a17a:	61fb      	str	r3, [r7, #28]
          break;
 800a17c:	e00a      	b.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a17e:	4b99      	ldr	r3, [pc, #612]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d105      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 800a18c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a190:	61fb      	str	r3, [r7, #28]
          break;
 800a192:	e001      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 800a194:	bf00      	nop
 800a196:	e1b5      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a198:	bf00      	nop
        break;
 800a19a:	e1b3      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a19c:	4b91      	ldr	r3, [pc, #580]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1a6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ae:	d036      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a1b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1b4:	d003      	beq.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800a1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ba:	d004      	beq.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 800a1bc:	e05e      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1be:	f7ff f899 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a1c2:	61f8      	str	r0, [r7, #28]
          break;
 800a1c4:	e05a      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a1c6:	4b87      	ldr	r3, [pc, #540]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1d2:	d150      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800a1d4:	4b83      	ldr	r3, [pc, #524]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d04a      	beq.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a1e0:	4b80      	ldr	r3, [pc, #512]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	0a1b      	lsrs	r3, r3, #8
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	fb02 f203 	mul.w	r2, r2, r3
 800a1f4:	4b7b      	ldr	r3, [pc, #492]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	091b      	lsrs	r3, r3, #4
 800a1fa:	f003 0307 	and.w	r3, r3, #7
 800a1fe:	3301      	adds	r3, #1
 800a200:	fbb2 f3f3 	udiv	r3, r2, r3
 800a204:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a206:	4b77      	ldr	r3, [pc, #476]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	0e5b      	lsrs	r3, r3, #25
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	3301      	adds	r3, #1
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	61fb      	str	r3, [r7, #28]
          break;
 800a21c:	e02b      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a21e:	4b71      	ldr	r3, [pc, #452]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a22a:	d126      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800a22c:	4b6d      	ldr	r3, [pc, #436]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d020      	beq.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a238:	4b6a      	ldr	r3, [pc, #424]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a242:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	fb02 f203 	mul.w	r2, r2, r3
 800a24c:	4b65      	ldr	r3, [pc, #404]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	091b      	lsrs	r3, r3, #4
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	3301      	adds	r3, #1
 800a258:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a25e:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	0e5b      	lsrs	r3, r3, #25
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	3301      	adds	r3, #1
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a272:	61fb      	str	r3, [r7, #28]
          break;
 800a274:	e001      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 800a276:	bf00      	nop
 800a278:	e144      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a27a:	bf00      	nop
        break;
 800a27c:	e142      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a27e:	4b59      	ldr	r3, [pc, #356]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a288:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a290:	f7ff f8dc 	bl	800944c <HAL_RCC_GetPCLK2Freq>
 800a294:	61f8      	str	r0, [r7, #28]
        break;
 800a296:	e135      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a298:	f7ff f82c 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a29c:	61f8      	str	r0, [r7, #28]
        break;
 800a29e:	e131      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a2a0:	4b50      	ldr	r3, [pc, #320]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2aa:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2b2:	d009      	beq.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a2b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b8:	d00a      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d000      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 800a2be:	e011      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2c0:	f7ff f8ae 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a2c4:	61f8      	str	r0, [r7, #28]
          break;
 800a2c6:	e00d      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 800a2c8:	f7ff f814 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a2cc:	61f8      	str	r0, [r7, #28]
          break;
 800a2ce:	e009      	b.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2d0:	4b44      	ldr	r3, [pc, #272]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2dc:	d101      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 800a2de:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a2e0:	61fb      	str	r3, [r7, #28]
          break;
 800a2e2:	bf00      	nop
        break;
 800a2e4:	e10e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a2e6:	4b3f      	ldr	r3, [pc, #252]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2f0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2f8:	d009      	beq.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fe:	d00a      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a300:	2b00      	cmp	r3, #0
 800a302:	d000      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 800a304:	e011      	b.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a306:	f7ff f88b 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a30a:	61f8      	str	r0, [r7, #28]
          break;
 800a30c:	e00d      	b.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a30e:	f7fe fff1 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a312:	61f8      	str	r0, [r7, #28]
          break;
 800a314:	e009      	b.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a316:	4b33      	ldr	r3, [pc, #204]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a322:	d101      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 800a324:	4b30      	ldr	r3, [pc, #192]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a326:	61fb      	str	r3, [r7, #28]
          break;
 800a328:	bf00      	nop
        break;
 800a32a:	e0eb      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a32c:	4b2d      	ldr	r3, [pc, #180]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a336:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33e:	d009      	beq.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 800a340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a344:	d00a      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a346:	2b00      	cmp	r3, #0
 800a348:	d000      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 800a34a:	e011      	b.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a34c:	f7ff f868 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a350:	61f8      	str	r0, [r7, #28]
          break;
 800a352:	e00d      	b.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a354:	f7fe ffce 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a358:	61f8      	str	r0, [r7, #28]
          break;
 800a35a:	e009      	b.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a35c:	4b21      	ldr	r3, [pc, #132]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a368:	d101      	bne.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800a36a:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a36c:	61fb      	str	r3, [r7, #28]
          break;
 800a36e:	bf00      	nop
        break;
 800a370:	e0c8      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d008      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a384:	2b01      	cmp	r3, #1
 800a386:	d302      	bcc.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d008      	beq.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800a38c:	e011      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a38e:	f7ff f847 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a392:	61f8      	str	r0, [r7, #28]
          break;
 800a394:	e00d      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 800a396:	f7fe ffad 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800a39a:	61f8      	str	r0, [r7, #28]
          break;
 800a39c:	e009      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a39e:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3aa:	d101      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a3ae:	61fb      	str	r3, [r7, #28]
          break;
 800a3b0:	bf00      	nop
        break;
 800a3b2:	e0a7      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a3b4:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a3be:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3c6:	d015      	beq.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a3c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3cc:	d802      	bhi.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00c      	beq.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800a3d2:	e034      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 800a3d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a3d8:	d017      	beq.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800a3da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a3de:	d01e      	beq.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 800a3e0:	e02d      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a3e2:	bf00      	nop
 800a3e4:	40021000 	.word	0x40021000
 800a3e8:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3ec:	f7ff f818 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a3f0:	61f8      	str	r0, [r7, #28]
          break;
 800a3f2:	e024      	b.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a3f4:	4b46      	ldr	r3, [pc, #280]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a3f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d118      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 800a402:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a406:	61fb      	str	r3, [r7, #28]
          break;
 800a408:	e014      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a40a:	4b41      	ldr	r3, [pc, #260]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a416:	d10f      	bne.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 800a418:	4b3e      	ldr	r3, [pc, #248]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a41a:	61fb      	str	r3, [r7, #28]
          break;
 800a41c:	e00c      	b.n	800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a41e:	4b3c      	ldr	r3, [pc, #240]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 800a42c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a430:	61fb      	str	r3, [r7, #28]
          break;
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 800a434:	bf00      	nop
 800a436:	e065      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a438:	bf00      	nop
 800a43a:	e063      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a43c:	bf00      	nop
        break;
 800a43e:	e061      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a440:	4b33      	ldr	r3, [pc, #204]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a446:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a44a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a452:	d010      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a458:	d802      	bhi.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 800a45e:	e02f      	b.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 800a460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a464:	d012      	beq.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 800a466:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a46a:	d019      	beq.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800a46c:	e028      	b.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a46e:	f7fe ffd7 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a472:	61f8      	str	r0, [r7, #28]
          break;
 800a474:	e024      	b.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b02      	cmp	r3, #2
 800a482:	d118      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 800a484:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a488:	61fb      	str	r3, [r7, #28]
          break;
 800a48a:	e014      	b.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a48c:	4b20      	ldr	r3, [pc, #128]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a498:	d10f      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 800a49a:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a49c:	61fb      	str	r3, [r7, #28]
          break;
 800a49e:	e00c      	b.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4a0:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d107      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 800a4ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4b2:	61fb      	str	r3, [r7, #28]
          break;
 800a4b4:	e003      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800a4b6:	bf00      	nop
 800a4b8:	e024      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a4ba:	bf00      	nop
 800a4bc:	e022      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a4be:	bf00      	nop
        break;
 800a4c0:	e020      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a4c2:	4b13      	ldr	r3, [pc, #76]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4cc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800a4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d8:	d004      	beq.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800a4da:	e00d      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4dc:	f7fe ffa0 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800a4e0:	61f8      	str	r0, [r7, #28]
          break;
 800a4e2:	e009      	b.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f0:	d101      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a4f4:	61fb      	str	r3, [r7, #28]
          break;
 800a4f6:	bf00      	nop
        break;
 800a4f8:	e004      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a4fa:	bf00      	nop
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a502:	bf00      	nop
    }
  }

  return(frequency);
 800a504:	69fb      	ldr	r3, [r7, #28]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40021000 	.word	0x40021000
 800a514:	00f42400 	.word	0x00f42400

0800a518 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a04      	ldr	r2, [pc, #16]	; (800a534 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a522:	f043 0304 	orr.w	r3, r3, #4
 800a526:	6013      	str	r3, [r2, #0]
}
 800a528:	bf00      	nop
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	40021000 	.word	0x40021000

0800a538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a546:	4b73      	ldr	r3, [pc, #460]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d018      	beq.n	800a584 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a552:	4b70      	ldr	r3, [pc, #448]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0203 	and.w	r2, r3, #3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d10d      	bne.n	800a57e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
       ||
 800a566:	2b00      	cmp	r3, #0
 800a568:	d009      	beq.n	800a57e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a56a:	4b6a      	ldr	r3, [pc, #424]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	091b      	lsrs	r3, r3, #4
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
       ||
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d044      	beq.n	800a608 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	73fb      	strb	r3, [r7, #15]
 800a582:	e041      	b.n	800a608 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d00c      	beq.n	800a5a6 <RCCEx_PLLSAI1_Config+0x6e>
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d013      	beq.n	800a5b8 <RCCEx_PLLSAI1_Config+0x80>
 800a590:	2b01      	cmp	r3, #1
 800a592:	d120      	bne.n	800a5d6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a594:	4b5f      	ldr	r3, [pc, #380]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d11d      	bne.n	800a5dc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5a4:	e01a      	b.n	800a5dc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a5a6:	4b5b      	ldr	r3, [pc, #364]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d116      	bne.n	800a5e0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5b6:	e013      	b.n	800a5e0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a5b8:	4b56      	ldr	r3, [pc, #344]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10f      	bne.n	800a5e4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a5c4:	4b53      	ldr	r3, [pc, #332]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5d4:	e006      	b.n	800a5e4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5da:	e004      	b.n	800a5e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a5dc:	bf00      	nop
 800a5de:	e002      	b.n	800a5e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a5e0:	bf00      	nop
 800a5e2:	e000      	b.n	800a5e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a5e4:	bf00      	nop
    }

    if(status == HAL_OK)
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10d      	bne.n	800a608 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a5ec:	4b49      	ldr	r3, [pc, #292]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6819      	ldr	r1, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	430b      	orrs	r3, r1
 800a602:	4944      	ldr	r1, [pc, #272]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a604:	4313      	orrs	r3, r2
 800a606:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d17c      	bne.n	800a708 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a60e:	4b41      	ldr	r3, [pc, #260]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a40      	ldr	r2, [pc, #256]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a61a:	f7fa fd59 	bl	80050d0 <HAL_GetTick>
 800a61e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a620:	e009      	b.n	800a636 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a622:	f7fa fd55 	bl	80050d0 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d902      	bls.n	800a636 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
        break;
 800a634:	e005      	b.n	800a642 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a636:	4b37      	ldr	r3, [pc, #220]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ef      	bne.n	800a622 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d15f      	bne.n	800a708 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d110      	bne.n	800a670 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a64e:	4b31      	ldr	r3, [pc, #196]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a656:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6892      	ldr	r2, [r2, #8]
 800a65e:	0211      	lsls	r1, r2, #8
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	68d2      	ldr	r2, [r2, #12]
 800a664:	06d2      	lsls	r2, r2, #27
 800a666:	430a      	orrs	r2, r1
 800a668:	492a      	ldr	r1, [pc, #168]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	610b      	str	r3, [r1, #16]
 800a66e:	e027      	b.n	800a6c0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d112      	bne.n	800a69c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a676:	4b27      	ldr	r3, [pc, #156]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a67e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6892      	ldr	r2, [r2, #8]
 800a686:	0211      	lsls	r1, r2, #8
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	6912      	ldr	r2, [r2, #16]
 800a68c:	0852      	lsrs	r2, r2, #1
 800a68e:	3a01      	subs	r2, #1
 800a690:	0552      	lsls	r2, r2, #21
 800a692:	430a      	orrs	r2, r1
 800a694:	491f      	ldr	r1, [pc, #124]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a696:	4313      	orrs	r3, r2
 800a698:	610b      	str	r3, [r1, #16]
 800a69a:	e011      	b.n	800a6c0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a69c:	4b1d      	ldr	r3, [pc, #116]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a6a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6892      	ldr	r2, [r2, #8]
 800a6ac:	0211      	lsls	r1, r2, #8
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6952      	ldr	r2, [r2, #20]
 800a6b2:	0852      	lsrs	r2, r2, #1
 800a6b4:	3a01      	subs	r2, #1
 800a6b6:	0652      	lsls	r2, r2, #25
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	4916      	ldr	r1, [pc, #88]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a6c0:	4b14      	ldr	r3, [pc, #80]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a13      	ldr	r2, [pc, #76]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6cc:	f7fa fd00 	bl	80050d0 <HAL_GetTick>
 800a6d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6d2:	e009      	b.n	800a6e8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6d4:	f7fa fcfc 	bl	80050d0 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d902      	bls.n	800a6e8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	73fb      	strb	r3, [r7, #15]
          break;
 800a6e6:	e005      	b.n	800a6f4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0ef      	beq.n	800a6d4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a6fc:	691a      	ldr	r2, [r3, #16]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	4904      	ldr	r1, [pc, #16]	; (800a714 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a704:	4313      	orrs	r3, r2
 800a706:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	40021000 	.word	0x40021000

0800a718 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a726:	4b68      	ldr	r3, [pc, #416]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d018      	beq.n	800a764 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a732:	4b65      	ldr	r3, [pc, #404]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	f003 0203 	and.w	r2, r3, #3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d10d      	bne.n	800a75e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
       ||
 800a746:	2b00      	cmp	r3, #0
 800a748:	d009      	beq.n	800a75e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a74a:	4b5f      	ldr	r3, [pc, #380]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	091b      	lsrs	r3, r3, #4
 800a750:	f003 0307 	and.w	r3, r3, #7
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
       ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d044      	beq.n	800a7e8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	73fb      	strb	r3, [r7, #15]
 800a762:	e041      	b.n	800a7e8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d00c      	beq.n	800a786 <RCCEx_PLLSAI2_Config+0x6e>
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d013      	beq.n	800a798 <RCCEx_PLLSAI2_Config+0x80>
 800a770:	2b01      	cmp	r3, #1
 800a772:	d120      	bne.n	800a7b6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a774:	4b54      	ldr	r3, [pc, #336]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d11d      	bne.n	800a7bc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a784:	e01a      	b.n	800a7bc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a786:	4b50      	ldr	r3, [pc, #320]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d116      	bne.n	800a7c0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a796:	e013      	b.n	800a7c0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a798:	4b4b      	ldr	r3, [pc, #300]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10f      	bne.n	800a7c4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a7a4:	4b48      	ldr	r3, [pc, #288]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7b4:	e006      	b.n	800a7c4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ba:	e004      	b.n	800a7c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800a7c4:	bf00      	nop
    }

    if(status == HAL_OK)
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10d      	bne.n	800a7e8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a7cc:	4b3e      	ldr	r3, [pc, #248]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6819      	ldr	r1, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	4939      	ldr	r1, [pc, #228]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d166      	bne.n	800a8bc <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a7ee:	4b36      	ldr	r3, [pc, #216]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a35      	ldr	r2, [pc, #212]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a7f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7fa:	f7fa fc69 	bl	80050d0 <HAL_GetTick>
 800a7fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a800:	e009      	b.n	800a816 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a802:	f7fa fc65 	bl	80050d0 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d902      	bls.n	800a816 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a810:	2303      	movs	r3, #3
 800a812:	73fb      	strb	r3, [r7, #15]
        break;
 800a814:	e005      	b.n	800a822 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a816:	4b2c      	ldr	r3, [pc, #176]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1ef      	bne.n	800a802 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d149      	bne.n	800a8bc <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d110      	bne.n	800a850 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a82e:	4b26      	ldr	r3, [pc, #152]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a836:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	6892      	ldr	r2, [r2, #8]
 800a83e:	0211      	lsls	r1, r2, #8
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	68d2      	ldr	r2, [r2, #12]
 800a844:	06d2      	lsls	r2, r2, #27
 800a846:	430a      	orrs	r2, r1
 800a848:	491f      	ldr	r1, [pc, #124]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	614b      	str	r3, [r1, #20]
 800a84e:	e011      	b.n	800a874 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a850:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6892      	ldr	r2, [r2, #8]
 800a860:	0211      	lsls	r1, r2, #8
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6912      	ldr	r2, [r2, #16]
 800a866:	0852      	lsrs	r2, r2, #1
 800a868:	3a01      	subs	r2, #1
 800a86a:	0652      	lsls	r2, r2, #25
 800a86c:	430a      	orrs	r2, r1
 800a86e:	4916      	ldr	r1, [pc, #88]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a870:	4313      	orrs	r3, r2
 800a872:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a874:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a13      	ldr	r2, [pc, #76]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a87a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a87e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a880:	f7fa fc26 	bl	80050d0 <HAL_GetTick>
 800a884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a886:	e009      	b.n	800a89c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a888:	f7fa fc22 	bl	80050d0 <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b02      	cmp	r3, #2
 800a894:	d902      	bls.n	800a89c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	73fb      	strb	r3, [r7, #15]
          break;
 800a89a:	e005      	b.n	800a8a8 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a89c:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0ef      	beq.n	800a888 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	40021000 	.word	0x40021000

0800a8cc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b089      	sub	sp, #36	; 0x24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8e8:	d10c      	bne.n	800a904 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a8ea:	4b77      	ldr	r3, [pc, #476]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a8f4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8fc:	d112      	bne.n	800a924 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a8fe:	4b73      	ldr	r3, [pc, #460]	; (800aacc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	e00f      	b.n	800a924 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a90a:	d10b      	bne.n	800a924 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a90c:	4b6e      	ldr	r3, [pc, #440]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a912:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800a916:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a91e:	d101      	bne.n	800a924 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a920:	4b6a      	ldr	r3, [pc, #424]	; (800aacc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800a922:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f040 80c6 	bne.w	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a936:	d003      	beq.n	800a940 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a93e:	d13b      	bne.n	800a9b8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a940:	4b61      	ldr	r3, [pc, #388]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a94c:	f040 80b3 	bne.w	800aab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800a950:	4b5d      	ldr	r3, [pc, #372]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80ac 	beq.w	800aab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a95e:	4b5a      	ldr	r3, [pc, #360]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	091b      	lsrs	r3, r3, #4
 800a964:	f003 0307 	and.w	r3, r3, #7
 800a968:	3301      	adds	r3, #1
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a970:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a972:	4b55      	ldr	r3, [pc, #340]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a97c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a97e:	4b52      	ldr	r3, [pc, #328]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	0edb      	lsrs	r3, r3, #27
 800a984:	f003 031f 	and.w	r3, r3, #31
 800a988:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a990:	4b4d      	ldr	r3, [pc, #308]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800a99c:	2311      	movs	r3, #17
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e001      	b.n	800a9a6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800a9a2:	2307      	movs	r3, #7
 800a9a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	fb02 f203 	mul.w	r2, r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a9b6:	e07e      	b.n	800aab6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d139      	bne.n	800aa32 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a9be:	4b42      	ldr	r3, [pc, #264]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ca:	d175      	bne.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800a9cc:	4b3e      	ldr	r3, [pc, #248]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d06f      	beq.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a9d8:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	091b      	lsrs	r3, r3, #4
 800a9de:	f003 0307 	and.w	r3, r3, #7
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a9ec:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	0a1b      	lsrs	r3, r3, #8
 800a9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a9f8:	4b33      	ldr	r3, [pc, #204]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	0edb      	lsrs	r3, r3, #27
 800a9fe:	f003 031f 	and.w	r3, r3, #31
 800aa02:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800aa0a:	4b2f      	ldr	r3, [pc, #188]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800aa16:	2311      	movs	r3, #17
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	e001      	b.n	800aa20 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800aa1c:	2307      	movs	r3, #7
 800aa1e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	fb02 f203 	mul.w	r2, r2, r3
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2e:	61fb      	str	r3, [r7, #28]
 800aa30:	e042      	b.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa38:	d003      	beq.n	800aa42 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa40:	d13a      	bne.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4e:	d133      	bne.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800aa50:	4b1d      	ldr	r3, [pc, #116]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d02d      	beq.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa5c:	4b1a      	ldr	r3, [pc, #104]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	091b      	lsrs	r3, r3, #4
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	3301      	adds	r3, #1
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800aa70:	4b15      	ldr	r3, [pc, #84]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	0a1b      	lsrs	r3, r3, #8
 800aa76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800aa7c:	4b12      	ldr	r3, [pc, #72]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	0edb      	lsrs	r3, r3, #27
 800aa82:	f003 031f 	and.w	r3, r3, #31
 800aa86:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800aa9a:	2311      	movs	r3, #17
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e001      	b.n	800aaa4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800aaa0:	2307      	movs	r3, #7
 800aaa2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	fb02 f203 	mul.w	r2, r2, r3
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab2:	61fb      	str	r3, [r7, #28]
 800aab4:	e000      	b.n	800aab8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800aab6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800aab8:	69fb      	ldr	r3, [r7, #28]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3724      	adds	r7, #36	; 0x24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	40021000 	.word	0x40021000
 800aacc:	001fff68 	.word	0x001fff68

0800aad0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e153      	b.n	800ad8a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7fa f80a 	bl	8004b10 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f957 	bl	800adb0 <SAI_Disable>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e13e      	b.n	800ad8a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d007      	beq.n	800ab2c <HAL_SAI_Init+0x5c>
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d302      	bcc.n	800ab26 <HAL_SAI_Init+0x56>
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d006      	beq.n	800ab32 <HAL_SAI_Init+0x62>
 800ab24:	e008      	b.n	800ab38 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
      break;
 800ab2a:	e008      	b.n	800ab3e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	61fb      	str	r3, [r7, #28]
      break;
 800ab30:	e005      	b.n	800ab3e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ab32:	2320      	movs	r3, #32
 800ab34:	61fb      	str	r3, [r7, #28]
      break;
 800ab36:	e002      	b.n	800ab3e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61fb      	str	r3, [r7, #28]
      break;
 800ab3c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d81d      	bhi.n	800ab82 <HAL_SAI_Init+0xb2>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <HAL_SAI_Init+0x7c>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab63 	.word	0x0800ab63
 800ab54:	0800ab6b 	.word	0x0800ab6b
 800ab58:	0800ab73 	.word	0x0800ab73
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
      break;
 800ab60:	e012      	b.n	800ab88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ab62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab66:	617b      	str	r3, [r7, #20]
      break;
 800ab68:	e00e      	b.n	800ab88 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab6e:	617b      	str	r3, [r7, #20]
      break;
 800ab70:	e00a      	b.n	800ab88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab76:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	f043 0301 	orr.w	r3, r3, #1
 800ab7e:	61fb      	str	r3, [r7, #28]
      break;
 800ab80:	e002      	b.n	800ab88 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
      break;
 800ab86:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a81      	ldr	r2, [pc, #516]	; (800ad94 <HAL_SAI_Init+0x2c4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d004      	beq.n	800ab9c <HAL_SAI_Init+0xcc>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a80      	ldr	r2, [pc, #512]	; (800ad98 <HAL_SAI_Init+0x2c8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d103      	bne.n	800aba4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ab9c:	4a7f      	ldr	r2, [pc, #508]	; (800ad9c <HAL_SAI_Init+0x2cc>)
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	e002      	b.n	800abaa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800aba4:	4a7e      	ldr	r2, [pc, #504]	; (800ada0 <HAL_SAI_Init+0x2d0>)
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d041      	beq.n	800ac36 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a77      	ldr	r2, [pc, #476]	; (800ad94 <HAL_SAI_Init+0x2c4>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d004      	beq.n	800abc6 <HAL_SAI_Init+0xf6>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a75      	ldr	r2, [pc, #468]	; (800ad98 <HAL_SAI_Init+0x2c8>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d105      	bne.n	800abd2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800abc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800abca:	f7fe ffdf 	bl	8009b8c <HAL_RCCEx_GetPeriphCLKFreq>
 800abce:	6138      	str	r0, [r7, #16]
 800abd0:	e004      	b.n	800abdc <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800abd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800abd6:	f7fe ffd9 	bl	8009b8c <HAL_RCCEx_GetPeriphCLKFreq>
 800abda:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	461a      	mov	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	025b      	lsls	r3, r3, #9
 800abee:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a6b      	ldr	r2, [pc, #428]	; (800ada4 <HAL_SAI_Init+0x2d4>)
 800abf8:	fba2 2303 	umull	r2, r3, r2, r3
 800abfc:	08da      	lsrs	r2, r3, #3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	4b67      	ldr	r3, [pc, #412]	; (800ada4 <HAL_SAI_Init+0x2d4>)
 800ac06:	fba3 2301 	umull	r2, r3, r3, r1
 800ac0a:	08da      	lsrs	r2, r3, #3
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	1aca      	subs	r2, r1, r3
 800ac16:	2a08      	cmp	r2, #8
 800ac18:	d904      	bls.n	800ac24 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	1c5a      	adds	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d104      	bne.n	800ac36 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	085a      	lsrs	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_SAI_Init+0x176>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d109      	bne.n	800ac5a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_SAI_Init+0x182>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e001      	b.n	800ac56 <HAL_SAI_Init+0x186>
 800ac52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	e008      	b.n	800ac6c <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d102      	bne.n	800ac68 <HAL_SAI_Init+0x198>
 800ac62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac66:	e000      	b.n	800ac6a <HAL_SAI_Init+0x19a>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6819      	ldr	r1, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	4b4c      	ldr	r3, [pc, #304]	; (800ada8 <HAL_SAI_Init+0x2d8>)
 800ac78:	400b      	ands	r3, r1
 800ac7a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6819      	ldr	r1, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac90:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	431a      	orrs	r2, r3
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800aca4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800acb0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	051b      	lsls	r3, r3, #20
 800acb8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	6812      	ldr	r2, [r2, #0]
 800accc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800acd0:	f023 030f 	bic.w	r3, r3, #15
 800acd4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6859      	ldr	r1, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	431a      	orrs	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6899      	ldr	r1, [r3, #8]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	4b2b      	ldr	r3, [pc, #172]	; (800adac <HAL_SAI_Init+0x2dc>)
 800ad00:	400b      	ands	r3, r1
 800ad02:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6899      	ldr	r1, [r3, #8]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad14:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ad1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ad20:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad26:	3b01      	subs	r3, #1
 800ad28:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ad2a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68d9      	ldr	r1, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ad42:	400b      	ands	r3, r1
 800ad44:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68d9      	ldr	r1, [r3, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad54:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad5a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ad5c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad62:	3b01      	subs	r3, #1
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	40015404 	.word	0x40015404
 800ad98:	40015424 	.word	0x40015424
 800ad9c:	40015400 	.word	0x40015400
 800ada0:	40015800 	.word	0x40015800
 800ada4:	cccccccd 	.word	0xcccccccd
 800ada8:	ff05c010 	.word	0xff05c010
 800adac:	fff88000 	.word	0xfff88000

0800adb0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800adb0:	b490      	push	{r4, r7}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800adb8:	4b15      	ldr	r3, [pc, #84]	; (800ae10 <SAI_Disable+0x60>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <SAI_Disable+0x64>)
 800adbe:	fba2 2303 	umull	r2, r3, r2, r3
 800adc2:	0b1b      	lsrs	r3, r3, #12
 800adc4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800add8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800adda:	2c00      	cmp	r4, #0
 800addc:	d10a      	bne.n	800adf4 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ade4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	73fb      	strb	r3, [r7, #15]
      break;
 800adf2:	e007      	b.n	800ae04 <SAI_Disable+0x54>
    }
    count--;
 800adf4:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1ea      	bne.n	800adda <SAI_Disable+0x2a>

  return status;
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bc90      	pop	{r4, r7}
 800ae0e:	4770      	bx	lr
 800ae10:	2000004c 	.word	0x2000004c
 800ae14:	95cbec1b 	.word	0x95cbec1b

0800ae18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e022      	b.n	800ae70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d105      	bne.n	800ae42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f9 fd2b 	bl	8004898 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f814 	bl	800ae78 <HAL_SD_InitCard>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e00a      	b.n	800ae70 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae78:	b5b0      	push	{r4, r5, r7, lr}
 800ae7a:	b08e      	sub	sp, #56	; 0x38
 800ae7c:	af04      	add	r7, sp, #16
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ae94:	2376      	movs	r3, #118	; 0x76
 800ae96:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681d      	ldr	r5, [r3, #0]
 800ae9c:	466c      	mov	r4, sp
 800ae9e:	f107 0314 	add.w	r3, r7, #20
 800aea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f002 fad1 	bl	800d458 <SDMMC_Init>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800aebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e05f      	b.n	800af88 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aed6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f002 faf5 	bl	800d4cc <SDMMC_PowerState_ON>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800aee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e049      	b.n	800af88 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af02:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fb4d 	bl	800b5a4 <SD_PowerON>
 800af0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00b      	beq.n	800af2a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	431a      	orrs	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e02e      	b.n	800af88 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa6c 	bl	800b408 <SD_InitCard>
 800af30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	431a      	orrs	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e01b      	b.n	800af88 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af58:	4618      	mov	r0, r3
 800af5a:	f002 fb4a 	bl	800d5f2 <SDMMC_CmdBlockLength>
 800af5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00f      	beq.n	800af86 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a09      	ldr	r2, [pc, #36]	; (800af90 <HAL_SD_InitCard+0x118>)
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	431a      	orrs	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3728      	adds	r7, #40	; 0x28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bdb0      	pop	{r4, r5, r7, pc}
 800af90:	004005ff 	.word	0x004005ff

0800af94 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa2:	0f9b      	lsrs	r3, r3, #30
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afae:	0e9b      	lsrs	r3, r3, #26
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 030f 	and.w	r3, r3, #15
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afc0:	0e1b      	lsrs	r3, r3, #24
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afde:	0a1b      	lsrs	r3, r3, #8
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afea:	b2da      	uxtb	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aff4:	0d1b      	lsrs	r3, r3, #20
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 030f 	and.w	r3, r3, #15
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b012:	0bdb      	lsrs	r3, r3, #15
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b024:	0b9b      	lsrs	r3, r3, #14
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b036:	0b5b      	lsrs	r3, r3, #13
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	f003 0301 	and.w	r3, r3, #1
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b048:	0b1b      	lsrs	r3, r3, #12
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2200      	movs	r2, #0
 800b05a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b060:	2b00      	cmp	r3, #0
 800b062:	d163      	bne.n	800b12c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b068:	009a      	lsls	r2, r3, #2
 800b06a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b06e:	4013      	ands	r3, r2
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b074:	0f92      	lsrs	r2, r2, #30
 800b076:	431a      	orrs	r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b080:	0edb      	lsrs	r3, r3, #27
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b092:	0e1b      	lsrs	r3, r3, #24
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a4:	0d5b      	lsrs	r3, r3, #21
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b6:	0c9b      	lsrs	r3, r3, #18
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	f003 0307 	and.w	r3, r3, #7
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c8:	0bdb      	lsrs	r3, r3, #15
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	7e1b      	ldrb	r3, [r3, #24]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	3302      	adds	r3, #2
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b0f6:	fb02 f203 	mul.w	r2, r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	7a1b      	ldrb	r3, [r3, #8]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	2201      	movs	r2, #1
 800b10a:	409a      	lsls	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b118:	0a52      	lsrs	r2, r2, #9
 800b11a:	fb02 f203 	mul.w	r2, r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b128:	661a      	str	r2, [r3, #96]	; 0x60
 800b12a:	e031      	b.n	800b190 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b130:	2b01      	cmp	r3, #1
 800b132:	d11d      	bne.n	800b170 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b138:	041b      	lsls	r3, r3, #16
 800b13a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b142:	0c1b      	lsrs	r3, r3, #16
 800b144:	431a      	orrs	r2, r3
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	3301      	adds	r3, #1
 800b150:	029a      	lsls	r2, r3, #10
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b164:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	661a      	str	r2, [r3, #96]	; 0x60
 800b16e:	e00f      	b.n	800b190 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a58      	ldr	r2, [pc, #352]	; (800b2d8 <HAL_SD_GetCardCSD+0x344>)
 800b176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e09d      	b.n	800b2cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b194:	0b9b      	lsrs	r3, r3, #14
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1a6:	09db      	lsrs	r3, r3, #7
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	0fdb      	lsrs	r3, r3, #31
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d4:	0f5b      	lsrs	r3, r3, #29
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	f003 0303 	and.w	r3, r3, #3
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	0e9b      	lsrs	r3, r3, #26
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	f003 0307 	and.w	r3, r3, #7
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f8:	0d9b      	lsrs	r3, r3, #22
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	f003 030f 	and.w	r3, r3, #15
 800b200:	b2da      	uxtb	r2, r3
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20a:	0d5b      	lsrs	r3, r3, #21
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f003 0301 	and.w	r3, r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b226:	0c1b      	lsrs	r3, r3, #16
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23a:	0bdb      	lsrs	r3, r3, #15
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24e:	0b9b      	lsrs	r3, r3, #14
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	b2da      	uxtb	r2, r3
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b262:	0b5b      	lsrs	r3, r3, #13
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b276:	0b1b      	lsrs	r3, r3, #12
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28a:	0a9b      	lsrs	r3, r3, #10
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	b2da      	uxtb	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0303 	and.w	r3, r3, #3
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b2:	085b      	lsrs	r3, r3, #1
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	004005ff 	.word	0x004005ff

0800b2dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b2dc:	b5b0      	push	{r4, r5, r7, lr}
 800b2de:	b08e      	sub	sp, #56	; 0x38
 800b2e0:	af04      	add	r7, sp, #16
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d02e      	beq.n	800b35a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b302:	d106      	bne.n	800b312 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
 800b310:	e029      	b.n	800b366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b318:	d10a      	bne.n	800b330 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f9d0 	bl	800b6c0 <SD_WideBus_Enable>
 800b320:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38
 800b32e:	e01a      	b.n	800b366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa0d 	bl	800b756 <SD_WideBus_Disable>
 800b33c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	639a      	str	r2, [r3, #56]	; 0x38
 800b34a:	e00c      	b.n	800b366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	639a      	str	r2, [r3, #56]	; 0x38
 800b358:	e005      	b.n	800b366 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a24      	ldr	r2, [pc, #144]	; (800b404 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b374:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b37c:	e01f      	b.n	800b3be <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681d      	ldr	r5, [r3, #0]
 800b3a4:	466c      	mov	r4, sp
 800b3a6:	f107 0314 	add.w	r3, r7, #20
 800b3aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f002 f84d 	bl	800d458 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f002 f913 	bl	800d5f2 <SDMMC_CmdBlockLength>
 800b3cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00c      	beq.n	800b3ee <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3728      	adds	r7, #40	; 0x28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bdb0      	pop	{r4, r5, r7, pc}
 800b402:	bf00      	nop
 800b404:	004005ff 	.word	0x004005ff

0800b408 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b408:	b5b0      	push	{r4, r5, r7, lr}
 800b40a:	b094      	sub	sp, #80	; 0x50
 800b40c:	af04      	add	r7, sp, #16
 800b40e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b410:	2301      	movs	r3, #1
 800b412:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4618      	mov	r0, r3
 800b41a:	f002 f866 	bl	800d4ea <SDMMC_GetPowerState>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b424:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b428:	e0b7      	b.n	800b59a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d02f      	beq.n	800b492 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4618      	mov	r0, r3
 800b438:	f002 f9e5 	bl	800d806 <SDMMC_CmdSendCID>
 800b43c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <SD_InitCard+0x40>
    {
      return errorstate;
 800b444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b446:	e0a8      	b.n	800b59a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2100      	movs	r1, #0
 800b44e:	4618      	mov	r0, r3
 800b450:	f002 f890 	bl	800d574 <SDMMC_GetResponse>
 800b454:	4602      	mov	r2, r0
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2104      	movs	r1, #4
 800b460:	4618      	mov	r0, r3
 800b462:	f002 f887 	bl	800d574 <SDMMC_GetResponse>
 800b466:	4602      	mov	r2, r0
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2108      	movs	r1, #8
 800b472:	4618      	mov	r0, r3
 800b474:	f002 f87e 	bl	800d574 <SDMMC_GetResponse>
 800b478:	4602      	mov	r2, r0
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	210c      	movs	r1, #12
 800b484:	4618      	mov	r0, r3
 800b486:	f002 f875 	bl	800d574 <SDMMC_GetResponse>
 800b48a:	4602      	mov	r2, r0
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	2b03      	cmp	r3, #3
 800b498:	d00d      	beq.n	800b4b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f107 020e 	add.w	r2, r7, #14
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f9eb 	bl	800d880 <SDMMC_CmdSetRelAdd>
 800b4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <SD_InitCard+0xae>
    {
      return errorstate;
 800b4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b4:	e071      	b.n	800b59a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d036      	beq.n	800b52c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b4be:	89fb      	ldrh	r3, [r7, #14]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ce:	041b      	lsls	r3, r3, #16
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	f002 f9b5 	bl	800d842 <SDMMC_CmdSendCSD>
 800b4d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e2:	e05a      	b.n	800b59a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f002 f842 	bl	800d574 <SDMMC_GetResponse>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2104      	movs	r1, #4
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f002 f839 	bl	800d574 <SDMMC_GetResponse>
 800b502:	4602      	mov	r2, r0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2108      	movs	r1, #8
 800b50e:	4618      	mov	r0, r3
 800b510:	f002 f830 	bl	800d574 <SDMMC_GetResponse>
 800b514:	4602      	mov	r2, r0
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	210c      	movs	r1, #12
 800b520:	4618      	mov	r0, r3
 800b522:	f002 f827 	bl	800d574 <SDMMC_GetResponse>
 800b526:	4602      	mov	r2, r0
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2104      	movs	r1, #4
 800b532:	4618      	mov	r0, r3
 800b534:	f002 f81e 	bl	800d574 <SDMMC_GetResponse>
 800b538:	4603      	mov	r3, r0
 800b53a:	0d1a      	lsrs	r2, r3, #20
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b540:	f107 0310 	add.w	r3, r7, #16
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fd24 	bl	800af94 <HAL_SD_GetCardCSD>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b556:	e020      	b.n	800b59a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6819      	ldr	r1, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b560:	041b      	lsls	r3, r3, #16
 800b562:	f04f 0400 	mov.w	r4, #0
 800b566:	461a      	mov	r2, r3
 800b568:	4623      	mov	r3, r4
 800b56a:	4608      	mov	r0, r1
 800b56c:	f002 f863 	bl	800d636 <SDMMC_CmdSelDesel>
 800b570:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <SD_InitCard+0x174>
  {
    return errorstate;
 800b578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57a:	e00e      	b.n	800b59a <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681d      	ldr	r5, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	466c      	mov	r4, sp
 800b584:	f103 0210 	add.w	r2, r3, #16
 800b588:	ca07      	ldmia	r2, {r0, r1, r2}
 800b58a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b58e:	3304      	adds	r3, #4
 800b590:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b592:	4628      	mov	r0, r5
 800b594:	f001 ff60 	bl	800d458 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3740      	adds	r7, #64	; 0x40
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f002 f85d 	bl	800d67c <SDMMC_CmdGoIdleState>
 800b5c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <SD_PowerON+0x2a>
  {
    return errorstate;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	e072      	b.n	800b6b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f002 f870 	bl	800d6b8 <SDMMC_CmdOperCond>
 800b5d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00d      	beq.n	800b5fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 f846 	bl	800d67c <SDMMC_CmdGoIdleState>
 800b5f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d004      	beq.n	800b602 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	e05b      	b.n	800b6b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b606:	2b01      	cmp	r3, #1
 800b608:	d137      	bne.n	800b67a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f002 f870 	bl	800d6f6 <SDMMC_CmdAppCommand>
 800b616:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d02d      	beq.n	800b67a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b61e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b622:	e047      	b.n	800b6b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2100      	movs	r1, #0
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 f863 	bl	800d6f6 <SDMMC_CmdAppCommand>
 800b630:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <SD_PowerON+0x98>
    {
      return errorstate;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	e03b      	b.n	800b6b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	491e      	ldr	r1, [pc, #120]	; (800b6bc <SD_PowerON+0x118>)
 800b642:	4618      	mov	r0, r3
 800b644:	f002 f879 	bl	800d73a <SDMMC_CmdAppOperCommand>
 800b648:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b654:	e02e      	b.n	800b6b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 ff89 	bl	800d574 <SDMMC_GetResponse>
 800b662:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	0fdb      	lsrs	r3, r3, #31
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <SD_PowerON+0xcc>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e000      	b.n	800b672 <SD_PowerON+0xce>
 800b670:	2300      	movs	r3, #0
 800b672:	613b      	str	r3, [r7, #16]

    count++;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	3301      	adds	r3, #1
 800b678:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b680:	4293      	cmp	r3, r2
 800b682:	d802      	bhi.n	800b68a <SD_PowerON+0xe6>
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0cc      	beq.n	800b624 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b690:	4293      	cmp	r3, r2
 800b692:	d902      	bls.n	800b69a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b698:	e00c      	b.n	800b6b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	645a      	str	r2, [r3, #68]	; 0x44
 800b6aa:	e002      	b.n	800b6b2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	c1100000 	.word	0xc1100000

0800b6c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 ff4c 	bl	800d574 <SDMMC_GetResponse>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6e6:	d102      	bne.n	800b6ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b6e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6ec:	e02f      	b.n	800b74e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b6ee:	f107 030c 	add.w	r3, r7, #12
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f879 	bl	800b7ec <SD_FindSCR>
 800b6fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	e023      	b.n	800b74e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01c      	beq.n	800b74a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b718:	041b      	lsls	r3, r3, #16
 800b71a:	4619      	mov	r1, r3
 800b71c:	4610      	mov	r0, r2
 800b71e:	f001 ffea 	bl	800d6f6 <SDMMC_CmdAppCommand>
 800b722:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	e00f      	b.n	800b74e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2102      	movs	r1, #2
 800b734:	4618      	mov	r0, r3
 800b736:	f002 f823 	bl	800d780 <SDMMC_CmdBusWidth>
 800b73a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	e003      	b.n	800b74e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b746:	2300      	movs	r3, #0
 800b748:	e001      	b.n	800b74e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b74a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b086      	sub	sp, #24
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	2300      	movs	r3, #0
 800b764:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 ff01 	bl	800d574 <SDMMC_GetResponse>
 800b772:	4603      	mov	r3, r0
 800b774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77c:	d102      	bne.n	800b784 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b77e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b782:	e02f      	b.n	800b7e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b784:	f107 030c 	add.w	r3, r7, #12
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f82e 	bl	800b7ec <SD_FindSCR>
 800b790:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	e023      	b.n	800b7e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d01c      	beq.n	800b7e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ae:	041b      	lsls	r3, r3, #16
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f001 ff9f 	bl	800d6f6 <SDMMC_CmdAppCommand>
 800b7b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	e00f      	b.n	800b7e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f001 ffd8 	bl	800d780 <SDMMC_CmdBusWidth>
 800b7d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	e003      	b.n	800b7e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e001      	b.n	800b7e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b7ec:	b590      	push	{r4, r7, lr}
 800b7ee:	b08f      	sub	sp, #60	; 0x3c
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7f6:	f7f9 fc6b 	bl	80050d0 <HAL_GetTick>
 800b7fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b800:	2300      	movs	r3, #0
 800b802:	60bb      	str	r3, [r7, #8]
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2108      	movs	r1, #8
 800b812:	4618      	mov	r0, r3
 800b814:	f001 feed 	bl	800d5f2 <SDMMC_CmdBlockLength>
 800b818:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	e0a9      	b.n	800b978 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	4619      	mov	r1, r3
 800b830:	4610      	mov	r0, r2
 800b832:	f001 ff60 	bl	800d6f6 <SDMMC_CmdAppCommand>
 800b836:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	e09a      	b.n	800b978 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b846:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b848:	2308      	movs	r3, #8
 800b84a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b84c:	2330      	movs	r3, #48	; 0x30
 800b84e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b850:	2302      	movs	r3, #2
 800b852:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b854:	2300      	movs	r3, #0
 800b856:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b858:	2301      	movs	r3, #1
 800b85a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f107 0210 	add.w	r2, r7, #16
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f001 fe97 	bl	800d59a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4618      	mov	r0, r3
 800b872:	f001 ffa7 	bl	800d7c4 <SDMMC_CmdSendSCR>
 800b876:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d022      	beq.n	800b8c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	e07a      	b.n	800b978 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00e      	beq.n	800b8ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	f107 0208 	add.w	r2, r7, #8
 800b89c:	18d4      	adds	r4, r2, r3
 800b89e:	4608      	mov	r0, r1
 800b8a0:	f001 fe07 	bl	800d4b2 <SDMMC_ReadFIFO>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	6023      	str	r3, [r4, #0]
      index++;
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b8ae:	f7f9 fc0f 	bl	80050d0 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8bc:	d102      	bne.n	800b8c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b8be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8c2:	e059      	b.n	800b978 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8ca:	f240 432a 	movw	r3, #1066	; 0x42a
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0d6      	beq.n	800b882 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8da:	f003 0308 	and.w	r3, r3, #8
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d005      	beq.n	800b8ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2208      	movs	r2, #8
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b8ea:	2308      	movs	r3, #8
 800b8ec:	e044      	b.n	800b978 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f4:	f003 0302 	and.w	r3, r3, #2
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2202      	movs	r2, #2
 800b902:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b904:	2302      	movs	r3, #2
 800b906:	e037      	b.n	800b978 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b00      	cmp	r3, #0
 800b914:	d005      	beq.n	800b922 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2220      	movs	r2, #32
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b91e:	2320      	movs	r3, #32
 800b920:	e02a      	b.n	800b978 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f240 523a 	movw	r2, #1338	; 0x53a
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	061a      	lsls	r2, r3, #24
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b938:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b942:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	0e1b      	lsrs	r3, r3, #24
 800b948:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	601a      	str	r2, [r3, #0]
    scr++;
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	3304      	adds	r3, #4
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	061a      	lsls	r2, r3, #24
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	021b      	lsls	r3, r3, #8
 800b95c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b960:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	0a1b      	lsrs	r3, r3, #8
 800b966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b96a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	0e1b      	lsrs	r3, r3, #24
 800b970:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	373c      	adds	r7, #60	; 0x3c
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd90      	pop	{r4, r7, pc}

0800b980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e07c      	b.n	800ba8c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d106      	bne.n	800b9b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7f8 ffd5 	bl	800495c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9d2:	d902      	bls.n	800b9da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	e002      	b.n	800b9e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b9da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b9e8:	d007      	beq.n	800b9fa <HAL_SPI_Init+0x7a>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9f2:	d002      	beq.n	800b9fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10b      	bne.n	800ba1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba0a:	d903      	bls.n	800ba14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30
 800ba12:	e002      	b.n	800ba1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	431a      	orrs	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba38:	431a      	orrs	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	ea42 0103 	orr.w	r1, r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	0c1b      	lsrs	r3, r3, #16
 800ba5a:	f003 0204 	and.w	r2, r3, #4
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	ea42 0103 	orr.w	r1, r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e038      	b.n	800bb1c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7f9 f81c 	bl	8004afc <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3308      	adds	r3, #8
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f001 fbaa 	bl	800d228 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	461a      	mov	r2, r3
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	f001 fc32 	bl	800d348 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6858      	ldr	r0, [r3, #4]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	f001 fc79 	bl	800d3e8 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	6892      	ldr	r2, [r2, #8]
 800bafe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	6892      	ldr	r2, [r2, #8]
 800bb0a:	f041 0101 	orr.w	r1, r1, #1
 800bb0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e01d      	b.n	800bb72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f815 	bl	800bb7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2202      	movs	r2, #2
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f000 f986 	bl	800be74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bb82:	bf00      	nop
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
	...

0800bb90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f042 0201 	orr.w	r2, r2, #1
 800bba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689a      	ldr	r2, [r3, #8]
 800bbae:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <HAL_TIM_Base_Start_IT+0x50>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b06      	cmp	r3, #6
 800bbb8:	d00b      	beq.n	800bbd2 <HAL_TIM_Base_Start_IT+0x42>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbc0:	d007      	beq.n	800bbd2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0201 	orr.w	r2, r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	00010007 	.word	0x00010007

0800bbe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d122      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	f003 0302 	and.w	r3, r3, #2
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d11b      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f06f 0202 	mvn.w	r2, #2
 800bc10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f905 	bl	800be36 <HAL_TIM_IC_CaptureCallback>
 800bc2c:	e005      	b.n	800bc3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f8f7 	bl	800be22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f908 	bl	800be4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0304 	and.w	r3, r3, #4
 800bc4a:	2b04      	cmp	r3, #4
 800bc4c:	d122      	bne.n	800bc94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d11b      	bne.n	800bc94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f06f 0204 	mvn.w	r2, #4
 800bc64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2202      	movs	r2, #2
 800bc6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f8db 	bl	800be36 <HAL_TIM_IC_CaptureCallback>
 800bc80:	e005      	b.n	800bc8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f8cd 	bl	800be22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f8de 	bl	800be4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	f003 0308 	and.w	r3, r3, #8
 800bc9e:	2b08      	cmp	r3, #8
 800bca0:	d122      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	f003 0308 	and.w	r3, r3, #8
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	d11b      	bne.n	800bce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f06f 0208 	mvn.w	r2, #8
 800bcb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2204      	movs	r2, #4
 800bcbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f8b1 	bl	800be36 <HAL_TIM_IC_CaptureCallback>
 800bcd4:	e005      	b.n	800bce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f8a3 	bl	800be22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f8b4 	bl	800be4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b10      	cmp	r3, #16
 800bcf4:	d122      	bne.n	800bd3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f003 0310 	and.w	r3, r3, #16
 800bd00:	2b10      	cmp	r3, #16
 800bd02:	d11b      	bne.n	800bd3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f06f 0210 	mvn.w	r2, #16
 800bd0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2208      	movs	r2, #8
 800bd12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f887 	bl	800be36 <HAL_TIM_IC_CaptureCallback>
 800bd28:	e005      	b.n	800bd36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f879 	bl	800be22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f88a 	bl	800be4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d10e      	bne.n	800bd68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d107      	bne.n	800bd68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f06f 0201 	mvn.w	r2, #1
 800bd60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7f7 fbea 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd72:	2b80      	cmp	r3, #128	; 0x80
 800bd74:	d10e      	bne.n	800bd94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd80:	2b80      	cmp	r3, #128	; 0x80
 800bd82:	d107      	bne.n	800bd94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f914 	bl	800bfbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda2:	d10e      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d107      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bdba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f907 	bl	800bfd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdcc:	2b40      	cmp	r3, #64	; 0x40
 800bdce:	d10e      	bne.n	800bdee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdda:	2b40      	cmp	r3, #64	; 0x40
 800bddc:	d107      	bne.n	800bdee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f838 	bl	800be5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	f003 0320 	and.w	r3, r3, #32
 800bdf8:	2b20      	cmp	r3, #32
 800bdfa:	d10e      	bne.n	800be1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	f003 0320 	and.w	r3, r3, #32
 800be06:	2b20      	cmp	r3, #32
 800be08:	d107      	bne.n	800be1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f06f 0220 	mvn.w	r2, #32
 800be12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f8c7 	bl	800bfa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be3e:	bf00      	nop
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be52:	bf00      	nop
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be5e:	b480      	push	{r7}
 800be60:	b083      	sub	sp, #12
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be66:	bf00      	nop
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
	...

0800be74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a40      	ldr	r2, [pc, #256]	; (800bf88 <TIM_Base_SetConfig+0x114>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d013      	beq.n	800beb4 <TIM_Base_SetConfig+0x40>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be92:	d00f      	beq.n	800beb4 <TIM_Base_SetConfig+0x40>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a3d      	ldr	r2, [pc, #244]	; (800bf8c <TIM_Base_SetConfig+0x118>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d00b      	beq.n	800beb4 <TIM_Base_SetConfig+0x40>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a3c      	ldr	r2, [pc, #240]	; (800bf90 <TIM_Base_SetConfig+0x11c>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d007      	beq.n	800beb4 <TIM_Base_SetConfig+0x40>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a3b      	ldr	r2, [pc, #236]	; (800bf94 <TIM_Base_SetConfig+0x120>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d003      	beq.n	800beb4 <TIM_Base_SetConfig+0x40>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a3a      	ldr	r2, [pc, #232]	; (800bf98 <TIM_Base_SetConfig+0x124>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d108      	bne.n	800bec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a2f      	ldr	r2, [pc, #188]	; (800bf88 <TIM_Base_SetConfig+0x114>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d01f      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bed4:	d01b      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a2c      	ldr	r2, [pc, #176]	; (800bf8c <TIM_Base_SetConfig+0x118>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d017      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a2b      	ldr	r2, [pc, #172]	; (800bf90 <TIM_Base_SetConfig+0x11c>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d013      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a2a      	ldr	r2, [pc, #168]	; (800bf94 <TIM_Base_SetConfig+0x120>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d00f      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a29      	ldr	r2, [pc, #164]	; (800bf98 <TIM_Base_SetConfig+0x124>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d00b      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a28      	ldr	r2, [pc, #160]	; (800bf9c <TIM_Base_SetConfig+0x128>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d007      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a27      	ldr	r2, [pc, #156]	; (800bfa0 <TIM_Base_SetConfig+0x12c>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d003      	beq.n	800bf0e <TIM_Base_SetConfig+0x9a>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a26      	ldr	r2, [pc, #152]	; (800bfa4 <TIM_Base_SetConfig+0x130>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d108      	bne.n	800bf20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	689a      	ldr	r2, [r3, #8]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a10      	ldr	r2, [pc, #64]	; (800bf88 <TIM_Base_SetConfig+0x114>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d00f      	beq.n	800bf6c <TIM_Base_SetConfig+0xf8>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a12      	ldr	r2, [pc, #72]	; (800bf98 <TIM_Base_SetConfig+0x124>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d00b      	beq.n	800bf6c <TIM_Base_SetConfig+0xf8>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <TIM_Base_SetConfig+0x128>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d007      	beq.n	800bf6c <TIM_Base_SetConfig+0xf8>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a10      	ldr	r2, [pc, #64]	; (800bfa0 <TIM_Base_SetConfig+0x12c>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_Base_SetConfig+0xf8>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a0f      	ldr	r2, [pc, #60]	; (800bfa4 <TIM_Base_SetConfig+0x130>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d103      	bne.n	800bf74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	691a      	ldr	r2, [r3, #16]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	615a      	str	r2, [r3, #20]
}
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	40012c00 	.word	0x40012c00
 800bf8c:	40000400 	.word	0x40000400
 800bf90:	40000800 	.word	0x40000800
 800bf94:	40000c00 	.word	0x40000c00
 800bf98:	40013400 	.word	0x40013400
 800bf9c:	40014000 	.word	0x40014000
 800bfa0:	40014400 	.word	0x40014400
 800bfa4:	40014800 	.word	0x40014800

0800bfa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e040      	b.n	800c078 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7f8 faa2 	bl	8004550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2224      	movs	r2, #36	; 0x24
 800c010:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0201 	bic.w	r2, r2, #1
 800c020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fab0 	bl	800c588 <UART_SetConfig>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d101      	bne.n	800c032 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	e022      	b.n	800c078 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fe16 	bl	800cc6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c04e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c05e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0201 	orr.w	r2, r2, #1
 800c06e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fe9d 	bl	800cdb0 <UART_CheckIdleState>
 800c076:	4603      	mov	r3, r0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e027      	b.n	800c0e2 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2224      	movs	r2, #36	; 0x24
 800c096:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f022 0201 	bic.w	r2, r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7f8 fb33 	bl	800472c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fe:	2b20      	cmp	r3, #32
 800c100:	d144      	bne.n	800c18c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <HAL_UART_Transmit_IT+0x22>
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e03d      	b.n	800c18e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d101      	bne.n	800c120 <HAL_UART_Transmit_IT+0x34>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e036      	b.n	800c18e <HAL_UART_Transmit_IT+0xa2>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	88fa      	ldrh	r2, [r7, #6]
 800c13a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2221      	movs	r2, #33	; 0x21
 800c14e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c158:	d107      	bne.n	800c16a <HAL_UART_Transmit_IT+0x7e>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d103      	bne.n	800c16a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4a0d      	ldr	r2, [pc, #52]	; (800c19c <HAL_UART_Transmit_IT+0xb0>)
 800c166:	665a      	str	r2, [r3, #100]	; 0x64
 800c168:	e002      	b.n	800c170 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	4a0c      	ldr	r2, [pc, #48]	; (800c1a0 <HAL_UART_Transmit_IT+0xb4>)
 800c16e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c186:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	e000      	b.n	800c18e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800c18c:	2302      	movs	r3, #2
  }
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	0800d011 	.word	0x0800d011
 800c1a0:	0800cf9d 	.word	0x0800cf9d

0800c1a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1b6:	2b20      	cmp	r3, #32
 800c1b8:	f040 808a 	bne.w	800c2d0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <HAL_UART_Receive_IT+0x24>
 800c1c2:	88fb      	ldrh	r3, [r7, #6]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e082      	b.n	800c2d2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d101      	bne.n	800c1da <HAL_UART_Receive_IT+0x36>
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e07b      	b.n	800c2d2 <HAL_UART_Receive_IT+0x12e>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	88fa      	ldrh	r2, [r7, #6]
 800c1ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	88fa      	ldrh	r2, [r7, #6]
 800c1f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c206:	d10e      	bne.n	800c226 <HAL_UART_Receive_IT+0x82>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d105      	bne.n	800c21c <HAL_UART_Receive_IT+0x78>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c21a:	e02d      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	22ff      	movs	r2, #255	; 0xff
 800c220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c224:	e028      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10d      	bne.n	800c24a <HAL_UART_Receive_IT+0xa6>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d104      	bne.n	800c240 <HAL_UART_Receive_IT+0x9c>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	22ff      	movs	r2, #255	; 0xff
 800c23a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c23e:	e01b      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	227f      	movs	r2, #127	; 0x7f
 800c244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c248:	e016      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c252:	d10d      	bne.n	800c270 <HAL_UART_Receive_IT+0xcc>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d104      	bne.n	800c266 <HAL_UART_Receive_IT+0xc2>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	227f      	movs	r2, #127	; 0x7f
 800c260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c264:	e008      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	223f      	movs	r2, #63	; 0x3f
 800c26a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c26e:	e003      	b.n	800c278 <HAL_UART_Receive_IT+0xd4>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2222      	movs	r2, #34	; 0x22
 800c282:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f042 0201 	orr.w	r2, r2, #1
 800c292:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c29c:	d107      	bne.n	800c2ae <HAL_UART_Receive_IT+0x10a>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d103      	bne.n	800c2ae <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	4a0d      	ldr	r2, [pc, #52]	; (800c2e0 <HAL_UART_Receive_IT+0x13c>)
 800c2aa:	661a      	str	r2, [r3, #96]	; 0x60
 800c2ac:	e002      	b.n	800c2b4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4a0c      	ldr	r2, [pc, #48]	; (800c2e4 <HAL_UART_Receive_IT+0x140>)
 800c2b2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c2ca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e000      	b.n	800c2d2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800c2d0:	2302      	movs	r3, #2
  }
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	0800d169 	.word	0x0800d169
 800c2e4:	0800d0bf 	.word	0x0800d0bf

0800c2e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c308:	69fa      	ldr	r2, [r7, #28]
 800c30a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c30e:	4013      	ands	r3, r2
 800c310:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d113      	bne.n	800c340 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00e      	beq.n	800c340 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	f003 0320 	and.w	r3, r3, #32
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 8114 	beq.w	800c55e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	4798      	blx	r3
      }
      return;
 800c33e:	e10e      	b.n	800c55e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	f000 80d6 	beq.w	800c4f4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d105      	bne.n	800c35e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 80cb 	beq.w	800c4f4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00e      	beq.n	800c386 <HAL_UART_IRQHandler+0x9e>
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2201      	movs	r2, #1
 800c378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37e:	f043 0201 	orr.w	r2, r3, #1
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00e      	beq.n	800c3ae <HAL_UART_IRQHandler+0xc6>
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d009      	beq.n	800c3ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3a6:	f043 0204 	orr.w	r2, r3, #4
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00e      	beq.n	800c3d6 <HAL_UART_IRQHandler+0xee>
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2204      	movs	r2, #4
 800c3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ce:	f043 0202 	orr.w	r2, r3, #2
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	f003 0308 	and.w	r3, r3, #8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d013      	beq.n	800c408 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d104      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d009      	beq.n	800c408 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2208      	movs	r2, #8
 800c3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c400:	f043 0208 	orr.w	r2, r3, #8
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00f      	beq.n	800c432 <HAL_UART_IRQHandler+0x14a>
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42a:	f043 0220 	orr.w	r2, r3, #32
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 8093 	beq.w	800c562 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00c      	beq.n	800c460 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	f003 0320 	and.w	r3, r3, #32
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c464:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c470:	2b40      	cmp	r3, #64	; 0x40
 800c472:	d004      	beq.n	800c47e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d031      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fd56 	bl	800cf30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48e:	2b40      	cmp	r3, #64	; 0x40
 800c490:	d123      	bne.n	800c4da <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d013      	beq.n	800c4d2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ae:	4a30      	ldr	r2, [pc, #192]	; (800c570 <HAL_UART_IRQHandler+0x288>)
 800c4b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f9 ff0c 	bl	80062d4 <HAL_DMA_Abort_IT>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d016      	beq.n	800c4f0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d0:	e00e      	b.n	800c4f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7f8 fd5c 	bl	8004f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d8:	e00a      	b.n	800c4f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7f8 fd58 	bl	8004f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e0:	e006      	b.n	800c4f0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f8 fd54 	bl	8004f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800c4ee:	e038      	b.n	800c562 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f0:	bf00      	nop
    return;
 800c4f2:	e036      	b.n	800c562 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00d      	beq.n	800c51a <HAL_UART_IRQHandler+0x232>
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d008      	beq.n	800c51a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fe7d 	bl	800d212 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c518:	e026      	b.n	800c568 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00d      	beq.n	800c540 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c532:	2b00      	cmp	r3, #0
 800c534:	d017      	beq.n	800c566 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
    }
    return;
 800c53e:	e012      	b.n	800c566 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <HAL_UART_IRQHandler+0x280>
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c550:	2b00      	cmp	r3, #0
 800c552:	d009      	beq.n	800c568 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fd99 	bl	800d08c <UART_EndTransmit_IT>
    return;
 800c55a:	bf00      	nop
 800c55c:	e004      	b.n	800c568 <HAL_UART_IRQHandler+0x280>
      return;
 800c55e:	bf00      	nop
 800c560:	e002      	b.n	800c568 <HAL_UART_IRQHandler+0x280>
    return;
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <HAL_UART_IRQHandler+0x280>
    return;
 800c566:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c568:	3720      	adds	r7, #32
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	0800cf71 	.word	0x0800cf71

0800c574 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c588:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c58c:	b08a      	sub	sp, #40	; 0x28
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c592:	2300      	movs	r3, #0
 800c594:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689a      	ldr	r2, [r3, #8]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	431a      	orrs	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	69db      	ldr	r3, [r3, #28]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	4bb8      	ldr	r3, [pc, #736]	; (800c8a0 <UART_SetConfig+0x318>)
 800c5be:	4013      	ands	r3, r2
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	6812      	ldr	r2, [r2, #0]
 800c5c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5c6:	430b      	orrs	r3, r1
 800c5c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4aae      	ldr	r2, [pc, #696]	; (800c8a4 <UART_SetConfig+0x31c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d004      	beq.n	800c5fa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60a:	430a      	orrs	r2, r1
 800c60c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4aa5      	ldr	r2, [pc, #660]	; (800c8a8 <UART_SetConfig+0x320>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d126      	bne.n	800c666 <UART_SetConfig+0xde>
 800c618:	4ba4      	ldr	r3, [pc, #656]	; (800c8ac <UART_SetConfig+0x324>)
 800c61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b03      	cmp	r3, #3
 800c624:	d81a      	bhi.n	800c65c <UART_SetConfig+0xd4>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <UART_SetConfig+0xa4>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c63d 	.word	0x0800c63d
 800c630:	0800c64d 	.word	0x0800c64d
 800c634:	0800c645 	.word	0x0800c645
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	2301      	movs	r3, #1
 800c63e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c642:	e105      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c644:	2302      	movs	r3, #2
 800c646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c64a:	e101      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c64c:	2304      	movs	r3, #4
 800c64e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c652:	e0fd      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c654:	2308      	movs	r3, #8
 800c656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c65a:	e0f9      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c65c:	2310      	movs	r3, #16
 800c65e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c662:	bf00      	nop
 800c664:	e0f4      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a91      	ldr	r2, [pc, #580]	; (800c8b0 <UART_SetConfig+0x328>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d138      	bne.n	800c6e2 <UART_SetConfig+0x15a>
 800c670:	4b8e      	ldr	r3, [pc, #568]	; (800c8ac <UART_SetConfig+0x324>)
 800c672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c676:	f003 030c 	and.w	r3, r3, #12
 800c67a:	2b0c      	cmp	r3, #12
 800c67c:	d82c      	bhi.n	800c6d8 <UART_SetConfig+0x150>
 800c67e:	a201      	add	r2, pc, #4	; (adr r2, 800c684 <UART_SetConfig+0xfc>)
 800c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c684:	0800c6b9 	.word	0x0800c6b9
 800c688:	0800c6d9 	.word	0x0800c6d9
 800c68c:	0800c6d9 	.word	0x0800c6d9
 800c690:	0800c6d9 	.word	0x0800c6d9
 800c694:	0800c6c9 	.word	0x0800c6c9
 800c698:	0800c6d9 	.word	0x0800c6d9
 800c69c:	0800c6d9 	.word	0x0800c6d9
 800c6a0:	0800c6d9 	.word	0x0800c6d9
 800c6a4:	0800c6c1 	.word	0x0800c6c1
 800c6a8:	0800c6d9 	.word	0x0800c6d9
 800c6ac:	0800c6d9 	.word	0x0800c6d9
 800c6b0:	0800c6d9 	.word	0x0800c6d9
 800c6b4:	0800c6d1 	.word	0x0800c6d1
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6be:	e0c7      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6c6:	e0c3      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6ce:	e0bf      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6d6:	e0bb      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c6d8:	2310      	movs	r3, #16
 800c6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6de:	bf00      	nop
 800c6e0:	e0b6      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a73      	ldr	r2, [pc, #460]	; (800c8b4 <UART_SetConfig+0x32c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d125      	bne.n	800c738 <UART_SetConfig+0x1b0>
 800c6ec:	4b6f      	ldr	r3, [pc, #444]	; (800c8ac <UART_SetConfig+0x324>)
 800c6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c6f6:	2b10      	cmp	r3, #16
 800c6f8:	d011      	beq.n	800c71e <UART_SetConfig+0x196>
 800c6fa:	2b10      	cmp	r3, #16
 800c6fc:	d802      	bhi.n	800c704 <UART_SetConfig+0x17c>
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d005      	beq.n	800c70e <UART_SetConfig+0x186>
 800c702:	e014      	b.n	800c72e <UART_SetConfig+0x1a6>
 800c704:	2b20      	cmp	r3, #32
 800c706:	d006      	beq.n	800c716 <UART_SetConfig+0x18e>
 800c708:	2b30      	cmp	r3, #48	; 0x30
 800c70a:	d00c      	beq.n	800c726 <UART_SetConfig+0x19e>
 800c70c:	e00f      	b.n	800c72e <UART_SetConfig+0x1a6>
 800c70e:	2300      	movs	r3, #0
 800c710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c714:	e09c      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c716:	2302      	movs	r3, #2
 800c718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c71c:	e098      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c71e:	2304      	movs	r3, #4
 800c720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c724:	e094      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c726:	2308      	movs	r3, #8
 800c728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c72c:	e090      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c72e:	2310      	movs	r3, #16
 800c730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c734:	bf00      	nop
 800c736:	e08b      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a5e      	ldr	r2, [pc, #376]	; (800c8b8 <UART_SetConfig+0x330>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d125      	bne.n	800c78e <UART_SetConfig+0x206>
 800c742:	4b5a      	ldr	r3, [pc, #360]	; (800c8ac <UART_SetConfig+0x324>)
 800c744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c74c:	2b40      	cmp	r3, #64	; 0x40
 800c74e:	d011      	beq.n	800c774 <UART_SetConfig+0x1ec>
 800c750:	2b40      	cmp	r3, #64	; 0x40
 800c752:	d802      	bhi.n	800c75a <UART_SetConfig+0x1d2>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d005      	beq.n	800c764 <UART_SetConfig+0x1dc>
 800c758:	e014      	b.n	800c784 <UART_SetConfig+0x1fc>
 800c75a:	2b80      	cmp	r3, #128	; 0x80
 800c75c:	d006      	beq.n	800c76c <UART_SetConfig+0x1e4>
 800c75e:	2bc0      	cmp	r3, #192	; 0xc0
 800c760:	d00c      	beq.n	800c77c <UART_SetConfig+0x1f4>
 800c762:	e00f      	b.n	800c784 <UART_SetConfig+0x1fc>
 800c764:	2300      	movs	r3, #0
 800c766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c76a:	e071      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c76c:	2302      	movs	r3, #2
 800c76e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c772:	e06d      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c774:	2304      	movs	r3, #4
 800c776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c77a:	e069      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c77c:	2308      	movs	r3, #8
 800c77e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c782:	e065      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c784:	2310      	movs	r3, #16
 800c786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c78a:	bf00      	nop
 800c78c:	e060      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a4a      	ldr	r2, [pc, #296]	; (800c8bc <UART_SetConfig+0x334>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d129      	bne.n	800c7ec <UART_SetConfig+0x264>
 800c798:	4b44      	ldr	r3, [pc, #272]	; (800c8ac <UART_SetConfig+0x324>)
 800c79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c79e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a6:	d014      	beq.n	800c7d2 <UART_SetConfig+0x24a>
 800c7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ac:	d802      	bhi.n	800c7b4 <UART_SetConfig+0x22c>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d007      	beq.n	800c7c2 <UART_SetConfig+0x23a>
 800c7b2:	e016      	b.n	800c7e2 <UART_SetConfig+0x25a>
 800c7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b8:	d007      	beq.n	800c7ca <UART_SetConfig+0x242>
 800c7ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7be:	d00c      	beq.n	800c7da <UART_SetConfig+0x252>
 800c7c0:	e00f      	b.n	800c7e2 <UART_SetConfig+0x25a>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7c8:	e042      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7d0:	e03e      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c7d2:	2304      	movs	r3, #4
 800c7d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7d8:	e03a      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c7da:	2308      	movs	r3, #8
 800c7dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7e0:	e036      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c7e2:	2310      	movs	r3, #16
 800c7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7e8:	bf00      	nop
 800c7ea:	e031      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a2c      	ldr	r2, [pc, #176]	; (800c8a4 <UART_SetConfig+0x31c>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d129      	bne.n	800c84a <UART_SetConfig+0x2c2>
 800c7f6:	4b2d      	ldr	r3, [pc, #180]	; (800c8ac <UART_SetConfig+0x324>)
 800c7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c804:	d014      	beq.n	800c830 <UART_SetConfig+0x2a8>
 800c806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c80a:	d802      	bhi.n	800c812 <UART_SetConfig+0x28a>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d007      	beq.n	800c820 <UART_SetConfig+0x298>
 800c810:	e016      	b.n	800c840 <UART_SetConfig+0x2b8>
 800c812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c816:	d007      	beq.n	800c828 <UART_SetConfig+0x2a0>
 800c818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c81c:	d00c      	beq.n	800c838 <UART_SetConfig+0x2b0>
 800c81e:	e00f      	b.n	800c840 <UART_SetConfig+0x2b8>
 800c820:	2300      	movs	r3, #0
 800c822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c826:	e013      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c828:	2302      	movs	r3, #2
 800c82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c82e:	e00f      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c830:	2304      	movs	r3, #4
 800c832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c836:	e00b      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c838:	2308      	movs	r3, #8
 800c83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c83e:	e007      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c840:	2310      	movs	r3, #16
 800c842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c846:	bf00      	nop
 800c848:	e002      	b.n	800c850 <UART_SetConfig+0x2c8>
 800c84a:	2310      	movs	r3, #16
 800c84c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a13      	ldr	r2, [pc, #76]	; (800c8a4 <UART_SetConfig+0x31c>)
 800c856:	4293      	cmp	r3, r2
 800c858:	f040 80fe 	bne.w	800ca58 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c85c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c860:	2b08      	cmp	r3, #8
 800c862:	d837      	bhi.n	800c8d4 <UART_SetConfig+0x34c>
 800c864:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <UART_SetConfig+0x2e4>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c891 	.word	0x0800c891
 800c870:	0800c8d5 	.word	0x0800c8d5
 800c874:	0800c899 	.word	0x0800c899
 800c878:	0800c8d5 	.word	0x0800c8d5
 800c87c:	0800c8c5 	.word	0x0800c8c5
 800c880:	0800c8d5 	.word	0x0800c8d5
 800c884:	0800c8d5 	.word	0x0800c8d5
 800c888:	0800c8d5 	.word	0x0800c8d5
 800c88c:	0800c8cd 	.word	0x0800c8cd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c890:	f7fc fdc6 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800c894:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c896:	e020      	b.n	800c8da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c898:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <UART_SetConfig+0x338>)
 800c89a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c89c:	e01d      	b.n	800c8da <UART_SetConfig+0x352>
 800c89e:	bf00      	nop
 800c8a0:	efff69f3 	.word	0xefff69f3
 800c8a4:	40008000 	.word	0x40008000
 800c8a8:	40013800 	.word	0x40013800
 800c8ac:	40021000 	.word	0x40021000
 800c8b0:	40004400 	.word	0x40004400
 800c8b4:	40004800 	.word	0x40004800
 800c8b8:	40004c00 	.word	0x40004c00
 800c8bc:	40005000 	.word	0x40005000
 800c8c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c8c4:	f7fc fd16 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800c8c8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c8ca:	e006      	b.n	800c8da <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c8cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c8d2:	e002      	b.n	800c8da <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	76fb      	strb	r3, [r7, #27]
        break;
 800c8d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 81b9 	beq.w	800cc54 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	4413      	add	r3, r2
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d305      	bcc.n	800c8fe <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d902      	bls.n	800c904 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	76fb      	strb	r3, [r7, #27]
 800c902:	e1a7      	b.n	800cc54 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800c904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c908:	2b08      	cmp	r3, #8
 800c90a:	f200 8092 	bhi.w	800ca32 <UART_SetConfig+0x4aa>
 800c90e:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <UART_SetConfig+0x38c>)
 800c910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800ca33 	.word	0x0800ca33
 800c91c:	0800c987 	.word	0x0800c987
 800c920:	0800ca33 	.word	0x0800ca33
 800c924:	0800c9bb 	.word	0x0800c9bb
 800c928:	0800ca33 	.word	0x0800ca33
 800c92c:	0800ca33 	.word	0x0800ca33
 800c930:	0800ca33 	.word	0x0800ca33
 800c934:	0800ca09 	.word	0x0800ca09
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800c938:	f7fc fd72 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800c93c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	4619      	mov	r1, r3
 800c942:	f04f 0200 	mov.w	r2, #0
 800c946:	f04f 0300 	mov.w	r3, #0
 800c94a:	f04f 0400 	mov.w	r4, #0
 800c94e:	0214      	lsls	r4, r2, #8
 800c950:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c954:	020b      	lsls	r3, r1, #8
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	6852      	ldr	r2, [r2, #4]
 800c95a:	0852      	lsrs	r2, r2, #1
 800c95c:	4611      	mov	r1, r2
 800c95e:	f04f 0200 	mov.w	r2, #0
 800c962:	eb13 0b01 	adds.w	fp, r3, r1
 800c966:	eb44 0c02 	adc.w	ip, r4, r2
 800c96a:	4658      	mov	r0, fp
 800c96c:	4661      	mov	r1, ip
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f04f 0400 	mov.w	r4, #0
 800c976:	461a      	mov	r2, r3
 800c978:	4623      	mov	r3, r4
 800c97a:	f7f4 f8d7 	bl	8000b2c <__aeabi_uldivmod>
 800c97e:	4603      	mov	r3, r0
 800c980:	460c      	mov	r4, r1
 800c982:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c984:	e058      	b.n	800ca38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	085b      	lsrs	r3, r3, #1
 800c98c:	f04f 0400 	mov.w	r4, #0
 800c990:	49ae      	ldr	r1, [pc, #696]	; (800cc4c <UART_SetConfig+0x6c4>)
 800c992:	f04f 0200 	mov.w	r2, #0
 800c996:	eb13 0b01 	adds.w	fp, r3, r1
 800c99a:	eb44 0c02 	adc.w	ip, r4, r2
 800c99e:	4658      	mov	r0, fp
 800c9a0:	4661      	mov	r1, ip
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f04f 0400 	mov.w	r4, #0
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	f7f4 f8bd 	bl	8000b2c <__aeabi_uldivmod>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c9b8:	e03e      	b.n	800ca38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800c9ba:	f7fc fc9b 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800c9be:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f04f 0200 	mov.w	r2, #0
 800c9c8:	f04f 0300 	mov.w	r3, #0
 800c9cc:	f04f 0400 	mov.w	r4, #0
 800c9d0:	0214      	lsls	r4, r2, #8
 800c9d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c9d6:	020b      	lsls	r3, r1, #8
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6852      	ldr	r2, [r2, #4]
 800c9dc:	0852      	lsrs	r2, r2, #1
 800c9de:	4611      	mov	r1, r2
 800c9e0:	f04f 0200 	mov.w	r2, #0
 800c9e4:	eb13 0b01 	adds.w	fp, r3, r1
 800c9e8:	eb44 0c02 	adc.w	ip, r4, r2
 800c9ec:	4658      	mov	r0, fp
 800c9ee:	4661      	mov	r1, ip
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f04f 0400 	mov.w	r4, #0
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4623      	mov	r3, r4
 800c9fc:	f7f4 f896 	bl	8000b2c <__aeabi_uldivmod>
 800ca00:	4603      	mov	r3, r0
 800ca02:	460c      	mov	r4, r1
 800ca04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800ca06:	e017      	b.n	800ca38 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	085b      	lsrs	r3, r3, #1
 800ca0e:	f04f 0400 	mov.w	r4, #0
 800ca12:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800ca16:	f144 0100 	adc.w	r1, r4, #0
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f04f 0400 	mov.w	r4, #0
 800ca22:	461a      	mov	r2, r3
 800ca24:	4623      	mov	r3, r4
 800ca26:	f7f4 f881 	bl	8000b2c <__aeabi_uldivmod>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800ca30:	e002      	b.n	800ca38 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	76fb      	strb	r3, [r7, #27]
            break;
 800ca36:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca3e:	d308      	bcc.n	800ca52 <UART_SetConfig+0x4ca>
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca46:	d204      	bcs.n	800ca52 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	69fa      	ldr	r2, [r7, #28]
 800ca4e:	60da      	str	r2, [r3, #12]
 800ca50:	e100      	b.n	800cc54 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	76fb      	strb	r3, [r7, #27]
 800ca56:	e0fd      	b.n	800cc54 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	69db      	ldr	r3, [r3, #28]
 800ca5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca60:	f040 8084 	bne.w	800cb6c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800ca64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d85f      	bhi.n	800cb2c <UART_SetConfig+0x5a4>
 800ca6c:	a201      	add	r2, pc, #4	; (adr r2, 800ca74 <UART_SetConfig+0x4ec>)
 800ca6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca72:	bf00      	nop
 800ca74:	0800ca99 	.word	0x0800ca99
 800ca78:	0800cab9 	.word	0x0800cab9
 800ca7c:	0800cad9 	.word	0x0800cad9
 800ca80:	0800cb2d 	.word	0x0800cb2d
 800ca84:	0800caf5 	.word	0x0800caf5
 800ca88:	0800cb2d 	.word	0x0800cb2d
 800ca8c:	0800cb2d 	.word	0x0800cb2d
 800ca90:	0800cb2d 	.word	0x0800cb2d
 800ca94:	0800cb15 	.word	0x0800cb15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca98:	f7fc fcc2 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800ca9c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	005a      	lsls	r2, r3, #1
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	441a      	add	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cab6:	e03c      	b.n	800cb32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cab8:	f7fc fcc8 	bl	800944c <HAL_RCC_GetPCLK2Freq>
 800cabc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	005a      	lsls	r2, r3, #1
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	085b      	lsrs	r3, r3, #1
 800cac8:	441a      	add	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cad6:	e02c      	b.n	800cb32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	085b      	lsrs	r3, r3, #1
 800cade:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800cae2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	6852      	ldr	r2, [r2, #4]
 800caea:	fbb3 f3f2 	udiv	r3, r3, r2
 800caee:	b29b      	uxth	r3, r3
 800caf0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800caf2:	e01e      	b.n	800cb32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caf4:	f7fc fbfe 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800caf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	005a      	lsls	r2, r3, #1
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	085b      	lsrs	r3, r3, #1
 800cb04:	441a      	add	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cb12:	e00e      	b.n	800cb32 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	085b      	lsrs	r3, r3, #1
 800cb1a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cb2a:	e002      	b.n	800cb32 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	76fb      	strb	r3, [r7, #27]
        break;
 800cb30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	2b0f      	cmp	r3, #15
 800cb36:	d916      	bls.n	800cb66 <UART_SetConfig+0x5de>
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb3e:	d212      	bcs.n	800cb66 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	f023 030f 	bic.w	r3, r3, #15
 800cb48:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	085b      	lsrs	r3, r3, #1
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	89fb      	ldrh	r3, [r7, #14]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	89fa      	ldrh	r2, [r7, #14]
 800cb62:	60da      	str	r2, [r3, #12]
 800cb64:	e076      	b.n	800cc54 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	76fb      	strb	r3, [r7, #27]
 800cb6a:	e073      	b.n	800cc54 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800cb6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb70:	2b08      	cmp	r3, #8
 800cb72:	d85c      	bhi.n	800cc2e <UART_SetConfig+0x6a6>
 800cb74:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <UART_SetConfig+0x5f4>)
 800cb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7a:	bf00      	nop
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cbbf 	.word	0x0800cbbf
 800cb84:	0800cbdd 	.word	0x0800cbdd
 800cb88:	0800cc2f 	.word	0x0800cc2f
 800cb8c:	0800cbf9 	.word	0x0800cbf9
 800cb90:	0800cc2f 	.word	0x0800cc2f
 800cb94:	0800cc2f 	.word	0x0800cc2f
 800cb98:	0800cc2f 	.word	0x0800cc2f
 800cb9c:	0800cc17 	.word	0x0800cc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cba0:	f7fc fc3e 	bl	8009420 <HAL_RCC_GetPCLK1Freq>
 800cba4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	085a      	lsrs	r2, r3, #1
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	441a      	add	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cbbc:	e03a      	b.n	800cc34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbbe:	f7fc fc45 	bl	800944c <HAL_RCC_GetPCLK2Freq>
 800cbc2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	085a      	lsrs	r2, r3, #1
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	441a      	add	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cbda:	e02b      	b.n	800cc34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	085b      	lsrs	r3, r3, #1
 800cbe2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800cbe6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6852      	ldr	r2, [r2, #4]
 800cbee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cbf6:	e01d      	b.n	800cc34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbf8:	f7fc fb7c 	bl	80092f4 <HAL_RCC_GetSysClockFreq>
 800cbfc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	085a      	lsrs	r2, r3, #1
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	441a      	add	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc14:	e00e      	b.n	800cc34 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	085b      	lsrs	r3, r3, #1
 800cc1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc2c:	e002      	b.n	800cc34 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	76fb      	strb	r3, [r7, #27]
        break;
 800cc32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b0f      	cmp	r3, #15
 800cc38:	d90a      	bls.n	800cc50 <UART_SetConfig+0x6c8>
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc40:	d206      	bcs.n	800cc50 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	69fa      	ldr	r2, [r7, #28]
 800cc48:	60da      	str	r2, [r3, #12]
 800cc4a:	e003      	b.n	800cc54 <UART_SetConfig+0x6cc>
 800cc4c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cc60:	7efb      	ldrb	r3, [r7, #27]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3728      	adds	r7, #40	; 0x28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800cc6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00a      	beq.n	800cc96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	430a      	orrs	r2, r1
 800cc94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00a      	beq.n	800ccb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	430a      	orrs	r2, r1
 800ccb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	f003 0308 	and.w	r3, r3, #8
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	f003 0310 	and.w	r3, r3, #16
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00a      	beq.n	800cd1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	689b      	ldr	r3, [r3, #8]
 800cd0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	f003 0320 	and.w	r3, r3, #32
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01a      	beq.n	800cd82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd6a:	d10a      	bne.n	800cd82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00a      	beq.n	800cda4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	605a      	str	r2, [r3, #4]
  }
}
 800cda4:	bf00      	nop
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af02      	add	r7, sp, #8
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cdbe:	f7f8 f987 	bl	80050d0 <HAL_GetTick>
 800cdc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 0308 	and.w	r3, r3, #8
 800cdce:	2b08      	cmp	r3, #8
 800cdd0:	d10e      	bne.n	800cdf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f82a 	bl	800ce3a <UART_WaitOnFlagUntilTimeout>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdec:	2303      	movs	r3, #3
 800cdee:	e020      	b.n	800ce32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 0304 	and.w	r3, r3, #4
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d10e      	bne.n	800ce1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f814 	bl	800ce3a <UART_WaitOnFlagUntilTimeout>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e00a      	b.n	800ce32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2220      	movs	r2, #32
 800ce20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2220      	movs	r2, #32
 800ce26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	603b      	str	r3, [r7, #0]
 800ce46:	4613      	mov	r3, r2
 800ce48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce4a:	e05d      	b.n	800cf08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce52:	d059      	beq.n	800cf08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce54:	f7f8 f93c 	bl	80050d0 <HAL_GetTick>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d302      	bcc.n	800ce6a <UART_WaitOnFlagUntilTimeout+0x30>
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d11b      	bne.n	800cea2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689a      	ldr	r2, [r3, #8]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f022 0201 	bic.w	r2, r2, #1
 800ce88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2220      	movs	r2, #32
 800ce94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e042      	b.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d02b      	beq.n	800cf08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	69db      	ldr	r3, [r3, #28]
 800ceb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cebe:	d123      	bne.n	800cf08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cec8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ced8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f022 0201 	bic.w	r2, r2, #1
 800cee8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2220      	movs	r2, #32
 800ceee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2220      	movs	r2, #32
 800cef4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2220      	movs	r2, #32
 800cefa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e00f      	b.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	69da      	ldr	r2, [r3, #28]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4013      	ands	r3, r2
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	bf0c      	ite	eq
 800cf18:	2301      	moveq	r3, #1
 800cf1a:	2300      	movne	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	461a      	mov	r2, r3
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d092      	beq.n	800ce4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cf46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	689a      	ldr	r2, [r3, #8]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 0201 	bic.w	r2, r2, #1
 800cf56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	661a      	str	r2, [r3, #96]	; 0x60
}
 800cf64:	bf00      	nop
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7f7 fffe 	bl	8004f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf94:	bf00      	nop
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa8:	2b21      	cmp	r3, #33	; 0x21
 800cfaa:	d12b      	bne.n	800d004 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d110      	bne.n	800cfda <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfc6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfd6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cfd8:	e014      	b.n	800d004 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfde:	781a      	ldrb	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	b292      	uxth	r2, r2
 800cfe6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	3b01      	subs	r3, #1
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01c:	2b21      	cmp	r3, #33	; 0x21
 800d01e:	d12f      	bne.n	800d080 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d026:	b29b      	uxth	r3, r3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d110      	bne.n	800d04e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d03a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d04a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d04c:	e018      	b.n	800d080 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d052:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	881a      	ldrh	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d060:	b292      	uxth	r2, r2
 800d062:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d068:	1c9a      	adds	r2, r3, #2
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d074:	b29b      	uxth	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	b29a      	uxth	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d080:	bf00      	nop
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff fa5f 	bl	800c574 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0cc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0d2:	2b22      	cmp	r3, #34	; 0x22
 800d0d4:	d13a      	bne.n	800d14c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0dc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d0de:	89bb      	ldrh	r3, [r7, #12]
 800d0e0:	b2d9      	uxtb	r1, r3
 800d0e2:	89fb      	ldrh	r3, [r7, #14]
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ea:	400a      	ands	r2, r1
 800d0ec:	b2d2      	uxtb	r2, r2
 800d0ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d100:	b29b      	uxth	r3, r3
 800d102:	3b01      	subs	r3, #1
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d112:	b29b      	uxth	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	d123      	bne.n	800d160 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d126:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 0201 	bic.w	r2, r2, #1
 800d136:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2220      	movs	r2, #32
 800d13c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7f7 fec5 	bl	8004ed4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d14a:	e009      	b.n	800d160 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	8b1b      	ldrh	r3, [r3, #24]
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f042 0208 	orr.w	r2, r2, #8
 800d15c:	b292      	uxth	r2, r2
 800d15e:	831a      	strh	r2, [r3, #24]
}
 800d160:	bf00      	nop
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d176:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d17c:	2b22      	cmp	r3, #34	; 0x22
 800d17e:	d13a      	bne.n	800d1f6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d186:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d18c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d18e:	89ba      	ldrh	r2, [r7, #12]
 800d190:	89fb      	ldrh	r3, [r7, #14]
 800d192:	4013      	ands	r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d19e:	1c9a      	adds	r2, r3, #2
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d123      	bne.n	800d20a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d1d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689a      	ldr	r2, [r3, #8]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f022 0201 	bic.w	r2, r2, #1
 800d1e0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7f7 fe70 	bl	8004ed4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d1f4:	e009      	b.n	800d20a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	8b1b      	ldrh	r3, [r3, #24]
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f042 0208 	orr.w	r2, r2, #8
 800d206:	b292      	uxth	r2, r2
 800d208:	831a      	strh	r2, [r3, #24]
}
 800d20a:	bf00      	nop
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d212:	b480      	push	{r7}
 800d214:	b083      	sub	sp, #12
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d21a:	bf00      	nop
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	6812      	ldr	r2, [r2, #0]
 800d240:	f023 0101 	bic.w	r1, r3, #1
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	2b08      	cmp	r3, #8
 800d250:	d102      	bne.n	800d258 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d252:	2340      	movs	r3, #64	; 0x40
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	e001      	b.n	800d25c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d258:	2300      	movs	r3, #0
 800d25a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d268:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d26e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d274:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d27a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d280:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d286:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d28c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d292:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d298:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d2c0:	4b20      	ldr	r3, [pc, #128]	; (800d344 <FMC_NORSRAM_Init+0x11c>)
 800d2c2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ca:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d2d2:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d2da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	43db      	mvns	r3, r3
 800d2ea:	ea02 0103 	and.w	r1, r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	4319      	orrs	r1, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d304:	d10c      	bne.n	800d320 <FMC_NORSRAM_Init+0xf8>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d008      	beq.n	800d320 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31a:	431a      	orrs	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d330:	431a      	orrs	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	371c      	adds	r7, #28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	0008fb7f 	.word	0x0008fb7f

0800d348 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d348:	b480      	push	{r7}
 800d34a:	b087      	sub	sp, #28
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	431a      	orrs	r2, r3
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	431a      	orrs	r2, r3
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	041b      	lsls	r3, r3, #16
 800d37c:	431a      	orrs	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	3b01      	subs	r3, #1
 800d384:	051b      	lsls	r3, r3, #20
 800d386:	431a      	orrs	r2, r3
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	699b      	ldr	r3, [r3, #24]
 800d38c:	3b02      	subs	r3, #2
 800d38e:	061b      	lsls	r3, r3, #24
 800d390:	431a      	orrs	r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	4313      	orrs	r3, r2
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	3201      	adds	r2, #1
 800d39c:	4319      	orrs	r1, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3b0:	d113      	bne.n	800d3da <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d3ba:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	695b      	ldr	r3, [r3, #20]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	051b      	lsls	r3, r3, #20
 800d3c4:	697a      	ldr	r2, [r7, #20]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3fc:	d11d      	bne.n	800d43a <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d406:	4b13      	ldr	r3, [pc, #76]	; (800d454 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d408:	4013      	ands	r3, r2
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	6811      	ldr	r1, [r2, #0]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	6852      	ldr	r2, [r2, #4]
 800d412:	0112      	lsls	r2, r2, #4
 800d414:	4311      	orrs	r1, r2
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	6892      	ldr	r2, [r2, #8]
 800d41a:	0212      	lsls	r2, r2, #8
 800d41c:	4311      	orrs	r1, r2
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	69d2      	ldr	r2, [r2, #28]
 800d422:	4311      	orrs	r1, r2
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	6912      	ldr	r2, [r2, #16]
 800d428:	0412      	lsls	r2, r2, #16
 800d42a:	430a      	orrs	r2, r1
 800d42c:	ea43 0102 	orr.w	r1, r3, r2
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d438:	e005      	b.n	800d446 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	cff00000 	.word	0xcff00000

0800d458 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d458:	b084      	sub	sp, #16
 800d45a:	b480      	push	{r7}
 800d45c:	b085      	sub	sp, #20
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	f107 001c 	add.w	r0, r7, #28
 800d466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	4313      	orrs	r3, r2
 800d474:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d476:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800d47a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d47e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d482:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d486:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	431a      	orrs	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	b004      	add	sp, #16
 800d4b0:	4770      	bx	lr

0800d4b2 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2203      	movs	r2, #3
 800d4d8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d4da:	2002      	movs	r0, #2
 800d4dc:	f7f7 fe04 	bl	80050e8 <HAL_Delay>

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d4ea:	b480      	push	{r7}
 800d4ec:	b083      	sub	sp, #12
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 0303 	and.w	r3, r3, #3
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	370c      	adds	r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d506:	b480      	push	{r7}
 800d508:	b085      	sub	sp, #20
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d524:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d52a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d530:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	4313      	orrs	r3, r2
 800d536:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d540:	f023 030f 	bic.w	r3, r3, #15
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	431a      	orrs	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3714      	adds	r7, #20
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	b2db      	uxtb	r3, r3
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	3314      	adds	r3, #20
 800d582:	461a      	mov	r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	4413      	add	r3, r2
 800d588:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d59a:	b480      	push	{r7}
 800d59c:	b085      	sub	sp, #20
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5c0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d5c6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d5cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d5e4:	2300      	movs	r3, #0

}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b088      	sub	sp, #32
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d600:	2310      	movs	r3, #16
 800d602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d604:	2340      	movs	r3, #64	; 0x40
 800d606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d610:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d612:	f107 0308 	add.w	r3, r7, #8
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f7ff ff74 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d61e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d622:	2110      	movs	r1, #16
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f975 	bl	800d914 <SDMMC_GetCmdResp1>
 800d62a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d62c:	69fb      	ldr	r3, [r7, #28]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3720      	adds	r7, #32
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b08a      	sub	sp, #40	; 0x28
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d646:	2307      	movs	r3, #7
 800d648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d64a:	2340      	movs	r3, #64	; 0x40
 800d64c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d64e:	2300      	movs	r3, #0
 800d650:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d656:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d658:	f107 0310 	add.w	r3, r7, #16
 800d65c:	4619      	mov	r1, r3
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff ff51 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d664:	f241 3288 	movw	r2, #5000	; 0x1388
 800d668:	2107      	movs	r1, #7
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f000 f952 	bl	800d914 <SDMMC_GetCmdResp1>
 800d670:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d674:	4618      	mov	r0, r3
 800d676:	3728      	adds	r7, #40	; 0x28
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d684:	2300      	movs	r3, #0
 800d686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d68c:	2300      	movs	r3, #0
 800d68e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d698:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d69a:	f107 0308 	add.w	r3, r7, #8
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff ff30 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f90c 	bl	800d8c4 <SDMMC_GetCmdError>
 800d6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6c0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6c6:	2308      	movs	r3, #8
 800d6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6d8:	f107 0308 	add.w	r3, r7, #8
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff ff11 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 faf5 	bl	800dcd4 <SDMMC_GetCmdResp7>
 800d6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3720      	adds	r7, #32
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d704:	2337      	movs	r3, #55	; 0x37
 800d706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d708:	2340      	movs	r3, #64	; 0x40
 800d70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d716:	f107 0308 	add.w	r3, r7, #8
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fef2 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d722:	f241 3288 	movw	r2, #5000	; 0x1388
 800d726:	2137      	movs	r1, #55	; 0x37
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f8f3 	bl	800d914 <SDMMC_GetCmdResp1>
 800d72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d730:	69fb      	ldr	r3, [r7, #28]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b088      	sub	sp, #32
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d74a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d74e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d750:	2329      	movs	r3, #41	; 0x29
 800d752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d754:	2340      	movs	r3, #64	; 0x40
 800d756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d762:	f107 0308 	add.w	r3, r7, #8
 800d766:	4619      	mov	r1, r3
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f7ff fecc 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa02 	bl	800db78 <SDMMC_GetCmdResp3>
 800d774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d776:	69fb      	ldr	r3, [r7, #28]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b088      	sub	sp, #32
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d78e:	2306      	movs	r3, #6
 800d790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d792:	2340      	movs	r3, #64	; 0x40
 800d794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d796:	2300      	movs	r3, #0
 800d798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d79e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7a0:	f107 0308 	add.w	r3, r7, #8
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff fead 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b0:	2106      	movs	r1, #6
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f8ae 	bl	800d914 <SDMMC_GetCmdResp1>
 800d7b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3720      	adds	r7, #32
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7d0:	2333      	movs	r3, #51	; 0x33
 800d7d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7d4:	2340      	movs	r3, #64	; 0x40
 800d7d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7e2:	f107 0308 	add.w	r3, r7, #8
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7ff fe8c 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7f2:	2133      	movs	r1, #51	; 0x33
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f88d 	bl	800d914 <SDMMC_GetCmdResp1>
 800d7fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3720      	adds	r7, #32
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b088      	sub	sp, #32
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d80e:	2300      	movs	r3, #0
 800d810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d812:	2302      	movs	r3, #2
 800d814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d816:	23c0      	movs	r3, #192	; 0xc0
 800d818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d824:	f107 0308 	add.w	r3, r7, #8
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff fe6b 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f95b 	bl	800daec <SDMMC_GetCmdResp2>
 800d836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d838:	69fb      	ldr	r3, [r7, #28]
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b088      	sub	sp, #32
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d850:	2309      	movs	r3, #9
 800d852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d854:	23c0      	movs	r3, #192	; 0xc0
 800d856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d858:	2300      	movs	r3, #0
 800d85a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d85c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d862:	f107 0308 	add.w	r3, r7, #8
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff fe4c 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 f93c 	bl	800daec <SDMMC_GetCmdResp2>
 800d874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d876:	69fb      	ldr	r3, [r7, #28]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d88e:	2303      	movs	r3, #3
 800d890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d892:	2340      	movs	r3, #64	; 0x40
 800d894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d896:	2300      	movs	r3, #0
 800d898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d89e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8a0:	f107 0308 	add.w	r3, r7, #8
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff fe2d 	bl	800d506 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	2103      	movs	r1, #3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 f99b 	bl	800dbec <SDMMC_GetCmdResp6>
 800d8b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d8c4:	b490      	push	{r4, r7}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8cc:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <SDMMC_GetCmdError+0x48>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <SDMMC_GetCmdError+0x4c>)
 800d8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d6:	0a5b      	lsrs	r3, r3, #9
 800d8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8dc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	1e5c      	subs	r4, r3, #1
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8ec:	e009      	b.n	800d902 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0f2      	beq.n	800d8e0 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	22c5      	movs	r2, #197	; 0xc5
 800d8fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bc90      	pop	{r4, r7}
 800d90a:	4770      	bx	lr
 800d90c:	2000004c 	.word	0x2000004c
 800d910:	10624dd3 	.word	0x10624dd3

0800d914 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d914:	b590      	push	{r4, r7, lr}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	460b      	mov	r3, r1
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d922:	4b6f      	ldr	r3, [pc, #444]	; (800dae0 <SDMMC_GetCmdResp1+0x1cc>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a6f      	ldr	r2, [pc, #444]	; (800dae4 <SDMMC_GetCmdResp1+0x1d0>)
 800d928:	fba2 2303 	umull	r2, r3, r2, r3
 800d92c:	0a5b      	lsrs	r3, r3, #9
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d934:	4623      	mov	r3, r4
 800d936:	1e5c      	subs	r4, r3, #1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d93c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d940:	e0c9      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d946:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0f0      	beq.n	800d934 <SDMMC_GetCmdResp1+0x20>
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1eb      	bne.n	800d934 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b00      	cmp	r3, #0
 800d966:	d004      	beq.n	800d972 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2204      	movs	r2, #4
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d96e:	2304      	movs	r3, #4
 800d970:	e0b1      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	f003 0301 	and.w	r3, r3, #1
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d004      	beq.n	800d988 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2201      	movs	r2, #1
 800d982:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d984:	2301      	movs	r3, #1
 800d986:	e0a6      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	22c5      	movs	r2, #197	; 0xc5
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f7ff fde3 	bl	800d55a <SDMMC_GetCommandResponse>
 800d994:	4603      	mov	r3, r0
 800d996:	461a      	mov	r2, r3
 800d998:	7afb      	ldrb	r3, [r7, #11]
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d001      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e099      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f7ff fde5 	bl	800d574 <SDMMC_GetResponse>
 800d9aa:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	4b4e      	ldr	r3, [pc, #312]	; (800dae8 <SDMMC_GetCmdResp1+0x1d4>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e08d      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da02      	bge.n	800d9c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d9c4:	e087      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9d0:	2340      	movs	r3, #64	; 0x40
 800d9d2:	e080      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d9de:	2380      	movs	r3, #128	; 0x80
 800d9e0:	e079      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d9ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9f0:	e071      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d9fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da00:	e069      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da10:	e061      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da20:	e059      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da30:	e051      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da40:	e049      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800da50:	e041      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800da5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da60:	e039      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da70:	e031      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800da80:	e029      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da90:	e021      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800daa0:	e019      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800daac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dab0:	e011      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dabc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dac0:	e009      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	f003 0308 	and.w	r3, r3, #8
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dacc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dad0:	e001      	b.n	800dad6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	371c      	adds	r7, #28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd90      	pop	{r4, r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000004c 	.word	0x2000004c
 800dae4:	10624dd3 	.word	0x10624dd3
 800dae8:	fdffe008 	.word	0xfdffe008

0800daec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800daec:	b490      	push	{r4, r7}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daf4:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <SDMMC_GetCmdResp2+0x84>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a1e      	ldr	r2, [pc, #120]	; (800db74 <SDMMC_GetCmdResp2+0x88>)
 800dafa:	fba2 2303 	umull	r2, r3, r2, r3
 800dafe:	0a5b      	lsrs	r3, r3, #9
 800db00:	f241 3288 	movw	r2, #5000	; 0x1388
 800db04:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800db08:	4623      	mov	r3, r4
 800db0a:	1e5c      	subs	r4, r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d102      	bne.n	800db16 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db14:	e026      	b.n	800db64 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db1a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0f0      	beq.n	800db08 <SDMMC_GetCmdResp2+0x1c>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d1eb      	bne.n	800db08 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db34:	f003 0304 	and.w	r3, r3, #4
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d004      	beq.n	800db46 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2204      	movs	r2, #4
 800db40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db42:	2304      	movs	r3, #4
 800db44:	e00e      	b.n	800db64 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db58:	2301      	movs	r3, #1
 800db5a:	e003      	b.n	800db64 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	22c5      	movs	r2, #197	; 0xc5
 800db60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bc90      	pop	{r4, r7}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	2000004c 	.word	0x2000004c
 800db74:	10624dd3 	.word	0x10624dd3

0800db78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800db78:	b490      	push	{r4, r7}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db80:	4b18      	ldr	r3, [pc, #96]	; (800dbe4 <SDMMC_GetCmdResp3+0x6c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a18      	ldr	r2, [pc, #96]	; (800dbe8 <SDMMC_GetCmdResp3+0x70>)
 800db86:	fba2 2303 	umull	r2, r3, r2, r3
 800db8a:	0a5b      	lsrs	r3, r3, #9
 800db8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db90:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800db94:	4623      	mov	r3, r4
 800db96:	1e5c      	subs	r4, r3, #1
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dba0:	e01b      	b.n	800dbda <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0f0      	beq.n	800db94 <SDMMC_GetCmdResp3+0x1c>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1eb      	bne.n	800db94 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2204      	movs	r2, #4
 800dbcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbce:	2304      	movs	r3, #4
 800dbd0:	e003      	b.n	800dbda <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	22c5      	movs	r2, #197	; 0xc5
 800dbd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bc90      	pop	{r4, r7}
 800dbe2:	4770      	bx	lr
 800dbe4:	2000004c 	.word	0x2000004c
 800dbe8:	10624dd3 	.word	0x10624dd3

0800dbec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dbec:	b590      	push	{r4, r7, lr}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbfa:	4b34      	ldr	r3, [pc, #208]	; (800dccc <SDMMC_GetCmdResp6+0xe0>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a34      	ldr	r2, [pc, #208]	; (800dcd0 <SDMMC_GetCmdResp6+0xe4>)
 800dc00:	fba2 2303 	umull	r2, r3, r2, r3
 800dc04:	0a5b      	lsrs	r3, r3, #9
 800dc06:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc0a:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dc0e:	4623      	mov	r3, r4
 800dc10:	1e5c      	subs	r4, r3, #1
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc1a:	e052      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc20:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d0f0      	beq.n	800dc0e <SDMMC_GetCmdResp6+0x22>
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1eb      	bne.n	800dc0e <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc3a:	f003 0304 	and.w	r3, r3, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d004      	beq.n	800dc4c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2204      	movs	r2, #4
 800dc46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc48:	2304      	movs	r3, #4
 800dc4a:	e03a      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d004      	beq.n	800dc62 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e02f      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7ff fc79 	bl	800d55a <SDMMC_GetCommandResponse>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	7afb      	ldrb	r3, [r7, #11]
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d001      	beq.n	800dc76 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e025      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	22c5      	movs	r2, #197	; 0xc5
 800dc7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f7ff fc78 	bl	800d574 <SDMMC_GetResponse>
 800dc84:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d106      	bne.n	800dc9e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	0c1b      	lsrs	r3, r3, #16
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e011      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcac:	e009      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcbc:	e001      	b.n	800dcc2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	371c      	adds	r7, #28
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd90      	pop	{r4, r7, pc}
 800dcca:	bf00      	nop
 800dccc:	2000004c 	.word	0x2000004c
 800dcd0:	10624dd3 	.word	0x10624dd3

0800dcd4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dcd4:	b490      	push	{r4, r7}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcdc:	4b21      	ldr	r3, [pc, #132]	; (800dd64 <SDMMC_GetCmdResp7+0x90>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a21      	ldr	r2, [pc, #132]	; (800dd68 <SDMMC_GetCmdResp7+0x94>)
 800dce2:	fba2 2303 	umull	r2, r3, r2, r3
 800dce6:	0a5b      	lsrs	r3, r3, #9
 800dce8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcec:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	1e5c      	subs	r4, r3, #1
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d102      	bne.n	800dcfe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcfc:	e02c      	b.n	800dd58 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d0f0      	beq.n	800dcf0 <SDMMC_GetCmdResp7+0x1c>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1eb      	bne.n	800dcf0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d004      	beq.n	800dd2e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2204      	movs	r2, #4
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd2a:	2304      	movs	r3, #4
 800dd2c:	e014      	b.n	800dd58 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d004      	beq.n	800dd44 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd40:	2301      	movs	r3, #1
 800dd42:	e009      	b.n	800dd58 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2240      	movs	r2, #64	; 0x40
 800dd54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd56:	2300      	movs	r3, #0

}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bc90      	pop	{r4, r7}
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	2000004c 	.word	0x2000004c
 800dd68:	10624dd3 	.word	0x10624dd3

0800dd6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	f107 001c 	add.w	r0, r7, #28
 800dd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d122      	bne.n	800ddca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dd98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ddac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d105      	bne.n	800ddbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f001 f9c8 	bl	800f154 <USB_CoreReset>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	73fb      	strb	r3, [r7, #15]
 800ddc8:	e01a      	b.n	800de00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f001 f9bc 	bl	800f154 <USB_CoreReset>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dde0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ddf2:	e005      	b.n	800de00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de0c:	b004      	add	sp, #16
 800de0e:	4770      	bx	lr

0800de10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	4613      	mov	r3, r2
 800de1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de1e:	79fb      	ldrb	r3, [r7, #7]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d165      	bne.n	800def0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4a3e      	ldr	r2, [pc, #248]	; (800df20 <USB_SetTurnaroundTime+0x110>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d906      	bls.n	800de3a <USB_SetTurnaroundTime+0x2a>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	4a3d      	ldr	r2, [pc, #244]	; (800df24 <USB_SetTurnaroundTime+0x114>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d802      	bhi.n	800de3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de34:	230f      	movs	r3, #15
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	e05c      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	4a39      	ldr	r2, [pc, #228]	; (800df24 <USB_SetTurnaroundTime+0x114>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d906      	bls.n	800de50 <USB_SetTurnaroundTime+0x40>
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	4a38      	ldr	r2, [pc, #224]	; (800df28 <USB_SetTurnaroundTime+0x118>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d802      	bhi.n	800de50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de4a:	230e      	movs	r3, #14
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e051      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	4a35      	ldr	r2, [pc, #212]	; (800df28 <USB_SetTurnaroundTime+0x118>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d906      	bls.n	800de66 <USB_SetTurnaroundTime+0x56>
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	4a34      	ldr	r2, [pc, #208]	; (800df2c <USB_SetTurnaroundTime+0x11c>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d802      	bhi.n	800de66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de60:	230d      	movs	r3, #13
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	e046      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	4a30      	ldr	r2, [pc, #192]	; (800df2c <USB_SetTurnaroundTime+0x11c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d906      	bls.n	800de7c <USB_SetTurnaroundTime+0x6c>
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	4a2f      	ldr	r2, [pc, #188]	; (800df30 <USB_SetTurnaroundTime+0x120>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d802      	bhi.n	800de7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de76:	230c      	movs	r3, #12
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e03b      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	4a2c      	ldr	r2, [pc, #176]	; (800df30 <USB_SetTurnaroundTime+0x120>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d906      	bls.n	800de92 <USB_SetTurnaroundTime+0x82>
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4a2b      	ldr	r2, [pc, #172]	; (800df34 <USB_SetTurnaroundTime+0x124>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d802      	bhi.n	800de92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de8c:	230b      	movs	r3, #11
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e030      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	4a27      	ldr	r2, [pc, #156]	; (800df34 <USB_SetTurnaroundTime+0x124>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d906      	bls.n	800dea8 <USB_SetTurnaroundTime+0x98>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	4a26      	ldr	r2, [pc, #152]	; (800df38 <USB_SetTurnaroundTime+0x128>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d802      	bhi.n	800dea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dea2:	230a      	movs	r3, #10
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	e025      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4a23      	ldr	r2, [pc, #140]	; (800df38 <USB_SetTurnaroundTime+0x128>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d906      	bls.n	800debe <USB_SetTurnaroundTime+0xae>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	4a22      	ldr	r2, [pc, #136]	; (800df3c <USB_SetTurnaroundTime+0x12c>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d802      	bhi.n	800debe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800deb8:	2309      	movs	r3, #9
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	e01a      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	4a1e      	ldr	r2, [pc, #120]	; (800df3c <USB_SetTurnaroundTime+0x12c>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d906      	bls.n	800ded4 <USB_SetTurnaroundTime+0xc4>
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	4a1d      	ldr	r2, [pc, #116]	; (800df40 <USB_SetTurnaroundTime+0x130>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d802      	bhi.n	800ded4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dece:	2308      	movs	r3, #8
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	e00f      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	4a1a      	ldr	r2, [pc, #104]	; (800df40 <USB_SetTurnaroundTime+0x130>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d906      	bls.n	800deea <USB_SetTurnaroundTime+0xda>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4a19      	ldr	r2, [pc, #100]	; (800df44 <USB_SetTurnaroundTime+0x134>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d802      	bhi.n	800deea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dee4:	2307      	movs	r3, #7
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e004      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800deea:	2306      	movs	r3, #6
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e001      	b.n	800def4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800def0:	2309      	movs	r3, #9
 800def2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68da      	ldr	r2, [r3, #12]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	029b      	lsls	r3, r3, #10
 800df08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800df0c:	431a      	orrs	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	371c      	adds	r7, #28
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	00d8acbf 	.word	0x00d8acbf
 800df24:	00e4e1bf 	.word	0x00e4e1bf
 800df28:	00f423ff 	.word	0x00f423ff
 800df2c:	0106737f 	.word	0x0106737f
 800df30:	011a499f 	.word	0x011a499f
 800df34:	01312cff 	.word	0x01312cff
 800df38:	014ca43f 	.word	0x014ca43f
 800df3c:	016e35ff 	.word	0x016e35ff
 800df40:	01a6ab1f 	.word	0x01a6ab1f
 800df44:	01e847ff 	.word	0x01e847ff

0800df48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f043 0201 	orr.w	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df6a:	b480      	push	{r7}
 800df6c:	b083      	sub	sp, #12
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f023 0201 	bic.w	r2, r3, #1
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfa4:	78fb      	ldrb	r3, [r7, #3]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d106      	bne.n	800dfb8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	60da      	str	r2, [r3, #12]
 800dfb6:	e00b      	b.n	800dfd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dfb8:	78fb      	ldrb	r3, [r7, #3]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d106      	bne.n	800dfcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	e001      	b.n	800dfd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e003      	b.n	800dfd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dfd0:	2032      	movs	r0, #50	; 0x32
 800dfd2:	f7f7 f889 	bl	80050e8 <HAL_Delay>

  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b086      	sub	sp, #24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dfee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dff2:	2300      	movs	r3, #0
 800dff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]
 800dffe:	e009      	b.n	800e014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	3340      	adds	r3, #64	; 0x40
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	2200      	movs	r2, #0
 800e00c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	3301      	adds	r3, #1
 800e012:	613b      	str	r3, [r7, #16]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	2b0e      	cmp	r3, #14
 800e018:	d9f2      	bls.n	800e000 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d11c      	bne.n	800e05a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e02e:	f043 0302 	orr.w	r3, r3, #2
 800e032:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e038:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	e005      	b.n	800e066 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e06c:	461a      	mov	r2, r3
 800e06e:	2300      	movs	r3, #0
 800e070:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e078:	4619      	mov	r1, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e080:	461a      	mov	r2, r3
 800e082:	680b      	ldr	r3, [r1, #0]
 800e084:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e086:	2103      	movs	r1, #3
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f93d 	bl	800e308 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e08e:	2110      	movs	r1, #16
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 f8f1 	bl	800e278 <USB_FlushTxFifo>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 f90f 	bl	800e2c4 <USB_FlushRxFifo>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	613b      	str	r3, [r7, #16]
 800e0d8:	e043      	b.n	800e162 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0f0:	d118      	bne.n	800e124 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e104:	461a      	mov	r2, r3
 800e106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e10a:	6013      	str	r3, [r2, #0]
 800e10c:	e013      	b.n	800e136 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	015a      	lsls	r2, r3, #5
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	4413      	add	r3, r2
 800e116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e11a:	461a      	mov	r2, r3
 800e11c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	e008      	b.n	800e136 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e130:	461a      	mov	r2, r3
 800e132:	2300      	movs	r3, #0
 800e134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	015a      	lsls	r2, r3, #5
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	4413      	add	r3, r2
 800e13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e142:	461a      	mov	r2, r3
 800e144:	2300      	movs	r3, #0
 800e146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4413      	add	r3, r2
 800e150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e154:	461a      	mov	r2, r3
 800e156:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e15a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	3301      	adds	r3, #1
 800e160:	613b      	str	r3, [r7, #16]
 800e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	429a      	cmp	r2, r3
 800e168:	d3b7      	bcc.n	800e0da <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e16a:	2300      	movs	r3, #0
 800e16c:	613b      	str	r3, [r7, #16]
 800e16e:	e043      	b.n	800e1f8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e186:	d118      	bne.n	800e1ba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10a      	bne.n	800e1a4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e19a:	461a      	mov	r2, r3
 800e19c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1a0:	6013      	str	r3, [r2, #0]
 800e1a2:	e013      	b.n	800e1cc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e1b6:	6013      	str	r3, [r2, #0]
 800e1b8:	e008      	b.n	800e1cc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d8:	461a      	mov	r2, r3
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	015a      	lsls	r2, r3, #5
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e1f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	613b      	str	r3, [r7, #16]
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d3b7      	bcc.n	800e170 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e20e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	f043 0210 	orr.w	r2, r3, #16
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	699a      	ldr	r2, [r3, #24]
 800e232:	4b10      	ldr	r3, [pc, #64]	; (800e274 <USB_DevInit+0x294>)
 800e234:	4313      	orrs	r3, r2
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d005      	beq.n	800e24c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	f043 0208 	orr.w	r2, r3, #8
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e24c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d107      	bne.n	800e262 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e25a:	f043 0304 	orr.w	r3, r3, #4
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e262:	7dfb      	ldrb	r3, [r7, #23]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e26e:	b004      	add	sp, #16
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	803c3800 	.word	0x803c3800

0800e278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	019b      	lsls	r3, r3, #6
 800e28a:	f043 0220 	orr.w	r2, r3, #32
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	3301      	adds	r3, #1
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	4a09      	ldr	r2, [pc, #36]	; (800e2c0 <USB_FlushTxFifo+0x48>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d901      	bls.n	800e2a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	e006      	b.n	800e2b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	f003 0320 	and.w	r3, r3, #32
 800e2ac:	2b20      	cmp	r3, #32
 800e2ae:	d0f0      	beq.n	800e292 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	00030d40 	.word	0x00030d40

0800e2c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2210      	movs	r2, #16
 800e2d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	4a09      	ldr	r2, [pc, #36]	; (800e304 <USB_FlushRxFifo+0x40>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d901      	bls.n	800e2e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e006      	b.n	800e2f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b10      	cmp	r3, #16
 800e2f2:	d0f0      	beq.n	800e2d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	00030d40 	.word	0x00030d40

0800e308 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	460b      	mov	r3, r1
 800e312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	78fb      	ldrb	r3, [r7, #3]
 800e322:	68f9      	ldr	r1, [r7, #12]
 800e324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e328:	4313      	orrs	r3, r2
 800e32a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b087      	sub	sp, #28
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f003 0306 	and.w	r3, r3, #6
 800e352:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b02      	cmp	r3, #2
 800e358:	d002      	beq.n	800e360 <USB_GetDevSpeed+0x26>
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b06      	cmp	r3, #6
 800e35e:	d102      	bne.n	800e366 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e360:	2302      	movs	r3, #2
 800e362:	75fb      	strb	r3, [r7, #23]
 800e364:	e001      	b.n	800e36a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800e366:	230f      	movs	r3, #15
 800e368:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	371c      	adds	r7, #28
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	785b      	ldrb	r3, [r3, #1]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d13a      	bne.n	800e40a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e39a:	69da      	ldr	r2, [r3, #28]
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	f003 030f 	and.w	r3, r3, #15
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d155      	bne.n	800e478 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	015a      	lsls	r2, r3, #5
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	78db      	ldrb	r3, [r3, #3]
 800e3e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	059b      	lsls	r3, r3, #22
 800e3ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	68ba      	ldr	r2, [r7, #8]
 800e3f4:	0151      	lsls	r1, r2, #5
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	440a      	add	r2, r1
 800e3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	e036      	b.n	800e478 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e410:	69da      	ldr	r2, [r3, #28]
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	f003 030f 	and.w	r3, r3, #15
 800e41a:	2101      	movs	r1, #1
 800e41c:	fa01 f303 	lsl.w	r3, r1, r3
 800e420:	041b      	lsls	r3, r3, #16
 800e422:	68f9      	ldr	r1, [r7, #12]
 800e424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e428:	4313      	orrs	r3, r2
 800e42a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	015a      	lsls	r2, r3, #5
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	4413      	add	r3, r2
 800e434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d11a      	bne.n	800e478 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	78db      	ldrb	r3, [r3, #3]
 800e45c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e45e:	430b      	orrs	r3, r1
 800e460:	4313      	orrs	r3, r2
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	0151      	lsls	r1, r2, #5
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	440a      	add	r2, r1
 800e46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e46e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e476:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
	...

0800e488 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	785b      	ldrb	r3, [r3, #1]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d161      	bne.n	800e568 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4ba:	d11f      	bne.n	800e4fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	0151      	lsls	r1, r2, #5
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	440a      	add	r2, r1
 800e4d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e4da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	015a      	lsls	r2, r3, #5
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	0151      	lsls	r1, r2, #5
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	440a      	add	r2, r1
 800e4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	f003 030f 	and.w	r3, r3, #15
 800e50c:	2101      	movs	r1, #1
 800e50e:	fa01 f303 	lsl.w	r3, r1, r3
 800e512:	b29b      	uxth	r3, r3
 800e514:	43db      	mvns	r3, r3
 800e516:	68f9      	ldr	r1, [r7, #12]
 800e518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e51c:	4013      	ands	r3, r2
 800e51e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e526:	69da      	ldr	r2, [r3, #28]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	2101      	movs	r1, #1
 800e532:	fa01 f303 	lsl.w	r3, r1, r3
 800e536:	b29b      	uxth	r3, r3
 800e538:	43db      	mvns	r3, r3
 800e53a:	68f9      	ldr	r1, [r7, #12]
 800e53c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e540:	4013      	ands	r3, r2
 800e542:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	0159      	lsls	r1, r3, #5
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	440b      	add	r3, r1
 800e55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e55e:	4619      	mov	r1, r3
 800e560:	4b35      	ldr	r3, [pc, #212]	; (800e638 <USB_DeactivateEndpoint+0x1b0>)
 800e562:	4013      	ands	r3, r2
 800e564:	600b      	str	r3, [r1, #0]
 800e566:	e060      	b.n	800e62a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	015a      	lsls	r2, r3, #5
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	4413      	add	r3, r2
 800e570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e57a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e57e:	d11f      	bne.n	800e5c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	0151      	lsls	r1, r2, #5
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	440a      	add	r2, r1
 800e596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e59a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e59e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	0151      	lsls	r1, r2, #5
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	440a      	add	r2, r1
 800e5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 030f 	and.w	r3, r3, #15
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5d6:	041b      	lsls	r3, r3, #16
 800e5d8:	43db      	mvns	r3, r3
 800e5da:	68f9      	ldr	r1, [r7, #12]
 800e5dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ea:	69da      	ldr	r2, [r3, #28]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 030f 	and.w	r3, r3, #15
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5fa:	041b      	lsls	r3, r3, #16
 800e5fc:	43db      	mvns	r3, r3
 800e5fe:	68f9      	ldr	r1, [r7, #12]
 800e600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e604:	4013      	ands	r3, r2
 800e606:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	015a      	lsls	r2, r3, #5
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	0159      	lsls	r1, r3, #5
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	440b      	add	r3, r1
 800e61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e622:	4619      	mov	r1, r3
 800e624:	4b05      	ldr	r3, [pc, #20]	; (800e63c <USB_DeactivateEndpoint+0x1b4>)
 800e626:	4013      	ands	r3, r2
 800e628:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3714      	adds	r7, #20
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	ec337800 	.word	0xec337800
 800e63c:	eff37800 	.word	0xeff37800

0800e640 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	785b      	ldrb	r3, [r3, #1]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	f040 810a 	bne.w	800e872 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	695b      	ldr	r3, [r3, #20]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d132      	bne.n	800e6cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	693a      	ldr	r2, [r7, #16]
 800e676:	0151      	lsls	r1, r2, #5
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	440a      	add	r2, r1
 800e67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	015a      	lsls	r2, r3, #5
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	4413      	add	r3, r2
 800e692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	0151      	lsls	r1, r2, #5
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	440a      	add	r2, r1
 800e6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e6a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	015a      	lsls	r2, r3, #5
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	0151      	lsls	r1, r2, #5
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	440a      	add	r2, r1
 800e6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c4:	0cdb      	lsrs	r3, r3, #19
 800e6c6:	04db      	lsls	r3, r3, #19
 800e6c8:	6113      	str	r3, [r2, #16]
 800e6ca:	e074      	b.n	800e7b6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	015a      	lsls	r2, r3, #5
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	693a      	ldr	r2, [r7, #16]
 800e6dc:	0151      	lsls	r1, r2, #5
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	440a      	add	r2, r1
 800e6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e6:	0cdb      	lsrs	r3, r3, #19
 800e6e8:	04db      	lsls	r3, r3, #19
 800e6ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	015a      	lsls	r2, r3, #5
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6f8:	691b      	ldr	r3, [r3, #16]
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	0151      	lsls	r1, r2, #5
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	440a      	add	r2, r1
 800e702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e70a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	015a      	lsls	r2, r3, #5
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	4413      	add	r3, r2
 800e718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71c:	691a      	ldr	r2, [r3, #16]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	6959      	ldr	r1, [r3, #20]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	440b      	add	r3, r1
 800e728:	1e59      	subs	r1, r3, #1
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e732:	04d9      	lsls	r1, r3, #19
 800e734:	4baf      	ldr	r3, [pc, #700]	; (800e9f4 <USB_EPStartXfer+0x3b4>)
 800e736:	400b      	ands	r3, r1
 800e738:	6939      	ldr	r1, [r7, #16]
 800e73a:	0148      	lsls	r0, r1, #5
 800e73c:	6979      	ldr	r1, [r7, #20]
 800e73e:	4401      	add	r1, r0
 800e740:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e744:	4313      	orrs	r3, r2
 800e746:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	015a      	lsls	r2, r3, #5
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	4413      	add	r3, r2
 800e750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e754:	691a      	ldr	r2, [r3, #16]
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	695b      	ldr	r3, [r3, #20]
 800e75a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e75e:	6939      	ldr	r1, [r7, #16]
 800e760:	0148      	lsls	r0, r1, #5
 800e762:	6979      	ldr	r1, [r7, #20]
 800e764:	4401      	add	r1, r0
 800e766:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e76a:	4313      	orrs	r3, r2
 800e76c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	78db      	ldrb	r3, [r3, #3]
 800e772:	2b01      	cmp	r3, #1
 800e774:	d11f      	bne.n	800e7b6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	015a      	lsls	r2, r3, #5
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	4413      	add	r3, r2
 800e77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	0151      	lsls	r1, r2, #5
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	440a      	add	r2, r1
 800e78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e790:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e794:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	0151      	lsls	r1, r2, #5
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e7b4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	0151      	lsls	r1, r2, #5
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	440a      	add	r2, r1
 800e7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7d4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	78db      	ldrb	r3, [r3, #3]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d015      	beq.n	800e80a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f000 8100 	beq.w	800e9e8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	f003 030f 	and.w	r3, r3, #15
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800e7fe:	6979      	ldr	r1, [r7, #20]
 800e800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e804:	4313      	orrs	r3, r2
 800e806:	634b      	str	r3, [r1, #52]	; 0x34
 800e808:	e0ee      	b.n	800e9e8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e816:	2b00      	cmp	r3, #0
 800e818:	d110      	bne.n	800e83c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	015a      	lsls	r2, r3, #5
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	4413      	add	r3, r2
 800e822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	0151      	lsls	r1, r2, #5
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	440a      	add	r2, r1
 800e830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e838:	6013      	str	r3, [r2, #0]
 800e83a:	e00f      	b.n	800e85c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	015a      	lsls	r2, r3, #5
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	4413      	add	r3, r2
 800e844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	693a      	ldr	r2, [r7, #16]
 800e84c:	0151      	lsls	r1, r2, #5
 800e84e:	697a      	ldr	r2, [r7, #20]
 800e850:	440a      	add	r2, r1
 800e852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e85a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	68d9      	ldr	r1, [r3, #12]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	781a      	ldrb	r2, [r3, #0]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	b29b      	uxth	r3, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f9e2 	bl	800ec34 <USB_WritePacket>
 800e870:	e0ba      	b.n	800e9e8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	693a      	ldr	r2, [r7, #16]
 800e882:	0151      	lsls	r1, r2, #5
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	440a      	add	r2, r1
 800e888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e88c:	0cdb      	lsrs	r3, r3, #19
 800e88e:	04db      	lsls	r3, r3, #19
 800e890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	693a      	ldr	r2, [r7, #16]
 800e8a2:	0151      	lsls	r1, r2, #5
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	440a      	add	r2, r1
 800e8a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e8b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e8b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d123      	bne.n	800e906 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	015a      	lsls	r2, r3, #5
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ca:	691a      	ldr	r2, [r3, #16]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8d4:	6939      	ldr	r1, [r7, #16]
 800e8d6:	0148      	lsls	r0, r1, #5
 800e8d8:	6979      	ldr	r1, [r7, #20]
 800e8da:	4401      	add	r1, r0
 800e8dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	015a      	lsls	r2, r3, #5
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	693a      	ldr	r2, [r7, #16]
 800e8f4:	0151      	lsls	r1, r2, #5
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	440a      	add	r2, r1
 800e8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e902:	6113      	str	r3, [r2, #16]
 800e904:	e033      	b.n	800e96e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	695a      	ldr	r2, [r3, #20]
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	4413      	add	r3, r2
 800e910:	1e5a      	subs	r2, r3, #1
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	fbb2 f3f3 	udiv	r3, r2, r3
 800e91a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	015a      	lsls	r2, r3, #5
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	4413      	add	r3, r2
 800e924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e928:	691a      	ldr	r2, [r3, #16]
 800e92a:	89fb      	ldrh	r3, [r7, #14]
 800e92c:	04d9      	lsls	r1, r3, #19
 800e92e:	4b31      	ldr	r3, [pc, #196]	; (800e9f4 <USB_EPStartXfer+0x3b4>)
 800e930:	400b      	ands	r3, r1
 800e932:	6939      	ldr	r1, [r7, #16]
 800e934:	0148      	lsls	r0, r1, #5
 800e936:	6979      	ldr	r1, [r7, #20]
 800e938:	4401      	add	r1, r0
 800e93a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e93e:	4313      	orrs	r3, r2
 800e940:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	015a      	lsls	r2, r3, #5
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	4413      	add	r3, r2
 800e94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e94e:	691a      	ldr	r2, [r3, #16]
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	89f9      	ldrh	r1, [r7, #14]
 800e956:	fb01 f303 	mul.w	r3, r1, r3
 800e95a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e95e:	6939      	ldr	r1, [r7, #16]
 800e960:	0148      	lsls	r0, r1, #5
 800e962:	6979      	ldr	r1, [r7, #20]
 800e964:	4401      	add	r1, r0
 800e966:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e96a:	4313      	orrs	r3, r2
 800e96c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	78db      	ldrb	r3, [r3, #3]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d128      	bne.n	800e9c8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e982:	2b00      	cmp	r3, #0
 800e984:	d110      	bne.n	800e9a8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	0151      	lsls	r1, r2, #5
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	440a      	add	r2, r1
 800e99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	e00f      	b.n	800e9c8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	015a      	lsls	r2, r3, #5
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	0151      	lsls	r1, r2, #5
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	440a      	add	r2, r1
 800e9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	015a      	lsls	r2, r3, #5
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	693a      	ldr	r2, [r7, #16]
 800e9d8:	0151      	lsls	r1, r2, #5
 800e9da:	697a      	ldr	r2, [r7, #20]
 800e9dc:	440a      	add	r2, r1
 800e9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	1ff80000 	.word	0x1ff80000

0800e9f8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	785b      	ldrb	r3, [r3, #1]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	f040 80ab 	bne.w	800eb6c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d132      	bne.n	800ea84 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea2a:	691b      	ldr	r3, [r3, #16]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	0151      	lsls	r1, r2, #5
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	440a      	add	r2, r1
 800ea34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	0151      	lsls	r1, r2, #5
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	440a      	add	r2, r1
 800ea58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	015a      	lsls	r2, r3, #5
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	4413      	add	r3, r2
 800ea6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	0151      	lsls	r1, r2, #5
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	440a      	add	r2, r1
 800ea78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea7c:	0cdb      	lsrs	r3, r3, #19
 800ea7e:	04db      	lsls	r3, r3, #19
 800ea80:	6113      	str	r3, [r2, #16]
 800ea82:	e04e      	b.n	800eb22 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	0151      	lsls	r1, r2, #5
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	440a      	add	r2, r1
 800ea9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea9e:	0cdb      	lsrs	r3, r3, #19
 800eaa0:	04db      	lsls	r3, r3, #19
 800eaa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	0151      	lsls	r1, r2, #5
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	440a      	add	r2, r1
 800eaba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eabe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eac2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eac6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	695a      	ldr	r2, [r3, #20]
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d903      	bls.n	800eadc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	689a      	ldr	r2, [r3, #8]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	015a      	lsls	r2, r3, #5
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae8:	691b      	ldr	r3, [r3, #16]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	0151      	lsls	r1, r2, #5
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	440a      	add	r2, r1
 800eaf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eafa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	015a      	lsls	r2, r3, #5
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	4413      	add	r3, r2
 800eb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	695b      	ldr	r3, [r3, #20]
 800eb0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb12:	68b9      	ldr	r1, [r7, #8]
 800eb14:	0148      	lsls	r0, r1, #5
 800eb16:	68f9      	ldr	r1, [r7, #12]
 800eb18:	4401      	add	r1, r0
 800eb1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	0151      	lsls	r1, r2, #5
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	440a      	add	r2, r1
 800eb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb40:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d06d      	beq.n	800ec26 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	f003 030f 	and.w	r3, r3, #15
 800eb5a:	2101      	movs	r1, #1
 800eb5c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb60:	68f9      	ldr	r1, [r7, #12]
 800eb62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb66:	4313      	orrs	r3, r2
 800eb68:	634b      	str	r3, [r1, #52]	; 0x34
 800eb6a:	e05c      	b.n	800ec26 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	015a      	lsls	r2, r3, #5
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	0151      	lsls	r1, r2, #5
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	440a      	add	r2, r1
 800eb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb86:	0cdb      	lsrs	r3, r3, #19
 800eb88:	04db      	lsls	r3, r3, #19
 800eb8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	015a      	lsls	r2, r3, #5
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	0151      	lsls	r1, r2, #5
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	440a      	add	r2, r1
 800eba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eba6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	689a      	ldr	r2, [r3, #8]
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	015a      	lsls	r2, r3, #5
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	0151      	lsls	r1, r2, #5
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	440a      	add	r2, r1
 800ebd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	015a      	lsls	r2, r3, #5
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebec:	691a      	ldr	r2, [r3, #16]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	0148      	lsls	r0, r1, #5
 800ebfa:	68f9      	ldr	r1, [r7, #12]
 800ebfc:	4401      	add	r1, r0
 800ebfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec02:	4313      	orrs	r3, r2
 800ec04:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	015a      	lsls	r2, r3, #5
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	0151      	lsls	r1, r2, #5
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	440a      	add	r2, r1
 800ec1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3714      	adds	r7, #20
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b089      	sub	sp, #36	; 0x24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4611      	mov	r1, r2
 800ec40:	461a      	mov	r2, r3
 800ec42:	460b      	mov	r3, r1
 800ec44:	71fb      	strb	r3, [r7, #7]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800ec52:	88bb      	ldrh	r3, [r7, #4]
 800ec54:	3303      	adds	r3, #3
 800ec56:	089b      	lsrs	r3, r3, #2
 800ec58:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61bb      	str	r3, [r7, #24]
 800ec5e:	e00f      	b.n	800ec80 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ec60:	79fb      	ldrb	r3, [r7, #7]
 800ec62:	031a      	lsls	r2, r3, #12
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	3304      	adds	r3, #4
 800ec78:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	61bb      	str	r3, [r7, #24]
 800ec80:	69ba      	ldr	r2, [r7, #24]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d3eb      	bcc.n	800ec60 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3724      	adds	r7, #36	; 0x24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b089      	sub	sp, #36	; 0x24
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	60f8      	str	r0, [r7, #12]
 800ec9e:	60b9      	str	r1, [r7, #8]
 800eca0:	4613      	mov	r3, r2
 800eca2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ecac:	88fb      	ldrh	r3, [r7, #6]
 800ecae:	3303      	adds	r3, #3
 800ecb0:	089b      	lsrs	r3, r3, #2
 800ecb2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	61bb      	str	r3, [r7, #24]
 800ecb8:	e00b      	b.n	800ecd2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	601a      	str	r2, [r3, #0]
    pDest++;
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	61bb      	str	r3, [r7, #24]
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d3ef      	bcc.n	800ecba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ecda:	69fb      	ldr	r3, [r7, #28]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3724      	adds	r7, #36	; 0x24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	785b      	ldrb	r3, [r3, #1]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d12c      	bne.n	800ed5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	015a      	lsls	r2, r3, #5
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	db12      	blt.n	800ed3c <USB_EPSetStall+0x54>
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00f      	beq.n	800ed3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	015a      	lsls	r2, r3, #5
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4413      	add	r3, r2
 800ed24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	0151      	lsls	r1, r2, #5
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	440a      	add	r2, r1
 800ed32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ed3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	0151      	lsls	r1, r2, #5
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	440a      	add	r2, r1
 800ed52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	e02b      	b.n	800edb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	015a      	lsls	r2, r3, #5
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	4413      	add	r3, r2
 800ed66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	db12      	blt.n	800ed96 <USB_EPSetStall+0xae>
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00f      	beq.n	800ed96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	015a      	lsls	r2, r3, #5
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	0151      	lsls	r1, r2, #5
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	440a      	add	r2, r1
 800ed8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ed94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	0151      	lsls	r1, r2, #5
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	440a      	add	r2, r1
 800edac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	785b      	ldrb	r3, [r3, #1]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d128      	bne.n	800ee32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	015a      	lsls	r2, r3, #5
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	4413      	add	r3, r2
 800ede8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	0151      	lsls	r1, r2, #5
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	440a      	add	r2, r1
 800edf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	78db      	ldrb	r3, [r3, #3]
 800ee04:	2b03      	cmp	r3, #3
 800ee06:	d003      	beq.n	800ee10 <USB_EPClearStall+0x4c>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	78db      	ldrb	r3, [r3, #3]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d138      	bne.n	800ee82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	015a      	lsls	r2, r3, #5
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4413      	add	r3, r2
 800ee18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	0151      	lsls	r1, r2, #5
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	440a      	add	r2, r1
 800ee26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	e027      	b.n	800ee82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	015a      	lsls	r2, r3, #5
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	4413      	add	r3, r2
 800ee3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	0151      	lsls	r1, r2, #5
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	440a      	add	r2, r1
 800ee48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	78db      	ldrb	r3, [r3, #3]
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d003      	beq.n	800ee62 <USB_EPClearStall+0x9e>
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	78db      	ldrb	r3, [r3, #3]
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d10f      	bne.n	800ee82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	015a      	lsls	r2, r3, #5
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	4413      	add	r3, r2
 800ee6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	0151      	lsls	r1, r2, #5
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	440a      	add	r2, r1
 800ee78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ee82:	2300      	movs	r3, #0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3714      	adds	r7, #20
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eeae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eeb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	78fb      	ldrb	r3, [r7, #3]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eec4:	68f9      	ldr	r1, [r7, #12]
 800eec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eeca:	4313      	orrs	r3, r2
 800eecc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eef6:	f023 0302 	bic.w	r3, r3, #2
 800eefa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800eefc:	2003      	movs	r0, #3
 800eefe:	f7f6 f8f3 	bl	80050e8 <HAL_Delay>

  return HAL_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef26:	f043 0302 	orr.w	r3, r3, #2
 800ef2a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ef2c:	2003      	movs	r0, #3
 800ef2e:	f7f6 f8db 	bl	80050e8 <HAL_Delay>

  return HAL_OK;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	695b      	ldr	r3, [r3, #20]
 800ef48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	4013      	ands	r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ef54:	68fb      	ldr	r3, [r7, #12]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b085      	sub	sp, #20
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	4013      	ands	r3, r2
 800ef84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	0c1b      	lsrs	r3, r3, #16
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3714      	adds	r7, #20
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b085      	sub	sp, #20
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efb2:	69db      	ldr	r3, [r3, #28]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	4013      	ands	r3, r2
 800efb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	b29b      	uxth	r3, r3
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800efca:	b480      	push	{r7}
 800efcc:	b085      	sub	sp, #20
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
 800efd2:	460b      	mov	r3, r1
 800efd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800efda:	78fb      	ldrb	r3, [r7, #3]
 800efdc:	015a      	lsls	r2, r3, #5
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4413      	add	r3, r2
 800efe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	4013      	ands	r3, r2
 800eff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eff8:	68bb      	ldr	r3, [r7, #8]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f006:	b480      	push	{r7}
 800f008:	b087      	sub	sp, #28
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	460b      	mov	r3, r1
 800f010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f028:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	f003 030f 	and.w	r3, r3, #15
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	fa22 f303 	lsr.w	r3, r2, r3
 800f036:	01db      	lsls	r3, r3, #7
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	693a      	ldr	r2, [r7, #16]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f040:	78fb      	ldrb	r3, [r7, #3]
 800f042:	015a      	lsls	r2, r3, #5
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	4413      	add	r3, r2
 800f048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	4013      	ands	r3, r2
 800f052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f054:	68bb      	ldr	r3, [r7, #8]
}
 800f056:	4618      	mov	r0, r3
 800f058:	371c      	adds	r7, #28
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	f003 0301 	and.w	r3, r3, #1
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f098:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f09c:	f023 0307 	bic.w	r3, r3, #7
 800f0a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f0b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3714      	adds	r7, #20
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	333c      	adds	r3, #60	; 0x3c
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	4a1c      	ldr	r2, [pc, #112]	; (800f150 <USB_EP0_OutStart+0x8c>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d90a      	bls.n	800f0fa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0f4:	d101      	bne.n	800f0fa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e024      	b.n	800f144 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f100:	461a      	mov	r2, r3
 800f102:	2300      	movs	r3, #0
 800f104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f128:	f043 0318 	orr.w	r3, r3, #24
 800f12c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f13c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f140:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	4f54300a 	.word	0x4f54300a

0800f154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f15c:	2300      	movs	r3, #0
 800f15e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3301      	adds	r3, #1
 800f164:	60fb      	str	r3, [r7, #12]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	4a13      	ldr	r2, [pc, #76]	; (800f1b8 <USB_CoreReset+0x64>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d901      	bls.n	800f172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f16e:	2303      	movs	r3, #3
 800f170:	e01b      	b.n	800f1aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	daf2      	bge.n	800f160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f17a:	2300      	movs	r3, #0
 800f17c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	f043 0201 	orr.w	r2, r3, #1
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4a09      	ldr	r2, [pc, #36]	; (800f1b8 <USB_CoreReset+0x64>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d901      	bls.n	800f19c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f198:	2303      	movs	r3, #3
 800f19a:	e006      	b.n	800f1aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	f003 0301 	and.w	r3, r3, #1
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d0f0      	beq.n	800f18a <USB_CoreReset+0x36>

  return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	00030d40 	.word	0x00030d40

0800f1bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	7c1b      	ldrb	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d115      	bne.n	800f200 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f1d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1d8:	2202      	movs	r2, #2
 800f1da:	2181      	movs	r1, #129	; 0x81
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f005 f899 	bl	8014314 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f1e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f005 f88f 	bl	8014314 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f1fe:	e012      	b.n	800f226 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f200:	2340      	movs	r3, #64	; 0x40
 800f202:	2202      	movs	r2, #2
 800f204:	2181      	movs	r1, #129	; 0x81
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f005 f884 	bl	8014314 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f212:	2340      	movs	r3, #64	; 0x40
 800f214:	2202      	movs	r2, #2
 800f216:	2101      	movs	r1, #1
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f005 f87b 	bl	8014314 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f226:	2308      	movs	r3, #8
 800f228:	2203      	movs	r2, #3
 800f22a:	2182      	movs	r1, #130	; 0x82
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f005 f871 	bl	8014314 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2201      	movs	r2, #1
 800f236:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f238:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f23c:	f005 fa82 	bl	8014744 <USBD_static_malloc>
 800f240:	4602      	mov	r2, r0
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d102      	bne.n	800f258 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800f252:	2301      	movs	r3, #1
 800f254:	73fb      	strb	r3, [r7, #15]
 800f256:	e026      	b.n	800f2a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f25e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2200      	movs	r2, #0
 800f276:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	7c1b      	ldrb	r3, [r3, #16]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d109      	bne.n	800f296 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f28c:	2101      	movs	r1, #1
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f005 f9bc 	bl	801460c <USBD_LL_PrepareReceive>
 800f294:	e007      	b.n	800f2a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	2101      	movs	r1, #1
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f005 f9b3 	bl	801460c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f2c0:	2181      	movs	r1, #129	; 0x81
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f005 f864 	bl	8014390 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f005 f85d 	bl	8014390 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f2de:	2182      	movs	r1, #130	; 0x82
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f005 f855 	bl	8014390 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00e      	beq.n	800f314 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f306:	4618      	mov	r0, r3
 800f308:	f005 fa2a 	bl	8014760 <USBD_static_free>
    pdev->pClassData = NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800f314:	7bfb      	ldrb	r3, [r7, #15]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b086      	sub	sp, #24
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f32e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f330:	2300      	movs	r3, #0
 800f332:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f334:	2300      	movs	r3, #0
 800f336:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f344:	2b00      	cmp	r3, #0
 800f346:	d039      	beq.n	800f3bc <USBD_CDC_Setup+0x9e>
 800f348:	2b20      	cmp	r3, #32
 800f34a:	d17c      	bne.n	800f446 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	88db      	ldrh	r3, [r3, #6]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d029      	beq.n	800f3a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	b25b      	sxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	da11      	bge.n	800f382 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800f36a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	88d2      	ldrh	r2, [r2, #6]
 800f370:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f372:	6939      	ldr	r1, [r7, #16]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	88db      	ldrh	r3, [r3, #6]
 800f378:	461a      	mov	r2, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f001 fa3a 	bl	80107f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800f380:	e068      	b.n	800f454 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	785a      	ldrb	r2, [r3, #1]
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	88db      	ldrh	r3, [r3, #6]
 800f390:	b2da      	uxtb	r2, r3
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f398:	6939      	ldr	r1, [r7, #16]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	88db      	ldrh	r3, [r3, #6]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f001 fa55 	bl	8010850 <USBD_CtlPrepareRx>
      break;
 800f3a6:	e055      	b.n	800f454 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	7850      	ldrb	r0, [r2, #1]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	4798      	blx	r3
      break;
 800f3ba:	e04b      	b.n	800f454 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	785b      	ldrb	r3, [r3, #1]
 800f3c0:	2b0a      	cmp	r3, #10
 800f3c2:	d017      	beq.n	800f3f4 <USBD_CDC_Setup+0xd6>
 800f3c4:	2b0b      	cmp	r3, #11
 800f3c6:	d029      	beq.n	800f41c <USBD_CDC_Setup+0xfe>
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d133      	bne.n	800f434 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d107      	bne.n	800f3e6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f3d6:	f107 030c 	add.w	r3, r7, #12
 800f3da:	2202      	movs	r2, #2
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f001 fa08 	bl	80107f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f3e4:	e02e      	b.n	800f444 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 f998 	bl	801071e <USBD_CtlError>
            ret = USBD_FAIL;
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f3f2:	e027      	b.n	800f444 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3fa:	2b03      	cmp	r3, #3
 800f3fc:	d107      	bne.n	800f40e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800f3fe:	f107 030f 	add.w	r3, r7, #15
 800f402:	2201      	movs	r2, #1
 800f404:	4619      	mov	r1, r3
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f001 f9f4 	bl	80107f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f40c:	e01a      	b.n	800f444 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f40e:	6839      	ldr	r1, [r7, #0]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f001 f984 	bl	801071e <USBD_CtlError>
            ret = USBD_FAIL;
 800f416:	2302      	movs	r3, #2
 800f418:	75fb      	strb	r3, [r7, #23]
          break;
 800f41a:	e013      	b.n	800f444 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f422:	2b03      	cmp	r3, #3
 800f424:	d00d      	beq.n	800f442 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f001 f978 	bl	801071e <USBD_CtlError>
            ret = USBD_FAIL;
 800f42e:	2302      	movs	r3, #2
 800f430:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f432:	e006      	b.n	800f442 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f001 f971 	bl	801071e <USBD_CtlError>
          ret = USBD_FAIL;
 800f43c:	2302      	movs	r3, #2
 800f43e:	75fb      	strb	r3, [r7, #23]
          break;
 800f440:	e000      	b.n	800f444 <USBD_CDC_Setup+0x126>
          break;
 800f442:	bf00      	nop
      }
      break;
 800f444:	e006      	b.n	800f454 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 f968 	bl	801071e <USBD_CtlError>
      ret = USBD_FAIL;
 800f44e:	2302      	movs	r3, #2
 800f450:	75fb      	strb	r3, [r7, #23]
      break;
 800f452:	bf00      	nop
  }

  return ret;
 800f454:	7dfb      	ldrb	r3, [r7, #23]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	460b      	mov	r3, r1
 800f468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f470:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f478:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d03a      	beq.n	800f4fa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f484:	78fa      	ldrb	r2, [r7, #3]
 800f486:	6879      	ldr	r1, [r7, #4]
 800f488:	4613      	mov	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	440b      	add	r3, r1
 800f492:	331c      	adds	r3, #28
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d029      	beq.n	800f4ee <USBD_CDC_DataIn+0x90>
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	331c      	adds	r3, #28
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	78f9      	ldrb	r1, [r7, #3]
 800f4ae:	68b8      	ldr	r0, [r7, #8]
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	00db      	lsls	r3, r3, #3
 800f4b4:	1a5b      	subs	r3, r3, r1
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4403      	add	r3, r0
 800f4ba:	3344      	adds	r3, #68	; 0x44
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	fbb2 f1f3 	udiv	r1, r2, r3
 800f4c2:	fb03 f301 	mul.w	r3, r3, r1
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d110      	bne.n	800f4ee <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f4cc:	78fa      	ldrb	r2, [r7, #3]
 800f4ce:	6879      	ldr	r1, [r7, #4]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	440b      	add	r3, r1
 800f4da:	331c      	adds	r3, #28
 800f4dc:	2200      	movs	r2, #0
 800f4de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f4e0:	78f9      	ldrb	r1, [r7, #3]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f005 f856 	bl	8014598 <USBD_LL_Transmit>
 800f4ec:	e003      	b.n	800f4f6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	e000      	b.n	800f4fc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f4fa:	2302      	movs	r3, #2
  }
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f516:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f518:	78fb      	ldrb	r3, [r7, #3]
 800f51a:	4619      	mov	r1, r3
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f005 f8af 	bl	8014680 <USBD_LL_GetRxDataSize>
 800f522:	4602      	mov	r2, r0
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00d      	beq.n	800f550 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f548:	4611      	mov	r1, r2
 800f54a:	4798      	blx	r3

    return USBD_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	e000      	b.n	800f552 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f550:	2302      	movs	r3, #2
  }
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f568:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f570:	2b00      	cmp	r3, #0
 800f572:	d015      	beq.n	800f5a0 <USBD_CDC_EP0_RxReady+0x46>
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f57a:	2bff      	cmp	r3, #255	; 0xff
 800f57c:	d010      	beq.n	800f5a0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f58c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f594:	b292      	uxth	r2, r2
 800f596:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	22ff      	movs	r2, #255	; 0xff
 800f59c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2243      	movs	r2, #67	; 0x43
 800f5b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f5ba:	4b03      	ldr	r3, [pc, #12]	; (800f5c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	200000e0 	.word	0x200000e0

0800f5cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2243      	movs	r2, #67	; 0x43
 800f5d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f5da:	4b03      	ldr	r3, [pc, #12]	; (800f5e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	2000009c 	.word	0x2000009c

0800f5ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2243      	movs	r2, #67	; 0x43
 800f5f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f5fa:	4b03      	ldr	r3, [pc, #12]	; (800f608 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	20000124 	.word	0x20000124

0800f60c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	220a      	movs	r2, #10
 800f618:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f61a:	4b03      	ldr	r3, [pc, #12]	; (800f628 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr
 800f628:	20000058 	.word	0x20000058

0800f62c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f636:	2302      	movs	r3, #2
 800f638:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d005      	beq.n	800f64c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f648:	2300      	movs	r3, #0
 800f64a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b087      	sub	sp, #28
 800f65e:	af00      	add	r7, sp, #0
 800f660:	60f8      	str	r0, [r7, #12]
 800f662:	60b9      	str	r1, [r7, #8]
 800f664:	4613      	mov	r3, r2
 800f666:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f678:	88fa      	ldrh	r2, [r7, #6]
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800f68e:	b480      	push	{r7}
 800f690:	b085      	sub	sp, #20
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f69e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d017      	beq.n	800f700 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	7c1b      	ldrb	r3, [r3, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d109      	bne.n	800f6ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6e2:	2101      	movs	r1, #1
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f004 ff91 	bl	801460c <USBD_LL_PrepareReceive>
 800f6ea:	e007      	b.n	800f6fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6f2:	2340      	movs	r3, #64	; 0x40
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f004 ff88 	bl	801460c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e000      	b.n	800f702 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f700:	2302      	movs	r3, #2
  }
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	60f8      	str	r0, [r7, #12]
 800f712:	60b9      	str	r1, [r7, #8]
 800f714:	4613      	mov	r3, r2
 800f716:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f71e:	2302      	movs	r3, #2
 800f720:	e01a      	b.n	800f758 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d003      	beq.n	800f734 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d003      	beq.n	800f742 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	79fa      	ldrb	r2, [r7, #7]
 800f74e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f004 fd61 	bl	8014218 <USBD_LL_Init>

  return USBD_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f760:	b480      	push	{r7}
 800f762:	b085      	sub	sp, #20
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d006      	beq.n	800f782 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	73fb      	strb	r3, [r7, #15]
 800f780:	e001      	b.n	800f786 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f782:	2302      	movs	r3, #2
 800f784:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f786:	7bfb      	ldrb	r3, [r7, #15]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f004 fd87 	bl	80142b0 <USBD_LL_Start>

  return USBD_OK;
 800f7a2:	2300      	movs	r3, #0
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	370c      	adds	r7, #12
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr

0800f7c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00c      	beq.n	800f7f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	78fa      	ldrb	r2, [r7, #3]
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	4798      	blx	r3
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	460b      	mov	r3, r1
 800f80a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	78fa      	ldrb	r2, [r7, #3]
 800f816:	4611      	mov	r1, r2
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	4798      	blx	r3

  return USBD_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b082      	sub	sp, #8
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f836:	6839      	ldr	r1, [r7, #0]
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 ff33 	bl	80106a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f84c:	461a      	mov	r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f85a:	f003 031f 	and.w	r3, r3, #31
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d00c      	beq.n	800f87c <USBD_LL_SetupStage+0x56>
 800f862:	2b01      	cmp	r3, #1
 800f864:	d302      	bcc.n	800f86c <USBD_LL_SetupStage+0x46>
 800f866:	2b02      	cmp	r3, #2
 800f868:	d010      	beq.n	800f88c <USBD_LL_SetupStage+0x66>
 800f86a:	e017      	b.n	800f89c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 fa09 	bl	800fc8c <USBD_StdDevReq>
      break;
 800f87a:	e01a      	b.n	800f8b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fa6b 	bl	800fd60 <USBD_StdItfReq>
      break;
 800f88a:	e012      	b.n	800f8b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f892:	4619      	mov	r1, r3
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 faa9 	bl	800fdec <USBD_StdEPReq>
      break;
 800f89a:	e00a      	b.n	800f8b2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f8a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f004 fda6 	bl	80143fc <USBD_LL_StallEP>
      break;
 800f8b0:	bf00      	nop
  }

  return USBD_OK;
 800f8b2:	2300      	movs	r3, #0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f8ca:	7afb      	ldrb	r3, [r7, #11]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d14b      	bne.n	800f968 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f8d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	d134      	bne.n	800f94c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	68da      	ldr	r2, [r3, #12]
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d919      	bls.n	800f922 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	68da      	ldr	r2, [r3, #12]
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	1ad2      	subs	r2, r2, r3
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	68da      	ldr	r2, [r3, #12]
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f904:	429a      	cmp	r2, r3
 800f906:	d203      	bcs.n	800f910 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	e002      	b.n	800f916 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f914:	b29b      	uxth	r3, r3
 800f916:	461a      	mov	r2, r3
 800f918:	6879      	ldr	r1, [r7, #4]
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f000 ffb6 	bl	801088c <USBD_CtlContinueRx>
 800f920:	e038      	b.n	800f994 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f934:	2b03      	cmp	r3, #3
 800f936:	d105      	bne.n	800f944 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 ffb3 	bl	80108b0 <USBD_CtlSendStatus>
 800f94a:	e023      	b.n	800f994 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f952:	2b05      	cmp	r3, #5
 800f954:	d11e      	bne.n	800f994 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2200      	movs	r2, #0
 800f95a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800f95e:	2100      	movs	r1, #0
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f004 fd4b 	bl	80143fc <USBD_LL_StallEP>
 800f966:	e015      	b.n	800f994 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f96e:	699b      	ldr	r3, [r3, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00d      	beq.n	800f990 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d108      	bne.n	800f990 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	7afa      	ldrb	r2, [r7, #11]
 800f988:	4611      	mov	r1, r2
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	4798      	blx	r3
 800f98e:	e001      	b.n	800f994 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f990:	2302      	movs	r3, #2
 800f992:	e000      	b.n	800f996 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b086      	sub	sp, #24
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	60f8      	str	r0, [r7, #12]
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	607a      	str	r2, [r7, #4]
 800f9aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f9ac:	7afb      	ldrb	r3, [r7, #11]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d17f      	bne.n	800fab2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	3314      	adds	r3, #20
 800f9b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	d15c      	bne.n	800fa7c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	68da      	ldr	r2, [r3, #12]
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d915      	bls.n	800f9fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	68da      	ldr	r2, [r3, #12]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	6879      	ldr	r1, [r7, #4]
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	f000 ff20 	bl	801082c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f004 fe0a 	bl	801460c <USBD_LL_PrepareReceive>
 800f9f8:	e04e      	b.n	800fa98 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	6912      	ldr	r2, [r2, #16]
 800fa02:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa06:	fb02 f201 	mul.w	r2, r2, r1
 800fa0a:	1a9b      	subs	r3, r3, r2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d11c      	bne.n	800fa4a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d316      	bcc.n	800fa4a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	689a      	ldr	r2, [r3, #8]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d20f      	bcs.n	800fa4a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f000 fefc 	bl	801082c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	2200      	movs	r2, #0
 800fa40:	2100      	movs	r1, #0
 800fa42:	68f8      	ldr	r0, [r7, #12]
 800fa44:	f004 fde2 	bl	801460c <USBD_LL_PrepareReceive>
 800fa48:	e026      	b.n	800fa98 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00a      	beq.n	800fa6c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d105      	bne.n	800fa6c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fa6c:	2180      	movs	r1, #128	; 0x80
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f004 fcc4 	bl	80143fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f000 ff2e 	bl	80108d6 <USBD_CtlReceiveStatus>
 800fa7a:	e00d      	b.n	800fa98 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa82:	2b04      	cmp	r3, #4
 800fa84:	d004      	beq.n	800fa90 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fa90:	2180      	movs	r1, #128	; 0x80
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f004 fcb2 	bl	80143fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d11d      	bne.n	800fade <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff fe82 	bl	800f7ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fab0:	e015      	b.n	800fade <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00d      	beq.n	800fada <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fac4:	2b03      	cmp	r3, #3
 800fac6:	d108      	bne.n	800fada <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800face:	695b      	ldr	r3, [r3, #20]
 800fad0:	7afa      	ldrb	r2, [r7, #11]
 800fad2:	4611      	mov	r1, r2
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	4798      	blx	r3
 800fad8:	e001      	b.n	800fade <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fada:	2302      	movs	r3, #2
 800fadc:	e000      	b.n	800fae0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800faf0:	2340      	movs	r3, #64	; 0x40
 800faf2:	2200      	movs	r2, #0
 800faf4:	2100      	movs	r1, #0
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f004 fc0c 	bl	8014314 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2240      	movs	r2, #64	; 0x40
 800fb08:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb0c:	2340      	movs	r3, #64	; 0x40
 800fb0e:	2200      	movs	r2, #0
 800fb10:	2180      	movs	r1, #128	; 0x80
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f004 fbfe 	bl	8014314 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2240      	movs	r2, #64	; 0x40
 800fb22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d009      	beq.n	800fb60 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	6852      	ldr	r2, [r2, #4]
 800fb58:	b2d2      	uxtb	r2, r2
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	4798      	blx	r3
  }

  return USBD_OK;
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	460b      	mov	r3, r1
 800fb74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	78fa      	ldrb	r2, [r7, #3]
 800fb7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	370c      	adds	r7, #12
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b083      	sub	sp, #12
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2204      	movs	r2, #4
 800fba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	d105      	bne.n	800fbd2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	d10b      	bne.n	800fc0a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d005      	beq.n	800fc0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc04:	69db      	ldr	r3, [r3, #28]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fc2e:	b480      	push	{r7}
 800fc30:	b083      	sub	sp, #12
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	460b      	mov	r3, r1
 800fc38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b082      	sub	sp, #8
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	6852      	ldr	r2, [r2, #4]
 800fc7a:	b2d2      	uxtb	r2, r2
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	4798      	blx	r3

  return USBD_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	d004      	beq.n	800fcb0 <USBD_StdDevReq+0x24>
 800fca6:	2b40      	cmp	r3, #64	; 0x40
 800fca8:	d002      	beq.n	800fcb0 <USBD_StdDevReq+0x24>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d008      	beq.n	800fcc0 <USBD_StdDevReq+0x34>
 800fcae:	e04c      	b.n	800fd4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	4798      	blx	r3
      break;
 800fcbe:	e049      	b.n	800fd54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	785b      	ldrb	r3, [r3, #1]
 800fcc4:	2b09      	cmp	r3, #9
 800fcc6:	d83a      	bhi.n	800fd3e <USBD_StdDevReq+0xb2>
 800fcc8:	a201      	add	r2, pc, #4	; (adr r2, 800fcd0 <USBD_StdDevReq+0x44>)
 800fcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcce:	bf00      	nop
 800fcd0:	0800fd21 	.word	0x0800fd21
 800fcd4:	0800fd35 	.word	0x0800fd35
 800fcd8:	0800fd3f 	.word	0x0800fd3f
 800fcdc:	0800fd2b 	.word	0x0800fd2b
 800fce0:	0800fd3f 	.word	0x0800fd3f
 800fce4:	0800fd03 	.word	0x0800fd03
 800fce8:	0800fcf9 	.word	0x0800fcf9
 800fcec:	0800fd3f 	.word	0x0800fd3f
 800fcf0:	0800fd17 	.word	0x0800fd17
 800fcf4:	0800fd0d 	.word	0x0800fd0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f9d4 	bl	80100a8 <USBD_GetDescriptor>
          break;
 800fd00:	e022      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fb61 	bl	80103cc <USBD_SetAddress>
          break;
 800fd0a:	e01d      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fb9e 	bl	8010450 <USBD_SetConfig>
          break;
 800fd14:	e018      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd16:	6839      	ldr	r1, [r7, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fc27 	bl	801056c <USBD_GetConfig>
          break;
 800fd1e:	e013      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fc56 	bl	80105d4 <USBD_GetStatus>
          break;
 800fd28:	e00e      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fc84 	bl	801063a <USBD_SetFeature>
          break;
 800fd32:	e009      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fc93 	bl	8010662 <USBD_ClrFeature>
          break;
 800fd3c:	e004      	b.n	800fd48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 fcec 	bl	801071e <USBD_CtlError>
          break;
 800fd46:	bf00      	nop
      }
      break;
 800fd48:	e004      	b.n	800fd54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800fd4a:	6839      	ldr	r1, [r7, #0]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fce6 	bl	801071e <USBD_CtlError>
      break;
 800fd52:	bf00      	nop
  }

  return ret;
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop

0800fd60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	d003      	beq.n	800fd82 <USBD_StdItfReq+0x22>
 800fd7a:	2b40      	cmp	r3, #64	; 0x40
 800fd7c:	d001      	beq.n	800fd82 <USBD_StdItfReq+0x22>
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d12a      	bne.n	800fdd8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d81d      	bhi.n	800fdca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	889b      	ldrh	r3, [r3, #4]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d813      	bhi.n	800fdc0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	6839      	ldr	r1, [r7, #0]
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	4798      	blx	r3
 800fda6:	4603      	mov	r3, r0
 800fda8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	88db      	ldrh	r3, [r3, #6]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d110      	bne.n	800fdd4 <USBD_StdItfReq+0x74>
 800fdb2:	7bfb      	ldrb	r3, [r7, #15]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10d      	bne.n	800fdd4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 fd79 	bl	80108b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fdbe:	e009      	b.n	800fdd4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 fcab 	bl	801071e <USBD_CtlError>
          break;
 800fdc8:	e004      	b.n	800fdd4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fca6 	bl	801071e <USBD_CtlError>
          break;
 800fdd2:	e000      	b.n	800fdd6 <USBD_StdItfReq+0x76>
          break;
 800fdd4:	bf00      	nop
      }
      break;
 800fdd6:	e004      	b.n	800fde2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fc9f 	bl	801071e <USBD_CtlError>
      break;
 800fde0:	bf00      	nop
  }

  return USBD_OK;
 800fde2:	2300      	movs	r3, #0
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	889b      	ldrh	r3, [r3, #4]
 800fdfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe08:	2b20      	cmp	r3, #32
 800fe0a:	d004      	beq.n	800fe16 <USBD_StdEPReq+0x2a>
 800fe0c:	2b40      	cmp	r3, #64	; 0x40
 800fe0e:	d002      	beq.n	800fe16 <USBD_StdEPReq+0x2a>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d008      	beq.n	800fe26 <USBD_StdEPReq+0x3a>
 800fe14:	e13d      	b.n	8010092 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	4798      	blx	r3
      break;
 800fe24:	e13a      	b.n	801009c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe2e:	2b20      	cmp	r3, #32
 800fe30:	d10a      	bne.n	800fe48 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	4798      	blx	r3
 800fe40:	4603      	mov	r3, r0
 800fe42:	73fb      	strb	r3, [r7, #15]

        return ret;
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
 800fe46:	e12a      	b.n	801009e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	785b      	ldrb	r3, [r3, #1]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d03e      	beq.n	800fece <USBD_StdEPReq+0xe2>
 800fe50:	2b03      	cmp	r3, #3
 800fe52:	d002      	beq.n	800fe5a <USBD_StdEPReq+0x6e>
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d070      	beq.n	800ff3a <USBD_StdEPReq+0x14e>
 800fe58:	e115      	b.n	8010086 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d002      	beq.n	800fe6a <USBD_StdEPReq+0x7e>
 800fe64:	2b03      	cmp	r3, #3
 800fe66:	d015      	beq.n	800fe94 <USBD_StdEPReq+0xa8>
 800fe68:	e02b      	b.n	800fec2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe6a:	7bbb      	ldrb	r3, [r7, #14]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00c      	beq.n	800fe8a <USBD_StdEPReq+0x9e>
 800fe70:	7bbb      	ldrb	r3, [r7, #14]
 800fe72:	2b80      	cmp	r3, #128	; 0x80
 800fe74:	d009      	beq.n	800fe8a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fe76:	7bbb      	ldrb	r3, [r7, #14]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f004 fabe 	bl	80143fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fe80:	2180      	movs	r1, #128	; 0x80
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f004 faba 	bl	80143fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe88:	e020      	b.n	800fecc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 fc46 	bl	801071e <USBD_CtlError>
              break;
 800fe92:	e01b      	b.n	800fecc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	885b      	ldrh	r3, [r3, #2]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10e      	bne.n	800feba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d00b      	beq.n	800feba <USBD_StdEPReq+0xce>
 800fea2:	7bbb      	ldrb	r3, [r7, #14]
 800fea4:	2b80      	cmp	r3, #128	; 0x80
 800fea6:	d008      	beq.n	800feba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	88db      	ldrh	r3, [r3, #6]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d104      	bne.n	800feba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800feb0:	7bbb      	ldrb	r3, [r7, #14]
 800feb2:	4619      	mov	r1, r3
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f004 faa1 	bl	80143fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fcf8 	bl	80108b0 <USBD_CtlSendStatus>

              break;
 800fec0:	e004      	b.n	800fecc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 fc2a 	bl	801071e <USBD_CtlError>
              break;
 800feca:	bf00      	nop
          }
          break;
 800fecc:	e0e0      	b.n	8010090 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d002      	beq.n	800fede <USBD_StdEPReq+0xf2>
 800fed8:	2b03      	cmp	r3, #3
 800feda:	d015      	beq.n	800ff08 <USBD_StdEPReq+0x11c>
 800fedc:	e026      	b.n	800ff2c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fede:	7bbb      	ldrb	r3, [r7, #14]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00c      	beq.n	800fefe <USBD_StdEPReq+0x112>
 800fee4:	7bbb      	ldrb	r3, [r7, #14]
 800fee6:	2b80      	cmp	r3, #128	; 0x80
 800fee8:	d009      	beq.n	800fefe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800feea:	7bbb      	ldrb	r3, [r7, #14]
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f004 fa84 	bl	80143fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fef4:	2180      	movs	r1, #128	; 0x80
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f004 fa80 	bl	80143fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fefc:	e01c      	b.n	800ff38 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 fc0c 	bl	801071e <USBD_CtlError>
              break;
 800ff06:	e017      	b.n	800ff38 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	885b      	ldrh	r3, [r3, #2]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d112      	bne.n	800ff36 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
 800ff12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d004      	beq.n	800ff24 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff1a:	7bbb      	ldrb	r3, [r7, #14]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f004 faa2 	bl	8014468 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fcc3 	bl	80108b0 <USBD_CtlSendStatus>
              }
              break;
 800ff2a:	e004      	b.n	800ff36 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800ff2c:	6839      	ldr	r1, [r7, #0]
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f000 fbf5 	bl	801071e <USBD_CtlError>
              break;
 800ff34:	e000      	b.n	800ff38 <USBD_StdEPReq+0x14c>
              break;
 800ff36:	bf00      	nop
          }
          break;
 800ff38:	e0aa      	b.n	8010090 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d002      	beq.n	800ff4a <USBD_StdEPReq+0x15e>
 800ff44:	2b03      	cmp	r3, #3
 800ff46:	d032      	beq.n	800ffae <USBD_StdEPReq+0x1c2>
 800ff48:	e097      	b.n	801007a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff4a:	7bbb      	ldrb	r3, [r7, #14]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d007      	beq.n	800ff60 <USBD_StdEPReq+0x174>
 800ff50:	7bbb      	ldrb	r3, [r7, #14]
 800ff52:	2b80      	cmp	r3, #128	; 0x80
 800ff54:	d004      	beq.n	800ff60 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 fbe0 	bl	801071e <USBD_CtlError>
                break;
 800ff5e:	e091      	b.n	8010084 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	da0b      	bge.n	800ff80 <USBD_StdEPReq+0x194>
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff6e:	4613      	mov	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4413      	add	r3, r2
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	3310      	adds	r3, #16
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	e00b      	b.n	800ff98 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff80:	7bbb      	ldrb	r3, [r7, #14]
 800ff82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff86:	4613      	mov	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4413      	add	r3, r2
 800ff96:	3304      	adds	r3, #4
 800ff98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fc24 	bl	80107f4 <USBD_CtlSendData>
              break;
 800ffac:	e06a      	b.n	8010084 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da11      	bge.n	800ffda <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffb6:	7bbb      	ldrb	r3, [r7, #14]
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	3318      	adds	r3, #24
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d117      	bne.n	8010000 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ffd0:	6839      	ldr	r1, [r7, #0]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fba3 	bl	801071e <USBD_CtlError>
                  break;
 800ffd8:	e054      	b.n	8010084 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	f003 020f 	and.w	r2, r3, #15
 800ffe0:	6879      	ldr	r1, [r7, #4]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	440b      	add	r3, r1
 800ffec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d104      	bne.n	8010000 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fb90 	bl	801071e <USBD_CtlError>
                  break;
 800fffe:	e041      	b.n	8010084 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010004:	2b00      	cmp	r3, #0
 8010006:	da0b      	bge.n	8010020 <USBD_StdEPReq+0x234>
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	3310      	adds	r3, #16
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	4413      	add	r3, r2
 801001c:	3304      	adds	r3, #4
 801001e:	e00b      	b.n	8010038 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010020:	7bbb      	ldrb	r3, [r7, #14]
 8010022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010026:	4613      	mov	r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	3304      	adds	r3, #4
 8010038:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801003a:	7bbb      	ldrb	r3, [r7, #14]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d002      	beq.n	8010046 <USBD_StdEPReq+0x25a>
 8010040:	7bbb      	ldrb	r3, [r7, #14]
 8010042:	2b80      	cmp	r3, #128	; 0x80
 8010044:	d103      	bne.n	801004e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2200      	movs	r2, #0
 801004a:	601a      	str	r2, [r3, #0]
 801004c:	e00e      	b.n	801006c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801004e:	7bbb      	ldrb	r3, [r7, #14]
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f004 fa3e 	bl	80144d4 <USBD_LL_IsStallEP>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2201      	movs	r2, #1
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	e002      	b.n	801006c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	2202      	movs	r2, #2
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fbbe 	bl	80107f4 <USBD_CtlSendData>
              break;
 8010078:	e004      	b.n	8010084 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fb4e 	bl	801071e <USBD_CtlError>
              break;
 8010082:	bf00      	nop
          }
          break;
 8010084:	e004      	b.n	8010090 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8010086:	6839      	ldr	r1, [r7, #0]
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fb48 	bl	801071e <USBD_CtlError>
          break;
 801008e:	bf00      	nop
      }
      break;
 8010090:	e004      	b.n	801009c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 fb42 	bl	801071e <USBD_CtlError>
      break;
 801009a:	bf00      	nop
  }

  return ret;
 801009c:	7bfb      	ldrb	r3, [r7, #15]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
	...

080100a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100b2:	2300      	movs	r3, #0
 80100b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100ba:	2300      	movs	r3, #0
 80100bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	885b      	ldrh	r3, [r3, #2]
 80100c2:	0a1b      	lsrs	r3, r3, #8
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	2b0e      	cmp	r3, #14
 80100ca:	f200 8152 	bhi.w	8010372 <USBD_GetDescriptor+0x2ca>
 80100ce:	a201      	add	r2, pc, #4	; (adr r2, 80100d4 <USBD_GetDescriptor+0x2c>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	08010145 	.word	0x08010145
 80100d8:	0801015d 	.word	0x0801015d
 80100dc:	0801019d 	.word	0x0801019d
 80100e0:	08010373 	.word	0x08010373
 80100e4:	08010373 	.word	0x08010373
 80100e8:	08010313 	.word	0x08010313
 80100ec:	0801033f 	.word	0x0801033f
 80100f0:	08010373 	.word	0x08010373
 80100f4:	08010373 	.word	0x08010373
 80100f8:	08010373 	.word	0x08010373
 80100fc:	08010373 	.word	0x08010373
 8010100:	08010373 	.word	0x08010373
 8010104:	08010373 	.word	0x08010373
 8010108:	08010373 	.word	0x08010373
 801010c:	08010111 	.word	0x08010111
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00b      	beq.n	8010134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	7c12      	ldrb	r2, [r2, #16]
 8010128:	f107 0108 	add.w	r1, r7, #8
 801012c:	4610      	mov	r0, r2
 801012e:	4798      	blx	r3
 8010130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010132:	e126      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 faf1 	bl	801071e <USBD_CtlError>
        err++;
 801013c:	7afb      	ldrb	r3, [r7, #11]
 801013e:	3301      	adds	r3, #1
 8010140:	72fb      	strb	r3, [r7, #11]
      break;
 8010142:	e11e      	b.n	8010382 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	7c12      	ldrb	r2, [r2, #16]
 8010150:	f107 0108 	add.w	r1, r7, #8
 8010154:	4610      	mov	r0, r2
 8010156:	4798      	blx	r3
 8010158:	60f8      	str	r0, [r7, #12]
      break;
 801015a:	e112      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	7c1b      	ldrb	r3, [r3, #16]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10d      	bne.n	8010180 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801016a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016c:	f107 0208 	add.w	r2, r7, #8
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
 8010174:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3301      	adds	r3, #1
 801017a:	2202      	movs	r2, #2
 801017c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801017e:	e100      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010188:	f107 0208 	add.w	r2, r7, #8
 801018c:	4610      	mov	r0, r2
 801018e:	4798      	blx	r3
 8010190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	3301      	adds	r3, #1
 8010196:	2202      	movs	r2, #2
 8010198:	701a      	strb	r2, [r3, #0]
      break;
 801019a:	e0f2      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	885b      	ldrh	r3, [r3, #2]
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b05      	cmp	r3, #5
 80101a4:	f200 80ac 	bhi.w	8010300 <USBD_GetDescriptor+0x258>
 80101a8:	a201      	add	r2, pc, #4	; (adr r2, 80101b0 <USBD_GetDescriptor+0x108>)
 80101aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ae:	bf00      	nop
 80101b0:	080101c9 	.word	0x080101c9
 80101b4:	080101fd 	.word	0x080101fd
 80101b8:	08010231 	.word	0x08010231
 80101bc:	08010265 	.word	0x08010265
 80101c0:	08010299 	.word	0x08010299
 80101c4:	080102cd 	.word	0x080102cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	7c12      	ldrb	r2, [r2, #16]
 80101e0:	f107 0108 	add.w	r1, r7, #8
 80101e4:	4610      	mov	r0, r2
 80101e6:	4798      	blx	r3
 80101e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ea:	e091      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fa95 	bl	801071e <USBD_CtlError>
            err++;
 80101f4:	7afb      	ldrb	r3, [r7, #11]
 80101f6:	3301      	adds	r3, #1
 80101f8:	72fb      	strb	r3, [r7, #11]
          break;
 80101fa:	e089      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00b      	beq.n	8010220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	7c12      	ldrb	r2, [r2, #16]
 8010214:	f107 0108 	add.w	r1, r7, #8
 8010218:	4610      	mov	r0, r2
 801021a:	4798      	blx	r3
 801021c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801021e:	e077      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 fa7b 	bl	801071e <USBD_CtlError>
            err++;
 8010228:	7afb      	ldrb	r3, [r7, #11]
 801022a:	3301      	adds	r3, #1
 801022c:	72fb      	strb	r3, [r7, #11]
          break;
 801022e:	e06f      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00b      	beq.n	8010254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	7c12      	ldrb	r2, [r2, #16]
 8010248:	f107 0108 	add.w	r1, r7, #8
 801024c:	4610      	mov	r0, r2
 801024e:	4798      	blx	r3
 8010250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010252:	e05d      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 fa61 	bl	801071e <USBD_CtlError>
            err++;
 801025c:	7afb      	ldrb	r3, [r7, #11]
 801025e:	3301      	adds	r3, #1
 8010260:	72fb      	strb	r3, [r7, #11]
          break;
 8010262:	e055      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801026a:	691b      	ldr	r3, [r3, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00b      	beq.n	8010288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	7c12      	ldrb	r2, [r2, #16]
 801027c:	f107 0108 	add.w	r1, r7, #8
 8010280:	4610      	mov	r0, r2
 8010282:	4798      	blx	r3
 8010284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010286:	e043      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010288:	6839      	ldr	r1, [r7, #0]
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fa47 	bl	801071e <USBD_CtlError>
            err++;
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	3301      	adds	r3, #1
 8010294:	72fb      	strb	r3, [r7, #11]
          break;
 8010296:	e03b      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	7c12      	ldrb	r2, [r2, #16]
 80102b0:	f107 0108 	add.w	r1, r7, #8
 80102b4:	4610      	mov	r0, r2
 80102b6:	4798      	blx	r3
 80102b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102ba:	e029      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102bc:	6839      	ldr	r1, [r7, #0]
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 fa2d 	bl	801071e <USBD_CtlError>
            err++;
 80102c4:	7afb      	ldrb	r3, [r7, #11]
 80102c6:	3301      	adds	r3, #1
 80102c8:	72fb      	strb	r3, [r7, #11]
          break;
 80102ca:	e021      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00b      	beq.n	80102f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	7c12      	ldrb	r2, [r2, #16]
 80102e4:	f107 0108 	add.w	r1, r7, #8
 80102e8:	4610      	mov	r0, r2
 80102ea:	4798      	blx	r3
 80102ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102ee:	e00f      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102f0:	6839      	ldr	r1, [r7, #0]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 fa13 	bl	801071e <USBD_CtlError>
            err++;
 80102f8:	7afb      	ldrb	r3, [r7, #11]
 80102fa:	3301      	adds	r3, #1
 80102fc:	72fb      	strb	r3, [r7, #11]
          break;
 80102fe:	e007      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fa0b 	bl	801071e <USBD_CtlError>
          err++;
 8010308:	7afb      	ldrb	r3, [r7, #11]
 801030a:	3301      	adds	r3, #1
 801030c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801030e:	e038      	b.n	8010382 <USBD_GetDescriptor+0x2da>
 8010310:	e037      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	7c1b      	ldrb	r3, [r3, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010322:	f107 0208 	add.w	r2, r7, #8
 8010326:	4610      	mov	r0, r2
 8010328:	4798      	blx	r3
 801032a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801032c:	e029      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f9f4 	bl	801071e <USBD_CtlError>
        err++;
 8010336:	7afb      	ldrb	r3, [r7, #11]
 8010338:	3301      	adds	r3, #1
 801033a:	72fb      	strb	r3, [r7, #11]
      break;
 801033c:	e021      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7c1b      	ldrb	r3, [r3, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10d      	bne.n	8010362 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801034e:	f107 0208 	add.w	r2, r7, #8
 8010352:	4610      	mov	r0, r2
 8010354:	4798      	blx	r3
 8010356:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3301      	adds	r3, #1
 801035c:	2207      	movs	r2, #7
 801035e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010360:	e00f      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f9da 	bl	801071e <USBD_CtlError>
        err++;
 801036a:	7afb      	ldrb	r3, [r7, #11]
 801036c:	3301      	adds	r3, #1
 801036e:	72fb      	strb	r3, [r7, #11]
      break;
 8010370:	e007      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010372:	6839      	ldr	r1, [r7, #0]
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f9d2 	bl	801071e <USBD_CtlError>
      err++;
 801037a:	7afb      	ldrb	r3, [r7, #11]
 801037c:	3301      	adds	r3, #1
 801037e:	72fb      	strb	r3, [r7, #11]
      break;
 8010380:	bf00      	nop
  }

  if (err != 0U)
 8010382:	7afb      	ldrb	r3, [r7, #11]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d11c      	bne.n	80103c2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8010388:	893b      	ldrh	r3, [r7, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d011      	beq.n	80103b2 <USBD_GetDescriptor+0x30a>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	88db      	ldrh	r3, [r3, #6]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00d      	beq.n	80103b2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	88da      	ldrh	r2, [r3, #6]
 801039a:	893b      	ldrh	r3, [r7, #8]
 801039c:	4293      	cmp	r3, r2
 801039e:	bf28      	it	cs
 80103a0:	4613      	movcs	r3, r2
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80103a6:	893b      	ldrh	r3, [r7, #8]
 80103a8:	461a      	mov	r2, r3
 80103aa:	68f9      	ldr	r1, [r7, #12]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fa21 	bl	80107f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	88db      	ldrh	r3, [r3, #6]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d104      	bne.n	80103c4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 fa78 	bl	80108b0 <USBD_CtlSendStatus>
 80103c0:	e000      	b.n	80103c4 <USBD_GetDescriptor+0x31c>
    return;
 80103c2:	bf00      	nop
    }
  }
}
 80103c4:	3710      	adds	r7, #16
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop

080103cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	889b      	ldrh	r3, [r3, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d130      	bne.n	8010440 <USBD_SetAddress+0x74>
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	88db      	ldrh	r3, [r3, #6]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d12c      	bne.n	8010440 <USBD_SetAddress+0x74>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	885b      	ldrh	r3, [r3, #2]
 80103ea:	2b7f      	cmp	r3, #127	; 0x7f
 80103ec:	d828      	bhi.n	8010440 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	885b      	ldrh	r3, [r3, #2]
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010400:	2b03      	cmp	r3, #3
 8010402:	d104      	bne.n	801040e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 f989 	bl	801071e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801040c:	e01c      	b.n	8010448 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	7bfa      	ldrb	r2, [r7, #15]
 8010412:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010416:	7bfb      	ldrb	r3, [r7, #15]
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f004 f886 	bl	801452c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fa45 	bl	80108b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d004      	beq.n	8010436 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2202      	movs	r2, #2
 8010430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010434:	e008      	b.n	8010448 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801043e:	e003      	b.n	8010448 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 f96b 	bl	801071e <USBD_CtlError>
  }
}
 8010448:	bf00      	nop
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	885b      	ldrh	r3, [r3, #2]
 801045e:	b2da      	uxtb	r2, r3
 8010460:	4b41      	ldr	r3, [pc, #260]	; (8010568 <USBD_SetConfig+0x118>)
 8010462:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010464:	4b40      	ldr	r3, [pc, #256]	; (8010568 <USBD_SetConfig+0x118>)
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d904      	bls.n	8010476 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 f955 	bl	801071e <USBD_CtlError>
 8010474:	e075      	b.n	8010562 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801047c:	2b02      	cmp	r3, #2
 801047e:	d002      	beq.n	8010486 <USBD_SetConfig+0x36>
 8010480:	2b03      	cmp	r3, #3
 8010482:	d023      	beq.n	80104cc <USBD_SetConfig+0x7c>
 8010484:	e062      	b.n	801054c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8010486:	4b38      	ldr	r3, [pc, #224]	; (8010568 <USBD_SetConfig+0x118>)
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d01a      	beq.n	80104c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801048e:	4b36      	ldr	r3, [pc, #216]	; (8010568 <USBD_SetConfig+0x118>)
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	461a      	mov	r2, r3
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2203      	movs	r2, #3
 801049c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80104a0:	4b31      	ldr	r3, [pc, #196]	; (8010568 <USBD_SetConfig+0x118>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	4619      	mov	r1, r3
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7ff f98b 	bl	800f7c2 <USBD_SetClassConfig>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b02      	cmp	r3, #2
 80104b0:	d104      	bne.n	80104bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80104b2:	6839      	ldr	r1, [r7, #0]
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f932 	bl	801071e <USBD_CtlError>
            return;
 80104ba:	e052      	b.n	8010562 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f9f7 	bl	80108b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80104c2:	e04e      	b.n	8010562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 f9f3 	bl	80108b0 <USBD_CtlSendStatus>
        break;
 80104ca:	e04a      	b.n	8010562 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80104cc:	4b26      	ldr	r3, [pc, #152]	; (8010568 <USBD_SetConfig+0x118>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d112      	bne.n	80104fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80104dc:	4b22      	ldr	r3, [pc, #136]	; (8010568 <USBD_SetConfig+0x118>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	461a      	mov	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80104e6:	4b20      	ldr	r3, [pc, #128]	; (8010568 <USBD_SetConfig+0x118>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	4619      	mov	r1, r3
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff f987 	bl	800f800 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f9dc 	bl	80108b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80104f8:	e033      	b.n	8010562 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80104fa:	4b1b      	ldr	r3, [pc, #108]	; (8010568 <USBD_SetConfig+0x118>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	461a      	mov	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	429a      	cmp	r2, r3
 8010506:	d01d      	beq.n	8010544 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	b2db      	uxtb	r3, r3
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff f975 	bl	800f800 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8010516:	4b14      	ldr	r3, [pc, #80]	; (8010568 <USBD_SetConfig+0x118>)
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	461a      	mov	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010520:	4b11      	ldr	r3, [pc, #68]	; (8010568 <USBD_SetConfig+0x118>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff f94b 	bl	800f7c2 <USBD_SetClassConfig>
 801052c:	4603      	mov	r3, r0
 801052e:	2b02      	cmp	r3, #2
 8010530:	d104      	bne.n	801053c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8010532:	6839      	ldr	r1, [r7, #0]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 f8f2 	bl	801071e <USBD_CtlError>
            return;
 801053a:	e012      	b.n	8010562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 f9b7 	bl	80108b0 <USBD_CtlSendStatus>
        break;
 8010542:	e00e      	b.n	8010562 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 f9b3 	bl	80108b0 <USBD_CtlSendStatus>
        break;
 801054a:	e00a      	b.n	8010562 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801054c:	6839      	ldr	r1, [r7, #0]
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 f8e5 	bl	801071e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8010554:	4b04      	ldr	r3, [pc, #16]	; (8010568 <USBD_SetConfig+0x118>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	4619      	mov	r1, r3
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff f950 	bl	800f800 <USBD_ClrClassConfig>
        break;
 8010560:	bf00      	nop
    }
  }
}
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	2000046c 	.word	0x2000046c

0801056c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	88db      	ldrh	r3, [r3, #6]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d004      	beq.n	8010588 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801057e:	6839      	ldr	r1, [r7, #0]
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f8cc 	bl	801071e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010586:	e021      	b.n	80105cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801058e:	2b01      	cmp	r3, #1
 8010590:	db17      	blt.n	80105c2 <USBD_GetConfig+0x56>
 8010592:	2b02      	cmp	r3, #2
 8010594:	dd02      	ble.n	801059c <USBD_GetConfig+0x30>
 8010596:	2b03      	cmp	r3, #3
 8010598:	d00b      	beq.n	80105b2 <USBD_GetConfig+0x46>
 801059a:	e012      	b.n	80105c2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3308      	adds	r3, #8
 80105a6:	2201      	movs	r2, #1
 80105a8:	4619      	mov	r1, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 f922 	bl	80107f4 <USBD_CtlSendData>
        break;
 80105b0:	e00c      	b.n	80105cc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	3304      	adds	r3, #4
 80105b6:	2201      	movs	r2, #1
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f91a 	bl	80107f4 <USBD_CtlSendData>
        break;
 80105c0:	e004      	b.n	80105cc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80105c2:	6839      	ldr	r1, [r7, #0]
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 f8aa 	bl	801071e <USBD_CtlError>
        break;
 80105ca:	bf00      	nop
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105e4:	3b01      	subs	r3, #1
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d81e      	bhi.n	8010628 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	88db      	ldrh	r3, [r3, #6]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d004      	beq.n	80105fc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80105f2:	6839      	ldr	r1, [r7, #0]
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 f892 	bl	801071e <USBD_CtlError>
        break;
 80105fa:	e01a      	b.n	8010632 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2201      	movs	r2, #1
 8010600:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010608:	2b00      	cmp	r3, #0
 801060a:	d005      	beq.n	8010618 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	f043 0202 	orr.w	r2, r3, #2
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	330c      	adds	r3, #12
 801061c:	2202      	movs	r2, #2
 801061e:	4619      	mov	r1, r3
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f8e7 	bl	80107f4 <USBD_CtlSendData>
      break;
 8010626:	e004      	b.n	8010632 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 f877 	bl	801071e <USBD_CtlError>
      break;
 8010630:	bf00      	nop
  }
}
 8010632:	bf00      	nop
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
 8010642:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	885b      	ldrh	r3, [r3, #2]
 8010648:	2b01      	cmp	r3, #1
 801064a:	d106      	bne.n	801065a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2201      	movs	r2, #1
 8010650:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f92b 	bl	80108b0 <USBD_CtlSendStatus>
  }
}
 801065a:	bf00      	nop
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b082      	sub	sp, #8
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010672:	3b01      	subs	r3, #1
 8010674:	2b02      	cmp	r3, #2
 8010676:	d80b      	bhi.n	8010690 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	885b      	ldrh	r3, [r3, #2]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d10c      	bne.n	801069a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f911 	bl	80108b0 <USBD_CtlSendStatus>
      }
      break;
 801068e:	e004      	b.n	801069a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f843 	bl	801071e <USBD_CtlError>
      break;
 8010698:	e000      	b.n	801069c <USBD_ClrFeature+0x3a>
      break;
 801069a:	bf00      	nop
  }
}
 801069c:	bf00      	nop
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781a      	ldrb	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	785a      	ldrb	r2, [r3, #1]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	3302      	adds	r3, #2
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	3303      	adds	r3, #3
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	021b      	lsls	r3, r3, #8
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	4413      	add	r3, r2
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	3304      	adds	r3, #4
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	3305      	adds	r3, #5
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	021b      	lsls	r3, r3, #8
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	4413      	add	r3, r2
 80106f0:	b29a      	uxth	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	3306      	adds	r3, #6
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	3307      	adds	r3, #7
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	b29b      	uxth	r3, r3
 8010706:	021b      	lsls	r3, r3, #8
 8010708:	b29b      	uxth	r3, r3
 801070a:	4413      	add	r3, r2
 801070c:	b29a      	uxth	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	80da      	strh	r2, [r3, #6]

}
 8010712:	bf00      	nop
 8010714:	370c      	adds	r7, #12
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr

0801071e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b082      	sub	sp, #8
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
 8010726:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010728:	2180      	movs	r1, #128	; 0x80
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f003 fe66 	bl	80143fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010730:	2100      	movs	r1, #0
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f003 fe62 	bl	80143fc <USBD_LL_StallEP>
}
 8010738:	bf00      	nop
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801074c:	2300      	movs	r3, #0
 801074e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d032      	beq.n	80107bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f000 f834 	bl	80107c4 <USBD_GetLen>
 801075c:	4603      	mov	r3, r0
 801075e:	3301      	adds	r3, #1
 8010760:	b29b      	uxth	r3, r3
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801076a:	7dfb      	ldrb	r3, [r7, #23]
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	75fa      	strb	r2, [r7, #23]
 8010770:	461a      	mov	r2, r3
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	4413      	add	r3, r2
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	7812      	ldrb	r2, [r2, #0]
 801077a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801077c:	7dfb      	ldrb	r3, [r7, #23]
 801077e:	1c5a      	adds	r2, r3, #1
 8010780:	75fa      	strb	r2, [r7, #23]
 8010782:	461a      	mov	r2, r3
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	4413      	add	r3, r2
 8010788:	2203      	movs	r2, #3
 801078a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801078c:	e012      	b.n	80107b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	1c5a      	adds	r2, r3, #1
 8010792:	60fa      	str	r2, [r7, #12]
 8010794:	7dfa      	ldrb	r2, [r7, #23]
 8010796:	1c51      	adds	r1, r2, #1
 8010798:	75f9      	strb	r1, [r7, #23]
 801079a:	4611      	mov	r1, r2
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	440a      	add	r2, r1
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	75fa      	strb	r2, [r7, #23]
 80107aa:	461a      	mov	r2, r3
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	4413      	add	r3, r2
 80107b0:	2200      	movs	r2, #0
 80107b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d1e8      	bne.n	801078e <USBD_GetString+0x4e>
    }
  }
}
 80107bc:	bf00      	nop
 80107be:	3718      	adds	r7, #24
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80107d0:	e005      	b.n	80107de <USBD_GetLen+0x1a>
  {
    len++;
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
 80107d4:	3301      	adds	r3, #1
 80107d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	3301      	adds	r3, #1
 80107dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1f5      	bne.n	80107d2 <USBD_GetLen+0xe>
  }

  return len;
 80107e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3714      	adds	r7, #20
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	4613      	mov	r3, r2
 8010800:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2202      	movs	r2, #2
 8010806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801080a:	88fa      	ldrh	r2, [r7, #6]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010810:	88fa      	ldrh	r2, [r7, #6]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010816:	88fb      	ldrh	r3, [r7, #6]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	2100      	movs	r1, #0
 801081c:	68f8      	ldr	r0, [r7, #12]
 801081e:	f003 febb 	bl	8014598 <USBD_LL_Transmit>

  return USBD_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	4613      	mov	r3, r2
 8010838:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801083a:	88fb      	ldrh	r3, [r7, #6]
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	2100      	movs	r1, #0
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f003 fea9 	bl	8014598 <USBD_LL_Transmit>

  return USBD_OK;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	4613      	mov	r3, r2
 801085c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2203      	movs	r2, #3
 8010862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010866:	88fa      	ldrh	r2, [r7, #6]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801086e:	88fa      	ldrh	r2, [r7, #6]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010876:	88fb      	ldrh	r3, [r7, #6]
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	2100      	movs	r1, #0
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f003 fec5 	bl	801460c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	4613      	mov	r3, r2
 8010898:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801089a:	88fb      	ldrh	r3, [r7, #6]
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	2100      	movs	r1, #0
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f003 feb3 	bl	801460c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2204      	movs	r2, #4
 80108bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108c0:	2300      	movs	r3, #0
 80108c2:	2200      	movs	r2, #0
 80108c4:	2100      	movs	r1, #0
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f003 fe66 	bl	8014598 <USBD_LL_Transmit>

  return USBD_OK;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2205      	movs	r2, #5
 80108e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108e6:	2300      	movs	r3, #0
 80108e8:	2200      	movs	r2, #0
 80108ea:	2100      	movs	r1, #0
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f003 fe8d 	bl	801460c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80108fc:	b480      	push	{r7}
 80108fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010900:	bf00      	nop
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr
	...

0801090c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010912:	f3ef 8305 	mrs	r3, IPSR
 8010916:	60bb      	str	r3, [r7, #8]
  return(result);
 8010918:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10f      	bne.n	801093e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801091e:	f3ef 8310 	mrs	r3, PRIMASK
 8010922:	607b      	str	r3, [r7, #4]
  return(result);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d105      	bne.n	8010936 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801092a:	f3ef 8311 	mrs	r3, BASEPRI
 801092e:	603b      	str	r3, [r7, #0]
  return(result);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <osKernelInitialize+0x3a>
 8010936:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <osKernelInitialize+0x64>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b02      	cmp	r3, #2
 801093c:	d103      	bne.n	8010946 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801093e:	f06f 0305 	mvn.w	r3, #5
 8010942:	60fb      	str	r3, [r7, #12]
 8010944:	e00c      	b.n	8010960 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010946:	4b0a      	ldr	r3, [pc, #40]	; (8010970 <osKernelInitialize+0x64>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d105      	bne.n	801095a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801094e:	4b08      	ldr	r3, [pc, #32]	; (8010970 <osKernelInitialize+0x64>)
 8010950:	2201      	movs	r2, #1
 8010952:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010954:	2300      	movs	r3, #0
 8010956:	60fb      	str	r3, [r7, #12]
 8010958:	e002      	b.n	8010960 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801095e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010960:	68fb      	ldr	r3, [r7, #12]
}
 8010962:	4618      	mov	r0, r3
 8010964:	3714      	adds	r7, #20
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	20000470 	.word	0x20000470

08010974 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801097a:	f3ef 8305 	mrs	r3, IPSR
 801097e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010980:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10f      	bne.n	80109a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010986:	f3ef 8310 	mrs	r3, PRIMASK
 801098a:	607b      	str	r3, [r7, #4]
  return(result);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d105      	bne.n	801099e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010992:	f3ef 8311 	mrs	r3, BASEPRI
 8010996:	603b      	str	r3, [r7, #0]
  return(result);
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d007      	beq.n	80109ae <osKernelStart+0x3a>
 801099e:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <osKernelStart+0x68>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d103      	bne.n	80109ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80109a6:	f06f 0305 	mvn.w	r3, #5
 80109aa:	60fb      	str	r3, [r7, #12]
 80109ac:	e010      	b.n	80109d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80109ae:	4b0b      	ldr	r3, [pc, #44]	; (80109dc <osKernelStart+0x68>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d109      	bne.n	80109ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80109b6:	f7ff ffa1 	bl	80108fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80109ba:	4b08      	ldr	r3, [pc, #32]	; (80109dc <osKernelStart+0x68>)
 80109bc:	2202      	movs	r2, #2
 80109be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80109c0:	f001 fb78 	bl	80120b4 <vTaskStartScheduler>
      stat = osOK;
 80109c4:	2300      	movs	r3, #0
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	e002      	b.n	80109d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80109ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80109d0:	68fb      	ldr	r3, [r7, #12]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	20000470 	.word	0x20000470

080109e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b090      	sub	sp, #64	; 0x40
 80109e4:	af04      	add	r7, sp, #16
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80109ec:	2300      	movs	r3, #0
 80109ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109f0:	f3ef 8305 	mrs	r3, IPSR
 80109f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80109f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f040 808f 	bne.w	8010b1c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109fe:	f3ef 8310 	mrs	r3, PRIMASK
 8010a02:	61bb      	str	r3, [r7, #24]
  return(result);
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d105      	bne.n	8010a16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8010a0e:	617b      	str	r3, [r7, #20]
  return(result);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d003      	beq.n	8010a1e <osThreadNew+0x3e>
 8010a16:	4b44      	ldr	r3, [pc, #272]	; (8010b28 <osThreadNew+0x148>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d07e      	beq.n	8010b1c <osThreadNew+0x13c>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d07b      	beq.n	8010b1c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010a24:	2380      	movs	r3, #128	; 0x80
 8010a26:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010a28:	2318      	movs	r3, #24
 8010a2a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d045      	beq.n	8010ac8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d002      	beq.n	8010a4a <osThreadNew+0x6a>
        name = attr->name;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	699b      	ldr	r3, [r3, #24]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d002      	beq.n	8010a58 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	699b      	ldr	r3, [r3, #24]
 8010a56:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d008      	beq.n	8010a70 <osThreadNew+0x90>
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	2b38      	cmp	r3, #56	; 0x38
 8010a62:	d805      	bhi.n	8010a70 <osThreadNew+0x90>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <osThreadNew+0x94>
        return (NULL);
 8010a70:	2300      	movs	r3, #0
 8010a72:	e054      	b.n	8010b1e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	695b      	ldr	r3, [r3, #20]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d003      	beq.n	8010a84 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	695b      	ldr	r3, [r3, #20]
 8010a80:	089b      	lsrs	r3, r3, #2
 8010a82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00e      	beq.n	8010aaa <osThreadNew+0xca>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	2b5b      	cmp	r3, #91	; 0x5b
 8010a92:	d90a      	bls.n	8010aaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	695b      	ldr	r3, [r3, #20]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d002      	beq.n	8010aaa <osThreadNew+0xca>
        mem = 1;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	623b      	str	r3, [r7, #32]
 8010aa8:	e010      	b.n	8010acc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d10c      	bne.n	8010acc <osThreadNew+0xec>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d108      	bne.n	8010acc <osThreadNew+0xec>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d104      	bne.n	8010acc <osThreadNew+0xec>
          mem = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	623b      	str	r3, [r7, #32]
 8010ac6:	e001      	b.n	8010acc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d110      	bne.n	8010af4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ada:	9202      	str	r2, [sp, #8]
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	9300      	str	r3, [sp, #0]
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f001 f825 	bl	8011b38 <xTaskCreateStatic>
 8010aee:	4603      	mov	r3, r0
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	e013      	b.n	8010b1c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010af4:	6a3b      	ldr	r3, [r7, #32]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d110      	bne.n	8010b1c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	f107 0310 	add.w	r3, r7, #16
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f001 f86d 	bl	8011bec <xTaskCreate>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d001      	beq.n	8010b1c <osThreadNew+0x13c>
          hTask = NULL;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010b1c:	693b      	ldr	r3, [r7, #16]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3730      	adds	r7, #48	; 0x30
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20000470 	.word	0x20000470

08010b2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b34:	f3ef 8305 	mrs	r3, IPSR
 8010b38:	613b      	str	r3, [r7, #16]
  return(result);
 8010b3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10f      	bne.n	8010b60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b40:	f3ef 8310 	mrs	r3, PRIMASK
 8010b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d105      	bne.n	8010b58 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8010b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d007      	beq.n	8010b68 <osDelay+0x3c>
 8010b58:	4b0a      	ldr	r3, [pc, #40]	; (8010b84 <osDelay+0x58>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d103      	bne.n	8010b68 <osDelay+0x3c>
    stat = osErrorISR;
 8010b60:	f06f 0305 	mvn.w	r3, #5
 8010b64:	617b      	str	r3, [r7, #20]
 8010b66:	e007      	b.n	8010b78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d002      	beq.n	8010b78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f001 fa6a 	bl	801204c <vTaskDelay>
    }
  }

  return (stat);
 8010b78:	697b      	ldr	r3, [r7, #20]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3718      	adds	r7, #24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	20000470 	.word	0x20000470

08010b88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	4a07      	ldr	r2, [pc, #28]	; (8010bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	4a06      	ldr	r2, [pc, #24]	; (8010bb8 <vApplicationGetIdleTaskMemory+0x30>)
 8010b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2280      	movs	r2, #128	; 0x80
 8010ba4:	601a      	str	r2, [r3, #0]
}
 8010ba6:	bf00      	nop
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	20000474 	.word	0x20000474
 8010bb8:	200004d0 	.word	0x200004d0

08010bbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010bbc:	b480      	push	{r7}
 8010bbe:	b085      	sub	sp, #20
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4a07      	ldr	r2, [pc, #28]	; (8010be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8010bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	4a06      	ldr	r2, [pc, #24]	; (8010bec <vApplicationGetTimerTaskMemory+0x30>)
 8010bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bda:	601a      	str	r2, [r3, #0]
}
 8010bdc:	bf00      	nop
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	200006d0 	.word	0x200006d0
 8010bec:	2000072c 	.word	0x2000072c

08010bf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f103 0208 	add.w	r2, r3, #8
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f103 0208 	add.w	r2, r3, #8
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f103 0208 	add.w	r2, r3, #8
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010c24:	bf00      	nop
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c3e:	bf00      	nop
 8010c40:	370c      	adds	r7, #12
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr

08010c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b085      	sub	sp, #20
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	689a      	ldr	r2, [r3, #8]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	601a      	str	r2, [r3, #0]
}
 8010c86:	bf00      	nop
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c92:	b480      	push	{r7}
 8010c94:	b085      	sub	sp, #20
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
 8010c9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ca8:	d103      	bne.n	8010cb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	e00c      	b.n	8010ccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	60fb      	str	r3, [r7, #12]
 8010cb8:	e002      	b.n	8010cc0 <vListInsert+0x2e>
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	60fb      	str	r3, [r7, #12]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d2f6      	bcs.n	8010cba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	683a      	ldr	r2, [r7, #0]
 8010cda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	1c5a      	adds	r2, r3, #1
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	601a      	str	r2, [r3, #0]
}
 8010cf8:	bf00      	nop
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6892      	ldr	r2, [r2, #8]
 8010d1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	6852      	ldr	r2, [r2, #4]
 8010d24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d103      	bne.n	8010d38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	689a      	ldr	r2, [r3, #8]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	1e5a      	subs	r2, r3, #1
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d109      	bne.n	8010d80 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d70:	f383 8811 	msr	BASEPRI, r3
 8010d74:	f3bf 8f6f 	isb	sy
 8010d78:	f3bf 8f4f 	dsb	sy
 8010d7c:	60bb      	str	r3, [r7, #8]
 8010d7e:	e7fe      	b.n	8010d7e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010d80:	f002 fc14 	bl	80135ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d8c:	68f9      	ldr	r1, [r7, #12]
 8010d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010d90:	fb01 f303 	mul.w	r3, r1, r3
 8010d94:	441a      	add	r2, r3
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db0:	3b01      	subs	r3, #1
 8010db2:	68f9      	ldr	r1, [r7, #12]
 8010db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010db6:	fb01 f303 	mul.w	r3, r1, r3
 8010dba:	441a      	add	r2, r3
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	22ff      	movs	r2, #255	; 0xff
 8010dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	22ff      	movs	r2, #255	; 0xff
 8010dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d114      	bne.n	8010e00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d01a      	beq.n	8010e14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	3310      	adds	r3, #16
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 fbe6 	bl	80125b4 <xTaskRemoveFromEventList>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d012      	beq.n	8010e14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010dee:	4b0d      	ldr	r3, [pc, #52]	; (8010e24 <xQueueGenericReset+0xcc>)
 8010df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df4:	601a      	str	r2, [r3, #0]
 8010df6:	f3bf 8f4f 	dsb	sy
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	e009      	b.n	8010e14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	3310      	adds	r3, #16
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fef3 	bl	8010bf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	3324      	adds	r3, #36	; 0x24
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7ff feee 	bl	8010bf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010e14:	f002 fbf8 	bl	8013608 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010e18:	2301      	movs	r3, #1
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	e000ed04 	.word	0xe000ed04

08010e28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08e      	sub	sp, #56	; 0x38
 8010e2c:	af02      	add	r7, sp, #8
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
 8010e34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d109      	bne.n	8010e50 <xQueueGenericCreateStatic+0x28>
 8010e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e4e:	e7fe      	b.n	8010e4e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d109      	bne.n	8010e6a <xQueueGenericCreateStatic+0x42>
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	627b      	str	r3, [r7, #36]	; 0x24
 8010e68:	e7fe      	b.n	8010e68 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <xQueueGenericCreateStatic+0x4e>
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <xQueueGenericCreateStatic+0x52>
 8010e76:	2301      	movs	r3, #1
 8010e78:	e000      	b.n	8010e7c <xQueueGenericCreateStatic+0x54>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d109      	bne.n	8010e94 <xQueueGenericCreateStatic+0x6c>
 8010e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e84:	f383 8811 	msr	BASEPRI, r3
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	623b      	str	r3, [r7, #32]
 8010e92:	e7fe      	b.n	8010e92 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d102      	bne.n	8010ea0 <xQueueGenericCreateStatic+0x78>
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d101      	bne.n	8010ea4 <xQueueGenericCreateStatic+0x7c>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e000      	b.n	8010ea6 <xQueueGenericCreateStatic+0x7e>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d109      	bne.n	8010ebe <xQueueGenericCreateStatic+0x96>
 8010eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eae:	f383 8811 	msr	BASEPRI, r3
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	61fb      	str	r3, [r7, #28]
 8010ebc:	e7fe      	b.n	8010ebc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010ebe:	2350      	movs	r3, #80	; 0x50
 8010ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b50      	cmp	r3, #80	; 0x50
 8010ec6:	d009      	beq.n	8010edc <xQueueGenericCreateStatic+0xb4>
 8010ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	61bb      	str	r3, [r7, #24]
 8010eda:	e7fe      	b.n	8010eda <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010edc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00d      	beq.n	8010f04 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eea:	2201      	movs	r2, #1
 8010eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ef0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	4613      	mov	r3, r2
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	68b9      	ldr	r1, [r7, #8]
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f000 f844 	bl	8010f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3730      	adds	r7, #48	; 0x30
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b08a      	sub	sp, #40	; 0x28
 8010f12:	af02      	add	r7, sp, #8
 8010f14:	60f8      	str	r0, [r7, #12]
 8010f16:	60b9      	str	r1, [r7, #8]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d109      	bne.n	8010f36 <xQueueGenericCreate+0x28>
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	613b      	str	r3, [r7, #16]
 8010f34:	e7fe      	b.n	8010f34 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d102      	bne.n	8010f42 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	61fb      	str	r3, [r7, #28]
 8010f40:	e004      	b.n	8010f4c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	fb02 f303 	mul.w	r3, r2, r3
 8010f4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	3350      	adds	r3, #80	; 0x50
 8010f50:	4618      	mov	r0, r3
 8010f52:	f002 fc45 	bl	80137e0 <pvPortMalloc>
 8010f56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d011      	beq.n	8010f82 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	3350      	adds	r3, #80	; 0x50
 8010f66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f70:	79fa      	ldrb	r2, [r7, #7]
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	4613      	mov	r3, r2
 8010f78:	697a      	ldr	r2, [r7, #20]
 8010f7a:	68b9      	ldr	r1, [r7, #8]
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f000 f805 	bl	8010f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f82:	69bb      	ldr	r3, [r7, #24]
	}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3720      	adds	r7, #32
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d103      	bne.n	8010fa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	69ba      	ldr	r2, [r7, #24]
 8010fa4:	601a      	str	r2, [r3, #0]
 8010fa6:	e002      	b.n	8010fae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010fba:	2101      	movs	r1, #1
 8010fbc:	69b8      	ldr	r0, [r7, #24]
 8010fbe:	f7ff fecb 	bl	8010d58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010fc2:	69bb      	ldr	r3, [r7, #24]
 8010fc4:	78fa      	ldrb	r2, [r7, #3]
 8010fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010fca:	bf00      	nop
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00e      	beq.n	8010ffe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 f81d 	bl	8011038 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010ffe:	bf00      	nop
 8011000:	3708      	adds	r7, #8
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011006:	b580      	push	{r7, lr}
 8011008:	b086      	sub	sp, #24
 801100a:	af00      	add	r7, sp, #0
 801100c:	4603      	mov	r3, r0
 801100e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011010:	2301      	movs	r3, #1
 8011012:	617b      	str	r3, [r7, #20]
 8011014:	2300      	movs	r3, #0
 8011016:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011018:	79fb      	ldrb	r3, [r7, #7]
 801101a:	461a      	mov	r2, r3
 801101c:	6939      	ldr	r1, [r7, #16]
 801101e:	6978      	ldr	r0, [r7, #20]
 8011020:	f7ff ff75 	bl	8010f0e <xQueueGenericCreate>
 8011024:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f7ff ffd3 	bl	8010fd2 <prvInitialiseMutex>

		return xNewQueue;
 801102c:	68fb      	ldr	r3, [r7, #12]
	}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
	...

08011038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08e      	sub	sp, #56	; 0x38
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011046:	2300      	movs	r3, #0
 8011048:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	2b00      	cmp	r3, #0
 8011052:	d109      	bne.n	8011068 <xQueueGenericSend+0x30>
 8011054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011058:	f383 8811 	msr	BASEPRI, r3
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	f3bf 8f4f 	dsb	sy
 8011064:	62bb      	str	r3, [r7, #40]	; 0x28
 8011066:	e7fe      	b.n	8011066 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d103      	bne.n	8011076 <xQueueGenericSend+0x3e>
 801106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <xQueueGenericSend+0x42>
 8011076:	2301      	movs	r3, #1
 8011078:	e000      	b.n	801107c <xQueueGenericSend+0x44>
 801107a:	2300      	movs	r3, #0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d109      	bne.n	8011094 <xQueueGenericSend+0x5c>
 8011080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011084:	f383 8811 	msr	BASEPRI, r3
 8011088:	f3bf 8f6f 	isb	sy
 801108c:	f3bf 8f4f 	dsb	sy
 8011090:	627b      	str	r3, [r7, #36]	; 0x24
 8011092:	e7fe      	b.n	8011092 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	2b02      	cmp	r3, #2
 8011098:	d103      	bne.n	80110a2 <xQueueGenericSend+0x6a>
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d101      	bne.n	80110a6 <xQueueGenericSend+0x6e>
 80110a2:	2301      	movs	r3, #1
 80110a4:	e000      	b.n	80110a8 <xQueueGenericSend+0x70>
 80110a6:	2300      	movs	r3, #0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d109      	bne.n	80110c0 <xQueueGenericSend+0x88>
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	623b      	str	r3, [r7, #32]
 80110be:	e7fe      	b.n	80110be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110c0:	f001 fc2e 	bl	8012920 <xTaskGetSchedulerState>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <xQueueGenericSend+0x98>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d101      	bne.n	80110d4 <xQueueGenericSend+0x9c>
 80110d0:	2301      	movs	r3, #1
 80110d2:	e000      	b.n	80110d6 <xQueueGenericSend+0x9e>
 80110d4:	2300      	movs	r3, #0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d109      	bne.n	80110ee <xQueueGenericSend+0xb6>
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	e7fe      	b.n	80110ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110ee:	f002 fa5d 	bl	80135ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80110f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d302      	bcc.n	8011104 <xQueueGenericSend+0xcc>
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b02      	cmp	r3, #2
 8011102:	d129      	bne.n	8011158 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011104:	683a      	ldr	r2, [r7, #0]
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801110a:	f000 fba9 	bl	8011860 <prvCopyDataToQueue>
 801110e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011114:	2b00      	cmp	r3, #0
 8011116:	d010      	beq.n	801113a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111a:	3324      	adds	r3, #36	; 0x24
 801111c:	4618      	mov	r0, r3
 801111e:	f001 fa49 	bl	80125b4 <xTaskRemoveFromEventList>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d013      	beq.n	8011150 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011128:	4b3f      	ldr	r3, [pc, #252]	; (8011228 <xQueueGenericSend+0x1f0>)
 801112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	f3bf 8f4f 	dsb	sy
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	e00a      	b.n	8011150 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113c:	2b00      	cmp	r3, #0
 801113e:	d007      	beq.n	8011150 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011140:	4b39      	ldr	r3, [pc, #228]	; (8011228 <xQueueGenericSend+0x1f0>)
 8011142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011146:	601a      	str	r2, [r3, #0]
 8011148:	f3bf 8f4f 	dsb	sy
 801114c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011150:	f002 fa5a 	bl	8013608 <vPortExitCritical>
				return pdPASS;
 8011154:	2301      	movs	r3, #1
 8011156:	e063      	b.n	8011220 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d103      	bne.n	8011166 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801115e:	f002 fa53 	bl	8013608 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011162:	2300      	movs	r3, #0
 8011164:	e05c      	b.n	8011220 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011168:	2b00      	cmp	r3, #0
 801116a:	d106      	bne.n	801117a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801116c:	f107 0314 	add.w	r3, r7, #20
 8011170:	4618      	mov	r0, r3
 8011172:	f001 fa81 	bl	8012678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011176:	2301      	movs	r3, #1
 8011178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801117a:	f002 fa45 	bl	8013608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801117e:	f000 fffd 	bl	801217c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011182:	f002 fa13 	bl	80135ac <vPortEnterCritical>
 8011186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801118c:	b25b      	sxtb	r3, r3
 801118e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011192:	d103      	bne.n	801119c <xQueueGenericSend+0x164>
 8011194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011196:	2200      	movs	r2, #0
 8011198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801119c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a2:	b25b      	sxtb	r3, r3
 80111a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111a8:	d103      	bne.n	80111b2 <xQueueGenericSend+0x17a>
 80111aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b2:	f002 fa29 	bl	8013608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111b6:	1d3a      	adds	r2, r7, #4
 80111b8:	f107 0314 	add.w	r3, r7, #20
 80111bc:	4611      	mov	r1, r2
 80111be:	4618      	mov	r0, r3
 80111c0:	f001 fa70 	bl	80126a4 <xTaskCheckForTimeOut>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d124      	bne.n	8011214 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80111ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111cc:	f000 fc40 	bl	8011a50 <prvIsQueueFull>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d018      	beq.n	8011208 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	3310      	adds	r3, #16
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	4611      	mov	r1, r2
 80111de:	4618      	mov	r0, r3
 80111e0:	f001 f99a 	bl	8012518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80111e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111e6:	f000 fbcb 	bl	8011980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80111ea:	f000 ffd5 	bl	8012198 <xTaskResumeAll>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f47f af7c 	bne.w	80110ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80111f6:	4b0c      	ldr	r3, [pc, #48]	; (8011228 <xQueueGenericSend+0x1f0>)
 80111f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	f3bf 8f6f 	isb	sy
 8011206:	e772      	b.n	80110ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801120a:	f000 fbb9 	bl	8011980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801120e:	f000 ffc3 	bl	8012198 <xTaskResumeAll>
 8011212:	e76c      	b.n	80110ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011216:	f000 fbb3 	bl	8011980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801121a:	f000 ffbd 	bl	8012198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801121e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011220:	4618      	mov	r0, r3
 8011222:	3738      	adds	r7, #56	; 0x38
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	e000ed04 	.word	0xe000ed04

0801122c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b08e      	sub	sp, #56	; 0x38
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011240:	2b00      	cmp	r3, #0
 8011242:	d109      	bne.n	8011258 <xQueueGenericSendFromISR+0x2c>
 8011244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011248:	f383 8811 	msr	BASEPRI, r3
 801124c:	f3bf 8f6f 	isb	sy
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	627b      	str	r3, [r7, #36]	; 0x24
 8011256:	e7fe      	b.n	8011256 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d103      	bne.n	8011266 <xQueueGenericSendFromISR+0x3a>
 801125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011262:	2b00      	cmp	r3, #0
 8011264:	d101      	bne.n	801126a <xQueueGenericSendFromISR+0x3e>
 8011266:	2301      	movs	r3, #1
 8011268:	e000      	b.n	801126c <xQueueGenericSendFromISR+0x40>
 801126a:	2300      	movs	r3, #0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d109      	bne.n	8011284 <xQueueGenericSendFromISR+0x58>
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	623b      	str	r3, [r7, #32]
 8011282:	e7fe      	b.n	8011282 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b02      	cmp	r3, #2
 8011288:	d103      	bne.n	8011292 <xQueueGenericSendFromISR+0x66>
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801128e:	2b01      	cmp	r3, #1
 8011290:	d101      	bne.n	8011296 <xQueueGenericSendFromISR+0x6a>
 8011292:	2301      	movs	r3, #1
 8011294:	e000      	b.n	8011298 <xQueueGenericSendFromISR+0x6c>
 8011296:	2300      	movs	r3, #0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d109      	bne.n	80112b0 <xQueueGenericSendFromISR+0x84>
 801129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a0:	f383 8811 	msr	BASEPRI, r3
 80112a4:	f3bf 8f6f 	isb	sy
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	61fb      	str	r3, [r7, #28]
 80112ae:	e7fe      	b.n	80112ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112b0:	f002 fa58 	bl	8013764 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80112b4:	f3ef 8211 	mrs	r2, BASEPRI
 80112b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	61ba      	str	r2, [r7, #24]
 80112ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80112cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112d8:	429a      	cmp	r2, r3
 80112da:	d302      	bcc.n	80112e2 <xQueueGenericSendFromISR+0xb6>
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	2b02      	cmp	r3, #2
 80112e0:	d12c      	bne.n	801133c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80112ec:	683a      	ldr	r2, [r7, #0]
 80112ee:	68b9      	ldr	r1, [r7, #8]
 80112f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f2:	f000 fab5 	bl	8011860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80112f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80112fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112fe:	d112      	bne.n	8011326 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011304:	2b00      	cmp	r3, #0
 8011306:	d016      	beq.n	8011336 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130a:	3324      	adds	r3, #36	; 0x24
 801130c:	4618      	mov	r0, r3
 801130e:	f001 f951 	bl	80125b4 <xTaskRemoveFromEventList>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	d00e      	beq.n	8011336 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00b      	beq.n	8011336 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2201      	movs	r2, #1
 8011322:	601a      	str	r2, [r3, #0]
 8011324:	e007      	b.n	8011336 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801132a:	3301      	adds	r3, #1
 801132c:	b2db      	uxtb	r3, r3
 801132e:	b25a      	sxtb	r2, r3
 8011330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011336:	2301      	movs	r3, #1
 8011338:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801133a:	e001      	b.n	8011340 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801133c:	2300      	movs	r3, #0
 801133e:	637b      	str	r3, [r7, #52]	; 0x34
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801134c:	4618      	mov	r0, r3
 801134e:	3738      	adds	r7, #56	; 0x38
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08e      	sub	sp, #56	; 0x38
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011364:	2b00      	cmp	r3, #0
 8011366:	d109      	bne.n	801137c <xQueueGiveFromISR+0x28>
	__asm volatile
 8011368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	623b      	str	r3, [r7, #32]
 801137a:	e7fe      	b.n	801137a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011380:	2b00      	cmp	r3, #0
 8011382:	d009      	beq.n	8011398 <xQueueGiveFromISR+0x44>
 8011384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	61fb      	str	r3, [r7, #28]
 8011396:	e7fe      	b.n	8011396 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d103      	bne.n	80113a8 <xQueueGiveFromISR+0x54>
 80113a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <xQueueGiveFromISR+0x58>
 80113a8:	2301      	movs	r3, #1
 80113aa:	e000      	b.n	80113ae <xQueueGiveFromISR+0x5a>
 80113ac:	2300      	movs	r3, #0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d109      	bne.n	80113c6 <xQueueGiveFromISR+0x72>
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	61bb      	str	r3, [r7, #24]
 80113c4:	e7fe      	b.n	80113c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113c6:	f002 f9cd 	bl	8013764 <vPortValidateInterruptPriority>
	__asm volatile
 80113ca:	f3ef 8211 	mrs	r2, BASEPRI
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	617a      	str	r2, [r7, #20]
 80113e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80113e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80113ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d22b      	bcs.n	801144e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	1c5a      	adds	r2, r3, #1
 8011404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011406:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011410:	d112      	bne.n	8011438 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011416:	2b00      	cmp	r3, #0
 8011418:	d016      	beq.n	8011448 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	3324      	adds	r3, #36	; 0x24
 801141e:	4618      	mov	r0, r3
 8011420:	f001 f8c8 	bl	80125b4 <xTaskRemoveFromEventList>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00e      	beq.n	8011448 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00b      	beq.n	8011448 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	2201      	movs	r2, #1
 8011434:	601a      	str	r2, [r3, #0]
 8011436:	e007      	b.n	8011448 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801143c:	3301      	adds	r3, #1
 801143e:	b2db      	uxtb	r3, r3
 8011440:	b25a      	sxtb	r2, r3
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011448:	2301      	movs	r3, #1
 801144a:	637b      	str	r3, [r7, #52]	; 0x34
 801144c:	e001      	b.n	8011452 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801144e:	2300      	movs	r3, #0
 8011450:	637b      	str	r3, [r7, #52]	; 0x34
 8011452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011454:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801145e:	4618      	mov	r0, r3
 8011460:	3738      	adds	r7, #56	; 0x38
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08c      	sub	sp, #48	; 0x30
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011474:	2300      	movs	r3, #0
 8011476:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147e:	2b00      	cmp	r3, #0
 8011480:	d109      	bne.n	8011496 <xQueueReceive+0x2e>
	__asm volatile
 8011482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011486:	f383 8811 	msr	BASEPRI, r3
 801148a:	f3bf 8f6f 	isb	sy
 801148e:	f3bf 8f4f 	dsb	sy
 8011492:	623b      	str	r3, [r7, #32]
 8011494:	e7fe      	b.n	8011494 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d103      	bne.n	80114a4 <xQueueReceive+0x3c>
 801149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <xQueueReceive+0x40>
 80114a4:	2301      	movs	r3, #1
 80114a6:	e000      	b.n	80114aa <xQueueReceive+0x42>
 80114a8:	2300      	movs	r3, #0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d109      	bne.n	80114c2 <xQueueReceive+0x5a>
 80114ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	61fb      	str	r3, [r7, #28]
 80114c0:	e7fe      	b.n	80114c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114c2:	f001 fa2d 	bl	8012920 <xTaskGetSchedulerState>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d102      	bne.n	80114d2 <xQueueReceive+0x6a>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d101      	bne.n	80114d6 <xQueueReceive+0x6e>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e000      	b.n	80114d8 <xQueueReceive+0x70>
 80114d6:	2300      	movs	r3, #0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d109      	bne.n	80114f0 <xQueueReceive+0x88>
 80114dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	61bb      	str	r3, [r7, #24]
 80114ee:	e7fe      	b.n	80114ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114f0:	f002 f85c 	bl	80135ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d01f      	beq.n	8011540 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011500:	68b9      	ldr	r1, [r7, #8]
 8011502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011504:	f000 fa16 	bl	8011934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	1e5a      	subs	r2, r3, #1
 801150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011512:	691b      	ldr	r3, [r3, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d00f      	beq.n	8011538 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151a:	3310      	adds	r3, #16
 801151c:	4618      	mov	r0, r3
 801151e:	f001 f849 	bl	80125b4 <xTaskRemoveFromEventList>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d007      	beq.n	8011538 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011528:	4b3c      	ldr	r3, [pc, #240]	; (801161c <xQueueReceive+0x1b4>)
 801152a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801152e:	601a      	str	r2, [r3, #0]
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011538:	f002 f866 	bl	8013608 <vPortExitCritical>
				return pdPASS;
 801153c:	2301      	movs	r3, #1
 801153e:	e069      	b.n	8011614 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d103      	bne.n	801154e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011546:	f002 f85f 	bl	8013608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801154a:	2300      	movs	r3, #0
 801154c:	e062      	b.n	8011614 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	2b00      	cmp	r3, #0
 8011552:	d106      	bne.n	8011562 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011554:	f107 0310 	add.w	r3, r7, #16
 8011558:	4618      	mov	r0, r3
 801155a:	f001 f88d 	bl	8012678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801155e:	2301      	movs	r3, #1
 8011560:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011562:	f002 f851 	bl	8013608 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011566:	f000 fe09 	bl	801217c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801156a:	f002 f81f 	bl	80135ac <vPortEnterCritical>
 801156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011574:	b25b      	sxtb	r3, r3
 8011576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801157a:	d103      	bne.n	8011584 <xQueueReceive+0x11c>
 801157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157e:	2200      	movs	r2, #0
 8011580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801158a:	b25b      	sxtb	r3, r3
 801158c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011590:	d103      	bne.n	801159a <xQueueReceive+0x132>
 8011592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011594:	2200      	movs	r2, #0
 8011596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801159a:	f002 f835 	bl	8013608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801159e:	1d3a      	adds	r2, r7, #4
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	4611      	mov	r1, r2
 80115a6:	4618      	mov	r0, r3
 80115a8:	f001 f87c 	bl	80126a4 <xTaskCheckForTimeOut>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d123      	bne.n	80115fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115b4:	f000 fa36 	bl	8011a24 <prvIsQueueEmpty>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d017      	beq.n	80115ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80115be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c0:	3324      	adds	r3, #36	; 0x24
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f000 ffa6 	bl	8012518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ce:	f000 f9d7 	bl	8011980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80115d2:	f000 fde1 	bl	8012198 <xTaskResumeAll>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d189      	bne.n	80114f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80115dc:	4b0f      	ldr	r3, [pc, #60]	; (801161c <xQueueReceive+0x1b4>)
 80115de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	f3bf 8f4f 	dsb	sy
 80115e8:	f3bf 8f6f 	isb	sy
 80115ec:	e780      	b.n	80114f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80115ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115f0:	f000 f9c6 	bl	8011980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115f4:	f000 fdd0 	bl	8012198 <xTaskResumeAll>
 80115f8:	e77a      	b.n	80114f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80115fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115fc:	f000 f9c0 	bl	8011980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011600:	f000 fdca 	bl	8012198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011606:	f000 fa0d 	bl	8011a24 <prvIsQueueEmpty>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	f43f af6f 	beq.w	80114f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011614:	4618      	mov	r0, r3
 8011616:	3730      	adds	r7, #48	; 0x30
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	e000ed04 	.word	0xe000ed04

08011620 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b08e      	sub	sp, #56	; 0x38
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801162a:	2300      	movs	r3, #0
 801162c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011632:	2300      	movs	r3, #0
 8011634:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011638:	2b00      	cmp	r3, #0
 801163a:	d109      	bne.n	8011650 <xQueueSemaphoreTake+0x30>
 801163c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011640:	f383 8811 	msr	BASEPRI, r3
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	f3bf 8f4f 	dsb	sy
 801164c:	623b      	str	r3, [r7, #32]
 801164e:	e7fe      	b.n	801164e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011654:	2b00      	cmp	r3, #0
 8011656:	d009      	beq.n	801166c <xQueueSemaphoreTake+0x4c>
 8011658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	61fb      	str	r3, [r7, #28]
 801166a:	e7fe      	b.n	801166a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801166c:	f001 f958 	bl	8012920 <xTaskGetSchedulerState>
 8011670:	4603      	mov	r3, r0
 8011672:	2b00      	cmp	r3, #0
 8011674:	d102      	bne.n	801167c <xQueueSemaphoreTake+0x5c>
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d101      	bne.n	8011680 <xQueueSemaphoreTake+0x60>
 801167c:	2301      	movs	r3, #1
 801167e:	e000      	b.n	8011682 <xQueueSemaphoreTake+0x62>
 8011680:	2300      	movs	r3, #0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d109      	bne.n	801169a <xQueueSemaphoreTake+0x7a>
 8011686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	61bb      	str	r3, [r7, #24]
 8011698:	e7fe      	b.n	8011698 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801169a:	f001 ff87 	bl	80135ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d024      	beq.n	80116f4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80116aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ac:	1e5a      	subs	r2, r3, #1
 80116ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d104      	bne.n	80116c4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80116ba:	f001 faa3 	bl	8012c04 <pvTaskIncrementMutexHeldCount>
 80116be:	4602      	mov	r2, r0
 80116c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c6:	691b      	ldr	r3, [r3, #16]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00f      	beq.n	80116ec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ce:	3310      	adds	r3, #16
 80116d0:	4618      	mov	r0, r3
 80116d2:	f000 ff6f 	bl	80125b4 <xTaskRemoveFromEventList>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d007      	beq.n	80116ec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80116dc:	4b53      	ldr	r3, [pc, #332]	; (801182c <xQueueSemaphoreTake+0x20c>)
 80116de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	f3bf 8f4f 	dsb	sy
 80116e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80116ec:	f001 ff8c 	bl	8013608 <vPortExitCritical>
				return pdPASS;
 80116f0:	2301      	movs	r3, #1
 80116f2:	e096      	b.n	8011822 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d110      	bne.n	801171c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d009      	beq.n	8011714 <xQueueSemaphoreTake+0xf4>
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	e7fe      	b.n	8011712 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011714:	f001 ff78 	bl	8013608 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011718:	2300      	movs	r3, #0
 801171a:	e082      	b.n	8011822 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011722:	f107 030c 	add.w	r3, r7, #12
 8011726:	4618      	mov	r0, r3
 8011728:	f000 ffa6 	bl	8012678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801172c:	2301      	movs	r3, #1
 801172e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011730:	f001 ff6a 	bl	8013608 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011734:	f000 fd22 	bl	801217c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011738:	f001 ff38 	bl	80135ac <vPortEnterCritical>
 801173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011742:	b25b      	sxtb	r3, r3
 8011744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011748:	d103      	bne.n	8011752 <xQueueSemaphoreTake+0x132>
 801174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174c:	2200      	movs	r2, #0
 801174e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011758:	b25b      	sxtb	r3, r3
 801175a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801175e:	d103      	bne.n	8011768 <xQueueSemaphoreTake+0x148>
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011768:	f001 ff4e 	bl	8013608 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801176c:	463a      	mov	r2, r7
 801176e:	f107 030c 	add.w	r3, r7, #12
 8011772:	4611      	mov	r1, r2
 8011774:	4618      	mov	r0, r3
 8011776:	f000 ff95 	bl	80126a4 <xTaskCheckForTimeOut>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d132      	bne.n	80117e6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011782:	f000 f94f 	bl	8011a24 <prvIsQueueEmpty>
 8011786:	4603      	mov	r3, r0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d026      	beq.n	80117da <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d109      	bne.n	80117a8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011794:	f001 ff0a 	bl	80135ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	4618      	mov	r0, r3
 801179e:	f001 f8dd 	bl	801295c <xTaskPriorityInherit>
 80117a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80117a4:	f001 ff30 	bl	8013608 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80117a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117aa:	3324      	adds	r3, #36	; 0x24
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	4611      	mov	r1, r2
 80117b0:	4618      	mov	r0, r3
 80117b2:	f000 feb1 	bl	8012518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80117b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117b8:	f000 f8e2 	bl	8011980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80117bc:	f000 fcec 	bl	8012198 <xTaskResumeAll>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f47f af69 	bne.w	801169a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80117c8:	4b18      	ldr	r3, [pc, #96]	; (801182c <xQueueSemaphoreTake+0x20c>)
 80117ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	f3bf 8f6f 	isb	sy
 80117d8:	e75f      	b.n	801169a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80117da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117dc:	f000 f8d0 	bl	8011980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80117e0:	f000 fcda 	bl	8012198 <xTaskResumeAll>
 80117e4:	e759      	b.n	801169a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80117e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117e8:	f000 f8ca 	bl	8011980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80117ec:	f000 fcd4 	bl	8012198 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117f2:	f000 f917 	bl	8011a24 <prvIsQueueEmpty>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f43f af4e 	beq.w	801169a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80117fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00d      	beq.n	8011820 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011804:	f001 fed2 	bl	80135ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801180a:	f000 f811 	bl	8011830 <prvGetDisinheritPriorityAfterTimeout>
 801180e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011816:	4618      	mov	r0, r3
 8011818:	f001 f974 	bl	8012b04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801181c:	f001 fef4 	bl	8013608 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011822:	4618      	mov	r0, r3
 8011824:	3738      	adds	r7, #56	; 0x38
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	e000ed04 	.word	0xe000ed04

08011830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183c:	2b00      	cmp	r3, #0
 801183e:	d006      	beq.n	801184e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	e001      	b.n	8011852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801184e:	2300      	movs	r3, #0
 8011850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011852:	68fb      	ldr	r3, [r7, #12]
	}
 8011854:	4618      	mov	r0, r3
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr

08011860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801186c:	2300      	movs	r3, #0
 801186e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801187a:	2b00      	cmp	r3, #0
 801187c:	d10d      	bne.n	801189a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d14d      	bne.n	8011922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	4618      	mov	r0, r3
 801188c:	f001 f8ce 	bl	8012a2c <xTaskPriorityDisinherit>
 8011890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2200      	movs	r2, #0
 8011896:	609a      	str	r2, [r3, #8]
 8011898:	e043      	b.n	8011922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d119      	bne.n	80118d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	6858      	ldr	r0, [r3, #4]
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118a8:	461a      	mov	r2, r3
 80118aa:	68b9      	ldr	r1, [r7, #8]
 80118ac:	f002 ffc6 	bl	801483c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	685a      	ldr	r2, [r3, #4]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b8:	441a      	add	r2, r3
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d32b      	bcc.n	8011922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	605a      	str	r2, [r3, #4]
 80118d2:	e026      	b.n	8011922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	68d8      	ldr	r0, [r3, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118dc:	461a      	mov	r2, r3
 80118de:	68b9      	ldr	r1, [r7, #8]
 80118e0:	f002 ffac 	bl	801483c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	68da      	ldr	r2, [r3, #12]
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ec:	425b      	negs	r3, r3
 80118ee:	441a      	add	r2, r3
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	68da      	ldr	r2, [r3, #12]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d207      	bcs.n	8011910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	689a      	ldr	r2, [r3, #8]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011908:	425b      	negs	r3, r3
 801190a:	441a      	add	r2, r3
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b02      	cmp	r3, #2
 8011914:	d105      	bne.n	8011922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	3b01      	subs	r3, #1
 8011920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	1c5a      	adds	r2, r3, #1
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801192a:	697b      	ldr	r3, [r7, #20]
}
 801192c:	4618      	mov	r0, r3
 801192e:	3718      	adds	r7, #24
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011942:	2b00      	cmp	r3, #0
 8011944:	d018      	beq.n	8011978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	68da      	ldr	r2, [r3, #12]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194e:	441a      	add	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	68da      	ldr	r2, [r3, #12]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	429a      	cmp	r2, r3
 801195e:	d303      	bcc.n	8011968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	68d9      	ldr	r1, [r3, #12]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011970:	461a      	mov	r2, r3
 8011972:	6838      	ldr	r0, [r7, #0]
 8011974:	f002 ff62 	bl	801483c <memcpy>
	}
}
 8011978:	bf00      	nop
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011988:	f001 fe10 	bl	80135ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011994:	e011      	b.n	80119ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801199a:	2b00      	cmp	r3, #0
 801199c:	d012      	beq.n	80119c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	3324      	adds	r3, #36	; 0x24
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 fe06 	bl	80125b4 <xTaskRemoveFromEventList>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d001      	beq.n	80119b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80119ae:	f000 fed9 	bl	8012764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80119b2:	7bfb      	ldrb	r3, [r7, #15]
 80119b4:	3b01      	subs	r3, #1
 80119b6:	b2db      	uxtb	r3, r3
 80119b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80119ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	dce9      	bgt.n	8011996 <prvUnlockQueue+0x16>
 80119c2:	e000      	b.n	80119c6 <prvUnlockQueue+0x46>
					break;
 80119c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	22ff      	movs	r2, #255	; 0xff
 80119ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80119ce:	f001 fe1b 	bl	8013608 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80119d2:	f001 fdeb 	bl	80135ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80119de:	e011      	b.n	8011a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	691b      	ldr	r3, [r3, #16]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d012      	beq.n	8011a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3310      	adds	r3, #16
 80119ec:	4618      	mov	r0, r3
 80119ee:	f000 fde1 	bl	80125b4 <xTaskRemoveFromEventList>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d001      	beq.n	80119fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80119f8:	f000 feb4 	bl	8012764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80119fc:	7bbb      	ldrb	r3, [r7, #14]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dce9      	bgt.n	80119e0 <prvUnlockQueue+0x60>
 8011a0c:	e000      	b.n	8011a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	22ff      	movs	r2, #255	; 0xff
 8011a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011a18:	f001 fdf6 	bl	8013608 <vPortExitCritical>
}
 8011a1c:	bf00      	nop
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a2c:	f001 fdbe 	bl	80135ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d102      	bne.n	8011a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011a38:	2301      	movs	r3, #1
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	e001      	b.n	8011a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a42:	f001 fde1 	bl	8013608 <vPortExitCritical>

	return xReturn;
 8011a46:	68fb      	ldr	r3, [r7, #12]
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3710      	adds	r7, #16
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a58:	f001 fda8 	bl	80135ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d102      	bne.n	8011a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	60fb      	str	r3, [r7, #12]
 8011a6c:	e001      	b.n	8011a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a72:	f001 fdc9 	bl	8013608 <vPortExitCritical>

	return xReturn;
 8011a76:	68fb      	ldr	r3, [r7, #12]
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	e014      	b.n	8011aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011a90:	4a0e      	ldr	r2, [pc, #56]	; (8011acc <vQueueAddToRegistry+0x4c>)
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d10b      	bne.n	8011ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011a9c:	490b      	ldr	r1, [pc, #44]	; (8011acc <vQueueAddToRegistry+0x4c>)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	683a      	ldr	r2, [r7, #0]
 8011aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011aa6:	4a09      	ldr	r2, [pc, #36]	; (8011acc <vQueueAddToRegistry+0x4c>)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	4413      	add	r3, r2
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011ab2:	e005      	b.n	8011ac0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	60fb      	str	r3, [r7, #12]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2b07      	cmp	r3, #7
 8011abe:	d9e7      	bls.n	8011a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011ac0:	bf00      	nop
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	2000ebb4 	.word	0x2000ebb4

08011ad0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b086      	sub	sp, #24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011ae0:	f001 fd64 	bl	80135ac <vPortEnterCritical>
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aea:	b25b      	sxtb	r3, r3
 8011aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011af0:	d103      	bne.n	8011afa <vQueueWaitForMessageRestricted+0x2a>
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2200      	movs	r2, #0
 8011af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b00:	b25b      	sxtb	r3, r3
 8011b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b06:	d103      	bne.n	8011b10 <vQueueWaitForMessageRestricted+0x40>
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b10:	f001 fd7a 	bl	8013608 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d106      	bne.n	8011b2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	3324      	adds	r3, #36	; 0x24
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	68b9      	ldr	r1, [r7, #8]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f000 fd1b 	bl	8012560 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011b2a:	6978      	ldr	r0, [r7, #20]
 8011b2c:	f7ff ff28 	bl	8011980 <prvUnlockQueue>
	}
 8011b30:	bf00      	nop
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08e      	sub	sp, #56	; 0x38
 8011b3c:	af04      	add	r7, sp, #16
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d109      	bne.n	8011b60 <xTaskCreateStatic+0x28>
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	623b      	str	r3, [r7, #32]
 8011b5e:	e7fe      	b.n	8011b5e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d109      	bne.n	8011b7a <xTaskCreateStatic+0x42>
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	61fb      	str	r3, [r7, #28]
 8011b78:	e7fe      	b.n	8011b78 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b7a:	235c      	movs	r3, #92	; 0x5c
 8011b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	2b5c      	cmp	r3, #92	; 0x5c
 8011b82:	d009      	beq.n	8011b98 <xTaskCreateStatic+0x60>
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	61bb      	str	r3, [r7, #24]
 8011b96:	e7fe      	b.n	8011b96 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011b98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d01e      	beq.n	8011bde <xTaskCreateStatic+0xa6>
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d01b      	beq.n	8011bde <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011bb8:	2300      	movs	r3, #0
 8011bba:	9303      	str	r3, [sp, #12]
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	9302      	str	r3, [sp, #8]
 8011bc0:	f107 0314 	add.w	r3, r7, #20
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	68b9      	ldr	r1, [r7, #8]
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f000 f850 	bl	8011c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bd8:	f000 f8dc 	bl	8011d94 <prvAddNewTaskToReadyList>
 8011bdc:	e001      	b.n	8011be2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011be2:	697b      	ldr	r3, [r7, #20]
	}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3728      	adds	r7, #40	; 0x28
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08c      	sub	sp, #48	; 0x30
 8011bf0:	af04      	add	r7, sp, #16
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011bfc:	88fb      	ldrh	r3, [r7, #6]
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	4618      	mov	r0, r3
 8011c02:	f001 fded 	bl	80137e0 <pvPortMalloc>
 8011c06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d00e      	beq.n	8011c2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011c0e:	205c      	movs	r0, #92	; 0x5c
 8011c10:	f001 fde6 	bl	80137e0 <pvPortMalloc>
 8011c14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d003      	beq.n	8011c24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011c1c:	69fb      	ldr	r3, [r7, #28]
 8011c1e:	697a      	ldr	r2, [r7, #20]
 8011c20:	631a      	str	r2, [r3, #48]	; 0x30
 8011c22:	e005      	b.n	8011c30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011c24:	6978      	ldr	r0, [r7, #20]
 8011c26:	f001 fe9d 	bl	8013964 <vPortFree>
 8011c2a:	e001      	b.n	8011c30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d017      	beq.n	8011c66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011c3e:	88fa      	ldrh	r2, [r7, #6]
 8011c40:	2300      	movs	r3, #0
 8011c42:	9303      	str	r3, [sp, #12]
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	9302      	str	r3, [sp, #8]
 8011c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4a:	9301      	str	r3, [sp, #4]
 8011c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	68b9      	ldr	r1, [r7, #8]
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 f80e 	bl	8011c76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c5a:	69f8      	ldr	r0, [r7, #28]
 8011c5c:	f000 f89a 	bl	8011d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011c60:	2301      	movs	r3, #1
 8011c62:	61bb      	str	r3, [r7, #24]
 8011c64:	e002      	b.n	8011c6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011c6c:	69bb      	ldr	r3, [r7, #24]
	}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3720      	adds	r7, #32
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b088      	sub	sp, #32
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	60f8      	str	r0, [r7, #12]
 8011c7e:	60b9      	str	r1, [r7, #8]
 8011c80:	607a      	str	r2, [r7, #4]
 8011c82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	21a5      	movs	r1, #165	; 0xa5
 8011c90:	f002 fddf 	bl	8014852 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011c9e:	3b01      	subs	r3, #1
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4413      	add	r3, r2
 8011ca4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	f023 0307 	bic.w	r3, r3, #7
 8011cac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	f003 0307 	and.w	r3, r3, #7
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d009      	beq.n	8011ccc <prvInitialiseNewTask+0x56>
 8011cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cbc:	f383 8811 	msr	BASEPRI, r3
 8011cc0:	f3bf 8f6f 	isb	sy
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	617b      	str	r3, [r7, #20]
 8011cca:	e7fe      	b.n	8011cca <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d01f      	beq.n	8011d12 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	61fb      	str	r3, [r7, #28]
 8011cd6:	e012      	b.n	8011cfe <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	4413      	add	r3, r2
 8011cde:	7819      	ldrb	r1, [r3, #0]
 8011ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	3334      	adds	r3, #52	; 0x34
 8011ce8:	460a      	mov	r2, r1
 8011cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d006      	beq.n	8011d06 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	61fb      	str	r3, [r7, #28]
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	2b0f      	cmp	r3, #15
 8011d02:	d9e9      	bls.n	8011cd8 <prvInitialiseNewTask+0x62>
 8011d04:	e000      	b.n	8011d08 <prvInitialiseNewTask+0x92>
			{
				break;
 8011d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011d10:	e003      	b.n	8011d1a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	2200      	movs	r2, #0
 8011d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1c:	2b37      	cmp	r3, #55	; 0x37
 8011d1e:	d901      	bls.n	8011d24 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d20:	2337      	movs	r3, #55	; 0x37
 8011d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d32:	2200      	movs	r2, #0
 8011d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	3304      	adds	r3, #4
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fe ff78 	bl	8010c30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d42:	3318      	adds	r3, #24
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7fe ff73 	bl	8010c30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d62:	2200      	movs	r2, #0
 8011d64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011d6e:	683a      	ldr	r2, [r7, #0]
 8011d70:	68f9      	ldr	r1, [r7, #12]
 8011d72:	69b8      	ldr	r0, [r7, #24]
 8011d74:	f001 faf4 	bl	8013360 <pxPortInitialiseStack>
 8011d78:	4602      	mov	r2, r0
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d002      	beq.n	8011d8a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d8a:	bf00      	nop
 8011d8c:	3720      	adds	r7, #32
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
	...

08011d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011d9c:	f001 fc06 	bl	80135ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011da0:	4b2d      	ldr	r3, [pc, #180]	; (8011e58 <prvAddNewTaskToReadyList+0xc4>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	3301      	adds	r3, #1
 8011da6:	4a2c      	ldr	r2, [pc, #176]	; (8011e58 <prvAddNewTaskToReadyList+0xc4>)
 8011da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011daa:	4b2c      	ldr	r3, [pc, #176]	; (8011e5c <prvAddNewTaskToReadyList+0xc8>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011db2:	4a2a      	ldr	r2, [pc, #168]	; (8011e5c <prvAddNewTaskToReadyList+0xc8>)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011db8:	4b27      	ldr	r3, [pc, #156]	; (8011e58 <prvAddNewTaskToReadyList+0xc4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d110      	bne.n	8011de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011dc0:	f000 fcf4 	bl	80127ac <prvInitialiseTaskLists>
 8011dc4:	e00d      	b.n	8011de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011dc6:	4b26      	ldr	r3, [pc, #152]	; (8011e60 <prvAddNewTaskToReadyList+0xcc>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d109      	bne.n	8011de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011dce:	4b23      	ldr	r3, [pc, #140]	; (8011e5c <prvAddNewTaskToReadyList+0xc8>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d802      	bhi.n	8011de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011ddc:	4a1f      	ldr	r2, [pc, #124]	; (8011e5c <prvAddNewTaskToReadyList+0xc8>)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011de2:	4b20      	ldr	r3, [pc, #128]	; (8011e64 <prvAddNewTaskToReadyList+0xd0>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	3301      	adds	r3, #1
 8011de8:	4a1e      	ldr	r2, [pc, #120]	; (8011e64 <prvAddNewTaskToReadyList+0xd0>)
 8011dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011dec:	4b1d      	ldr	r3, [pc, #116]	; (8011e64 <prvAddNewTaskToReadyList+0xd0>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011df8:	4b1b      	ldr	r3, [pc, #108]	; (8011e68 <prvAddNewTaskToReadyList+0xd4>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d903      	bls.n	8011e08 <prvAddNewTaskToReadyList+0x74>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e04:	4a18      	ldr	r2, [pc, #96]	; (8011e68 <prvAddNewTaskToReadyList+0xd4>)
 8011e06:	6013      	str	r3, [r2, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	4413      	add	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4a15      	ldr	r2, [pc, #84]	; (8011e6c <prvAddNewTaskToReadyList+0xd8>)
 8011e16:	441a      	add	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7fe ff13 	bl	8010c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011e24:	f001 fbf0 	bl	8013608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011e28:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <prvAddNewTaskToReadyList+0xcc>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00e      	beq.n	8011e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011e30:	4b0a      	ldr	r3, [pc, #40]	; (8011e5c <prvAddNewTaskToReadyList+0xc8>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d207      	bcs.n	8011e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011e3e:	4b0c      	ldr	r3, [pc, #48]	; (8011e70 <prvAddNewTaskToReadyList+0xdc>)
 8011e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e44:	601a      	str	r2, [r3, #0]
 8011e46:	f3bf 8f4f 	dsb	sy
 8011e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e4e:	bf00      	nop
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	20001000 	.word	0x20001000
 8011e5c:	20000b2c 	.word	0x20000b2c
 8011e60:	2000100c 	.word	0x2000100c
 8011e64:	2000101c 	.word	0x2000101c
 8011e68:	20001008 	.word	0x20001008
 8011e6c:	20000b30 	.word	0x20000b30
 8011e70:	e000ed04 	.word	0xe000ed04

08011e74 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011e7c:	f001 fb96 	bl	80135ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d102      	bne.n	8011e8c <vTaskDelete+0x18>
 8011e86:	4b2c      	ldr	r3, [pc, #176]	; (8011f38 <vTaskDelete+0xc4>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	e000      	b.n	8011e8e <vTaskDelete+0x1a>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	3304      	adds	r3, #4
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fe ff35 	bl	8010d04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d004      	beq.n	8011eac <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	3318      	adds	r3, #24
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fe ff2c 	bl	8010d04 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011eac:	4b23      	ldr	r3, [pc, #140]	; (8011f3c <vTaskDelete+0xc8>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	4a22      	ldr	r2, [pc, #136]	; (8011f3c <vTaskDelete+0xc8>)
 8011eb4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011eb6:	4b20      	ldr	r3, [pc, #128]	; (8011f38 <vTaskDelete+0xc4>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68fa      	ldr	r2, [r7, #12]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d10b      	bne.n	8011ed8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	481e      	ldr	r0, [pc, #120]	; (8011f40 <vTaskDelete+0xcc>)
 8011ec8:	f7fe febf 	bl	8010c4a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011ecc:	4b1d      	ldr	r3, [pc, #116]	; (8011f44 <vTaskDelete+0xd0>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	4a1c      	ldr	r2, [pc, #112]	; (8011f44 <vTaskDelete+0xd0>)
 8011ed4:	6013      	str	r3, [r2, #0]
 8011ed6:	e009      	b.n	8011eec <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011ed8:	4b1b      	ldr	r3, [pc, #108]	; (8011f48 <vTaskDelete+0xd4>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	4a1a      	ldr	r2, [pc, #104]	; (8011f48 <vTaskDelete+0xd4>)
 8011ee0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f000 fcce 	bl	8012884 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011ee8:	f000 fcfa 	bl	80128e0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011eec:	f001 fb8c 	bl	8013608 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011ef0:	4b16      	ldr	r3, [pc, #88]	; (8011f4c <vTaskDelete+0xd8>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d01a      	beq.n	8011f2e <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8011ef8:	4b0f      	ldr	r3, [pc, #60]	; (8011f38 <vTaskDelete+0xc4>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d115      	bne.n	8011f2e <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011f02:	4b13      	ldr	r3, [pc, #76]	; (8011f50 <vTaskDelete+0xdc>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d009      	beq.n	8011f1e <vTaskDelete+0xaa>
 8011f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0e:	f383 8811 	msr	BASEPRI, r3
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	60bb      	str	r3, [r7, #8]
 8011f1c:	e7fe      	b.n	8011f1c <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8011f1e:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <vTaskDelete+0xe0>)
 8011f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	f3bf 8f4f 	dsb	sy
 8011f2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011f2e:	bf00      	nop
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20000b2c 	.word	0x20000b2c
 8011f3c:	2000101c 	.word	0x2000101c
 8011f40:	20000fd4 	.word	0x20000fd4
 8011f44:	20000fe8 	.word	0x20000fe8
 8011f48:	20001000 	.word	0x20001000
 8011f4c:	2000100c 	.word	0x2000100c
 8011f50:	20001028 	.word	0x20001028
 8011f54:	e000ed04 	.word	0xe000ed04

08011f58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011f62:	2300      	movs	r3, #0
 8011f64:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d109      	bne.n	8011f80 <vTaskDelayUntil+0x28>
 8011f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f70:	f383 8811 	msr	BASEPRI, r3
 8011f74:	f3bf 8f6f 	isb	sy
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	617b      	str	r3, [r7, #20]
 8011f7e:	e7fe      	b.n	8011f7e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d109      	bne.n	8011f9a <vTaskDelayUntil+0x42>
 8011f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8a:	f383 8811 	msr	BASEPRI, r3
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	613b      	str	r3, [r7, #16]
 8011f98:	e7fe      	b.n	8011f98 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8011f9a:	4b29      	ldr	r3, [pc, #164]	; (8012040 <vTaskDelayUntil+0xe8>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d009      	beq.n	8011fb6 <vTaskDelayUntil+0x5e>
 8011fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa6:	f383 8811 	msr	BASEPRI, r3
 8011faa:	f3bf 8f6f 	isb	sy
 8011fae:	f3bf 8f4f 	dsb	sy
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	e7fe      	b.n	8011fb4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8011fb6:	f000 f8e1 	bl	801217c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011fba:	4b22      	ldr	r3, [pc, #136]	; (8012044 <vTaskDelayUntil+0xec>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	683a      	ldr	r2, [r7, #0]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	6a3a      	ldr	r2, [r7, #32]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d20b      	bcs.n	8011fec <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	69fa      	ldr	r2, [r7, #28]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d211      	bcs.n	8012002 <vTaskDelayUntil+0xaa>
 8011fde:	69fa      	ldr	r2, [r7, #28]
 8011fe0:	6a3b      	ldr	r3, [r7, #32]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d90d      	bls.n	8012002 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fea:	e00a      	b.n	8012002 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	69fa      	ldr	r2, [r7, #28]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d303      	bcc.n	8011ffe <vTaskDelayUntil+0xa6>
 8011ff6:	69fa      	ldr	r2, [r7, #28]
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d901      	bls.n	8012002 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8011ffe:	2301      	movs	r3, #1
 8012000:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	69fa      	ldr	r2, [r7, #28]
 8012006:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	2b00      	cmp	r3, #0
 801200c:	d006      	beq.n	801201c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801200e:	69fa      	ldr	r2, [r7, #28]
 8012010:	6a3b      	ldr	r3, [r7, #32]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	2100      	movs	r1, #0
 8012016:	4618      	mov	r0, r3
 8012018:	f000 fe08 	bl	8012c2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801201c:	f000 f8bc 	bl	8012198 <xTaskResumeAll>
 8012020:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d107      	bne.n	8012038 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8012028:	4b07      	ldr	r3, [pc, #28]	; (8012048 <vTaskDelayUntil+0xf0>)
 801202a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	f3bf 8f4f 	dsb	sy
 8012034:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012038:	bf00      	nop
 801203a:	3728      	adds	r7, #40	; 0x28
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20001028 	.word	0x20001028
 8012044:	20001004 	.word	0x20001004
 8012048:	e000ed04 	.word	0xe000ed04

0801204c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012054:	2300      	movs	r3, #0
 8012056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d016      	beq.n	801208c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801205e:	4b13      	ldr	r3, [pc, #76]	; (80120ac <vTaskDelay+0x60>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d009      	beq.n	801207a <vTaskDelay+0x2e>
 8012066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206a:	f383 8811 	msr	BASEPRI, r3
 801206e:	f3bf 8f6f 	isb	sy
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	60bb      	str	r3, [r7, #8]
 8012078:	e7fe      	b.n	8012078 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801207a:	f000 f87f 	bl	801217c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801207e:	2100      	movs	r1, #0
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fdd3 	bl	8012c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012086:	f000 f887 	bl	8012198 <xTaskResumeAll>
 801208a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d107      	bne.n	80120a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012092:	4b07      	ldr	r3, [pc, #28]	; (80120b0 <vTaskDelay+0x64>)
 8012094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012098:	601a      	str	r2, [r3, #0]
 801209a:	f3bf 8f4f 	dsb	sy
 801209e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120a2:	bf00      	nop
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	20001028 	.word	0x20001028
 80120b0:	e000ed04 	.word	0xe000ed04

080120b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	; 0x28
 80120b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120be:	2300      	movs	r3, #0
 80120c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120c2:	463a      	mov	r2, r7
 80120c4:	1d39      	adds	r1, r7, #4
 80120c6:	f107 0308 	add.w	r3, r7, #8
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fe fd5c 	bl	8010b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80120d0:	6839      	ldr	r1, [r7, #0]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	68ba      	ldr	r2, [r7, #8]
 80120d6:	9202      	str	r2, [sp, #8]
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	2300      	movs	r3, #0
 80120dc:	9300      	str	r3, [sp, #0]
 80120de:	2300      	movs	r3, #0
 80120e0:	460a      	mov	r2, r1
 80120e2:	4920      	ldr	r1, [pc, #128]	; (8012164 <vTaskStartScheduler+0xb0>)
 80120e4:	4820      	ldr	r0, [pc, #128]	; (8012168 <vTaskStartScheduler+0xb4>)
 80120e6:	f7ff fd27 	bl	8011b38 <xTaskCreateStatic>
 80120ea:	4602      	mov	r2, r0
 80120ec:	4b1f      	ldr	r3, [pc, #124]	; (801216c <vTaskStartScheduler+0xb8>)
 80120ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80120f0:	4b1e      	ldr	r3, [pc, #120]	; (801216c <vTaskStartScheduler+0xb8>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d002      	beq.n	80120fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80120f8:	2301      	movs	r3, #1
 80120fa:	617b      	str	r3, [r7, #20]
 80120fc:	e001      	b.n	8012102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80120fe:	2300      	movs	r3, #0
 8012100:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d102      	bne.n	801210e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012108:	f000 fde4 	bl	8012cd4 <xTimerCreateTimerTask>
 801210c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	2b01      	cmp	r3, #1
 8012112:	d115      	bne.n	8012140 <vTaskStartScheduler+0x8c>
 8012114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012118:	f383 8811 	msr	BASEPRI, r3
 801211c:	f3bf 8f6f 	isb	sy
 8012120:	f3bf 8f4f 	dsb	sy
 8012124:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012126:	4b12      	ldr	r3, [pc, #72]	; (8012170 <vTaskStartScheduler+0xbc>)
 8012128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801212c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801212e:	4b11      	ldr	r3, [pc, #68]	; (8012174 <vTaskStartScheduler+0xc0>)
 8012130:	2201      	movs	r2, #1
 8012132:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012134:	4b10      	ldr	r3, [pc, #64]	; (8012178 <vTaskStartScheduler+0xc4>)
 8012136:	2200      	movs	r2, #0
 8012138:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801213a:	f001 f999 	bl	8013470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801213e:	e00d      	b.n	801215c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012146:	d109      	bne.n	801215c <vTaskStartScheduler+0xa8>
 8012148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214c:	f383 8811 	msr	BASEPRI, r3
 8012150:	f3bf 8f6f 	isb	sy
 8012154:	f3bf 8f4f 	dsb	sy
 8012158:	60fb      	str	r3, [r7, #12]
 801215a:	e7fe      	b.n	801215a <vTaskStartScheduler+0xa6>
}
 801215c:	bf00      	nop
 801215e:	3718      	adds	r7, #24
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	08016a54 	.word	0x08016a54
 8012168:	0801277d 	.word	0x0801277d
 801216c:	20001024 	.word	0x20001024
 8012170:	20001020 	.word	0x20001020
 8012174:	2000100c 	.word	0x2000100c
 8012178:	20001004 	.word	0x20001004

0801217c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012180:	4b04      	ldr	r3, [pc, #16]	; (8012194 <vTaskSuspendAll+0x18>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	3301      	adds	r3, #1
 8012186:	4a03      	ldr	r2, [pc, #12]	; (8012194 <vTaskSuspendAll+0x18>)
 8012188:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801218a:	bf00      	nop
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr
 8012194:	20001028 	.word	0x20001028

08012198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801219e:	2300      	movs	r3, #0
 80121a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80121a2:	2300      	movs	r3, #0
 80121a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80121a6:	4b41      	ldr	r3, [pc, #260]	; (80122ac <xTaskResumeAll+0x114>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d109      	bne.n	80121c2 <xTaskResumeAll+0x2a>
 80121ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b2:	f383 8811 	msr	BASEPRI, r3
 80121b6:	f3bf 8f6f 	isb	sy
 80121ba:	f3bf 8f4f 	dsb	sy
 80121be:	603b      	str	r3, [r7, #0]
 80121c0:	e7fe      	b.n	80121c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80121c2:	f001 f9f3 	bl	80135ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80121c6:	4b39      	ldr	r3, [pc, #228]	; (80122ac <xTaskResumeAll+0x114>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	3b01      	subs	r3, #1
 80121cc:	4a37      	ldr	r2, [pc, #220]	; (80122ac <xTaskResumeAll+0x114>)
 80121ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121d0:	4b36      	ldr	r3, [pc, #216]	; (80122ac <xTaskResumeAll+0x114>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d162      	bne.n	801229e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80121d8:	4b35      	ldr	r3, [pc, #212]	; (80122b0 <xTaskResumeAll+0x118>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d05e      	beq.n	801229e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80121e0:	e02f      	b.n	8012242 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121e2:	4b34      	ldr	r3, [pc, #208]	; (80122b4 <xTaskResumeAll+0x11c>)
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	3318      	adds	r3, #24
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fd88 	bl	8010d04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3304      	adds	r3, #4
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe fd83 	bl	8010d04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012202:	4b2d      	ldr	r3, [pc, #180]	; (80122b8 <xTaskResumeAll+0x120>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	429a      	cmp	r2, r3
 8012208:	d903      	bls.n	8012212 <xTaskResumeAll+0x7a>
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801220e:	4a2a      	ldr	r2, [pc, #168]	; (80122b8 <xTaskResumeAll+0x120>)
 8012210:	6013      	str	r3, [r2, #0]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012216:	4613      	mov	r3, r2
 8012218:	009b      	lsls	r3, r3, #2
 801221a:	4413      	add	r3, r2
 801221c:	009b      	lsls	r3, r3, #2
 801221e:	4a27      	ldr	r2, [pc, #156]	; (80122bc <xTaskResumeAll+0x124>)
 8012220:	441a      	add	r2, r3
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	3304      	adds	r3, #4
 8012226:	4619      	mov	r1, r3
 8012228:	4610      	mov	r0, r2
 801222a:	f7fe fd0e 	bl	8010c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012232:	4b23      	ldr	r3, [pc, #140]	; (80122c0 <xTaskResumeAll+0x128>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012238:	429a      	cmp	r2, r3
 801223a:	d302      	bcc.n	8012242 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801223c:	4b21      	ldr	r3, [pc, #132]	; (80122c4 <xTaskResumeAll+0x12c>)
 801223e:	2201      	movs	r2, #1
 8012240:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012242:	4b1c      	ldr	r3, [pc, #112]	; (80122b4 <xTaskResumeAll+0x11c>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d1cb      	bne.n	80121e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012250:	f000 fb46 	bl	80128e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012254:	4b1c      	ldr	r3, [pc, #112]	; (80122c8 <xTaskResumeAll+0x130>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d010      	beq.n	8012282 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012260:	f000 f846 	bl	80122f0 <xTaskIncrementTick>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d002      	beq.n	8012270 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801226a:	4b16      	ldr	r3, [pc, #88]	; (80122c4 <xTaskResumeAll+0x12c>)
 801226c:	2201      	movs	r2, #1
 801226e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	3b01      	subs	r3, #1
 8012274:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1f1      	bne.n	8012260 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801227c:	4b12      	ldr	r3, [pc, #72]	; (80122c8 <xTaskResumeAll+0x130>)
 801227e:	2200      	movs	r2, #0
 8012280:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012282:	4b10      	ldr	r3, [pc, #64]	; (80122c4 <xTaskResumeAll+0x12c>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d009      	beq.n	801229e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801228a:	2301      	movs	r3, #1
 801228c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801228e:	4b0f      	ldr	r3, [pc, #60]	; (80122cc <xTaskResumeAll+0x134>)
 8012290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012294:	601a      	str	r2, [r3, #0]
 8012296:	f3bf 8f4f 	dsb	sy
 801229a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801229e:	f001 f9b3 	bl	8013608 <vPortExitCritical>

	return xAlreadyYielded;
 80122a2:	68bb      	ldr	r3, [r7, #8]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	20001028 	.word	0x20001028
 80122b0:	20001000 	.word	0x20001000
 80122b4:	20000fc0 	.word	0x20000fc0
 80122b8:	20001008 	.word	0x20001008
 80122bc:	20000b30 	.word	0x20000b30
 80122c0:	20000b2c 	.word	0x20000b2c
 80122c4:	20001014 	.word	0x20001014
 80122c8:	20001010 	.word	0x20001010
 80122cc:	e000ed04 	.word	0xe000ed04

080122d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80122d6:	4b05      	ldr	r3, [pc, #20]	; (80122ec <xTaskGetTickCount+0x1c>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80122dc:	687b      	ldr	r3, [r7, #4]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	20001004 	.word	0x20001004

080122f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b086      	sub	sp, #24
 80122f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80122f6:	2300      	movs	r3, #0
 80122f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122fa:	4b4e      	ldr	r3, [pc, #312]	; (8012434 <xTaskIncrementTick+0x144>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f040 8088 	bne.w	8012414 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012304:	4b4c      	ldr	r3, [pc, #304]	; (8012438 <xTaskIncrementTick+0x148>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	3301      	adds	r3, #1
 801230a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801230c:	4a4a      	ldr	r2, [pc, #296]	; (8012438 <xTaskIncrementTick+0x148>)
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d11f      	bne.n	8012358 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012318:	4b48      	ldr	r3, [pc, #288]	; (801243c <xTaskIncrementTick+0x14c>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d009      	beq.n	8012336 <xTaskIncrementTick+0x46>
 8012322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012326:	f383 8811 	msr	BASEPRI, r3
 801232a:	f3bf 8f6f 	isb	sy
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	603b      	str	r3, [r7, #0]
 8012334:	e7fe      	b.n	8012334 <xTaskIncrementTick+0x44>
 8012336:	4b41      	ldr	r3, [pc, #260]	; (801243c <xTaskIncrementTick+0x14c>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	4b40      	ldr	r3, [pc, #256]	; (8012440 <xTaskIncrementTick+0x150>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a3e      	ldr	r2, [pc, #248]	; (801243c <xTaskIncrementTick+0x14c>)
 8012342:	6013      	str	r3, [r2, #0]
 8012344:	4a3e      	ldr	r2, [pc, #248]	; (8012440 <xTaskIncrementTick+0x150>)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6013      	str	r3, [r2, #0]
 801234a:	4b3e      	ldr	r3, [pc, #248]	; (8012444 <xTaskIncrementTick+0x154>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3301      	adds	r3, #1
 8012350:	4a3c      	ldr	r2, [pc, #240]	; (8012444 <xTaskIncrementTick+0x154>)
 8012352:	6013      	str	r3, [r2, #0]
 8012354:	f000 fac4 	bl	80128e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012358:	4b3b      	ldr	r3, [pc, #236]	; (8012448 <xTaskIncrementTick+0x158>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	429a      	cmp	r2, r3
 8012360:	d349      	bcc.n	80123f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012362:	4b36      	ldr	r3, [pc, #216]	; (801243c <xTaskIncrementTick+0x14c>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d104      	bne.n	8012376 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801236c:	4b36      	ldr	r3, [pc, #216]	; (8012448 <xTaskIncrementTick+0x158>)
 801236e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012372:	601a      	str	r2, [r3, #0]
					break;
 8012374:	e03f      	b.n	80123f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012376:	4b31      	ldr	r3, [pc, #196]	; (801243c <xTaskIncrementTick+0x14c>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012386:	693a      	ldr	r2, [r7, #16]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	429a      	cmp	r2, r3
 801238c:	d203      	bcs.n	8012396 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801238e:	4a2e      	ldr	r2, [pc, #184]	; (8012448 <xTaskIncrementTick+0x158>)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012394:	e02f      	b.n	80123f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	3304      	adds	r3, #4
 801239a:	4618      	mov	r0, r3
 801239c:	f7fe fcb2 	bl	8010d04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d004      	beq.n	80123b2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	3318      	adds	r3, #24
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7fe fca9 	bl	8010d04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b6:	4b25      	ldr	r3, [pc, #148]	; (801244c <xTaskIncrementTick+0x15c>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d903      	bls.n	80123c6 <xTaskIncrementTick+0xd6>
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c2:	4a22      	ldr	r2, [pc, #136]	; (801244c <xTaskIncrementTick+0x15c>)
 80123c4:	6013      	str	r3, [r2, #0]
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ca:	4613      	mov	r3, r2
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	4413      	add	r3, r2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	4a1f      	ldr	r2, [pc, #124]	; (8012450 <xTaskIncrementTick+0x160>)
 80123d4:	441a      	add	r2, r3
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	3304      	adds	r3, #4
 80123da:	4619      	mov	r1, r3
 80123dc:	4610      	mov	r0, r2
 80123de:	f7fe fc34 	bl	8010c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123e6:	4b1b      	ldr	r3, [pc, #108]	; (8012454 <xTaskIncrementTick+0x164>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d3b8      	bcc.n	8012362 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80123f0:	2301      	movs	r3, #1
 80123f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123f4:	e7b5      	b.n	8012362 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80123f6:	4b17      	ldr	r3, [pc, #92]	; (8012454 <xTaskIncrementTick+0x164>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123fc:	4914      	ldr	r1, [pc, #80]	; (8012450 <xTaskIncrementTick+0x160>)
 80123fe:	4613      	mov	r3, r2
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	4413      	add	r3, r2
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	440b      	add	r3, r1
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d907      	bls.n	801241e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801240e:	2301      	movs	r3, #1
 8012410:	617b      	str	r3, [r7, #20]
 8012412:	e004      	b.n	801241e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012414:	4b10      	ldr	r3, [pc, #64]	; (8012458 <xTaskIncrementTick+0x168>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	3301      	adds	r3, #1
 801241a:	4a0f      	ldr	r2, [pc, #60]	; (8012458 <xTaskIncrementTick+0x168>)
 801241c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801241e:	4b0f      	ldr	r3, [pc, #60]	; (801245c <xTaskIncrementTick+0x16c>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d001      	beq.n	801242a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8012426:	2301      	movs	r3, #1
 8012428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801242a:	697b      	ldr	r3, [r7, #20]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3718      	adds	r7, #24
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	20001028 	.word	0x20001028
 8012438:	20001004 	.word	0x20001004
 801243c:	20000fb8 	.word	0x20000fb8
 8012440:	20000fbc 	.word	0x20000fbc
 8012444:	20001018 	.word	0x20001018
 8012448:	20001020 	.word	0x20001020
 801244c:	20001008 	.word	0x20001008
 8012450:	20000b30 	.word	0x20000b30
 8012454:	20000b2c 	.word	0x20000b2c
 8012458:	20001010 	.word	0x20001010
 801245c:	20001014 	.word	0x20001014

08012460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012460:	b480      	push	{r7}
 8012462:	b085      	sub	sp, #20
 8012464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012466:	4b27      	ldr	r3, [pc, #156]	; (8012504 <vTaskSwitchContext+0xa4>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d003      	beq.n	8012476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801246e:	4b26      	ldr	r3, [pc, #152]	; (8012508 <vTaskSwitchContext+0xa8>)
 8012470:	2201      	movs	r2, #1
 8012472:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012474:	e040      	b.n	80124f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012476:	4b24      	ldr	r3, [pc, #144]	; (8012508 <vTaskSwitchContext+0xa8>)
 8012478:	2200      	movs	r2, #0
 801247a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801247c:	4b23      	ldr	r3, [pc, #140]	; (801250c <vTaskSwitchContext+0xac>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	60fb      	str	r3, [r7, #12]
 8012482:	e00f      	b.n	80124a4 <vTaskSwitchContext+0x44>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d109      	bne.n	801249e <vTaskSwitchContext+0x3e>
 801248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248e:	f383 8811 	msr	BASEPRI, r3
 8012492:	f3bf 8f6f 	isb	sy
 8012496:	f3bf 8f4f 	dsb	sy
 801249a:	607b      	str	r3, [r7, #4]
 801249c:	e7fe      	b.n	801249c <vTaskSwitchContext+0x3c>
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3b01      	subs	r3, #1
 80124a2:	60fb      	str	r3, [r7, #12]
 80124a4:	491a      	ldr	r1, [pc, #104]	; (8012510 <vTaskSwitchContext+0xb0>)
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	4613      	mov	r3, r2
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	440b      	add	r3, r1
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d0e5      	beq.n	8012484 <vTaskSwitchContext+0x24>
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4613      	mov	r3, r2
 80124bc:	009b      	lsls	r3, r3, #2
 80124be:	4413      	add	r3, r2
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	4a13      	ldr	r2, [pc, #76]	; (8012510 <vTaskSwitchContext+0xb0>)
 80124c4:	4413      	add	r3, r2
 80124c6:	60bb      	str	r3, [r7, #8]
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	605a      	str	r2, [r3, #4]
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	685a      	ldr	r2, [r3, #4]
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	3308      	adds	r3, #8
 80124da:	429a      	cmp	r2, r3
 80124dc:	d104      	bne.n	80124e8 <vTaskSwitchContext+0x88>
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	685a      	ldr	r2, [r3, #4]
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	605a      	str	r2, [r3, #4]
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	68db      	ldr	r3, [r3, #12]
 80124ee:	4a09      	ldr	r2, [pc, #36]	; (8012514 <vTaskSwitchContext+0xb4>)
 80124f0:	6013      	str	r3, [r2, #0]
 80124f2:	4a06      	ldr	r2, [pc, #24]	; (801250c <vTaskSwitchContext+0xac>)
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	6013      	str	r3, [r2, #0]
}
 80124f8:	bf00      	nop
 80124fa:	3714      	adds	r7, #20
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	20001028 	.word	0x20001028
 8012508:	20001014 	.word	0x20001014
 801250c:	20001008 	.word	0x20001008
 8012510:	20000b30 	.word	0x20000b30
 8012514:	20000b2c 	.word	0x20000b2c

08012518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d109      	bne.n	801253c <vTaskPlaceOnEventList+0x24>
 8012528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	e7fe      	b.n	801253a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801253c:	4b07      	ldr	r3, [pc, #28]	; (801255c <vTaskPlaceOnEventList+0x44>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	3318      	adds	r3, #24
 8012542:	4619      	mov	r1, r3
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f7fe fba4 	bl	8010c92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801254a:	2101      	movs	r1, #1
 801254c:	6838      	ldr	r0, [r7, #0]
 801254e:	f000 fb6d 	bl	8012c2c <prvAddCurrentTaskToDelayedList>
}
 8012552:	bf00      	nop
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	20000b2c 	.word	0x20000b2c

08012560 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d109      	bne.n	8012586 <vTaskPlaceOnEventListRestricted+0x26>
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	617b      	str	r3, [r7, #20]
 8012584:	e7fe      	b.n	8012584 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012586:	4b0a      	ldr	r3, [pc, #40]	; (80125b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	3318      	adds	r3, #24
 801258c:	4619      	mov	r1, r3
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	f7fe fb5b 	bl	8010c4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d002      	beq.n	80125a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801259a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801259e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80125a0:	6879      	ldr	r1, [r7, #4]
 80125a2:	68b8      	ldr	r0, [r7, #8]
 80125a4:	f000 fb42 	bl	8012c2c <prvAddCurrentTaskToDelayedList>
	}
 80125a8:	bf00      	nop
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	20000b2c 	.word	0x20000b2c

080125b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d109      	bne.n	80125de <xTaskRemoveFromEventList+0x2a>
 80125ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ce:	f383 8811 	msr	BASEPRI, r3
 80125d2:	f3bf 8f6f 	isb	sy
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	60fb      	str	r3, [r7, #12]
 80125dc:	e7fe      	b.n	80125dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	3318      	adds	r3, #24
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fe fb8e 	bl	8010d04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125e8:	4b1d      	ldr	r3, [pc, #116]	; (8012660 <xTaskRemoveFromEventList+0xac>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d11d      	bne.n	801262c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	3304      	adds	r3, #4
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fe fb85 	bl	8010d04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125fe:	4b19      	ldr	r3, [pc, #100]	; (8012664 <xTaskRemoveFromEventList+0xb0>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	429a      	cmp	r2, r3
 8012604:	d903      	bls.n	801260e <xTaskRemoveFromEventList+0x5a>
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801260a:	4a16      	ldr	r2, [pc, #88]	; (8012664 <xTaskRemoveFromEventList+0xb0>)
 801260c:	6013      	str	r3, [r2, #0]
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012612:	4613      	mov	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	4413      	add	r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	4a13      	ldr	r2, [pc, #76]	; (8012668 <xTaskRemoveFromEventList+0xb4>)
 801261c:	441a      	add	r2, r3
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	3304      	adds	r3, #4
 8012622:	4619      	mov	r1, r3
 8012624:	4610      	mov	r0, r2
 8012626:	f7fe fb10 	bl	8010c4a <vListInsertEnd>
 801262a:	e005      	b.n	8012638 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	3318      	adds	r3, #24
 8012630:	4619      	mov	r1, r3
 8012632:	480e      	ldr	r0, [pc, #56]	; (801266c <xTaskRemoveFromEventList+0xb8>)
 8012634:	f7fe fb09 	bl	8010c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801263c:	4b0c      	ldr	r3, [pc, #48]	; (8012670 <xTaskRemoveFromEventList+0xbc>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012642:	429a      	cmp	r2, r3
 8012644:	d905      	bls.n	8012652 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012646:	2301      	movs	r3, #1
 8012648:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801264a:	4b0a      	ldr	r3, [pc, #40]	; (8012674 <xTaskRemoveFromEventList+0xc0>)
 801264c:	2201      	movs	r2, #1
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	e001      	b.n	8012656 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012652:	2300      	movs	r3, #0
 8012654:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012656:	697b      	ldr	r3, [r7, #20]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3718      	adds	r7, #24
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	20001028 	.word	0x20001028
 8012664:	20001008 	.word	0x20001008
 8012668:	20000b30 	.word	0x20000b30
 801266c:	20000fc0 	.word	0x20000fc0
 8012670:	20000b2c 	.word	0x20000b2c
 8012674:	20001014 	.word	0x20001014

08012678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012680:	4b06      	ldr	r3, [pc, #24]	; (801269c <vTaskInternalSetTimeOutState+0x24>)
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012688:	4b05      	ldr	r3, [pc, #20]	; (80126a0 <vTaskInternalSetTimeOutState+0x28>)
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	605a      	str	r2, [r3, #4]
}
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr
 801269c:	20001018 	.word	0x20001018
 80126a0:	20001004 	.word	0x20001004

080126a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d109      	bne.n	80126c8 <xTaskCheckForTimeOut+0x24>
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	f383 8811 	msr	BASEPRI, r3
 80126bc:	f3bf 8f6f 	isb	sy
 80126c0:	f3bf 8f4f 	dsb	sy
 80126c4:	613b      	str	r3, [r7, #16]
 80126c6:	e7fe      	b.n	80126c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d109      	bne.n	80126e2 <xTaskCheckForTimeOut+0x3e>
 80126ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d2:	f383 8811 	msr	BASEPRI, r3
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	60fb      	str	r3, [r7, #12]
 80126e0:	e7fe      	b.n	80126e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80126e2:	f000 ff63 	bl	80135ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126e6:	4b1d      	ldr	r3, [pc, #116]	; (801275c <xTaskCheckForTimeOut+0xb8>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	69ba      	ldr	r2, [r7, #24]
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126fe:	d102      	bne.n	8012706 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012700:	2300      	movs	r3, #0
 8012702:	61fb      	str	r3, [r7, #28]
 8012704:	e023      	b.n	801274e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681a      	ldr	r2, [r3, #0]
 801270a:	4b15      	ldr	r3, [pc, #84]	; (8012760 <xTaskCheckForTimeOut+0xbc>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	429a      	cmp	r2, r3
 8012710:	d007      	beq.n	8012722 <xTaskCheckForTimeOut+0x7e>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	69ba      	ldr	r2, [r7, #24]
 8012718:	429a      	cmp	r2, r3
 801271a:	d302      	bcc.n	8012722 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801271c:	2301      	movs	r3, #1
 801271e:	61fb      	str	r3, [r7, #28]
 8012720:	e015      	b.n	801274e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	697a      	ldr	r2, [r7, #20]
 8012728:	429a      	cmp	r2, r3
 801272a:	d20b      	bcs.n	8012744 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	681a      	ldr	r2, [r3, #0]
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	1ad2      	subs	r2, r2, r3
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7ff ff9d 	bl	8012678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801273e:	2300      	movs	r3, #0
 8012740:	61fb      	str	r3, [r7, #28]
 8012742:	e004      	b.n	801274e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2200      	movs	r2, #0
 8012748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801274a:	2301      	movs	r3, #1
 801274c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801274e:	f000 ff5b 	bl	8013608 <vPortExitCritical>

	return xReturn;
 8012752:	69fb      	ldr	r3, [r7, #28]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3720      	adds	r7, #32
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	20001004 	.word	0x20001004
 8012760:	20001018 	.word	0x20001018

08012764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012764:	b480      	push	{r7}
 8012766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012768:	4b03      	ldr	r3, [pc, #12]	; (8012778 <vTaskMissedYield+0x14>)
 801276a:	2201      	movs	r2, #1
 801276c:	601a      	str	r2, [r3, #0]
}
 801276e:	bf00      	nop
 8012770:	46bd      	mov	sp, r7
 8012772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012776:	4770      	bx	lr
 8012778:	20001014 	.word	0x20001014

0801277c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012784:	f000 f852 	bl	801282c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012788:	4b06      	ldr	r3, [pc, #24]	; (80127a4 <prvIdleTask+0x28>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d9f9      	bls.n	8012784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012790:	4b05      	ldr	r3, [pc, #20]	; (80127a8 <prvIdleTask+0x2c>)
 8012792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012796:	601a      	str	r2, [r3, #0]
 8012798:	f3bf 8f4f 	dsb	sy
 801279c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80127a0:	e7f0      	b.n	8012784 <prvIdleTask+0x8>
 80127a2:	bf00      	nop
 80127a4:	20000b30 	.word	0x20000b30
 80127a8:	e000ed04 	.word	0xe000ed04

080127ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127b2:	2300      	movs	r3, #0
 80127b4:	607b      	str	r3, [r7, #4]
 80127b6:	e00c      	b.n	80127d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	4613      	mov	r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	4413      	add	r3, r2
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	4a12      	ldr	r2, [pc, #72]	; (801280c <prvInitialiseTaskLists+0x60>)
 80127c4:	4413      	add	r3, r2
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fa12 	bl	8010bf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	3301      	adds	r3, #1
 80127d0:	607b      	str	r3, [r7, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b37      	cmp	r3, #55	; 0x37
 80127d6:	d9ef      	bls.n	80127b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80127d8:	480d      	ldr	r0, [pc, #52]	; (8012810 <prvInitialiseTaskLists+0x64>)
 80127da:	f7fe fa09 	bl	8010bf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80127de:	480d      	ldr	r0, [pc, #52]	; (8012814 <prvInitialiseTaskLists+0x68>)
 80127e0:	f7fe fa06 	bl	8010bf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127e4:	480c      	ldr	r0, [pc, #48]	; (8012818 <prvInitialiseTaskLists+0x6c>)
 80127e6:	f7fe fa03 	bl	8010bf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127ea:	480c      	ldr	r0, [pc, #48]	; (801281c <prvInitialiseTaskLists+0x70>)
 80127ec:	f7fe fa00 	bl	8010bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127f0:	480b      	ldr	r0, [pc, #44]	; (8012820 <prvInitialiseTaskLists+0x74>)
 80127f2:	f7fe f9fd 	bl	8010bf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127f6:	4b0b      	ldr	r3, [pc, #44]	; (8012824 <prvInitialiseTaskLists+0x78>)
 80127f8:	4a05      	ldr	r2, [pc, #20]	; (8012810 <prvInitialiseTaskLists+0x64>)
 80127fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80127fc:	4b0a      	ldr	r3, [pc, #40]	; (8012828 <prvInitialiseTaskLists+0x7c>)
 80127fe:	4a05      	ldr	r2, [pc, #20]	; (8012814 <prvInitialiseTaskLists+0x68>)
 8012800:	601a      	str	r2, [r3, #0]
}
 8012802:	bf00      	nop
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	20000b30 	.word	0x20000b30
 8012810:	20000f90 	.word	0x20000f90
 8012814:	20000fa4 	.word	0x20000fa4
 8012818:	20000fc0 	.word	0x20000fc0
 801281c:	20000fd4 	.word	0x20000fd4
 8012820:	20000fec 	.word	0x20000fec
 8012824:	20000fb8 	.word	0x20000fb8
 8012828:	20000fbc 	.word	0x20000fbc

0801282c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012832:	e019      	b.n	8012868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012834:	f000 feba 	bl	80135ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012838:	4b0f      	ldr	r3, [pc, #60]	; (8012878 <prvCheckTasksWaitingTermination+0x4c>)
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	3304      	adds	r3, #4
 8012844:	4618      	mov	r0, r3
 8012846:	f7fe fa5d 	bl	8010d04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801284a:	4b0c      	ldr	r3, [pc, #48]	; (801287c <prvCheckTasksWaitingTermination+0x50>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	3b01      	subs	r3, #1
 8012850:	4a0a      	ldr	r2, [pc, #40]	; (801287c <prvCheckTasksWaitingTermination+0x50>)
 8012852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012854:	4b0a      	ldr	r3, [pc, #40]	; (8012880 <prvCheckTasksWaitingTermination+0x54>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	3b01      	subs	r3, #1
 801285a:	4a09      	ldr	r2, [pc, #36]	; (8012880 <prvCheckTasksWaitingTermination+0x54>)
 801285c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801285e:	f000 fed3 	bl	8013608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f80e 	bl	8012884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012868:	4b05      	ldr	r3, [pc, #20]	; (8012880 <prvCheckTasksWaitingTermination+0x54>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d1e1      	bne.n	8012834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012870:	bf00      	nop
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	20000fd4 	.word	0x20000fd4
 801287c:	20001000 	.word	0x20001000
 8012880:	20000fe8 	.word	0x20000fe8

08012884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012892:	2b00      	cmp	r3, #0
 8012894:	d108      	bne.n	80128a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801289a:	4618      	mov	r0, r3
 801289c:	f001 f862 	bl	8013964 <vPortFree>
				vPortFree( pxTCB );
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f001 f85f 	bl	8013964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80128a6:	e017      	b.n	80128d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d103      	bne.n	80128ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f001 f856 	bl	8013964 <vPortFree>
	}
 80128b8:	e00e      	b.n	80128d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80128c0:	2b02      	cmp	r3, #2
 80128c2:	d009      	beq.n	80128d8 <prvDeleteTCB+0x54>
 80128c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c8:	f383 8811 	msr	BASEPRI, r3
 80128cc:	f3bf 8f6f 	isb	sy
 80128d0:	f3bf 8f4f 	dsb	sy
 80128d4:	60fb      	str	r3, [r7, #12]
 80128d6:	e7fe      	b.n	80128d6 <prvDeleteTCB+0x52>
	}
 80128d8:	bf00      	nop
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <prvResetNextTaskUnblockTime+0x38>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d104      	bne.n	80128fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80128f0:	4b0a      	ldr	r3, [pc, #40]	; (801291c <prvResetNextTaskUnblockTime+0x3c>)
 80128f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80128f8:	e008      	b.n	801290c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128fa:	4b07      	ldr	r3, [pc, #28]	; (8012918 <prvResetNextTaskUnblockTime+0x38>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	4a04      	ldr	r2, [pc, #16]	; (801291c <prvResetNextTaskUnblockTime+0x3c>)
 801290a:	6013      	str	r3, [r2, #0]
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr
 8012918:	20000fb8 	.word	0x20000fb8
 801291c:	20001020 	.word	0x20001020

08012920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012926:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <xTaskGetSchedulerState+0x34>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d102      	bne.n	8012934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801292e:	2301      	movs	r3, #1
 8012930:	607b      	str	r3, [r7, #4]
 8012932:	e008      	b.n	8012946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012934:	4b08      	ldr	r3, [pc, #32]	; (8012958 <xTaskGetSchedulerState+0x38>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d102      	bne.n	8012942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801293c:	2302      	movs	r3, #2
 801293e:	607b      	str	r3, [r7, #4]
 8012940:	e001      	b.n	8012946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012942:	2300      	movs	r3, #0
 8012944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012946:	687b      	ldr	r3, [r7, #4]
	}
 8012948:	4618      	mov	r0, r3
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr
 8012954:	2000100c 	.word	0x2000100c
 8012958:	20001028 	.word	0x20001028

0801295c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012968:	2300      	movs	r3, #0
 801296a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d051      	beq.n	8012a16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012976:	4b2a      	ldr	r3, [pc, #168]	; (8012a20 <xTaskPriorityInherit+0xc4>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801297c:	429a      	cmp	r2, r3
 801297e:	d241      	bcs.n	8012a04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	699b      	ldr	r3, [r3, #24]
 8012984:	2b00      	cmp	r3, #0
 8012986:	db06      	blt.n	8012996 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012988:	4b25      	ldr	r3, [pc, #148]	; (8012a20 <xTaskPriorityInherit+0xc4>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801298e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	6959      	ldr	r1, [r3, #20]
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801299e:	4613      	mov	r3, r2
 80129a0:	009b      	lsls	r3, r3, #2
 80129a2:	4413      	add	r3, r2
 80129a4:	009b      	lsls	r3, r3, #2
 80129a6:	4a1f      	ldr	r2, [pc, #124]	; (8012a24 <xTaskPriorityInherit+0xc8>)
 80129a8:	4413      	add	r3, r2
 80129aa:	4299      	cmp	r1, r3
 80129ac:	d122      	bne.n	80129f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	3304      	adds	r3, #4
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fe f9a6 	bl	8010d04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129b8:	4b19      	ldr	r3, [pc, #100]	; (8012a20 <xTaskPriorityInherit+0xc4>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c6:	4b18      	ldr	r3, [pc, #96]	; (8012a28 <xTaskPriorityInherit+0xcc>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d903      	bls.n	80129d6 <xTaskPriorityInherit+0x7a>
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d2:	4a15      	ldr	r2, [pc, #84]	; (8012a28 <xTaskPriorityInherit+0xcc>)
 80129d4:	6013      	str	r3, [r2, #0]
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129da:	4613      	mov	r3, r2
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	4413      	add	r3, r2
 80129e0:	009b      	lsls	r3, r3, #2
 80129e2:	4a10      	ldr	r2, [pc, #64]	; (8012a24 <xTaskPriorityInherit+0xc8>)
 80129e4:	441a      	add	r2, r3
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	3304      	adds	r3, #4
 80129ea:	4619      	mov	r1, r3
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7fe f92c 	bl	8010c4a <vListInsertEnd>
 80129f2:	e004      	b.n	80129fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80129f4:	4b0a      	ldr	r3, [pc, #40]	; (8012a20 <xTaskPriorityInherit+0xc4>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80129fe:	2301      	movs	r3, #1
 8012a00:	60fb      	str	r3, [r7, #12]
 8012a02:	e008      	b.n	8012a16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a08:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <xTaskPriorityInherit+0xc4>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d201      	bcs.n	8012a16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012a12:	2301      	movs	r3, #1
 8012a14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a16:	68fb      	ldr	r3, [r7, #12]
	}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	20000b2c 	.word	0x20000b2c
 8012a24:	20000b30 	.word	0x20000b30
 8012a28:	20001008 	.word	0x20001008

08012a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b086      	sub	sp, #24
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d054      	beq.n	8012aec <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012a42:	4b2d      	ldr	r3, [pc, #180]	; (8012af8 <xTaskPriorityDisinherit+0xcc>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	693a      	ldr	r2, [r7, #16]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d009      	beq.n	8012a60 <xTaskPriorityDisinherit+0x34>
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	60fb      	str	r3, [r7, #12]
 8012a5e:	e7fe      	b.n	8012a5e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d109      	bne.n	8012a7c <xTaskPriorityDisinherit+0x50>
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	60bb      	str	r3, [r7, #8]
 8012a7a:	e7fe      	b.n	8012a7a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a80:	1e5a      	subs	r2, r3, #1
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d02c      	beq.n	8012aec <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d128      	bne.n	8012aec <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fe f930 	bl	8010d04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012abc:	4b0f      	ldr	r3, [pc, #60]	; (8012afc <xTaskPriorityDisinherit+0xd0>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d903      	bls.n	8012acc <xTaskPriorityDisinherit+0xa0>
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac8:	4a0c      	ldr	r2, [pc, #48]	; (8012afc <xTaskPriorityDisinherit+0xd0>)
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	4413      	add	r3, r2
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4a09      	ldr	r2, [pc, #36]	; (8012b00 <xTaskPriorityDisinherit+0xd4>)
 8012ada:	441a      	add	r2, r3
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	3304      	adds	r3, #4
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	f7fe f8b1 	bl	8010c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012aec:	697b      	ldr	r3, [r7, #20]
	}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3718      	adds	r7, #24
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	20000b2c 	.word	0x20000b2c
 8012afc:	20001008 	.word	0x20001008
 8012b00:	20000b30 	.word	0x20000b30

08012b04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b088      	sub	sp, #32
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012b12:	2301      	movs	r3, #1
 8012b14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d068      	beq.n	8012bee <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d109      	bne.n	8012b38 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b28:	f383 8811 	msr	BASEPRI, r3
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	60fb      	str	r3, [r7, #12]
 8012b36:	e7fe      	b.n	8012b36 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012b38:	69bb      	ldr	r3, [r7, #24]
 8012b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b3c:	683a      	ldr	r2, [r7, #0]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d902      	bls.n	8012b48 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	61fb      	str	r3, [r7, #28]
 8012b46:	e002      	b.n	8012b4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b52:	69fa      	ldr	r2, [r7, #28]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d04a      	beq.n	8012bee <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b5c:	697a      	ldr	r2, [r7, #20]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d145      	bne.n	8012bee <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012b62:	4b25      	ldr	r3, [pc, #148]	; (8012bf8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	69ba      	ldr	r2, [r7, #24]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d109      	bne.n	8012b80 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	60bb      	str	r3, [r7, #8]
 8012b7e:	e7fe      	b.n	8012b7e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	69fa      	ldr	r2, [r7, #28]
 8012b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	db04      	blt.n	8012b9e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	6959      	ldr	r1, [r3, #20]
 8012ba2:	693a      	ldr	r2, [r7, #16]
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	4413      	add	r3, r2
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	4a13      	ldr	r2, [pc, #76]	; (8012bfc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012bae:	4413      	add	r3, r2
 8012bb0:	4299      	cmp	r1, r3
 8012bb2:	d11c      	bne.n	8012bee <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	3304      	adds	r3, #4
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fe f8a3 	bl	8010d04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012bbe:	69bb      	ldr	r3, [r7, #24]
 8012bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc2:	4b0f      	ldr	r3, [pc, #60]	; (8012c00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d903      	bls.n	8012bd2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bce:	4a0c      	ldr	r2, [pc, #48]	; (8012c00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012bd0:	6013      	str	r3, [r2, #0]
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd6:	4613      	mov	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	4413      	add	r3, r2
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4a07      	ldr	r2, [pc, #28]	; (8012bfc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012be0:	441a      	add	r2, r3
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	3304      	adds	r3, #4
 8012be6:	4619      	mov	r1, r3
 8012be8:	4610      	mov	r0, r2
 8012bea:	f7fe f82e 	bl	8010c4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012bee:	bf00      	nop
 8012bf0:	3720      	adds	r7, #32
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20000b2c 	.word	0x20000b2c
 8012bfc:	20000b30 	.word	0x20000b30
 8012c00:	20001008 	.word	0x20001008

08012c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012c04:	b480      	push	{r7}
 8012c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012c08:	4b07      	ldr	r3, [pc, #28]	; (8012c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d004      	beq.n	8012c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012c10:	4b05      	ldr	r3, [pc, #20]	; (8012c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c16:	3201      	adds	r2, #1
 8012c18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012c1a:	4b03      	ldr	r3, [pc, #12]	; (8012c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
	}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	20000b2c 	.word	0x20000b2c

08012c2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c36:	4b21      	ldr	r3, [pc, #132]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x90>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c3c:	4b20      	ldr	r3, [pc, #128]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	3304      	adds	r3, #4
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fe f85e 	bl	8010d04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c4e:	d10a      	bne.n	8012c66 <prvAddCurrentTaskToDelayedList+0x3a>
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d007      	beq.n	8012c66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c56:	4b1a      	ldr	r3, [pc, #104]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	3304      	adds	r3, #4
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	4819      	ldr	r0, [pc, #100]	; (8012cc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012c60:	f7fd fff3 	bl	8010c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c64:	e026      	b.n	8012cb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c6e:	4b14      	ldr	r3, [pc, #80]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d209      	bcs.n	8012c92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c7e:	4b12      	ldr	r3, [pc, #72]	; (8012cc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	4b0f      	ldr	r3, [pc, #60]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3304      	adds	r3, #4
 8012c88:	4619      	mov	r1, r3
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	f7fe f801 	bl	8010c92 <vListInsert>
}
 8012c90:	e010      	b.n	8012cb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c92:	4b0e      	ldr	r3, [pc, #56]	; (8012ccc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	4b0a      	ldr	r3, [pc, #40]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3304      	adds	r3, #4
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	4610      	mov	r0, r2
 8012ca0:	f7fd fff7 	bl	8010c92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012ca4:	4b0a      	ldr	r3, [pc, #40]	; (8012cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d202      	bcs.n	8012cb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012cae:	4a08      	ldr	r2, [pc, #32]	; (8012cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	6013      	str	r3, [r2, #0]
}
 8012cb4:	bf00      	nop
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	20001004 	.word	0x20001004
 8012cc0:	20000b2c 	.word	0x20000b2c
 8012cc4:	20000fec 	.word	0x20000fec
 8012cc8:	20000fbc 	.word	0x20000fbc
 8012ccc:	20000fb8 	.word	0x20000fb8
 8012cd0:	20001020 	.word	0x20001020

08012cd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b08a      	sub	sp, #40	; 0x28
 8012cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cde:	f000 faff 	bl	80132e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012ce2:	4b1c      	ldr	r3, [pc, #112]	; (8012d54 <xTimerCreateTimerTask+0x80>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d021      	beq.n	8012d2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012cea:	2300      	movs	r3, #0
 8012cec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012cf2:	1d3a      	adds	r2, r7, #4
 8012cf4:	f107 0108 	add.w	r1, r7, #8
 8012cf8:	f107 030c 	add.w	r3, r7, #12
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fd ff5d 	bl	8010bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d02:	6879      	ldr	r1, [r7, #4]
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	9202      	str	r2, [sp, #8]
 8012d0a:	9301      	str	r3, [sp, #4]
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	2300      	movs	r3, #0
 8012d12:	460a      	mov	r2, r1
 8012d14:	4910      	ldr	r1, [pc, #64]	; (8012d58 <xTimerCreateTimerTask+0x84>)
 8012d16:	4811      	ldr	r0, [pc, #68]	; (8012d5c <xTimerCreateTimerTask+0x88>)
 8012d18:	f7fe ff0e 	bl	8011b38 <xTaskCreateStatic>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	4b10      	ldr	r3, [pc, #64]	; (8012d60 <xTimerCreateTimerTask+0x8c>)
 8012d20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d22:	4b0f      	ldr	r3, [pc, #60]	; (8012d60 <xTimerCreateTimerTask+0x8c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d001      	beq.n	8012d2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d109      	bne.n	8012d48 <xTimerCreateTimerTask+0x74>
 8012d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	613b      	str	r3, [r7, #16]
 8012d46:	e7fe      	b.n	8012d46 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8012d48:	697b      	ldr	r3, [r7, #20]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	2000105c 	.word	0x2000105c
 8012d58:	08016a5c 	.word	0x08016a5c
 8012d5c:	08012e95 	.word	0x08012e95
 8012d60:	20001060 	.word	0x20001060

08012d64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b08a      	sub	sp, #40	; 0x28
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	607a      	str	r2, [r7, #4]
 8012d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d109      	bne.n	8012d90 <xTimerGenericCommand+0x2c>
 8012d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d80:	f383 8811 	msr	BASEPRI, r3
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	f3bf 8f4f 	dsb	sy
 8012d8c:	623b      	str	r3, [r7, #32]
 8012d8e:	e7fe      	b.n	8012d8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d90:	4b19      	ldr	r3, [pc, #100]	; (8012df8 <xTimerGenericCommand+0x94>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d02a      	beq.n	8012dee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	2b05      	cmp	r3, #5
 8012da8:	dc18      	bgt.n	8012ddc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012daa:	f7ff fdb9 	bl	8012920 <xTaskGetSchedulerState>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b02      	cmp	r3, #2
 8012db2:	d109      	bne.n	8012dc8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012db4:	4b10      	ldr	r3, [pc, #64]	; (8012df8 <xTimerGenericCommand+0x94>)
 8012db6:	6818      	ldr	r0, [r3, #0]
 8012db8:	f107 0110 	add.w	r1, r7, #16
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc0:	f7fe f93a 	bl	8011038 <xQueueGenericSend>
 8012dc4:	6278      	str	r0, [r7, #36]	; 0x24
 8012dc6:	e012      	b.n	8012dee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012dc8:	4b0b      	ldr	r3, [pc, #44]	; (8012df8 <xTimerGenericCommand+0x94>)
 8012dca:	6818      	ldr	r0, [r3, #0]
 8012dcc:	f107 0110 	add.w	r1, r7, #16
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f7fe f930 	bl	8011038 <xQueueGenericSend>
 8012dd8:	6278      	str	r0, [r7, #36]	; 0x24
 8012dda:	e008      	b.n	8012dee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012ddc:	4b06      	ldr	r3, [pc, #24]	; (8012df8 <xTimerGenericCommand+0x94>)
 8012dde:	6818      	ldr	r0, [r3, #0]
 8012de0:	f107 0110 	add.w	r1, r7, #16
 8012de4:	2300      	movs	r3, #0
 8012de6:	683a      	ldr	r2, [r7, #0]
 8012de8:	f7fe fa20 	bl	801122c <xQueueGenericSendFromISR>
 8012dec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3728      	adds	r7, #40	; 0x28
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	2000105c 	.word	0x2000105c

08012dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af02      	add	r7, sp, #8
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e06:	4b22      	ldr	r3, [pc, #136]	; (8012e90 <prvProcessExpiredTimer+0x94>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	68db      	ldr	r3, [r3, #12]
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	3304      	adds	r3, #4
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fd ff75 	bl	8010d04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e20:	f003 0304 	and.w	r3, r3, #4
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d021      	beq.n	8012e6c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	699a      	ldr	r2, [r3, #24]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	18d1      	adds	r1, r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	683a      	ldr	r2, [r7, #0]
 8012e34:	6978      	ldr	r0, [r7, #20]
 8012e36:	f000 f8d1 	bl	8012fdc <prvInsertTimerInActiveList>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01e      	beq.n	8012e7e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e40:	2300      	movs	r3, #0
 8012e42:	9300      	str	r3, [sp, #0]
 8012e44:	2300      	movs	r3, #0
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	2100      	movs	r1, #0
 8012e4a:	6978      	ldr	r0, [r7, #20]
 8012e4c:	f7ff ff8a 	bl	8012d64 <xTimerGenericCommand>
 8012e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d112      	bne.n	8012e7e <prvProcessExpiredTimer+0x82>
 8012e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	60fb      	str	r3, [r7, #12]
 8012e6a:	e7fe      	b.n	8012e6a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e72:	f023 0301 	bic.w	r3, r3, #1
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	6a1b      	ldr	r3, [r3, #32]
 8012e82:	6978      	ldr	r0, [r7, #20]
 8012e84:	4798      	blx	r3
}
 8012e86:	bf00      	nop
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	20001054 	.word	0x20001054

08012e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b084      	sub	sp, #16
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e9c:	f107 0308 	add.w	r3, r7, #8
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 f857 	bl	8012f54 <prvGetNextExpireTime>
 8012ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	4619      	mov	r1, r3
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f000 f803 	bl	8012eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012eb2:	f000 f8d5 	bl	8013060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eb6:	e7f1      	b.n	8012e9c <prvTimerTask+0x8>

08012eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012ec2:	f7ff f95b 	bl	801217c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ec6:	f107 0308 	add.w	r3, r7, #8
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f000 f866 	bl	8012f9c <prvSampleTimeNow>
 8012ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d130      	bne.n	8012f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <prvProcessTimerOrBlockTask+0x3c>
 8012ede:	687a      	ldr	r2, [r7, #4]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d806      	bhi.n	8012ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012ee6:	f7ff f957 	bl	8012198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012eea:	68f9      	ldr	r1, [r7, #12]
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7ff ff85 	bl	8012dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012ef2:	e024      	b.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d008      	beq.n	8012f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012efa:	4b13      	ldr	r3, [pc, #76]	; (8012f48 <prvProcessTimerOrBlockTask+0x90>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d101      	bne.n	8012f08 <prvProcessTimerOrBlockTask+0x50>
 8012f04:	2301      	movs	r3, #1
 8012f06:	e000      	b.n	8012f0a <prvProcessTimerOrBlockTask+0x52>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f0c:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <prvProcessTimerOrBlockTask+0x94>)
 8012f0e:	6818      	ldr	r0, [r3, #0]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	683a      	ldr	r2, [r7, #0]
 8012f18:	4619      	mov	r1, r3
 8012f1a:	f7fe fdd9 	bl	8011ad0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f1e:	f7ff f93b 	bl	8012198 <xTaskResumeAll>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10a      	bne.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f28:	4b09      	ldr	r3, [pc, #36]	; (8012f50 <prvProcessTimerOrBlockTask+0x98>)
 8012f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f2e:	601a      	str	r2, [r3, #0]
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	f3bf 8f6f 	isb	sy
}
 8012f38:	e001      	b.n	8012f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f3a:	f7ff f92d 	bl	8012198 <xTaskResumeAll>
}
 8012f3e:	bf00      	nop
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20001058 	.word	0x20001058
 8012f4c:	2000105c 	.word	0x2000105c
 8012f50:	e000ed04 	.word	0xe000ed04

08012f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f54:	b480      	push	{r7}
 8012f56:	b085      	sub	sp, #20
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <prvGetNextExpireTime+0x44>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <prvGetNextExpireTime+0x16>
 8012f66:	2201      	movs	r2, #1
 8012f68:	e000      	b.n	8012f6c <prvGetNextExpireTime+0x18>
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d105      	bne.n	8012f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f78:	4b07      	ldr	r3, [pc, #28]	; (8012f98 <prvGetNextExpireTime+0x44>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	e001      	b.n	8012f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f84:	2300      	movs	r3, #0
 8012f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f88:	68fb      	ldr	r3, [r7, #12]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3714      	adds	r7, #20
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	20001054 	.word	0x20001054

08012f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012fa4:	f7ff f994 	bl	80122d0 <xTaskGetTickCount>
 8012fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012faa:	4b0b      	ldr	r3, [pc, #44]	; (8012fd8 <prvSampleTimeNow+0x3c>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d205      	bcs.n	8012fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fb4:	f000 f930 	bl	8013218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2201      	movs	r2, #1
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	e002      	b.n	8012fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fc6:	4a04      	ldr	r2, [pc, #16]	; (8012fd8 <prvSampleTimeNow+0x3c>)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20001064 	.word	0x20001064

08012fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b086      	sub	sp, #24
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fea:	2300      	movs	r3, #0
 8012fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012ffa:	68ba      	ldr	r2, [r7, #8]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d812      	bhi.n	8013028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	1ad2      	subs	r2, r2, r3
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	429a      	cmp	r2, r3
 801300e:	d302      	bcc.n	8013016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013010:	2301      	movs	r3, #1
 8013012:	617b      	str	r3, [r7, #20]
 8013014:	e01b      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013016:	4b10      	ldr	r3, [pc, #64]	; (8013058 <prvInsertTimerInActiveList+0x7c>)
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	3304      	adds	r3, #4
 801301e:	4619      	mov	r1, r3
 8013020:	4610      	mov	r0, r2
 8013022:	f7fd fe36 	bl	8010c92 <vListInsert>
 8013026:	e012      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	429a      	cmp	r2, r3
 801302e:	d206      	bcs.n	801303e <prvInsertTimerInActiveList+0x62>
 8013030:	68ba      	ldr	r2, [r7, #8]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d302      	bcc.n	801303e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013038:	2301      	movs	r3, #1
 801303a:	617b      	str	r3, [r7, #20]
 801303c:	e007      	b.n	801304e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801303e:	4b07      	ldr	r3, [pc, #28]	; (801305c <prvInsertTimerInActiveList+0x80>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	3304      	adds	r3, #4
 8013046:	4619      	mov	r1, r3
 8013048:	4610      	mov	r0, r2
 801304a:	f7fd fe22 	bl	8010c92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801304e:	697b      	ldr	r3, [r7, #20]
}
 8013050:	4618      	mov	r0, r3
 8013052:	3718      	adds	r7, #24
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	20001058 	.word	0x20001058
 801305c:	20001054 	.word	0x20001054

08013060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b08e      	sub	sp, #56	; 0x38
 8013064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013066:	e0c6      	b.n	80131f6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	da17      	bge.n	801309e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801306e:	1d3b      	adds	r3, r7, #4
 8013070:	3304      	adds	r3, #4
 8013072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013076:	2b00      	cmp	r3, #0
 8013078:	d109      	bne.n	801308e <prvProcessReceivedCommands+0x2e>
 801307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307e:	f383 8811 	msr	BASEPRI, r3
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	f3bf 8f4f 	dsb	sy
 801308a:	61fb      	str	r3, [r7, #28]
 801308c:	e7fe      	b.n	801308c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013094:	6850      	ldr	r0, [r2, #4]
 8013096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013098:	6892      	ldr	r2, [r2, #8]
 801309a:	4611      	mov	r1, r2
 801309c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f2c0 80a7 	blt.w	80131f4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d004      	beq.n	80130bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b4:	3304      	adds	r3, #4
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fd fe24 	bl	8010d04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130bc:	463b      	mov	r3, r7
 80130be:	4618      	mov	r0, r3
 80130c0:	f7ff ff6c 	bl	8012f9c <prvSampleTimeNow>
 80130c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b09      	cmp	r3, #9
 80130ca:	f200 8094 	bhi.w	80131f6 <prvProcessReceivedCommands+0x196>
 80130ce:	a201      	add	r2, pc, #4	; (adr r2, 80130d4 <prvProcessReceivedCommands+0x74>)
 80130d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d4:	080130fd 	.word	0x080130fd
 80130d8:	080130fd 	.word	0x080130fd
 80130dc:	080130fd 	.word	0x080130fd
 80130e0:	0801316f 	.word	0x0801316f
 80130e4:	08013183 	.word	0x08013183
 80130e8:	080131cb 	.word	0x080131cb
 80130ec:	080130fd 	.word	0x080130fd
 80130f0:	080130fd 	.word	0x080130fd
 80130f4:	0801316f 	.word	0x0801316f
 80130f8:	08013183 	.word	0x08013183
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013102:	f043 0301 	orr.w	r3, r3, #1
 8013106:	b2da      	uxtb	r2, r3
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801310e:	68ba      	ldr	r2, [r7, #8]
 8013110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	18d1      	adds	r1, r2, r3
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801311a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801311c:	f7ff ff5e 	bl	8012fdc <prvInsertTimerInActiveList>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d067      	beq.n	80131f6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013128:	6a1b      	ldr	r3, [r3, #32]
 801312a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801312c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013134:	f003 0304 	and.w	r3, r3, #4
 8013138:	2b00      	cmp	r3, #0
 801313a:	d05c      	beq.n	80131f6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801313c:	68ba      	ldr	r2, [r7, #8]
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	441a      	add	r2, r3
 8013144:	2300      	movs	r3, #0
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	2300      	movs	r3, #0
 801314a:	2100      	movs	r1, #0
 801314c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801314e:	f7ff fe09 	bl	8012d64 <xTimerGenericCommand>
 8013152:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d14d      	bne.n	80131f6 <prvProcessReceivedCommands+0x196>
 801315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	61bb      	str	r3, [r7, #24]
 801316c:	e7fe      	b.n	801316c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013174:	f023 0301 	bic.w	r3, r3, #1
 8013178:	b2da      	uxtb	r2, r3
 801317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013180:	e039      	b.n	80131f6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013188:	f043 0301 	orr.w	r3, r3, #1
 801318c:	b2da      	uxtb	r2, r3
 801318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013198:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	699b      	ldr	r3, [r3, #24]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d109      	bne.n	80131b6 <prvProcessReceivedCommands+0x156>
 80131a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a6:	f383 8811 	msr	BASEPRI, r3
 80131aa:	f3bf 8f6f 	isb	sy
 80131ae:	f3bf 8f4f 	dsb	sy
 80131b2:	617b      	str	r3, [r7, #20]
 80131b4:	e7fe      	b.n	80131b4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b8:	699a      	ldr	r2, [r3, #24]
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	18d1      	adds	r1, r2, r3
 80131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131c4:	f7ff ff0a 	bl	8012fdc <prvInsertTimerInActiveList>
					break;
 80131c8:	e015      	b.n	80131f6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d0:	f003 0302 	and.w	r3, r3, #2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d103      	bne.n	80131e0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80131d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131da:	f000 fbc3 	bl	8013964 <vPortFree>
 80131de:	e00a      	b.n	80131f6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e6:	f023 0301 	bic.w	r3, r3, #1
 80131ea:	b2da      	uxtb	r2, r3
 80131ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80131f2:	e000      	b.n	80131f6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80131f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131f6:	4b07      	ldr	r3, [pc, #28]	; (8013214 <prvProcessReceivedCommands+0x1b4>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	1d39      	adds	r1, r7, #4
 80131fc:	2200      	movs	r2, #0
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe f932 	bl	8011468 <xQueueReceive>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	f47f af2e 	bne.w	8013068 <prvProcessReceivedCommands+0x8>
	}
}
 801320c:	bf00      	nop
 801320e:	3730      	adds	r7, #48	; 0x30
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	2000105c 	.word	0x2000105c

08013218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b088      	sub	sp, #32
 801321c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801321e:	e047      	b.n	80132b0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013220:	4b2d      	ldr	r3, [pc, #180]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801322a:	4b2b      	ldr	r3, [pc, #172]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	68db      	ldr	r3, [r3, #12]
 8013232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	3304      	adds	r3, #4
 8013238:	4618      	mov	r0, r3
 801323a:	f7fd fd63 	bl	8010d04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6a1b      	ldr	r3, [r3, #32]
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801324c:	f003 0304 	and.w	r3, r3, #4
 8013250:	2b00      	cmp	r3, #0
 8013252:	d02d      	beq.n	80132b0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	699b      	ldr	r3, [r3, #24]
 8013258:	693a      	ldr	r2, [r7, #16]
 801325a:	4413      	add	r3, r2
 801325c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	429a      	cmp	r2, r3
 8013264:	d90e      	bls.n	8013284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013272:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	3304      	adds	r3, #4
 801327a:	4619      	mov	r1, r3
 801327c:	4610      	mov	r0, r2
 801327e:	f7fd fd08 	bl	8010c92 <vListInsert>
 8013282:	e015      	b.n	80132b0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013284:	2300      	movs	r3, #0
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	2300      	movs	r3, #0
 801328a:	693a      	ldr	r2, [r7, #16]
 801328c:	2100      	movs	r1, #0
 801328e:	68f8      	ldr	r0, [r7, #12]
 8013290:	f7ff fd68 	bl	8012d64 <xTimerGenericCommand>
 8013294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d109      	bne.n	80132b0 <prvSwitchTimerLists+0x98>
 801329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a0:	f383 8811 	msr	BASEPRI, r3
 80132a4:	f3bf 8f6f 	isb	sy
 80132a8:	f3bf 8f4f 	dsb	sy
 80132ac:	603b      	str	r3, [r7, #0]
 80132ae:	e7fe      	b.n	80132ae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132b0:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d1b2      	bne.n	8013220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132ba:	4b07      	ldr	r3, [pc, #28]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132c0:	4b06      	ldr	r3, [pc, #24]	; (80132dc <prvSwitchTimerLists+0xc4>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a04      	ldr	r2, [pc, #16]	; (80132d8 <prvSwitchTimerLists+0xc0>)
 80132c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132c8:	4a04      	ldr	r2, [pc, #16]	; (80132dc <prvSwitchTimerLists+0xc4>)
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	6013      	str	r3, [r2, #0]
}
 80132ce:	bf00      	nop
 80132d0:	3718      	adds	r7, #24
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	20001054 	.word	0x20001054
 80132dc:	20001058 	.word	0x20001058

080132e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132e6:	f000 f961 	bl	80135ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80132ea:	4b15      	ldr	r3, [pc, #84]	; (8013340 <prvCheckForValidListAndQueue+0x60>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d120      	bne.n	8013334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80132f2:	4814      	ldr	r0, [pc, #80]	; (8013344 <prvCheckForValidListAndQueue+0x64>)
 80132f4:	f7fd fc7c 	bl	8010bf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80132f8:	4813      	ldr	r0, [pc, #76]	; (8013348 <prvCheckForValidListAndQueue+0x68>)
 80132fa:	f7fd fc79 	bl	8010bf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80132fe:	4b13      	ldr	r3, [pc, #76]	; (801334c <prvCheckForValidListAndQueue+0x6c>)
 8013300:	4a10      	ldr	r2, [pc, #64]	; (8013344 <prvCheckForValidListAndQueue+0x64>)
 8013302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013304:	4b12      	ldr	r3, [pc, #72]	; (8013350 <prvCheckForValidListAndQueue+0x70>)
 8013306:	4a10      	ldr	r2, [pc, #64]	; (8013348 <prvCheckForValidListAndQueue+0x68>)
 8013308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801330a:	2300      	movs	r3, #0
 801330c:	9300      	str	r3, [sp, #0]
 801330e:	4b11      	ldr	r3, [pc, #68]	; (8013354 <prvCheckForValidListAndQueue+0x74>)
 8013310:	4a11      	ldr	r2, [pc, #68]	; (8013358 <prvCheckForValidListAndQueue+0x78>)
 8013312:	2110      	movs	r1, #16
 8013314:	200a      	movs	r0, #10
 8013316:	f7fd fd87 	bl	8010e28 <xQueueGenericCreateStatic>
 801331a:	4602      	mov	r2, r0
 801331c:	4b08      	ldr	r3, [pc, #32]	; (8013340 <prvCheckForValidListAndQueue+0x60>)
 801331e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013320:	4b07      	ldr	r3, [pc, #28]	; (8013340 <prvCheckForValidListAndQueue+0x60>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d005      	beq.n	8013334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013328:	4b05      	ldr	r3, [pc, #20]	; (8013340 <prvCheckForValidListAndQueue+0x60>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	490b      	ldr	r1, [pc, #44]	; (801335c <prvCheckForValidListAndQueue+0x7c>)
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe fba6 	bl	8011a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013334:	f000 f968 	bl	8013608 <vPortExitCritical>
}
 8013338:	bf00      	nop
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	2000105c 	.word	0x2000105c
 8013344:	2000102c 	.word	0x2000102c
 8013348:	20001040 	.word	0x20001040
 801334c:	20001054 	.word	0x20001054
 8013350:	20001058 	.word	0x20001058
 8013354:	20001108 	.word	0x20001108
 8013358:	20001068 	.word	0x20001068
 801335c:	08016a64 	.word	0x08016a64

08013360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	3b04      	subs	r3, #4
 8013370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	3b04      	subs	r3, #4
 801337e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	f023 0201 	bic.w	r2, r3, #1
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	3b04      	subs	r3, #4
 801338e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013390:	4a0c      	ldr	r2, [pc, #48]	; (80133c4 <pxPortInitialiseStack+0x64>)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	3b14      	subs	r3, #20
 801339a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	3b04      	subs	r3, #4
 80133a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	f06f 0202 	mvn.w	r2, #2
 80133ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	3b20      	subs	r3, #32
 80133b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80133b6:	68fb      	ldr	r3, [r7, #12]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3714      	adds	r7, #20
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr
 80133c4:	080133c9 	.word	0x080133c9

080133c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80133c8:	b480      	push	{r7}
 80133ca:	b085      	sub	sp, #20
 80133cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80133ce:	2300      	movs	r3, #0
 80133d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80133d2:	4b11      	ldr	r3, [pc, #68]	; (8013418 <prvTaskExitError+0x50>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133da:	d009      	beq.n	80133f0 <prvTaskExitError+0x28>
 80133dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e0:	f383 8811 	msr	BASEPRI, r3
 80133e4:	f3bf 8f6f 	isb	sy
 80133e8:	f3bf 8f4f 	dsb	sy
 80133ec:	60fb      	str	r3, [r7, #12]
 80133ee:	e7fe      	b.n	80133ee <prvTaskExitError+0x26>
 80133f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f4:	f383 8811 	msr	BASEPRI, r3
 80133f8:	f3bf 8f6f 	isb	sy
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013402:	bf00      	nop
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d0fc      	beq.n	8013404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801340a:	bf00      	nop
 801340c:	3714      	adds	r7, #20
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	20000168 	.word	0x20000168
 801341c:	00000000 	.word	0x00000000

08013420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013420:	4b07      	ldr	r3, [pc, #28]	; (8013440 <pxCurrentTCBConst2>)
 8013422:	6819      	ldr	r1, [r3, #0]
 8013424:	6808      	ldr	r0, [r1, #0]
 8013426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342a:	f380 8809 	msr	PSP, r0
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f04f 0000 	mov.w	r0, #0
 8013436:	f380 8811 	msr	BASEPRI, r0
 801343a:	4770      	bx	lr
 801343c:	f3af 8000 	nop.w

08013440 <pxCurrentTCBConst2>:
 8013440:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013444:	bf00      	nop
 8013446:	bf00      	nop

08013448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013448:	4808      	ldr	r0, [pc, #32]	; (801346c <prvPortStartFirstTask+0x24>)
 801344a:	6800      	ldr	r0, [r0, #0]
 801344c:	6800      	ldr	r0, [r0, #0]
 801344e:	f380 8808 	msr	MSP, r0
 8013452:	f04f 0000 	mov.w	r0, #0
 8013456:	f380 8814 	msr	CONTROL, r0
 801345a:	b662      	cpsie	i
 801345c:	b661      	cpsie	f
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	df00      	svc	0
 8013468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801346a:	bf00      	nop
 801346c:	e000ed08 	.word	0xe000ed08

08013470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b086      	sub	sp, #24
 8013474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013476:	4b44      	ldr	r3, [pc, #272]	; (8013588 <xPortStartScheduler+0x118>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	4a44      	ldr	r2, [pc, #272]	; (801358c <xPortStartScheduler+0x11c>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d109      	bne.n	8013494 <xPortStartScheduler+0x24>
 8013480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	613b      	str	r3, [r7, #16]
 8013492:	e7fe      	b.n	8013492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013494:	4b3c      	ldr	r3, [pc, #240]	; (8013588 <xPortStartScheduler+0x118>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a3d      	ldr	r2, [pc, #244]	; (8013590 <xPortStartScheduler+0x120>)
 801349a:	4293      	cmp	r3, r2
 801349c:	d109      	bne.n	80134b2 <xPortStartScheduler+0x42>
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	60fb      	str	r3, [r7, #12]
 80134b0:	e7fe      	b.n	80134b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80134b2:	4b38      	ldr	r3, [pc, #224]	; (8013594 <xPortStartScheduler+0x124>)
 80134b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	22ff      	movs	r2, #255	; 0xff
 80134c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134cc:	78fb      	ldrb	r3, [r7, #3]
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80134d4:	b2da      	uxtb	r2, r3
 80134d6:	4b30      	ldr	r3, [pc, #192]	; (8013598 <xPortStartScheduler+0x128>)
 80134d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80134da:	4b30      	ldr	r3, [pc, #192]	; (801359c <xPortStartScheduler+0x12c>)
 80134dc:	2207      	movs	r2, #7
 80134de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134e0:	e009      	b.n	80134f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80134e2:	4b2e      	ldr	r3, [pc, #184]	; (801359c <xPortStartScheduler+0x12c>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	3b01      	subs	r3, #1
 80134e8:	4a2c      	ldr	r2, [pc, #176]	; (801359c <xPortStartScheduler+0x12c>)
 80134ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134ec:	78fb      	ldrb	r3, [r7, #3]
 80134ee:	b2db      	uxtb	r3, r3
 80134f0:	005b      	lsls	r3, r3, #1
 80134f2:	b2db      	uxtb	r3, r3
 80134f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134f6:	78fb      	ldrb	r3, [r7, #3]
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134fe:	2b80      	cmp	r3, #128	; 0x80
 8013500:	d0ef      	beq.n	80134e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013502:	4b26      	ldr	r3, [pc, #152]	; (801359c <xPortStartScheduler+0x12c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f1c3 0307 	rsb	r3, r3, #7
 801350a:	2b04      	cmp	r3, #4
 801350c:	d009      	beq.n	8013522 <xPortStartScheduler+0xb2>
 801350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013512:	f383 8811 	msr	BASEPRI, r3
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	60bb      	str	r3, [r7, #8]
 8013520:	e7fe      	b.n	8013520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013522:	4b1e      	ldr	r3, [pc, #120]	; (801359c <xPortStartScheduler+0x12c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	021b      	lsls	r3, r3, #8
 8013528:	4a1c      	ldr	r2, [pc, #112]	; (801359c <xPortStartScheduler+0x12c>)
 801352a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801352c:	4b1b      	ldr	r3, [pc, #108]	; (801359c <xPortStartScheduler+0x12c>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013534:	4a19      	ldr	r2, [pc, #100]	; (801359c <xPortStartScheduler+0x12c>)
 8013536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	b2da      	uxtb	r2, r3
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013540:	4b17      	ldr	r3, [pc, #92]	; (80135a0 <xPortStartScheduler+0x130>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4a16      	ldr	r2, [pc, #88]	; (80135a0 <xPortStartScheduler+0x130>)
 8013546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801354a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801354c:	4b14      	ldr	r3, [pc, #80]	; (80135a0 <xPortStartScheduler+0x130>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4a13      	ldr	r2, [pc, #76]	; (80135a0 <xPortStartScheduler+0x130>)
 8013552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013558:	f000 f8d6 	bl	8013708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801355c:	4b11      	ldr	r3, [pc, #68]	; (80135a4 <xPortStartScheduler+0x134>)
 801355e:	2200      	movs	r2, #0
 8013560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013562:	f000 f8f5 	bl	8013750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013566:	4b10      	ldr	r3, [pc, #64]	; (80135a8 <xPortStartScheduler+0x138>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	4a0f      	ldr	r2, [pc, #60]	; (80135a8 <xPortStartScheduler+0x138>)
 801356c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013572:	f7ff ff69 	bl	8013448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013576:	f7fe ff73 	bl	8012460 <vTaskSwitchContext>
	prvTaskExitError();
 801357a:	f7ff ff25 	bl	80133c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801357e:	2300      	movs	r3, #0
}
 8013580:	4618      	mov	r0, r3
 8013582:	3718      	adds	r7, #24
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}
 8013588:	e000ed00 	.word	0xe000ed00
 801358c:	410fc271 	.word	0x410fc271
 8013590:	410fc270 	.word	0x410fc270
 8013594:	e000e400 	.word	0xe000e400
 8013598:	20001158 	.word	0x20001158
 801359c:	2000115c 	.word	0x2000115c
 80135a0:	e000ed20 	.word	0xe000ed20
 80135a4:	20000168 	.word	0x20000168
 80135a8:	e000ef34 	.word	0xe000ef34

080135ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b6:	f383 8811 	msr	BASEPRI, r3
 80135ba:	f3bf 8f6f 	isb	sy
 80135be:	f3bf 8f4f 	dsb	sy
 80135c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80135c4:	4b0e      	ldr	r3, [pc, #56]	; (8013600 <vPortEnterCritical+0x54>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	3301      	adds	r3, #1
 80135ca:	4a0d      	ldr	r2, [pc, #52]	; (8013600 <vPortEnterCritical+0x54>)
 80135cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80135ce:	4b0c      	ldr	r3, [pc, #48]	; (8013600 <vPortEnterCritical+0x54>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d10e      	bne.n	80135f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80135d6:	4b0b      	ldr	r3, [pc, #44]	; (8013604 <vPortEnterCritical+0x58>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	b2db      	uxtb	r3, r3
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d009      	beq.n	80135f4 <vPortEnterCritical+0x48>
 80135e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	603b      	str	r3, [r7, #0]
 80135f2:	e7fe      	b.n	80135f2 <vPortEnterCritical+0x46>
	}
}
 80135f4:	bf00      	nop
 80135f6:	370c      	adds	r7, #12
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr
 8013600:	20000168 	.word	0x20000168
 8013604:	e000ed04 	.word	0xe000ed04

08013608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801360e:	4b11      	ldr	r3, [pc, #68]	; (8013654 <vPortExitCritical+0x4c>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d109      	bne.n	801362a <vPortExitCritical+0x22>
 8013616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361a:	f383 8811 	msr	BASEPRI, r3
 801361e:	f3bf 8f6f 	isb	sy
 8013622:	f3bf 8f4f 	dsb	sy
 8013626:	607b      	str	r3, [r7, #4]
 8013628:	e7fe      	b.n	8013628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801362a:	4b0a      	ldr	r3, [pc, #40]	; (8013654 <vPortExitCritical+0x4c>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	3b01      	subs	r3, #1
 8013630:	4a08      	ldr	r2, [pc, #32]	; (8013654 <vPortExitCritical+0x4c>)
 8013632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013634:	4b07      	ldr	r3, [pc, #28]	; (8013654 <vPortExitCritical+0x4c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d104      	bne.n	8013646 <vPortExitCritical+0x3e>
 801363c:	2300      	movs	r3, #0
 801363e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013646:	bf00      	nop
 8013648:	370c      	adds	r7, #12
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	20000168 	.word	0x20000168
	...

08013660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013660:	f3ef 8009 	mrs	r0, PSP
 8013664:	f3bf 8f6f 	isb	sy
 8013668:	4b15      	ldr	r3, [pc, #84]	; (80136c0 <pxCurrentTCBConst>)
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	f01e 0f10 	tst.w	lr, #16
 8013670:	bf08      	it	eq
 8013672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801367a:	6010      	str	r0, [r2, #0]
 801367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013684:	f380 8811 	msr	BASEPRI, r0
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f7fe fee6 	bl	8012460 <vTaskSwitchContext>
 8013694:	f04f 0000 	mov.w	r0, #0
 8013698:	f380 8811 	msr	BASEPRI, r0
 801369c:	bc09      	pop	{r0, r3}
 801369e:	6819      	ldr	r1, [r3, #0]
 80136a0:	6808      	ldr	r0, [r1, #0]
 80136a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a6:	f01e 0f10 	tst.w	lr, #16
 80136aa:	bf08      	it	eq
 80136ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80136b0:	f380 8809 	msr	PSP, r0
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	f3af 8000 	nop.w

080136c0 <pxCurrentTCBConst>:
 80136c0:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80136c4:	bf00      	nop
 80136c6:	bf00      	nop

080136c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80136e0:	f7fe fe06 	bl	80122f0 <xTaskIncrementTick>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d003      	beq.n	80136f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80136ea:	4b06      	ldr	r3, [pc, #24]	; (8013704 <SysTick_Handler+0x3c>)
 80136ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136f0:	601a      	str	r2, [r3, #0]
 80136f2:	2300      	movs	r3, #0
 80136f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80136fc:	bf00      	nop
 80136fe:	3708      	adds	r7, #8
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	e000ed04 	.word	0xe000ed04

08013708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013708:	b480      	push	{r7}
 801370a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801370c:	4b0b      	ldr	r3, [pc, #44]	; (801373c <vPortSetupTimerInterrupt+0x34>)
 801370e:	2200      	movs	r2, #0
 8013710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013712:	4b0b      	ldr	r3, [pc, #44]	; (8013740 <vPortSetupTimerInterrupt+0x38>)
 8013714:	2200      	movs	r2, #0
 8013716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013718:	4b0a      	ldr	r3, [pc, #40]	; (8013744 <vPortSetupTimerInterrupt+0x3c>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4a0a      	ldr	r2, [pc, #40]	; (8013748 <vPortSetupTimerInterrupt+0x40>)
 801371e:	fba2 2303 	umull	r2, r3, r2, r3
 8013722:	099b      	lsrs	r3, r3, #6
 8013724:	4a09      	ldr	r2, [pc, #36]	; (801374c <vPortSetupTimerInterrupt+0x44>)
 8013726:	3b01      	subs	r3, #1
 8013728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801372a:	4b04      	ldr	r3, [pc, #16]	; (801373c <vPortSetupTimerInterrupt+0x34>)
 801372c:	2207      	movs	r2, #7
 801372e:	601a      	str	r2, [r3, #0]
}
 8013730:	bf00      	nop
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
 801373a:	bf00      	nop
 801373c:	e000e010 	.word	0xe000e010
 8013740:	e000e018 	.word	0xe000e018
 8013744:	2000004c 	.word	0x2000004c
 8013748:	10624dd3 	.word	0x10624dd3
 801374c:	e000e014 	.word	0xe000e014

08013750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013760 <vPortEnableVFP+0x10>
 8013754:	6801      	ldr	r1, [r0, #0]
 8013756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801375a:	6001      	str	r1, [r0, #0]
 801375c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801375e:	bf00      	nop
 8013760:	e000ed88 	.word	0xe000ed88

08013764 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013764:	b480      	push	{r7}
 8013766:	b085      	sub	sp, #20
 8013768:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801376a:	f3ef 8305 	mrs	r3, IPSR
 801376e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2b0f      	cmp	r3, #15
 8013774:	d913      	bls.n	801379e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013776:	4a16      	ldr	r2, [pc, #88]	; (80137d0 <vPortValidateInterruptPriority+0x6c>)
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	4413      	add	r3, r2
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013780:	4b14      	ldr	r3, [pc, #80]	; (80137d4 <vPortValidateInterruptPriority+0x70>)
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	7afa      	ldrb	r2, [r7, #11]
 8013786:	429a      	cmp	r2, r3
 8013788:	d209      	bcs.n	801379e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378e:	f383 8811 	msr	BASEPRI, r3
 8013792:	f3bf 8f6f 	isb	sy
 8013796:	f3bf 8f4f 	dsb	sy
 801379a:	607b      	str	r3, [r7, #4]
 801379c:	e7fe      	b.n	801379c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801379e:	4b0e      	ldr	r3, [pc, #56]	; (80137d8 <vPortValidateInterruptPriority+0x74>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80137a6:	4b0d      	ldr	r3, [pc, #52]	; (80137dc <vPortValidateInterruptPriority+0x78>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d909      	bls.n	80137c2 <vPortValidateInterruptPriority+0x5e>
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	603b      	str	r3, [r7, #0]
 80137c0:	e7fe      	b.n	80137c0 <vPortValidateInterruptPriority+0x5c>
	}
 80137c2:	bf00      	nop
 80137c4:	3714      	adds	r7, #20
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	e000e3f0 	.word	0xe000e3f0
 80137d4:	20001158 	.word	0x20001158
 80137d8:	e000ed0c 	.word	0xe000ed0c
 80137dc:	2000115c 	.word	0x2000115c

080137e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b08a      	sub	sp, #40	; 0x28
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80137e8:	2300      	movs	r3, #0
 80137ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80137ec:	f7fe fcc6 	bl	801217c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80137f0:	4b57      	ldr	r3, [pc, #348]	; (8013950 <pvPortMalloc+0x170>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d101      	bne.n	80137fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80137f8:	f000 f90c 	bl	8013a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80137fc:	4b55      	ldr	r3, [pc, #340]	; (8013954 <pvPortMalloc+0x174>)
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	4013      	ands	r3, r2
 8013804:	2b00      	cmp	r3, #0
 8013806:	f040 808c 	bne.w	8013922 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d01c      	beq.n	801384a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013810:	2208      	movs	r2, #8
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4413      	add	r3, r2
 8013816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f003 0307 	and.w	r3, r3, #7
 801381e:	2b00      	cmp	r3, #0
 8013820:	d013      	beq.n	801384a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f023 0307 	bic.w	r3, r3, #7
 8013828:	3308      	adds	r3, #8
 801382a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f003 0307 	and.w	r3, r3, #7
 8013832:	2b00      	cmp	r3, #0
 8013834:	d009      	beq.n	801384a <pvPortMalloc+0x6a>
 8013836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383a:	f383 8811 	msr	BASEPRI, r3
 801383e:	f3bf 8f6f 	isb	sy
 8013842:	f3bf 8f4f 	dsb	sy
 8013846:	617b      	str	r3, [r7, #20]
 8013848:	e7fe      	b.n	8013848 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d068      	beq.n	8013922 <pvPortMalloc+0x142>
 8013850:	4b41      	ldr	r3, [pc, #260]	; (8013958 <pvPortMalloc+0x178>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	429a      	cmp	r2, r3
 8013858:	d863      	bhi.n	8013922 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801385a:	4b40      	ldr	r3, [pc, #256]	; (801395c <pvPortMalloc+0x17c>)
 801385c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801385e:	4b3f      	ldr	r3, [pc, #252]	; (801395c <pvPortMalloc+0x17c>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013864:	e004      	b.n	8013870 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	429a      	cmp	r2, r3
 8013878:	d903      	bls.n	8013882 <pvPortMalloc+0xa2>
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1f1      	bne.n	8013866 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013882:	4b33      	ldr	r3, [pc, #204]	; (8013950 <pvPortMalloc+0x170>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013888:	429a      	cmp	r2, r3
 801388a:	d04a      	beq.n	8013922 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801388c:	6a3b      	ldr	r3, [r7, #32]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	2208      	movs	r2, #8
 8013892:	4413      	add	r3, r2
 8013894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	6a3b      	ldr	r3, [r7, #32]
 801389c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a0:	685a      	ldr	r2, [r3, #4]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	1ad2      	subs	r2, r2, r3
 80138a6:	2308      	movs	r3, #8
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d91e      	bls.n	80138ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80138ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	4413      	add	r3, r2
 80138b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	f003 0307 	and.w	r3, r3, #7
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d009      	beq.n	80138d4 <pvPortMalloc+0xf4>
 80138c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c4:	f383 8811 	msr	BASEPRI, r3
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	613b      	str	r3, [r7, #16]
 80138d2:	e7fe      	b.n	80138d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80138d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d6:	685a      	ldr	r2, [r3, #4]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	1ad2      	subs	r2, r2, r3
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80138e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80138e6:	69b8      	ldr	r0, [r7, #24]
 80138e8:	f000 f8f6 	bl	8013ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80138ec:	4b1a      	ldr	r3, [pc, #104]	; (8013958 <pvPortMalloc+0x178>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	4a18      	ldr	r2, [pc, #96]	; (8013958 <pvPortMalloc+0x178>)
 80138f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80138fa:	4b17      	ldr	r3, [pc, #92]	; (8013958 <pvPortMalloc+0x178>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	4b18      	ldr	r3, [pc, #96]	; (8013960 <pvPortMalloc+0x180>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d203      	bcs.n	801390e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013906:	4b14      	ldr	r3, [pc, #80]	; (8013958 <pvPortMalloc+0x178>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a15      	ldr	r2, [pc, #84]	; (8013960 <pvPortMalloc+0x180>)
 801390c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013910:	685a      	ldr	r2, [r3, #4]
 8013912:	4b10      	ldr	r3, [pc, #64]	; (8013954 <pvPortMalloc+0x174>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	431a      	orrs	r2, r3
 8013918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391e:	2200      	movs	r2, #0
 8013920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013922:	f7fe fc39 	bl	8012198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	f003 0307 	and.w	r3, r3, #7
 801392c:	2b00      	cmp	r3, #0
 801392e:	d009      	beq.n	8013944 <pvPortMalloc+0x164>
 8013930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013934:	f383 8811 	msr	BASEPRI, r3
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	60fb      	str	r3, [r7, #12]
 8013942:	e7fe      	b.n	8013942 <pvPortMalloc+0x162>
	return pvReturn;
 8013944:	69fb      	ldr	r3, [r7, #28]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3728      	adds	r7, #40	; 0x28
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	2000d4b8 	.word	0x2000d4b8
 8013954:	2000d4c4 	.word	0x2000d4c4
 8013958:	2000d4bc 	.word	0x2000d4bc
 801395c:	2000d4b0 	.word	0x2000d4b0
 8013960:	2000d4c0 	.word	0x2000d4c0

08013964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b086      	sub	sp, #24
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d046      	beq.n	8013a04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013976:	2308      	movs	r3, #8
 8013978:	425b      	negs	r3, r3
 801397a:	697a      	ldr	r2, [r7, #20]
 801397c:	4413      	add	r3, r2
 801397e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	685a      	ldr	r2, [r3, #4]
 8013988:	4b20      	ldr	r3, [pc, #128]	; (8013a0c <vPortFree+0xa8>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	4013      	ands	r3, r2
 801398e:	2b00      	cmp	r3, #0
 8013990:	d109      	bne.n	80139a6 <vPortFree+0x42>
 8013992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013996:	f383 8811 	msr	BASEPRI, r3
 801399a:	f3bf 8f6f 	isb	sy
 801399e:	f3bf 8f4f 	dsb	sy
 80139a2:	60fb      	str	r3, [r7, #12]
 80139a4:	e7fe      	b.n	80139a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d009      	beq.n	80139c2 <vPortFree+0x5e>
 80139ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	60bb      	str	r3, [r7, #8]
 80139c0:	e7fe      	b.n	80139c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	685a      	ldr	r2, [r3, #4]
 80139c6:	4b11      	ldr	r3, [pc, #68]	; (8013a0c <vPortFree+0xa8>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	4013      	ands	r3, r2
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d019      	beq.n	8013a04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d115      	bne.n	8013a04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	4b0b      	ldr	r3, [pc, #44]	; (8013a0c <vPortFree+0xa8>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	43db      	mvns	r3, r3
 80139e2:	401a      	ands	r2, r3
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80139e8:	f7fe fbc8 	bl	801217c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	685a      	ldr	r2, [r3, #4]
 80139f0:	4b07      	ldr	r3, [pc, #28]	; (8013a10 <vPortFree+0xac>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4413      	add	r3, r2
 80139f6:	4a06      	ldr	r2, [pc, #24]	; (8013a10 <vPortFree+0xac>)
 80139f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80139fa:	6938      	ldr	r0, [r7, #16]
 80139fc:	f000 f86c 	bl	8013ad8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013a00:	f7fe fbca 	bl	8012198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013a04:	bf00      	nop
 8013a06:	3718      	adds	r7, #24
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	2000d4c4 	.word	0x2000d4c4
 8013a10:	2000d4bc 	.word	0x2000d4bc

08013a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013a1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013a20:	4b27      	ldr	r3, [pc, #156]	; (8013ac0 <prvHeapInit+0xac>)
 8013a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	f003 0307 	and.w	r3, r3, #7
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00c      	beq.n	8013a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	3307      	adds	r3, #7
 8013a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f023 0307 	bic.w	r3, r3, #7
 8013a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	4a1f      	ldr	r2, [pc, #124]	; (8013ac0 <prvHeapInit+0xac>)
 8013a44:	4413      	add	r3, r2
 8013a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013a4c:	4a1d      	ldr	r2, [pc, #116]	; (8013ac4 <prvHeapInit+0xb0>)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013a52:	4b1c      	ldr	r3, [pc, #112]	; (8013ac4 <prvHeapInit+0xb0>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013a60:	2208      	movs	r2, #8
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	1a9b      	subs	r3, r3, r2
 8013a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f023 0307 	bic.w	r3, r3, #7
 8013a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	4a15      	ldr	r2, [pc, #84]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013a76:	4b14      	ldr	r3, [pc, #80]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013a7e:	4b12      	ldr	r3, [pc, #72]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2200      	movs	r2, #0
 8013a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	1ad2      	subs	r2, r2, r3
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013a94:	4b0c      	ldr	r3, [pc, #48]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	4a0a      	ldr	r2, [pc, #40]	; (8013acc <prvHeapInit+0xb8>)
 8013aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	4a09      	ldr	r2, [pc, #36]	; (8013ad0 <prvHeapInit+0xbc>)
 8013aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013aac:	4b09      	ldr	r3, [pc, #36]	; (8013ad4 <prvHeapInit+0xc0>)
 8013aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013ab2:	601a      	str	r2, [r3, #0]
}
 8013ab4:	bf00      	nop
 8013ab6:	3714      	adds	r7, #20
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr
 8013ac0:	20001160 	.word	0x20001160
 8013ac4:	2000d4b0 	.word	0x2000d4b0
 8013ac8:	2000d4b8 	.word	0x2000d4b8
 8013acc:	2000d4c0 	.word	0x2000d4c0
 8013ad0:	2000d4bc 	.word	0x2000d4bc
 8013ad4:	2000d4c4 	.word	0x2000d4c4

08013ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ae0:	4b28      	ldr	r3, [pc, #160]	; (8013b84 <prvInsertBlockIntoFreeList+0xac>)
 8013ae2:	60fb      	str	r3, [r7, #12]
 8013ae4:	e002      	b.n	8013aec <prvInsertBlockIntoFreeList+0x14>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	60fb      	str	r3, [r7, #12]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d8f7      	bhi.n	8013ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	4413      	add	r3, r2
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d108      	bne.n	8013b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	441a      	add	r2, r3
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	68ba      	ldr	r2, [r7, #8]
 8013b24:	441a      	add	r2, r3
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d118      	bne.n	8013b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	4b15      	ldr	r3, [pc, #84]	; (8013b88 <prvInsertBlockIntoFreeList+0xb0>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d00d      	beq.n	8013b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	685a      	ldr	r2, [r3, #4]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	441a      	add	r2, r3
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	601a      	str	r2, [r3, #0]
 8013b54:	e008      	b.n	8013b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013b56:	4b0c      	ldr	r3, [pc, #48]	; (8013b88 <prvInsertBlockIntoFreeList+0xb0>)
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	e003      	b.n	8013b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d002      	beq.n	8013b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b76:	bf00      	nop
 8013b78:	3714      	adds	r7, #20
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	2000d4b0 	.word	0x2000d4b0
 8013b88:	2000d4b8 	.word	0x2000d4b8

08013b8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013b90:	2200      	movs	r2, #0
 8013b92:	4912      	ldr	r1, [pc, #72]	; (8013bdc <MX_USB_DEVICE_Init+0x50>)
 8013b94:	4812      	ldr	r0, [pc, #72]	; (8013be0 <MX_USB_DEVICE_Init+0x54>)
 8013b96:	f7fb fdb8 	bl	800f70a <USBD_Init>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d001      	beq.n	8013ba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013ba0:	f7ef fcde 	bl	8003560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013ba4:	490f      	ldr	r1, [pc, #60]	; (8013be4 <MX_USB_DEVICE_Init+0x58>)
 8013ba6:	480e      	ldr	r0, [pc, #56]	; (8013be0 <MX_USB_DEVICE_Init+0x54>)
 8013ba8:	f7fb fdda 	bl	800f760 <USBD_RegisterClass>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013bb2:	f7ef fcd5 	bl	8003560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013bb6:	490c      	ldr	r1, [pc, #48]	; (8013be8 <MX_USB_DEVICE_Init+0x5c>)
 8013bb8:	4809      	ldr	r0, [pc, #36]	; (8013be0 <MX_USB_DEVICE_Init+0x54>)
 8013bba:	f7fb fd37 	bl	800f62c <USBD_CDC_RegisterInterface>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d001      	beq.n	8013bc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013bc4:	f7ef fccc 	bl	8003560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013bc8:	4805      	ldr	r0, [pc, #20]	; (8013be0 <MX_USB_DEVICE_Init+0x54>)
 8013bca:	f7fb fde3 	bl	800f794 <USBD_Start>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d001      	beq.n	8013bd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013bd4:	f7ef fcc4 	bl	8003560 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013bd8:	bf00      	nop
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	2000017c 	.word	0x2000017c
 8013be0:	2000ebf4 	.word	0x2000ebf4
 8013be4:	20000064 	.word	0x20000064
 8013be8:	2000016c 	.word	0x2000016c

08013bec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	4905      	ldr	r1, [pc, #20]	; (8013c08 <CDC_Init_FS+0x1c>)
 8013bf4:	4805      	ldr	r0, [pc, #20]	; (8013c0c <CDC_Init_FS+0x20>)
 8013bf6:	f7fb fd30 	bl	800f65a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013bfa:	4905      	ldr	r1, [pc, #20]	; (8013c10 <CDC_Init_FS+0x24>)
 8013bfc:	4803      	ldr	r0, [pc, #12]	; (8013c0c <CDC_Init_FS+0x20>)
 8013bfe:	f7fb fd46 	bl	800f68e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013c02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	2000f6b8 	.word	0x2000f6b8
 8013c0c:	2000ebf4 	.word	0x2000ebf4
 8013c10:	2000eeb8 	.word	0x2000eeb8

08013c14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013c14:	b480      	push	{r7}
 8013c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013c18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	6039      	str	r1, [r7, #0]
 8013c2e:	71fb      	strb	r3, [r7, #7]
 8013c30:	4613      	mov	r3, r2
 8013c32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013c34:	79fb      	ldrb	r3, [r7, #7]
 8013c36:	2b23      	cmp	r3, #35	; 0x23
 8013c38:	d84a      	bhi.n	8013cd0 <CDC_Control_FS+0xac>
 8013c3a:	a201      	add	r2, pc, #4	; (adr r2, 8013c40 <CDC_Control_FS+0x1c>)
 8013c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c40:	08013cd1 	.word	0x08013cd1
 8013c44:	08013cd1 	.word	0x08013cd1
 8013c48:	08013cd1 	.word	0x08013cd1
 8013c4c:	08013cd1 	.word	0x08013cd1
 8013c50:	08013cd1 	.word	0x08013cd1
 8013c54:	08013cd1 	.word	0x08013cd1
 8013c58:	08013cd1 	.word	0x08013cd1
 8013c5c:	08013cd1 	.word	0x08013cd1
 8013c60:	08013cd1 	.word	0x08013cd1
 8013c64:	08013cd1 	.word	0x08013cd1
 8013c68:	08013cd1 	.word	0x08013cd1
 8013c6c:	08013cd1 	.word	0x08013cd1
 8013c70:	08013cd1 	.word	0x08013cd1
 8013c74:	08013cd1 	.word	0x08013cd1
 8013c78:	08013cd1 	.word	0x08013cd1
 8013c7c:	08013cd1 	.word	0x08013cd1
 8013c80:	08013cd1 	.word	0x08013cd1
 8013c84:	08013cd1 	.word	0x08013cd1
 8013c88:	08013cd1 	.word	0x08013cd1
 8013c8c:	08013cd1 	.word	0x08013cd1
 8013c90:	08013cd1 	.word	0x08013cd1
 8013c94:	08013cd1 	.word	0x08013cd1
 8013c98:	08013cd1 	.word	0x08013cd1
 8013c9c:	08013cd1 	.word	0x08013cd1
 8013ca0:	08013cd1 	.word	0x08013cd1
 8013ca4:	08013cd1 	.word	0x08013cd1
 8013ca8:	08013cd1 	.word	0x08013cd1
 8013cac:	08013cd1 	.word	0x08013cd1
 8013cb0:	08013cd1 	.word	0x08013cd1
 8013cb4:	08013cd1 	.word	0x08013cd1
 8013cb8:	08013cd1 	.word	0x08013cd1
 8013cbc:	08013cd1 	.word	0x08013cd1
 8013cc0:	08013cd1 	.word	0x08013cd1
 8013cc4:	08013cd1 	.word	0x08013cd1
 8013cc8:	08013cd1 	.word	0x08013cd1
 8013ccc:	08013cd1 	.word	0x08013cd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013cd0:	bf00      	nop
  }

  return (USBD_OK);
 8013cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	370c      	adds	r7, #12
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cde:	4770      	bx	lr

08013ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	4805      	ldr	r0, [pc, #20]	; (8013d04 <CDC_Receive_FS+0x24>)
 8013cee:	f7fb fcce 	bl	800f68e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013cf2:	4804      	ldr	r0, [pc, #16]	; (8013d04 <CDC_Receive_FS+0x24>)
 8013cf4:	f7fb fcdf 	bl	800f6b6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013cf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3708      	adds	r7, #8
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	2000ebf4 	.word	0x2000ebf4

08013d08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	6039      	str	r1, [r7, #0]
 8013d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	2212      	movs	r2, #18
 8013d18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013d1a:	4b03      	ldr	r3, [pc, #12]	; (8013d28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	370c      	adds	r7, #12
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr
 8013d28:	2000019c 	.word	0x2000019c

08013d2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	6039      	str	r1, [r7, #0]
 8013d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	2204      	movs	r2, #4
 8013d3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013d3e:	4b03      	ldr	r3, [pc, #12]	; (8013d4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	370c      	adds	r7, #12
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr
 8013d4c:	200001bc 	.word	0x200001bc

08013d50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	4603      	mov	r3, r0
 8013d58:	6039      	str	r1, [r7, #0]
 8013d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d5c:	79fb      	ldrb	r3, [r7, #7]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d105      	bne.n	8013d6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d62:	683a      	ldr	r2, [r7, #0]
 8013d64:	4907      	ldr	r1, [pc, #28]	; (8013d84 <USBD_FS_ProductStrDescriptor+0x34>)
 8013d66:	4808      	ldr	r0, [pc, #32]	; (8013d88 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d68:	f7fc fcea 	bl	8010740 <USBD_GetString>
 8013d6c:	e004      	b.n	8013d78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013d6e:	683a      	ldr	r2, [r7, #0]
 8013d70:	4904      	ldr	r1, [pc, #16]	; (8013d84 <USBD_FS_ProductStrDescriptor+0x34>)
 8013d72:	4805      	ldr	r0, [pc, #20]	; (8013d88 <USBD_FS_ProductStrDescriptor+0x38>)
 8013d74:	f7fc fce4 	bl	8010740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d78:	4b02      	ldr	r3, [pc, #8]	; (8013d84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3708      	adds	r7, #8
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	2000feb8 	.word	0x2000feb8
 8013d88:	08016a6c 	.word	0x08016a6c

08013d8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	6039      	str	r1, [r7, #0]
 8013d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	4904      	ldr	r1, [pc, #16]	; (8013dac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013d9c:	4804      	ldr	r0, [pc, #16]	; (8013db0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013d9e:	f7fc fccf 	bl	8010740 <USBD_GetString>
  return USBD_StrDesc;
 8013da2:	4b02      	ldr	r3, [pc, #8]	; (8013dac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	2000feb8 	.word	0x2000feb8
 8013db0:	08016a84 	.word	0x08016a84

08013db4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	4603      	mov	r3, r0
 8013dbc:	6039      	str	r1, [r7, #0]
 8013dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	221a      	movs	r2, #26
 8013dc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013dc6:	f000 f855 	bl	8013e74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013dca:	4b02      	ldr	r3, [pc, #8]	; (8013dd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	200001c0 	.word	0x200001c0

08013dd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4603      	mov	r3, r0
 8013de0:	6039      	str	r1, [r7, #0]
 8013de2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013de4:	79fb      	ldrb	r3, [r7, #7]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d105      	bne.n	8013df6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	4907      	ldr	r1, [pc, #28]	; (8013e0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8013dee:	4808      	ldr	r0, [pc, #32]	; (8013e10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013df0:	f7fc fca6 	bl	8010740 <USBD_GetString>
 8013df4:	e004      	b.n	8013e00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013df6:	683a      	ldr	r2, [r7, #0]
 8013df8:	4904      	ldr	r1, [pc, #16]	; (8013e0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8013dfa:	4805      	ldr	r0, [pc, #20]	; (8013e10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013dfc:	f7fc fca0 	bl	8010740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e00:	4b02      	ldr	r3, [pc, #8]	; (8013e0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3708      	adds	r7, #8
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	2000feb8 	.word	0x2000feb8
 8013e10:	08016a98 	.word	0x08016a98

08013e14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	6039      	str	r1, [r7, #0]
 8013e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013e20:	79fb      	ldrb	r3, [r7, #7]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d105      	bne.n	8013e32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013e26:	683a      	ldr	r2, [r7, #0]
 8013e28:	4907      	ldr	r1, [pc, #28]	; (8013e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013e2a:	4808      	ldr	r0, [pc, #32]	; (8013e4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013e2c:	f7fc fc88 	bl	8010740 <USBD_GetString>
 8013e30:	e004      	b.n	8013e3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	4904      	ldr	r1, [pc, #16]	; (8013e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013e36:	4805      	ldr	r0, [pc, #20]	; (8013e4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013e38:	f7fc fc82 	bl	8010740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e3c:	4b02      	ldr	r3, [pc, #8]	; (8013e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	2000feb8 	.word	0x2000feb8
 8013e4c:	08016aa4 	.word	0x08016aa4

08013e50 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	4603      	mov	r3, r0
 8013e58:	6039      	str	r1, [r7, #0]
 8013e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	220c      	movs	r2, #12
 8013e60:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013e62:	4b03      	ldr	r3, [pc, #12]	; (8013e70 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr
 8013e70:	200001b0 	.word	0x200001b0

08013e74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013e7a:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <Get_SerialNum+0x44>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013e80:	4b0e      	ldr	r3, [pc, #56]	; (8013ebc <Get_SerialNum+0x48>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013e86:	4b0e      	ldr	r3, [pc, #56]	; (8013ec0 <Get_SerialNum+0x4c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013e8c:	68fa      	ldr	r2, [r7, #12]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4413      	add	r3, r2
 8013e92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d009      	beq.n	8013eae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013e9a:	2208      	movs	r2, #8
 8013e9c:	4909      	ldr	r1, [pc, #36]	; (8013ec4 <Get_SerialNum+0x50>)
 8013e9e:	68f8      	ldr	r0, [r7, #12]
 8013ea0:	f000 f814 	bl	8013ecc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013ea4:	2204      	movs	r2, #4
 8013ea6:	4908      	ldr	r1, [pc, #32]	; (8013ec8 <Get_SerialNum+0x54>)
 8013ea8:	68b8      	ldr	r0, [r7, #8]
 8013eaa:	f000 f80f 	bl	8013ecc <IntToUnicode>
  }
}
 8013eae:	bf00      	nop
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	1fff7590 	.word	0x1fff7590
 8013ebc:	1fff7594 	.word	0x1fff7594
 8013ec0:	1fff7598 	.word	0x1fff7598
 8013ec4:	200001c2 	.word	0x200001c2
 8013ec8:	200001d2 	.word	0x200001d2

08013ecc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b087      	sub	sp, #28
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013ede:	2300      	movs	r3, #0
 8013ee0:	75fb      	strb	r3, [r7, #23]
 8013ee2:	e027      	b.n	8013f34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	0f1b      	lsrs	r3, r3, #28
 8013ee8:	2b09      	cmp	r3, #9
 8013eea:	d80b      	bhi.n	8013f04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	0f1b      	lsrs	r3, r3, #28
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	7dfb      	ldrb	r3, [r7, #23]
 8013ef4:	005b      	lsls	r3, r3, #1
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	440b      	add	r3, r1
 8013efc:	3230      	adds	r2, #48	; 0x30
 8013efe:	b2d2      	uxtb	r2, r2
 8013f00:	701a      	strb	r2, [r3, #0]
 8013f02:	e00a      	b.n	8013f1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	0f1b      	lsrs	r3, r3, #28
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	7dfb      	ldrb	r3, [r7, #23]
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	4619      	mov	r1, r3
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	440b      	add	r3, r1
 8013f14:	3237      	adds	r2, #55	; 0x37
 8013f16:	b2d2      	uxtb	r2, r2
 8013f18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	011b      	lsls	r3, r3, #4
 8013f1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013f20:	7dfb      	ldrb	r3, [r7, #23]
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	3301      	adds	r3, #1
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	4413      	add	r3, r2
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013f2e:	7dfb      	ldrb	r3, [r7, #23]
 8013f30:	3301      	adds	r3, #1
 8013f32:	75fb      	strb	r3, [r7, #23]
 8013f34:	7dfa      	ldrb	r2, [r7, #23]
 8013f36:	79fb      	ldrb	r3, [r7, #7]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d3d3      	bcc.n	8013ee4 <IntToUnicode+0x18>
  }
}
 8013f3c:	bf00      	nop
 8013f3e:	371c      	adds	r7, #28
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b08a      	sub	sp, #40	; 0x28
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f50:	f107 0314 	add.w	r3, r7, #20
 8013f54:	2200      	movs	r2, #0
 8013f56:	601a      	str	r2, [r3, #0]
 8013f58:	605a      	str	r2, [r3, #4]
 8013f5a:	609a      	str	r2, [r3, #8]
 8013f5c:	60da      	str	r2, [r3, #12]
 8013f5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013f68:	d14e      	bne.n	8014008 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f6a:	4b29      	ldr	r3, [pc, #164]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f6e:	4a28      	ldr	r2, [pc, #160]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013f70:	f043 0301 	orr.w	r3, r3, #1
 8013f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013f76:	4b26      	ldr	r3, [pc, #152]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	613b      	str	r3, [r7, #16]
 8013f80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8013f82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f88:	2302      	movs	r3, #2
 8013f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f90:	2303      	movs	r3, #3
 8013f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013f94:	230a      	movs	r3, #10
 8013f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f98:	f107 0314 	add.w	r3, r7, #20
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013fa2:	f7f2 f9d9 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013fa6:	4b1a      	ldr	r3, [pc, #104]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013faa:	4a19      	ldr	r2, [pc, #100]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013fb2:	4b17      	ldr	r3, [pc, #92]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013fba:	60fb      	str	r3, [r7, #12]
 8013fbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013fbe:	4b14      	ldr	r3, [pc, #80]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d114      	bne.n	8013ff4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013fca:	4b11      	ldr	r3, [pc, #68]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fce:	4a10      	ldr	r2, [pc, #64]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8013fd6:	4b0e      	ldr	r3, [pc, #56]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013fde:	60bb      	str	r3, [r7, #8]
 8013fe0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8013fe2:	f7f4 fb91 	bl	8008708 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013fe6:	4b0a      	ldr	r3, [pc, #40]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fea:	4a09      	ldr	r2, [pc, #36]	; (8014010 <HAL_PCD_MspInit+0xc8>)
 8013fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8013ff2:	e001      	b.n	8013ff8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8013ff4:	f7f4 fb88 	bl	8008708 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	2105      	movs	r1, #5
 8013ffc:	2043      	movs	r0, #67	; 0x43
 8013ffe:	f7f2 f8ab 	bl	8006158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014002:	2043      	movs	r0, #67	; 0x43
 8014004:	f7f2 f8c4 	bl	8006190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014008:	bf00      	nop
 801400a:	3728      	adds	r7, #40	; 0x28
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	40021000 	.word	0x40021000

08014014 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014028:	4619      	mov	r1, r3
 801402a:	4610      	mov	r0, r2
 801402c:	f7fb fbfb 	bl	800f826 <USBD_LL_SetupStage>
}
 8014030:	bf00      	nop
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	460b      	mov	r3, r1
 8014042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801404a:	78fa      	ldrb	r2, [r7, #3]
 801404c:	6879      	ldr	r1, [r7, #4]
 801404e:	4613      	mov	r3, r2
 8014050:	00db      	lsls	r3, r3, #3
 8014052:	1a9b      	subs	r3, r3, r2
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	440b      	add	r3, r1
 8014058:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	78fb      	ldrb	r3, [r7, #3]
 8014060:	4619      	mov	r1, r3
 8014062:	f7fb fc2b 	bl	800f8bc <USBD_LL_DataOutStage>
}
 8014066:	bf00      	nop
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b082      	sub	sp, #8
 8014072:	af00      	add	r7, sp, #0
 8014074:	6078      	str	r0, [r7, #4]
 8014076:	460b      	mov	r3, r1
 8014078:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014080:	78fa      	ldrb	r2, [r7, #3]
 8014082:	6879      	ldr	r1, [r7, #4]
 8014084:	4613      	mov	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	1a9b      	subs	r3, r3, r2
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	440b      	add	r3, r1
 801408e:	3348      	adds	r3, #72	; 0x48
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	78fb      	ldrb	r3, [r7, #3]
 8014094:	4619      	mov	r1, r3
 8014096:	f7fb fc82 	bl	800f99e <USBD_LL_DataInStage>
}
 801409a:	bf00      	nop
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b082      	sub	sp, #8
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7fb fd95 	bl	800fbe0 <USBD_LL_SOF>
}
 80140b6:	bf00      	nop
 80140b8:	3708      	adds	r7, #8
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80140be:	b580      	push	{r7, lr}
 80140c0:	b084      	sub	sp, #16
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80140c6:	2301      	movs	r3, #1
 80140c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d001      	beq.n	80140d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80140d2:	f7ef fa45 	bl	8003560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140dc:	7bfa      	ldrb	r2, [r7, #15]
 80140de:	4611      	mov	r1, r2
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7fb fd42 	bl	800fb6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fb fcfb 	bl	800fae8 <USBD_LL_Reset>
}
 80140f2:	bf00      	nop
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
	...

080140fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	6812      	ldr	r2, [r2, #0]
 8014112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014116:	f043 0301 	orr.w	r3, r3, #1
 801411a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014122:	4618      	mov	r0, r3
 8014124:	f7fb fd31 	bl	800fb8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6a1b      	ldr	r3, [r3, #32]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d005      	beq.n	801413c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014130:	4b04      	ldr	r3, [pc, #16]	; (8014144 <HAL_PCD_SuspendCallback+0x48>)
 8014132:	691b      	ldr	r3, [r3, #16]
 8014134:	4a03      	ldr	r2, [pc, #12]	; (8014144 <HAL_PCD_SuspendCallback+0x48>)
 8014136:	f043 0306 	orr.w	r3, r3, #6
 801413a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	e000ed00 	.word	0xe000ed00

08014148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	6812      	ldr	r2, [r2, #0]
 801415e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014162:	f023 0301 	bic.w	r3, r3, #1
 8014166:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a1b      	ldr	r3, [r3, #32]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d007      	beq.n	8014180 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014170:	4b08      	ldr	r3, [pc, #32]	; (8014194 <HAL_PCD_ResumeCallback+0x4c>)
 8014172:	691b      	ldr	r3, [r3, #16]
 8014174:	4a07      	ldr	r2, [pc, #28]	; (8014194 <HAL_PCD_ResumeCallback+0x4c>)
 8014176:	f023 0306 	bic.w	r3, r3, #6
 801417a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801417c:	f000 fafa 	bl	8014774 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014186:	4618      	mov	r0, r3
 8014188:	f7fb fd14 	bl	800fbb4 <USBD_LL_Resume>
}
 801418c:	bf00      	nop
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	e000ed00 	.word	0xe000ed00

08014198 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
 80141a0:	460b      	mov	r3, r1
 80141a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141aa:	78fa      	ldrb	r2, [r7, #3]
 80141ac:	4611      	mov	r1, r2
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7fb fd3d 	bl	800fc2e <USBD_LL_IsoOUTIncomplete>
}
 80141b4:	bf00      	nop
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
 80141c4:	460b      	mov	r3, r1
 80141c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141ce:	78fa      	ldrb	r2, [r7, #3]
 80141d0:	4611      	mov	r1, r2
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fb fd1e 	bl	800fc14 <USBD_LL_IsoINIncomplete>
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fb fd2a 	bl	800fc48 <USBD_LL_DevConnected>
}
 80141f4:	bf00      	nop
 80141f6:	3708      	adds	r7, #8
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801420a:	4618      	mov	r0, r3
 801420c:	f7fb fd27 	bl	800fc5e <USBD_LL_DevDisconnected>
}
 8014210:	bf00      	nop
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	781b      	ldrb	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d13c      	bne.n	80142a2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014228:	4a20      	ldr	r2, [pc, #128]	; (80142ac <USBD_LL_Init+0x94>)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	4a1e      	ldr	r2, [pc, #120]	; (80142ac <USBD_LL_Init+0x94>)
 8014234:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014238:	4b1c      	ldr	r3, [pc, #112]	; (80142ac <USBD_LL_Init+0x94>)
 801423a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801423e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014240:	4b1a      	ldr	r3, [pc, #104]	; (80142ac <USBD_LL_Init+0x94>)
 8014242:	2206      	movs	r2, #6
 8014244:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014246:	4b19      	ldr	r3, [pc, #100]	; (80142ac <USBD_LL_Init+0x94>)
 8014248:	2202      	movs	r2, #2
 801424a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801424c:	4b17      	ldr	r3, [pc, #92]	; (80142ac <USBD_LL_Init+0x94>)
 801424e:	2202      	movs	r2, #2
 8014250:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014252:	4b16      	ldr	r3, [pc, #88]	; (80142ac <USBD_LL_Init+0x94>)
 8014254:	2200      	movs	r2, #0
 8014256:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014258:	4b14      	ldr	r3, [pc, #80]	; (80142ac <USBD_LL_Init+0x94>)
 801425a:	2200      	movs	r2, #0
 801425c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801425e:	4b13      	ldr	r3, [pc, #76]	; (80142ac <USBD_LL_Init+0x94>)
 8014260:	2200      	movs	r2, #0
 8014262:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014264:	4b11      	ldr	r3, [pc, #68]	; (80142ac <USBD_LL_Init+0x94>)
 8014266:	2200      	movs	r2, #0
 8014268:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801426a:	4b10      	ldr	r3, [pc, #64]	; (80142ac <USBD_LL_Init+0x94>)
 801426c:	2200      	movs	r2, #0
 801426e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014270:	4b0e      	ldr	r3, [pc, #56]	; (80142ac <USBD_LL_Init+0x94>)
 8014272:	2200      	movs	r2, #0
 8014274:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014276:	480d      	ldr	r0, [pc, #52]	; (80142ac <USBD_LL_Init+0x94>)
 8014278:	f7f3 f933 	bl	80074e2 <HAL_PCD_Init>
 801427c:	4603      	mov	r3, r0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d001      	beq.n	8014286 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014282:	f7ef f96d 	bl	8003560 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014286:	2180      	movs	r1, #128	; 0x80
 8014288:	4808      	ldr	r0, [pc, #32]	; (80142ac <USBD_LL_Init+0x94>)
 801428a:	f7f4 f994 	bl	80085b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801428e:	2240      	movs	r2, #64	; 0x40
 8014290:	2100      	movs	r1, #0
 8014292:	4806      	ldr	r0, [pc, #24]	; (80142ac <USBD_LL_Init+0x94>)
 8014294:	f7f4 f948 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014298:	2280      	movs	r2, #128	; 0x80
 801429a:	2101      	movs	r1, #1
 801429c:	4803      	ldr	r0, [pc, #12]	; (80142ac <USBD_LL_Init+0x94>)
 801429e:	f7f4 f943 	bl	8008528 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80142a2:	2300      	movs	r3, #0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	200100b8 	.word	0x200100b8

080142b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142b8:	2300      	movs	r3, #0
 80142ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142bc:	2300      	movs	r3, #0
 80142be:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7f3 fa2f 	bl	800772a <HAL_PCD_Start>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80142d0:	7bbb      	ldrb	r3, [r7, #14]
 80142d2:	2b03      	cmp	r3, #3
 80142d4:	d816      	bhi.n	8014304 <USBD_LL_Start+0x54>
 80142d6:	a201      	add	r2, pc, #4	; (adr r2, 80142dc <USBD_LL_Start+0x2c>)
 80142d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142dc:	080142ed 	.word	0x080142ed
 80142e0:	080142f3 	.word	0x080142f3
 80142e4:	080142f9 	.word	0x080142f9
 80142e8:	080142ff 	.word	0x080142ff
    case HAL_OK :
      usb_status = USBD_OK;
 80142ec:	2300      	movs	r3, #0
 80142ee:	73fb      	strb	r3, [r7, #15]
    break;
 80142f0:	e00b      	b.n	801430a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80142f2:	2302      	movs	r3, #2
 80142f4:	73fb      	strb	r3, [r7, #15]
    break;
 80142f6:	e008      	b.n	801430a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80142f8:	2301      	movs	r3, #1
 80142fa:	73fb      	strb	r3, [r7, #15]
    break;
 80142fc:	e005      	b.n	801430a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80142fe:	2302      	movs	r3, #2
 8014300:	73fb      	strb	r3, [r7, #15]
    break;
 8014302:	e002      	b.n	801430a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014304:	2302      	movs	r3, #2
 8014306:	73fb      	strb	r3, [r7, #15]
    break;
 8014308:	bf00      	nop
  }
  return usb_status;
 801430a:	7bfb      	ldrb	r3, [r7, #15]
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	4608      	mov	r0, r1
 801431e:	4611      	mov	r1, r2
 8014320:	461a      	mov	r2, r3
 8014322:	4603      	mov	r3, r0
 8014324:	70fb      	strb	r3, [r7, #3]
 8014326:	460b      	mov	r3, r1
 8014328:	70bb      	strb	r3, [r7, #2]
 801432a:	4613      	mov	r3, r2
 801432c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014332:	2300      	movs	r3, #0
 8014334:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801433c:	78bb      	ldrb	r3, [r7, #2]
 801433e:	883a      	ldrh	r2, [r7, #0]
 8014340:	78f9      	ldrb	r1, [r7, #3]
 8014342:	f7f3 fdea 	bl	8007f1a <HAL_PCD_EP_Open>
 8014346:	4603      	mov	r3, r0
 8014348:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801434a:	7bbb      	ldrb	r3, [r7, #14]
 801434c:	2b03      	cmp	r3, #3
 801434e:	d817      	bhi.n	8014380 <USBD_LL_OpenEP+0x6c>
 8014350:	a201      	add	r2, pc, #4	; (adr r2, 8014358 <USBD_LL_OpenEP+0x44>)
 8014352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014356:	bf00      	nop
 8014358:	08014369 	.word	0x08014369
 801435c:	0801436f 	.word	0x0801436f
 8014360:	08014375 	.word	0x08014375
 8014364:	0801437b 	.word	0x0801437b
    case HAL_OK :
      usb_status = USBD_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	73fb      	strb	r3, [r7, #15]
    break;
 801436c:	e00b      	b.n	8014386 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801436e:	2302      	movs	r3, #2
 8014370:	73fb      	strb	r3, [r7, #15]
    break;
 8014372:	e008      	b.n	8014386 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014374:	2301      	movs	r3, #1
 8014376:	73fb      	strb	r3, [r7, #15]
    break;
 8014378:	e005      	b.n	8014386 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801437a:	2302      	movs	r3, #2
 801437c:	73fb      	strb	r3, [r7, #15]
    break;
 801437e:	e002      	b.n	8014386 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014380:	2302      	movs	r3, #2
 8014382:	73fb      	strb	r3, [r7, #15]
    break;
 8014384:	bf00      	nop
  }
  return usb_status;
 8014386:	7bfb      	ldrb	r3, [r7, #15]
}
 8014388:	4618      	mov	r0, r3
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	460b      	mov	r3, r1
 801439a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801439c:	2300      	movs	r3, #0
 801439e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143a0:	2300      	movs	r3, #0
 80143a2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80143aa:	78fa      	ldrb	r2, [r7, #3]
 80143ac:	4611      	mov	r1, r2
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f3 fe1b 	bl	8007fea <HAL_PCD_EP_Close>
 80143b4:	4603      	mov	r3, r0
 80143b6:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	2b03      	cmp	r3, #3
 80143bc:	d816      	bhi.n	80143ec <USBD_LL_CloseEP+0x5c>
 80143be:	a201      	add	r2, pc, #4	; (adr r2, 80143c4 <USBD_LL_CloseEP+0x34>)
 80143c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c4:	080143d5 	.word	0x080143d5
 80143c8:	080143db 	.word	0x080143db
 80143cc:	080143e1 	.word	0x080143e1
 80143d0:	080143e7 	.word	0x080143e7
    case HAL_OK :
      usb_status = USBD_OK;
 80143d4:	2300      	movs	r3, #0
 80143d6:	73fb      	strb	r3, [r7, #15]
    break;
 80143d8:	e00b      	b.n	80143f2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80143da:	2302      	movs	r3, #2
 80143dc:	73fb      	strb	r3, [r7, #15]
    break;
 80143de:	e008      	b.n	80143f2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80143e0:	2301      	movs	r3, #1
 80143e2:	73fb      	strb	r3, [r7, #15]
    break;
 80143e4:	e005      	b.n	80143f2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80143e6:	2302      	movs	r3, #2
 80143e8:	73fb      	strb	r3, [r7, #15]
    break;
 80143ea:	e002      	b.n	80143f2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80143ec:	2302      	movs	r3, #2
 80143ee:	73fb      	strb	r3, [r7, #15]
    break;
 80143f0:	bf00      	nop
  }
  return usb_status;  
 80143f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3710      	adds	r7, #16
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	460b      	mov	r3, r1
 8014406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014408:	2300      	movs	r3, #0
 801440a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014416:	78fa      	ldrb	r2, [r7, #3]
 8014418:	4611      	mov	r1, r2
 801441a:	4618      	mov	r0, r3
 801441c:	f7f3 fec2 	bl	80081a4 <HAL_PCD_EP_SetStall>
 8014420:	4603      	mov	r3, r0
 8014422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014424:	7bbb      	ldrb	r3, [r7, #14]
 8014426:	2b03      	cmp	r3, #3
 8014428:	d816      	bhi.n	8014458 <USBD_LL_StallEP+0x5c>
 801442a:	a201      	add	r2, pc, #4	; (adr r2, 8014430 <USBD_LL_StallEP+0x34>)
 801442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014430:	08014441 	.word	0x08014441
 8014434:	08014447 	.word	0x08014447
 8014438:	0801444d 	.word	0x0801444d
 801443c:	08014453 	.word	0x08014453
    case HAL_OK :
      usb_status = USBD_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	73fb      	strb	r3, [r7, #15]
    break;
 8014444:	e00b      	b.n	801445e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014446:	2302      	movs	r3, #2
 8014448:	73fb      	strb	r3, [r7, #15]
    break;
 801444a:	e008      	b.n	801445e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801444c:	2301      	movs	r3, #1
 801444e:	73fb      	strb	r3, [r7, #15]
    break;
 8014450:	e005      	b.n	801445e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014452:	2302      	movs	r3, #2
 8014454:	73fb      	strb	r3, [r7, #15]
    break;
 8014456:	e002      	b.n	801445e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014458:	2302      	movs	r3, #2
 801445a:	73fb      	strb	r3, [r7, #15]
    break;
 801445c:	bf00      	nop
  }
  return usb_status;  
 801445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b084      	sub	sp, #16
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	460b      	mov	r3, r1
 8014472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014474:	2300      	movs	r3, #0
 8014476:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014478:	2300      	movs	r3, #0
 801447a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014482:	78fa      	ldrb	r2, [r7, #3]
 8014484:	4611      	mov	r1, r2
 8014486:	4618      	mov	r0, r3
 8014488:	f7f3 feee 	bl	8008268 <HAL_PCD_EP_ClrStall>
 801448c:	4603      	mov	r3, r0
 801448e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014490:	7bbb      	ldrb	r3, [r7, #14]
 8014492:	2b03      	cmp	r3, #3
 8014494:	d816      	bhi.n	80144c4 <USBD_LL_ClearStallEP+0x5c>
 8014496:	a201      	add	r2, pc, #4	; (adr r2, 801449c <USBD_LL_ClearStallEP+0x34>)
 8014498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801449c:	080144ad 	.word	0x080144ad
 80144a0:	080144b3 	.word	0x080144b3
 80144a4:	080144b9 	.word	0x080144b9
 80144a8:	080144bf 	.word	0x080144bf
    case HAL_OK :
      usb_status = USBD_OK;
 80144ac:	2300      	movs	r3, #0
 80144ae:	73fb      	strb	r3, [r7, #15]
    break;
 80144b0:	e00b      	b.n	80144ca <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144b2:	2302      	movs	r3, #2
 80144b4:	73fb      	strb	r3, [r7, #15]
    break;
 80144b6:	e008      	b.n	80144ca <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144b8:	2301      	movs	r3, #1
 80144ba:	73fb      	strb	r3, [r7, #15]
    break;
 80144bc:	e005      	b.n	80144ca <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144be:	2302      	movs	r3, #2
 80144c0:	73fb      	strb	r3, [r7, #15]
    break;
 80144c2:	e002      	b.n	80144ca <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80144c4:	2302      	movs	r3, #2
 80144c6:	73fb      	strb	r3, [r7, #15]
    break;
 80144c8:	bf00      	nop
  }
  return usb_status; 
 80144ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3710      	adds	r7, #16
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}

080144d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144d4:	b480      	push	{r7}
 80144d6:	b085      	sub	sp, #20
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	460b      	mov	r3, r1
 80144de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80144e6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80144e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	da0b      	bge.n	8014508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80144f0:	78fb      	ldrb	r3, [r7, #3]
 80144f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144f6:	68f9      	ldr	r1, [r7, #12]
 80144f8:	4613      	mov	r3, r2
 80144fa:	00db      	lsls	r3, r3, #3
 80144fc:	1a9b      	subs	r3, r3, r2
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	440b      	add	r3, r1
 8014502:	333e      	adds	r3, #62	; 0x3e
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	e00b      	b.n	8014520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014508:	78fb      	ldrb	r3, [r7, #3]
 801450a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801450e:	68f9      	ldr	r1, [r7, #12]
 8014510:	4613      	mov	r3, r2
 8014512:	00db      	lsls	r3, r3, #3
 8014514:	1a9b      	subs	r3, r3, r2
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	440b      	add	r3, r1
 801451a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801451e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014520:	4618      	mov	r0, r3
 8014522:	3714      	adds	r7, #20
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr

0801452c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	460b      	mov	r3, r1
 8014536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014546:	78fa      	ldrb	r2, [r7, #3]
 8014548:	4611      	mov	r1, r2
 801454a:	4618      	mov	r0, r3
 801454c:	f7f3 fcc0 	bl	8007ed0 <HAL_PCD_SetAddress>
 8014550:	4603      	mov	r3, r0
 8014552:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014554:	7bbb      	ldrb	r3, [r7, #14]
 8014556:	2b03      	cmp	r3, #3
 8014558:	d816      	bhi.n	8014588 <USBD_LL_SetUSBAddress+0x5c>
 801455a:	a201      	add	r2, pc, #4	; (adr r2, 8014560 <USBD_LL_SetUSBAddress+0x34>)
 801455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014560:	08014571 	.word	0x08014571
 8014564:	08014577 	.word	0x08014577
 8014568:	0801457d 	.word	0x0801457d
 801456c:	08014583 	.word	0x08014583
    case HAL_OK :
      usb_status = USBD_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	73fb      	strb	r3, [r7, #15]
    break;
 8014574:	e00b      	b.n	801458e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014576:	2302      	movs	r3, #2
 8014578:	73fb      	strb	r3, [r7, #15]
    break;
 801457a:	e008      	b.n	801458e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801457c:	2301      	movs	r3, #1
 801457e:	73fb      	strb	r3, [r7, #15]
    break;
 8014580:	e005      	b.n	801458e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014582:	2302      	movs	r3, #2
 8014584:	73fb      	strb	r3, [r7, #15]
    break;
 8014586:	e002      	b.n	801458e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014588:	2302      	movs	r3, #2
 801458a:	73fb      	strb	r3, [r7, #15]
    break;
 801458c:	bf00      	nop
  }
  return usb_status;  
 801458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3710      	adds	r7, #16
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b086      	sub	sp, #24
 801459c:	af00      	add	r7, sp, #0
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	607a      	str	r2, [r7, #4]
 80145a2:	461a      	mov	r2, r3
 80145a4:	460b      	mov	r3, r1
 80145a6:	72fb      	strb	r3, [r7, #11]
 80145a8:	4613      	mov	r3, r2
 80145aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145ac:	2300      	movs	r3, #0
 80145ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80145ba:	893b      	ldrh	r3, [r7, #8]
 80145bc:	7af9      	ldrb	r1, [r7, #11]
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	f7f3 fdb3 	bl	800812a <HAL_PCD_EP_Transmit>
 80145c4:	4603      	mov	r3, r0
 80145c6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80145c8:	7dbb      	ldrb	r3, [r7, #22]
 80145ca:	2b03      	cmp	r3, #3
 80145cc:	d816      	bhi.n	80145fc <USBD_LL_Transmit+0x64>
 80145ce:	a201      	add	r2, pc, #4	; (adr r2, 80145d4 <USBD_LL_Transmit+0x3c>)
 80145d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d4:	080145e5 	.word	0x080145e5
 80145d8:	080145eb 	.word	0x080145eb
 80145dc:	080145f1 	.word	0x080145f1
 80145e0:	080145f7 	.word	0x080145f7
    case HAL_OK :
      usb_status = USBD_OK;
 80145e4:	2300      	movs	r3, #0
 80145e6:	75fb      	strb	r3, [r7, #23]
    break;
 80145e8:	e00b      	b.n	8014602 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145ea:	2302      	movs	r3, #2
 80145ec:	75fb      	strb	r3, [r7, #23]
    break;
 80145ee:	e008      	b.n	8014602 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145f0:	2301      	movs	r3, #1
 80145f2:	75fb      	strb	r3, [r7, #23]
    break;
 80145f4:	e005      	b.n	8014602 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145f6:	2302      	movs	r3, #2
 80145f8:	75fb      	strb	r3, [r7, #23]
    break;
 80145fa:	e002      	b.n	8014602 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80145fc:	2302      	movs	r3, #2
 80145fe:	75fb      	strb	r3, [r7, #23]
    break;
 8014600:	bf00      	nop
  }
  return usb_status;    
 8014602:	7dfb      	ldrb	r3, [r7, #23]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3718      	adds	r7, #24
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b086      	sub	sp, #24
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	607a      	str	r2, [r7, #4]
 8014616:	461a      	mov	r2, r3
 8014618:	460b      	mov	r3, r1
 801461a:	72fb      	strb	r3, [r7, #11]
 801461c:	4613      	mov	r3, r2
 801461e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014620:	2300      	movs	r3, #0
 8014622:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014624:	2300      	movs	r3, #0
 8014626:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801462e:	893b      	ldrh	r3, [r7, #8]
 8014630:	7af9      	ldrb	r1, [r7, #11]
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	f7f3 fd23 	bl	800807e <HAL_PCD_EP_Receive>
 8014638:	4603      	mov	r3, r0
 801463a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 801463c:	7dbb      	ldrb	r3, [r7, #22]
 801463e:	2b03      	cmp	r3, #3
 8014640:	d816      	bhi.n	8014670 <USBD_LL_PrepareReceive+0x64>
 8014642:	a201      	add	r2, pc, #4	; (adr r2, 8014648 <USBD_LL_PrepareReceive+0x3c>)
 8014644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014648:	08014659 	.word	0x08014659
 801464c:	0801465f 	.word	0x0801465f
 8014650:	08014665 	.word	0x08014665
 8014654:	0801466b 	.word	0x0801466b
    case HAL_OK :
      usb_status = USBD_OK;
 8014658:	2300      	movs	r3, #0
 801465a:	75fb      	strb	r3, [r7, #23]
    break;
 801465c:	e00b      	b.n	8014676 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801465e:	2302      	movs	r3, #2
 8014660:	75fb      	strb	r3, [r7, #23]
    break;
 8014662:	e008      	b.n	8014676 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014664:	2301      	movs	r3, #1
 8014666:	75fb      	strb	r3, [r7, #23]
    break;
 8014668:	e005      	b.n	8014676 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801466a:	2302      	movs	r3, #2
 801466c:	75fb      	strb	r3, [r7, #23]
    break;
 801466e:	e002      	b.n	8014676 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8014670:	2302      	movs	r3, #2
 8014672:	75fb      	strb	r3, [r7, #23]
    break;
 8014674:	bf00      	nop
  }
  return usb_status; 
 8014676:	7dfb      	ldrb	r3, [r7, #23]
}
 8014678:	4618      	mov	r0, r3
 801467a:	3718      	adds	r7, #24
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014692:	78fa      	ldrb	r2, [r7, #3]
 8014694:	4611      	mov	r1, r2
 8014696:	4618      	mov	r0, r3
 8014698:	f7f3 fd2f 	bl	80080fa <HAL_PCD_EP_GetRxCount>
 801469c:	4603      	mov	r3, r0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3708      	adds	r7, #8
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
	...

080146a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	460b      	mov	r3, r1
 80146b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80146b4:	78fb      	ldrb	r3, [r7, #3]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d002      	beq.n	80146c0 <HAL_PCDEx_LPM_Callback+0x18>
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d01f      	beq.n	80146fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80146be:	e03b      	b.n	8014738 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6a1b      	ldr	r3, [r3, #32]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d007      	beq.n	80146d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80146c8:	f000 f854 	bl	8014774 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80146cc:	4b1c      	ldr	r3, [pc, #112]	; (8014740 <HAL_PCDEx_LPM_Callback+0x98>)
 80146ce:	691b      	ldr	r3, [r3, #16]
 80146d0:	4a1b      	ldr	r2, [pc, #108]	; (8014740 <HAL_PCDEx_LPM_Callback+0x98>)
 80146d2:	f023 0306 	bic.w	r3, r3, #6
 80146d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	6812      	ldr	r2, [r2, #0]
 80146e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80146ea:	f023 0301 	bic.w	r3, r3, #1
 80146ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fb fa5c 	bl	800fbb4 <USBD_LL_Resume>
    break;
 80146fc:	e01c      	b.n	8014738 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	6812      	ldr	r2, [r2, #0]
 801470c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014710:	f043 0301 	orr.w	r3, r3, #1
 8014714:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801471c:	4618      	mov	r0, r3
 801471e:	f7fb fa34 	bl	800fb8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6a1b      	ldr	r3, [r3, #32]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d005      	beq.n	8014736 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801472a:	4b05      	ldr	r3, [pc, #20]	; (8014740 <HAL_PCDEx_LPM_Callback+0x98>)
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	4a04      	ldr	r2, [pc, #16]	; (8014740 <HAL_PCDEx_LPM_Callback+0x98>)
 8014730:	f043 0306 	orr.w	r3, r3, #6
 8014734:	6113      	str	r3, [r2, #16]
    break;   
 8014736:	bf00      	nop
}
 8014738:	bf00      	nop
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	e000ed00 	.word	0xe000ed00

08014744 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014744:	b480      	push	{r7}
 8014746:	b083      	sub	sp, #12
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801474c:	4b03      	ldr	r3, [pc, #12]	; (801475c <USBD_static_malloc+0x18>)
}
 801474e:	4618      	mov	r0, r3
 8014750:	370c      	adds	r7, #12
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	2000d4c8 	.word	0x2000d4c8

08014760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]

}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014778:	f7ee f836 	bl	80027e8 <SystemClock_Config>
}
 801477c:	bf00      	nop
 801477e:	bd80      	pop	{r7, pc}

08014780 <__assert_func>:
 8014780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014782:	461c      	mov	r4, r3
 8014784:	4b09      	ldr	r3, [pc, #36]	; (80147ac <__assert_func+0x2c>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4605      	mov	r5, r0
 801478a:	68d8      	ldr	r0, [r3, #12]
 801478c:	b152      	cbz	r2, 80147a4 <__assert_func+0x24>
 801478e:	4b08      	ldr	r3, [pc, #32]	; (80147b0 <__assert_func+0x30>)
 8014790:	9100      	str	r1, [sp, #0]
 8014792:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014796:	4907      	ldr	r1, [pc, #28]	; (80147b4 <__assert_func+0x34>)
 8014798:	462b      	mov	r3, r5
 801479a:	4622      	mov	r2, r4
 801479c:	f000 f818 	bl	80147d0 <fiprintf>
 80147a0:	f000 fe00 	bl	80153a4 <abort>
 80147a4:	4b04      	ldr	r3, [pc, #16]	; (80147b8 <__assert_func+0x38>)
 80147a6:	461a      	mov	r2, r3
 80147a8:	e7f2      	b.n	8014790 <__assert_func+0x10>
 80147aa:	bf00      	nop
 80147ac:	200001dc 	.word	0x200001dc
 80147b0:	08016b40 	.word	0x08016b40
 80147b4:	08016b4d 	.word	0x08016b4d
 80147b8:	08016b7b 	.word	0x08016b7b

080147bc <atoi>:
 80147bc:	220a      	movs	r2, #10
 80147be:	2100      	movs	r1, #0
 80147c0:	f000 bd1a 	b.w	80151f8 <strtol>

080147c4 <__errno>:
 80147c4:	4b01      	ldr	r3, [pc, #4]	; (80147cc <__errno+0x8>)
 80147c6:	6818      	ldr	r0, [r3, #0]
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	200001dc 	.word	0x200001dc

080147d0 <fiprintf>:
 80147d0:	b40e      	push	{r1, r2, r3}
 80147d2:	b503      	push	{r0, r1, lr}
 80147d4:	4601      	mov	r1, r0
 80147d6:	ab03      	add	r3, sp, #12
 80147d8:	4805      	ldr	r0, [pc, #20]	; (80147f0 <fiprintf+0x20>)
 80147da:	f853 2b04 	ldr.w	r2, [r3], #4
 80147de:	6800      	ldr	r0, [r0, #0]
 80147e0:	9301      	str	r3, [sp, #4]
 80147e2:	f000 f911 	bl	8014a08 <_vfiprintf_r>
 80147e6:	b002      	add	sp, #8
 80147e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80147ec:	b003      	add	sp, #12
 80147ee:	4770      	bx	lr
 80147f0:	200001dc 	.word	0x200001dc

080147f4 <__libc_init_array>:
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	4e0d      	ldr	r6, [pc, #52]	; (801482c <__libc_init_array+0x38>)
 80147f8:	4c0d      	ldr	r4, [pc, #52]	; (8014830 <__libc_init_array+0x3c>)
 80147fa:	1ba4      	subs	r4, r4, r6
 80147fc:	10a4      	asrs	r4, r4, #2
 80147fe:	2500      	movs	r5, #0
 8014800:	42a5      	cmp	r5, r4
 8014802:	d109      	bne.n	8014818 <__libc_init_array+0x24>
 8014804:	4e0b      	ldr	r6, [pc, #44]	; (8014834 <__libc_init_array+0x40>)
 8014806:	4c0c      	ldr	r4, [pc, #48]	; (8014838 <__libc_init_array+0x44>)
 8014808:	f001 ff9c 	bl	8016744 <_init>
 801480c:	1ba4      	subs	r4, r4, r6
 801480e:	10a4      	asrs	r4, r4, #2
 8014810:	2500      	movs	r5, #0
 8014812:	42a5      	cmp	r5, r4
 8014814:	d105      	bne.n	8014822 <__libc_init_array+0x2e>
 8014816:	bd70      	pop	{r4, r5, r6, pc}
 8014818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801481c:	4798      	blx	r3
 801481e:	3501      	adds	r5, #1
 8014820:	e7ee      	b.n	8014800 <__libc_init_array+0xc>
 8014822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014826:	4798      	blx	r3
 8014828:	3501      	adds	r5, #1
 801482a:	e7f2      	b.n	8014812 <__libc_init_array+0x1e>
 801482c:	08016d4c 	.word	0x08016d4c
 8014830:	08016d4c 	.word	0x08016d4c
 8014834:	08016d4c 	.word	0x08016d4c
 8014838:	08016d50 	.word	0x08016d50

0801483c <memcpy>:
 801483c:	b510      	push	{r4, lr}
 801483e:	1e43      	subs	r3, r0, #1
 8014840:	440a      	add	r2, r1
 8014842:	4291      	cmp	r1, r2
 8014844:	d100      	bne.n	8014848 <memcpy+0xc>
 8014846:	bd10      	pop	{r4, pc}
 8014848:	f811 4b01 	ldrb.w	r4, [r1], #1
 801484c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014850:	e7f7      	b.n	8014842 <memcpy+0x6>

08014852 <memset>:
 8014852:	4402      	add	r2, r0
 8014854:	4603      	mov	r3, r0
 8014856:	4293      	cmp	r3, r2
 8014858:	d100      	bne.n	801485c <memset+0xa>
 801485a:	4770      	bx	lr
 801485c:	f803 1b01 	strb.w	r1, [r3], #1
 8014860:	e7f9      	b.n	8014856 <memset+0x4>
	...

08014864 <_free_r>:
 8014864:	b538      	push	{r3, r4, r5, lr}
 8014866:	4605      	mov	r5, r0
 8014868:	2900      	cmp	r1, #0
 801486a:	d045      	beq.n	80148f8 <_free_r+0x94>
 801486c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014870:	1f0c      	subs	r4, r1, #4
 8014872:	2b00      	cmp	r3, #0
 8014874:	bfb8      	it	lt
 8014876:	18e4      	addlt	r4, r4, r3
 8014878:	f000 ffa9 	bl	80157ce <__malloc_lock>
 801487c:	4a1f      	ldr	r2, [pc, #124]	; (80148fc <_free_r+0x98>)
 801487e:	6813      	ldr	r3, [r2, #0]
 8014880:	4610      	mov	r0, r2
 8014882:	b933      	cbnz	r3, 8014892 <_free_r+0x2e>
 8014884:	6063      	str	r3, [r4, #4]
 8014886:	6014      	str	r4, [r2, #0]
 8014888:	4628      	mov	r0, r5
 801488a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801488e:	f000 bf9f 	b.w	80157d0 <__malloc_unlock>
 8014892:	42a3      	cmp	r3, r4
 8014894:	d90c      	bls.n	80148b0 <_free_r+0x4c>
 8014896:	6821      	ldr	r1, [r4, #0]
 8014898:	1862      	adds	r2, r4, r1
 801489a:	4293      	cmp	r3, r2
 801489c:	bf04      	itt	eq
 801489e:	681a      	ldreq	r2, [r3, #0]
 80148a0:	685b      	ldreq	r3, [r3, #4]
 80148a2:	6063      	str	r3, [r4, #4]
 80148a4:	bf04      	itt	eq
 80148a6:	1852      	addeq	r2, r2, r1
 80148a8:	6022      	streq	r2, [r4, #0]
 80148aa:	6004      	str	r4, [r0, #0]
 80148ac:	e7ec      	b.n	8014888 <_free_r+0x24>
 80148ae:	4613      	mov	r3, r2
 80148b0:	685a      	ldr	r2, [r3, #4]
 80148b2:	b10a      	cbz	r2, 80148b8 <_free_r+0x54>
 80148b4:	42a2      	cmp	r2, r4
 80148b6:	d9fa      	bls.n	80148ae <_free_r+0x4a>
 80148b8:	6819      	ldr	r1, [r3, #0]
 80148ba:	1858      	adds	r0, r3, r1
 80148bc:	42a0      	cmp	r0, r4
 80148be:	d10b      	bne.n	80148d8 <_free_r+0x74>
 80148c0:	6820      	ldr	r0, [r4, #0]
 80148c2:	4401      	add	r1, r0
 80148c4:	1858      	adds	r0, r3, r1
 80148c6:	4282      	cmp	r2, r0
 80148c8:	6019      	str	r1, [r3, #0]
 80148ca:	d1dd      	bne.n	8014888 <_free_r+0x24>
 80148cc:	6810      	ldr	r0, [r2, #0]
 80148ce:	6852      	ldr	r2, [r2, #4]
 80148d0:	605a      	str	r2, [r3, #4]
 80148d2:	4401      	add	r1, r0
 80148d4:	6019      	str	r1, [r3, #0]
 80148d6:	e7d7      	b.n	8014888 <_free_r+0x24>
 80148d8:	d902      	bls.n	80148e0 <_free_r+0x7c>
 80148da:	230c      	movs	r3, #12
 80148dc:	602b      	str	r3, [r5, #0]
 80148de:	e7d3      	b.n	8014888 <_free_r+0x24>
 80148e0:	6820      	ldr	r0, [r4, #0]
 80148e2:	1821      	adds	r1, r4, r0
 80148e4:	428a      	cmp	r2, r1
 80148e6:	bf04      	itt	eq
 80148e8:	6811      	ldreq	r1, [r2, #0]
 80148ea:	6852      	ldreq	r2, [r2, #4]
 80148ec:	6062      	str	r2, [r4, #4]
 80148ee:	bf04      	itt	eq
 80148f0:	1809      	addeq	r1, r1, r0
 80148f2:	6021      	streq	r1, [r4, #0]
 80148f4:	605c      	str	r4, [r3, #4]
 80148f6:	e7c7      	b.n	8014888 <_free_r+0x24>
 80148f8:	bd38      	pop	{r3, r4, r5, pc}
 80148fa:	bf00      	nop
 80148fc:	2000d6e8 	.word	0x2000d6e8

08014900 <_malloc_r>:
 8014900:	b570      	push	{r4, r5, r6, lr}
 8014902:	1ccd      	adds	r5, r1, #3
 8014904:	f025 0503 	bic.w	r5, r5, #3
 8014908:	3508      	adds	r5, #8
 801490a:	2d0c      	cmp	r5, #12
 801490c:	bf38      	it	cc
 801490e:	250c      	movcc	r5, #12
 8014910:	2d00      	cmp	r5, #0
 8014912:	4606      	mov	r6, r0
 8014914:	db01      	blt.n	801491a <_malloc_r+0x1a>
 8014916:	42a9      	cmp	r1, r5
 8014918:	d903      	bls.n	8014922 <_malloc_r+0x22>
 801491a:	230c      	movs	r3, #12
 801491c:	6033      	str	r3, [r6, #0]
 801491e:	2000      	movs	r0, #0
 8014920:	bd70      	pop	{r4, r5, r6, pc}
 8014922:	f000 ff54 	bl	80157ce <__malloc_lock>
 8014926:	4a21      	ldr	r2, [pc, #132]	; (80149ac <_malloc_r+0xac>)
 8014928:	6814      	ldr	r4, [r2, #0]
 801492a:	4621      	mov	r1, r4
 801492c:	b991      	cbnz	r1, 8014954 <_malloc_r+0x54>
 801492e:	4c20      	ldr	r4, [pc, #128]	; (80149b0 <_malloc_r+0xb0>)
 8014930:	6823      	ldr	r3, [r4, #0]
 8014932:	b91b      	cbnz	r3, 801493c <_malloc_r+0x3c>
 8014934:	4630      	mov	r0, r6
 8014936:	f000 fb7d 	bl	8015034 <_sbrk_r>
 801493a:	6020      	str	r0, [r4, #0]
 801493c:	4629      	mov	r1, r5
 801493e:	4630      	mov	r0, r6
 8014940:	f000 fb78 	bl	8015034 <_sbrk_r>
 8014944:	1c43      	adds	r3, r0, #1
 8014946:	d124      	bne.n	8014992 <_malloc_r+0x92>
 8014948:	230c      	movs	r3, #12
 801494a:	6033      	str	r3, [r6, #0]
 801494c:	4630      	mov	r0, r6
 801494e:	f000 ff3f 	bl	80157d0 <__malloc_unlock>
 8014952:	e7e4      	b.n	801491e <_malloc_r+0x1e>
 8014954:	680b      	ldr	r3, [r1, #0]
 8014956:	1b5b      	subs	r3, r3, r5
 8014958:	d418      	bmi.n	801498c <_malloc_r+0x8c>
 801495a:	2b0b      	cmp	r3, #11
 801495c:	d90f      	bls.n	801497e <_malloc_r+0x7e>
 801495e:	600b      	str	r3, [r1, #0]
 8014960:	50cd      	str	r5, [r1, r3]
 8014962:	18cc      	adds	r4, r1, r3
 8014964:	4630      	mov	r0, r6
 8014966:	f000 ff33 	bl	80157d0 <__malloc_unlock>
 801496a:	f104 000b 	add.w	r0, r4, #11
 801496e:	1d23      	adds	r3, r4, #4
 8014970:	f020 0007 	bic.w	r0, r0, #7
 8014974:	1ac3      	subs	r3, r0, r3
 8014976:	d0d3      	beq.n	8014920 <_malloc_r+0x20>
 8014978:	425a      	negs	r2, r3
 801497a:	50e2      	str	r2, [r4, r3]
 801497c:	e7d0      	b.n	8014920 <_malloc_r+0x20>
 801497e:	428c      	cmp	r4, r1
 8014980:	684b      	ldr	r3, [r1, #4]
 8014982:	bf16      	itet	ne
 8014984:	6063      	strne	r3, [r4, #4]
 8014986:	6013      	streq	r3, [r2, #0]
 8014988:	460c      	movne	r4, r1
 801498a:	e7eb      	b.n	8014964 <_malloc_r+0x64>
 801498c:	460c      	mov	r4, r1
 801498e:	6849      	ldr	r1, [r1, #4]
 8014990:	e7cc      	b.n	801492c <_malloc_r+0x2c>
 8014992:	1cc4      	adds	r4, r0, #3
 8014994:	f024 0403 	bic.w	r4, r4, #3
 8014998:	42a0      	cmp	r0, r4
 801499a:	d005      	beq.n	80149a8 <_malloc_r+0xa8>
 801499c:	1a21      	subs	r1, r4, r0
 801499e:	4630      	mov	r0, r6
 80149a0:	f000 fb48 	bl	8015034 <_sbrk_r>
 80149a4:	3001      	adds	r0, #1
 80149a6:	d0cf      	beq.n	8014948 <_malloc_r+0x48>
 80149a8:	6025      	str	r5, [r4, #0]
 80149aa:	e7db      	b.n	8014964 <_malloc_r+0x64>
 80149ac:	2000d6e8 	.word	0x2000d6e8
 80149b0:	2000d6ec 	.word	0x2000d6ec

080149b4 <__sfputc_r>:
 80149b4:	6893      	ldr	r3, [r2, #8]
 80149b6:	3b01      	subs	r3, #1
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	b410      	push	{r4}
 80149bc:	6093      	str	r3, [r2, #8]
 80149be:	da08      	bge.n	80149d2 <__sfputc_r+0x1e>
 80149c0:	6994      	ldr	r4, [r2, #24]
 80149c2:	42a3      	cmp	r3, r4
 80149c4:	db01      	blt.n	80149ca <__sfputc_r+0x16>
 80149c6:	290a      	cmp	r1, #10
 80149c8:	d103      	bne.n	80149d2 <__sfputc_r+0x1e>
 80149ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149ce:	f000 bc29 	b.w	8015224 <__swbuf_r>
 80149d2:	6813      	ldr	r3, [r2, #0]
 80149d4:	1c58      	adds	r0, r3, #1
 80149d6:	6010      	str	r0, [r2, #0]
 80149d8:	7019      	strb	r1, [r3, #0]
 80149da:	4608      	mov	r0, r1
 80149dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149e0:	4770      	bx	lr

080149e2 <__sfputs_r>:
 80149e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e4:	4606      	mov	r6, r0
 80149e6:	460f      	mov	r7, r1
 80149e8:	4614      	mov	r4, r2
 80149ea:	18d5      	adds	r5, r2, r3
 80149ec:	42ac      	cmp	r4, r5
 80149ee:	d101      	bne.n	80149f4 <__sfputs_r+0x12>
 80149f0:	2000      	movs	r0, #0
 80149f2:	e007      	b.n	8014a04 <__sfputs_r+0x22>
 80149f4:	463a      	mov	r2, r7
 80149f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149fa:	4630      	mov	r0, r6
 80149fc:	f7ff ffda 	bl	80149b4 <__sfputc_r>
 8014a00:	1c43      	adds	r3, r0, #1
 8014a02:	d1f3      	bne.n	80149ec <__sfputs_r+0xa>
 8014a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a08 <_vfiprintf_r>:
 8014a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	b09d      	sub	sp, #116	; 0x74
 8014a10:	4617      	mov	r7, r2
 8014a12:	461d      	mov	r5, r3
 8014a14:	4606      	mov	r6, r0
 8014a16:	b118      	cbz	r0, 8014a20 <_vfiprintf_r+0x18>
 8014a18:	6983      	ldr	r3, [r0, #24]
 8014a1a:	b90b      	cbnz	r3, 8014a20 <_vfiprintf_r+0x18>
 8014a1c:	f000 fdba 	bl	8015594 <__sinit>
 8014a20:	4b7c      	ldr	r3, [pc, #496]	; (8014c14 <_vfiprintf_r+0x20c>)
 8014a22:	429c      	cmp	r4, r3
 8014a24:	d158      	bne.n	8014ad8 <_vfiprintf_r+0xd0>
 8014a26:	6874      	ldr	r4, [r6, #4]
 8014a28:	89a3      	ldrh	r3, [r4, #12]
 8014a2a:	0718      	lsls	r0, r3, #28
 8014a2c:	d55e      	bpl.n	8014aec <_vfiprintf_r+0xe4>
 8014a2e:	6923      	ldr	r3, [r4, #16]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d05b      	beq.n	8014aec <_vfiprintf_r+0xe4>
 8014a34:	2300      	movs	r3, #0
 8014a36:	9309      	str	r3, [sp, #36]	; 0x24
 8014a38:	2320      	movs	r3, #32
 8014a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a3e:	2330      	movs	r3, #48	; 0x30
 8014a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a44:	9503      	str	r5, [sp, #12]
 8014a46:	f04f 0b01 	mov.w	fp, #1
 8014a4a:	46b8      	mov	r8, r7
 8014a4c:	4645      	mov	r5, r8
 8014a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014a52:	b10b      	cbz	r3, 8014a58 <_vfiprintf_r+0x50>
 8014a54:	2b25      	cmp	r3, #37	; 0x25
 8014a56:	d154      	bne.n	8014b02 <_vfiprintf_r+0xfa>
 8014a58:	ebb8 0a07 	subs.w	sl, r8, r7
 8014a5c:	d00b      	beq.n	8014a76 <_vfiprintf_r+0x6e>
 8014a5e:	4653      	mov	r3, sl
 8014a60:	463a      	mov	r2, r7
 8014a62:	4621      	mov	r1, r4
 8014a64:	4630      	mov	r0, r6
 8014a66:	f7ff ffbc 	bl	80149e2 <__sfputs_r>
 8014a6a:	3001      	adds	r0, #1
 8014a6c:	f000 80c2 	beq.w	8014bf4 <_vfiprintf_r+0x1ec>
 8014a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a72:	4453      	add	r3, sl
 8014a74:	9309      	str	r3, [sp, #36]	; 0x24
 8014a76:	f898 3000 	ldrb.w	r3, [r8]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f000 80ba 	beq.w	8014bf4 <_vfiprintf_r+0x1ec>
 8014a80:	2300      	movs	r3, #0
 8014a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a8a:	9304      	str	r3, [sp, #16]
 8014a8c:	9307      	str	r3, [sp, #28]
 8014a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a92:	931a      	str	r3, [sp, #104]	; 0x68
 8014a94:	46a8      	mov	r8, r5
 8014a96:	2205      	movs	r2, #5
 8014a98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014a9c:	485e      	ldr	r0, [pc, #376]	; (8014c18 <_vfiprintf_r+0x210>)
 8014a9e:	f7eb fbaf 	bl	8000200 <memchr>
 8014aa2:	9b04      	ldr	r3, [sp, #16]
 8014aa4:	bb78      	cbnz	r0, 8014b06 <_vfiprintf_r+0xfe>
 8014aa6:	06d9      	lsls	r1, r3, #27
 8014aa8:	bf44      	itt	mi
 8014aaa:	2220      	movmi	r2, #32
 8014aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014ab0:	071a      	lsls	r2, r3, #28
 8014ab2:	bf44      	itt	mi
 8014ab4:	222b      	movmi	r2, #43	; 0x2b
 8014ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014aba:	782a      	ldrb	r2, [r5, #0]
 8014abc:	2a2a      	cmp	r2, #42	; 0x2a
 8014abe:	d02a      	beq.n	8014b16 <_vfiprintf_r+0x10e>
 8014ac0:	9a07      	ldr	r2, [sp, #28]
 8014ac2:	46a8      	mov	r8, r5
 8014ac4:	2000      	movs	r0, #0
 8014ac6:	250a      	movs	r5, #10
 8014ac8:	4641      	mov	r1, r8
 8014aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ace:	3b30      	subs	r3, #48	; 0x30
 8014ad0:	2b09      	cmp	r3, #9
 8014ad2:	d969      	bls.n	8014ba8 <_vfiprintf_r+0x1a0>
 8014ad4:	b360      	cbz	r0, 8014b30 <_vfiprintf_r+0x128>
 8014ad6:	e024      	b.n	8014b22 <_vfiprintf_r+0x11a>
 8014ad8:	4b50      	ldr	r3, [pc, #320]	; (8014c1c <_vfiprintf_r+0x214>)
 8014ada:	429c      	cmp	r4, r3
 8014adc:	d101      	bne.n	8014ae2 <_vfiprintf_r+0xda>
 8014ade:	68b4      	ldr	r4, [r6, #8]
 8014ae0:	e7a2      	b.n	8014a28 <_vfiprintf_r+0x20>
 8014ae2:	4b4f      	ldr	r3, [pc, #316]	; (8014c20 <_vfiprintf_r+0x218>)
 8014ae4:	429c      	cmp	r4, r3
 8014ae6:	bf08      	it	eq
 8014ae8:	68f4      	ldreq	r4, [r6, #12]
 8014aea:	e79d      	b.n	8014a28 <_vfiprintf_r+0x20>
 8014aec:	4621      	mov	r1, r4
 8014aee:	4630      	mov	r0, r6
 8014af0:	f000 fbea 	bl	80152c8 <__swsetup_r>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d09d      	beq.n	8014a34 <_vfiprintf_r+0x2c>
 8014af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014afc:	b01d      	add	sp, #116	; 0x74
 8014afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b02:	46a8      	mov	r8, r5
 8014b04:	e7a2      	b.n	8014a4c <_vfiprintf_r+0x44>
 8014b06:	4a44      	ldr	r2, [pc, #272]	; (8014c18 <_vfiprintf_r+0x210>)
 8014b08:	1a80      	subs	r0, r0, r2
 8014b0a:	fa0b f000 	lsl.w	r0, fp, r0
 8014b0e:	4318      	orrs	r0, r3
 8014b10:	9004      	str	r0, [sp, #16]
 8014b12:	4645      	mov	r5, r8
 8014b14:	e7be      	b.n	8014a94 <_vfiprintf_r+0x8c>
 8014b16:	9a03      	ldr	r2, [sp, #12]
 8014b18:	1d11      	adds	r1, r2, #4
 8014b1a:	6812      	ldr	r2, [r2, #0]
 8014b1c:	9103      	str	r1, [sp, #12]
 8014b1e:	2a00      	cmp	r2, #0
 8014b20:	db01      	blt.n	8014b26 <_vfiprintf_r+0x11e>
 8014b22:	9207      	str	r2, [sp, #28]
 8014b24:	e004      	b.n	8014b30 <_vfiprintf_r+0x128>
 8014b26:	4252      	negs	r2, r2
 8014b28:	f043 0302 	orr.w	r3, r3, #2
 8014b2c:	9207      	str	r2, [sp, #28]
 8014b2e:	9304      	str	r3, [sp, #16]
 8014b30:	f898 3000 	ldrb.w	r3, [r8]
 8014b34:	2b2e      	cmp	r3, #46	; 0x2e
 8014b36:	d10e      	bne.n	8014b56 <_vfiprintf_r+0x14e>
 8014b38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b3e:	d138      	bne.n	8014bb2 <_vfiprintf_r+0x1aa>
 8014b40:	9b03      	ldr	r3, [sp, #12]
 8014b42:	1d1a      	adds	r2, r3, #4
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	9203      	str	r2, [sp, #12]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	bfb8      	it	lt
 8014b4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014b50:	f108 0802 	add.w	r8, r8, #2
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	4d33      	ldr	r5, [pc, #204]	; (8014c24 <_vfiprintf_r+0x21c>)
 8014b58:	f898 1000 	ldrb.w	r1, [r8]
 8014b5c:	2203      	movs	r2, #3
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f7eb fb4e 	bl	8000200 <memchr>
 8014b64:	b140      	cbz	r0, 8014b78 <_vfiprintf_r+0x170>
 8014b66:	2340      	movs	r3, #64	; 0x40
 8014b68:	1b40      	subs	r0, r0, r5
 8014b6a:	fa03 f000 	lsl.w	r0, r3, r0
 8014b6e:	9b04      	ldr	r3, [sp, #16]
 8014b70:	4303      	orrs	r3, r0
 8014b72:	f108 0801 	add.w	r8, r8, #1
 8014b76:	9304      	str	r3, [sp, #16]
 8014b78:	f898 1000 	ldrb.w	r1, [r8]
 8014b7c:	482a      	ldr	r0, [pc, #168]	; (8014c28 <_vfiprintf_r+0x220>)
 8014b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b82:	2206      	movs	r2, #6
 8014b84:	f108 0701 	add.w	r7, r8, #1
 8014b88:	f7eb fb3a 	bl	8000200 <memchr>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d037      	beq.n	8014c00 <_vfiprintf_r+0x1f8>
 8014b90:	4b26      	ldr	r3, [pc, #152]	; (8014c2c <_vfiprintf_r+0x224>)
 8014b92:	bb1b      	cbnz	r3, 8014bdc <_vfiprintf_r+0x1d4>
 8014b94:	9b03      	ldr	r3, [sp, #12]
 8014b96:	3307      	adds	r3, #7
 8014b98:	f023 0307 	bic.w	r3, r3, #7
 8014b9c:	3308      	adds	r3, #8
 8014b9e:	9303      	str	r3, [sp, #12]
 8014ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ba2:	444b      	add	r3, r9
 8014ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ba6:	e750      	b.n	8014a4a <_vfiprintf_r+0x42>
 8014ba8:	fb05 3202 	mla	r2, r5, r2, r3
 8014bac:	2001      	movs	r0, #1
 8014bae:	4688      	mov	r8, r1
 8014bb0:	e78a      	b.n	8014ac8 <_vfiprintf_r+0xc0>
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	f108 0801 	add.w	r8, r8, #1
 8014bb8:	9305      	str	r3, [sp, #20]
 8014bba:	4619      	mov	r1, r3
 8014bbc:	250a      	movs	r5, #10
 8014bbe:	4640      	mov	r0, r8
 8014bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bc4:	3a30      	subs	r2, #48	; 0x30
 8014bc6:	2a09      	cmp	r2, #9
 8014bc8:	d903      	bls.n	8014bd2 <_vfiprintf_r+0x1ca>
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d0c3      	beq.n	8014b56 <_vfiprintf_r+0x14e>
 8014bce:	9105      	str	r1, [sp, #20]
 8014bd0:	e7c1      	b.n	8014b56 <_vfiprintf_r+0x14e>
 8014bd2:	fb05 2101 	mla	r1, r5, r1, r2
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	4680      	mov	r8, r0
 8014bda:	e7f0      	b.n	8014bbe <_vfiprintf_r+0x1b6>
 8014bdc:	ab03      	add	r3, sp, #12
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	4622      	mov	r2, r4
 8014be2:	4b13      	ldr	r3, [pc, #76]	; (8014c30 <_vfiprintf_r+0x228>)
 8014be4:	a904      	add	r1, sp, #16
 8014be6:	4630      	mov	r0, r6
 8014be8:	f3af 8000 	nop.w
 8014bec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014bf0:	4681      	mov	r9, r0
 8014bf2:	d1d5      	bne.n	8014ba0 <_vfiprintf_r+0x198>
 8014bf4:	89a3      	ldrh	r3, [r4, #12]
 8014bf6:	065b      	lsls	r3, r3, #25
 8014bf8:	f53f af7e 	bmi.w	8014af8 <_vfiprintf_r+0xf0>
 8014bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bfe:	e77d      	b.n	8014afc <_vfiprintf_r+0xf4>
 8014c00:	ab03      	add	r3, sp, #12
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	4622      	mov	r2, r4
 8014c06:	4b0a      	ldr	r3, [pc, #40]	; (8014c30 <_vfiprintf_r+0x228>)
 8014c08:	a904      	add	r1, sp, #16
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	f000 f888 	bl	8014d20 <_printf_i>
 8014c10:	e7ec      	b.n	8014bec <_vfiprintf_r+0x1e4>
 8014c12:	bf00      	nop
 8014c14:	08016bd4 	.word	0x08016bd4
 8014c18:	08016b80 	.word	0x08016b80
 8014c1c:	08016bf4 	.word	0x08016bf4
 8014c20:	08016bb4 	.word	0x08016bb4
 8014c24:	08016b86 	.word	0x08016b86
 8014c28:	08016b8a 	.word	0x08016b8a
 8014c2c:	00000000 	.word	0x00000000
 8014c30:	080149e3 	.word	0x080149e3

08014c34 <_printf_common>:
 8014c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c38:	4691      	mov	r9, r2
 8014c3a:	461f      	mov	r7, r3
 8014c3c:	688a      	ldr	r2, [r1, #8]
 8014c3e:	690b      	ldr	r3, [r1, #16]
 8014c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c44:	4293      	cmp	r3, r2
 8014c46:	bfb8      	it	lt
 8014c48:	4613      	movlt	r3, r2
 8014c4a:	f8c9 3000 	str.w	r3, [r9]
 8014c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c52:	4606      	mov	r6, r0
 8014c54:	460c      	mov	r4, r1
 8014c56:	b112      	cbz	r2, 8014c5e <_printf_common+0x2a>
 8014c58:	3301      	adds	r3, #1
 8014c5a:	f8c9 3000 	str.w	r3, [r9]
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	0699      	lsls	r1, r3, #26
 8014c62:	bf42      	ittt	mi
 8014c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014c68:	3302      	addmi	r3, #2
 8014c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8014c6e:	6825      	ldr	r5, [r4, #0]
 8014c70:	f015 0506 	ands.w	r5, r5, #6
 8014c74:	d107      	bne.n	8014c86 <_printf_common+0x52>
 8014c76:	f104 0a19 	add.w	sl, r4, #25
 8014c7a:	68e3      	ldr	r3, [r4, #12]
 8014c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	42ab      	cmp	r3, r5
 8014c84:	dc28      	bgt.n	8014cd8 <_printf_common+0xa4>
 8014c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014c8a:	6822      	ldr	r2, [r4, #0]
 8014c8c:	3300      	adds	r3, #0
 8014c8e:	bf18      	it	ne
 8014c90:	2301      	movne	r3, #1
 8014c92:	0692      	lsls	r2, r2, #26
 8014c94:	d42d      	bmi.n	8014cf2 <_printf_common+0xbe>
 8014c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c9a:	4639      	mov	r1, r7
 8014c9c:	4630      	mov	r0, r6
 8014c9e:	47c0      	blx	r8
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	d020      	beq.n	8014ce6 <_printf_common+0xb2>
 8014ca4:	6823      	ldr	r3, [r4, #0]
 8014ca6:	68e5      	ldr	r5, [r4, #12]
 8014ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8014cac:	f003 0306 	and.w	r3, r3, #6
 8014cb0:	2b04      	cmp	r3, #4
 8014cb2:	bf08      	it	eq
 8014cb4:	1aad      	subeq	r5, r5, r2
 8014cb6:	68a3      	ldr	r3, [r4, #8]
 8014cb8:	6922      	ldr	r2, [r4, #16]
 8014cba:	bf0c      	ite	eq
 8014cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cc0:	2500      	movne	r5, #0
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	bfc4      	itt	gt
 8014cc6:	1a9b      	subgt	r3, r3, r2
 8014cc8:	18ed      	addgt	r5, r5, r3
 8014cca:	f04f 0900 	mov.w	r9, #0
 8014cce:	341a      	adds	r4, #26
 8014cd0:	454d      	cmp	r5, r9
 8014cd2:	d11a      	bne.n	8014d0a <_printf_common+0xd6>
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	e008      	b.n	8014cea <_printf_common+0xb6>
 8014cd8:	2301      	movs	r3, #1
 8014cda:	4652      	mov	r2, sl
 8014cdc:	4639      	mov	r1, r7
 8014cde:	4630      	mov	r0, r6
 8014ce0:	47c0      	blx	r8
 8014ce2:	3001      	adds	r0, #1
 8014ce4:	d103      	bne.n	8014cee <_printf_common+0xba>
 8014ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cee:	3501      	adds	r5, #1
 8014cf0:	e7c3      	b.n	8014c7a <_printf_common+0x46>
 8014cf2:	18e1      	adds	r1, r4, r3
 8014cf4:	1c5a      	adds	r2, r3, #1
 8014cf6:	2030      	movs	r0, #48	; 0x30
 8014cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014cfc:	4422      	add	r2, r4
 8014cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d06:	3302      	adds	r3, #2
 8014d08:	e7c5      	b.n	8014c96 <_printf_common+0x62>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4622      	mov	r2, r4
 8014d0e:	4639      	mov	r1, r7
 8014d10:	4630      	mov	r0, r6
 8014d12:	47c0      	blx	r8
 8014d14:	3001      	adds	r0, #1
 8014d16:	d0e6      	beq.n	8014ce6 <_printf_common+0xb2>
 8014d18:	f109 0901 	add.w	r9, r9, #1
 8014d1c:	e7d8      	b.n	8014cd0 <_printf_common+0x9c>
	...

08014d20 <_printf_i>:
 8014d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014d28:	460c      	mov	r4, r1
 8014d2a:	7e09      	ldrb	r1, [r1, #24]
 8014d2c:	b085      	sub	sp, #20
 8014d2e:	296e      	cmp	r1, #110	; 0x6e
 8014d30:	4617      	mov	r7, r2
 8014d32:	4606      	mov	r6, r0
 8014d34:	4698      	mov	r8, r3
 8014d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d38:	f000 80b3 	beq.w	8014ea2 <_printf_i+0x182>
 8014d3c:	d822      	bhi.n	8014d84 <_printf_i+0x64>
 8014d3e:	2963      	cmp	r1, #99	; 0x63
 8014d40:	d036      	beq.n	8014db0 <_printf_i+0x90>
 8014d42:	d80a      	bhi.n	8014d5a <_printf_i+0x3a>
 8014d44:	2900      	cmp	r1, #0
 8014d46:	f000 80b9 	beq.w	8014ebc <_printf_i+0x19c>
 8014d4a:	2958      	cmp	r1, #88	; 0x58
 8014d4c:	f000 8083 	beq.w	8014e56 <_printf_i+0x136>
 8014d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014d58:	e032      	b.n	8014dc0 <_printf_i+0xa0>
 8014d5a:	2964      	cmp	r1, #100	; 0x64
 8014d5c:	d001      	beq.n	8014d62 <_printf_i+0x42>
 8014d5e:	2969      	cmp	r1, #105	; 0x69
 8014d60:	d1f6      	bne.n	8014d50 <_printf_i+0x30>
 8014d62:	6820      	ldr	r0, [r4, #0]
 8014d64:	6813      	ldr	r3, [r2, #0]
 8014d66:	0605      	lsls	r5, r0, #24
 8014d68:	f103 0104 	add.w	r1, r3, #4
 8014d6c:	d52a      	bpl.n	8014dc4 <_printf_i+0xa4>
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	6011      	str	r1, [r2, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	da03      	bge.n	8014d7e <_printf_i+0x5e>
 8014d76:	222d      	movs	r2, #45	; 0x2d
 8014d78:	425b      	negs	r3, r3
 8014d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014d7e:	486f      	ldr	r0, [pc, #444]	; (8014f3c <_printf_i+0x21c>)
 8014d80:	220a      	movs	r2, #10
 8014d82:	e039      	b.n	8014df8 <_printf_i+0xd8>
 8014d84:	2973      	cmp	r1, #115	; 0x73
 8014d86:	f000 809d 	beq.w	8014ec4 <_printf_i+0x1a4>
 8014d8a:	d808      	bhi.n	8014d9e <_printf_i+0x7e>
 8014d8c:	296f      	cmp	r1, #111	; 0x6f
 8014d8e:	d020      	beq.n	8014dd2 <_printf_i+0xb2>
 8014d90:	2970      	cmp	r1, #112	; 0x70
 8014d92:	d1dd      	bne.n	8014d50 <_printf_i+0x30>
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	f043 0320 	orr.w	r3, r3, #32
 8014d9a:	6023      	str	r3, [r4, #0]
 8014d9c:	e003      	b.n	8014da6 <_printf_i+0x86>
 8014d9e:	2975      	cmp	r1, #117	; 0x75
 8014da0:	d017      	beq.n	8014dd2 <_printf_i+0xb2>
 8014da2:	2978      	cmp	r1, #120	; 0x78
 8014da4:	d1d4      	bne.n	8014d50 <_printf_i+0x30>
 8014da6:	2378      	movs	r3, #120	; 0x78
 8014da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014dac:	4864      	ldr	r0, [pc, #400]	; (8014f40 <_printf_i+0x220>)
 8014dae:	e055      	b.n	8014e5c <_printf_i+0x13c>
 8014db0:	6813      	ldr	r3, [r2, #0]
 8014db2:	1d19      	adds	r1, r3, #4
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	6011      	str	r1, [r2, #0]
 8014db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e08c      	b.n	8014ede <_printf_i+0x1be>
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	6011      	str	r1, [r2, #0]
 8014dc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014dcc:	bf18      	it	ne
 8014dce:	b21b      	sxthne	r3, r3
 8014dd0:	e7cf      	b.n	8014d72 <_printf_i+0x52>
 8014dd2:	6813      	ldr	r3, [r2, #0]
 8014dd4:	6825      	ldr	r5, [r4, #0]
 8014dd6:	1d18      	adds	r0, r3, #4
 8014dd8:	6010      	str	r0, [r2, #0]
 8014dda:	0628      	lsls	r0, r5, #24
 8014ddc:	d501      	bpl.n	8014de2 <_printf_i+0xc2>
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	e002      	b.n	8014de8 <_printf_i+0xc8>
 8014de2:	0668      	lsls	r0, r5, #25
 8014de4:	d5fb      	bpl.n	8014dde <_printf_i+0xbe>
 8014de6:	881b      	ldrh	r3, [r3, #0]
 8014de8:	4854      	ldr	r0, [pc, #336]	; (8014f3c <_printf_i+0x21c>)
 8014dea:	296f      	cmp	r1, #111	; 0x6f
 8014dec:	bf14      	ite	ne
 8014dee:	220a      	movne	r2, #10
 8014df0:	2208      	moveq	r2, #8
 8014df2:	2100      	movs	r1, #0
 8014df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014df8:	6865      	ldr	r5, [r4, #4]
 8014dfa:	60a5      	str	r5, [r4, #8]
 8014dfc:	2d00      	cmp	r5, #0
 8014dfe:	f2c0 8095 	blt.w	8014f2c <_printf_i+0x20c>
 8014e02:	6821      	ldr	r1, [r4, #0]
 8014e04:	f021 0104 	bic.w	r1, r1, #4
 8014e08:	6021      	str	r1, [r4, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d13d      	bne.n	8014e8a <_printf_i+0x16a>
 8014e0e:	2d00      	cmp	r5, #0
 8014e10:	f040 808e 	bne.w	8014f30 <_printf_i+0x210>
 8014e14:	4665      	mov	r5, ip
 8014e16:	2a08      	cmp	r2, #8
 8014e18:	d10b      	bne.n	8014e32 <_printf_i+0x112>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	07db      	lsls	r3, r3, #31
 8014e1e:	d508      	bpl.n	8014e32 <_printf_i+0x112>
 8014e20:	6923      	ldr	r3, [r4, #16]
 8014e22:	6862      	ldr	r2, [r4, #4]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	bfde      	ittt	le
 8014e28:	2330      	movle	r3, #48	; 0x30
 8014e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e2e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014e32:	ebac 0305 	sub.w	r3, ip, r5
 8014e36:	6123      	str	r3, [r4, #16]
 8014e38:	f8cd 8000 	str.w	r8, [sp]
 8014e3c:	463b      	mov	r3, r7
 8014e3e:	aa03      	add	r2, sp, #12
 8014e40:	4621      	mov	r1, r4
 8014e42:	4630      	mov	r0, r6
 8014e44:	f7ff fef6 	bl	8014c34 <_printf_common>
 8014e48:	3001      	adds	r0, #1
 8014e4a:	d14d      	bne.n	8014ee8 <_printf_i+0x1c8>
 8014e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e50:	b005      	add	sp, #20
 8014e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e56:	4839      	ldr	r0, [pc, #228]	; (8014f3c <_printf_i+0x21c>)
 8014e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014e5c:	6813      	ldr	r3, [r2, #0]
 8014e5e:	6821      	ldr	r1, [r4, #0]
 8014e60:	1d1d      	adds	r5, r3, #4
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	6015      	str	r5, [r2, #0]
 8014e66:	060a      	lsls	r2, r1, #24
 8014e68:	d50b      	bpl.n	8014e82 <_printf_i+0x162>
 8014e6a:	07ca      	lsls	r2, r1, #31
 8014e6c:	bf44      	itt	mi
 8014e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8014e72:	6021      	strmi	r1, [r4, #0]
 8014e74:	b91b      	cbnz	r3, 8014e7e <_printf_i+0x15e>
 8014e76:	6822      	ldr	r2, [r4, #0]
 8014e78:	f022 0220 	bic.w	r2, r2, #32
 8014e7c:	6022      	str	r2, [r4, #0]
 8014e7e:	2210      	movs	r2, #16
 8014e80:	e7b7      	b.n	8014df2 <_printf_i+0xd2>
 8014e82:	064d      	lsls	r5, r1, #25
 8014e84:	bf48      	it	mi
 8014e86:	b29b      	uxthmi	r3, r3
 8014e88:	e7ef      	b.n	8014e6a <_printf_i+0x14a>
 8014e8a:	4665      	mov	r5, ip
 8014e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e90:	fb02 3311 	mls	r3, r2, r1, r3
 8014e94:	5cc3      	ldrb	r3, [r0, r3]
 8014e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014e9a:	460b      	mov	r3, r1
 8014e9c:	2900      	cmp	r1, #0
 8014e9e:	d1f5      	bne.n	8014e8c <_printf_i+0x16c>
 8014ea0:	e7b9      	b.n	8014e16 <_printf_i+0xf6>
 8014ea2:	6813      	ldr	r3, [r2, #0]
 8014ea4:	6825      	ldr	r5, [r4, #0]
 8014ea6:	6961      	ldr	r1, [r4, #20]
 8014ea8:	1d18      	adds	r0, r3, #4
 8014eaa:	6010      	str	r0, [r2, #0]
 8014eac:	0628      	lsls	r0, r5, #24
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	d501      	bpl.n	8014eb6 <_printf_i+0x196>
 8014eb2:	6019      	str	r1, [r3, #0]
 8014eb4:	e002      	b.n	8014ebc <_printf_i+0x19c>
 8014eb6:	066a      	lsls	r2, r5, #25
 8014eb8:	d5fb      	bpl.n	8014eb2 <_printf_i+0x192>
 8014eba:	8019      	strh	r1, [r3, #0]
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	6123      	str	r3, [r4, #16]
 8014ec0:	4665      	mov	r5, ip
 8014ec2:	e7b9      	b.n	8014e38 <_printf_i+0x118>
 8014ec4:	6813      	ldr	r3, [r2, #0]
 8014ec6:	1d19      	adds	r1, r3, #4
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	681d      	ldr	r5, [r3, #0]
 8014ecc:	6862      	ldr	r2, [r4, #4]
 8014ece:	2100      	movs	r1, #0
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f7eb f995 	bl	8000200 <memchr>
 8014ed6:	b108      	cbz	r0, 8014edc <_printf_i+0x1bc>
 8014ed8:	1b40      	subs	r0, r0, r5
 8014eda:	6060      	str	r0, [r4, #4]
 8014edc:	6863      	ldr	r3, [r4, #4]
 8014ede:	6123      	str	r3, [r4, #16]
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ee6:	e7a7      	b.n	8014e38 <_printf_i+0x118>
 8014ee8:	6923      	ldr	r3, [r4, #16]
 8014eea:	462a      	mov	r2, r5
 8014eec:	4639      	mov	r1, r7
 8014eee:	4630      	mov	r0, r6
 8014ef0:	47c0      	blx	r8
 8014ef2:	3001      	adds	r0, #1
 8014ef4:	d0aa      	beq.n	8014e4c <_printf_i+0x12c>
 8014ef6:	6823      	ldr	r3, [r4, #0]
 8014ef8:	079b      	lsls	r3, r3, #30
 8014efa:	d413      	bmi.n	8014f24 <_printf_i+0x204>
 8014efc:	68e0      	ldr	r0, [r4, #12]
 8014efe:	9b03      	ldr	r3, [sp, #12]
 8014f00:	4298      	cmp	r0, r3
 8014f02:	bfb8      	it	lt
 8014f04:	4618      	movlt	r0, r3
 8014f06:	e7a3      	b.n	8014e50 <_printf_i+0x130>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	464a      	mov	r2, r9
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	4630      	mov	r0, r6
 8014f10:	47c0      	blx	r8
 8014f12:	3001      	adds	r0, #1
 8014f14:	d09a      	beq.n	8014e4c <_printf_i+0x12c>
 8014f16:	3501      	adds	r5, #1
 8014f18:	68e3      	ldr	r3, [r4, #12]
 8014f1a:	9a03      	ldr	r2, [sp, #12]
 8014f1c:	1a9b      	subs	r3, r3, r2
 8014f1e:	42ab      	cmp	r3, r5
 8014f20:	dcf2      	bgt.n	8014f08 <_printf_i+0x1e8>
 8014f22:	e7eb      	b.n	8014efc <_printf_i+0x1dc>
 8014f24:	2500      	movs	r5, #0
 8014f26:	f104 0919 	add.w	r9, r4, #25
 8014f2a:	e7f5      	b.n	8014f18 <_printf_i+0x1f8>
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1ac      	bne.n	8014e8a <_printf_i+0x16a>
 8014f30:	7803      	ldrb	r3, [r0, #0]
 8014f32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f3a:	e76c      	b.n	8014e16 <_printf_i+0xf6>
 8014f3c:	08016b91 	.word	0x08016b91
 8014f40:	08016ba2 	.word	0x08016ba2

08014f44 <putchar>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	4b08      	ldr	r3, [pc, #32]	; (8014f68 <putchar+0x24>)
 8014f48:	681c      	ldr	r4, [r3, #0]
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	b124      	cbz	r4, 8014f58 <putchar+0x14>
 8014f4e:	69a3      	ldr	r3, [r4, #24]
 8014f50:	b913      	cbnz	r3, 8014f58 <putchar+0x14>
 8014f52:	4620      	mov	r0, r4
 8014f54:	f000 fb1e 	bl	8015594 <__sinit>
 8014f58:	68a2      	ldr	r2, [r4, #8]
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f62:	f000 bdaf 	b.w	8015ac4 <_putc_r>
 8014f66:	bf00      	nop
 8014f68:	200001dc 	.word	0x200001dc

08014f6c <_puts_r>:
 8014f6c:	b570      	push	{r4, r5, r6, lr}
 8014f6e:	460e      	mov	r6, r1
 8014f70:	4605      	mov	r5, r0
 8014f72:	b118      	cbz	r0, 8014f7c <_puts_r+0x10>
 8014f74:	6983      	ldr	r3, [r0, #24]
 8014f76:	b90b      	cbnz	r3, 8014f7c <_puts_r+0x10>
 8014f78:	f000 fb0c 	bl	8015594 <__sinit>
 8014f7c:	69ab      	ldr	r3, [r5, #24]
 8014f7e:	68ac      	ldr	r4, [r5, #8]
 8014f80:	b913      	cbnz	r3, 8014f88 <_puts_r+0x1c>
 8014f82:	4628      	mov	r0, r5
 8014f84:	f000 fb06 	bl	8015594 <__sinit>
 8014f88:	4b23      	ldr	r3, [pc, #140]	; (8015018 <_puts_r+0xac>)
 8014f8a:	429c      	cmp	r4, r3
 8014f8c:	d117      	bne.n	8014fbe <_puts_r+0x52>
 8014f8e:	686c      	ldr	r4, [r5, #4]
 8014f90:	89a3      	ldrh	r3, [r4, #12]
 8014f92:	071b      	lsls	r3, r3, #28
 8014f94:	d51d      	bpl.n	8014fd2 <_puts_r+0x66>
 8014f96:	6923      	ldr	r3, [r4, #16]
 8014f98:	b1db      	cbz	r3, 8014fd2 <_puts_r+0x66>
 8014f9a:	3e01      	subs	r6, #1
 8014f9c:	68a3      	ldr	r3, [r4, #8]
 8014f9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	60a3      	str	r3, [r4, #8]
 8014fa6:	b9e9      	cbnz	r1, 8014fe4 <_puts_r+0x78>
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	da2e      	bge.n	801500a <_puts_r+0x9e>
 8014fac:	4622      	mov	r2, r4
 8014fae:	210a      	movs	r1, #10
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	f000 f937 	bl	8015224 <__swbuf_r>
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	d011      	beq.n	8014fde <_puts_r+0x72>
 8014fba:	200a      	movs	r0, #10
 8014fbc:	e011      	b.n	8014fe2 <_puts_r+0x76>
 8014fbe:	4b17      	ldr	r3, [pc, #92]	; (801501c <_puts_r+0xb0>)
 8014fc0:	429c      	cmp	r4, r3
 8014fc2:	d101      	bne.n	8014fc8 <_puts_r+0x5c>
 8014fc4:	68ac      	ldr	r4, [r5, #8]
 8014fc6:	e7e3      	b.n	8014f90 <_puts_r+0x24>
 8014fc8:	4b15      	ldr	r3, [pc, #84]	; (8015020 <_puts_r+0xb4>)
 8014fca:	429c      	cmp	r4, r3
 8014fcc:	bf08      	it	eq
 8014fce:	68ec      	ldreq	r4, [r5, #12]
 8014fd0:	e7de      	b.n	8014f90 <_puts_r+0x24>
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	f000 f977 	bl	80152c8 <__swsetup_r>
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	d0dd      	beq.n	8014f9a <_puts_r+0x2e>
 8014fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	da04      	bge.n	8014ff2 <_puts_r+0x86>
 8014fe8:	69a2      	ldr	r2, [r4, #24]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	dc06      	bgt.n	8014ffc <_puts_r+0x90>
 8014fee:	290a      	cmp	r1, #10
 8014ff0:	d004      	beq.n	8014ffc <_puts_r+0x90>
 8014ff2:	6823      	ldr	r3, [r4, #0]
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	6022      	str	r2, [r4, #0]
 8014ff8:	7019      	strb	r1, [r3, #0]
 8014ffa:	e7cf      	b.n	8014f9c <_puts_r+0x30>
 8014ffc:	4622      	mov	r2, r4
 8014ffe:	4628      	mov	r0, r5
 8015000:	f000 f910 	bl	8015224 <__swbuf_r>
 8015004:	3001      	adds	r0, #1
 8015006:	d1c9      	bne.n	8014f9c <_puts_r+0x30>
 8015008:	e7e9      	b.n	8014fde <_puts_r+0x72>
 801500a:	6823      	ldr	r3, [r4, #0]
 801500c:	200a      	movs	r0, #10
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	6022      	str	r2, [r4, #0]
 8015012:	7018      	strb	r0, [r3, #0]
 8015014:	e7e5      	b.n	8014fe2 <_puts_r+0x76>
 8015016:	bf00      	nop
 8015018:	08016bd4 	.word	0x08016bd4
 801501c:	08016bf4 	.word	0x08016bf4
 8015020:	08016bb4 	.word	0x08016bb4

08015024 <puts>:
 8015024:	4b02      	ldr	r3, [pc, #8]	; (8015030 <puts+0xc>)
 8015026:	4601      	mov	r1, r0
 8015028:	6818      	ldr	r0, [r3, #0]
 801502a:	f7ff bf9f 	b.w	8014f6c <_puts_r>
 801502e:	bf00      	nop
 8015030:	200001dc 	.word	0x200001dc

08015034 <_sbrk_r>:
 8015034:	b538      	push	{r3, r4, r5, lr}
 8015036:	4c06      	ldr	r4, [pc, #24]	; (8015050 <_sbrk_r+0x1c>)
 8015038:	2300      	movs	r3, #0
 801503a:	4605      	mov	r5, r0
 801503c:	4608      	mov	r0, r1
 801503e:	6023      	str	r3, [r4, #0]
 8015040:	f7ef fee6 	bl	8004e10 <_sbrk>
 8015044:	1c43      	adds	r3, r0, #1
 8015046:	d102      	bne.n	801504e <_sbrk_r+0x1a>
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	b103      	cbz	r3, 801504e <_sbrk_r+0x1a>
 801504c:	602b      	str	r3, [r5, #0]
 801504e:	bd38      	pop	{r3, r4, r5, pc}
 8015050:	200104c0 	.word	0x200104c0

08015054 <siprintf>:
 8015054:	b40e      	push	{r1, r2, r3}
 8015056:	b500      	push	{lr}
 8015058:	b09c      	sub	sp, #112	; 0x70
 801505a:	ab1d      	add	r3, sp, #116	; 0x74
 801505c:	9002      	str	r0, [sp, #8]
 801505e:	9006      	str	r0, [sp, #24]
 8015060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015064:	4809      	ldr	r0, [pc, #36]	; (801508c <siprintf+0x38>)
 8015066:	9107      	str	r1, [sp, #28]
 8015068:	9104      	str	r1, [sp, #16]
 801506a:	4909      	ldr	r1, [pc, #36]	; (8015090 <siprintf+0x3c>)
 801506c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015070:	9105      	str	r1, [sp, #20]
 8015072:	6800      	ldr	r0, [r0, #0]
 8015074:	9301      	str	r3, [sp, #4]
 8015076:	a902      	add	r1, sp, #8
 8015078:	f000 fc2c 	bl	80158d4 <_svfiprintf_r>
 801507c:	9b02      	ldr	r3, [sp, #8]
 801507e:	2200      	movs	r2, #0
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	b01c      	add	sp, #112	; 0x70
 8015084:	f85d eb04 	ldr.w	lr, [sp], #4
 8015088:	b003      	add	sp, #12
 801508a:	4770      	bx	lr
 801508c:	200001dc 	.word	0x200001dc
 8015090:	ffff0208 	.word	0xffff0208

08015094 <strcpy>:
 8015094:	4603      	mov	r3, r0
 8015096:	f811 2b01 	ldrb.w	r2, [r1], #1
 801509a:	f803 2b01 	strb.w	r2, [r3], #1
 801509e:	2a00      	cmp	r2, #0
 80150a0:	d1f9      	bne.n	8015096 <strcpy+0x2>
 80150a2:	4770      	bx	lr

080150a4 <strncpy>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	3901      	subs	r1, #1
 80150a8:	4604      	mov	r4, r0
 80150aa:	b902      	cbnz	r2, 80150ae <strncpy+0xa>
 80150ac:	bd70      	pop	{r4, r5, r6, pc}
 80150ae:	4623      	mov	r3, r4
 80150b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80150b4:	f803 5b01 	strb.w	r5, [r3], #1
 80150b8:	1e56      	subs	r6, r2, #1
 80150ba:	b92d      	cbnz	r5, 80150c8 <strncpy+0x24>
 80150bc:	4414      	add	r4, r2
 80150be:	42a3      	cmp	r3, r4
 80150c0:	d0f4      	beq.n	80150ac <strncpy+0x8>
 80150c2:	f803 5b01 	strb.w	r5, [r3], #1
 80150c6:	e7fa      	b.n	80150be <strncpy+0x1a>
 80150c8:	461c      	mov	r4, r3
 80150ca:	4632      	mov	r2, r6
 80150cc:	e7ed      	b.n	80150aa <strncpy+0x6>

080150ce <strstr>:
 80150ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150d0:	7803      	ldrb	r3, [r0, #0]
 80150d2:	b17b      	cbz	r3, 80150f4 <strstr+0x26>
 80150d4:	4604      	mov	r4, r0
 80150d6:	7823      	ldrb	r3, [r4, #0]
 80150d8:	4620      	mov	r0, r4
 80150da:	1c66      	adds	r6, r4, #1
 80150dc:	b17b      	cbz	r3, 80150fe <strstr+0x30>
 80150de:	1e4a      	subs	r2, r1, #1
 80150e0:	1e63      	subs	r3, r4, #1
 80150e2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80150e6:	b14d      	cbz	r5, 80150fc <strstr+0x2e>
 80150e8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80150ec:	42af      	cmp	r7, r5
 80150ee:	4634      	mov	r4, r6
 80150f0:	d0f7      	beq.n	80150e2 <strstr+0x14>
 80150f2:	e7f0      	b.n	80150d6 <strstr+0x8>
 80150f4:	780b      	ldrb	r3, [r1, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	bf18      	it	ne
 80150fa:	2000      	movne	r0, #0
 80150fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150fe:	4618      	mov	r0, r3
 8015100:	e7fc      	b.n	80150fc <strstr+0x2e>

08015102 <_strtol_l.isra.0>:
 8015102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015106:	4680      	mov	r8, r0
 8015108:	4689      	mov	r9, r1
 801510a:	4692      	mov	sl, r2
 801510c:	461e      	mov	r6, r3
 801510e:	460f      	mov	r7, r1
 8015110:	463d      	mov	r5, r7
 8015112:	9808      	ldr	r0, [sp, #32]
 8015114:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015118:	f000 fac6 	bl	80156a8 <__locale_ctype_ptr_l>
 801511c:	4420      	add	r0, r4
 801511e:	7843      	ldrb	r3, [r0, #1]
 8015120:	f013 0308 	ands.w	r3, r3, #8
 8015124:	d132      	bne.n	801518c <_strtol_l.isra.0+0x8a>
 8015126:	2c2d      	cmp	r4, #45	; 0x2d
 8015128:	d132      	bne.n	8015190 <_strtol_l.isra.0+0x8e>
 801512a:	787c      	ldrb	r4, [r7, #1]
 801512c:	1cbd      	adds	r5, r7, #2
 801512e:	2201      	movs	r2, #1
 8015130:	2e00      	cmp	r6, #0
 8015132:	d05d      	beq.n	80151f0 <_strtol_l.isra.0+0xee>
 8015134:	2e10      	cmp	r6, #16
 8015136:	d109      	bne.n	801514c <_strtol_l.isra.0+0x4a>
 8015138:	2c30      	cmp	r4, #48	; 0x30
 801513a:	d107      	bne.n	801514c <_strtol_l.isra.0+0x4a>
 801513c:	782b      	ldrb	r3, [r5, #0]
 801513e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015142:	2b58      	cmp	r3, #88	; 0x58
 8015144:	d14f      	bne.n	80151e6 <_strtol_l.isra.0+0xe4>
 8015146:	786c      	ldrb	r4, [r5, #1]
 8015148:	2610      	movs	r6, #16
 801514a:	3502      	adds	r5, #2
 801514c:	2a00      	cmp	r2, #0
 801514e:	bf14      	ite	ne
 8015150:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015154:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015158:	2700      	movs	r7, #0
 801515a:	fbb1 fcf6 	udiv	ip, r1, r6
 801515e:	4638      	mov	r0, r7
 8015160:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015164:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015168:	2b09      	cmp	r3, #9
 801516a:	d817      	bhi.n	801519c <_strtol_l.isra.0+0x9a>
 801516c:	461c      	mov	r4, r3
 801516e:	42a6      	cmp	r6, r4
 8015170:	dd23      	ble.n	80151ba <_strtol_l.isra.0+0xb8>
 8015172:	1c7b      	adds	r3, r7, #1
 8015174:	d007      	beq.n	8015186 <_strtol_l.isra.0+0x84>
 8015176:	4584      	cmp	ip, r0
 8015178:	d31c      	bcc.n	80151b4 <_strtol_l.isra.0+0xb2>
 801517a:	d101      	bne.n	8015180 <_strtol_l.isra.0+0x7e>
 801517c:	45a6      	cmp	lr, r4
 801517e:	db19      	blt.n	80151b4 <_strtol_l.isra.0+0xb2>
 8015180:	fb00 4006 	mla	r0, r0, r6, r4
 8015184:	2701      	movs	r7, #1
 8015186:	f815 4b01 	ldrb.w	r4, [r5], #1
 801518a:	e7eb      	b.n	8015164 <_strtol_l.isra.0+0x62>
 801518c:	462f      	mov	r7, r5
 801518e:	e7bf      	b.n	8015110 <_strtol_l.isra.0+0xe>
 8015190:	2c2b      	cmp	r4, #43	; 0x2b
 8015192:	bf04      	itt	eq
 8015194:	1cbd      	addeq	r5, r7, #2
 8015196:	787c      	ldrbeq	r4, [r7, #1]
 8015198:	461a      	mov	r2, r3
 801519a:	e7c9      	b.n	8015130 <_strtol_l.isra.0+0x2e>
 801519c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80151a0:	2b19      	cmp	r3, #25
 80151a2:	d801      	bhi.n	80151a8 <_strtol_l.isra.0+0xa6>
 80151a4:	3c37      	subs	r4, #55	; 0x37
 80151a6:	e7e2      	b.n	801516e <_strtol_l.isra.0+0x6c>
 80151a8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80151ac:	2b19      	cmp	r3, #25
 80151ae:	d804      	bhi.n	80151ba <_strtol_l.isra.0+0xb8>
 80151b0:	3c57      	subs	r4, #87	; 0x57
 80151b2:	e7dc      	b.n	801516e <_strtol_l.isra.0+0x6c>
 80151b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80151b8:	e7e5      	b.n	8015186 <_strtol_l.isra.0+0x84>
 80151ba:	1c7b      	adds	r3, r7, #1
 80151bc:	d108      	bne.n	80151d0 <_strtol_l.isra.0+0xce>
 80151be:	2322      	movs	r3, #34	; 0x22
 80151c0:	f8c8 3000 	str.w	r3, [r8]
 80151c4:	4608      	mov	r0, r1
 80151c6:	f1ba 0f00 	cmp.w	sl, #0
 80151ca:	d107      	bne.n	80151dc <_strtol_l.isra.0+0xda>
 80151cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151d0:	b102      	cbz	r2, 80151d4 <_strtol_l.isra.0+0xd2>
 80151d2:	4240      	negs	r0, r0
 80151d4:	f1ba 0f00 	cmp.w	sl, #0
 80151d8:	d0f8      	beq.n	80151cc <_strtol_l.isra.0+0xca>
 80151da:	b10f      	cbz	r7, 80151e0 <_strtol_l.isra.0+0xde>
 80151dc:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80151e0:	f8ca 9000 	str.w	r9, [sl]
 80151e4:	e7f2      	b.n	80151cc <_strtol_l.isra.0+0xca>
 80151e6:	2430      	movs	r4, #48	; 0x30
 80151e8:	2e00      	cmp	r6, #0
 80151ea:	d1af      	bne.n	801514c <_strtol_l.isra.0+0x4a>
 80151ec:	2608      	movs	r6, #8
 80151ee:	e7ad      	b.n	801514c <_strtol_l.isra.0+0x4a>
 80151f0:	2c30      	cmp	r4, #48	; 0x30
 80151f2:	d0a3      	beq.n	801513c <_strtol_l.isra.0+0x3a>
 80151f4:	260a      	movs	r6, #10
 80151f6:	e7a9      	b.n	801514c <_strtol_l.isra.0+0x4a>

080151f8 <strtol>:
 80151f8:	4b08      	ldr	r3, [pc, #32]	; (801521c <strtol+0x24>)
 80151fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151fc:	681c      	ldr	r4, [r3, #0]
 80151fe:	4d08      	ldr	r5, [pc, #32]	; (8015220 <strtol+0x28>)
 8015200:	6a23      	ldr	r3, [r4, #32]
 8015202:	2b00      	cmp	r3, #0
 8015204:	bf08      	it	eq
 8015206:	462b      	moveq	r3, r5
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	4613      	mov	r3, r2
 801520c:	460a      	mov	r2, r1
 801520e:	4601      	mov	r1, r0
 8015210:	4620      	mov	r0, r4
 8015212:	f7ff ff76 	bl	8015102 <_strtol_l.isra.0>
 8015216:	b003      	add	sp, #12
 8015218:	bd30      	pop	{r4, r5, pc}
 801521a:	bf00      	nop
 801521c:	200001dc 	.word	0x200001dc
 8015220:	20000240 	.word	0x20000240

08015224 <__swbuf_r>:
 8015224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015226:	460e      	mov	r6, r1
 8015228:	4614      	mov	r4, r2
 801522a:	4605      	mov	r5, r0
 801522c:	b118      	cbz	r0, 8015236 <__swbuf_r+0x12>
 801522e:	6983      	ldr	r3, [r0, #24]
 8015230:	b90b      	cbnz	r3, 8015236 <__swbuf_r+0x12>
 8015232:	f000 f9af 	bl	8015594 <__sinit>
 8015236:	4b21      	ldr	r3, [pc, #132]	; (80152bc <__swbuf_r+0x98>)
 8015238:	429c      	cmp	r4, r3
 801523a:	d12a      	bne.n	8015292 <__swbuf_r+0x6e>
 801523c:	686c      	ldr	r4, [r5, #4]
 801523e:	69a3      	ldr	r3, [r4, #24]
 8015240:	60a3      	str	r3, [r4, #8]
 8015242:	89a3      	ldrh	r3, [r4, #12]
 8015244:	071a      	lsls	r2, r3, #28
 8015246:	d52e      	bpl.n	80152a6 <__swbuf_r+0x82>
 8015248:	6923      	ldr	r3, [r4, #16]
 801524a:	b363      	cbz	r3, 80152a6 <__swbuf_r+0x82>
 801524c:	6923      	ldr	r3, [r4, #16]
 801524e:	6820      	ldr	r0, [r4, #0]
 8015250:	1ac0      	subs	r0, r0, r3
 8015252:	6963      	ldr	r3, [r4, #20]
 8015254:	b2f6      	uxtb	r6, r6
 8015256:	4283      	cmp	r3, r0
 8015258:	4637      	mov	r7, r6
 801525a:	dc04      	bgt.n	8015266 <__swbuf_r+0x42>
 801525c:	4621      	mov	r1, r4
 801525e:	4628      	mov	r0, r5
 8015260:	f000 f92e 	bl	80154c0 <_fflush_r>
 8015264:	bb28      	cbnz	r0, 80152b2 <__swbuf_r+0x8e>
 8015266:	68a3      	ldr	r3, [r4, #8]
 8015268:	3b01      	subs	r3, #1
 801526a:	60a3      	str	r3, [r4, #8]
 801526c:	6823      	ldr	r3, [r4, #0]
 801526e:	1c5a      	adds	r2, r3, #1
 8015270:	6022      	str	r2, [r4, #0]
 8015272:	701e      	strb	r6, [r3, #0]
 8015274:	6963      	ldr	r3, [r4, #20]
 8015276:	3001      	adds	r0, #1
 8015278:	4283      	cmp	r3, r0
 801527a:	d004      	beq.n	8015286 <__swbuf_r+0x62>
 801527c:	89a3      	ldrh	r3, [r4, #12]
 801527e:	07db      	lsls	r3, r3, #31
 8015280:	d519      	bpl.n	80152b6 <__swbuf_r+0x92>
 8015282:	2e0a      	cmp	r6, #10
 8015284:	d117      	bne.n	80152b6 <__swbuf_r+0x92>
 8015286:	4621      	mov	r1, r4
 8015288:	4628      	mov	r0, r5
 801528a:	f000 f919 	bl	80154c0 <_fflush_r>
 801528e:	b190      	cbz	r0, 80152b6 <__swbuf_r+0x92>
 8015290:	e00f      	b.n	80152b2 <__swbuf_r+0x8e>
 8015292:	4b0b      	ldr	r3, [pc, #44]	; (80152c0 <__swbuf_r+0x9c>)
 8015294:	429c      	cmp	r4, r3
 8015296:	d101      	bne.n	801529c <__swbuf_r+0x78>
 8015298:	68ac      	ldr	r4, [r5, #8]
 801529a:	e7d0      	b.n	801523e <__swbuf_r+0x1a>
 801529c:	4b09      	ldr	r3, [pc, #36]	; (80152c4 <__swbuf_r+0xa0>)
 801529e:	429c      	cmp	r4, r3
 80152a0:	bf08      	it	eq
 80152a2:	68ec      	ldreq	r4, [r5, #12]
 80152a4:	e7cb      	b.n	801523e <__swbuf_r+0x1a>
 80152a6:	4621      	mov	r1, r4
 80152a8:	4628      	mov	r0, r5
 80152aa:	f000 f80d 	bl	80152c8 <__swsetup_r>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	d0cc      	beq.n	801524c <__swbuf_r+0x28>
 80152b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80152b6:	4638      	mov	r0, r7
 80152b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ba:	bf00      	nop
 80152bc:	08016bd4 	.word	0x08016bd4
 80152c0:	08016bf4 	.word	0x08016bf4
 80152c4:	08016bb4 	.word	0x08016bb4

080152c8 <__swsetup_r>:
 80152c8:	4b32      	ldr	r3, [pc, #200]	; (8015394 <__swsetup_r+0xcc>)
 80152ca:	b570      	push	{r4, r5, r6, lr}
 80152cc:	681d      	ldr	r5, [r3, #0]
 80152ce:	4606      	mov	r6, r0
 80152d0:	460c      	mov	r4, r1
 80152d2:	b125      	cbz	r5, 80152de <__swsetup_r+0x16>
 80152d4:	69ab      	ldr	r3, [r5, #24]
 80152d6:	b913      	cbnz	r3, 80152de <__swsetup_r+0x16>
 80152d8:	4628      	mov	r0, r5
 80152da:	f000 f95b 	bl	8015594 <__sinit>
 80152de:	4b2e      	ldr	r3, [pc, #184]	; (8015398 <__swsetup_r+0xd0>)
 80152e0:	429c      	cmp	r4, r3
 80152e2:	d10f      	bne.n	8015304 <__swsetup_r+0x3c>
 80152e4:	686c      	ldr	r4, [r5, #4]
 80152e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	0715      	lsls	r5, r2, #28
 80152ee:	d42c      	bmi.n	801534a <__swsetup_r+0x82>
 80152f0:	06d0      	lsls	r0, r2, #27
 80152f2:	d411      	bmi.n	8015318 <__swsetup_r+0x50>
 80152f4:	2209      	movs	r2, #9
 80152f6:	6032      	str	r2, [r6, #0]
 80152f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152fc:	81a3      	strh	r3, [r4, #12]
 80152fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015302:	e03e      	b.n	8015382 <__swsetup_r+0xba>
 8015304:	4b25      	ldr	r3, [pc, #148]	; (801539c <__swsetup_r+0xd4>)
 8015306:	429c      	cmp	r4, r3
 8015308:	d101      	bne.n	801530e <__swsetup_r+0x46>
 801530a:	68ac      	ldr	r4, [r5, #8]
 801530c:	e7eb      	b.n	80152e6 <__swsetup_r+0x1e>
 801530e:	4b24      	ldr	r3, [pc, #144]	; (80153a0 <__swsetup_r+0xd8>)
 8015310:	429c      	cmp	r4, r3
 8015312:	bf08      	it	eq
 8015314:	68ec      	ldreq	r4, [r5, #12]
 8015316:	e7e6      	b.n	80152e6 <__swsetup_r+0x1e>
 8015318:	0751      	lsls	r1, r2, #29
 801531a:	d512      	bpl.n	8015342 <__swsetup_r+0x7a>
 801531c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801531e:	b141      	cbz	r1, 8015332 <__swsetup_r+0x6a>
 8015320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015324:	4299      	cmp	r1, r3
 8015326:	d002      	beq.n	801532e <__swsetup_r+0x66>
 8015328:	4630      	mov	r0, r6
 801532a:	f7ff fa9b 	bl	8014864 <_free_r>
 801532e:	2300      	movs	r3, #0
 8015330:	6363      	str	r3, [r4, #52]	; 0x34
 8015332:	89a3      	ldrh	r3, [r4, #12]
 8015334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015338:	81a3      	strh	r3, [r4, #12]
 801533a:	2300      	movs	r3, #0
 801533c:	6063      	str	r3, [r4, #4]
 801533e:	6923      	ldr	r3, [r4, #16]
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	89a3      	ldrh	r3, [r4, #12]
 8015344:	f043 0308 	orr.w	r3, r3, #8
 8015348:	81a3      	strh	r3, [r4, #12]
 801534a:	6923      	ldr	r3, [r4, #16]
 801534c:	b94b      	cbnz	r3, 8015362 <__swsetup_r+0x9a>
 801534e:	89a3      	ldrh	r3, [r4, #12]
 8015350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015358:	d003      	beq.n	8015362 <__swsetup_r+0x9a>
 801535a:	4621      	mov	r1, r4
 801535c:	4630      	mov	r0, r6
 801535e:	f000 f9cb 	bl	80156f8 <__smakebuf_r>
 8015362:	89a2      	ldrh	r2, [r4, #12]
 8015364:	f012 0301 	ands.w	r3, r2, #1
 8015368:	d00c      	beq.n	8015384 <__swsetup_r+0xbc>
 801536a:	2300      	movs	r3, #0
 801536c:	60a3      	str	r3, [r4, #8]
 801536e:	6963      	ldr	r3, [r4, #20]
 8015370:	425b      	negs	r3, r3
 8015372:	61a3      	str	r3, [r4, #24]
 8015374:	6923      	ldr	r3, [r4, #16]
 8015376:	b953      	cbnz	r3, 801538e <__swsetup_r+0xc6>
 8015378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801537c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015380:	d1ba      	bne.n	80152f8 <__swsetup_r+0x30>
 8015382:	bd70      	pop	{r4, r5, r6, pc}
 8015384:	0792      	lsls	r2, r2, #30
 8015386:	bf58      	it	pl
 8015388:	6963      	ldrpl	r3, [r4, #20]
 801538a:	60a3      	str	r3, [r4, #8]
 801538c:	e7f2      	b.n	8015374 <__swsetup_r+0xac>
 801538e:	2000      	movs	r0, #0
 8015390:	e7f7      	b.n	8015382 <__swsetup_r+0xba>
 8015392:	bf00      	nop
 8015394:	200001dc 	.word	0x200001dc
 8015398:	08016bd4 	.word	0x08016bd4
 801539c:	08016bf4 	.word	0x08016bf4
 80153a0:	08016bb4 	.word	0x08016bb4

080153a4 <abort>:
 80153a4:	b508      	push	{r3, lr}
 80153a6:	2006      	movs	r0, #6
 80153a8:	f000 fbea 	bl	8015b80 <raise>
 80153ac:	2001      	movs	r0, #1
 80153ae:	f7ef fcd3 	bl	8004d58 <_exit>
	...

080153b4 <__sflush_r>:
 80153b4:	898a      	ldrh	r2, [r1, #12]
 80153b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ba:	4605      	mov	r5, r0
 80153bc:	0710      	lsls	r0, r2, #28
 80153be:	460c      	mov	r4, r1
 80153c0:	d458      	bmi.n	8015474 <__sflush_r+0xc0>
 80153c2:	684b      	ldr	r3, [r1, #4]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	dc05      	bgt.n	80153d4 <__sflush_r+0x20>
 80153c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	dc02      	bgt.n	80153d4 <__sflush_r+0x20>
 80153ce:	2000      	movs	r0, #0
 80153d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153d6:	2e00      	cmp	r6, #0
 80153d8:	d0f9      	beq.n	80153ce <__sflush_r+0x1a>
 80153da:	2300      	movs	r3, #0
 80153dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80153e0:	682f      	ldr	r7, [r5, #0]
 80153e2:	6a21      	ldr	r1, [r4, #32]
 80153e4:	602b      	str	r3, [r5, #0]
 80153e6:	d032      	beq.n	801544e <__sflush_r+0x9a>
 80153e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80153ea:	89a3      	ldrh	r3, [r4, #12]
 80153ec:	075a      	lsls	r2, r3, #29
 80153ee:	d505      	bpl.n	80153fc <__sflush_r+0x48>
 80153f0:	6863      	ldr	r3, [r4, #4]
 80153f2:	1ac0      	subs	r0, r0, r3
 80153f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80153f6:	b10b      	cbz	r3, 80153fc <__sflush_r+0x48>
 80153f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80153fa:	1ac0      	subs	r0, r0, r3
 80153fc:	2300      	movs	r3, #0
 80153fe:	4602      	mov	r2, r0
 8015400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015402:	6a21      	ldr	r1, [r4, #32]
 8015404:	4628      	mov	r0, r5
 8015406:	47b0      	blx	r6
 8015408:	1c43      	adds	r3, r0, #1
 801540a:	89a3      	ldrh	r3, [r4, #12]
 801540c:	d106      	bne.n	801541c <__sflush_r+0x68>
 801540e:	6829      	ldr	r1, [r5, #0]
 8015410:	291d      	cmp	r1, #29
 8015412:	d848      	bhi.n	80154a6 <__sflush_r+0xf2>
 8015414:	4a29      	ldr	r2, [pc, #164]	; (80154bc <__sflush_r+0x108>)
 8015416:	40ca      	lsrs	r2, r1
 8015418:	07d6      	lsls	r6, r2, #31
 801541a:	d544      	bpl.n	80154a6 <__sflush_r+0xf2>
 801541c:	2200      	movs	r2, #0
 801541e:	6062      	str	r2, [r4, #4]
 8015420:	04d9      	lsls	r1, r3, #19
 8015422:	6922      	ldr	r2, [r4, #16]
 8015424:	6022      	str	r2, [r4, #0]
 8015426:	d504      	bpl.n	8015432 <__sflush_r+0x7e>
 8015428:	1c42      	adds	r2, r0, #1
 801542a:	d101      	bne.n	8015430 <__sflush_r+0x7c>
 801542c:	682b      	ldr	r3, [r5, #0]
 801542e:	b903      	cbnz	r3, 8015432 <__sflush_r+0x7e>
 8015430:	6560      	str	r0, [r4, #84]	; 0x54
 8015432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015434:	602f      	str	r7, [r5, #0]
 8015436:	2900      	cmp	r1, #0
 8015438:	d0c9      	beq.n	80153ce <__sflush_r+0x1a>
 801543a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801543e:	4299      	cmp	r1, r3
 8015440:	d002      	beq.n	8015448 <__sflush_r+0x94>
 8015442:	4628      	mov	r0, r5
 8015444:	f7ff fa0e 	bl	8014864 <_free_r>
 8015448:	2000      	movs	r0, #0
 801544a:	6360      	str	r0, [r4, #52]	; 0x34
 801544c:	e7c0      	b.n	80153d0 <__sflush_r+0x1c>
 801544e:	2301      	movs	r3, #1
 8015450:	4628      	mov	r0, r5
 8015452:	47b0      	blx	r6
 8015454:	1c41      	adds	r1, r0, #1
 8015456:	d1c8      	bne.n	80153ea <__sflush_r+0x36>
 8015458:	682b      	ldr	r3, [r5, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d0c5      	beq.n	80153ea <__sflush_r+0x36>
 801545e:	2b1d      	cmp	r3, #29
 8015460:	d001      	beq.n	8015466 <__sflush_r+0xb2>
 8015462:	2b16      	cmp	r3, #22
 8015464:	d101      	bne.n	801546a <__sflush_r+0xb6>
 8015466:	602f      	str	r7, [r5, #0]
 8015468:	e7b1      	b.n	80153ce <__sflush_r+0x1a>
 801546a:	89a3      	ldrh	r3, [r4, #12]
 801546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015470:	81a3      	strh	r3, [r4, #12]
 8015472:	e7ad      	b.n	80153d0 <__sflush_r+0x1c>
 8015474:	690f      	ldr	r7, [r1, #16]
 8015476:	2f00      	cmp	r7, #0
 8015478:	d0a9      	beq.n	80153ce <__sflush_r+0x1a>
 801547a:	0793      	lsls	r3, r2, #30
 801547c:	680e      	ldr	r6, [r1, #0]
 801547e:	bf08      	it	eq
 8015480:	694b      	ldreq	r3, [r1, #20]
 8015482:	600f      	str	r7, [r1, #0]
 8015484:	bf18      	it	ne
 8015486:	2300      	movne	r3, #0
 8015488:	eba6 0807 	sub.w	r8, r6, r7
 801548c:	608b      	str	r3, [r1, #8]
 801548e:	f1b8 0f00 	cmp.w	r8, #0
 8015492:	dd9c      	ble.n	80153ce <__sflush_r+0x1a>
 8015494:	4643      	mov	r3, r8
 8015496:	463a      	mov	r2, r7
 8015498:	6a21      	ldr	r1, [r4, #32]
 801549a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801549c:	4628      	mov	r0, r5
 801549e:	47b0      	blx	r6
 80154a0:	2800      	cmp	r0, #0
 80154a2:	dc06      	bgt.n	80154b2 <__sflush_r+0xfe>
 80154a4:	89a3      	ldrh	r3, [r4, #12]
 80154a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154aa:	81a3      	strh	r3, [r4, #12]
 80154ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154b0:	e78e      	b.n	80153d0 <__sflush_r+0x1c>
 80154b2:	4407      	add	r7, r0
 80154b4:	eba8 0800 	sub.w	r8, r8, r0
 80154b8:	e7e9      	b.n	801548e <__sflush_r+0xda>
 80154ba:	bf00      	nop
 80154bc:	20400001 	.word	0x20400001

080154c0 <_fflush_r>:
 80154c0:	b538      	push	{r3, r4, r5, lr}
 80154c2:	690b      	ldr	r3, [r1, #16]
 80154c4:	4605      	mov	r5, r0
 80154c6:	460c      	mov	r4, r1
 80154c8:	b1db      	cbz	r3, 8015502 <_fflush_r+0x42>
 80154ca:	b118      	cbz	r0, 80154d4 <_fflush_r+0x14>
 80154cc:	6983      	ldr	r3, [r0, #24]
 80154ce:	b90b      	cbnz	r3, 80154d4 <_fflush_r+0x14>
 80154d0:	f000 f860 	bl	8015594 <__sinit>
 80154d4:	4b0c      	ldr	r3, [pc, #48]	; (8015508 <_fflush_r+0x48>)
 80154d6:	429c      	cmp	r4, r3
 80154d8:	d109      	bne.n	80154ee <_fflush_r+0x2e>
 80154da:	686c      	ldr	r4, [r5, #4]
 80154dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154e0:	b17b      	cbz	r3, 8015502 <_fflush_r+0x42>
 80154e2:	4621      	mov	r1, r4
 80154e4:	4628      	mov	r0, r5
 80154e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154ea:	f7ff bf63 	b.w	80153b4 <__sflush_r>
 80154ee:	4b07      	ldr	r3, [pc, #28]	; (801550c <_fflush_r+0x4c>)
 80154f0:	429c      	cmp	r4, r3
 80154f2:	d101      	bne.n	80154f8 <_fflush_r+0x38>
 80154f4:	68ac      	ldr	r4, [r5, #8]
 80154f6:	e7f1      	b.n	80154dc <_fflush_r+0x1c>
 80154f8:	4b05      	ldr	r3, [pc, #20]	; (8015510 <_fflush_r+0x50>)
 80154fa:	429c      	cmp	r4, r3
 80154fc:	bf08      	it	eq
 80154fe:	68ec      	ldreq	r4, [r5, #12]
 8015500:	e7ec      	b.n	80154dc <_fflush_r+0x1c>
 8015502:	2000      	movs	r0, #0
 8015504:	bd38      	pop	{r3, r4, r5, pc}
 8015506:	bf00      	nop
 8015508:	08016bd4 	.word	0x08016bd4
 801550c:	08016bf4 	.word	0x08016bf4
 8015510:	08016bb4 	.word	0x08016bb4

08015514 <std>:
 8015514:	2300      	movs	r3, #0
 8015516:	b510      	push	{r4, lr}
 8015518:	4604      	mov	r4, r0
 801551a:	e9c0 3300 	strd	r3, r3, [r0]
 801551e:	6083      	str	r3, [r0, #8]
 8015520:	8181      	strh	r1, [r0, #12]
 8015522:	6643      	str	r3, [r0, #100]	; 0x64
 8015524:	81c2      	strh	r2, [r0, #14]
 8015526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801552a:	6183      	str	r3, [r0, #24]
 801552c:	4619      	mov	r1, r3
 801552e:	2208      	movs	r2, #8
 8015530:	305c      	adds	r0, #92	; 0x5c
 8015532:	f7ff f98e 	bl	8014852 <memset>
 8015536:	4b05      	ldr	r3, [pc, #20]	; (801554c <std+0x38>)
 8015538:	6263      	str	r3, [r4, #36]	; 0x24
 801553a:	4b05      	ldr	r3, [pc, #20]	; (8015550 <std+0x3c>)
 801553c:	62a3      	str	r3, [r4, #40]	; 0x28
 801553e:	4b05      	ldr	r3, [pc, #20]	; (8015554 <std+0x40>)
 8015540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015542:	4b05      	ldr	r3, [pc, #20]	; (8015558 <std+0x44>)
 8015544:	6224      	str	r4, [r4, #32]
 8015546:	6323      	str	r3, [r4, #48]	; 0x30
 8015548:	bd10      	pop	{r4, pc}
 801554a:	bf00      	nop
 801554c:	08015bb9 	.word	0x08015bb9
 8015550:	08015bdb 	.word	0x08015bdb
 8015554:	08015c13 	.word	0x08015c13
 8015558:	08015c37 	.word	0x08015c37

0801555c <_cleanup_r>:
 801555c:	4901      	ldr	r1, [pc, #4]	; (8015564 <_cleanup_r+0x8>)
 801555e:	f000 b885 	b.w	801566c <_fwalk_reent>
 8015562:	bf00      	nop
 8015564:	080154c1 	.word	0x080154c1

08015568 <__sfmoreglue>:
 8015568:	b570      	push	{r4, r5, r6, lr}
 801556a:	1e4a      	subs	r2, r1, #1
 801556c:	2568      	movs	r5, #104	; 0x68
 801556e:	4355      	muls	r5, r2
 8015570:	460e      	mov	r6, r1
 8015572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015576:	f7ff f9c3 	bl	8014900 <_malloc_r>
 801557a:	4604      	mov	r4, r0
 801557c:	b140      	cbz	r0, 8015590 <__sfmoreglue+0x28>
 801557e:	2100      	movs	r1, #0
 8015580:	e9c0 1600 	strd	r1, r6, [r0]
 8015584:	300c      	adds	r0, #12
 8015586:	60a0      	str	r0, [r4, #8]
 8015588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801558c:	f7ff f961 	bl	8014852 <memset>
 8015590:	4620      	mov	r0, r4
 8015592:	bd70      	pop	{r4, r5, r6, pc}

08015594 <__sinit>:
 8015594:	6983      	ldr	r3, [r0, #24]
 8015596:	b510      	push	{r4, lr}
 8015598:	4604      	mov	r4, r0
 801559a:	bb33      	cbnz	r3, 80155ea <__sinit+0x56>
 801559c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80155a0:	6503      	str	r3, [r0, #80]	; 0x50
 80155a2:	4b12      	ldr	r3, [pc, #72]	; (80155ec <__sinit+0x58>)
 80155a4:	4a12      	ldr	r2, [pc, #72]	; (80155f0 <__sinit+0x5c>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	6282      	str	r2, [r0, #40]	; 0x28
 80155aa:	4298      	cmp	r0, r3
 80155ac:	bf04      	itt	eq
 80155ae:	2301      	moveq	r3, #1
 80155b0:	6183      	streq	r3, [r0, #24]
 80155b2:	f000 f81f 	bl	80155f4 <__sfp>
 80155b6:	6060      	str	r0, [r4, #4]
 80155b8:	4620      	mov	r0, r4
 80155ba:	f000 f81b 	bl	80155f4 <__sfp>
 80155be:	60a0      	str	r0, [r4, #8]
 80155c0:	4620      	mov	r0, r4
 80155c2:	f000 f817 	bl	80155f4 <__sfp>
 80155c6:	2200      	movs	r2, #0
 80155c8:	60e0      	str	r0, [r4, #12]
 80155ca:	2104      	movs	r1, #4
 80155cc:	6860      	ldr	r0, [r4, #4]
 80155ce:	f7ff ffa1 	bl	8015514 <std>
 80155d2:	2201      	movs	r2, #1
 80155d4:	2109      	movs	r1, #9
 80155d6:	68a0      	ldr	r0, [r4, #8]
 80155d8:	f7ff ff9c 	bl	8015514 <std>
 80155dc:	2202      	movs	r2, #2
 80155de:	2112      	movs	r1, #18
 80155e0:	68e0      	ldr	r0, [r4, #12]
 80155e2:	f7ff ff97 	bl	8015514 <std>
 80155e6:	2301      	movs	r3, #1
 80155e8:	61a3      	str	r3, [r4, #24]
 80155ea:	bd10      	pop	{r4, pc}
 80155ec:	08016b7c 	.word	0x08016b7c
 80155f0:	0801555d 	.word	0x0801555d

080155f4 <__sfp>:
 80155f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155f6:	4b1b      	ldr	r3, [pc, #108]	; (8015664 <__sfp+0x70>)
 80155f8:	681e      	ldr	r6, [r3, #0]
 80155fa:	69b3      	ldr	r3, [r6, #24]
 80155fc:	4607      	mov	r7, r0
 80155fe:	b913      	cbnz	r3, 8015606 <__sfp+0x12>
 8015600:	4630      	mov	r0, r6
 8015602:	f7ff ffc7 	bl	8015594 <__sinit>
 8015606:	3648      	adds	r6, #72	; 0x48
 8015608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801560c:	3b01      	subs	r3, #1
 801560e:	d503      	bpl.n	8015618 <__sfp+0x24>
 8015610:	6833      	ldr	r3, [r6, #0]
 8015612:	b133      	cbz	r3, 8015622 <__sfp+0x2e>
 8015614:	6836      	ldr	r6, [r6, #0]
 8015616:	e7f7      	b.n	8015608 <__sfp+0x14>
 8015618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801561c:	b16d      	cbz	r5, 801563a <__sfp+0x46>
 801561e:	3468      	adds	r4, #104	; 0x68
 8015620:	e7f4      	b.n	801560c <__sfp+0x18>
 8015622:	2104      	movs	r1, #4
 8015624:	4638      	mov	r0, r7
 8015626:	f7ff ff9f 	bl	8015568 <__sfmoreglue>
 801562a:	6030      	str	r0, [r6, #0]
 801562c:	2800      	cmp	r0, #0
 801562e:	d1f1      	bne.n	8015614 <__sfp+0x20>
 8015630:	230c      	movs	r3, #12
 8015632:	603b      	str	r3, [r7, #0]
 8015634:	4604      	mov	r4, r0
 8015636:	4620      	mov	r0, r4
 8015638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801563a:	4b0b      	ldr	r3, [pc, #44]	; (8015668 <__sfp+0x74>)
 801563c:	6665      	str	r5, [r4, #100]	; 0x64
 801563e:	e9c4 5500 	strd	r5, r5, [r4]
 8015642:	60a5      	str	r5, [r4, #8]
 8015644:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015648:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801564c:	2208      	movs	r2, #8
 801564e:	4629      	mov	r1, r5
 8015650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015654:	f7ff f8fd 	bl	8014852 <memset>
 8015658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801565c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015660:	e7e9      	b.n	8015636 <__sfp+0x42>
 8015662:	bf00      	nop
 8015664:	08016b7c 	.word	0x08016b7c
 8015668:	ffff0001 	.word	0xffff0001

0801566c <_fwalk_reent>:
 801566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015670:	4680      	mov	r8, r0
 8015672:	4689      	mov	r9, r1
 8015674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015678:	2600      	movs	r6, #0
 801567a:	b914      	cbnz	r4, 8015682 <_fwalk_reent+0x16>
 801567c:	4630      	mov	r0, r6
 801567e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015682:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015686:	3f01      	subs	r7, #1
 8015688:	d501      	bpl.n	801568e <_fwalk_reent+0x22>
 801568a:	6824      	ldr	r4, [r4, #0]
 801568c:	e7f5      	b.n	801567a <_fwalk_reent+0xe>
 801568e:	89ab      	ldrh	r3, [r5, #12]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d907      	bls.n	80156a4 <_fwalk_reent+0x38>
 8015694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015698:	3301      	adds	r3, #1
 801569a:	d003      	beq.n	80156a4 <_fwalk_reent+0x38>
 801569c:	4629      	mov	r1, r5
 801569e:	4640      	mov	r0, r8
 80156a0:	47c8      	blx	r9
 80156a2:	4306      	orrs	r6, r0
 80156a4:	3568      	adds	r5, #104	; 0x68
 80156a6:	e7ee      	b.n	8015686 <_fwalk_reent+0x1a>

080156a8 <__locale_ctype_ptr_l>:
 80156a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80156ac:	4770      	bx	lr

080156ae <__swhatbuf_r>:
 80156ae:	b570      	push	{r4, r5, r6, lr}
 80156b0:	460e      	mov	r6, r1
 80156b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156b6:	2900      	cmp	r1, #0
 80156b8:	b096      	sub	sp, #88	; 0x58
 80156ba:	4614      	mov	r4, r2
 80156bc:	461d      	mov	r5, r3
 80156be:	da07      	bge.n	80156d0 <__swhatbuf_r+0x22>
 80156c0:	2300      	movs	r3, #0
 80156c2:	602b      	str	r3, [r5, #0]
 80156c4:	89b3      	ldrh	r3, [r6, #12]
 80156c6:	061a      	lsls	r2, r3, #24
 80156c8:	d410      	bmi.n	80156ec <__swhatbuf_r+0x3e>
 80156ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156ce:	e00e      	b.n	80156ee <__swhatbuf_r+0x40>
 80156d0:	466a      	mov	r2, sp
 80156d2:	f000 fae3 	bl	8015c9c <_fstat_r>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	dbf2      	blt.n	80156c0 <__swhatbuf_r+0x12>
 80156da:	9a01      	ldr	r2, [sp, #4]
 80156dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80156e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80156e4:	425a      	negs	r2, r3
 80156e6:	415a      	adcs	r2, r3
 80156e8:	602a      	str	r2, [r5, #0]
 80156ea:	e7ee      	b.n	80156ca <__swhatbuf_r+0x1c>
 80156ec:	2340      	movs	r3, #64	; 0x40
 80156ee:	2000      	movs	r0, #0
 80156f0:	6023      	str	r3, [r4, #0]
 80156f2:	b016      	add	sp, #88	; 0x58
 80156f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080156f8 <__smakebuf_r>:
 80156f8:	898b      	ldrh	r3, [r1, #12]
 80156fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156fc:	079d      	lsls	r5, r3, #30
 80156fe:	4606      	mov	r6, r0
 8015700:	460c      	mov	r4, r1
 8015702:	d507      	bpl.n	8015714 <__smakebuf_r+0x1c>
 8015704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015708:	6023      	str	r3, [r4, #0]
 801570a:	6123      	str	r3, [r4, #16]
 801570c:	2301      	movs	r3, #1
 801570e:	6163      	str	r3, [r4, #20]
 8015710:	b002      	add	sp, #8
 8015712:	bd70      	pop	{r4, r5, r6, pc}
 8015714:	ab01      	add	r3, sp, #4
 8015716:	466a      	mov	r2, sp
 8015718:	f7ff ffc9 	bl	80156ae <__swhatbuf_r>
 801571c:	9900      	ldr	r1, [sp, #0]
 801571e:	4605      	mov	r5, r0
 8015720:	4630      	mov	r0, r6
 8015722:	f7ff f8ed 	bl	8014900 <_malloc_r>
 8015726:	b948      	cbnz	r0, 801573c <__smakebuf_r+0x44>
 8015728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801572c:	059a      	lsls	r2, r3, #22
 801572e:	d4ef      	bmi.n	8015710 <__smakebuf_r+0x18>
 8015730:	f023 0303 	bic.w	r3, r3, #3
 8015734:	f043 0302 	orr.w	r3, r3, #2
 8015738:	81a3      	strh	r3, [r4, #12]
 801573a:	e7e3      	b.n	8015704 <__smakebuf_r+0xc>
 801573c:	4b0d      	ldr	r3, [pc, #52]	; (8015774 <__smakebuf_r+0x7c>)
 801573e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015740:	89a3      	ldrh	r3, [r4, #12]
 8015742:	6020      	str	r0, [r4, #0]
 8015744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015748:	81a3      	strh	r3, [r4, #12]
 801574a:	9b00      	ldr	r3, [sp, #0]
 801574c:	6163      	str	r3, [r4, #20]
 801574e:	9b01      	ldr	r3, [sp, #4]
 8015750:	6120      	str	r0, [r4, #16]
 8015752:	b15b      	cbz	r3, 801576c <__smakebuf_r+0x74>
 8015754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015758:	4630      	mov	r0, r6
 801575a:	f000 fab1 	bl	8015cc0 <_isatty_r>
 801575e:	b128      	cbz	r0, 801576c <__smakebuf_r+0x74>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	f023 0303 	bic.w	r3, r3, #3
 8015766:	f043 0301 	orr.w	r3, r3, #1
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	89a3      	ldrh	r3, [r4, #12]
 801576e:	431d      	orrs	r5, r3
 8015770:	81a5      	strh	r5, [r4, #12]
 8015772:	e7cd      	b.n	8015710 <__smakebuf_r+0x18>
 8015774:	0801555d 	.word	0x0801555d

08015778 <__ascii_mbtowc>:
 8015778:	b082      	sub	sp, #8
 801577a:	b901      	cbnz	r1, 801577e <__ascii_mbtowc+0x6>
 801577c:	a901      	add	r1, sp, #4
 801577e:	b142      	cbz	r2, 8015792 <__ascii_mbtowc+0x1a>
 8015780:	b14b      	cbz	r3, 8015796 <__ascii_mbtowc+0x1e>
 8015782:	7813      	ldrb	r3, [r2, #0]
 8015784:	600b      	str	r3, [r1, #0]
 8015786:	7812      	ldrb	r2, [r2, #0]
 8015788:	1c10      	adds	r0, r2, #0
 801578a:	bf18      	it	ne
 801578c:	2001      	movne	r0, #1
 801578e:	b002      	add	sp, #8
 8015790:	4770      	bx	lr
 8015792:	4610      	mov	r0, r2
 8015794:	e7fb      	b.n	801578e <__ascii_mbtowc+0x16>
 8015796:	f06f 0001 	mvn.w	r0, #1
 801579a:	e7f8      	b.n	801578e <__ascii_mbtowc+0x16>

0801579c <memmove>:
 801579c:	4288      	cmp	r0, r1
 801579e:	b510      	push	{r4, lr}
 80157a0:	eb01 0302 	add.w	r3, r1, r2
 80157a4:	d807      	bhi.n	80157b6 <memmove+0x1a>
 80157a6:	1e42      	subs	r2, r0, #1
 80157a8:	4299      	cmp	r1, r3
 80157aa:	d00a      	beq.n	80157c2 <memmove+0x26>
 80157ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80157b4:	e7f8      	b.n	80157a8 <memmove+0xc>
 80157b6:	4283      	cmp	r3, r0
 80157b8:	d9f5      	bls.n	80157a6 <memmove+0xa>
 80157ba:	1881      	adds	r1, r0, r2
 80157bc:	1ad2      	subs	r2, r2, r3
 80157be:	42d3      	cmn	r3, r2
 80157c0:	d100      	bne.n	80157c4 <memmove+0x28>
 80157c2:	bd10      	pop	{r4, pc}
 80157c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80157cc:	e7f7      	b.n	80157be <memmove+0x22>

080157ce <__malloc_lock>:
 80157ce:	4770      	bx	lr

080157d0 <__malloc_unlock>:
 80157d0:	4770      	bx	lr

080157d2 <_realloc_r>:
 80157d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157d4:	4607      	mov	r7, r0
 80157d6:	4614      	mov	r4, r2
 80157d8:	460e      	mov	r6, r1
 80157da:	b921      	cbnz	r1, 80157e6 <_realloc_r+0x14>
 80157dc:	4611      	mov	r1, r2
 80157de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80157e2:	f7ff b88d 	b.w	8014900 <_malloc_r>
 80157e6:	b922      	cbnz	r2, 80157f2 <_realloc_r+0x20>
 80157e8:	f7ff f83c 	bl	8014864 <_free_r>
 80157ec:	4625      	mov	r5, r4
 80157ee:	4628      	mov	r0, r5
 80157f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157f2:	f000 fa87 	bl	8015d04 <_malloc_usable_size_r>
 80157f6:	42a0      	cmp	r0, r4
 80157f8:	d20f      	bcs.n	801581a <_realloc_r+0x48>
 80157fa:	4621      	mov	r1, r4
 80157fc:	4638      	mov	r0, r7
 80157fe:	f7ff f87f 	bl	8014900 <_malloc_r>
 8015802:	4605      	mov	r5, r0
 8015804:	2800      	cmp	r0, #0
 8015806:	d0f2      	beq.n	80157ee <_realloc_r+0x1c>
 8015808:	4631      	mov	r1, r6
 801580a:	4622      	mov	r2, r4
 801580c:	f7ff f816 	bl	801483c <memcpy>
 8015810:	4631      	mov	r1, r6
 8015812:	4638      	mov	r0, r7
 8015814:	f7ff f826 	bl	8014864 <_free_r>
 8015818:	e7e9      	b.n	80157ee <_realloc_r+0x1c>
 801581a:	4635      	mov	r5, r6
 801581c:	e7e7      	b.n	80157ee <_realloc_r+0x1c>

0801581e <__ssputs_r>:
 801581e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015822:	688e      	ldr	r6, [r1, #8]
 8015824:	429e      	cmp	r6, r3
 8015826:	4682      	mov	sl, r0
 8015828:	460c      	mov	r4, r1
 801582a:	4690      	mov	r8, r2
 801582c:	4699      	mov	r9, r3
 801582e:	d837      	bhi.n	80158a0 <__ssputs_r+0x82>
 8015830:	898a      	ldrh	r2, [r1, #12]
 8015832:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015836:	d031      	beq.n	801589c <__ssputs_r+0x7e>
 8015838:	6825      	ldr	r5, [r4, #0]
 801583a:	6909      	ldr	r1, [r1, #16]
 801583c:	1a6f      	subs	r7, r5, r1
 801583e:	6965      	ldr	r5, [r4, #20]
 8015840:	2302      	movs	r3, #2
 8015842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015846:	fb95 f5f3 	sdiv	r5, r5, r3
 801584a:	f109 0301 	add.w	r3, r9, #1
 801584e:	443b      	add	r3, r7
 8015850:	429d      	cmp	r5, r3
 8015852:	bf38      	it	cc
 8015854:	461d      	movcc	r5, r3
 8015856:	0553      	lsls	r3, r2, #21
 8015858:	d530      	bpl.n	80158bc <__ssputs_r+0x9e>
 801585a:	4629      	mov	r1, r5
 801585c:	f7ff f850 	bl	8014900 <_malloc_r>
 8015860:	4606      	mov	r6, r0
 8015862:	b950      	cbnz	r0, 801587a <__ssputs_r+0x5c>
 8015864:	230c      	movs	r3, #12
 8015866:	f8ca 3000 	str.w	r3, [sl]
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015870:	81a3      	strh	r3, [r4, #12]
 8015872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801587a:	463a      	mov	r2, r7
 801587c:	6921      	ldr	r1, [r4, #16]
 801587e:	f7fe ffdd 	bl	801483c <memcpy>
 8015882:	89a3      	ldrh	r3, [r4, #12]
 8015884:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801588c:	81a3      	strh	r3, [r4, #12]
 801588e:	6126      	str	r6, [r4, #16]
 8015890:	6165      	str	r5, [r4, #20]
 8015892:	443e      	add	r6, r7
 8015894:	1bed      	subs	r5, r5, r7
 8015896:	6026      	str	r6, [r4, #0]
 8015898:	60a5      	str	r5, [r4, #8]
 801589a:	464e      	mov	r6, r9
 801589c:	454e      	cmp	r6, r9
 801589e:	d900      	bls.n	80158a2 <__ssputs_r+0x84>
 80158a0:	464e      	mov	r6, r9
 80158a2:	4632      	mov	r2, r6
 80158a4:	4641      	mov	r1, r8
 80158a6:	6820      	ldr	r0, [r4, #0]
 80158a8:	f7ff ff78 	bl	801579c <memmove>
 80158ac:	68a3      	ldr	r3, [r4, #8]
 80158ae:	1b9b      	subs	r3, r3, r6
 80158b0:	60a3      	str	r3, [r4, #8]
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	441e      	add	r6, r3
 80158b6:	6026      	str	r6, [r4, #0]
 80158b8:	2000      	movs	r0, #0
 80158ba:	e7dc      	b.n	8015876 <__ssputs_r+0x58>
 80158bc:	462a      	mov	r2, r5
 80158be:	f7ff ff88 	bl	80157d2 <_realloc_r>
 80158c2:	4606      	mov	r6, r0
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d1e2      	bne.n	801588e <__ssputs_r+0x70>
 80158c8:	6921      	ldr	r1, [r4, #16]
 80158ca:	4650      	mov	r0, sl
 80158cc:	f7fe ffca 	bl	8014864 <_free_r>
 80158d0:	e7c8      	b.n	8015864 <__ssputs_r+0x46>
	...

080158d4 <_svfiprintf_r>:
 80158d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d8:	461d      	mov	r5, r3
 80158da:	898b      	ldrh	r3, [r1, #12]
 80158dc:	061f      	lsls	r7, r3, #24
 80158de:	b09d      	sub	sp, #116	; 0x74
 80158e0:	4680      	mov	r8, r0
 80158e2:	460c      	mov	r4, r1
 80158e4:	4616      	mov	r6, r2
 80158e6:	d50f      	bpl.n	8015908 <_svfiprintf_r+0x34>
 80158e8:	690b      	ldr	r3, [r1, #16]
 80158ea:	b96b      	cbnz	r3, 8015908 <_svfiprintf_r+0x34>
 80158ec:	2140      	movs	r1, #64	; 0x40
 80158ee:	f7ff f807 	bl	8014900 <_malloc_r>
 80158f2:	6020      	str	r0, [r4, #0]
 80158f4:	6120      	str	r0, [r4, #16]
 80158f6:	b928      	cbnz	r0, 8015904 <_svfiprintf_r+0x30>
 80158f8:	230c      	movs	r3, #12
 80158fa:	f8c8 3000 	str.w	r3, [r8]
 80158fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015902:	e0c8      	b.n	8015a96 <_svfiprintf_r+0x1c2>
 8015904:	2340      	movs	r3, #64	; 0x40
 8015906:	6163      	str	r3, [r4, #20]
 8015908:	2300      	movs	r3, #0
 801590a:	9309      	str	r3, [sp, #36]	; 0x24
 801590c:	2320      	movs	r3, #32
 801590e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015912:	2330      	movs	r3, #48	; 0x30
 8015914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015918:	9503      	str	r5, [sp, #12]
 801591a:	f04f 0b01 	mov.w	fp, #1
 801591e:	4637      	mov	r7, r6
 8015920:	463d      	mov	r5, r7
 8015922:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015926:	b10b      	cbz	r3, 801592c <_svfiprintf_r+0x58>
 8015928:	2b25      	cmp	r3, #37	; 0x25
 801592a:	d13e      	bne.n	80159aa <_svfiprintf_r+0xd6>
 801592c:	ebb7 0a06 	subs.w	sl, r7, r6
 8015930:	d00b      	beq.n	801594a <_svfiprintf_r+0x76>
 8015932:	4653      	mov	r3, sl
 8015934:	4632      	mov	r2, r6
 8015936:	4621      	mov	r1, r4
 8015938:	4640      	mov	r0, r8
 801593a:	f7ff ff70 	bl	801581e <__ssputs_r>
 801593e:	3001      	adds	r0, #1
 8015940:	f000 80a4 	beq.w	8015a8c <_svfiprintf_r+0x1b8>
 8015944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015946:	4453      	add	r3, sl
 8015948:	9309      	str	r3, [sp, #36]	; 0x24
 801594a:	783b      	ldrb	r3, [r7, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	f000 809d 	beq.w	8015a8c <_svfiprintf_r+0x1b8>
 8015952:	2300      	movs	r3, #0
 8015954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801595c:	9304      	str	r3, [sp, #16]
 801595e:	9307      	str	r3, [sp, #28]
 8015960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015964:	931a      	str	r3, [sp, #104]	; 0x68
 8015966:	462f      	mov	r7, r5
 8015968:	2205      	movs	r2, #5
 801596a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801596e:	4850      	ldr	r0, [pc, #320]	; (8015ab0 <_svfiprintf_r+0x1dc>)
 8015970:	f7ea fc46 	bl	8000200 <memchr>
 8015974:	9b04      	ldr	r3, [sp, #16]
 8015976:	b9d0      	cbnz	r0, 80159ae <_svfiprintf_r+0xda>
 8015978:	06d9      	lsls	r1, r3, #27
 801597a:	bf44      	itt	mi
 801597c:	2220      	movmi	r2, #32
 801597e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015982:	071a      	lsls	r2, r3, #28
 8015984:	bf44      	itt	mi
 8015986:	222b      	movmi	r2, #43	; 0x2b
 8015988:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801598c:	782a      	ldrb	r2, [r5, #0]
 801598e:	2a2a      	cmp	r2, #42	; 0x2a
 8015990:	d015      	beq.n	80159be <_svfiprintf_r+0xea>
 8015992:	9a07      	ldr	r2, [sp, #28]
 8015994:	462f      	mov	r7, r5
 8015996:	2000      	movs	r0, #0
 8015998:	250a      	movs	r5, #10
 801599a:	4639      	mov	r1, r7
 801599c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159a0:	3b30      	subs	r3, #48	; 0x30
 80159a2:	2b09      	cmp	r3, #9
 80159a4:	d94d      	bls.n	8015a42 <_svfiprintf_r+0x16e>
 80159a6:	b1b8      	cbz	r0, 80159d8 <_svfiprintf_r+0x104>
 80159a8:	e00f      	b.n	80159ca <_svfiprintf_r+0xf6>
 80159aa:	462f      	mov	r7, r5
 80159ac:	e7b8      	b.n	8015920 <_svfiprintf_r+0x4c>
 80159ae:	4a40      	ldr	r2, [pc, #256]	; (8015ab0 <_svfiprintf_r+0x1dc>)
 80159b0:	1a80      	subs	r0, r0, r2
 80159b2:	fa0b f000 	lsl.w	r0, fp, r0
 80159b6:	4318      	orrs	r0, r3
 80159b8:	9004      	str	r0, [sp, #16]
 80159ba:	463d      	mov	r5, r7
 80159bc:	e7d3      	b.n	8015966 <_svfiprintf_r+0x92>
 80159be:	9a03      	ldr	r2, [sp, #12]
 80159c0:	1d11      	adds	r1, r2, #4
 80159c2:	6812      	ldr	r2, [r2, #0]
 80159c4:	9103      	str	r1, [sp, #12]
 80159c6:	2a00      	cmp	r2, #0
 80159c8:	db01      	blt.n	80159ce <_svfiprintf_r+0xfa>
 80159ca:	9207      	str	r2, [sp, #28]
 80159cc:	e004      	b.n	80159d8 <_svfiprintf_r+0x104>
 80159ce:	4252      	negs	r2, r2
 80159d0:	f043 0302 	orr.w	r3, r3, #2
 80159d4:	9207      	str	r2, [sp, #28]
 80159d6:	9304      	str	r3, [sp, #16]
 80159d8:	783b      	ldrb	r3, [r7, #0]
 80159da:	2b2e      	cmp	r3, #46	; 0x2e
 80159dc:	d10c      	bne.n	80159f8 <_svfiprintf_r+0x124>
 80159de:	787b      	ldrb	r3, [r7, #1]
 80159e0:	2b2a      	cmp	r3, #42	; 0x2a
 80159e2:	d133      	bne.n	8015a4c <_svfiprintf_r+0x178>
 80159e4:	9b03      	ldr	r3, [sp, #12]
 80159e6:	1d1a      	adds	r2, r3, #4
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	9203      	str	r2, [sp, #12]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	bfb8      	it	lt
 80159f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80159f4:	3702      	adds	r7, #2
 80159f6:	9305      	str	r3, [sp, #20]
 80159f8:	4d2e      	ldr	r5, [pc, #184]	; (8015ab4 <_svfiprintf_r+0x1e0>)
 80159fa:	7839      	ldrb	r1, [r7, #0]
 80159fc:	2203      	movs	r2, #3
 80159fe:	4628      	mov	r0, r5
 8015a00:	f7ea fbfe 	bl	8000200 <memchr>
 8015a04:	b138      	cbz	r0, 8015a16 <_svfiprintf_r+0x142>
 8015a06:	2340      	movs	r3, #64	; 0x40
 8015a08:	1b40      	subs	r0, r0, r5
 8015a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8015a0e:	9b04      	ldr	r3, [sp, #16]
 8015a10:	4303      	orrs	r3, r0
 8015a12:	3701      	adds	r7, #1
 8015a14:	9304      	str	r3, [sp, #16]
 8015a16:	7839      	ldrb	r1, [r7, #0]
 8015a18:	4827      	ldr	r0, [pc, #156]	; (8015ab8 <_svfiprintf_r+0x1e4>)
 8015a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a1e:	2206      	movs	r2, #6
 8015a20:	1c7e      	adds	r6, r7, #1
 8015a22:	f7ea fbed 	bl	8000200 <memchr>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d038      	beq.n	8015a9c <_svfiprintf_r+0x1c8>
 8015a2a:	4b24      	ldr	r3, [pc, #144]	; (8015abc <_svfiprintf_r+0x1e8>)
 8015a2c:	bb13      	cbnz	r3, 8015a74 <_svfiprintf_r+0x1a0>
 8015a2e:	9b03      	ldr	r3, [sp, #12]
 8015a30:	3307      	adds	r3, #7
 8015a32:	f023 0307 	bic.w	r3, r3, #7
 8015a36:	3308      	adds	r3, #8
 8015a38:	9303      	str	r3, [sp, #12]
 8015a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a3c:	444b      	add	r3, r9
 8015a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8015a40:	e76d      	b.n	801591e <_svfiprintf_r+0x4a>
 8015a42:	fb05 3202 	mla	r2, r5, r2, r3
 8015a46:	2001      	movs	r0, #1
 8015a48:	460f      	mov	r7, r1
 8015a4a:	e7a6      	b.n	801599a <_svfiprintf_r+0xc6>
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	3701      	adds	r7, #1
 8015a50:	9305      	str	r3, [sp, #20]
 8015a52:	4619      	mov	r1, r3
 8015a54:	250a      	movs	r5, #10
 8015a56:	4638      	mov	r0, r7
 8015a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a5c:	3a30      	subs	r2, #48	; 0x30
 8015a5e:	2a09      	cmp	r2, #9
 8015a60:	d903      	bls.n	8015a6a <_svfiprintf_r+0x196>
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d0c8      	beq.n	80159f8 <_svfiprintf_r+0x124>
 8015a66:	9105      	str	r1, [sp, #20]
 8015a68:	e7c6      	b.n	80159f8 <_svfiprintf_r+0x124>
 8015a6a:	fb05 2101 	mla	r1, r5, r1, r2
 8015a6e:	2301      	movs	r3, #1
 8015a70:	4607      	mov	r7, r0
 8015a72:	e7f0      	b.n	8015a56 <_svfiprintf_r+0x182>
 8015a74:	ab03      	add	r3, sp, #12
 8015a76:	9300      	str	r3, [sp, #0]
 8015a78:	4622      	mov	r2, r4
 8015a7a:	4b11      	ldr	r3, [pc, #68]	; (8015ac0 <_svfiprintf_r+0x1ec>)
 8015a7c:	a904      	add	r1, sp, #16
 8015a7e:	4640      	mov	r0, r8
 8015a80:	f3af 8000 	nop.w
 8015a84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015a88:	4681      	mov	r9, r0
 8015a8a:	d1d6      	bne.n	8015a3a <_svfiprintf_r+0x166>
 8015a8c:	89a3      	ldrh	r3, [r4, #12]
 8015a8e:	065b      	lsls	r3, r3, #25
 8015a90:	f53f af35 	bmi.w	80158fe <_svfiprintf_r+0x2a>
 8015a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a96:	b01d      	add	sp, #116	; 0x74
 8015a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a9c:	ab03      	add	r3, sp, #12
 8015a9e:	9300      	str	r3, [sp, #0]
 8015aa0:	4622      	mov	r2, r4
 8015aa2:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <_svfiprintf_r+0x1ec>)
 8015aa4:	a904      	add	r1, sp, #16
 8015aa6:	4640      	mov	r0, r8
 8015aa8:	f7ff f93a 	bl	8014d20 <_printf_i>
 8015aac:	e7ea      	b.n	8015a84 <_svfiprintf_r+0x1b0>
 8015aae:	bf00      	nop
 8015ab0:	08016b80 	.word	0x08016b80
 8015ab4:	08016b86 	.word	0x08016b86
 8015ab8:	08016b8a 	.word	0x08016b8a
 8015abc:	00000000 	.word	0x00000000
 8015ac0:	0801581f 	.word	0x0801581f

08015ac4 <_putc_r>:
 8015ac4:	b570      	push	{r4, r5, r6, lr}
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	4614      	mov	r4, r2
 8015aca:	4606      	mov	r6, r0
 8015acc:	b118      	cbz	r0, 8015ad6 <_putc_r+0x12>
 8015ace:	6983      	ldr	r3, [r0, #24]
 8015ad0:	b90b      	cbnz	r3, 8015ad6 <_putc_r+0x12>
 8015ad2:	f7ff fd5f 	bl	8015594 <__sinit>
 8015ad6:	4b13      	ldr	r3, [pc, #76]	; (8015b24 <_putc_r+0x60>)
 8015ad8:	429c      	cmp	r4, r3
 8015ada:	d112      	bne.n	8015b02 <_putc_r+0x3e>
 8015adc:	6874      	ldr	r4, [r6, #4]
 8015ade:	68a3      	ldr	r3, [r4, #8]
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	60a3      	str	r3, [r4, #8]
 8015ae6:	da16      	bge.n	8015b16 <_putc_r+0x52>
 8015ae8:	69a2      	ldr	r2, [r4, #24]
 8015aea:	4293      	cmp	r3, r2
 8015aec:	db02      	blt.n	8015af4 <_putc_r+0x30>
 8015aee:	b2eb      	uxtb	r3, r5
 8015af0:	2b0a      	cmp	r3, #10
 8015af2:	d110      	bne.n	8015b16 <_putc_r+0x52>
 8015af4:	4622      	mov	r2, r4
 8015af6:	4629      	mov	r1, r5
 8015af8:	4630      	mov	r0, r6
 8015afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015afe:	f7ff bb91 	b.w	8015224 <__swbuf_r>
 8015b02:	4b09      	ldr	r3, [pc, #36]	; (8015b28 <_putc_r+0x64>)
 8015b04:	429c      	cmp	r4, r3
 8015b06:	d101      	bne.n	8015b0c <_putc_r+0x48>
 8015b08:	68b4      	ldr	r4, [r6, #8]
 8015b0a:	e7e8      	b.n	8015ade <_putc_r+0x1a>
 8015b0c:	4b07      	ldr	r3, [pc, #28]	; (8015b2c <_putc_r+0x68>)
 8015b0e:	429c      	cmp	r4, r3
 8015b10:	bf08      	it	eq
 8015b12:	68f4      	ldreq	r4, [r6, #12]
 8015b14:	e7e3      	b.n	8015ade <_putc_r+0x1a>
 8015b16:	6823      	ldr	r3, [r4, #0]
 8015b18:	1c5a      	adds	r2, r3, #1
 8015b1a:	6022      	str	r2, [r4, #0]
 8015b1c:	701d      	strb	r5, [r3, #0]
 8015b1e:	b2e8      	uxtb	r0, r5
 8015b20:	bd70      	pop	{r4, r5, r6, pc}
 8015b22:	bf00      	nop
 8015b24:	08016bd4 	.word	0x08016bd4
 8015b28:	08016bf4 	.word	0x08016bf4
 8015b2c:	08016bb4 	.word	0x08016bb4

08015b30 <_raise_r>:
 8015b30:	291f      	cmp	r1, #31
 8015b32:	b538      	push	{r3, r4, r5, lr}
 8015b34:	4604      	mov	r4, r0
 8015b36:	460d      	mov	r5, r1
 8015b38:	d904      	bls.n	8015b44 <_raise_r+0x14>
 8015b3a:	2316      	movs	r3, #22
 8015b3c:	6003      	str	r3, [r0, #0]
 8015b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b42:	bd38      	pop	{r3, r4, r5, pc}
 8015b44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b46:	b112      	cbz	r2, 8015b4e <_raise_r+0x1e>
 8015b48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b4c:	b94b      	cbnz	r3, 8015b62 <_raise_r+0x32>
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f000 f830 	bl	8015bb4 <_getpid_r>
 8015b54:	462a      	mov	r2, r5
 8015b56:	4601      	mov	r1, r0
 8015b58:	4620      	mov	r0, r4
 8015b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b5e:	f000 b817 	b.w	8015b90 <_kill_r>
 8015b62:	2b01      	cmp	r3, #1
 8015b64:	d00a      	beq.n	8015b7c <_raise_r+0x4c>
 8015b66:	1c59      	adds	r1, r3, #1
 8015b68:	d103      	bne.n	8015b72 <_raise_r+0x42>
 8015b6a:	2316      	movs	r3, #22
 8015b6c:	6003      	str	r3, [r0, #0]
 8015b6e:	2001      	movs	r0, #1
 8015b70:	e7e7      	b.n	8015b42 <_raise_r+0x12>
 8015b72:	2400      	movs	r4, #0
 8015b74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015b78:	4628      	mov	r0, r5
 8015b7a:	4798      	blx	r3
 8015b7c:	2000      	movs	r0, #0
 8015b7e:	e7e0      	b.n	8015b42 <_raise_r+0x12>

08015b80 <raise>:
 8015b80:	4b02      	ldr	r3, [pc, #8]	; (8015b8c <raise+0xc>)
 8015b82:	4601      	mov	r1, r0
 8015b84:	6818      	ldr	r0, [r3, #0]
 8015b86:	f7ff bfd3 	b.w	8015b30 <_raise_r>
 8015b8a:	bf00      	nop
 8015b8c:	200001dc 	.word	0x200001dc

08015b90 <_kill_r>:
 8015b90:	b538      	push	{r3, r4, r5, lr}
 8015b92:	4c07      	ldr	r4, [pc, #28]	; (8015bb0 <_kill_r+0x20>)
 8015b94:	2300      	movs	r3, #0
 8015b96:	4605      	mov	r5, r0
 8015b98:	4608      	mov	r0, r1
 8015b9a:	4611      	mov	r1, r2
 8015b9c:	6023      	str	r3, [r4, #0]
 8015b9e:	f7ef f8cb 	bl	8004d38 <_kill>
 8015ba2:	1c43      	adds	r3, r0, #1
 8015ba4:	d102      	bne.n	8015bac <_kill_r+0x1c>
 8015ba6:	6823      	ldr	r3, [r4, #0]
 8015ba8:	b103      	cbz	r3, 8015bac <_kill_r+0x1c>
 8015baa:	602b      	str	r3, [r5, #0]
 8015bac:	bd38      	pop	{r3, r4, r5, pc}
 8015bae:	bf00      	nop
 8015bb0:	200104c0 	.word	0x200104c0

08015bb4 <_getpid_r>:
 8015bb4:	f7ef b8b8 	b.w	8004d28 <_getpid>

08015bb8 <__sread>:
 8015bb8:	b510      	push	{r4, lr}
 8015bba:	460c      	mov	r4, r1
 8015bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bc0:	f000 f8a8 	bl	8015d14 <_read_r>
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	bfab      	itete	ge
 8015bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bca:	89a3      	ldrhlt	r3, [r4, #12]
 8015bcc:	181b      	addge	r3, r3, r0
 8015bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bd2:	bfac      	ite	ge
 8015bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015bd6:	81a3      	strhlt	r3, [r4, #12]
 8015bd8:	bd10      	pop	{r4, pc}

08015bda <__swrite>:
 8015bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bde:	461f      	mov	r7, r3
 8015be0:	898b      	ldrh	r3, [r1, #12]
 8015be2:	05db      	lsls	r3, r3, #23
 8015be4:	4605      	mov	r5, r0
 8015be6:	460c      	mov	r4, r1
 8015be8:	4616      	mov	r6, r2
 8015bea:	d505      	bpl.n	8015bf8 <__swrite+0x1e>
 8015bec:	2302      	movs	r3, #2
 8015bee:	2200      	movs	r2, #0
 8015bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf4:	f000 f874 	bl	8015ce0 <_lseek_r>
 8015bf8:	89a3      	ldrh	r3, [r4, #12]
 8015bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c02:	81a3      	strh	r3, [r4, #12]
 8015c04:	4632      	mov	r2, r6
 8015c06:	463b      	mov	r3, r7
 8015c08:	4628      	mov	r0, r5
 8015c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c0e:	f000 b823 	b.w	8015c58 <_write_r>

08015c12 <__sseek>:
 8015c12:	b510      	push	{r4, lr}
 8015c14:	460c      	mov	r4, r1
 8015c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c1a:	f000 f861 	bl	8015ce0 <_lseek_r>
 8015c1e:	1c43      	adds	r3, r0, #1
 8015c20:	89a3      	ldrh	r3, [r4, #12]
 8015c22:	bf15      	itete	ne
 8015c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c2e:	81a3      	strheq	r3, [r4, #12]
 8015c30:	bf18      	it	ne
 8015c32:	81a3      	strhne	r3, [r4, #12]
 8015c34:	bd10      	pop	{r4, pc}

08015c36 <__sclose>:
 8015c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c3a:	f000 b81f 	b.w	8015c7c <_close_r>

08015c3e <__ascii_wctomb>:
 8015c3e:	b149      	cbz	r1, 8015c54 <__ascii_wctomb+0x16>
 8015c40:	2aff      	cmp	r2, #255	; 0xff
 8015c42:	bf85      	ittet	hi
 8015c44:	238a      	movhi	r3, #138	; 0x8a
 8015c46:	6003      	strhi	r3, [r0, #0]
 8015c48:	700a      	strbls	r2, [r1, #0]
 8015c4a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015c4e:	bf98      	it	ls
 8015c50:	2001      	movls	r0, #1
 8015c52:	4770      	bx	lr
 8015c54:	4608      	mov	r0, r1
 8015c56:	4770      	bx	lr

08015c58 <_write_r>:
 8015c58:	b538      	push	{r3, r4, r5, lr}
 8015c5a:	4c07      	ldr	r4, [pc, #28]	; (8015c78 <_write_r+0x20>)
 8015c5c:	4605      	mov	r5, r0
 8015c5e:	4608      	mov	r0, r1
 8015c60:	4611      	mov	r1, r2
 8015c62:	2200      	movs	r2, #0
 8015c64:	6022      	str	r2, [r4, #0]
 8015c66:	461a      	mov	r2, r3
 8015c68:	f7ec fd5d 	bl	8002726 <_write>
 8015c6c:	1c43      	adds	r3, r0, #1
 8015c6e:	d102      	bne.n	8015c76 <_write_r+0x1e>
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	b103      	cbz	r3, 8015c76 <_write_r+0x1e>
 8015c74:	602b      	str	r3, [r5, #0]
 8015c76:	bd38      	pop	{r3, r4, r5, pc}
 8015c78:	200104c0 	.word	0x200104c0

08015c7c <_close_r>:
 8015c7c:	b538      	push	{r3, r4, r5, lr}
 8015c7e:	4c06      	ldr	r4, [pc, #24]	; (8015c98 <_close_r+0x1c>)
 8015c80:	2300      	movs	r3, #0
 8015c82:	4605      	mov	r5, r0
 8015c84:	4608      	mov	r0, r1
 8015c86:	6023      	str	r3, [r4, #0]
 8015c88:	f7ef f88d 	bl	8004da6 <_close>
 8015c8c:	1c43      	adds	r3, r0, #1
 8015c8e:	d102      	bne.n	8015c96 <_close_r+0x1a>
 8015c90:	6823      	ldr	r3, [r4, #0]
 8015c92:	b103      	cbz	r3, 8015c96 <_close_r+0x1a>
 8015c94:	602b      	str	r3, [r5, #0]
 8015c96:	bd38      	pop	{r3, r4, r5, pc}
 8015c98:	200104c0 	.word	0x200104c0

08015c9c <_fstat_r>:
 8015c9c:	b538      	push	{r3, r4, r5, lr}
 8015c9e:	4c07      	ldr	r4, [pc, #28]	; (8015cbc <_fstat_r+0x20>)
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	4605      	mov	r5, r0
 8015ca4:	4608      	mov	r0, r1
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	6023      	str	r3, [r4, #0]
 8015caa:	f7ef f888 	bl	8004dbe <_fstat>
 8015cae:	1c43      	adds	r3, r0, #1
 8015cb0:	d102      	bne.n	8015cb8 <_fstat_r+0x1c>
 8015cb2:	6823      	ldr	r3, [r4, #0]
 8015cb4:	b103      	cbz	r3, 8015cb8 <_fstat_r+0x1c>
 8015cb6:	602b      	str	r3, [r5, #0]
 8015cb8:	bd38      	pop	{r3, r4, r5, pc}
 8015cba:	bf00      	nop
 8015cbc:	200104c0 	.word	0x200104c0

08015cc0 <_isatty_r>:
 8015cc0:	b538      	push	{r3, r4, r5, lr}
 8015cc2:	4c06      	ldr	r4, [pc, #24]	; (8015cdc <_isatty_r+0x1c>)
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	4605      	mov	r5, r0
 8015cc8:	4608      	mov	r0, r1
 8015cca:	6023      	str	r3, [r4, #0]
 8015ccc:	f7ef f887 	bl	8004dde <_isatty>
 8015cd0:	1c43      	adds	r3, r0, #1
 8015cd2:	d102      	bne.n	8015cda <_isatty_r+0x1a>
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	b103      	cbz	r3, 8015cda <_isatty_r+0x1a>
 8015cd8:	602b      	str	r3, [r5, #0]
 8015cda:	bd38      	pop	{r3, r4, r5, pc}
 8015cdc:	200104c0 	.word	0x200104c0

08015ce0 <_lseek_r>:
 8015ce0:	b538      	push	{r3, r4, r5, lr}
 8015ce2:	4c07      	ldr	r4, [pc, #28]	; (8015d00 <_lseek_r+0x20>)
 8015ce4:	4605      	mov	r5, r0
 8015ce6:	4608      	mov	r0, r1
 8015ce8:	4611      	mov	r1, r2
 8015cea:	2200      	movs	r2, #0
 8015cec:	6022      	str	r2, [r4, #0]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	f7ef f880 	bl	8004df4 <_lseek>
 8015cf4:	1c43      	adds	r3, r0, #1
 8015cf6:	d102      	bne.n	8015cfe <_lseek_r+0x1e>
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	b103      	cbz	r3, 8015cfe <_lseek_r+0x1e>
 8015cfc:	602b      	str	r3, [r5, #0]
 8015cfe:	bd38      	pop	{r3, r4, r5, pc}
 8015d00:	200104c0 	.word	0x200104c0

08015d04 <_malloc_usable_size_r>:
 8015d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d08:	1f18      	subs	r0, r3, #4
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	bfbc      	itt	lt
 8015d0e:	580b      	ldrlt	r3, [r1, r0]
 8015d10:	18c0      	addlt	r0, r0, r3
 8015d12:	4770      	bx	lr

08015d14 <_read_r>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4c07      	ldr	r4, [pc, #28]	; (8015d34 <_read_r+0x20>)
 8015d18:	4605      	mov	r5, r0
 8015d1a:	4608      	mov	r0, r1
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	2200      	movs	r2, #0
 8015d20:	6022      	str	r2, [r4, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	f7ef f822 	bl	8004d6c <_read>
 8015d28:	1c43      	adds	r3, r0, #1
 8015d2a:	d102      	bne.n	8015d32 <_read_r+0x1e>
 8015d2c:	6823      	ldr	r3, [r4, #0]
 8015d2e:	b103      	cbz	r3, 8015d32 <_read_r+0x1e>
 8015d30:	602b      	str	r3, [r5, #0]
 8015d32:	bd38      	pop	{r3, r4, r5, pc}
 8015d34:	200104c0 	.word	0x200104c0

08015d38 <powf>:
 8015d38:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015d3c:	ed2d 8b04 	vpush	{d8-d9}
 8015d40:	4ca7      	ldr	r4, [pc, #668]	; (8015fe0 <powf+0x2a8>)
 8015d42:	b08a      	sub	sp, #40	; 0x28
 8015d44:	eef0 8a40 	vmov.f32	s17, s0
 8015d48:	eeb0 8a60 	vmov.f32	s16, s1
 8015d4c:	f000 f958 	bl	8016000 <__ieee754_powf>
 8015d50:	f994 5000 	ldrsb.w	r5, [r4]
 8015d54:	1c6b      	adds	r3, r5, #1
 8015d56:	eeb0 9a40 	vmov.f32	s18, s0
 8015d5a:	4626      	mov	r6, r4
 8015d5c:	d05f      	beq.n	8015e1e <powf+0xe6>
 8015d5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d66:	d65a      	bvs.n	8015e1e <powf+0xe6>
 8015d68:	eef4 8a68 	vcmp.f32	s17, s17
 8015d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d70:	d721      	bvc.n	8015db6 <powf+0x7e>
 8015d72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d7a:	d150      	bne.n	8015e1e <powf+0xe6>
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	4b98      	ldr	r3, [pc, #608]	; (8015fe4 <powf+0x2ac>)
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	ee18 0a90 	vmov	r0, s17
 8015d88:	2300      	movs	r3, #0
 8015d8a:	9308      	str	r3, [sp, #32]
 8015d8c:	f7ea fbec 	bl	8000568 <__aeabi_f2d>
 8015d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d94:	ee18 0a10 	vmov	r0, s16
 8015d98:	f7ea fbe6 	bl	8000568 <__aeabi_f2d>
 8015d9c:	4b92      	ldr	r3, [pc, #584]	; (8015fe8 <powf+0x2b0>)
 8015d9e:	2200      	movs	r2, #0
 8015da0:	2d02      	cmp	r5, #2
 8015da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015daa:	d032      	beq.n	8015e12 <powf+0xda>
 8015dac:	4668      	mov	r0, sp
 8015dae:	f000 fbea 	bl	8016586 <matherr>
 8015db2:	bb40      	cbnz	r0, 8015e06 <powf+0xce>
 8015db4:	e065      	b.n	8015e82 <powf+0x14a>
 8015db6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015fec <powf+0x2b4>
 8015dba:	eef4 8a69 	vcmp.f32	s17, s19
 8015dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc2:	d163      	bne.n	8015e8c <powf+0x154>
 8015dc4:	eeb4 8a69 	vcmp.f32	s16, s19
 8015dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dcc:	d12e      	bne.n	8015e2c <powf+0xf4>
 8015dce:	2301      	movs	r3, #1
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	4b84      	ldr	r3, [pc, #528]	; (8015fe4 <powf+0x2ac>)
 8015dd4:	9301      	str	r3, [sp, #4]
 8015dd6:	ee18 0a90 	vmov	r0, s17
 8015dda:	2300      	movs	r3, #0
 8015ddc:	9308      	str	r3, [sp, #32]
 8015dde:	f7ea fbc3 	bl	8000568 <__aeabi_f2d>
 8015de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015de6:	ee18 0a10 	vmov	r0, s16
 8015dea:	f7ea fbbd 	bl	8000568 <__aeabi_f2d>
 8015dee:	2200      	movs	r2, #0
 8015df0:	2300      	movs	r3, #0
 8015df2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015df6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015dfa:	2d00      	cmp	r5, #0
 8015dfc:	d0d6      	beq.n	8015dac <powf+0x74>
 8015dfe:	4b7a      	ldr	r3, [pc, #488]	; (8015fe8 <powf+0x2b0>)
 8015e00:	2200      	movs	r2, #0
 8015e02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e06:	9b08      	ldr	r3, [sp, #32]
 8015e08:	b11b      	cbz	r3, 8015e12 <powf+0xda>
 8015e0a:	f7fe fcdb 	bl	80147c4 <__errno>
 8015e0e:	9b08      	ldr	r3, [sp, #32]
 8015e10:	6003      	str	r3, [r0, #0]
 8015e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e16:	f7ea fe39 	bl	8000a8c <__aeabi_d2f>
 8015e1a:	ee09 0a10 	vmov	s18, r0
 8015e1e:	eeb0 0a49 	vmov.f32	s0, s18
 8015e22:	b00a      	add	sp, #40	; 0x28
 8015e24:	ecbd 8b04 	vpop	{d8-d9}
 8015e28:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8015e30:	f000 fbb2 	bl	8016598 <finitef>
 8015e34:	2800      	cmp	r0, #0
 8015e36:	d0f2      	beq.n	8015e1e <powf+0xe6>
 8015e38:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e40:	d5ed      	bpl.n	8015e1e <powf+0xe6>
 8015e42:	2301      	movs	r3, #1
 8015e44:	9300      	str	r3, [sp, #0]
 8015e46:	4b67      	ldr	r3, [pc, #412]	; (8015fe4 <powf+0x2ac>)
 8015e48:	9301      	str	r3, [sp, #4]
 8015e4a:	ee18 0a90 	vmov	r0, s17
 8015e4e:	2300      	movs	r3, #0
 8015e50:	9308      	str	r3, [sp, #32]
 8015e52:	f7ea fb89 	bl	8000568 <__aeabi_f2d>
 8015e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e5a:	ee18 0a10 	vmov	r0, s16
 8015e5e:	f7ea fb83 	bl	8000568 <__aeabi_f2d>
 8015e62:	f994 3000 	ldrsb.w	r3, [r4]
 8015e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e6a:	b923      	cbnz	r3, 8015e76 <powf+0x13e>
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e74:	e79a      	b.n	8015dac <powf+0x74>
 8015e76:	495e      	ldr	r1, [pc, #376]	; (8015ff0 <powf+0x2b8>)
 8015e78:	2000      	movs	r0, #0
 8015e7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e7e:	2b02      	cmp	r3, #2
 8015e80:	d194      	bne.n	8015dac <powf+0x74>
 8015e82:	f7fe fc9f 	bl	80147c4 <__errno>
 8015e86:	2321      	movs	r3, #33	; 0x21
 8015e88:	6003      	str	r3, [r0, #0]
 8015e8a:	e7bc      	b.n	8015e06 <powf+0xce>
 8015e8c:	f000 fb84 	bl	8016598 <finitef>
 8015e90:	4605      	mov	r5, r0
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d173      	bne.n	8015f7e <powf+0x246>
 8015e96:	eeb0 0a68 	vmov.f32	s0, s17
 8015e9a:	f000 fb7d 	bl	8016598 <finitef>
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d06d      	beq.n	8015f7e <powf+0x246>
 8015ea2:	eeb0 0a48 	vmov.f32	s0, s16
 8015ea6:	f000 fb77 	bl	8016598 <finitef>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d067      	beq.n	8015f7e <powf+0x246>
 8015eae:	ee18 0a90 	vmov	r0, s17
 8015eb2:	f7ea fb59 	bl	8000568 <__aeabi_f2d>
 8015eb6:	4680      	mov	r8, r0
 8015eb8:	ee18 0a10 	vmov	r0, s16
 8015ebc:	4689      	mov	r9, r1
 8015ebe:	f7ea fb53 	bl	8000568 <__aeabi_f2d>
 8015ec2:	eeb4 9a49 	vcmp.f32	s18, s18
 8015ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eca:	f994 4000 	ldrsb.w	r4, [r4]
 8015ece:	4b45      	ldr	r3, [pc, #276]	; (8015fe4 <powf+0x2ac>)
 8015ed0:	d713      	bvc.n	8015efa <powf+0x1c2>
 8015ed2:	2201      	movs	r2, #1
 8015ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8015ed8:	9508      	str	r5, [sp, #32]
 8015eda:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ee2:	2c00      	cmp	r4, #0
 8015ee4:	d0c2      	beq.n	8015e6c <powf+0x134>
 8015ee6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8015eea:	ee17 0a90 	vmov	r0, s15
 8015eee:	f7ea fb3b 	bl	8000568 <__aeabi_f2d>
 8015ef2:	2c02      	cmp	r4, #2
 8015ef4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015ef8:	e7c2      	b.n	8015e80 <powf+0x148>
 8015efa:	2203      	movs	r2, #3
 8015efc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015f00:	e9cd 2300 	strd	r2, r3, [sp]
 8015f04:	9508      	str	r5, [sp, #32]
 8015f06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f0e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015f12:	b9fc      	cbnz	r4, 8015f54 <powf+0x21c>
 8015f14:	4b37      	ldr	r3, [pc, #220]	; (8015ff4 <powf+0x2bc>)
 8015f16:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f26:	d553      	bpl.n	8015fd0 <powf+0x298>
 8015f28:	eeb0 0a48 	vmov.f32	s0, s16
 8015f2c:	f000 fb44 	bl	80165b8 <rintf>
 8015f30:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f38:	d004      	beq.n	8015f44 <powf+0x20c>
 8015f3a:	4b2f      	ldr	r3, [pc, #188]	; (8015ff8 <powf+0x2c0>)
 8015f3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f44:	f996 3000 	ldrsb.w	r3, [r6]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d141      	bne.n	8015fd0 <powf+0x298>
 8015f4c:	f7fe fc3a 	bl	80147c4 <__errno>
 8015f50:	2322      	movs	r3, #34	; 0x22
 8015f52:	e799      	b.n	8015e88 <powf+0x150>
 8015f54:	4b29      	ldr	r3, [pc, #164]	; (8015ffc <powf+0x2c4>)
 8015f56:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f64:	d5ee      	bpl.n	8015f44 <powf+0x20c>
 8015f66:	eeb0 0a48 	vmov.f32	s0, s16
 8015f6a:	f000 fb25 	bl	80165b8 <rintf>
 8015f6e:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f76:	d0e5      	beq.n	8015f44 <powf+0x20c>
 8015f78:	2200      	movs	r2, #0
 8015f7a:	4b1d      	ldr	r3, [pc, #116]	; (8015ff0 <powf+0x2b8>)
 8015f7c:	e7e0      	b.n	8015f40 <powf+0x208>
 8015f7e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f86:	f47f af4a 	bne.w	8015e1e <powf+0xe6>
 8015f8a:	eeb0 0a68 	vmov.f32	s0, s17
 8015f8e:	f000 fb03 	bl	8016598 <finitef>
 8015f92:	2800      	cmp	r0, #0
 8015f94:	f43f af43 	beq.w	8015e1e <powf+0xe6>
 8015f98:	eeb0 0a48 	vmov.f32	s0, s16
 8015f9c:	f000 fafc 	bl	8016598 <finitef>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	f43f af3c 	beq.w	8015e1e <powf+0xe6>
 8015fa6:	2304      	movs	r3, #4
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	4b0e      	ldr	r3, [pc, #56]	; (8015fe4 <powf+0x2ac>)
 8015fac:	9301      	str	r3, [sp, #4]
 8015fae:	ee18 0a90 	vmov	r0, s17
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	9308      	str	r3, [sp, #32]
 8015fb6:	f7ea fad7 	bl	8000568 <__aeabi_f2d>
 8015fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fbe:	ee18 0a10 	vmov	r0, s16
 8015fc2:	f7ea fad1 	bl	8000568 <__aeabi_f2d>
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015fcc:	2300      	movs	r3, #0
 8015fce:	e7b7      	b.n	8015f40 <powf+0x208>
 8015fd0:	4668      	mov	r0, sp
 8015fd2:	f000 fad8 	bl	8016586 <matherr>
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	f47f af15 	bne.w	8015e06 <powf+0xce>
 8015fdc:	e7b6      	b.n	8015f4c <powf+0x214>
 8015fde:	bf00      	nop
 8015fe0:	200003ac 	.word	0x200003ac
 8015fe4:	08016d1f 	.word	0x08016d1f
 8015fe8:	3ff00000 	.word	0x3ff00000
 8015fec:	00000000 	.word	0x00000000
 8015ff0:	fff00000 	.word	0xfff00000
 8015ff4:	47efffff 	.word	0x47efffff
 8015ff8:	c7efffff 	.word	0xc7efffff
 8015ffc:	7ff00000 	.word	0x7ff00000

08016000 <__ieee754_powf>:
 8016000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016004:	ee10 5a90 	vmov	r5, s1
 8016008:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801600c:	ed2d 8b02 	vpush	{d8}
 8016010:	eeb0 8a40 	vmov.f32	s16, s0
 8016014:	eef0 8a60 	vmov.f32	s17, s1
 8016018:	f000 8293 	beq.w	8016542 <__ieee754_powf+0x542>
 801601c:	ee10 8a10 	vmov	r8, s0
 8016020:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8016024:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016028:	dc06      	bgt.n	8016038 <__ieee754_powf+0x38>
 801602a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801602e:	dd0a      	ble.n	8016046 <__ieee754_powf+0x46>
 8016030:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016034:	f000 8285 	beq.w	8016542 <__ieee754_powf+0x542>
 8016038:	ecbd 8b02 	vpop	{d8}
 801603c:	48d9      	ldr	r0, [pc, #868]	; (80163a4 <__ieee754_powf+0x3a4>)
 801603e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016042:	f000 bab3 	b.w	80165ac <nanf>
 8016046:	f1b8 0f00 	cmp.w	r8, #0
 801604a:	da1d      	bge.n	8016088 <__ieee754_powf+0x88>
 801604c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8016050:	da2c      	bge.n	80160ac <__ieee754_powf+0xac>
 8016052:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016056:	db30      	blt.n	80160ba <__ieee754_powf+0xba>
 8016058:	15fb      	asrs	r3, r7, #23
 801605a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801605e:	fa47 f603 	asr.w	r6, r7, r3
 8016062:	fa06 f303 	lsl.w	r3, r6, r3
 8016066:	42bb      	cmp	r3, r7
 8016068:	d127      	bne.n	80160ba <__ieee754_powf+0xba>
 801606a:	f006 0601 	and.w	r6, r6, #1
 801606e:	f1c6 0602 	rsb	r6, r6, #2
 8016072:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016076:	d122      	bne.n	80160be <__ieee754_powf+0xbe>
 8016078:	2d00      	cmp	r5, #0
 801607a:	f280 8268 	bge.w	801654e <__ieee754_powf+0x54e>
 801607e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016082:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016086:	e00d      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016088:	2600      	movs	r6, #0
 801608a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801608e:	d1f0      	bne.n	8016072 <__ieee754_powf+0x72>
 8016090:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016094:	f000 8255 	beq.w	8016542 <__ieee754_powf+0x542>
 8016098:	dd0a      	ble.n	80160b0 <__ieee754_powf+0xb0>
 801609a:	2d00      	cmp	r5, #0
 801609c:	f280 8254 	bge.w	8016548 <__ieee754_powf+0x548>
 80160a0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80163a8 <__ieee754_powf+0x3a8>
 80160a4:	ecbd 8b02 	vpop	{d8}
 80160a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ac:	2602      	movs	r6, #2
 80160ae:	e7ec      	b.n	801608a <__ieee754_powf+0x8a>
 80160b0:	2d00      	cmp	r5, #0
 80160b2:	daf5      	bge.n	80160a0 <__ieee754_powf+0xa0>
 80160b4:	eeb1 0a68 	vneg.f32	s0, s17
 80160b8:	e7f4      	b.n	80160a4 <__ieee754_powf+0xa4>
 80160ba:	2600      	movs	r6, #0
 80160bc:	e7d9      	b.n	8016072 <__ieee754_powf+0x72>
 80160be:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80160c2:	d102      	bne.n	80160ca <__ieee754_powf+0xca>
 80160c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80160c8:	e7ec      	b.n	80160a4 <__ieee754_powf+0xa4>
 80160ca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80160ce:	eeb0 0a48 	vmov.f32	s0, s16
 80160d2:	d108      	bne.n	80160e6 <__ieee754_powf+0xe6>
 80160d4:	f1b8 0f00 	cmp.w	r8, #0
 80160d8:	db05      	blt.n	80160e6 <__ieee754_powf+0xe6>
 80160da:	ecbd 8b02 	vpop	{d8}
 80160de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160e2:	f000 ba4d 	b.w	8016580 <__ieee754_sqrtf>
 80160e6:	f000 fa50 	bl	801658a <fabsf>
 80160ea:	b124      	cbz	r4, 80160f6 <__ieee754_powf+0xf6>
 80160ec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80160f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80160f4:	d117      	bne.n	8016126 <__ieee754_powf+0x126>
 80160f6:	2d00      	cmp	r5, #0
 80160f8:	bfbc      	itt	lt
 80160fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80160fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016102:	f1b8 0f00 	cmp.w	r8, #0
 8016106:	dacd      	bge.n	80160a4 <__ieee754_powf+0xa4>
 8016108:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801610c:	ea54 0306 	orrs.w	r3, r4, r6
 8016110:	d104      	bne.n	801611c <__ieee754_powf+0x11c>
 8016112:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016116:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801611a:	e7c3      	b.n	80160a4 <__ieee754_powf+0xa4>
 801611c:	2e01      	cmp	r6, #1
 801611e:	d1c1      	bne.n	80160a4 <__ieee754_powf+0xa4>
 8016120:	eeb1 0a40 	vneg.f32	s0, s0
 8016124:	e7be      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016126:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801612a:	3801      	subs	r0, #1
 801612c:	ea56 0300 	orrs.w	r3, r6, r0
 8016130:	d104      	bne.n	801613c <__ieee754_powf+0x13c>
 8016132:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016136:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801613a:	e7b3      	b.n	80160a4 <__ieee754_powf+0xa4>
 801613c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8016140:	dd6d      	ble.n	801621e <__ieee754_powf+0x21e>
 8016142:	4b9a      	ldr	r3, [pc, #616]	; (80163ac <__ieee754_powf+0x3ac>)
 8016144:	429c      	cmp	r4, r3
 8016146:	dc06      	bgt.n	8016156 <__ieee754_powf+0x156>
 8016148:	2d00      	cmp	r5, #0
 801614a:	daa9      	bge.n	80160a0 <__ieee754_powf+0xa0>
 801614c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80163b0 <__ieee754_powf+0x3b0>
 8016150:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016154:	e7a6      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016156:	4b97      	ldr	r3, [pc, #604]	; (80163b4 <__ieee754_powf+0x3b4>)
 8016158:	429c      	cmp	r4, r3
 801615a:	dd02      	ble.n	8016162 <__ieee754_powf+0x162>
 801615c:	2d00      	cmp	r5, #0
 801615e:	dcf5      	bgt.n	801614c <__ieee754_powf+0x14c>
 8016160:	e79e      	b.n	80160a0 <__ieee754_powf+0xa0>
 8016162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016166:	ee30 0a67 	vsub.f32	s0, s0, s15
 801616a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80163b8 <__ieee754_powf+0x3b8>
 801616e:	eef1 6a40 	vneg.f32	s13, s0
 8016172:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016176:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801617a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801617e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8016182:	ee60 0a00 	vmul.f32	s1, s0, s0
 8016186:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80163bc <__ieee754_powf+0x3bc>
 801618a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801618e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80163c0 <__ieee754_powf+0x3c0>
 8016192:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8016196:	eee0 7a07 	vfma.f32	s15, s0, s14
 801619a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80163c4 <__ieee754_powf+0x3c4>
 801619e:	eeb0 6a67 	vmov.f32	s12, s15
 80161a2:	eea0 6a07 	vfma.f32	s12, s0, s14
 80161a6:	ee16 3a10 	vmov	r3, s12
 80161aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80161ae:	f023 030f 	bic.w	r3, r3, #15
 80161b2:	ee00 3a90 	vmov	s1, r3
 80161b6:	eee6 0a87 	vfma.f32	s1, s13, s14
 80161ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80161be:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80161c2:	f025 050f 	bic.w	r5, r5, #15
 80161c6:	ee07 5a10 	vmov	s14, r5
 80161ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80161ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80161d2:	ee07 3a90 	vmov	s15, r3
 80161d6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80161da:	3e01      	subs	r6, #1
 80161dc:	ea56 0200 	orrs.w	r2, r6, r0
 80161e0:	ee07 5a10 	vmov	s14, r5
 80161e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80161e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80161ec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80161f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80161f4:	ee17 4a10 	vmov	r4, s14
 80161f8:	bf08      	it	eq
 80161fa:	eeb0 8a40 	vmoveq.f32	s16, s0
 80161fe:	2c00      	cmp	r4, #0
 8016200:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016204:	f340 8184 	ble.w	8016510 <__ieee754_powf+0x510>
 8016208:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801620c:	f340 80fc 	ble.w	8016408 <__ieee754_powf+0x408>
 8016210:	eddf 7a67 	vldr	s15, [pc, #412]	; 80163b0 <__ieee754_powf+0x3b0>
 8016214:	ee28 0a27 	vmul.f32	s0, s16, s15
 8016218:	ee20 0a27 	vmul.f32	s0, s0, s15
 801621c:	e742      	b.n	80160a4 <__ieee754_powf+0xa4>
 801621e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8016222:	bfbf      	itttt	lt
 8016224:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80163c8 <__ieee754_powf+0x3c8>
 8016228:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801622c:	f06f 0217 	mvnlt.w	r2, #23
 8016230:	ee17 4a90 	vmovlt	r4, s15
 8016234:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8016238:	bfa8      	it	ge
 801623a:	2200      	movge	r2, #0
 801623c:	3b7f      	subs	r3, #127	; 0x7f
 801623e:	4413      	add	r3, r2
 8016240:	4a62      	ldr	r2, [pc, #392]	; (80163cc <__ieee754_powf+0x3cc>)
 8016242:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8016246:	4294      	cmp	r4, r2
 8016248:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801624c:	dd06      	ble.n	801625c <__ieee754_powf+0x25c>
 801624e:	4a60      	ldr	r2, [pc, #384]	; (80163d0 <__ieee754_powf+0x3d0>)
 8016250:	4294      	cmp	r4, r2
 8016252:	f340 80a5 	ble.w	80163a0 <__ieee754_powf+0x3a0>
 8016256:	3301      	adds	r3, #1
 8016258:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801625c:	2400      	movs	r4, #0
 801625e:	4a5d      	ldr	r2, [pc, #372]	; (80163d4 <__ieee754_powf+0x3d4>)
 8016260:	00a7      	lsls	r7, r4, #2
 8016262:	443a      	add	r2, r7
 8016264:	ee07 1a90 	vmov	s15, r1
 8016268:	ed92 7a00 	vldr	s14, [r2]
 801626c:	4a5a      	ldr	r2, [pc, #360]	; (80163d8 <__ieee754_powf+0x3d8>)
 801626e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016272:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8016276:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801627a:	1049      	asrs	r1, r1, #1
 801627c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016280:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016284:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8016288:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801628c:	ee06 1a10 	vmov	s12, r1
 8016290:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016294:	ee14 ca90 	vmov	ip, s9
 8016298:	ea02 0c0c 	and.w	ip, r2, ip
 801629c:	ee05 ca10 	vmov	s10, ip
 80162a0:	eeb1 4a45 	vneg.f32	s8, s10
 80162a4:	eee4 5a06 	vfma.f32	s11, s8, s12
 80162a8:	ee36 6a47 	vsub.f32	s12, s12, s14
 80162ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80163dc <__ieee754_powf+0x3dc>
 80162b0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80162b4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80162b8:	eee4 5a06 	vfma.f32	s11, s8, s12
 80162bc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80162c0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80162c4:	eddf 5a46 	vldr	s11, [pc, #280]	; 80163e0 <__ieee754_powf+0x3e0>
 80162c8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80162cc:	eddf 5a45 	vldr	s11, [pc, #276]	; 80163e4 <__ieee754_powf+0x3e4>
 80162d0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80162d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80163b8 <__ieee754_powf+0x3b8>
 80162d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80162dc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80163e8 <__ieee754_powf+0x3e8>
 80162e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80162e4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80163ec <__ieee754_powf+0x3ec>
 80162e8:	ee75 6a24 	vadd.f32	s13, s10, s9
 80162ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80162f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80162f4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80162f8:	eef0 7a65 	vmov.f32	s15, s11
 80162fc:	eee3 6a87 	vfma.f32	s13, s7, s14
 8016300:	eee5 7a05 	vfma.f32	s15, s10, s10
 8016304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016308:	ee17 1a90 	vmov	r1, s15
 801630c:	4011      	ands	r1, r2
 801630e:	ee07 1a90 	vmov	s15, r1
 8016312:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8016316:	eddf 5a36 	vldr	s11, [pc, #216]	; 80163f0 <__ieee754_powf+0x3f0>
 801631a:	eea4 7a05 	vfma.f32	s14, s8, s10
 801631e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016322:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016326:	eea7 7a86 	vfma.f32	s14, s15, s12
 801632a:	eeb0 6a47 	vmov.f32	s12, s14
 801632e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8016332:	ee16 1a10 	vmov	r1, s12
 8016336:	4011      	ands	r1, r2
 8016338:	ee06 1a90 	vmov	s13, r1
 801633c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8016340:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80163f4 <__ieee754_powf+0x3f4>
 8016344:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016348:	ee06 1a10 	vmov	s12, r1
 801634c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016350:	eddf 7a29 	vldr	s15, [pc, #164]	; 80163f8 <__ieee754_powf+0x3f8>
 8016354:	4929      	ldr	r1, [pc, #164]	; (80163fc <__ieee754_powf+0x3fc>)
 8016356:	eea6 7a27 	vfma.f32	s14, s12, s15
 801635a:	4439      	add	r1, r7
 801635c:	edd1 7a00 	vldr	s15, [r1]
 8016360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016364:	ee07 3a90 	vmov	s15, r3
 8016368:	eef0 0a47 	vmov.f32	s1, s14
 801636c:	4b24      	ldr	r3, [pc, #144]	; (8016400 <__ieee754_powf+0x400>)
 801636e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8016372:	443b      	add	r3, r7
 8016374:	ed93 5a00 	vldr	s10, [r3]
 8016378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801637c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016380:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016384:	ee17 3a90 	vmov	r3, s15
 8016388:	4013      	ands	r3, r2
 801638a:	ee07 3a90 	vmov	s15, r3
 801638e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016392:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016396:	eee6 7a65 	vfms.f32	s15, s12, s11
 801639a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801639e:	e70e      	b.n	80161be <__ieee754_powf+0x1be>
 80163a0:	2401      	movs	r4, #1
 80163a2:	e75c      	b.n	801625e <__ieee754_powf+0x25e>
 80163a4:	08016b7b 	.word	0x08016b7b
 80163a8:	00000000 	.word	0x00000000
 80163ac:	3f7ffff7 	.word	0x3f7ffff7
 80163b0:	7149f2ca 	.word	0x7149f2ca
 80163b4:	3f800007 	.word	0x3f800007
 80163b8:	3eaaaaab 	.word	0x3eaaaaab
 80163bc:	36eca570 	.word	0x36eca570
 80163c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80163c4:	3fb8aa00 	.word	0x3fb8aa00
 80163c8:	4b800000 	.word	0x4b800000
 80163cc:	001cc471 	.word	0x001cc471
 80163d0:	005db3d6 	.word	0x005db3d6
 80163d4:	08016d24 	.word	0x08016d24
 80163d8:	fffff000 	.word	0xfffff000
 80163dc:	3e6c3255 	.word	0x3e6c3255
 80163e0:	3e53f142 	.word	0x3e53f142
 80163e4:	3e8ba305 	.word	0x3e8ba305
 80163e8:	3edb6db7 	.word	0x3edb6db7
 80163ec:	3f19999a 	.word	0x3f19999a
 80163f0:	3f763800 	.word	0x3f763800
 80163f4:	3f76384f 	.word	0x3f76384f
 80163f8:	369dc3a0 	.word	0x369dc3a0
 80163fc:	08016d34 	.word	0x08016d34
 8016400:	08016d2c 	.word	0x08016d2c
 8016404:	3338aa3c 	.word	0x3338aa3c
 8016408:	f040 8092 	bne.w	8016530 <__ieee754_powf+0x530>
 801640c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016404 <__ieee754_powf+0x404>
 8016410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016414:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016418:	eef4 6ac7 	vcmpe.f32	s13, s14
 801641c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016420:	f73f aef6 	bgt.w	8016210 <__ieee754_powf+0x210>
 8016424:	15db      	asrs	r3, r3, #23
 8016426:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801642a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801642e:	4103      	asrs	r3, r0
 8016430:	4423      	add	r3, r4
 8016432:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016436:	4947      	ldr	r1, [pc, #284]	; (8016554 <__ieee754_powf+0x554>)
 8016438:	3a7f      	subs	r2, #127	; 0x7f
 801643a:	4111      	asrs	r1, r2
 801643c:	ea23 0101 	bic.w	r1, r3, r1
 8016440:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8016444:	ee07 1a10 	vmov	s14, r1
 8016448:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801644c:	f1c2 0217 	rsb	r2, r2, #23
 8016450:	4110      	asrs	r0, r2
 8016452:	2c00      	cmp	r4, #0
 8016454:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016458:	bfb8      	it	lt
 801645a:	4240      	neglt	r0, r0
 801645c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016460:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016558 <__ieee754_powf+0x558>
 8016464:	ee17 3a10 	vmov	r3, s14
 8016468:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801646c:	f023 030f 	bic.w	r3, r3, #15
 8016470:	ee07 3a10 	vmov	s14, r3
 8016474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016478:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801647c:	eddf 7a37 	vldr	s15, [pc, #220]	; 801655c <__ieee754_powf+0x55c>
 8016480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016484:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016488:	eddf 6a35 	vldr	s13, [pc, #212]	; 8016560 <__ieee754_powf+0x560>
 801648c:	eeb0 0a67 	vmov.f32	s0, s15
 8016490:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016494:	eeb0 6a40 	vmov.f32	s12, s0
 8016498:	eea7 6a66 	vfms.f32	s12, s14, s13
 801649c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80164a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80164a4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8016564 <__ieee754_powf+0x564>
 80164a8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8016568 <__ieee754_powf+0x568>
 80164ac:	eea7 6a26 	vfma.f32	s12, s14, s13
 80164b0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801656c <__ieee754_powf+0x56c>
 80164b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80164b8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8016570 <__ieee754_powf+0x570>
 80164bc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80164c0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8016574 <__ieee754_powf+0x574>
 80164c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80164c8:	eeb0 6a40 	vmov.f32	s12, s0
 80164cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80164d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80164d4:	eeb0 7a46 	vmov.f32	s14, s12
 80164d8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80164dc:	ee20 6a06 	vmul.f32	s12, s0, s12
 80164e0:	eee0 7a27 	vfma.f32	s15, s0, s15
 80164e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80164e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80164f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80164f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80164f8:	ee10 3a10 	vmov	r3, s0
 80164fc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016504:	da1a      	bge.n	801653c <__ieee754_powf+0x53c>
 8016506:	f000 f8b1 	bl	801666c <scalbnf>
 801650a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801650e:	e5c9      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016510:	4a19      	ldr	r2, [pc, #100]	; (8016578 <__ieee754_powf+0x578>)
 8016512:	4293      	cmp	r3, r2
 8016514:	dd02      	ble.n	801651c <__ieee754_powf+0x51c>
 8016516:	eddf 7a19 	vldr	s15, [pc, #100]	; 801657c <__ieee754_powf+0x57c>
 801651a:	e67b      	b.n	8016214 <__ieee754_powf+0x214>
 801651c:	d108      	bne.n	8016530 <__ieee754_powf+0x530>
 801651e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016522:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8016526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801652a:	f6ff af7b 	blt.w	8016424 <__ieee754_powf+0x424>
 801652e:	e7f2      	b.n	8016516 <__ieee754_powf+0x516>
 8016530:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8016534:	f73f af76 	bgt.w	8016424 <__ieee754_powf+0x424>
 8016538:	2000      	movs	r0, #0
 801653a:	e78f      	b.n	801645c <__ieee754_powf+0x45c>
 801653c:	ee00 3a10 	vmov	s0, r3
 8016540:	e7e3      	b.n	801650a <__ieee754_powf+0x50a>
 8016542:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016546:	e5ad      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016548:	eeb0 0a68 	vmov.f32	s0, s17
 801654c:	e5aa      	b.n	80160a4 <__ieee754_powf+0xa4>
 801654e:	eeb0 0a48 	vmov.f32	s0, s16
 8016552:	e5a7      	b.n	80160a4 <__ieee754_powf+0xa4>
 8016554:	007fffff 	.word	0x007fffff
 8016558:	3f317218 	.word	0x3f317218
 801655c:	35bfbe8c 	.word	0x35bfbe8c
 8016560:	3f317200 	.word	0x3f317200
 8016564:	3331bb4c 	.word	0x3331bb4c
 8016568:	b5ddea0e 	.word	0xb5ddea0e
 801656c:	388ab355 	.word	0x388ab355
 8016570:	bb360b61 	.word	0xbb360b61
 8016574:	3e2aaaab 	.word	0x3e2aaaab
 8016578:	43160000 	.word	0x43160000
 801657c:	0da24260 	.word	0x0da24260

08016580 <__ieee754_sqrtf>:
 8016580:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016584:	4770      	bx	lr

08016586 <matherr>:
 8016586:	2000      	movs	r0, #0
 8016588:	4770      	bx	lr

0801658a <fabsf>:
 801658a:	ee10 3a10 	vmov	r3, s0
 801658e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016592:	ee00 3a10 	vmov	s0, r3
 8016596:	4770      	bx	lr

08016598 <finitef>:
 8016598:	ee10 3a10 	vmov	r3, s0
 801659c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80165a0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80165a4:	bfac      	ite	ge
 80165a6:	2000      	movge	r0, #0
 80165a8:	2001      	movlt	r0, #1
 80165aa:	4770      	bx	lr

080165ac <nanf>:
 80165ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80165b4 <nanf+0x8>
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	7fc00000 	.word	0x7fc00000

080165b8 <rintf>:
 80165b8:	b513      	push	{r0, r1, r4, lr}
 80165ba:	ee10 1a10 	vmov	r1, s0
 80165be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80165c2:	0ddc      	lsrs	r4, r3, #23
 80165c4:	3c7f      	subs	r4, #127	; 0x7f
 80165c6:	2c16      	cmp	r4, #22
 80165c8:	dc46      	bgt.n	8016658 <rintf+0xa0>
 80165ca:	b32b      	cbz	r3, 8016618 <rintf+0x60>
 80165cc:	2c00      	cmp	r4, #0
 80165ce:	ee10 2a10 	vmov	r2, s0
 80165d2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80165d6:	da21      	bge.n	801661c <rintf+0x64>
 80165d8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80165dc:	425b      	negs	r3, r3
 80165de:	4a21      	ldr	r2, [pc, #132]	; (8016664 <rintf+0xac>)
 80165e0:	0a5b      	lsrs	r3, r3, #9
 80165e2:	0d09      	lsrs	r1, r1, #20
 80165e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80165e8:	0509      	lsls	r1, r1, #20
 80165ea:	430b      	orrs	r3, r1
 80165ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80165f0:	ee07 3a90 	vmov	s15, r3
 80165f4:	edd2 6a00 	vldr	s13, [r2]
 80165f8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80165fc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016600:	eddd 7a01 	vldr	s15, [sp, #4]
 8016604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016608:	ee17 3a90 	vmov	r3, s15
 801660c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016610:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8016614:	ee00 3a10 	vmov	s0, r3
 8016618:	b002      	add	sp, #8
 801661a:	bd10      	pop	{r4, pc}
 801661c:	4b12      	ldr	r3, [pc, #72]	; (8016668 <rintf+0xb0>)
 801661e:	4123      	asrs	r3, r4
 8016620:	4219      	tst	r1, r3
 8016622:	d0f9      	beq.n	8016618 <rintf+0x60>
 8016624:	085b      	lsrs	r3, r3, #1
 8016626:	4219      	tst	r1, r3
 8016628:	d006      	beq.n	8016638 <rintf+0x80>
 801662a:	ea21 0203 	bic.w	r2, r1, r3
 801662e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016632:	fa43 f404 	asr.w	r4, r3, r4
 8016636:	4322      	orrs	r2, r4
 8016638:	4b0a      	ldr	r3, [pc, #40]	; (8016664 <rintf+0xac>)
 801663a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801663e:	ed90 7a00 	vldr	s14, [r0]
 8016642:	ee07 2a90 	vmov	s15, r2
 8016646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801664a:	edcd 7a01 	vstr	s15, [sp, #4]
 801664e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016652:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016656:	e7df      	b.n	8016618 <rintf+0x60>
 8016658:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801665c:	d3dc      	bcc.n	8016618 <rintf+0x60>
 801665e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016662:	e7d9      	b.n	8016618 <rintf+0x60>
 8016664:	08016d3c 	.word	0x08016d3c
 8016668:	007fffff 	.word	0x007fffff

0801666c <scalbnf>:
 801666c:	b508      	push	{r3, lr}
 801666e:	ee10 2a10 	vmov	r2, s0
 8016672:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016676:	ed2d 8b02 	vpush	{d8}
 801667a:	eef0 0a40 	vmov.f32	s1, s0
 801667e:	d004      	beq.n	801668a <scalbnf+0x1e>
 8016680:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016684:	d306      	bcc.n	8016694 <scalbnf+0x28>
 8016686:	ee70 0a00 	vadd.f32	s1, s0, s0
 801668a:	ecbd 8b02 	vpop	{d8}
 801668e:	eeb0 0a60 	vmov.f32	s0, s1
 8016692:	bd08      	pop	{r3, pc}
 8016694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016698:	d21c      	bcs.n	80166d4 <scalbnf+0x68>
 801669a:	4b1f      	ldr	r3, [pc, #124]	; (8016718 <scalbnf+0xac>)
 801669c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801671c <scalbnf+0xb0>
 80166a0:	4298      	cmp	r0, r3
 80166a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80166a6:	db10      	blt.n	80166ca <scalbnf+0x5e>
 80166a8:	ee10 2a90 	vmov	r2, s1
 80166ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80166b0:	3b19      	subs	r3, #25
 80166b2:	4403      	add	r3, r0
 80166b4:	2bfe      	cmp	r3, #254	; 0xfe
 80166b6:	dd0f      	ble.n	80166d8 <scalbnf+0x6c>
 80166b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016720 <scalbnf+0xb4>
 80166bc:	eeb0 0a48 	vmov.f32	s0, s16
 80166c0:	f000 f834 	bl	801672c <copysignf>
 80166c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80166c8:	e7df      	b.n	801668a <scalbnf+0x1e>
 80166ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016724 <scalbnf+0xb8>
 80166ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80166d2:	e7da      	b.n	801668a <scalbnf+0x1e>
 80166d4:	0ddb      	lsrs	r3, r3, #23
 80166d6:	e7ec      	b.n	80166b2 <scalbnf+0x46>
 80166d8:	2b00      	cmp	r3, #0
 80166da:	dd06      	ble.n	80166ea <scalbnf+0x7e>
 80166dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80166e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80166e4:	ee00 3a90 	vmov	s1, r3
 80166e8:	e7cf      	b.n	801668a <scalbnf+0x1e>
 80166ea:	f113 0f16 	cmn.w	r3, #22
 80166ee:	da06      	bge.n	80166fe <scalbnf+0x92>
 80166f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80166f4:	4298      	cmp	r0, r3
 80166f6:	dcdf      	bgt.n	80166b8 <scalbnf+0x4c>
 80166f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8016724 <scalbnf+0xb8>
 80166fc:	e7de      	b.n	80166bc <scalbnf+0x50>
 80166fe:	3319      	adds	r3, #25
 8016700:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016704:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016708:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016728 <scalbnf+0xbc>
 801670c:	ee07 3a10 	vmov	s14, r3
 8016710:	ee67 0a27 	vmul.f32	s1, s14, s15
 8016714:	e7b9      	b.n	801668a <scalbnf+0x1e>
 8016716:	bf00      	nop
 8016718:	ffff3cb0 	.word	0xffff3cb0
 801671c:	4c000000 	.word	0x4c000000
 8016720:	7149f2ca 	.word	0x7149f2ca
 8016724:	0da24260 	.word	0x0da24260
 8016728:	33000000 	.word	0x33000000

0801672c <copysignf>:
 801672c:	ee10 3a10 	vmov	r3, s0
 8016730:	ee10 2a90 	vmov	r2, s1
 8016734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016738:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801673c:	4313      	orrs	r3, r2
 801673e:	ee00 3a10 	vmov	s0, r3
 8016742:	4770      	bx	lr

08016744 <_init>:
 8016744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016746:	bf00      	nop
 8016748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801674a:	bc08      	pop	{r3}
 801674c:	469e      	mov	lr, r3
 801674e:	4770      	bx	lr

08016750 <_fini>:
 8016750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016752:	bf00      	nop
 8016754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016756:	bc08      	pop	{r3}
 8016758:	469e      	mov	lr, r3
 801675a:	4770      	bx	lr
