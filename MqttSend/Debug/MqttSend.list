
MqttSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08017b88  08017b88  00027b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181c8  080181c8  000303bc  2**0
                  CONTENTS
  4 .ARM          00000008  080181c8  080181c8  000281c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181d0  080181d0  000303bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080181d0  080181d0  000281d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181d4  080181d4  000281d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  080181d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010194  200003bc  08018594  000303bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010550  08018594  00030550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004945d  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008800  00000000  00000000  00079849  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003420  00000000  00000000  00082050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003090  00000000  00000000  00085470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003976d  00000000  00000000  00088500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003100b  00000000  00000000  000c1c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001388d9  00000000  00000000  000f2c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022b551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eebc  00000000  00000000  0022b5cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017b70 	.word	0x08017b70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003c0 	.word	0x200003c0
 80001ec:	08017b70 	.word	0x08017b70

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <ESP_timeoutBegin>:
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength);

/*
 * @brief INTERNAL Timeout setup.
 */
static void ESP_timeoutBegin(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	// Get entry time.
	//ESP_t0 = HAL_GetTick();
	ESP_t0 = xTaskGetTickCount();
 8000f6c:	f011 fb86 	bl	801267c <xTaskGetTickCount>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <ESP_timeoutBegin+0x14>)
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003d8 	.word	0x200003d8

08000f80 <ESP_timeoutIsExpired>:
/*
 * @brief INTERNAL Timeout checker.
 * @param interval_ms Interval time in ms.
 * @return True if timeout expired.
 */
static bool ESP_timeoutIsExpired(const uint16_t interval_ms) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	// Check if the given interval is in the past.
	//return (interval_ms < (HAL_GetTick() - ESP_t0));
	return (interval_ms < (xTaskGetTickCount() - ESP_t0));
 8000f8a:	88fc      	ldrh	r4, [r7, #6]
 8000f8c:	f011 fb76 	bl	801267c <xTaskGetTickCount>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ESP_timeoutIsExpired+0x2c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	bf34      	ite	cc
 8000f9c:	2301      	movcc	r3, #1
 8000f9e:	2300      	movcs	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200003d8 	.word	0x200003d8

08000fb0 <ESP_Delay>:
/*
 * @brief Creates non-blocking delay.
 * @param delay_ms Delay time in ms.
 * @return SUCCESS, INPROGRESS.
 */
ESP8266_StatusTypeDef ESP_Delay(const uint16_t delay_ms){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	// Function entry.
	if(!ESP82_inProgress){
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <ESP_Delay+0x58>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <ESP_Delay+0x1c>
		// Start timeout.
		ESP_timeoutBegin();
 8000fc8:	f7ff ffce 	bl	8000f68 <ESP_timeoutBegin>
	}

	ESP82_inProgress = !ESP_timeoutIsExpired(delay_ms);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffd6 	bl	8000f80 <ESP_timeoutIsExpired>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf14      	ite	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	2300      	moveq	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <ESP_Delay+0x58>)
 8000fee:	701a      	strb	r2, [r3, #0]

	if(ESP82_inProgress)
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <ESP_Delay+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <ESP_Delay+0x4c>
		return ESP8266_BUSY;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <ESP_Delay+0x4e>
	else
		return ESP8266_OK;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003dc 	.word	0x200003dc

0800100c <ESP_ConnectWifi>:
 * @param resetToDefault If true, reset the module to default settings before connecting.
 * @param ssid AP name.
 * @param pass AP password.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_ConnectWifi(const bool resetToDefault, const char * ssid, const char * pass) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	73fb      	strb	r3, [r7, #15]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 800101a:	4b49      	ldr	r3, [pc, #292]	; (8001140 <ESP_ConnectWifi+0x134>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <ESP_ConnectWifi+0x1c>
 8001022:	4b48      	ldr	r3, [pc, #288]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	e000      	b.n	800102a <ESP_ConnectWifi+0x1e>
 8001028:	2300      	movs	r3, #0
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <ESP_ConnectWifi+0x138>)
 800102c:	7013      	strb	r3, [r2, #0]
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d87c      	bhi.n	8001130 <ESP_ConnectWifi+0x124>
 8001036:	a201      	add	r2, pc, #4	; (adr r2, 800103c <ESP_ConnectWifi+0x30>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	08001055 	.word	0x08001055
 8001040:	08001073 	.word	0x08001073
 8001044:	0800109f 	.word	0x0800109f
 8001048:	080010c9 	.word	0x080010c9
 800104c:	080010ef 	.word	0x080010ef
 8001050:	0800111b 	.word	0x0800111b
	case ESP82_State0:
			// Wait for startup phase to finish.
			if(ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART))) {
 8001054:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001058:	f7ff ffaa 	bl	8000fb0 <ESP_Delay>
 800105c:	4603      	mov	r3, r0
 800105e:	75fb      	strb	r3, [r7, #23]
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <ESP_ConnectWifi+0x62>
				// To the next state.
				internalState = ESP82_State1;
 8001066:	4b37      	ldr	r3, [pc, #220]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e001      	b.n	8001072 <ESP_ConnectWifi+0x66>
			} else {
				// INPROGRESS or SUCCESS if no reset is requested.
				return result;
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	e061      	b.n	8001136 <ESP_ConnectWifi+0x12a>
			}
	//nobreak;
	case ESP82_State1:
		// AT+RESTORE (if requested).
		if(!resetToDefault || (ESP8266_OK == (result = atCommand((uint8_t*)"AT\r\n", 4, (uint8_t*) AT_OK_STRING)))) {
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <ESP_ConnectWifi+0x86>
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <ESP_ConnectWifi+0x13c>)
 8001080:	2104      	movs	r1, #4
 8001082:	4832      	ldr	r0, [pc, #200]	; (800114c <ESP_ConnectWifi+0x140>)
 8001084:	f000 f93e 	bl	8001304 <atCommand>
 8001088:	4603      	mov	r3, r0
 800108a:	75fb      	strb	r3, [r7, #23]
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d103      	bne.n	800109a <ESP_ConnectWifi+0x8e>
			// To the next state.
			internalState = ESP82_State2;
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001094:	2202      	movs	r2, #2
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e001      	b.n	800109e <ESP_ConnectWifi+0x92>
		} else {
			// Exit on ERROR or INPROGRESS.
			return result;
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	e04b      	b.n	8001136 <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State2:
		// If resetted, wait for restart to finish.
		if(!resetToDefault || (ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART)))){
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <ESP_ConnectWifi+0xb0>
 80010aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ae:	f7ff ff7f 	bl	8000fb0 <ESP_Delay>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <ESP_ConnectWifi+0xb8>
				// To the next state.
				internalState = ESP82_State3;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <ESP_ConnectWifi+0x138>)
 80010be:	2203      	movs	r2, #3
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e001      	b.n	80010c8 <ESP_ConnectWifi+0xbc>
		}else{
			// INPROGRESS or SUCCESS if no reset is requested.
			return result;
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	e036      	b.n	8001136 <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State3:
		// AT+CWMODE (client mode)
		if((ESP8266_OK == (result = atCommand((uint8_t*)"AT+CWMODE=1\r\n", 13, (uint8_t*) AT_OK_STRING))) && (ssid != NULL)){
 80010c8:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <ESP_ConnectWifi+0x13c>)
 80010ca:	210d      	movs	r1, #13
 80010cc:	4820      	ldr	r0, [pc, #128]	; (8001150 <ESP_ConnectWifi+0x144>)
 80010ce:	f000 f919 	bl	8001304 <atCommand>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d106      	bne.n	80010ea <ESP_ConnectWifi+0xde>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <ESP_ConnectWifi+0xde>
			// To the next state.
			internalState = ESP82_State4;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <ESP_ConnectWifi+0x138>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e001      	b.n	80010ee <ESP_ConnectWifi+0xe2>
		} else{
			// Exit on ERROR, INPROGRESS or SUCCESS (if no SSID is provided).
			return result;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	e023      	b.n	8001136 <ESP_ConnectWifi+0x12a>
		}

		// nobreak;
	case ESP82_State4:
		// Size check.
		if ((strlen(ssid) + strlen(pass)) > (ESP_BUFFERSIZE_CMD - 17)) {
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff f87e 	bl	80001f0 <strlen>
 80010f4:	4604      	mov	r4, r0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff f87a 	bl	80001f0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4423      	add	r3, r4
 8001100:	2b6f      	cmp	r3, #111	; 0x6f
 8001102:	d901      	bls.n	8001108 <ESP_ConnectWifi+0xfc>
			return false;
 8001104:	2300      	movs	r3, #0
 8001106:	e016      	b.n	8001136 <ESP_ConnectWifi+0x12a>
		}

		// AT+CWJAP prepare.
		sprintf((char *)ESP82_cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4911      	ldr	r1, [pc, #68]	; (8001154 <ESP_ConnectWifi+0x148>)
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <ESP_ConnectWifi+0x14c>)
 8001110:	f014 f978 	bl	8015404 <siprintf>

		// To the next state.
		internalState = ESP82_State5;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001116:	2205      	movs	r2, #5
 8001118:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State5:
		// AT+CWJAP
		return atCommand(ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <ESP_ConnectWifi+0x14c>)
 800111c:	f7ff f868 	bl	80001f0 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <ESP_ConnectWifi+0x13c>)
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <ESP_ConnectWifi+0x14c>)
 8001128:	f000 f8ec 	bl	8001304 <atCommand>
 800112c:	4603      	mov	r3, r0
 800112e:	e002      	b.n	8001136 <ESP_ConnectWifi+0x12a>

		//nobreak;
	default:
		// To the first state.
		internalState = ESP82_State0;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <ESP_ConnectWifi+0x138>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
	}
}
 8001136:	4618      	mov	r0, r3
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	200003dc 	.word	0x200003dc
 8001144:	20000460 	.word	0x20000460
 8001148:	08017ba0 	.word	0x08017ba0
 800114c:	08017ba8 	.word	0x08017ba8
 8001150:	08017bb0 	.word	0x08017bb0
 8001154:	08017bc0 	.word	0x08017bc0
 8001158:	200003e0 	.word	0x200003e0

0800115c <ESP_IsConnectedWifi>:

/*
 * @brief Connection test.
 * @return SUCCESS, INPROGRESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_IsConnectedWifi(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	return atCommand((uint8_t*)"AT+CIPSTATUS\r\n", 14, (uint8_t*) AT_OK_STRING);
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <ESP_IsConnectedWifi+0x14>)
 8001162:	210e      	movs	r1, #14
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <ESP_IsConnectedWifi+0x18>)
 8001166:	f000 f8cd 	bl	8001304 <atCommand>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}
 8001170:	08017ba0 	.word	0x08017ba0
 8001174:	08017bd8 	.word	0x08017bd8

08001178 <ESP_StartTCP>:
 * @param port Remote port.
 * @param keepalive Keep-alive time between 0 to 7200 seconds.
 * @param ssl Starts SSL connection.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_StartTCP(const char * host, const uint16_t port, const uint16_t keepalive, const bool ssl) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af02      	add	r7, sp, #8
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	817b      	strh	r3, [r7, #10]
 800118a:	460b      	mov	r3, r1
 800118c:	813b      	strh	r3, [r7, #8]
 800118e:	4613      	mov	r3, r2
 8001190:	71fb      	strb	r3, [r7, #7]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <ESP_StartTCP+0xc8>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <ESP_StartTCP+0x28>
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <ESP_StartTCP+0xcc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	e000      	b.n	80011a2 <ESP_StartTCP+0x2a>
 80011a0:	2300      	movs	r3, #0
 80011a2:	4a28      	ldr	r2, [pc, #160]	; (8001244 <ESP_StartTCP+0xcc>)
 80011a4:	7013      	strb	r3, [r2, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <ESP_StartTCP+0xcc>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d021      	beq.n	80011f2 <ESP_StartTCP+0x7a>
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d037      	beq.n	8001222 <ESP_StartTCP+0xaa>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d140      	bne.n	8001238 <ESP_StartTCP+0xc0>
	case ESP82_State0:
		// Size check.
		if(strlen(host) > (ESP_BUFFERSIZE_CMD - 34)){
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff f81a 	bl	80001f0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b5e      	cmp	r3, #94	; 0x5e
 80011c0:	d901      	bls.n	80011c6 <ESP_StartTCP+0x4e>
			return false;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e038      	b.n	8001238 <ESP_StartTCP+0xc0>
		}

		// Keepalive check.
		if(keepalive > 7200){
 80011c6:	893b      	ldrh	r3, [r7, #8]
 80011c8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011cc:	d901      	bls.n	80011d2 <ESP_StartTCP+0x5a>
			return false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e032      	b.n	8001238 <ESP_StartTCP+0xc0>
		}

		// prepare AT+CIPSTART
		//sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i,%i\r\n", (ssl ? "SSL" : "TCP"), host, port, keepalive);
		sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i\r\n", (ssl ? "SSL" : "TCP"), host, port);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <ESP_StartTCP+0x64>
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <ESP_StartTCP+0xd0>)
 80011da:	e000      	b.n	80011de <ESP_StartTCP+0x66>
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <ESP_StartTCP+0xd4>)
 80011de:	897b      	ldrh	r3, [r7, #10]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	491a      	ldr	r1, [pc, #104]	; (8001250 <ESP_StartTCP+0xd8>)
 80011e6:	481b      	ldr	r0, [pc, #108]	; (8001254 <ESP_StartTCP+0xdc>)
 80011e8:	f014 f90c 	bl	8015404 <siprintf>


		// To the next state.
		internalState = ESP82_State1;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <ESP_StartTCP+0xcc>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State1:
		// AT+CIPSSLSIZE (or skip)
		if(!ssl || (ESP8266_OK == (result = atCommand((uint8_t*)ESP_SSLSIZE_str, 20, (uint8_t*) AT_OK_STRING)))){
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10b      	bne.n	8001216 <ESP_StartTCP+0x9e>
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <ESP_StartTCP+0xe0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <ESP_StartTCP+0xe4>)
 8001204:	2114      	movs	r1, #20
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f87c 	bl	8001304 <atCommand>
 800120c:	4603      	mov	r3, r0
 800120e:	75fb      	strb	r3, [r7, #23]
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d103      	bne.n	800121e <ESP_StartTCP+0xa6>
			// To the next state.
			internalState = ESP82_State2;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <ESP_StartTCP+0xcc>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e001      	b.n	8001222 <ESP_StartTCP+0xaa>
		}else{
			// Exit on ERROR or INPROGRESS.
			return result;
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	e00a      	b.n	8001238 <ESP_StartTCP+0xc0>
		}
		//nobreak;
	case ESP82_State2:
		// AT+CIPSTART
		return atCommand((uint8_t*)ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <ESP_StartTCP+0xdc>)
 8001224:	f7fe ffe4 	bl	80001f0 <strlen>
 8001228:	4603      	mov	r3, r0
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <ESP_StartTCP+0xe4>)
 800122c:	4619      	mov	r1, r3
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <ESP_StartTCP+0xdc>)
 8001230:	f000 f868 	bl	8001304 <atCommand>
 8001234:	4603      	mov	r3, r0
 8001236:	e7ff      	b.n	8001238 <ESP_StartTCP+0xc0>
	}
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200003dc 	.word	0x200003dc
 8001244:	20000461 	.word	0x20000461
 8001248:	08017be8 	.word	0x08017be8
 800124c:	08017bec 	.word	0x08017bec
 8001250:	08017bf0 	.word	0x08017bf0
 8001254:	200003e0 	.word	0x200003e0
 8001258:	20000000 	.word	0x20000000
 800125c:	08017ba0 	.word	0x08017ba0

08001260 <ESP_SendData>:
 * @brief  Send data over the wifi connection.
 * @param  Buffer: the buffer to send
 * @param  Length: the Buffer's data size.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef ESP_SendData(uint8_t* Buffer, uint32_t Length) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Ret = ESP8266_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]

	if (Buffer != NULL) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d027      	beq.n	80012c4 <ESP_SendData+0x64>
		//uint32_t tickStart;
		//TickType_t tickStart;

		/* Construct the CIPSEND command */
		memset(ESP82_cmdBuffer, '\0', ESP_BUFFERSIZE_CMD);
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	2100      	movs	r1, #0
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <ESP_SendData+0x70>)
 800127a:	f013 fcc2 	bl	8014c02 <memset>
		sprintf((char *) ESP82_cmdBuffer, "AT+CIPSEND=%lu%c%c", Length  , '\r', '\n');
 800127e:	230a      	movs	r3, #10
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	230d      	movs	r3, #13
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4913      	ldr	r1, [pc, #76]	; (80012d4 <ESP_SendData+0x74>)
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <ESP_SendData+0x70>)
 800128a:	f014 f8bb 	bl	8015404 <siprintf>

		/* The CIPSEND command doesn't have a return command
		 until the data is actually sent. Thus we check here whether
		 we got the '>' prompt or not. */
		Ret = atCommand(ESP82_cmdBuffer, strlen((char *) ESP82_cmdBuffer),
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <ESP_SendData+0x70>)
 8001290:	f7fe ffae 	bl	80001f0 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <ESP_SendData+0x78>)
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <ESP_SendData+0x70>)
 800129c:	f000 f832 	bl	8001304 <atCommand>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
				(uint8_t*) AT_SEND_PROMPT_STRING);

		/* Return Error */
		if (Ret != ESP8266_OK) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <ESP_SendData+0x4e>
			return ESP8266_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00b      	b.n	80012c6 <ESP_SendData+0x66>
		}

		/* Wait before sending data. */
		osDelay(1000); //not blocking delay
 80012ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b2:	f00f fe11 	bl	8010ed8 <osDelay>

		/* Send the data */
		Ret = atCommand(Buffer, Length, (uint8_t*) AT_SEND_OK_STRING);//AT_IPD_STRING);//
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <ESP_SendData+0x7c>)
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f822 	bl	8001304 <atCommand>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
	}

	return Ret;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200003e0 	.word	0x200003e0
 80012d4:	08017c0c 	.word	0x08017c0c
 80012d8:	08017c20 	.word	0x08017c20
 80012dc:	08017c28 	.word	0x08017c28

080012e0 <ESP_ReceiveData>:
 * @param Length data buffer length.
 * @param RetLength data length received.
 * @return SUCCESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_ReceiveData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	ESP8266_StatusTypeDef Ret;

	/* Receive the data from the host */
	Ret = getData(Buffer, Length, RetLength);
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f8df 	bl	80014b4 <getData>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]

	return Ret;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <atCommand>:


ESP8266_StatusTypeDef atCommand(uint8_t* cmd, uint32_t Length, const uint8_t* Token) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <atCommand+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <atCommand+0x1a>
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <atCommand+0x5c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	e000      	b.n	8001320 <atCommand+0x1c>
 800131e:	2300      	movs	r3, #0
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <atCommand+0x5c>)
 8001322:	7013      	strb	r3, [r2, #0]
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <atCommand+0x5c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <atCommand+0x2e>
 800132c:	2b01      	cmp	r3, #1
 800132e:	d00c      	beq.n	800134a <atCommand+0x46>
 8001330:	e010      	b.n	8001354 <atCommand+0x50>
	case ESP82_State0:

		result = executeAtCmd(cmd, Length);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f815 	bl	8001364 <executeAtCmd>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]

		// To the next state.
		if(result == ESP8266_OK)
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <atCommand+0x46>
			internalState = ESP82_State1;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <atCommand+0x5c>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
	case ESP82_State1:
		return responseAtCmd(Token);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f820 	bl	8001390 <responseAtCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	e7ff      	b.n	8001354 <atCommand+0x50>

	}
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200003dc 	.word	0x200003dc
 8001360:	20000462 	.word	0x20000462

08001364 <executeAtCmd>:
 * @brief  Run the AT command
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef executeAtCmd(uint8_t* cmd, uint32_t Length) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]

	/* Send the command */
	if (HAL_UART_F_Send((char*)cmd, Length) < 0) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f004 f807 	bl	8005388 <HAL_UART_F_Send>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	da01      	bge.n	8001384 <executeAtCmd+0x20>
		return ESP8266_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <executeAtCmd+0x22>
	}
	return ESP8266_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <responseAtCmd>:
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef responseAtCmd(const uint8_t* Token) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint32_t idx = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
	uint8_t RxChar;
	uint8_t status_io = 0;//0 is ok
 800139c:	2300      	movs	r3, #0
 800139e:	72fb      	strb	r3, [r7, #11]

	/* Reset the Rx buffer to make sure no previous data exist */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 80013a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013a4:	2100      	movs	r1, #0
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <responseAtCmd+0x8c>)
 80013a8:	f013 fc2b 	bl	8014c02 <memset>
	//uint32_t currentTime = 0;
	/* Wait for reception */
	//do {
	while(1){
		/* Wait to recieve data */
		if (ESP_Receive(&RxChar, 1) != 0) {
 80013ac:	f107 030a 	add.w	r3, r7, #10
 80013b0:	2101      	movs	r1, #1
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f836 	bl	8001424 <ESP_Receive>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <responseAtCmd+0x46>
			RxBuffer[idx++] = RxChar;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60fa      	str	r2, [r7, #12]
 80013c4:	7ab9      	ldrb	r1, [r7, #10]
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <responseAtCmd+0x8c>)
 80013c8:	54d1      	strb	r1, [r2, r3]
			status_io = 1;
			break;
		}

		/* Check that max buffer size has not been reached */
		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d106      	bne.n	80013e2 <responseAtCmd+0x52>
 80013d4:	e002      	b.n	80013dc <responseAtCmd+0x4c>
			status_io = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	72fb      	strb	r3, [r7, #11]
			break;
 80013da:	e015      	b.n	8001408 <responseAtCmd+0x78>
			status_io = 1;
 80013dc:	2301      	movs	r3, #1
 80013de:	72fb      	strb	r3, [r7, #11]
			break;
 80013e0:	e012      	b.n	8001408 <responseAtCmd+0x78>
		}

		/* Extract the Token */
		if (strstr((char *) RxBuffer, (char *) Token) != NULL) {
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <responseAtCmd+0x8c>)
 80013e6:	f014 f835 	bl	8015454 <strstr>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <responseAtCmd+0x66>
			status_io = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	72fb      	strb	r3, [r7, #11]
			break;
 80013f4:	e008      	b.n	8001408 <responseAtCmd+0x78>
			//return ESP8266_OK;
		}

		/* Check if the message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80013f6:	490a      	ldr	r1, [pc, #40]	; (8001420 <responseAtCmd+0x90>)
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <responseAtCmd+0x8c>)
 80013fa:	f014 f82b 	bl	8015454 <strstr>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0d3      	beq.n	80013ac <responseAtCmd+0x1c>
			status_io = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	72fb      	strb	r3, [r7, #11]
		}
		//currentTime++;
		//osDelay(1);
	}//while(currentTime < ESP_LONG_TIME_OUT);

	if(status_io == 1)
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <responseAtCmd+0x82>
		return ESP8266_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <responseAtCmd+0x84>
	return ESP8266_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000d6fc 	.word	0x2000d6fc
 8001420:	08017c34 	.word	0x08017c34

08001424 <ESP_Receive>:




static int32_t ESP_Receive(uint8_t *Buffer, uint32_t Length) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	uint32_t ReadData = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
	/* Loop until data received */
	while (Length--) {
 8001432:	e032      	b.n	800149a <ESP_Receive+0x76>
		//uint32_t tickStart = HAL_GetTick();
		TickType_t tickStart = xTaskGetTickCount();
 8001434:	f011 f922 	bl	801267c <xTaskGetTickCount>
 8001438:	6138      	str	r0, [r7, #16]
		uint32_t currentTime = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
		do {
			if (WiFiRxBuffer.head != WiFiRxBuffer.tail) {
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <ESP_Receive+0x8c>)
 8001440:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <ESP_Receive+0x8c>)
 8001446:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800144a:	429a      	cmp	r2, r3
 800144c:	d01c      	beq.n	8001488 <ESP_Receive+0x64>
				/* serial data available, so return data to user */
				*Buffer++ = WiFiRxBuffer.data[WiFiRxBuffer.head++];
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <ESP_Receive+0x8c>)
 8001450:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b291      	uxth	r1, r2
 8001458:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <ESP_Receive+0x8c>)
 800145a:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 800145e:	4619      	mov	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <ESP_Receive+0x8c>)
 8001468:	5c52      	ldrb	r2, [r2, r1]
 800146a:	701a      	strb	r2, [r3, #0]

				ReadData++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]

				/* check for ring buffer wrap */
				if (WiFiRxBuffer.head >= ESP_BUFFERSIZE_CIRCULAR) {
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <ESP_Receive+0x8c>)
 8001474:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800147c:	d30d      	bcc.n	800149a <ESP_Receive+0x76>
					/* Ring buffer wrap, so reset head pointer to start of buffer */
					WiFiRxBuffer.head = 0;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <ESP_Receive+0x8c>)
 8001480:	2200      	movs	r2, #0
 8001482:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
				}
				break;
 8001486:	e008      	b.n	800149a <ESP_Receive+0x76>
			}
		} while((xTaskGetTickCount() - tickStart) < ESP_DEFAULT_TIME_OUT);
 8001488:	f011 f8f8 	bl	801267c <xTaskGetTickCount>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001496:	4293      	cmp	r3, r2
 8001498:	d9d1      	bls.n	800143e <ESP_Receive+0x1a>
	while (Length--) {
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	603a      	str	r2, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1c7      	bne.n	8001434 <ESP_Receive+0x10>
	}

	return ReadData;
 80014a4:	697b      	ldr	r3, [r7, #20]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000dcd8 	.word	0x2000dcd8

080014b4 <getData>:
 * @param  Buffer The buffer where to fill the received data
 * @param  Length the maximum data size to receive.
 * @param  RetLength Length of received data
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	uint8_t RxChar;
	uint32_t idx = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t LengthString[4];
	uint32_t LengthValue;
	uint8_t i = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]
	ESP8266_Boolean newChunk = ESP8266_FALSE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77bb      	strb	r3, [r7, #30]

	/* Reset the reception data length */
	*RetLength = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

	/* Reset the reception buffer */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 80014d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014d6:	2100      	movs	r1, #0
 80014d8:	484f      	ldr	r0, [pc, #316]	; (8001618 <getData+0x164>)
 80014da:	f013 fb92 	bl	8014c02 <memset>
	 by the string "+IPD,<chunk_size>:". Thus to get the actual data we need to:
	 - Receive data until getting the "+IPD," token, a new chunk is marked.
	 - Extract the 'chunk_size' then read the next 'chunk_size' bytes as actual data
	 - Mark end of the chunk.
	 - Repeat steps above until no more data is available. */
	uint32_t currentTime = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
	do{
	//while(1){
		if (ESP_Receive(&RxChar, 1) != 0) {
 80014e2:	f107 0317 	add.w	r3, r7, #23
 80014e6:	2101      	movs	r1, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff9b 	bl	8001424 <ESP_Receive>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d028      	beq.n	8001546 <getData+0x92>
			/* The data chunk starts with +IPD,<chunk length>: */
			if (newChunk == ESP8266_TRUE) {
 80014f4:	7fbb      	ldrb	r3, [r7, #30]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d119      	bne.n	800152e <getData+0x7a>
				/* Read the next lendthValue bytes as part from the actual data. */
				if (LengthValue--) {
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	623a      	str	r2, [r7, #32]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <getData+0x66>
					*Buffer++ = RxChar;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60fa      	str	r2, [r7, #12]
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	701a      	strb	r2, [r3, #0]
					(*RetLength)++;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e009      	b.n	800152e <getData+0x7a>
				} else {
					/* Clear the buffer as the new chunk has ended. */
					newChunk = ESP8266_FALSE;
 800151a:	2300      	movs	r3, #0
 800151c:	77bb      	strb	r3, [r7, #30]
					memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 800151e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001522:	2100      	movs	r1, #0
 8001524:	483c      	ldr	r0, [pc, #240]	; (8001618 <getData+0x164>)
 8001526:	f013 fb6c 	bl	8014c02 <memset>
					idx = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			RxBuffer[idx++] = RxChar;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	627a      	str	r2, [r7, #36]	; 0x24
 8001534:	7df9      	ldrb	r1, [r7, #23]
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <getData+0x164>)
 8001538:	54d1      	strb	r1, [r2, r3]
			} else {
				break;
			}
		}

		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001540:	4293      	cmp	r3, r2
 8001542:	d110      	bne.n	8001566 <getData+0xb2>
 8001544:	e007      	b.n	8001556 <getData+0xa2>
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8001546:	7fbb      	ldrb	r3, [r7, #30]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d158      	bne.n	80015fe <getData+0x14a>
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d055      	beq.n	80015fe <getData+0x14a>
				return ESP8266_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e05b      	b.n	800160e <getData+0x15a>
			/* In case of Buffer overflow, return error */
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8001556:	7fbb      	ldrb	r3, [r7, #30]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d150      	bne.n	80015fe <getData+0x14a>
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d04d      	beq.n	80015fe <getData+0x14a>
				return ESP8266_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e053      	b.n	800160e <getData+0x15a>
				break;
			}
		}

		/* When a new chunk is met, extact its size */
		if ((strstr((char *) RxBuffer, AT_IPD_STRING) != NULL)
 8001566:	492d      	ldr	r1, [pc, #180]	; (800161c <getData+0x168>)
 8001568:	482b      	ldr	r0, [pc, #172]	; (8001618 <getData+0x164>)
 800156a:	f013 ff73 	bl	8015454 <strstr>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d026      	beq.n	80015c2 <getData+0x10e>
				&& (newChunk == ESP8266_FALSE)) {
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d123      	bne.n	80015c2 <getData+0x10e>
			i = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	77fb      	strb	r3, [r7, #31]
			memset(LengthString, '\0', 4);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2204      	movs	r2, #4
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f013 fb3b 	bl	8014c02 <memset>
			do {
				ESP_Receive(&RxChar, 1);
 800158c:	f107 0317 	add.w	r3, r7, #23
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff46 	bl	8001424 <ESP_Receive>
				LengthString[i++] = RxChar;
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	77fa      	strb	r2, [r7, #31]
 800159e:	7dfa      	ldrb	r2, [r7, #23]
 80015a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015a4:	440b      	add	r3, r1
 80015a6:	f803 2c18 	strb.w	r2, [r3, #-24]
			} while (RxChar != ':');
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b3a      	cmp	r3, #58	; 0x3a
 80015ae:	d1ed      	bne.n	800158c <getData+0xd8>

			/* Get the buffer length */
			LengthValue = atoi((char *) LengthString);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f013 fad9 	bl	8014b6c <atoi>
 80015ba:	4603      	mov	r3, r0
 80015bc:	623b      	str	r3, [r7, #32]

			newChunk = ESP8266_TRUE;
 80015be:	2301      	movs	r3, #1
 80015c0:	77bb      	strb	r3, [r7, #30]
		}

		/* Check if message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80015c2:	4917      	ldr	r1, [pc, #92]	; (8001620 <getData+0x16c>)
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <getData+0x164>)
 80015c6:	f013 ff45 	bl	8015454 <strstr>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <getData+0x120>
			return ESP8266_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e01c      	b.n	800160e <getData+0x15a>
		}

		/* Check for the chunk end */
		if (strstr((char *) RxBuffer, AT_IPD_OK_STRING) != NULL) {
 80015d4:	4913      	ldr	r1, [pc, #76]	; (8001624 <getData+0x170>)
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <getData+0x164>)
 80015d8:	f013 ff3c 	bl	8015454 <strstr>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <getData+0x132>
			newChunk = ESP8266_FALSE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	77bb      	strb	r3, [r7, #30]
		}
		currentTime++;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
		osDelay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f00f fc73 	bl	8010ed8 <osDelay>
	}while(currentTime < ESP_LONG_TIME_OUT);
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015f8:	4293      	cmp	r3, r2
 80015fa:	f67f af72 	bls.w	80014e2 <getData+0x2e>

	if(currentTime > ESP_LONG_TIME_OUT)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <getData+0x158>
		return ESP8266_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <getData+0x15a>

	return ESP8266_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000d6fc 	.word	0x2000d6fc
 800161c:	08017c3c 	.word	0x08017c3c
 8001620:	08017c34 	.word	0x08017c34
 8001624:	08017c44 	.word	0x08017c44

08001628 <MQTTSerialize_connectLength>:
int MQTTSerialize_connectLength(MQTTPacket_connectData* options, MQTTProperties* connectProperties,
  MQTTProperties* willProperties)
#else
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
#endif
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	int len = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7a1b      	ldrb	r3, [r3, #8]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d102      	bne.n	8001642 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800163c:	230c      	movs	r3, #12
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e005      	b.n	800164e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion >= 4)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1b      	ldrb	r3, [r3, #8]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d901      	bls.n	800164e <MQTTSerialize_connectLength+0x26>
		len = 10;
 800164a:	230a      	movs	r3, #10
 800164c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	330c      	adds	r3, #12
 8001652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001656:	f000 fa29 	bl	8001aac <MQTTstrlen>
 800165a:	4603      	mov	r3, r0
 800165c:	3302      	adds	r3, #2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7edb      	ldrb	r3, [r3, #27]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3324      	adds	r3, #36	; 0x24
 8001670:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001674:	f000 fa1a 	bl	8001aac <MQTTstrlen>
 8001678:	4603      	mov	r3, r0
 800167a:	1c9c      	adds	r4, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3330      	adds	r3, #48	; 0x30
 8001680:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001684:	f000 fa12 	bl	8001aac <MQTTstrlen>
 8001688:	4603      	mov	r3, r0
 800168a:	4423      	add	r3, r4
 800168c:	3302      	adds	r3, #2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <MQTTSerialize_connectLength+0x7c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3340      	adds	r3, #64	; 0x40
 80016a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ac:	f000 f9fe 	bl	8001aac <MQTTstrlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	3302      	adds	r3, #2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <MQTTSerialize_connectLength+0xa2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	334c      	adds	r3, #76	; 0x4c
 80016ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016d2:	f000 f9eb 	bl	8001aac <MQTTstrlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	3302      	adds	r3, #2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
		  len += MQTTProperties_len(willProperties);
	}
#endif

	FUNC_EXIT_RC(len);
	return len;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
	...

080016ec <MQTTSerialize_connect>:
int MQTTV5Serialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options,
  MQTTProperties* connectProperties, MQTTProperties* willProperties)
#else
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
#endif
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
	FUNC_ENTRY;
	#if defined(MQTTV5)
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options,
		         connectProperties, willProperties)) > buflen)
	#else
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ff8a 	bl	8001628 <MQTTSerialize_connectLength>
 8001714:	6238      	str	r0, [r7, #32]
 8001716:	6a38      	ldr	r0, [r7, #32]
 8001718:	f000 f92e 	bl	8001978 <MQTTPacket_len>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4293      	cmp	r3, r2
 8001722:	da03      	bge.n	800172c <MQTTSerialize_connect+0x40>
	#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001724:	f06f 0301 	mvn.w	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800172a:	e0ca      	b.n	80018c2 <MQTTSerialize_connect+0x1d6>
	}

	header.byte = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8001730:	7e3b      	ldrb	r3, [r7, #24]
 8001732:	2201      	movs	r2, #1
 8001734:	f362 1307 	bfi	r3, r2, #4, #4
 8001738:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800173a:	7e3a      	ldrb	r2, [r7, #24]
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f927 	bl	8001996 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	6a39      	ldr	r1, [r7, #32]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f8c1 	bl	80018d4 <MQTTPacket_encode>
 8001752:	4602      	mov	r2, r0
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 5 || options->MQTTVersion == 4)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7a1b      	ldrb	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d003      	beq.n	800176a <MQTTSerialize_connect+0x7e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	2b04      	cmp	r3, #4
 8001768:	d106      	bne.n	8001778 <MQTTSerialize_connect+0x8c>
		writeCString(&ptr, "MQTT");
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4957      	ldr	r1, [pc, #348]	; (80018cc <MQTTSerialize_connect+0x1e0>)
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f94e 	bl	8001a12 <writeCString>
 8001776:	e00a      	b.n	800178e <MQTTSerialize_connect+0xa2>
	else if (options->MQTTVersion == 3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7a1b      	ldrb	r3, [r3, #8]
 800177c:	2b03      	cmp	r3, #3
 800177e:	f040 809f 	bne.w	80018c0 <MQTTSerialize_connect+0x1d4>
		writeCString(&ptr, "MQIsdp");
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4952      	ldr	r1, [pc, #328]	; (80018d0 <MQTTSerialize_connect+0x1e4>)
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f942 	bl	8001a12 <writeCString>
	else
	  goto exit;
	writeChar(&ptr, (char)options->MQTTVersion);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7a1a      	ldrb	r2, [r3, #8]
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f8fc 	bl	8001996 <writeChar>

	flags.all = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e9b      	ldrb	r3, [r3, #26]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	7d3b      	ldrb	r3, [r7, #20]
 80017ae:	f362 0341 	bfi	r3, r2, #1, #1
 80017b2:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7edb      	ldrb	r3, [r3, #27]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	7d3b      	ldrb	r3, [r7, #20]
 80017c4:	f362 0382 	bfi	r3, r2, #2, #1
 80017c8:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80017ca:	7d3b      	ldrb	r3, [r7, #20]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d013      	beq.n	80017fe <MQTTSerialize_connect+0x112>
	{
		flags.bits.willQoS = options->will.qos;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	7d3b      	ldrb	r3, [r7, #20]
 80017e4:	f362 03c4 	bfi	r3, r2, #3, #2
 80017e8:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7d3b      	ldrb	r3, [r7, #20]
 80017f8:	f362 1345 	bfi	r3, r2, #5, #1
 80017fc:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <MQTTSerialize_connect+0x122>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <MQTTSerialize_connect+0x12a>
		flags.bits.username = 1;
 800180e:	7d3b      	ldrb	r3, [r7, #20]
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <MQTTSerialize_connect+0x13a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <MQTTSerialize_connect+0x142>
		flags.bits.password = 1;
 8001826:	7d3b      	ldrb	r3, [r7, #20]
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800182e:	7d3a      	ldrb	r2, [r7, #20]
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f8ad 	bl	8001996 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8b1b      	ldrh	r3, [r3, #24]
 8001840:	461a      	mov	r2, r3
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f8b9 	bl	80019c0 <writeInt>
#if defined(MQTTV5)
	if (options->MQTTVersion == 5)
	  MQTTProperties_write(&ptr, connectProperties);
#endif
	writeMQTTString(&ptr, options->clientID);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f107 001c 	add.w	r0, r7, #28
 8001854:	330c      	adds	r3, #12
 8001856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001858:	f000 f8fa 	bl	8001a50 <writeMQTTString>
	if (options->willFlag)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7edb      	ldrb	r3, [r3, #27]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00d      	beq.n	8001880 <MQTTSerialize_connect+0x194>
#if defined(MQTTV5)
		/* write will properties */
		if (options->MQTTVersion == 5 && willProperties)
		  MQTTProperties_write(&ptr, willProperties);
#endif
		writeMQTTString(&ptr, options->will.topicName);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f107 001c 	add.w	r0, r7, #28
 800186a:	3324      	adds	r3, #36	; 0x24
 800186c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186e:	f000 f8ef 	bl	8001a50 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f107 001c 	add.w	r0, r7, #28
 8001878:	3330      	adds	r3, #48	; 0x30
 800187a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187c:	f000 f8e8 	bl	8001a50 <writeMQTTString>
	}
	if (flags.bits.username)
 8001880:	7d3b      	ldrb	r3, [r7, #20]
 8001882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <MQTTSerialize_connect+0x1ae>
		writeMQTTString(&ptr, options->username);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f107 001c 	add.w	r0, r7, #28
 8001892:	3340      	adds	r3, #64	; 0x40
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	f000 f8db 	bl	8001a50 <writeMQTTString>
	if (flags.bits.password)
 800189a:	7d3b      	ldrb	r3, [r7, #20]
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <MQTTSerialize_connect+0x1c8>
		writeMQTTString(&ptr, options->password);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f107 001c 	add.w	r0, r7, #28
 80018ac:	334c      	adds	r3, #76	; 0x4c
 80018ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b0:	f000 f8ce 	bl	8001a50 <writeMQTTString>

	rc = ptr - buf;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e000      	b.n	80018c2 <MQTTSerialize_connect+0x1d6>
	  goto exit;
 80018c0:	bf00      	nop

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	08017c4c 	.word	0x08017c4c
 80018d0:	08017c54 	.word	0x08017c54

080018d4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	425a      	negs	r2, r3
 80018e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018ee:	bf58      	it	pl
 80018f0:	4253      	negpl	r3, r2
 80018f2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da00      	bge.n	80018fc <MQTTPacket_encode+0x28>
 80018fa:	337f      	adds	r3, #127	; 0x7f
 80018fc:	11db      	asrs	r3, r3, #7
 80018fe:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	dd03      	ble.n	800190e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800190c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60fa      	str	r2, [r7, #12]
 8001914:	461a      	mov	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	7afa      	ldrb	r2, [r7, #11]
 800191c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dcde      	bgt.n	80018e2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001924:	68fb      	ldr	r3, [r7, #12]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <MQTTPacket_VBIlen>:
	return len;
}


int MQTTPacket_VBIlen(int rem_len)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	int rc = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]

	if (rem_len < 128)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b7f      	cmp	r3, #127	; 0x7f
 8001942:	dc02      	bgt.n	800194a <MQTTPacket_VBIlen+0x18>
		rc = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e00f      	b.n	800196a <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 16384)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001950:	da02      	bge.n	8001958 <MQTTPacket_VBIlen+0x26>
		rc = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e008      	b.n	800196a <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 2097152)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800195e:	da02      	bge.n	8001966 <MQTTPacket_VBIlen+0x34>
		rc = 3;
 8001960:	2303      	movs	r3, #3
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e001      	b.n	800196a <MQTTPacket_VBIlen+0x38>
	else
		rc = 4;
 8001966:	2304      	movs	r3, #4
 8001968:	60fb      	str	r3, [r7, #12]
  return rc;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* header byte + remaining length */
	return rem_len + 1  + MQTTPacket_VBIlen(rem_len);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1c5c      	adds	r4, r3, #1
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ffd4 	bl	8001932 <MQTTPacket_VBIlen>
 800198a:	4603      	mov	r3, r0
 800198c:	4423      	add	r3, r4
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	601a      	str	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da00      	bge.n	80019d2 <writeInt+0x12>
 80019d0:	33ff      	adds	r3, #255	; 0xff
 80019d2:	121b      	asrs	r3, r3, #8
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	425a      	negs	r2, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	bf58      	it	pl
 80019f2:	4253      	negpl	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001a1c:	6838      	ldr	r0, [r7, #0]
 8001a1e:	f7fe fbe7 	bl	80001f0 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffc9 	bl	80019c0 <writeInt>
	memcpy(*pptr, string, len);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	6839      	ldr	r1, [r7, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f013 f8d8 	bl	8014bec <memcpy>
	*pptr += len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	441a      	add	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	4638      	mov	r0, r7
 8001a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd12      	ble.n	8001a8a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4619      	mov	r1, r3
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f7ff ffa9 	bl	80019c0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f013 f8b8 	bl	8014bec <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	441a      	add	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001a88:	e00c      	b.n	8001aa4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff ffbc 	bl	8001a12 <writeCString>
}
 8001a9a:	e003      	b.n	8001aa4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff8e 	bl	80019c0 <writeInt>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fb93 	bl	80001f0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e001      	b.n	8001ad4 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	617b      	str	r3, [r7, #20]
	return rc;
 8001ad4:	697b      	ldr	r3, [r7, #20]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <MQTTSerialize_publishLength>:
#if defined(MQTTV5)
int MQTTV5Serialize_publishLength(int qos, MQTTString topicName, int payloadlen, MQTTProperties* properties)
#else
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
#endif
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8001af0:	463b      	mov	r3, r7
 8001af2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af6:	f7ff ffd9 	bl	8001aac <MQTTstrlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	1c9a      	adds	r2, r3, #2
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	4413      	add	r3, r2
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dd02      	ble.n	8001b14 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3302      	adds	r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001b14:	697b      	ldr	r3, [r7, #20]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <MQTTSerialize_publish>:
		MQTTString topicName, MQTTProperties* properties, unsigned char* payload, int payloadlen)
#else
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
#endif
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b08a      	sub	sp, #40	; 0x28
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTV5Serialize_publishLength(qos, topicName, payloadlen, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ffc8 	bl	8001ade <MQTTSerialize_publishLength>
 8001b4e:	61b8      	str	r0, [r7, #24]
 8001b50:	69b8      	ldr	r0, [r7, #24]
 8001b52:	f7ff ff11 	bl	8001978 <MQTTPacket_len>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	da03      	bge.n	8001b66 <MQTTSerialize_publish+0x48>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001b5e:	f06f 0301 	mvn.w	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001b64:	e04d      	b.n	8001c02 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8001b66:	7c3b      	ldrb	r3, [r7, #16]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f362 1307 	bfi	r3, r2, #4, #4
 8001b6e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	7c3b      	ldrb	r3, [r7, #16]
 8001b7a:	f362 03c3 	bfi	r3, r2, #3, #1
 8001b7e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	7c3b      	ldrb	r3, [r7, #16]
 8001b8a:	f362 0342 	bfi	r3, r2, #1, #2
 8001b8e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001b90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	7c3b      	ldrb	r3, [r7, #16]
 8001b9c:	f362 0300 	bfi	r3, r2, #0, #1
 8001ba0:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001ba2:	7c3a      	ldrb	r2, [r7, #16]
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fef3 	bl	8001996 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fe8d 	bl	80018d4 <MQTTPacket_encode>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001bc2:	f107 0014 	add.w	r0, r7, #20
 8001bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bcc:	f7ff ff40 	bl	8001a50 <writeMQTTString>

	if (qos > 0)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	dd06      	ble.n	8001be4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001bd6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff feee 	bl	80019c0 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
		goto exit;
#endif

	memcpy(ptr, payload, payloadlen);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001be8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bea:	4618      	mov	r0, r3
 8001bec:	f012 fffe 	bl	8014bec <memcpy>
	ptr += payloadlen;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001c02:	69fb      	ldr	r3, [r7, #28]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <MQTTSerialize_subscribeLength>:
#if defined(MQTTV5)
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[], MQTTProperties* properties)
#else
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
#endif
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001c16:	2302      	movs	r3, #2
 8001c18:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e013      	b.n	8001c48 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c34:	f7ff ff3a 	bl	8001aac <MQTTstrlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	3303      	adds	r3, #3
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbe7      	blt.n	8001c20 <MQTTSerialize_subscribeLength+0x14>
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001c50:	68bb      	ldr	r3, [r7, #8]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <MQTTSerialize_subscribe>:
		MQTTProperties* properties, int count, MQTTString topicFilters[], int requestedQoSs[], struct subscribeOptions options[])
#else
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
#endif
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b08a      	sub	sp, #40	; 0x28
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	4611      	mov	r1, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c88:	f7ff ffc0 	bl	8001c0c <MQTTSerialize_subscribeLength>
 8001c8c:	61f8      	str	r0, [r7, #28]
 8001c8e:	69f8      	ldr	r0, [r7, #28]
 8001c90:	f7ff fe72 	bl	8001978 <MQTTPacket_len>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	da03      	bge.n	8001ca4 <MQTTSerialize_subscribe+0x4a>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001c9c:	f06f 0301 	mvn.w	r3, #1
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001ca2:	e053      	b.n	8001d4c <MQTTSerialize_subscribe+0xf2>
	}

	header.byte = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	743b      	strb	r3, [r7, #16]
	header.bits.type = SUBSCRIBE;
 8001ca8:	7c3b      	ldrb	r3, [r7, #16]
 8001caa:	2208      	movs	r2, #8
 8001cac:	f362 1307 	bfi	r3, r2, #4, #4
 8001cb0:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	7c3b      	ldrb	r3, [r7, #16]
 8001cbc:	f362 03c3 	bfi	r3, r2, #3, #1
 8001cc0:	743b      	strb	r3, [r7, #16]
	header.bits.qos = 1;
 8001cc2:	7c3b      	ldrb	r3, [r7, #16]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f362 0342 	bfi	r3, r2, #1, #2
 8001cca:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001ccc:	7c3a      	ldrb	r2, [r7, #16]
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe5e 	bl	8001996 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	69f9      	ldr	r1, [r7, #28]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf8 	bl	80018d4 <MQTTPacket_encode>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

	writeInt(&ptr, packetid);
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe63 	bl	80019c0 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
	  goto exit;
#endif

	for (i = 0; i < count; ++i)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	e01c      	b.n	8001d3a <MQTTSerialize_subscribe+0xe0>
	{
		unsigned char opts = requestedQoSs[i];
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d06:	4413      	add	r3, r2
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	76fb      	strb	r3, [r7, #27]
			opts |= (options[i].noLocal << 2); /* 1 bit */
			opts |= (options[i].retainAsPublished << 3); /* 1 bit */
			opts |= (options[i].retainHandling << 4); /* 2 bits */
		}
#endif
		writeMQTTString(&ptr, topicFilters[i]);
 8001d0c:	6a3a      	ldr	r2, [r7, #32]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f107 0014 	add.w	r0, r7, #20
 8001d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d22:	f7ff fe95 	bl	8001a50 <writeMQTTString>
		writeChar(&ptr, opts);
 8001d26:	7efa      	ldrb	r2, [r7, #27]
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe31 	bl	8001996 <writeChar>
	for (i = 0; i < count; ++i)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	3301      	adds	r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	6a3a      	ldr	r2, [r7, #32]
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbde      	blt.n	8001d00 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	461a      	mov	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <BMP280_i2c_read_reg>:


extern I2C_HandleTypeDef hi2c1;

uint8_t BMP280_i2c_read_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t* data, uint16_t lenght)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	603a      	str	r2, [r7, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	460b      	mov	r3, r1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_buff[1];

	tx_buff[0] = internal_adr;
 8001d6e:	79bb      	ldrb	r3, [r7, #6]
 8001d70:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, TIMEOUT);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	b299      	uxth	r1, r3
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2301      	movs	r3, #1
 8001d82:	480a      	ldr	r0, [pc, #40]	; (8001dac <BMP280_i2c_read_reg+0x54>)
 8001d84:	f005 f81a 	bl	8006dbc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, data, lenght, TIMEOUT);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	88ba      	ldrh	r2, [r7, #4]
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <BMP280_i2c_read_reg+0x54>)
 8001d9e:	f005 f901 	bl	8006fa4 <HAL_I2C_Master_Receive>

	return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000e544 	.word	0x2000e544

08001db0 <BMP280_i2c_write_reg>:


void BMP280_i2c_write_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, sizeof(tx_buff), TIMEOUT);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	4803      	ldr	r0, [pc, #12]	; (8001de8 <BMP280_i2c_write_reg+0x38>)
 8001ddc:	f004 ffee 	bl	8006dbc <HAL_I2C_Master_Transmit>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000e544 	.word	0x2000e544

08001dec <BMP280_get_calib_values>:

void BMP280_get_calib_values(bmp280_dev *dev)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	uint8_t temp[BMP280_CALIB_DATA_SIZE], starting_address=0x88;
 8001df4:	2388      	movs	r3, #136	; 0x88
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, temp, BMP280_CALIB_DATA_SIZE);
 8001dfa:	f107 020c 	add.w	r2, r7, #12
 8001dfe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001e02:	2318      	movs	r3, #24
 8001e04:	20ee      	movs	r0, #238	; 0xee
 8001e06:	f7ff ffa7 	bl	8001d58 <BMP280_i2c_read_reg>

	dev->calib_param.dig_t1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001e0a:	7b7b      	ldrb	r3, [r7, #13]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b29a      	uxth	r2, r3
	dev->calib_param.dig_t1 =
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	801a      	strh	r2, [r3, #0]
	dev->calib_param.dig_t2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t2 =
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	805a      	strh	r2, [r3, #2]
	dev->calib_param.dig_t3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001e30:	7c7b      	ldrb	r3, [r7, #17]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	7c3b      	ldrb	r3, [r7, #16]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t3 =
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	809a      	strh	r2, [r3, #4]
	dev->calib_param.dig_p1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	7cbb      	ldrb	r3, [r7, #18]
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	b29a      	uxth	r2, r3
	dev->calib_param.dig_p1 =
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	80da      	strh	r2, [r3, #6]
	dev->calib_param.dig_p2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001e56:	7d7b      	ldrb	r3, [r7, #21]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	7d3b      	ldrb	r3, [r7, #20]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p2 =
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	811a      	strh	r2, [r3, #8]
	dev->calib_param.dig_p3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p3 =
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	815a      	strh	r2, [r3, #10]
	dev->calib_param.dig_p4 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001e7a:	7e7b      	ldrb	r3, [r7, #25]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	7e3b      	ldrb	r3, [r7, #24]
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p4 =
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	819a      	strh	r2, [r3, #12]
	dev->calib_param.dig_p5 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001e8c:	7efb      	ldrb	r3, [r7, #27]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	7ebb      	ldrb	r3, [r7, #26]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p5 =
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	81da      	strh	r2, [r3, #14]
	dev->calib_param.dig_p6 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001e9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	7f3b      	ldrb	r3, [r7, #28]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p6 =
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	821a      	strh	r2, [r3, #16]
	dev->calib_param.dig_p7 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	7fbb      	ldrb	r3, [r7, #30]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p7 =
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	825a      	strh	r2, [r3, #18]
	dev->calib_param.dig_p8 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001ec2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p8 =
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	829a      	strh	r2, [r3, #20]
	dev->calib_param.dig_p9 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p9 =
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	82da      	strh	r2, [r3, #22]

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <BMP280_init>:

void BMP280_init(bmp280_dev *dev)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	uint8_t register_F4 = 0b01010111;
 8001efe:	2357      	movs	r3, #87	; 0x57
 8001f00:	73fb      	strb	r3, [r7, #15]
	uint8_t register_F5 = 0b10010000;
 8001f02:	2390      	movs	r3, #144	; 0x90
 8001f04:	73bb      	strb	r3, [r7, #14]

	BMP280_i2c_write_reg(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	21f4      	movs	r1, #244	; 0xf4
 8001f0c:	20ee      	movs	r0, #238	; 0xee
 8001f0e:	f7ff ff4f 	bl	8001db0 <BMP280_i2c_write_reg>
	BMP280_i2c_write_reg(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	461a      	mov	r2, r3
 8001f16:	21f5      	movs	r1, #245	; 0xf5
 8001f18:	20ee      	movs	r0, #238	; 0xee
 8001f1a:	f7ff ff49 	bl	8001db0 <BMP280_i2c_write_reg>

	BMP280_get_calib_values(dev);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff64 	bl	8001dec <BMP280_get_calib_values>
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	0000      	movs	r0, r0
	...

08001f30 <BMP280_calc_values>:

void BMP280_calc_values(bmp280_dev *dev)
{
 8001f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f34:	b090      	sub	sp, #64	; 0x40
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	uint8_t rx_buff[6], starting_address=0xF7;
 8001f3a:	23f7      	movs	r3, #247	; 0xf7
 8001f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t * data = NULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38

	do
	{
		BMP280_i2c_read_reg(BMP280_dev_address, 0xF3, data, 1);
 8001f44:	2301      	movs	r3, #1
 8001f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f48:	21f3      	movs	r1, #243	; 0xf3
 8001f4a:	20ee      	movs	r0, #238	; 0xee
 8001f4c:	f7ff ff04 	bl	8001d58 <BMP280_i2c_read_reg>
	} while(((*(data)&0b00001000)==8)||((*(data)&0b00000001)==1));
 8001f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f3      	bne.n	8001f44 <BMP280_calc_values+0x14>
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ed      	bne.n	8001f44 <BMP280_calc_values+0x14>


	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, rx_buff, sizeof(rx_buff));
 8001f68:	f107 0220 	add.w	r2, r7, #32
 8001f6c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001f70:	2306      	movs	r3, #6
 8001f72:	20ee      	movs	r0, #238	; 0xee
 8001f74:	f7ff fef0 	bl	8001d58 <BMP280_i2c_read_reg>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 8001f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f7c:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[4];
 8001f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f82:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[5];
 8001f84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f88:	617b      	str	r3, [r7, #20]
	dev->raw_data.temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	031a      	lsls	r2, r3, #12
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	441a      	add	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61da      	str	r2, [r3, #28]

	temp[2]=rx_buff[0];
 8001fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fa4:	61fb      	str	r3, [r7, #28]
	temp[1]=rx_buff[1];
 8001fa6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001faa:	61bb      	str	r3, [r7, #24]
	temp[0]=rx_buff[2];
 8001fac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fb0:	617b      	str	r3, [r7, #20]
	dev->raw_data.pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	031a      	lsls	r2, r3, #12
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	441a      	add	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	441a      	add	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	621a      	str	r2, [r3, #32]

	double var1, var2;
	var1=(((double)dev->raw_data.temperature_raw)/16384.0-((double)dev->calib_param.dig_t1)/1024.0)*((double)dev->calib_param.dig_t2);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faba 	bl	8000544 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4bd0      	ldr	r3, [pc, #832]	; (8002318 <BMP280_calc_values+0x3e8>)
 8001fd6:	f7fe fc49 	bl	800086c <__aeabi_ddiv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	4625      	mov	r5, r4
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa9c 	bl	8000524 <__aeabi_ui2d>
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4bca      	ldr	r3, [pc, #808]	; (800231c <BMP280_calc_values+0x3ec>)
 8001ff2:	f7fe fc3b 	bl	800086c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7fe f953 	bl	80002a8 <__aeabi_dsub>
 8002002:	4603      	mov	r3, r0
 8002004:	460c      	mov	r4, r1
 8002006:	4625      	mov	r5, r4
 8002008:	461c      	mov	r4, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa97 	bl	8000544 <__aeabi_i2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe fafb 	bl	8000618 <__aeabi_dmul>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=((((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0)*(((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0))*((double)dev->calib_param.dig_t3);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa88 	bl	8000544 <__aeabi_i2d>
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800203c:	f7fe fc16 	bl	800086c <__aeabi_ddiv>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4625      	mov	r5, r4
 8002046:	461c      	mov	r4, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa69 	bl	8000524 <__aeabi_ui2d>
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4bb2      	ldr	r3, [pc, #712]	; (8002320 <BMP280_calc_values+0x3f0>)
 8002058:	f7fe fc08 	bl	800086c <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe f920 	bl	80002a8 <__aeabi_dsub>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	4625      	mov	r5, r4
 800206e:	461c      	mov	r4, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa65 	bl	8000544 <__aeabi_i2d>
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002082:	f7fe fbf3 	bl	800086c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4690      	mov	r8, r2
 800208c:	4699      	mov	r9, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa46 	bl	8000524 <__aeabi_ui2d>
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4ba0      	ldr	r3, [pc, #640]	; (8002320 <BMP280_calc_values+0x3f0>)
 800209e:	f7fe fbe5 	bl	800086c <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4640      	mov	r0, r8
 80020a8:	4649      	mov	r1, r9
 80020aa:	f7fe f8fd 	bl	80002a8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe faaf 	bl	8000618 <__aeabi_dmul>
 80020ba:	4603      	mov	r3, r0
 80020bc:	460c      	mov	r4, r1
 80020be:	4625      	mov	r5, r4
 80020c0:	461c      	mov	r4, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa3b 	bl	8000544 <__aeabi_i2d>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4620      	mov	r0, r4
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe fa9f 	bl	8000618 <__aeabi_dmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	dev->calib_param.t_fine = (int32_t)(var1+var2);
 80020e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020ea:	f7fe f8df 	bl	80002ac <__adddf3>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	4618      	mov	r0, r3
 80020f4:	4621      	mov	r1, r4
 80020f6:	f7fe fd3f 	bl	8000b78 <__aeabi_d2iz>
 80020fa:	4602      	mov	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
volatile	float T = (var1+var2)/5120.0;
 8002100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002104:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002108:	f7fe f8d0 	bl	80002ac <__adddf3>
 800210c:	4603      	mov	r3, r0
 800210e:	460c      	mov	r4, r1
 8002110:	4618      	mov	r0, r3
 8002112:	4621      	mov	r1, r4
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b82      	ldr	r3, [pc, #520]	; (8002324 <BMP280_calc_values+0x3f4>)
 800211a:	f7fe fba7 	bl	800086c <__aeabi_ddiv>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	4618      	mov	r0, r3
 8002124:	4621      	mov	r1, r4
 8002126:	f7fe fd4f 	bl	8000bc8 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	613b      	str	r3, [r7, #16]

	var1=((double)dev->calib_param.t_fine/2.0)-64000.0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa06 	bl	8000544 <__aeabi_i2d>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002140:	f7fe fb94 	bl	800086c <__aeabi_ddiv>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <BMP280_calc_values+0x3f8>)
 8002152:	f7fe f8a9 	bl	80002a8 <__aeabi_dsub>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=var1*var1*((double)dev->calib_param.dig_p6)/32768.0;
 800215e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002162:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002166:	f7fe fa57 	bl	8000618 <__aeabi_dmul>
 800216a:	4603      	mov	r3, r0
 800216c:	460c      	mov	r4, r1
 800216e:	4625      	mov	r5, r4
 8002170:	461c      	mov	r4, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9e3 	bl	8000544 <__aeabi_i2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fa47 	bl	8000618 <__aeabi_dmul>
 800218a:	4603      	mov	r3, r0
 800218c:	460c      	mov	r4, r1
 800218e:	4618      	mov	r0, r3
 8002190:	4621      	mov	r1, r4
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <BMP280_calc_values+0x3fc>)
 8002198:	f7fe fb68 	bl	800086c <__aeabi_ddiv>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=var2+var1*((double)dev->calib_param.dig_p5)*2.0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9ca 	bl	8000544 <__aeabi_i2d>
 80021b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021b4:	f7fe fa30 	bl	8000618 <__aeabi_dmul>
 80021b8:	4603      	mov	r3, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	4618      	mov	r0, r3
 80021be:	4621      	mov	r1, r4
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	f7fe f872 	bl	80002ac <__adddf3>
 80021c8:	4603      	mov	r3, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021d4:	f7fe f86a 	bl	80002ac <__adddf3>
 80021d8:	4603      	mov	r3, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2=(var2/4.0)+(((double)dev->calib_param.dig_p4)*65536.0);
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b52      	ldr	r3, [pc, #328]	; (8002330 <BMP280_calc_values+0x400>)
 80021e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021ea:	f7fe fb3f 	bl	800086c <__aeabi_ddiv>
 80021ee:	4603      	mov	r3, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	4625      	mov	r5, r4
 80021f4:	461c      	mov	r4, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9a1 	bl	8000544 <__aeabi_i2d>
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <BMP280_calc_values+0x404>)
 8002208:	f7fe fa06 	bl	8000618 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fe f84a 	bl	80002ac <__adddf3>
 8002218:	4603      	mov	r3, r0
 800221a:	460c      	mov	r4, r1
 800221c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var1=(((double)dev->calib_param.dig_p3)*var1*var1/524288.0+((double)dev->calib_param.dig_p2)*var1)/524288.0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f98c 	bl	8000544 <__aeabi_i2d>
 800222c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002230:	f7fe f9f2 	bl	8000618 <__aeabi_dmul>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	4618      	mov	r0, r3
 800223a:	4621      	mov	r1, r4
 800223c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002240:	f7fe f9ea 	bl	8000618 <__aeabi_dmul>
 8002244:	4603      	mov	r3, r0
 8002246:	460c      	mov	r4, r1
 8002248:	4618      	mov	r0, r3
 800224a:	4621      	mov	r1, r4
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b39      	ldr	r3, [pc, #228]	; (8002338 <BMP280_calc_values+0x408>)
 8002252:	f7fe fb0b 	bl	800086c <__aeabi_ddiv>
 8002256:	4603      	mov	r3, r0
 8002258:	460c      	mov	r4, r1
 800225a:	4625      	mov	r5, r4
 800225c:	461c      	mov	r4, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f96d 	bl	8000544 <__aeabi_i2d>
 800226a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800226e:	f7fe f9d3 	bl	8000618 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f817 	bl	80002ac <__adddf3>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <BMP280_calc_values+0x408>)
 800228c:	f7fe faee 	bl	800086c <__aeabi_ddiv>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var1=(1.0+var1/32768.0)*((double)dev->calib_param.dig_p1);
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <BMP280_calc_values+0x3fc>)
 800229e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022a2:	f7fe fae3 	bl	800086c <__aeabi_ddiv>
 80022a6:	4603      	mov	r3, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	4618      	mov	r0, r3
 80022ac:	4621      	mov	r1, r4
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <BMP280_calc_values+0x40c>)
 80022b4:	f7fd fffa 	bl	80002ac <__adddf3>
 80022b8:	4603      	mov	r3, r0
 80022ba:	460c      	mov	r4, r1
 80022bc:	4625      	mov	r5, r4
 80022be:	461c      	mov	r4, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	88db      	ldrh	r3, [r3, #6]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f92d 	bl	8000524 <__aeabi_ui2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4620      	mov	r0, r4
 80022d0:	4629      	mov	r1, r5
 80022d2:	f7fe f9a1 	bl	8000618 <__aeabi_dmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	460c      	mov	r4, r1
 80022da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
volatile	double p=1048576.0-(double)dev->raw_data.pressure_raw;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f91e 	bl	8000524 <__aeabi_ui2d>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	f04f 0000 	mov.w	r0, #0
 80022f4:	4912      	ldr	r1, [pc, #72]	; (8002340 <BMP280_calc_values+0x410>)
 80022f6:	f7fd ffd7 	bl	80002a8 <__aeabi_dsub>
 80022fa:	4603      	mov	r3, r0
 80022fc:	460c      	mov	r4, r1
 80022fe:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p=(p-(var2/4096.0))*6250.0/var1;
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <BMP280_calc_values+0x414>)
 800230c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002310:	f7fe faac 	bl	800086c <__aeabi_ddiv>
 8002314:	e018      	b.n	8002348 <BMP280_calc_values+0x418>
 8002316:	bf00      	nop
 8002318:	40d00000 	.word	0x40d00000
 800231c:	40900000 	.word	0x40900000
 8002320:	40c00000 	.word	0x40c00000
 8002324:	40b40000 	.word	0x40b40000
 8002328:	40ef4000 	.word	0x40ef4000
 800232c:	40e00000 	.word	0x40e00000
 8002330:	40100000 	.word	0x40100000
 8002334:	40f00000 	.word	0x40f00000
 8002338:	41200000 	.word	0x41200000
 800233c:	3ff00000 	.word	0x3ff00000
 8002340:	41300000 	.word	0x41300000
 8002344:	40b00000 	.word	0x40b00000
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffaa 	bl	80002a8 <__aeabi_dsub>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	4618      	mov	r0, r3
 800235a:	4621      	mov	r1, r4
 800235c:	a358      	add	r3, pc, #352	; (adr r3, 80024c0 <BMP280_calc_values+0x590>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f959 	bl	8000618 <__aeabi_dmul>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002372:	f7fe fa7b 	bl	800086c <__aeabi_ddiv>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1=((double)dev->calib_param.dig_p9)*p*p/2147483648.0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8dd 	bl	8000544 <__aeabi_i2d>
 800238a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800238e:	461a      	mov	r2, r3
 8002390:	4623      	mov	r3, r4
 8002392:	f7fe f941 	bl	8000618 <__aeabi_dmul>
 8002396:	4603      	mov	r3, r0
 8002398:	460c      	mov	r4, r1
 800239a:	4618      	mov	r0, r3
 800239c:	4621      	mov	r1, r4
 800239e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4623      	mov	r3, r4
 80023a6:	f7fe f937 	bl	8000618 <__aeabi_dmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <BMP280_calc_values+0x578>)
 80023b8:	f7fe fa58 	bl	800086c <__aeabi_ddiv>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2=p*((double)dev->calib_param.dig_p8)/32768.0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8ba 	bl	8000544 <__aeabi_i2d>
 80023d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7fe f91e 	bl	8000618 <__aeabi_dmul>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	4618      	mov	r0, r3
 80023e2:	4621      	mov	r1, r4
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <BMP280_calc_values+0x57c>)
 80023ea:	f7fe fa3f 	bl	800086c <__aeabi_ddiv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	p=p+(var1+var2+((double)dev->calib_param.dig_p7))/16.0;
 80023f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023fe:	f7fd ff55 	bl	80002ac <__adddf3>
 8002402:	4603      	mov	r3, r0
 8002404:	460c      	mov	r4, r1
 8002406:	4625      	mov	r5, r4
 8002408:	461c      	mov	r4, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f897 	bl	8000544 <__aeabi_i2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4620      	mov	r0, r4
 800241c:	4629      	mov	r1, r5
 800241e:	f7fd ff45 	bl	80002ac <__adddf3>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	4618      	mov	r0, r3
 8002428:	4621      	mov	r1, r4
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <BMP280_calc_values+0x580>)
 8002430:	f7fe fa1c 	bl	800086c <__aeabi_ddiv>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	4618      	mov	r0, r3
 800243a:	4621      	mov	r1, r4
 800243c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002440:	461a      	mov	r2, r3
 8002442:	4623      	mov	r3, r4
 8002444:	f7fd ff32 	bl	80002ac <__adddf3>
 8002448:	4603      	mov	r3, r0
 800244a:	460c      	mov	r4, r1
 800244c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	dev->data.temperature=T;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
	dev->data.pressure=p;
 8002456:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	4621      	mov	r1, r4
 800245e:	f7fe fbb3 	bl	8000bc8 <__aeabi_d2f>
 8002462:	4602      	mov	r2, r0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
	dev->data.altitude=44330.0f*(1-powf(dev->data.pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800246e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80024b4 <BMP280_calc_values+0x584>
 8002472:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002476:	eddf 0a10 	vldr	s1, [pc, #64]	; 80024b8 <BMP280_calc_values+0x588>
 800247a:	eeb0 0a66 	vmov.f32	s0, s13
 800247e:	f013 ff8f 	bl	80163a0 <powf>
 8002482:	eeb0 7a40 	vmov.f32	s14, s0
 8002486:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800248a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800248e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80024bc <BMP280_calc_values+0x58c>
 8002492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800249c:	bf00      	nop
 800249e:	3740      	adds	r7, #64	; 0x40
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024a6:	bf00      	nop
 80024a8:	41e00000 	.word	0x41e00000
 80024ac:	40e00000 	.word	0x40e00000
 80024b0:	40300000 	.word	0x40300000
 80024b4:	47c5e680 	.word	0x47c5e680
 80024b8:	3e42dcae 	.word	0x3e42dcae
 80024bc:	472d2a00 	.word	0x472d2a00
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40b86a00 	.word	0x40b86a00

080024c8 <reverse>:
	else
		return 0;
}

// reverses a string 'str' of length 'len'
void reverse(char *str, int len) {
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	3b01      	subs	r3, #1
 80024da:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80024dc:	e018      	b.n	8002510 <reverse+0x48>
		temp = str[i];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	441a      	add	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	440b      	add	r3, r1
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]
		i++;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
		j--;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	3b01      	subs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbe2      	blt.n	80024de <reverse+0x16>
	}
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
	while (x) {
 8002534:	e01d      	b.n	8002572 <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <intToStr+0x8c>)
 800253a:	fb83 1302 	smull	r1, r3, r3, r2
 800253e:	1099      	asrs	r1, r3, #2
 8002540:	17d3      	asrs	r3, r2, #31
 8002542:	1ac9      	subs	r1, r1, r3
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	1ad1      	subs	r1, r2, r3
 800254e:	b2ca      	uxtb	r2, r1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	6179      	str	r1, [r7, #20]
 8002556:	4619      	mov	r1, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	440b      	add	r3, r1
 800255c:	3230      	adds	r2, #48	; 0x30
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <intToStr+0x8c>)
 8002566:	fb82 1203 	smull	r1, r2, r2, r3
 800256a:	1092      	asrs	r2, r2, #2
 800256c:	17db      	asrs	r3, r3, #31
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	60fb      	str	r3, [r7, #12]
	while (x) {
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1de      	bne.n	8002536 <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8002578:	e007      	b.n	800258a <intToStr+0x66>
		str[i++] = '0';
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	617a      	str	r2, [r7, #20]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	2230      	movs	r2, #48	; 0x30
 8002588:	701a      	strb	r2, [r3, #0]
	while (i < d)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	dbf3      	blt.n	800257a <intToStr+0x56>

	reverse(str, i);
 8002592:	6979      	ldr	r1, [r7, #20]
 8002594:	68b8      	ldr	r0, [r7, #8]
 8002596:	f7ff ff97 	bl	80024c8 <reverse>
	str[i] = '\0';
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
	return i;
 80025a4:	697b      	ldr	r3, [r7, #20]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	66666667 	.word	0x66666667
 80025b4:	00000000 	.word	0x00000000

080025b8 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint) {
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b090      	sub	sp, #64	; 0x40
 80025bc:	af00      	add	r7, sp, #0
 80025be:	ed87 0a03 	vstr	s0, [r7, #12]
 80025c2:	60b8      	str	r0, [r7, #8]
 80025c4:	6079      	str	r1, [r7, #4]
	unsigned char minus_flag = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (n < 0) {
 80025cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d508      	bpl.n	80025ec <ftoa+0x34>
		minus_flag = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 80025e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e4:	eef1 7a67 	vneg.f32	s15, s15
 80025e8:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Extract integer part
	int ipart = (int) n;
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f4:	ee17 3a90 	vmov	r3, s15
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Extract floating part
	float fpart = n - (float) ipart;
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002604:	ed97 7a03 	vldr	s14, [r7, #12]
 8002608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002616:	f7ff ff85 	bl	8002524 <intToStr>
 800261a:	6338      	str	r0, [r7, #48]	; 0x30

	// check for display option after point
	if (afterpoint != 0) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d030      	beq.n	8002684 <ftoa+0xcc>
		res[i] = '.';  // add dot
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	4413      	add	r3, r2
 8002628:	222e      	movs	r2, #46	; 0x2e
 800262a:	701a      	strb	r2, [r3, #0]

		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 800262c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800262e:	f7fd ff9b 	bl	8000568 <__aeabi_f2d>
 8002632:	4604      	mov	r4, r0
 8002634:	460d      	mov	r5, r1
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fd ff84 	bl	8000544 <__aeabi_i2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b11 	vmov	d1, r2, r3
 8002644:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8002740 <ftoa+0x188>
 8002648:	f013 fd3a 	bl	80160c0 <pow>
 800264c:	ec53 2b10 	vmov	r2, r3, d0
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd ffe0 	bl	8000618 <__aeabi_dmul>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe fab2 	bl	8000bc8 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	637b      	str	r3, [r7, #52]	; 0x34

		intToStr((int) fpart, res + i + 1, afterpoint);
 8002668:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800266c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3301      	adds	r3, #1
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4413      	add	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4619      	mov	r1, r3
 800267c:	ee17 0a90 	vmov	r0, s15
 8002680:	f7ff ff50 	bl	8002524 <intToStr>
	}

	char string[30];
	if (minus_flag == 1) {
 8002684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002688:	2b01      	cmp	r3, #1
 800268a:	d132      	bne.n	80026f2 <ftoa+0x13a>
		memset(string, 0, 30);
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	221e      	movs	r2, #30
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f012 fab4 	bl	8014c02 <memset>
		string[0] = '-';
 800269a:	232d      	movs	r3, #45	; 0x2d
 800269c:	743b      	strb	r3, [r7, #16]
		if (n < 1.0f) {
 800269e:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ae:	d509      	bpl.n	80026c4 <ftoa+0x10c>
			string[1] = '0';
 80026b0:	2330      	movs	r3, #48	; 0x30
 80026b2:	747b      	strb	r3, [r7, #17]
			strcpy(&string[2], res);
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	3302      	adds	r3, #2
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f012 fec1 	bl	8015444 <strcpy>
 80026c2:	e006      	b.n	80026d2 <ftoa+0x11a>
		} else
			strcpy(&string[1], res);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	3301      	adds	r3, #1
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f012 feb9 	bl	8015444 <strcpy>

		memset(res, 0, strlen(res));
 80026d2:	68b8      	ldr	r0, [r7, #8]
 80026d4:	f7fd fd8c 	bl	80001f0 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	2100      	movs	r1, #0
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f012 fa8f 	bl	8014c02 <memset>
		strcpy(res, string);
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	4619      	mov	r1, r3
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f012 feaa 	bl	8015444 <strcpy>
		string[0] = '0';
		strcpy(&string[1], res);
		memset(res, 0, strlen(res));
		strcpy(res, string);
	}
}
 80026f0:	e021      	b.n	8002736 <ftoa+0x17e>
	} else if (n < 1.0f) {
 80026f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	d400      	bmi.n	8002706 <ftoa+0x14e>
}
 8002704:	e017      	b.n	8002736 <ftoa+0x17e>
		string[0] = '0';
 8002706:	2330      	movs	r3, #48	; 0x30
 8002708:	743b      	strb	r3, [r7, #16]
		strcpy(&string[1], res);
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	3301      	adds	r3, #1
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f012 fe96 	bl	8015444 <strcpy>
		memset(res, 0, strlen(res));
 8002718:	68b8      	ldr	r0, [r7, #8]
 800271a:	f7fd fd69 	bl	80001f0 <strlen>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	2100      	movs	r1, #0
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f012 fa6c 	bl	8014c02 <memset>
		strcpy(res, string);
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4619      	mov	r1, r3
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f012 fe87 	bl	8015444 <strcpy>
}
 8002736:	bf00      	nop
 8002738:	3740      	adds	r7, #64	; 0x40
 800273a:	46bd      	mov	sp, r7
 800273c:	bdb0      	pop	{r4, r5, r7, pc}
 800273e:	bf00      	nop
 8002740:	00000000 	.word	0x00000000
 8002744:	40240000 	.word	0x40240000

08002748 <buttonPressed>:
/*=====[Prototipos de funciones privadas]====================================*/

/*=====[Implementaciones de funciones publicas]==============================*/


void buttonPressed(button_t* config){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	config->time_down = xTaskGetTickCount();
 8002750:	f00f ff94 	bl	801267c <xTaskGetTickCount>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]
	config->pressed = true;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	759a      	strb	r2, [r3, #22]
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <buttonReleased>:

void buttonReleased(button_t* config){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	config->time_up = xTaskGetTickCount();
 8002770:	f00f ff84 	bl	801267c <xTaskGetTickCount>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]
	if(config->time_up >= config->time_down)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	429a      	cmp	r2, r3
 8002784:	d307      	bcc.n	8002796 <buttonReleased+0x2e>
		config->messure_time = config->time_up - config->time_down;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e006      	b.n	80027a4 <buttonReleased+0x3c>
	else
		config->messure_time = config->time_down - config->time_up ;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
	config->released = true;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	75da      	strb	r2, [r3, #23]
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <fsmButtonInit>:

void fsmButtonInit(button_t* config){
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	719a      	strb	r2, [r3, #6]
	config->countFalling = 0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	751a      	strb	r2, [r3, #20]
	config->countRising = 0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	755a      	strb	r2, [r3, #21]
	config->pressed = false;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	759a      	strb	r2, [r3, #22]
	config->released = false;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	75da      	strb	r2, [r3, #23]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <fsmButtonError>:

void fsmButtonError(button_t* config){
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	719a      	strb	r2, [r3, #6]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <fsmButtonUpdate>:

void fsmButtonUpdate(button_t* config) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

	switch (config->fsmButtonState) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	799b      	ldrb	r3, [r3, #6]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d875      	bhi.n	80028fc <fsmButtonUpdate+0xfc>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <fsmButtonUpdate+0x18>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	08002853 	.word	0x08002853
 8002820:	08002899 	.word	0x08002899
 8002824:	080028b7 	.word	0x080028b7
	case STATE_BUTTON_UP:
		config->pressed = false;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	759a      	strb	r2, [r3, #22]
		config->released = false;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	75da      	strb	r2, [r3, #23]
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	889b      	ldrh	r3, [r3, #4]
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f004 f9e4 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d15c      	bne.n	8002904 <fsmButtonUpdate+0x104>
			config->fsmButtonState = STATE_BUTTON_FALLING;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	719a      	strb	r2, [r3, #6]
		}

		break;
 8002850:	e058      	b.n	8002904 <fsmButtonUpdate+0x104>
	case STATE_BUTTON_FALLING:
		if (config->countFalling >= DEBOUNCE_TIME) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7d1b      	ldrb	r3, [r3, #20]
 8002856:	2b27      	cmp	r3, #39	; 0x27
 8002858:	d917      	bls.n	800288a <fsmButtonUpdate+0x8a>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	889b      	ldrh	r3, [r3, #4]
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f004 f9d1 	bl	8006c0c <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <fsmButtonUpdate+0x7e>
				config->fsmButtonState = STATE_BUTTON_DOWN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	719a      	strb	r2, [r3, #6]
				buttonPressed(config);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff66 	bl	8002748 <buttonPressed>
 800287c:	e002      	b.n	8002884 <fsmButtonUpdate+0x84>

			} else{
				config->fsmButtonState = STATE_BUTTON_UP;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	719a      	strb	r2, [r3, #6]
			}
			config->countFalling = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	751a      	strb	r2, [r3, #20]
		}
		config->countFalling++;	//1 cycle = 1ms
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7d1b      	ldrb	r3, [r3, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	751a      	strb	r2, [r3, #20]
		break;
 8002896:	e038      	b.n	800290a <fsmButtonUpdate+0x10a>
	case STATE_BUTTON_DOWN:
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	889b      	ldrh	r3, [r3, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f004 f9b2 	bl	8006c0c <HAL_GPIO_ReadPin>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12c      	bne.n	8002908 <fsmButtonUpdate+0x108>
			config->fsmButtonState = STATE_BUTTON_RISING;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	719a      	strb	r2, [r3, #6]
		}
		break;
 80028b4:	e028      	b.n	8002908 <fsmButtonUpdate+0x108>
	case STATE_BUTTON_RISING:
		if (config->countRising >= DEBOUNCE_TIME) {
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7d5b      	ldrb	r3, [r3, #21]
 80028ba:	2b27      	cmp	r3, #39	; 0x27
 80028bc:	d917      	bls.n	80028ee <fsmButtonUpdate+0xee>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	889b      	ldrh	r3, [r3, #4]
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f004 f99f 	bl	8006c0c <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <fsmButtonUpdate+0xe2>
				config->fsmButtonState = STATE_BUTTON_UP;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	719a      	strb	r2, [r3, #6]
				buttonReleased(config);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff44 	bl	8002768 <buttonReleased>
 80028e0:	e002      	b.n	80028e8 <fsmButtonUpdate+0xe8>
				} else{
					config->fsmButtonState = STATE_BUTTON_DOWN;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	719a      	strb	r2, [r3, #6]
				}
			config->countRising = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	755a      	strb	r2, [r3, #21]
		}
		config->countRising++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7d5b      	ldrb	r3, [r3, #21]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	755a      	strb	r2, [r3, #21]
		break;
 80028fa:	e006      	b.n	800290a <fsmButtonUpdate+0x10a>
	default:
		fsmButtonError(config);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff71 	bl	80027e4 <fsmButtonError>
		break;
 8002902:	e002      	b.n	800290a <fsmButtonUpdate+0x10a>
		break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <fsmButtonUpdate+0x10a>
		break;
 8002908:	bf00      	nop
	}

}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop

08002914 <vLedWrite>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
void vLedWrite(led_t led, GPIO_PinState ledON) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	460a      	mov	r2, r1
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	4613      	mov	r3, r2
 8002922:	71bb      	strb	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d905      	bls.n	8002936 <vLedWrite+0x22>
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <vLedWrite+0xc0>)
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <vLedWrite+0xc4>)
 800292e:	2117      	movs	r1, #23
 8002930:	482a      	ldr	r0, [pc, #168]	; (80029dc <vLedWrite+0xc8>)
 8002932:	f012 f8fd 	bl	8014b30 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d847      	bhi.n	80029cc <vLedWrite+0xb8>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <vLedWrite+0x30>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002961 	.word	0x08002961
 8002948:	08002971 	.word	0x08002971
 800294c:	08002981 	.word	0x08002981
 8002950:	08002991 	.word	0x08002991
 8002954:	080029a1 	.word	0x080029a1
 8002958:	080029af 	.word	0x080029af
 800295c:	080029bd 	.word	0x080029bd
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledON);
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	461a      	mov	r2, r3
 8002964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002968:	481d      	ldr	r0, [pc, #116]	; (80029e0 <vLedWrite+0xcc>)
 800296a:	f004 f967 	bl	8006c3c <HAL_GPIO_WritePin>
			break;
 800296e:	e02d      	b.n	80029cc <vLedWrite+0xb8>
	case LED_2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledON);
 8002970:	79bb      	ldrb	r3, [r7, #6]
 8002972:	461a      	mov	r2, r3
 8002974:	2120      	movs	r1, #32
 8002976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297a:	f004 f95f 	bl	8006c3c <HAL_GPIO_WritePin>
			break;
 800297e:	e025      	b.n	80029cc <vLedWrite+0xb8>
	case LED_3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ledON);
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	461a      	mov	r2, r3
 8002984:	2101      	movs	r1, #1
 8002986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298a:	f004 f957 	bl	8006c3c <HAL_GPIO_WritePin>
		break;
 800298e:	e01d      	b.n	80029cc <vLedWrite+0xb8>
	case LED_4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ledON);
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	461a      	mov	r2, r3
 8002994:	2110      	movs	r1, #16
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299a:	f004 f94f 	bl	8006c3c <HAL_GPIO_WritePin>
		break;
 800299e:	e015      	b.n	80029cc <vLedWrite+0xb8>
	case LED_5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ledON);
 80029a0:	79bb      	ldrb	r3, [r7, #6]
 80029a2:	461a      	mov	r2, r3
 80029a4:	2104      	movs	r1, #4
 80029a6:	480e      	ldr	r0, [pc, #56]	; (80029e0 <vLedWrite+0xcc>)
 80029a8:	f004 f948 	bl	8006c3c <HAL_GPIO_WritePin>
		break;
 80029ac:	e00e      	b.n	80029cc <vLedWrite+0xb8>
	case LED_6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ledON);
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	461a      	mov	r2, r3
 80029b2:	2104      	movs	r1, #4
 80029b4:	480b      	ldr	r0, [pc, #44]	; (80029e4 <vLedWrite+0xd0>)
 80029b6:	f004 f941 	bl	8006c3c <HAL_GPIO_WritePin>
		break;
 80029ba:	e007      	b.n	80029cc <vLedWrite+0xb8>
	case LED_7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ledON);
 80029bc:	79bb      	ldrb	r3, [r7, #6]
 80029be:	461a      	mov	r2, r3
 80029c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <vLedWrite+0xcc>)
 80029c6:	f004 f939 	bl	8006c3c <HAL_GPIO_WritePin>
		break;
 80029ca:	bf00      	nop
	}
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	08017c5c 	.word	0x08017c5c
 80029d8:	08017edc 	.word	0x08017edc
 80029dc:	08017c6c 	.word	0x08017c6c
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48001c00 	.word	0x48001c00

080029e8 <vLedToggle>:

/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 */
void vLedToggle(led_t led) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d905      	bls.n	8002a04 <vLedToggle+0x1c>
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <vLedToggle+0x9c>)
 80029fa:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <vLedToggle+0xa0>)
 80029fc:	2147      	movs	r1, #71	; 0x47
 80029fe:	4823      	ldr	r0, [pc, #140]	; (8002a8c <vLedToggle+0xa4>)
 8002a00:	f012 f896 	bl	8014b30 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d838      	bhi.n	8002a7c <vLedToggle+0x94>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <vLedToggle+0x28>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a2d 	.word	0x08002a2d
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a51 	.word	0x08002a51
 8002a20:	08002a5d 	.word	0x08002a5d
 8002a24:	08002a67 	.word	0x08002a67
 8002a28:	08002a71 	.word	0x08002a71
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LEDO_Port, LEDO_Pin);
		break;*/
	case LED_1:
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a30:	4817      	ldr	r0, [pc, #92]	; (8002a90 <vLedToggle+0xa8>)
 8002a32:	f004 f91b 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a36:	e021      	b.n	8002a7c <vLedToggle+0x94>
	case LED_2:
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002a38:	2120      	movs	r1, #32
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3e:	f004 f915 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a42:	e01b      	b.n	8002a7c <vLedToggle+0x94>
	case LED_3:
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002a44:	2101      	movs	r1, #1
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4a:	f004 f90f 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a4e:	e015      	b.n	8002a7c <vLedToggle+0x94>
	case LED_4:
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002a50:	2110      	movs	r1, #16
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f004 f909 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a5a:	e00f      	b.n	8002a7c <vLedToggle+0x94>
	case LED_5:
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <vLedToggle+0xa8>)
 8002a60:	f004 f904 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a64:	e00a      	b.n	8002a7c <vLedToggle+0x94>
	case LED_6:
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8002a66:	2104      	movs	r1, #4
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <vLedToggle+0xac>)
 8002a6a:	f004 f8ff 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a6e:	e005      	b.n	8002a7c <vLedToggle+0x94>
	case LED_7:
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8002a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a74:	4806      	ldr	r0, [pc, #24]	; (8002a90 <vLedToggle+0xa8>)
 8002a76:	f004 f8f9 	bl	8006c6c <HAL_GPIO_TogglePin>
		break;
 8002a7a:	bf00      	nop
	}

}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08017c5c 	.word	0x08017c5c
 8002a88:	08017ee8 	.word	0x08017ee8
 8002a8c:	08017c6c 	.word	0x08017c6c
 8002a90:	48000400 	.word	0x48000400
 8002a94:	48001c00 	.word	0x48001c00

08002a98 <vLedRead>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
GPIO_PinState vLedRead(led_t led) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState result;

	// Check the id.
	assert(led < LED_COUNT);
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d905      	bls.n	8002ab4 <vLedRead+0x1c>
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <vLedRead+0xbc>)
 8002aaa:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <vLedRead+0xc0>)
 8002aac:	2179      	movs	r1, #121	; 0x79
 8002aae:	482b      	ldr	r0, [pc, #172]	; (8002b5c <vLedRead+0xc4>)
 8002ab0:	f012 f83e 	bl	8014b30 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d846      	bhi.n	8002b48 <vLedRead+0xb0>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <vLedRead+0x28>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002add 	.word	0x08002add
 8002ac4:	08002aed 	.word	0x08002aed
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002b0d 	.word	0x08002b0d
 8002ad0:	08002b1d 	.word	0x08002b1d
 8002ad4:	08002b2b 	.word	0x08002b2b
 8002ad8:	08002b39 	.word	0x08002b39
		break;
	case LED_ORANGE:
		result = HAL_GPIO_ReadPin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
		result = HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin);
 8002adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae0:	481f      	ldr	r0, [pc, #124]	; (8002b60 <vLedRead+0xc8>)
 8002ae2:	f004 f893 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]
		break;
 8002aea:	e02d      	b.n	8002b48 <vLedRead+0xb0>
	case LED_2:
		result = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8002aec:	2120      	movs	r1, #32
 8002aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af2:	f004 f88b 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
			break;
 8002afa:	e025      	b.n	8002b48 <vLedRead+0xb0>
	case LED_3:
		result = HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin);
 8002afc:	2101      	movs	r1, #1
 8002afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b02:	f004 f883 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	73fb      	strb	r3, [r7, #15]
		break;
 8002b0a:	e01d      	b.n	8002b48 <vLedRead+0xb0>
	case LED_4:
		result = HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin);
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b12:	f004 f87b 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
		break;
 8002b1a:	e015      	b.n	8002b48 <vLedRead+0xb0>
	case LED_5:
		result = HAL_GPIO_ReadPin(LED5_GPIO_Port, LED5_Pin);
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <vLedRead+0xc8>)
 8002b20:	f004 f874 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
		break;
 8002b28:	e00e      	b.n	8002b48 <vLedRead+0xb0>
	case LED_6:
		result = HAL_GPIO_ReadPin(LED6_GPIO_Port, LED6_Pin);
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <vLedRead+0xcc>)
 8002b2e:	f004 f86d 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
		break;
 8002b36:	e007      	b.n	8002b48 <vLedRead+0xb0>
	case LED_7:
		result = HAL_GPIO_ReadPin(LED7_GPIO_Port, LED7_Pin);
 8002b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b3c:	4808      	ldr	r0, [pc, #32]	; (8002b60 <vLedRead+0xc8>)
 8002b3e:	f004 f865 	bl	8006c0c <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
		break;
 8002b46:	bf00      	nop
	}
	return result;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08017c5c 	.word	0x08017c5c
 8002b58:	08017ef4 	.word	0x08017ef4
 8002b5c:	08017c6c 	.word	0x08017c6c
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48001c00 	.word	0x48001c00

08002b68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002b80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002b88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002b90:	e000      	b.n	8002b94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002b92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002b94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f9      	beq.n	8002b92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002b9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002ba8:	687b      	ldr	r3, [r7, #4]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e009      	b.n	8002be0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ffc7 	bl	8002b68 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dbf1      	blt.n	8002bcc <_write+0x16>
	return len;
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bf8:	f002 fc15 	bl	8005426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bfc:	f000 f83c 	bl	8002c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c00:	f000 fcfa 	bl	80035f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c04:	f000 f8e6 	bl	8002dd4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002c08:	f000 f95e 	bl	8002ec8 <MX_ADC3_Init>
  MX_DCMI_Init();
 8002c0c:	f000 f9c2 	bl	8002f94 <MX_DCMI_Init>
  MX_FMC_Init();
 8002c10:	f000 fc44 	bl	800349c <MX_FMC_Init>
  MX_I2C1_Init();
 8002c14:	f000 f9f2 	bl	8002ffc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002c18:	f000 fa30 	bl	800307c <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8002c1c:	f000 fa6e 	bl	80030fc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002c20:	f000 fa9a 	bl	8003158 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002c24:	f000 fac8 	bl	80031b8 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8002c28:	f000 faf6 	bl	8003218 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8002c2c:	f000 fb20 	bl	8003270 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8002c30:	f000 fbc6 	bl	80033c0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8002c34:	f000 fbf4 	bl	8003420 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c38:	f00e f83e 	bl	8010cb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c3c:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <main+0x70>)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4809      	ldr	r0, [pc, #36]	; (8002c68 <main+0x74>)
 8002c42:	f00e f8a3 	bl	8010d8c <osThreadNew>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <main+0x78>)
 8002c4a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initTasks();
 8002c4c:	f001 f838 	bl	8003cc0 <initTasks>


  printf("Iniciando\r\n");//simepre tiene que estar un primer printf para que funcione bien
 8002c50:	4807      	ldr	r0, [pc, #28]	; (8002c70 <main+0x7c>)
 8002c52:	f012 fbbf 	bl	80153d4 <puts>
  printf("Espere...\r\n");
 8002c56:	4807      	ldr	r0, [pc, #28]	; (8002c74 <main+0x80>)
 8002c58:	f012 fbbc 	bl	80153d4 <puts>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002c5c:	f00e f860 	bl	8010d20 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <main+0x6c>
 8002c62:	bf00      	nop
 8002c64:	08017f00 	.word	0x08017f00
 8002c68:	080039b9 	.word	0x080039b9
 8002c6c:	2000e4dc 	.word	0x2000e4dc
 8002c70:	08017c8c 	.word	0x08017c8c
 8002c74:	08017c98 	.word	0x08017c98

08002c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b0ba      	sub	sp, #232	; 0xe8
 8002c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c82:	2244      	movs	r2, #68	; 0x44
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f011 ffbb 	bl	8014c02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	228c      	movs	r2, #140	; 0x8c
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f011 ffad 	bl	8014c02 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002ca8:	f005 fe90 	bl	80089cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002cac:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <SystemClock_Config+0x150>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	4a45      	ldr	r2, [pc, #276]	; (8002dc8 <SystemClock_Config+0x150>)
 8002cb4:	f023 0318 	bic.w	r3, r3, #24
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002cbc:	2314      	movs	r3, #20
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002cd4:	2360      	movs	r3, #96	; 0x60
 8002cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002cec:	2328      	movs	r3, #40	; 0x28
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 ffc1 	bl	8008c90 <HAL_RCC_OscConfig>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002d14:	f000 fe6c 	bl	80039f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d18:	230f      	movs	r3, #15
 8002d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f006 fbcd 	bl	80094dc <HAL_RCC_ClockConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002d48:	f000 fe52 	bl	80039f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <SystemClock_Config+0x154>)
 8002d4e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d74:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002d76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d7a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d80:	2301      	movs	r3, #1
 8002d82:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002d84:	2318      	movs	r3, #24
 8002d86:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <SystemClock_Config+0x158>)
 8002d96:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fdd4 	bl	8009948 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002da6:	f000 fe23 	bl	80039f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002daa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dae:	f005 fe2b 	bl	8008a08 <HAL_PWREx_ControlVoltageScaling>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x144>
  {
    Error_Handler();
 8002db8:	f000 fe1a 	bl	80039f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002dbc:	f007 fd82 	bl	800a8c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002dc0:	bf00      	nop
 8002dc2:	37e8      	adds	r7, #232	; 0xe8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	000868e3 	.word	0x000868e3
 8002dd0:	01110000 	.word	0x01110000

08002dd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002df6:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002df8:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <MX_ADC1_Init+0xec>)
 8002dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e08:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e16:	2204      	movs	r2, #4
 8002e18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e5c:	4817      	ldr	r0, [pc, #92]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e5e:	f002 fccd 	bl	80057fc <HAL_ADC_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002e68:	f000 fdc2 	bl	80039f0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4619      	mov	r1, r3
 8002e76:	4811      	ldr	r0, [pc, #68]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002e78:	f003 f9be 	bl	80061f8 <HAL_ADCEx_MultiModeConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e82:	f000 fdb5 	bl	80039f0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_ADC1_Init+0xf0>)
 8002e88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e92:	237f      	movs	r3, #127	; 0x7f
 8002e94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e96:	2304      	movs	r3, #4
 8002e98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <MX_ADC1_Init+0xe8>)
 8002ea4:	f002 fe02 	bl	8005aac <HAL_ADC_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002eae:	f000 fd9f 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	; 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000e7b4 	.word	0x2000e7b4
 8002ec0:	50040000 	.word	0x50040000
 8002ec4:	10c00010 	.word	0x10c00010

08002ec8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ece:	463b      	mov	r3, r7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <MX_ADC3_Init+0xc4>)
 8002ee2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ee4:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002eea:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002f44:	4810      	ldr	r0, [pc, #64]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f46:	f002 fc59 	bl	80057fc <HAL_ADC_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8002f50:	f000 fd4e 	bl	80039f0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_ADC3_Init+0xc8>)
 8002f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f58:	2306      	movs	r3, #6
 8002f5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f60:	237f      	movs	r3, #127	; 0x7f
 8002f62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f64:	2304      	movs	r3, #4
 8002f66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_ADC3_Init+0xc0>)
 8002f72:	f002 fd9b 	bl	8005aac <HAL_ADC_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002f7c:	f000 fd38 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000e81c 	.word	0x2000e81c
 8002f8c:	50040200 	.word	0x50040200
 8002f90:	36902000 	.word	0x36902000

08002f94 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <MX_DCMI_Init+0x64>)
 8002f9c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002fd4:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <MX_DCMI_Init+0x60>)
 8002fe2:	f003 fac7 	bl	8006574 <HAL_DCMI_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002fec:	f000 fd00 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000e884 	.word	0x2000e884
 8002ff8:	50050000 	.word	0x50050000

08002ffc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <MX_I2C1_Init+0x74>)
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <MX_I2C1_Init+0x78>)
 8003004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <MX_I2C1_Init+0x74>)
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <MX_I2C1_Init+0x7c>)
 800300a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <MX_I2C1_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <MX_I2C1_Init+0x74>)
 8003014:	2201      	movs	r2, #1
 8003016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MX_I2C1_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <MX_I2C1_Init+0x74>)
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <MX_I2C1_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_I2C1_Init+0x74>)
 800302c:	2200      	movs	r2, #0
 800302e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <MX_I2C1_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003036:	480e      	ldr	r0, [pc, #56]	; (8003070 <MX_I2C1_Init+0x74>)
 8003038:	f003 fe31 	bl	8006c9e <HAL_I2C_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003042:	f000 fcd5 	bl	80039f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003046:	2100      	movs	r1, #0
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <MX_I2C1_Init+0x74>)
 800304a:	f004 fb89 	bl	8007760 <HAL_I2CEx_ConfigAnalogFilter>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003054:	f000 fccc 	bl	80039f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003058:	2100      	movs	r1, #0
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <MX_I2C1_Init+0x74>)
 800305c:	f004 fbcb 	bl	80077f6 <HAL_I2CEx_ConfigDigitalFilter>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003066:	f000 fcc3 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000e544 	.word	0x2000e544
 8003074:	40005400 	.word	0x40005400
 8003078:	10909cec 	.word	0x10909cec

0800307c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <MX_I2C2_Init+0x74>)
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <MX_I2C2_Init+0x78>)
 8003084:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <MX_I2C2_Init+0x74>)
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <MX_I2C2_Init+0x7c>)
 800308a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <MX_I2C2_Init+0x74>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <MX_I2C2_Init+0x74>)
 8003094:	2201      	movs	r2, #1
 8003096:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <MX_I2C2_Init+0x74>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030b6:	480e      	ldr	r0, [pc, #56]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030b8:	f003 fdf1 	bl	8006c9e <HAL_I2C_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80030c2:	f000 fc95 	bl	80039f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030c6:	2100      	movs	r1, #0
 80030c8:	4809      	ldr	r0, [pc, #36]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030ca:	f004 fb49 	bl	8007760 <HAL_I2CEx_ConfigAnalogFilter>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80030d4:	f000 fc8c 	bl	80039f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80030d8:	2100      	movs	r1, #0
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_I2C2_Init+0x74>)
 80030dc:	f004 fb8b 	bl	80077f6 <HAL_I2CEx_ConfigDigitalFilter>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80030e6:	f000 fc83 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000e590 	.word	0x2000e590
 80030f4:	40005800 	.word	0x40005800
 80030f8:	10909cec 	.word	0x10909cec

080030fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <MX_LPUART1_UART_Init+0x54>)
 8003104:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_LPUART1_UART_Init+0x58>)
 800310a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003112:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003122:	220c      	movs	r2, #12
 8003124:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <MX_LPUART1_UART_Init+0x50>)
 800313a:	f009 f929 	bl	800c390 <HAL_UART_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003144:	f000 fc54 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000e6b0 	.word	0x2000e6b0
 8003150:	40008000 	.word	0x40008000
 8003154:	00033324 	.word	0x00033324

08003158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <MX_USART1_UART_Init+0x5c>)
 8003160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_USART1_UART_Init+0x58>)
 800319c:	f009 f8f8 	bl	800c390 <HAL_UART_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80031a6:	f000 fc23 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000e8dc 	.word	0x2000e8dc
 80031b4:	40013800 	.word	0x40013800

080031b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <MX_USART2_UART_Init+0x5c>)
 80031c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031de:	220c      	movs	r2, #12
 80031e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_USART2_UART_Init+0x58>)
 80031fc:	f009 f8c8 	bl	800c390 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003206:	f000 fbf3 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000ea30 	.word	0x2000ea30
 8003214:	40004400 	.word	0x40004400

08003218 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <MX_QUADSPI_Init+0x50>)
 800321e:	4a13      	ldr	r2, [pc, #76]	; (800326c <MX_QUADSPI_Init+0x54>)
 8003220:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_QUADSPI_Init+0x50>)
 800322a:	2201      	movs	r2, #1
 800322c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003236:	2201      	movs	r2, #1
 8003238:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_QUADSPI_Init+0x50>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_QUADSPI_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <MX_QUADSPI_Init+0x50>)
 8003254:	f005 fc4e 	bl	8008af4 <HAL_QSPI_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800325e:	f000 fbc7 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000eab0 	.word	0x2000eab0
 800326c:	a0001000 	.word	0xa0001000

08003270 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8003274:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003276:	4a4e      	ldr	r2, [pc, #312]	; (80033b0 <MX_SAI1_Init+0x140>)
 8003278:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800327a:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <MX_SAI1_Init+0x13c>)
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003280:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <MX_SAI1_Init+0x13c>)
 800328e:	2200      	movs	r2, #0
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003294:	2200      	movs	r2, #0
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003298:	4b44      	ldr	r3, [pc, #272]	; (80033ac <MX_SAI1_Init+0x13c>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80032aa:	4b40      	ldr	r3, [pc, #256]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032b2:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <MX_SAI1_Init+0x144>)
 80032b4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80032b6:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80032c8:	4b38      	ldr	r3, [pc, #224]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032d0:	2208      	movs	r2, #8
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80032e0:	4b32      	ldr	r3, [pc, #200]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <MX_SAI1_Init+0x13c>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8003304:	4829      	ldr	r0, [pc, #164]	; (80033ac <MX_SAI1_Init+0x13c>)
 8003306:	f007 fdb9 	bl	800ae7c <HAL_SAI_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8003310:	f000 fb6e 	bl	80039f0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8003314:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003316:	4a29      	ldr	r2, [pc, #164]	; (80033bc <MX_SAI1_Init+0x14c>)
 8003318:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <MX_SAI1_Init+0x148>)
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003322:	2203      	movs	r2, #3
 8003324:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003328:	2240      	movs	r2, #64	; 0x40
 800332a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <MX_SAI1_Init+0x148>)
 800332e:	2200      	movs	r2, #0
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003334:	2200      	movs	r2, #0
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <MX_SAI1_Init+0x148>)
 800333a:	2201      	movs	r2, #1
 800333c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <MX_SAI1_Init+0x148>)
 800334c:	2200      	movs	r2, #0
 800334e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003358:	2200      	movs	r2, #0
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <MX_SAI1_Init+0x148>)
 800335e:	2200      	movs	r2, #0
 8003360:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003364:	2208      	movs	r2, #8
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <MX_SAI1_Init+0x148>)
 800336a:	2201      	movs	r2, #1
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003370:	2200      	movs	r2, #0
 8003372:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003376:	2200      	movs	r2, #0
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <MX_SAI1_Init+0x148>)
 800337c:	2200      	movs	r2, #0
 800337e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003382:	2200      	movs	r2, #0
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003388:	2200      	movs	r2, #0
 800338a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <MX_SAI1_Init+0x148>)
 800338e:	2201      	movs	r2, #1
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <MX_SAI1_Init+0x148>)
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8003398:	4807      	ldr	r0, [pc, #28]	; (80033b8 <MX_SAI1_Init+0x148>)
 800339a:	f007 fd6f 	bl	800ae7c <HAL_SAI_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80033a4:	f000 fb24 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	2000e9ac 	.word	0x2000e9ac
 80033b0:	40015404 	.word	0x40015404
 80033b4:	0002ee00 	.word	0x0002ee00
 80033b8:	2000e730 	.word	0x2000e730
 80033bc:	40015424 	.word	0x40015424

080033c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <MX_SDMMC1_SD_Init+0x5c>)
 80033c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80033ee:	480a      	ldr	r0, [pc, #40]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 80033f0:	f007 fee8 	bl	800b1c4 <HAL_SD_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 80033fa:	f000 faf9 	bl	80039f0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80033fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <MX_SDMMC1_SD_Init+0x58>)
 8003404:	f008 f940 	bl	800b688 <HAL_SD_ConfigWideBusOperation>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 800340e:	f000 faef 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000e5dc 	.word	0x2000e5dc
 800341c:	40012800 	.word	0x40012800

08003420 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <MX_SPI2_Init+0x74>)
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <MX_SPI2_Init+0x78>)
 8003428:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <MX_SPI2_Init+0x74>)
 800342c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003430:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <MX_SPI2_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <MX_SPI2_Init+0x74>)
 800343a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800343e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_SPI2_Init+0x74>)
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <MX_SPI2_Init+0x74>)
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_SPI2_Init+0x74>)
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_SPI2_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_SPI2_Init+0x74>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_SPI2_Init+0x74>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_SPI2_Init+0x74>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_SPI2_Init+0x74>)
 800346e:	2207      	movs	r2, #7
 8003470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_SPI2_Init+0x74>)
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_SPI2_Init+0x74>)
 800347a:	2208      	movs	r2, #8
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_SPI2_Init+0x74>)
 8003480:	f008 fc54 	bl	800bd2c <HAL_SPI_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800348a:	f000 fab1 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2000e4e0 	.word	0x2000e4e0
 8003498:	40003800 	.word	0x40003800

0800349c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80034a2:	463b      	mov	r3, r7
 80034a4:	2220      	movs	r2, #32
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f011 fbaa 	bl	8014c02 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <MX_FMC_Init+0x150>)
 80034b0:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80034b4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80034b6:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <MX_FMC_Init+0x150>)
 80034b8:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <MX_FMC_Init+0x154>)
 80034ba:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <MX_FMC_Init+0x150>)
 80034be:	2202      	movs	r2, #2
 80034c0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <MX_FMC_Init+0x150>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <MX_FMC_Init+0x150>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <MX_FMC_Init+0x150>)
 80034d0:	2210      	movs	r2, #16
 80034d2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <MX_FMC_Init+0x150>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <MX_FMC_Init+0x150>)
 80034dc:	2200      	movs	r2, #0
 80034de:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80034e0:	4b42      	ldr	r3, [pc, #264]	; (80035ec <MX_FMC_Init+0x150>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <MX_FMC_Init+0x150>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80034ec:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <MX_FMC_Init+0x150>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80034f2:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <MX_FMC_Init+0x150>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80034f8:	4b3c      	ldr	r3, [pc, #240]	; (80035ec <MX_FMC_Init+0x150>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <MX_FMC_Init+0x150>)
 8003500:	2200      	movs	r2, #0
 8003502:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <MX_FMC_Init+0x150>)
 8003506:	2200      	movs	r2, #0
 8003508:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <MX_FMC_Init+0x150>)
 800350c:	2200      	movs	r2, #0
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <MX_FMC_Init+0x150>)
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003516:	230f      	movs	r3, #15
 8003518:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800351a:	230f      	movs	r3, #15
 800351c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800351e:	23ff      	movs	r3, #255	; 0xff
 8003520:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003522:	230f      	movs	r3, #15
 8003524:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003526:	2310      	movs	r3, #16
 8003528:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800352a:	2311      	movs	r3, #17
 800352c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003532:	463b      	mov	r3, r7
 8003534:	2200      	movs	r2, #0
 8003536:	4619      	mov	r1, r3
 8003538:	482c      	ldr	r0, [pc, #176]	; (80035ec <MX_FMC_Init+0x150>)
 800353a:	f008 fc81 	bl	800be40 <HAL_SRAM_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8003544:	f000 fa54 	bl	80039f0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <MX_FMC_Init+0x158>)
 800354a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800354e:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <MX_FMC_Init+0x158>)
 8003552:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <MX_FMC_Init+0x154>)
 8003554:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <MX_FMC_Init+0x158>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <MX_FMC_Init+0x158>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <MX_FMC_Init+0x158>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <MX_FMC_Init+0x158>)
 800356a:	2210      	movs	r2, #16
 800356c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <MX_FMC_Init+0x158>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <MX_FMC_Init+0x158>)
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <MX_FMC_Init+0x158>)
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <MX_FMC_Init+0x158>)
 8003582:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_FMC_Init+0x158>)
 800358a:	2200      	movs	r2, #0
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <MX_FMC_Init+0x158>)
 8003590:	2200      	movs	r2, #0
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <MX_FMC_Init+0x158>)
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <MX_FMC_Init+0x158>)
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <MX_FMC_Init+0x158>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <MX_FMC_Init+0x158>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <MX_FMC_Init+0x158>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80035b2:	230f      	movs	r3, #15
 80035b4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80035b6:	230f      	movs	r3, #15
 80035b8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80035ba:	23ff      	movs	r3, #255	; 0xff
 80035bc:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80035be:	230f      	movs	r3, #15
 80035c0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80035c2:	2310      	movs	r3, #16
 80035c4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80035c6:	2311      	movs	r3, #17
 80035c8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80035ce:	463b      	mov	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	4619      	mov	r1, r3
 80035d4:	4807      	ldr	r0, [pc, #28]	; (80035f4 <MX_FMC_Init+0x158>)
 80035d6:	f008 fc33 	bl	800be40 <HAL_SRAM_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 80035e0:	f000 fa06 	bl	80039f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	2000e660 	.word	0x2000e660
 80035f0:	a0000104 	.word	0xa0000104
 80035f4:	2000e95c 	.word	0x2000e95c

080035f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800360e:	4bb3      	ldr	r3, [pc, #716]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	4ab2      	ldr	r2, [pc, #712]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800361a:	4bb0      	ldr	r3, [pc, #704]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003626:	4bad      	ldr	r3, [pc, #692]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	4aac      	ldr	r2, [pc, #688]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003632:	4baa      	ldr	r3, [pc, #680]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800363e:	4ba7      	ldr	r3, [pc, #668]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	4aa6      	ldr	r2, [pc, #664]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364a:	4ba4      	ldr	r3, [pc, #656]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003656:	4ba1      	ldr	r3, [pc, #644]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	4aa0      	ldr	r2, [pc, #640]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003662:	4b9e      	ldr	r3, [pc, #632]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	4b9b      	ldr	r3, [pc, #620]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4a9a      	ldr	r2, [pc, #616]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367a:	4b98      	ldr	r3, [pc, #608]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003686:	4b95      	ldr	r3, [pc, #596]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	4a94      	ldr	r2, [pc, #592]	; (80038dc <MX_GPIO_Init+0x2e4>)
 800368c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003692:	4b92      	ldr	r3, [pc, #584]	; (80038dc <MX_GPIO_Init+0x2e4>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800369e:	f005 fa19 	bl	8008ad4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a2:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	4a8d      	ldr	r2, [pc, #564]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ae:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	4b88      	ldr	r3, [pc, #544]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4a87      	ldr	r2, [pc, #540]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036c6:	4b85      	ldr	r3, [pc, #532]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036d2:	4b82      	ldr	r3, [pc, #520]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	4a81      	ldr	r2, [pc, #516]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036d8:	f043 0320 	orr.w	r3, r3, #32
 80036dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036de:	4b7f      	ldr	r3, [pc, #508]	; (80038dc <MX_GPIO_Init+0x2e4>)
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80036ea:	2201      	movs	r2, #1
 80036ec:	2104      	movs	r1, #4
 80036ee:	487c      	ldr	r0, [pc, #496]	; (80038e0 <MX_GPIO_Init+0x2e8>)
 80036f0:	f003 faa4 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2101      	movs	r1, #1
 80036f8:	487a      	ldr	r0, [pc, #488]	; (80038e4 <MX_GPIO_Init+0x2ec>)
 80036fa:	f003 fa9f 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	2143      	movs	r1, #67	; 0x43
 8003702:	4877      	ldr	r0, [pc, #476]	; (80038e0 <MX_GPIO_Init+0x2e8>)
 8003704:	f003 fa9a 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|LEDx_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	21c0      	movs	r1, #192	; 0xc0
 800370c:	4876      	ldr	r0, [pc, #472]	; (80038e8 <MX_GPIO_Init+0x2f0>)
 800370e:	f003 fa95 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 8003712:	2201      	movs	r2, #1
 8003714:	2131      	movs	r1, #49	; 0x31
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f003 fa8f 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED7_Pin, GPIO_PIN_SET);
 800371e:	2201      	movs	r2, #1
 8003720:	f241 0104 	movw	r1, #4100	; 0x1004
 8003724:	4871      	ldr	r0, [pc, #452]	; (80038ec <MX_GPIO_Init+0x2f4>)
 8003726:	f003 fa89 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003730:	486e      	ldr	r0, [pc, #440]	; (80038ec <MX_GPIO_Init+0x2f4>)
 8003732:	f003 fa83 	bl	8006c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8003736:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373c:	2300      	movs	r3, #0
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003740:	2302      	movs	r3, #2
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	4866      	ldr	r0, [pc, #408]	; (80038e4 <MX_GPIO_Init+0x2ec>)
 800374c:	f002 ffda 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8003750:	2347      	movs	r3, #71	; 0x47
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	2301      	movs	r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	4619      	mov	r1, r3
 8003766:	485e      	ldr	r0, [pc, #376]	; (80038e0 <MX_GPIO_Init+0x2e8>)
 8003768:	f002 ffcc 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800376c:	2330      	movs	r3, #48	; 0x30
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800377c:	2305      	movs	r3, #5
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003784:	4619      	mov	r1, r3
 8003786:	4859      	ldr	r0, [pc, #356]	; (80038ec <MX_GPIO_Init+0x2f4>)
 8003788:	f002 ffbc 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 800378c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003792:	2302      	movs	r3, #2
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379a:	2303      	movs	r3, #3
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800379e:	2305      	movs	r3, #5
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80037a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a6:	4619      	mov	r1, r3
 80037a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ac:	f002 ffaa 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80037b0:	2301      	movs	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80037c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c4:	4619      	mov	r1, r3
 80037c6:	4847      	ldr	r0, [pc, #284]	; (80038e4 <MX_GPIO_Init+0x2ec>)
 80037c8:	f002 ff9c 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80037cc:	2340      	movs	r3, #64	; 0x40
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d0:	2302      	movs	r3, #2
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d8:	2300      	movs	r3, #0
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80037dc:	2303      	movs	r3, #3
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80037e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e4:	4619      	mov	r1, r3
 80037e6:	483f      	ldr	r0, [pc, #252]	; (80038e4 <MX_GPIO_Init+0x2ec>)
 80037e8:	f002 ff8c 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80037ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	2300      	movs	r3, #0
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80037fe:	2303      	movs	r3, #3
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003806:	4619      	mov	r1, r3
 8003808:	4835      	ldr	r0, [pc, #212]	; (80038e0 <MX_GPIO_Init+0x2e8>)
 800380a:	f002 ff7b 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800380e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381c:	2300      	movs	r3, #0
 800381e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003820:	2302      	movs	r3, #2
 8003822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003828:	4619      	mov	r1, r3
 800382a:	4830      	ldr	r0, [pc, #192]	; (80038ec <MX_GPIO_Init+0x2f4>)
 800382c:	f002 ff6a 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	4619      	mov	r1, r3
 8003842:	4827      	ldr	r0, [pc, #156]	; (80038e0 <MX_GPIO_Init+0x2e8>)
 8003844:	f002 ff5e 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_RST_Pin LEDx_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin|LEDx_Pin;
 8003848:	23c0      	movs	r3, #192	; 0xc0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800384c:	2301      	movs	r3, #1
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385c:	4619      	mov	r1, r3
 800385e:	4822      	ldr	r0, [pc, #136]	; (80038e8 <MX_GPIO_Init+0x2f0>)
 8003860:	f002 ff50 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8003864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_GPIO_Init+0x2f8>)
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	4619      	mov	r1, r3
 8003878:	481e      	ldr	r0, [pc, #120]	; (80038f4 <MX_GPIO_Init+0x2fc>)
 800387a:	f002 ff43 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800387e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8003890:	230e      	movs	r3, #14
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800389e:	f002 ff31 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin PC1 */
  GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80038a2:	2303      	movs	r3, #3
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80038a6:	230b      	movs	r3, #11
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b2:	4619      	mov	r1, r3
 80038b4:	480c      	ldr	r0, [pc, #48]	; (80038e8 <MX_GPIO_Init+0x2f0>)
 80038b6:	f002 ff25 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 80038ba:	2304      	movs	r3, #4
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80038ca:	2306      	movs	r3, #6
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80038ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d2:	4619      	mov	r1, r3
 80038d4:	4804      	ldr	r0, [pc, #16]	; (80038e8 <MX_GPIO_Init+0x2f0>)
 80038d6:	f002 ff15 	bl	8006704 <HAL_GPIO_Init>
 80038da:	e00d      	b.n	80038f8 <MX_GPIO_Init+0x300>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	48001c00 	.word	0x48001c00
 80038e4:	48002000 	.word	0x48002000
 80038e8:	48000800 	.word	0x48000800
 80038ec:	48000400 	.word	0x48000400
 80038f0:	10110000 	.word	0x10110000
 80038f4:	48001800 	.word	0x48001800

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80038f8:	2320      	movs	r3, #32
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <MX_GPIO_Init+0x3b0>)
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	4619      	mov	r1, r3
 800390a:	4828      	ldr	r0, [pc, #160]	; (80039ac <MX_GPIO_Init+0x3b4>)
 800390c:	f002 fefa 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED4_Pin;
 8003910:	2331      	movs	r3, #49	; 0x31
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003914:	2301      	movs	r3, #1
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800392a:	f002 feeb 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800392e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003938:	2302      	movs	r3, #2
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800393c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003940:	4619      	mov	r1, r3
 8003942:	481b      	ldr	r0, [pc, #108]	; (80039b0 <MX_GPIO_Init+0x3b8>)
 8003944:	f002 fede 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 8003948:	2302      	movs	r3, #2
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800394c:	230b      	movs	r3, #11
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003958:	4619      	mov	r1, r3
 800395a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800395e:	f002 fed1 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED7_Pin;
 8003962:	f241 0304 	movw	r3, #4100	; 0x1004
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003968:	2301      	movs	r3, #1
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003978:	4619      	mov	r1, r3
 800397a:	480e      	ldr	r0, [pc, #56]	; (80039b4 <MX_GPIO_Init+0x3bc>)
 800397c:	f002 fec2 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003986:	2311      	movs	r3, #17
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003996:	4619      	mov	r1, r3
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <MX_GPIO_Init+0x3bc>)
 800399a:	f002 feb3 	bl	8006704 <HAL_GPIO_Init>

}
 800399e:	bf00      	nop
 80039a0:	3738      	adds	r7, #56	; 0x38
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	10110000 	.word	0x10110000
 80039ac:	48000800 	.word	0x48000800
 80039b0:	48001400 	.word	0x48001400
 80039b4:	48000400 	.word	0x48000400

080039b8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80039c0:	f010 fabc 	bl	8013f3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1 / portTICK_PERIOD_MS);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f00d fa87 	bl	8010ed8 <osDelay>
 80039ca:	e7fb      	b.n	80039c4 <StartDefaultTask+0xc>

080039cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039de:	f001 fd3b 	bl	8005458 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40001000 	.word	0x40001000

080039f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <mqtt_Connect>:


//int32_t transport_socket;


ESP8266_StatusTypeDef mqtt_Connect(void) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0ba      	sub	sp, #232	; 0xe8
 8003a04:	af00      	add	r7, sp, #0
	//MQTTTransport transporter;
	//int32_t result;
	int32_t length;
	unsigned char buffer[128];

	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	int32_t internalState = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int32_t trial = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 8003a18:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <mqtt_Connect+0xcc>)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	2258      	movs	r2, #88	; 0x58
 8003a20:	4618      	mov	r0, r3
 8003a22:	f011 f8e3 	bl	8014bec <memcpy>

	while (trial < TRIAL_CONNECTION_TIME) {
 8003a26:	e046      	b.n	8003ab6 <mqtt_Connect+0xb6>
		switch (internalState) {
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d042      	beq.n	8003ab6 <mqtt_Connect+0xb6>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d039      	beq.n	8003aa8 <mqtt_Connect+0xa8>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d000      	beq.n	8003a3a <mqtt_Connect+0x3a>
 8003a38:	e03d      	b.n	8003ab6 <mqtt_Connect+0xb6>
			//transporter.state = 0;

			// Populate the connect struct.


			connectData.MQTTVersion = 3; //4
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	723b      	strb	r3, [r7, #8]
			connectData.clientID.cstring = "fede";
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <mqtt_Connect+0xd0>)
 8003a40:	60fb      	str	r3, [r7, #12]
			connectData.keepAliveInterval = CONNECTION_KEEPALIVE_S * 2;
 8003a42:	2378      	movs	r3, #120	; 0x78
 8003a44:	833b      	strh	r3, [r7, #24]
			//connectData.willFlag = 1;
			//connectData.will.qos = 2;
			memset((char*)buffer, '\0', strlen((char*)buffer));
 8003a46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fbd0 	bl	80001f0 <strlen>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f011 f8d2 	bl	8014c02 <memset>
			length = MQTTSerialize_connect(buffer, sizeof(buffer),
 8003a5e:	463a      	mov	r2, r7
 8003a60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fe40 	bl	80016ec <MQTTSerialize_connect>
 8003a6c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					&connectData);

			// Send CONNECT to the mqtt broker.

			Status = ESP_SendData(buffer, length);
 8003a70:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003a74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fbf0 	bl	8001260 <ESP_SendData>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

			//if ((result = transport_sendPacketBuffer(transport_socket, buffer,length)) == length) {
			if (Status == ESP8266_OK) {
 8003a86:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <mqtt_Connect+0x96>
				//Status = ESP8266_OK;
				internalState = 2;			//internalState++;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a94:	e00f      	b.n	8003ab6 <mqtt_Connect+0xb6>
			} else {
				//Status = ESP8266_ERROR;
				internalState = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				trial++;
 8003a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			}
			break;
 8003aa6:	e006      	b.n	8003ab6 <mqtt_Connect+0xb6>
					break;
				}
			}*/
			break;
		case 2:
			Status = ESP8266_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			trial = TRIAL_CONNECTION_TIME;
 8003aae:	2305      	movs	r3, #5
 8003ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			break;
 8003ab4:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	ddb4      	ble.n	8003a28 <mqtt_Connect+0x28>
		}
	}

	return Status;
 8003abe:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	37e8      	adds	r7, #232	; 0xe8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	08017cac 	.word	0x08017cac
 8003ad0:	08017ca4 	.word	0x08017ca4

08003ad4 <mqtt_Publisher>:

ESP8266_StatusTypeDef mqtt_Publisher(dataMqtt_t *data){
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b0b2      	sub	sp, #200	; 0xc8
 8003ad8:	af08      	add	r7, sp, #32
 8003ada:	6078      	str	r0, [r7, #4]
	unsigned char buffer[128];
	int32_t length;
	int32_t trial = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int32_t internalState = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	// Populate the publish message.
	MQTTString topicString = MQTTString_initializer;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
	topicString.cstring = data->topic;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60bb      	str	r3, [r7, #8]
	int qos = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	memset((char*)buffer, '\0', strlen((char*)buffer));
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fb71 	bl	80001f0 <strlen>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f011 f873 	bl	8014c02 <memset>
	//strcat((char*)data->data, "\r\n");// OJO QUE PUEDE QUE ALGUNOS ENVIOS NECESITEN ESTE \R\N
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
			topicString, data->data, strlen((char*)data->data));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0414 	add.w	r4, r3, #20
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3314      	adds	r3, #20
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fb62 	bl	80001f0 <strlen>
 8003b2c:	4603      	mov	r3, r0
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
 8003b2e:	f107 0514 	add.w	r5, r7, #20
 8003b32:	9306      	str	r3, [sp, #24]
 8003b34:	9405      	str	r4, [sp, #20]
 8003b36:	ac02      	add	r4, sp, #8
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b44:	2300      	movs	r3, #0
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7fd ffe2 	bl	8001b1e <MQTTSerialize_publish>
 8003b5a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	// Send PUBLISH to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 8003b5e:	e02b      	b.n	8003bb8 <mqtt_Publisher+0xe4>
		switch (internalState) {
 8003b60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <mqtt_Publisher+0x9a>
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d01e      	beq.n	8003baa <mqtt_Publisher+0xd6>
 8003b6c:	e024      	b.n	8003bb8 <mqtt_Publisher+0xe4>
				case 0:
					Status = ESP_SendData(buffer, length);
 8003b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fb71 	bl	8001260 <ESP_SendData>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

					if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 8003b84:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <mqtt_Publisher+0xc4>
						internalState++;
 8003b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b90:	3301      	adds	r3, #1
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b96:	e00f      	b.n	8003bb8 <mqtt_Publisher+0xe4>
					} else {
						internalState = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						trial++;
 8003b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
				break;
 8003ba8:	e006      	b.n	8003bb8 <mqtt_Publisher+0xe4>
				case 1:
					Status = ESP8266_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					trial = TRIAL_CONNECTION_TIME;
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					break;
 8003bb6:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	ddcf      	ble.n	8003b60 <mqtt_Publisher+0x8c>
		}
	}
	return Status;
 8003bc0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	37a8      	adds	r7, #168	; 0xa8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bdb0      	pop	{r4, r5, r7, pc}

08003bcc <mqtt_SubscriberPacket>:

	}
	return Status;
}

ESP8266_StatusTypeDef mqtt_SubscriberPacket(char *topic) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b0ae      	sub	sp, #184	; 0xb8
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	6078      	str	r0, [r7, #4]
	int length;
	unsigned char buffer[128];
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	int32_t trial = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int32_t internalState = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// Populate the subscribe message.
	MQTTString topicFilters[1] = { MQTTString_initializer };
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
	topicFilters[0].cstring = topic;//"test/rgb";
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]
	int requestedQoSs[1] = { 0 };
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
	length = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1,
 8003bfa:	f107 0018 	add.w	r0, r7, #24
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	2200      	movs	r2, #0
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	f7fe f821 	bl	8001c5a <MQTTSerialize_subscribe>
 8003c18:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			topicFilters, requestedQoSs);

	// Send SUBSCRIBE to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 8003c1c:	e02b      	b.n	8003c76 <mqtt_SubscriberPacket+0xaa>
		switch (internalState) {
 8003c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <mqtt_SubscriberPacket+0x60>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d01e      	beq.n	8003c68 <mqtt_SubscriberPacket+0x9c>
 8003c2a:	e024      	b.n	8003c76 <mqtt_SubscriberPacket+0xaa>
		case 0:
			Status = ESP_SendData(buffer, length);
 8003c2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c30:	f107 0318 	add.w	r3, r7, #24
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd fb12 	bl	8001260 <ESP_SendData>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

			if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 8003c42:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <mqtt_SubscriberPacket+0x8a>
				internalState++;
 8003c4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c54:	e00f      	b.n	8003c76 <mqtt_SubscriberPacket+0xaa>
			} else {
				internalState = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				trial++;
 8003c5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c60:	3301      	adds	r3, #1
 8003c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			break;
 8003c66:	e006      	b.n	8003c76 <mqtt_SubscriberPacket+0xaa>
		case 1:
			Status = ESP8266_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			trial = TRIAL_CONNECTION_TIME;
 8003c6e:	2305      	movs	r3, #5
 8003c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			break;
 8003c74:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	ddcf      	ble.n	8003c1e <mqtt_SubscriberPacket+0x52>
		}
	}
	return Status;
 8003c7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	37a8      	adds	r7, #168	; 0xa8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <mqtt_SubscriberReceive>:

	return Status;
}*/


ESP8266_StatusTypeDef mqtt_SubscriberReceive(dataMqtt_t *data){//char topic[], char *pData, uint32_t *length) {
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
	//uint8_t dato[MQTT_BUFFERSIZE];


	//alocate memory for the receiving buffer
	//dato = (uint8_t*) malloc(MQTT_BUFFERSIZE * sizeof(uint8_t));
	memset(data->data, '\0', MQTT_BUFFERSIZE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f010 ffaf 	bl	8014c02 <memset>
	ESP_ReceiveData(data->data, MQTT_BUFFERSIZE, &data->length);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f103 0014 	add.w	r0, r3, #20
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3394      	adds	r3, #148	; 0x94
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	f7fd fb15 	bl	80012e0 <ESP_ReceiveData>
	//strcpy(*(pData), (char*)dato);	//ACA NO ME DEVUELVE EL ARREGLO
	//*(length) = RetLength;
	//*(pData) = findIntData(topic, dato, RetLength);
	//free(dato);

	return Status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <initTasks>:
void subTask(void *argument);
void analizeTask(void *argument);
void printConsoleTask(void *argument);
void buttonsTask(void *argument);

void initTasks(void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8

	HAL_UART_F_Init();
 8003cc6:	f001 fb43 	bl	8005350 <HAL_UART_F_Init>

	/* Led initialize */
	int i;
	uint8_t flag_error_mem = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	72fb      	strb	r3, [r7, #11]

	//led init
	for(i = 0; i < LED_COUNT; i++){
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e008      	b.n	8003ce6 <initTasks+0x26>
		vLedWrite(i, GPIO_PIN_RESET);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fe1a 	bl	8002914 <vLedWrite>
	for(i = 0; i < LED_COUNT; i++){
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	ddf3      	ble.n	8003cd4 <initTasks+0x14>
	}

	//button set
	button_down.GPIOx = JOY_DOWN_GPIO_Port;
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <initTasks+0x148>)
 8003cee:	4a47      	ldr	r2, [pc, #284]	; (8003e0c <initTasks+0x14c>)
 8003cf0:	601a      	str	r2, [r3, #0]
	button_down.GPIO_Pin = JOY_DOWN_Pin;
 8003cf2:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <initTasks+0x148>)
 8003cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf8:	809a      	strh	r2, [r3, #4]

	//sensor check
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP280_dev_address, 2, 100) == HAL_OK) {
 8003cfa:	2364      	movs	r3, #100	; 0x64
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	21ee      	movs	r1, #238	; 0xee
 8003d00:	4843      	ldr	r0, [pc, #268]	; (8003e10 <initTasks+0x150>)
 8003d02:	f003 fa45 	bl	8007190 <HAL_I2C_IsDeviceReady>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <initTasks+0x60>
		BMP280_init(&dev);
 8003d0c:	4841      	ldr	r0, [pc, #260]	; (8003e14 <initTasks+0x154>)
 8003d0e:	f7fe f8f2 	bl	8001ef6 <BMP280_init>
		BMP280_calc_values(&dev);
 8003d12:	4840      	ldr	r0, [pc, #256]	; (8003e14 <initTasks+0x154>)
 8003d14:	f7fe f90c 	bl	8001f30 <BMP280_calc_values>
		dev.data.init_height = dev.data.altitude;
 8003d18:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <initTasks+0x154>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <initTasks+0x154>)
 8003d1e:	6313      	str	r3, [r2, #48]	; 0x30
	}


	strcpy((char*)dataSub.topic, topic_sub2);
 8003d20:	493d      	ldr	r1, [pc, #244]	; (8003e18 <initTasks+0x158>)
 8003d22:	483e      	ldr	r0, [pc, #248]	; (8003e1c <initTasks+0x15c>)
 8003d24:	f011 fb8e 	bl	8015444 <strcpy>

	xSemaphoreMutexUart = xSemaphoreCreateMutex();
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f00d fb42 	bl	80113b2 <xQueueCreateMutex>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <initTasks+0x160>)
 8003d32:	601a      	str	r2, [r3, #0]
	//xSemaphorePub = xSemaphoreCreateBinary();

	xQueuePrintConsole = xQueueCreate(100, sizeof(uint8_t));
 8003d34:	2200      	movs	r2, #0
 8003d36:	2101      	movs	r1, #1
 8003d38:	2064      	movs	r0, #100	; 0x64
 8003d3a:	f00d fabe 	bl	80112ba <xQueueGenericCreate>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <initTasks+0x164>)
 8003d42:	601a      	str	r2, [r3, #0]

	xQueueDataRx = xQueueCreate(5, sizeof(dataMqtt_t));
 8003d44:	2200      	movs	r2, #0
 8003d46:	2198      	movs	r1, #152	; 0x98
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f00d fab6 	bl	80112ba <xQueueGenericCreate>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <initTasks+0x168>)
 8003d52:	601a      	str	r2, [r3, #0]
	//xSemaphorePub != NULL && xSemaphoreSub != NULL &&
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003d54:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <initTasks+0x160>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d043      	beq.n	8003de4 <initTasks+0x124>
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <initTasks+0x168>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03f      	beq.n	8003de4 <initTasks+0x124>
 8003d64:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <initTasks+0x164>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03b      	beq.n	8003de4 <initTasks+0x124>
		BaseType_t res = xTaskCreate(wifiConnectTask, "wifi", STACK_SIZE, 0,
 8003d6c:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <initTasks+0x16c>)
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2320      	movs	r3, #32
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7a:	492d      	ldr	r1, [pc, #180]	; (8003e30 <initTasks+0x170>)
 8003d7c:	482d      	ldr	r0, [pc, #180]	; (8003e34 <initTasks+0x174>)
 8003d7e:	f00e f90b 	bl	8011f98 <xTaskCreate>
 8003d82:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, &wifiTask);
		if (res != pdPASS) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d004      	beq.n	8003d94 <initTasks+0xd4>
			printf("error creacion de tarea wifi\r\n");
 8003d8a:	482b      	ldr	r0, [pc, #172]	; (8003e38 <initTasks+0x178>)
 8003d8c:	f011 fb22 	bl	80153d4 <puts>
			flag_error_mem = 1;
 8003d90:	2301      	movs	r3, #1
 8003d92:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(ledTask, "led", 128, 0,
 8003d94:	2300      	movs	r3, #0
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	2318      	movs	r3, #24
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2280      	movs	r2, #128	; 0x80
 8003da0:	4926      	ldr	r1, [pc, #152]	; (8003e3c <initTasks+0x17c>)
 8003da2:	4827      	ldr	r0, [pc, #156]	; (8003e40 <initTasks+0x180>)
 8003da4:	f00e f8f8 	bl	8011f98 <xTaskCreate>
 8003da8:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityNormal, 0);
		if (res != pdPASS) {
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d004      	beq.n	8003dba <initTasks+0xfa>
			printf("error creacion de tarea led\r\n");
 8003db0:	4824      	ldr	r0, [pc, #144]	; (8003e44 <initTasks+0x184>)
 8003db2:	f011 fb0f 	bl	80153d4 <puts>
			flag_error_mem = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(printConsoleTask, "print", STACK_SIZE, 0,
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc8:	491f      	ldr	r1, [pc, #124]	; (8003e48 <initTasks+0x188>)
 8003dca:	4820      	ldr	r0, [pc, #128]	; (8003e4c <initTasks+0x18c>)
 8003dcc:	f00e f8e4 	bl	8011f98 <xTaskCreate>
 8003dd0:	6078      	str	r0, [r7, #4]
						(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d00b      	beq.n	8003df0 <initTasks+0x130>
			printf("error creacion de tarea led\r\n");
 8003dd8:	481a      	ldr	r0, [pc, #104]	; (8003e44 <initTasks+0x184>)
 8003dda:	f011 fafb 	bl	80153d4 <puts>
			flag_error_mem = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	72fb      	strb	r3, [r7, #11]
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003de2:	e005      	b.n	8003df0 <initTasks+0x130>
			printf("error creacion de tarea analize\r\n");
			flag_error_mem = 1;

		}*/
	} else {
		printf("error creacion de semaforo\r\n");
 8003de4:	481a      	ldr	r0, [pc, #104]	; (8003e50 <initTasks+0x190>)
 8003de6:	f011 faf5 	bl	80153d4 <puts>
		flag_error_mem = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	72fb      	strb	r3, [r7, #11]
 8003dee:	e000      	b.n	8003df2 <initTasks+0x132>
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8003df0:	bf00      	nop
	}

	if(flag_error_mem == 1)
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d103      	bne.n	8003e00 <initTasks+0x140>
		vLedWrite(LED_4, GPIO_PIN_SET);
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	f7fe fd8a 	bl	8002914 <vLedWrite>

}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	2000ebe0 	.word	0x2000ebe0
 8003e0c:	48002000 	.word	0x48002000
 8003e10:	2000e544 	.word	0x2000e544
 8003e14:	2000eb00 	.word	0x2000eb00
 8003e18:	20000040 	.word	0x20000040
 8003e1c:	2000eb38 	.word	0x2000eb38
 8003e20:	2000eb34 	.word	0x2000eb34
 8003e24:	2000ebd0 	.word	0x2000ebd0
 8003e28:	2000eafc 	.word	0x2000eafc
 8003e2c:	2000ebd8 	.word	0x2000ebd8
 8003e30:	08017d10 	.word	0x08017d10
 8003e34:	08003e55 	.word	0x08003e55
 8003e38:	08017d18 	.word	0x08017d18
 8003e3c:	08017d38 	.word	0x08017d38
 8003e40:	08004151 	.word	0x08004151
 8003e44:	08017d3c 	.word	0x08017d3c
 8003e48:	08017d5c 	.word	0x08017d5c
 8003e4c:	08004175 	.word	0x08004175
 8003e50:	08017d64 	.word	0x08017d64

08003e54 <wifiConnectTask>:

void wifiConnectTask(void *argument) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
	//uint8_t info[60] = "Conectando a wifi, Espere por favor.. \r\n";
	ESP8266_StatusTypeDef Status;
	//ESP8266_ConnectionInfoTypeDef connection_info;
	//esp_state state_esp = INIT;
	//esp8266_broker_setup(&connection_info);
	int internalState = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
	TickType_t t = xTaskGetTickCount();
 8003e60:	f00e fc0c 	bl	801267c <xTaskGetTickCount>
 8003e64:	4603      	mov	r3, r0
 8003e66:	60bb      	str	r3, [r7, #8]
	printf("Conectando a wifi, Espere por favor.. \r\n");
 8003e68:	48a1      	ldr	r0, [pc, #644]	; (80040f0 <wifiConnectTask+0x29c>)
 8003e6a:	f011 fab3 	bl	80153d4 <puts>
	for (;;) {
		switch (internalState) {
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	f200 8138 	bhi.w	80040e6 <wifiConnectTask+0x292>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <wifiConnectTask+0x28>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003e99 	.word	0x08003e99
 8003e80:	08003ed7 	.word	0x08003ed7
 8003e84:	08003f0b 	.word	0x08003f0b
 8003e88:	08003f3b 	.word	0x08003f3b
 8003e8c:	08003f83 	.word	0x08003f83
 8003e90:	08003fb3 	.word	0x08003fb3
 8003e94:	080040c5 	.word	0x080040c5
		case 0:
			// Turn the LED off.
			vLedWrite(LED_2, GPIO_PIN_RESET);
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7fe fd3a 	bl	8002914 <vLedWrite>
			// Connect to wifi (restore to default first).
			Status = ESP_ConnectWifi(true, WIFI_AP_SSID, WIFI_AP_PASS);
 8003ea0:	4a94      	ldr	r2, [pc, #592]	; (80040f4 <wifiConnectTask+0x2a0>)
 8003ea2:	4995      	ldr	r1, [pc, #596]	; (80040f8 <wifiConnectTask+0x2a4>)
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7fd f8b1 	bl	800100c <ESP_ConnectWifi>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d107      	bne.n	8003ec4 <wifiConnectTask+0x70>
				// To the next state.
				internalState++;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f7fe fd29 	bl	8002914 <vLedWrite>
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}

			break;
 8003ec2:	e105      	b.n	80040d0 <wifiConnectTask+0x27c>
				if (Status == ESP8266_ERROR)
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	f040 8102 	bne.w	80040d0 <wifiConnectTask+0x27c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003ecc:	2101      	movs	r1, #1
 8003ece:	2002      	movs	r0, #2
 8003ed0:	f7fe fd20 	bl	8002914 <vLedWrite>
			break;
 8003ed4:	e0fc      	b.n	80040d0 <wifiConnectTask+0x27c>
		case 1:
			// Wait 1sec.
			Status = ESP_Delay(1000);
 8003ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eda:	f7fd f869 	bl	8000fb0 <ESP_Delay>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <wifiConnectTask+0xa4>
				// To the next state.
				internalState++;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	2002      	movs	r0, #2
 8003ef2:	f7fe fd0f 	bl	8002914 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003ef6:	e0ed      	b.n	80040d4 <wifiConnectTask+0x280>
				if (Status == ESP8266_ERROR)
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 80ea 	bne.w	80040d4 <wifiConnectTask+0x280>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003f00:	2101      	movs	r1, #1
 8003f02:	2002      	movs	r0, #2
 8003f04:	f7fe fd06 	bl	8002914 <vLedWrite>
			break;
 8003f08:	e0e4      	b.n	80040d4 <wifiConnectTask+0x280>
		case 2:
			// Check the wifi connection status.
			Status = ESP_IsConnectedWifi();
 8003f0a:	f7fd f927 	bl	800115c <ESP_IsConnectedWifi>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <wifiConnectTask+0xd4>
				// To the next state.
				internalState++;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2002      	movs	r0, #2
 8003f22:	f7fe fcf7 	bl	8002914 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003f26:	e0d7      	b.n	80040d8 <wifiConnectTask+0x284>
				if (Status == ESP8266_ERROR)
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f040 80d4 	bne.w	80040d8 <wifiConnectTask+0x284>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003f30:	2101      	movs	r1, #1
 8003f32:	2002      	movs	r0, #2
 8003f34:	f7fe fcee 	bl	8002914 <vLedWrite>
			break;
 8003f38:	e0ce      	b.n	80040d8 <wifiConnectTask+0x284>
		case 3:
			// Start TCP connection.
			Status = ESP_StartTCP(network_host, network_port, network_keepalive,
 8003f3a:	4b70      	ldr	r3, [pc, #448]	; (80040fc <wifiConnectTask+0x2a8>)
 8003f3c:	8819      	ldrh	r1, [r3, #0]
 8003f3e:	4b70      	ldr	r3, [pc, #448]	; (8004100 <wifiConnectTask+0x2ac>)
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <wifiConnectTask+0x2b0>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	486d      	ldr	r0, [pc, #436]	; (8004108 <wifiConnectTask+0x2b4>)
 8003f52:	f7fd f911 	bl	8001178 <ESP_StartTCP>
 8003f56:	4603      	mov	r3, r0
 8003f58:	74fb      	strb	r3, [r7, #19]
					network_ssl);
			if (Status == ESP8266_OK) {
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <wifiConnectTask+0x11c>
				// To the next state.
				internalState++;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3301      	adds	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003f66:	2100      	movs	r1, #0
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f7fe fcd3 	bl	8002914 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003f6e:	e0b5      	b.n	80040dc <wifiConnectTask+0x288>
				if (Status == ESP8266_ERROR)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 80b2 	bne.w	80040dc <wifiConnectTask+0x288>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003f78:	2101      	movs	r1, #1
 8003f7a:	2002      	movs	r0, #2
 8003f7c:	f7fe fcca 	bl	8002914 <vLedWrite>
			break;
 8003f80:	e0ac      	b.n	80040dc <wifiConnectTask+0x288>
		case 4:
			// Send the mqtt data.
			Status = mqtt_Connect();
 8003f82:	f7ff fd3d 	bl	8003a00 <mqtt_Connect>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <wifiConnectTask+0x14c>
				internalState++;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003f96:	2100      	movs	r1, #0
 8003f98:	2002      	movs	r0, #2
 8003f9a:	f7fe fcbb 	bl	8002914 <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8003f9e:	e09f      	b.n	80040e0 <wifiConnectTask+0x28c>
				if (Status == ESP8266_ERROR)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	f040 809c 	bne.w	80040e0 <wifiConnectTask+0x28c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2002      	movs	r0, #2
 8003fac:	f7fe fcb2 	bl	8002914 <vLedWrite>
			break;
 8003fb0:	e096      	b.n	80040e0 <wifiConnectTask+0x28c>
		case 5:
			Status = mqtt_SubscriberPacket(dataSub.topic);
 8003fb2:	4856      	ldr	r0, [pc, #344]	; (800410c <wifiConnectTask+0x2b8>)
 8003fb4:	f7ff fe0a 	bl	8003bcc <mqtt_SubscriberPacket>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d176      	bne.n	80040b0 <wifiConnectTask+0x25c>
				internalState++;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2002      	movs	r0, #2
 8003fcc:	f7fe fca2 	bl	8002914 <vLedWrite>
				vLedWrite(LED_2, GPIO_PIN_SET);
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fe fc9e 	bl	8002914 <vLedWrite>


				vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f00e f98f 	bl	8012304 <vTaskDelayUntil>


				xSemaphoreSub = xSemaphoreCreateBinary();
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	2100      	movs	r1, #0
 8003fea:	2001      	movs	r0, #1
 8003fec:	f00d f965 	bl	80112ba <xQueueGenericCreate>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <wifiConnectTask+0x2bc>)
 8003ff4:	601a      	str	r2, [r3, #0]
				//xSemaphorePub = xSemaphoreCreateBinary();

				xQueueDataPub = xQueueCreate(20, sizeof(dataMqtt_t));
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2198      	movs	r1, #152	; 0x98
 8003ffa:	2014      	movs	r0, #20
 8003ffc:	f00d f95d 	bl	80112ba <xQueueGenericCreate>
 8004000:	4602      	mov	r2, r0
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <wifiConnectTask+0x2c0>)
 8004004:	601a      	str	r2, [r3, #0]

				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 8004006:	4b42      	ldr	r3, [pc, #264]	; (8004110 <wifiConnectTask+0x2bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04c      	beq.n	80040a8 <wifiConnectTask+0x254>
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <wifiConnectTask+0x2c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d048      	beq.n	80040a8 <wifiConnectTask+0x254>
					BaseType_t res;
					res = xTaskCreate(subTask, "subscribe", STACK_SIZE, 0,
 8004016:	2300      	movs	r3, #0
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2321      	movs	r3, #33	; 0x21
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004024:	493c      	ldr	r1, [pc, #240]	; (8004118 <wifiConnectTask+0x2c4>)
 8004026:	483d      	ldr	r0, [pc, #244]	; (800411c <wifiConnectTask+0x2c8>)
 8004028:	f00d ffb6 	bl	8011f98 <xTaskCreate>
 800402c:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d002      	beq.n	800403a <wifiConnectTask+0x1e6>
						printf("error creacion de tarea sub\r\n");
 8004034:	483a      	ldr	r0, [pc, #232]	; (8004120 <wifiConnectTask+0x2cc>)
 8004036:	f011 f9cd 	bl	80153d4 <puts>
					}
					res = xTaskCreate(analizeTask, "analize data", STACK_SIZE, 0,
 800403a:	2300      	movs	r3, #0
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2318      	movs	r3, #24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004048:	4936      	ldr	r1, [pc, #216]	; (8004124 <wifiConnectTask+0x2d0>)
 800404a:	4837      	ldr	r0, [pc, #220]	; (8004128 <wifiConnectTask+0x2d4>)
 800404c:	f00d ffa4 	bl	8011f98 <xTaskCreate>
 8004050:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d002      	beq.n	800405e <wifiConnectTask+0x20a>
						printf("error creacion de tarea analize\r\n");
 8004058:	4834      	ldr	r0, [pc, #208]	; (800412c <wifiConnectTask+0x2d8>)
 800405a:	f011 f9bb 	bl	80153d4 <puts>
					}
					res = xTaskCreate(pubTask, "publish", STACK_SIZE, 0,
 800405e:	2300      	movs	r3, #0
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2318      	movs	r3, #24
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	4930      	ldr	r1, [pc, #192]	; (8004130 <wifiConnectTask+0x2dc>)
 800406e:	4831      	ldr	r0, [pc, #196]	; (8004134 <wifiConnectTask+0x2e0>)
 8004070:	f00d ff92 	bl	8011f98 <xTaskCreate>
 8004074:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <wifiConnectTask+0x22e>
						printf("error creacion de tarea pub\r\n");
 800407c:	482e      	ldr	r0, [pc, #184]	; (8004138 <wifiConnectTask+0x2e4>)
 800407e:	f011 f9a9 	bl	80153d4 <puts>
					}
					res = xTaskCreate(buttonsTask, "buttons", STACK_SIZE, 0,
 8004082:	2300      	movs	r3, #0
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2321      	movs	r3, #33	; 0x21
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	492a      	ldr	r1, [pc, #168]	; (800413c <wifiConnectTask+0x2e8>)
 8004092:	482b      	ldr	r0, [pc, #172]	; (8004140 <wifiConnectTask+0x2ec>)
 8004094:	f00d ff80 	bl	8011f98 <xTaskCreate>
 8004098:	60f8      	str	r0, [r7, #12]
									(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00f      	beq.n	80040c0 <wifiConnectTask+0x26c>
						printf("error creacion de tarea buttons\r\n");
 80040a0:	4828      	ldr	r0, [pc, #160]	; (8004144 <wifiConnectTask+0x2f0>)
 80040a2:	f011 f997 	bl	80153d4 <puts>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 80040a6:	e00b      	b.n	80040c0 <wifiConnectTask+0x26c>

					}
					//xSemaphoreGive(xSemaphorePub);
				}
				else{
					printf("error creacion de semaforo\r\n");
 80040a8:	4827      	ldr	r0, [pc, #156]	; (8004148 <wifiConnectTask+0x2f4>)
 80040aa:	f011 f993 	bl	80153d4 <puts>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80040ae:	e019      	b.n	80040e4 <wifiConnectTask+0x290>
				if (Status == ESP8266_ERROR)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d116      	bne.n	80040e4 <wifiConnectTask+0x290>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80040b6:	2101      	movs	r1, #1
 80040b8:	2002      	movs	r0, #2
 80040ba:	f7fe fc2b 	bl	8002914 <vLedWrite>
			break;
 80040be:	e011      	b.n	80040e4 <wifiConnectTask+0x290>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 80040c0:	bf00      	nop
			break;
 80040c2:	e00f      	b.n	80040e4 <wifiConnectTask+0x290>
		case 6:
			vTaskDelete(wifiTask);
 80040c4:	4b21      	ldr	r3, [pc, #132]	; (800414c <wifiConnectTask+0x2f8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f00e f8a9 	bl	8012220 <vTaskDelete>
			break;
 80040ce:	e00a      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040d0:	bf00      	nop
 80040d2:	e008      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040d4:	bf00      	nop
 80040d6:	e006      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <wifiConnectTask+0x292>
			break;
 80040e4:	bf00      	nop
		}

		osDelay(1 / portTICK_PERIOD_MS);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f00c fef6 	bl	8010ed8 <osDelay>
		switch (internalState) {
 80040ec:	e6bf      	b.n	8003e6e <wifiConnectTask+0x1a>
 80040ee:	bf00      	nop
 80040f0:	08017d80 	.word	0x08017d80
 80040f4:	08017da8 	.word	0x08017da8
 80040f8:	08017db8 	.word	0x08017db8
 80040fc:	20000024 	.word	0x20000024
 8004100:	20000026 	.word	0x20000026
 8004104:	20000463 	.word	0x20000463
 8004108:	20000004 	.word	0x20000004
 800410c:	2000eb38 	.word	0x2000eb38
 8004110:	2000ebf8 	.word	0x2000ebf8
 8004114:	2000ebd4 	.word	0x2000ebd4
 8004118:	08017dc4 	.word	0x08017dc4
 800411c:	08004205 	.word	0x08004205
 8004120:	08017dd0 	.word	0x08017dd0
 8004124:	08017df0 	.word	0x08017df0
 8004128:	08004279 	.word	0x08004279
 800412c:	08017e00 	.word	0x08017e00
 8004130:	08017e24 	.word	0x08017e24
 8004134:	080041ad 	.word	0x080041ad
 8004138:	08017e2c 	.word	0x08017e2c
 800413c:	08017e4c 	.word	0x08017e4c
 8004140:	08004331 	.word	0x08004331
 8004144:	08017e54 	.word	0x08017e54
 8004148:	08017d64 	.word	0x08017d64
 800414c:	2000ebd8 	.word	0x2000ebd8

08004150 <ledTask>:
	}
	vTaskDelete(wifiTask);
}

void ledTask(void *argument) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

	TickType_t t = xTaskGetTickCount();
 8004158:	f00e fa90 	bl	801267c <xTaskGetTickCount>
 800415c:	4603      	mov	r3, r0
 800415e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		vLedToggle(LED_1);
 8004160:	2000      	movs	r0, #0
 8004162:	f7fe fc41 	bl	80029e8 <vLedToggle>
		vTaskDelayUntil(&t, pdMS_TO_TICKS(100));
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	4618      	mov	r0, r3
 800416e:	f00e f8c9 	bl	8012304 <vTaskDelayUntil>
		vLedToggle(LED_1);
 8004172:	e7f5      	b.n	8004160 <ledTask+0x10>

08004174 <printConsoleTask>:
	}
}

void printConsoleTask(void *argument){
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
/*	uint8_t dato1 = 'w';
	printf("%c",dato1);
	uint8_t a1 = 'a';
	printf("%c",(char*)a1);*/
	for(;;){
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <printConsoleTask+0x34>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f107 010f 	add.w	r1, r7, #15
 8004184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004188:	4618      	mov	r0, r3
 800418a:	f00d fb43 	bl	8011814 <xQueueReceive>
		taskENTER_CRITICAL();
 800418e:	f00f fbe5 	bl	801395c <vPortEnterCritical>
		printf("%c", dataQueuePrint);
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4618      	mov	r0, r3
 8004198:	f011 f8ac 	bl	80152f4 <putchar>
		taskEXIT_CRITICAL();
 800419c:	f00f fc0c 	bl	80139b8 <vPortExitCritical>
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80041a0:	2001      	movs	r0, #1
 80041a2:	f00e f929 	bl	80123f8 <vTaskDelay>
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 80041a6:	e7e9      	b.n	800417c <printConsoleTask+0x8>
 80041a8:	2000ebd0 	.word	0x2000ebd0

080041ac <pubTask>:
	}
}

void pubTask(void *argument) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b0aa      	sub	sp, #168	; 0xa8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	//uint32_t data = 0;
	//TickType_t t = xTaskGetTickCount();
	dataMqtt_t dataQueuePub;
	//xSemaphoreTake(xSemaphorePub, portMAX_DELAY);
	for (;;) {
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <pubTask+0x50>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f107 010c 	add.w	r1, r7, #12
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c0:	4618      	mov	r0, r3
 80041c2:	f00d fb27 	bl	8011814 <xQueueReceive>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <pubTask+0x54>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f644 6120 	movw	r1, #20000	; 0x4e20
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00d fbfc 	bl	80119cc <xQueueSemaphoreTake>
		Status = mqtt_Publisher(&dataQueuePub);
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fc7b 	bl	8003ad4 <mqtt_Publisher>
 80041de:	4603      	mov	r3, r0
 80041e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		xSemaphoreGive(xSemaphoreMutexUart);
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <pubTask+0x54>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	2300      	movs	r3, #0
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	f00d f8f9 	bl	80113e4 <xQueueGenericSend>
		if (Status == ESP8266_OK) {

		}
		//data++;
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f00e f900 	bl	80123f8 <vTaskDelay>
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 80041f8:	e7dc      	b.n	80041b4 <pubTask+0x8>
 80041fa:	bf00      	nop
 80041fc:	2000ebd4 	.word	0x2000ebd4
 8004200:	2000eb34 	.word	0x2000eb34

08004204 <subTask>:

		//vTaskDelayUntil(&t, pdMS_TO_TICKS(15000));
	}
}

void subTask(void *argument) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;
	//uint32_t RetLength;

	for (;;) {
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 800420c:	4b16      	ldr	r3, [pc, #88]	; (8004268 <subTask+0x64>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004214:	4618      	mov	r0, r3
 8004216:	f00d fbd9 	bl	80119cc <xQueueSemaphoreTake>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <subTask+0x68>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004222:	4618      	mov	r0, r3
 8004224:	f00d fbd2 	bl	80119cc <xQueueSemaphoreTake>
		Status = mqtt_SubscriberReceive(&dataSub); //dataSub.topic, dataSub.data, &dataSub.length);
 8004228:	4811      	ldr	r0, [pc, #68]	; (8004270 <subTask+0x6c>)
 800422a:	f7ff fd2e 	bl	8003c8a <mqtt_SubscriberReceive>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xSemaphoreMutexUart);
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <subTask+0x68>)
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	f00d f8d2 	bl	80113e4 <xQueueGenericSend>

		if (Status == ESP8266_OK) {
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <subTask+0x5a>
			if (dataSub.length != 0)
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <subTask+0x6c>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <subTask+0x5a>
				xQueueSend(xQueueDataRx, &dataSub, 100);
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <subTask+0x70>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	2264      	movs	r2, #100	; 0x64
 8004258:	4905      	ldr	r1, [pc, #20]	; (8004270 <subTask+0x6c>)
 800425a:	f00d f8c3 	bl	80113e4 <xQueueGenericSend>
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 800425e:	2001      	movs	r0, #1
 8004260:	f00e f8ca 	bl	80123f8 <vTaskDelay>
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8004264:	e7d2      	b.n	800420c <subTask+0x8>
 8004266:	bf00      	nop
 8004268:	2000ebf8 	.word	0x2000ebf8
 800426c:	2000eb34 	.word	0x2000eb34
 8004270:	2000eb38 	.word	0x2000eb38
 8004274:	2000eafc 	.word	0x2000eafc

08004278 <analizeTask>:
	}
}

void analizeTask(void *argument) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b0a8      	sub	sp, #160	; 0xa0
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	dataMqtt_t dataQueueRx;
	for (;;) {
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <analizeTask+0xa4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f107 0108 	add.w	r1, r7, #8
 8004288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428c:	4618      	mov	r0, r3
 800428e:	f00d fac1 	bl	8011814 <xQueueReceive>
		//findIntData(&dataQueueRx);
		remove0(&dataQueueRx);
 8004292:	f107 0308 	add.w	r3, r7, #8
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f90e 	bl	80044b8 <remove0>
		if(strstr((char*)dataQueueRx.data, (char*)topic_sub2)!= NULL){
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	3314      	adds	r3, #20
 80042a2:	491f      	ldr	r1, [pc, #124]	; (8004320 <analizeTask+0xa8>)
 80042a4:	4618      	mov	r0, r3
 80042a6:	f011 f8d5 	bl	8015454 <strstr>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d023      	beq.n	80042f8 <analizeTask+0x80>
			if(strstr((char*)dataQueueRx.data, (char*)TRUE_STR)!= NULL){
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	3314      	adds	r3, #20
 80042b6:	491b      	ldr	r1, [pc, #108]	; (8004324 <analizeTask+0xac>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f011 f8cb 	bl	8015454 <strstr>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <analizeTask+0x5c>
				vLedWrite(LED_7, GPIO_PIN_SET);
 80042c4:	2101      	movs	r1, #1
 80042c6:	2006      	movs	r0, #6
 80042c8:	f7fe fb24 	bl	8002914 <vLedWrite>
				vLedWrite(LED_6, GPIO_PIN_SET);
 80042cc:	2101      	movs	r1, #1
 80042ce:	2005      	movs	r0, #5
 80042d0:	f7fe fb20 	bl	8002914 <vLedWrite>
			}
			if(strstr((char*)dataQueueRx.data, (char*)FALSE_STR)!= NULL){
 80042d4:	f107 0308 	add.w	r3, r7, #8
 80042d8:	3314      	adds	r3, #20
 80042da:	4913      	ldr	r1, [pc, #76]	; (8004328 <analizeTask+0xb0>)
 80042dc:	4618      	mov	r0, r3
 80042de:	f011 f8b9 	bl	8015454 <strstr>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <analizeTask+0x80>
				vLedWrite(LED_7, GPIO_PIN_RESET);
 80042e8:	2100      	movs	r1, #0
 80042ea:	2006      	movs	r0, #6
 80042ec:	f7fe fb12 	bl	8002914 <vLedWrite>
				vLedWrite(LED_6, GPIO_PIN_RESET);
 80042f0:	2100      	movs	r1, #0
 80042f2:	2005      	movs	r0, #5
 80042f4:	f7fe fb0e 	bl	8002914 <vLedWrite>
			}
		}
		if(strstr((char*)dataQueueRx.data, (char*)topic_sub1)!= NULL){
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	3314      	adds	r3, #20
 80042fe:	490b      	ldr	r1, [pc, #44]	; (800432c <analizeTask+0xb4>)
 8004300:	4618      	mov	r0, r3
 8004302:	f011 f8a7 	bl	8015454 <strstr>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <analizeTask+0x9a>
			vLedToggle(LED_2);
 800430c:	2001      	movs	r0, #1
 800430e:	f7fe fb6b 	bl	80029e8 <vLedToggle>

		}

		vTaskDelay(1 / portTICK_PERIOD_MS);
 8004312:	2001      	movs	r0, #1
 8004314:	f00e f870 	bl	80123f8 <vTaskDelay>
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8004318:	e7b2      	b.n	8004280 <analizeTask+0x8>
 800431a:	bf00      	nop
 800431c:	2000eafc 	.word	0x2000eafc
 8004320:	20000040 	.word	0x20000040
 8004324:	08017f24 	.word	0x08017f24
 8004328:	08017f2c 	.word	0x08017f2c
 800432c:	20000028 	.word	0x20000028

08004330 <buttonsTask>:
	}
}

void buttonsTask(void *argument){
 8004330:	b580      	push	{r7, lr}
 8004332:	b0aa      	sub	sp, #168	; 0xa8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]


	uint32_t cont_aux = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint32_t cont = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	dataMqtt_t data_st;
	//bool flag = false;
	fsmButtonInit(&button_down);
 8004344:	4854      	ldr	r0, [pc, #336]	; (8004498 <buttonsTask+0x168>)
 8004346:	f7fe fa34 	bl	80027b2 <fsmButtonInit>
	for (;;) {
		//update FSM button
		fsmButtonUpdate(&button_down);
 800434a:	4853      	ldr	r0, [pc, #332]	; (8004498 <buttonsTask+0x168>)
 800434c:	f7fe fa58 	bl	8002800 <fsmButtonUpdate>

		if(button_down.released){
 8004350:	4b51      	ldr	r3, [pc, #324]	; (8004498 <buttonsTask+0x168>)
 8004352:	7ddb      	ldrb	r3, [r3, #23]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d04c      	beq.n	80043f2 <buttonsTask+0xc2>
			//flag = !flag;
			if(vLedRead(LED_6) == GPIO_PIN_RESET){
 8004358:	2005      	movs	r0, #5
 800435a:	f7fe fb9d 	bl	8002a98 <vLedRead>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11a      	bne.n	800439a <buttonsTask+0x6a>
				memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	3314      	adds	r3, #20
 800436a:	4618      	mov	r0, r3
 800436c:	f7fb ff40 	bl	80001f0 <strlen>
 8004370:	4602      	mov	r2, r0
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	3314      	adds	r3, #20
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f010 fc41 	bl	8014c02 <memset>
				strcpy((char*)data_st.data, (char*)TRUE_STR);
 8004380:	4a46      	ldr	r2, [pc, #280]	; (800449c <buttonsTask+0x16c>)
 8004382:	f107 031c 	add.w	r3, r7, #28
 8004386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800438a:	6018      	str	r0, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	7019      	strb	r1, [r3, #0]
				vLedWrite(LED_6, GPIO_PIN_SET);
 8004390:	2101      	movs	r1, #1
 8004392:	2005      	movs	r0, #5
 8004394:	f7fe fabe 	bl	8002914 <vLedWrite>
 8004398:	e019      	b.n	80043ce <buttonsTask+0x9e>
			}
			else{
				memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	3314      	adds	r3, #20
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fb ff25 	bl	80001f0 <strlen>
 80043a6:	4602      	mov	r2, r0
 80043a8:	f107 0308 	add.w	r3, r7, #8
 80043ac:	3314      	adds	r3, #20
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f010 fc26 	bl	8014c02 <memset>
				strcpy((char*)data_st.data, (char*)FALSE_STR);
 80043b6:	4a3a      	ldr	r2, [pc, #232]	; (80044a0 <buttonsTask+0x170>)
 80043b8:	f107 031c 	add.w	r3, r7, #28
 80043bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043c0:	6018      	str	r0, [r3, #0]
 80043c2:	3304      	adds	r3, #4
 80043c4:	8019      	strh	r1, [r3, #0]
				vLedWrite(LED_6, GPIO_PIN_RESET);
 80043c6:	2100      	movs	r1, #0
 80043c8:	2005      	movs	r0, #5
 80043ca:	f7fe faa3 	bl	8002914 <vLedWrite>
			}
			cont = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			strcpy((char*)data_st.topic, topic_pub2);
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4932      	ldr	r1, [pc, #200]	; (80044a4 <buttonsTask+0x174>)
 80043da:	4618      	mov	r0, r3
 80043dc:	f011 f832 	bl	8015444 <strcpy>
			//data_st.length = 4;
			//intToStr(data_pub, data_st.data, data_st.length);
			xQueueSend(xQueueDataPub, &data_st, 1000);
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <buttonsTask+0x178>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f107 0108 	add.w	r1, r7, #8
 80043e8:	2300      	movs	r3, #0
 80043ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ee:	f00c fff9 	bl	80113e4 <xQueueGenericSend>
		}
		if(cont > 10000){
 80043f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d942      	bls.n	8004484 <buttonsTask+0x154>
			BMP280_calc_values(&dev);
 80043fe:	482b      	ldr	r0, [pc, #172]	; (80044ac <buttonsTask+0x17c>)
 8004400:	f7fd fd96 	bl	8001f30 <BMP280_calc_values>
			cont = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			cont_aux++;
 800440a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800440e:	3301      	adds	r3, #1
 8004410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			strcpy(data_st.topic, topic_pub1);
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	4925      	ldr	r1, [pc, #148]	; (80044b0 <buttonsTask+0x180>)
 800441a:	4618      	mov	r0, r3
 800441c:	f011 f812 	bl	8015444 <strcpy>
			memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	3314      	adds	r3, #20
 8004426:	4618      	mov	r0, r3
 8004428:	f7fb fee2 	bl	80001f0 <strlen>
 800442c:	4602      	mov	r2, r0
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	3314      	adds	r3, #20
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f010 fbe3 	bl	8014c02 <memset>
			ftoa(dev.data.temperature, data_st.data,2);
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <buttonsTask+0x17c>)
 800443e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	3314      	adds	r3, #20
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	eeb0 0a67 	vmov.f32	s0, s15
 8004450:	f7fe f8b2 	bl	80025b8 <ftoa>
			strcat((char*) data_st.data, "ºC");
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	3314      	adds	r3, #20
 800445a:	4618      	mov	r0, r3
 800445c:	f7fb fec8 	bl	80001f0 <strlen>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	3314      	adds	r3, #20
 800446a:	4413      	add	r3, r2
 800446c:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <buttonsTask+0x184>)
 800446e:	6810      	ldr	r0, [r2, #0]
 8004470:	6018      	str	r0, [r3, #0]
			//data_st.length = sprintf((char*)data_st.data, "%f%c%c", dev.data.temperature, 'º', 'C');
			//data_st.data = dev.data.temperature;
			xQueueSend(xQueueDataPub, &data_st, 1000);
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <buttonsTask+0x178>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f107 0108 	add.w	r1, r7, #8
 800447a:	2300      	movs	r3, #0
 800447c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004480:	f00c ffb0 	bl	80113e4 <xQueueGenericSend>
		}
		cont++;
 8004484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004488:	3301      	adds	r3, #1
 800448a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		vTaskDelay(1 / portTICK_PERIOD_MS);
 800448e:	2001      	movs	r0, #1
 8004490:	f00d ffb2 	bl	80123f8 <vTaskDelay>
		fsmButtonUpdate(&button_down);
 8004494:	e759      	b.n	800434a <buttonsTask+0x1a>
 8004496:	bf00      	nop
 8004498:	2000ebe0 	.word	0x2000ebe0
 800449c:	08017f24 	.word	0x08017f24
 80044a0:	08017f2c 	.word	0x08017f2c
 80044a4:	2000004c 	.word	0x2000004c
 80044a8:	2000ebd4 	.word	0x2000ebd4
 80044ac:	2000eb00 	.word	0x2000eb00
 80044b0:	20000034 	.word	0x20000034
 80044b4:	08017e78 	.word	0x08017e78

080044b8 <remove0>:

	}
}


static void remove0(dataMqtt_t *data){
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	466b      	mov	r3, sp
 80044c2:	461d      	mov	r5, r3
	uint8_t newdata[data->length];
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80044ca:	4603      	mov	r3, r0
 80044cc:	3b01      	subs	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	4601      	mov	r1, r0
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	00d4      	lsls	r4, r2, #3
 80044e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80044e4:	00cb      	lsls	r3, r1, #3
 80044e6:	4601      	mov	r1, r0
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	f04f 0400 	mov.w	r4, #0
 80044f4:	00d4      	lsls	r4, r2, #3
 80044f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	1dc3      	adds	r3, r0, #7
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	ebad 0d03 	sub.w	sp, sp, r3
 8004506:	466b      	mov	r3, sp
 8004508:	3300      	adds	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]
	int i;
	int j = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
	memset((char*) newdata, '\0', data->length);
 8004510:	68b8      	ldr	r0, [r7, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004518:	461a      	mov	r2, r3
 800451a:	2100      	movs	r1, #0
 800451c:	f010 fb71 	bl	8014c02 <memset>
	for (i = 0; i < data->length; i++) {
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e015      	b.n	8004552 <remove0+0x9a>
		if (*(data->data + i) != '\0') {
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f103 0214 	add.w	r2, r3, #20
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <remove0+0x94>
			newdata[j++] = *(data->data + i);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f103 0214 	add.w	r2, r3, #20
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	441a      	add	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1c59      	adds	r1, r3, #1
 8004544:	6179      	str	r1, [r7, #20]
 8004546:	7811      	ldrb	r1, [r2, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < data->length; i++) {
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3301      	adds	r3, #1
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	429a      	cmp	r2, r3
 800455c:	d8e3      	bhi.n	8004526 <remove0+0x6e>
		}
	}
	//memcpy((char*)data->data, (char*)newdata, strlen(char*)newdata);
	strcpy((char*)data->data, (char*)newdata);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3314      	adds	r3, #20
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f010 ff6c 	bl	8015444 <strcpy>
 800456c:	46ad      	mov	sp, r5
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_MspInit+0x4c>)
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_MspInit+0x4c>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6613      	str	r3, [r2, #96]	; 0x60
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_MspInit+0x4c>)
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_MspInit+0x4c>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <HAL_MspInit+0x4c>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_MspInit+0x4c>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045ae:	2200      	movs	r2, #0
 80045b0:	210f      	movs	r1, #15
 80045b2:	f06f 0001 	mvn.w	r0, #1
 80045b6:	f001 ffa5 	bl	8006504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 031c 	add.w	r3, r7, #28
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a33      	ldr	r2, [pc, #204]	; (80046b4 <HAL_ADC_MspInit+0xec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d12d      	bne.n	8004646 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80045ea:	4b33      	ldr	r3, [pc, #204]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	4a31      	ldr	r2, [pc, #196]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 80045f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10b      	bne.n	8004614 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80045fc:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004600:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 800462c:	2318      	movs	r3, #24
 800462e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004630:	230b      	movs	r3, #11
 8004632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004638:	f107 031c 	add.w	r3, r7, #28
 800463c:	4619      	mov	r1, r3
 800463e:	4820      	ldr	r0, [pc, #128]	; (80046c0 <HAL_ADC_MspInit+0xf8>)
 8004640:	f002 f860 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004644:	e032      	b.n	80046ac <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <HAL_ADC_MspInit+0xfc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d12d      	bne.n	80046ac <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 8004658:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <HAL_ADC_MspInit+0xf0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10b      	bne.n	800467a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800466c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800466e:	4b13      	ldr	r3, [pc, #76]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004680:	f043 0320 	orr.w	r3, r3, #32
 8004684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_ADC_MspInit+0xf4>)
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004698:	230b      	movs	r3, #11
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80046a0:	f107 031c 	add.w	r3, r7, #28
 80046a4:	4619      	mov	r1, r3
 80046a6:	4808      	ldr	r0, [pc, #32]	; (80046c8 <HAL_ADC_MspInit+0x100>)
 80046a8:	f002 f82c 	bl	8006704 <HAL_GPIO_Init>
}
 80046ac:	bf00      	nop
 80046ae:	3730      	adds	r7, #48	; 0x30
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	50040000 	.word	0x50040000
 80046b8:	20000464 	.word	0x20000464
 80046bc:	40021000 	.word	0x40021000
 80046c0:	48000800 	.word	0x48000800
 80046c4:	50040200 	.word	0x50040200
 80046c8:	48001400 	.word	0x48001400

080046cc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 031c 	add.w	r3, r7, #28
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <HAL_DCMI_MspInit+0xec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d160      	bne.n	80047b0 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80046ee:	4b33      	ldr	r3, [pc, #204]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	4a32      	ldr	r2, [pc, #200]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 80046f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046fa:	4b30      	ldr	r3, [pc, #192]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004712:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004736:	4b21      	ldr	r3, [pc, #132]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473a:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 800473c:	f043 0310 	orr.w	r3, r3, #16
 8004740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004742:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <HAL_DCMI_MspInit+0xf0>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 800474e:	f645 7320 	movw	r3, #24352	; 0x5f20
 8004752:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475c:	2300      	movs	r3, #0
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004760:	230a      	movs	r3, #10
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	4619      	mov	r1, r3
 800476a:	4815      	ldr	r0, [pc, #84]	; (80047c0 <HAL_DCMI_MspInit+0xf4>)
 800476c:	f001 ffca 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8004770:	23b0      	movs	r3, #176	; 0xb0
 8004772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477c:	2300      	movs	r3, #0
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004780:	230a      	movs	r3, #10
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	4619      	mov	r1, r3
 800478a:	480e      	ldr	r0, [pc, #56]	; (80047c4 <HAL_DCMI_MspInit+0xf8>)
 800478c:	f001 ffba 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8004790:	2320      	movs	r3, #32
 8004792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80047a0:	230a      	movs	r3, #10
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80047a4:	f107 031c 	add.w	r3, r7, #28
 80047a8:	4619      	mov	r1, r3
 80047aa:	4807      	ldr	r0, [pc, #28]	; (80047c8 <HAL_DCMI_MspInit+0xfc>)
 80047ac:	f001 ffaa 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80047b0:	bf00      	nop
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	50050000 	.word	0x50050000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	48001c00 	.word	0x48001c00
 80047c4:	48002000 	.word	0x48002000
 80047c8:	48001000 	.word	0x48001000

080047cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	; 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d4:	f107 031c 	add.w	r3, r7, #28
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3d      	ldr	r2, [pc, #244]	; (80048e0 <HAL_I2C_MspInit+0x114>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d129      	bne.n	8004842 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047fa:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8004806:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800480a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800480c:	2312      	movs	r3, #18
 800480e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004818:	2304      	movs	r3, #4
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481c:	f107 031c 	add.w	r3, r7, #28
 8004820:	4619      	mov	r1, r3
 8004822:	4831      	ldr	r0, [pc, #196]	; (80048e8 <HAL_I2C_MspInit+0x11c>)
 8004824:	f001 ff6e 	bl	8006704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004828:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	4a2d      	ldr	r2, [pc, #180]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 800482e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004832:	6593      	str	r3, [r2, #88]	; 0x58
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004840:	e049      	b.n	80048d6 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a29      	ldr	r2, [pc, #164]	; (80048ec <HAL_I2C_MspInit+0x120>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d144      	bne.n	80048d6 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004864:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 8004866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004868:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 800486a:	f043 0302 	orr.w	r3, r3, #2
 800486e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800487c:	2310      	movs	r3, #16
 800487e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004880:	2312      	movs	r3, #18
 8004882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004884:	2301      	movs	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004888:	2303      	movs	r3, #3
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800488c:	2304      	movs	r3, #4
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8004890:	f107 031c 	add.w	r3, r7, #28
 8004894:	4619      	mov	r1, r3
 8004896:	4816      	ldr	r0, [pc, #88]	; (80048f0 <HAL_I2C_MspInit+0x124>)
 8004898:	f001 ff34 	bl	8006704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800489c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a2:	2312      	movs	r3, #18
 80048a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a6:	2301      	movs	r3, #1
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048aa:	2303      	movs	r3, #3
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80048ae:	2304      	movs	r3, #4
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 80048b2:	f107 031c 	add.w	r3, r7, #28
 80048b6:	4619      	mov	r1, r3
 80048b8:	480b      	ldr	r0, [pc, #44]	; (80048e8 <HAL_I2C_MspInit+0x11c>)
 80048ba:	f001 ff23 	bl	8006704 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80048c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048c8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_I2C_MspInit+0x118>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
}
 80048d6:	bf00      	nop
 80048d8:	3730      	adds	r7, #48	; 0x30
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40005400 	.word	0x40005400
 80048e4:	40021000 	.word	0x40021000
 80048e8:	48000400 	.word	0x48000400
 80048ec:	40005800 	.word	0x40005800
 80048f0:	48001c00 	.word	0x48001c00

080048f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b090      	sub	sp, #64	; 0x40
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a68      	ldr	r2, [pc, #416]	; (8004ab4 <HAL_UART_MspInit+0x1c0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d12b      	bne.n	800496e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004916:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	4a67      	ldr	r2, [pc, #412]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800492e:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	4a61      	ldr	r2, [pc, #388]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493a:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8004946:	f004 f8c5 	bl	8008ad4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800494a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004954:	2300      	movs	r3, #0
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800495c:	2308      	movs	r3, #8
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004964:	4619      	mov	r1, r3
 8004966:	4855      	ldr	r0, [pc, #340]	; (8004abc <HAL_UART_MspInit+0x1c8>)
 8004968:	f001 fecc 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800496c:	e09e      	b.n	8004aac <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a53      	ldr	r2, [pc, #332]	; (8004ac0 <HAL_UART_MspInit+0x1cc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d14f      	bne.n	8004a18 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	4a4e      	ldr	r2, [pc, #312]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 800497e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004982:	6613      	str	r3, [r2, #96]	; 0x60
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	623b      	str	r3, [r7, #32]
 800498e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004990:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	4a48      	ldr	r2, [pc, #288]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499c:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 800499e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80049a8:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	4a42      	ldr	r2, [pc, #264]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b4:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80049c0:	f004 f888 	bl	8008ad4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80049c4:	2340      	movs	r3, #64	; 0x40
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c8:	2302      	movs	r3, #2
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049d4:	2307      	movs	r3, #7
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80049d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049dc:	4619      	mov	r1, r3
 80049de:	4839      	ldr	r0, [pc, #228]	; (8004ac4 <HAL_UART_MspInit+0x1d0>)
 80049e0:	f001 fe90 	bl	8006704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80049e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f2:	2303      	movs	r3, #3
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049f6:	2307      	movs	r3, #7
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049fe:	4619      	mov	r1, r3
 8004a00:	482e      	ldr	r0, [pc, #184]	; (8004abc <HAL_UART_MspInit+0x1c8>)
 8004a02:	f001 fe7f 	bl	8006704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a06:	2200      	movs	r2, #0
 8004a08:	2105      	movs	r1, #5
 8004a0a:	2025      	movs	r0, #37	; 0x25
 8004a0c:	f001 fd7a 	bl	8006504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a10:	2025      	movs	r0, #37	; 0x25
 8004a12:	f001 fd93 	bl	800653c <HAL_NVIC_EnableIRQ>
}
 8004a16:	e049      	b.n	8004aac <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <HAL_UART_MspInit+0x1d4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d144      	bne.n	8004aac <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a22:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a52:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <HAL_UART_MspInit+0x1c4>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8004a6a:	2340      	movs	r3, #64	; 0x40
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a76:	2303      	movs	r3, #3
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a7a:	2307      	movs	r3, #7
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a82:	4619      	mov	r1, r3
 8004a84:	4811      	ldr	r0, [pc, #68]	; (8004acc <HAL_UART_MspInit+0x1d8>)
 8004a86:	f001 fe3d 	bl	8006704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aa8:	f001 fe2c 	bl	8006704 <HAL_GPIO_Init>
}
 8004aac:	bf00      	nop
 8004aae:	3740      	adds	r7, #64	; 0x40
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40008000 	.word	0x40008000
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	48001800 	.word	0x48001800
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	48000400 	.word	0x48000400
 8004ac8:	40004400 	.word	0x40004400
 8004acc:	48000c00 	.word	0x48000c00

08004ad0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_UART_MspDeInit+0x8c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10b      	bne.n	8004afa <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	65d3      	str	r3, [r2, #92]	; 0x5c
  
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOG, ARD_D0_Pin|ARD_D1_Pin);
 8004aee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004af2:	481c      	ldr	r0, [pc, #112]	; (8004b64 <HAL_UART_MspDeInit+0x94>)
 8004af4:	f001 ff98 	bl	8006a28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004af8:	e02b      	b.n	8004b52 <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_UART_MspDeInit+0x98>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d112      	bne.n	8004b2a <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0e:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(USART1_TX_GPIO_Port, USART1_TX_Pin);
 8004b10:	2140      	movs	r1, #64	; 0x40
 8004b12:	4816      	ldr	r0, [pc, #88]	; (8004b6c <HAL_UART_MspDeInit+0x9c>)
 8004b14:	f001 ff88 	bl	8006a28 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin);
 8004b18:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004b1c:	4811      	ldr	r0, [pc, #68]	; (8004b64 <HAL_UART_MspDeInit+0x94>)
 8004b1e:	f001 ff83 	bl	8006a28 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004b22:	2025      	movs	r0, #37	; 0x25
 8004b24:	f001 fd18 	bl	8006558 <HAL_NVIC_DisableIRQ>
}
 8004b28:	e013      	b.n	8004b52 <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_UART_MspDeInit+0xa0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10e      	bne.n	8004b52 <HAL_UART_MspDeInit+0x82>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <HAL_UART_MspDeInit+0x90>)
 8004b3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b3e:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(USART2_RX_GPIO_Port, USART2_RX_Pin);
 8004b40:	2140      	movs	r1, #64	; 0x40
 8004b42:	480c      	ldr	r0, [pc, #48]	; (8004b74 <HAL_UART_MspDeInit+0xa4>)
 8004b44:	f001 ff70 	bl	8006a28 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(USART2_TX_GPIO_Port, USART2_TX_Pin);
 8004b48:	2104      	movs	r1, #4
 8004b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b4e:	f001 ff6b 	bl	8006a28 <HAL_GPIO_DeInit>
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40008000 	.word	0x40008000
 8004b60:	40021000 	.word	0x40021000
 8004b64:	48001800 	.word	0x48001800
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	48000400 	.word	0x48000400
 8004b70:	40004400 	.word	0x40004400
 8004b74:	48000c00 	.word	0x48000c00

08004b78 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a26      	ldr	r2, [pc, #152]	; (8004c30 <HAL_QSPI_MspInit+0xb8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d145      	bne.n	8004c26 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	4a25      	ldr	r2, [pc, #148]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	6513      	str	r3, [r2, #80]	; 0x50
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_QSPI_MspInit+0xbc>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8004be2:	f640 0303 	movw	r3, #2051	; 0x803
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	480e      	ldr	r0, [pc, #56]	; (8004c38 <HAL_QSPI_MspInit+0xc0>)
 8004c00:	f001 fd80 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8004c04:	23c8      	movs	r3, #200	; 0xc8
 8004c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c10:	2303      	movs	r3, #3
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004c14:	230a      	movs	r3, #10
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c22:	f001 fd6f 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004c26:	bf00      	nop
 8004c28:	3728      	adds	r7, #40	; 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	a0001000 	.word	0xa0001000
 8004c34:	40021000 	.word	0x40021000
 8004c38:	48000400 	.word	0x48000400

08004c3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a25      	ldr	r2, [pc, #148]	; (8004cf0 <HAL_SD_MspInit+0xb4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d144      	bne.n	8004ce8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004c5e:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c68:	6613      	str	r3, [r2, #96]	; 0x60
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c76:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c9a:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <HAL_SD_MspInit+0xb8>)
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004cba:	f107 0314 	add.w	r3, r7, #20
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <HAL_SD_MspInit+0xbc>)
 8004cc2:	f001 fd1f 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8004cc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004cca:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004cd8:	230c      	movs	r3, #12
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4806      	ldr	r0, [pc, #24]	; (8004cfc <HAL_SD_MspInit+0xc0>)
 8004ce4:	f001 fd0e 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004ce8:	bf00      	nop
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40012800 	.word	0x40012800
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	48000c00 	.word	0x48000c00
 8004cfc:	48000800 	.word	0x48000800

08004d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <HAL_SPI_MspInit+0xb4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d144      	bne.n	8004dac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d52:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d56:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_SPI_MspInit+0xb8>)
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8004d6a:	2306      	movs	r3, #6
 8004d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d76:	2303      	movs	r3, #3
 8004d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	4619      	mov	r1, r3
 8004d84:	480d      	ldr	r0, [pc, #52]	; (8004dbc <HAL_SPI_MspInit+0xbc>)
 8004d86:	f001 fcbd 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2302      	movs	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d9c:	2305      	movs	r3, #5
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <HAL_SPI_MspInit+0xc0>)
 8004da8:	f001 fcac 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004dac:	bf00      	nop
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40003800 	.word	0x40003800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	48002000 	.word	0x48002000
 8004dc0:	48000400 	.word	0x48000400

08004dc4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <HAL_FMC_MspInit+0xc4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d14f      	bne.n	8004e80 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8004de0:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <HAL_FMC_MspInit+0xc4>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_FMC_MspInit+0xc8>)
 8004de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_FMC_MspInit+0xc8>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6513      	str	r3, [r2, #80]	; 0x50
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <HAL_FMC_MspInit+0xc8>)
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8004dfe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004e02:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	2302      	movs	r3, #2
 8004e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e10:	230c      	movs	r3, #12
 8004e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	481d      	ldr	r0, [pc, #116]	; (8004e90 <HAL_FMC_MspInit+0xcc>)
 8004e1a:	f001 fc73 	bl	8006704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8004e1e:	f240 233f 	movw	r3, #575	; 0x23f
 8004e22:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e24:	2302      	movs	r3, #2
 8004e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e30:	230c      	movs	r3, #12
 8004e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4816      	ldr	r0, [pc, #88]	; (8004e94 <HAL_FMC_MspInit+0xd0>)
 8004e3a:	f001 fc63 	bl	8006704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8004e3e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8004e42:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e50:	230c      	movs	r3, #12
 8004e52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	480f      	ldr	r0, [pc, #60]	; (8004e98 <HAL_FMC_MspInit+0xd4>)
 8004e5a:	f001 fc53 	bl	8006704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8004e5e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8004e62:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e64:	2302      	movs	r3, #2
 8004e66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004e70:	230c      	movs	r3, #12
 8004e72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4808      	ldr	r0, [pc, #32]	; (8004e9c <HAL_FMC_MspInit+0xd8>)
 8004e7a:	f001 fc43 	bl	8006704 <HAL_GPIO_Init>
 8004e7e:	e000      	b.n	8004e82 <HAL_FMC_MspInit+0xbe>
    return;
 8004e80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000468 	.word	0x20000468
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	48001000 	.word	0x48001000
 8004e94:	48001800 	.word	0x48001800
 8004e98:	48000c00 	.word	0x48000c00
 8004e9c:	48001400 	.word	0x48001400

08004ea0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004ea8:	f7ff ff8c 	bl	8004dc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a33      	ldr	r2, [pc, #204]	; (8004f90 <HAL_SAI_MspInit+0xdc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d135      	bne.n	8004f32 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8004ec6:	4b33      	ldr	r3, [pc, #204]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed2:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004eee:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8004ef0:	2354      	movs	r3, #84	; 0x54
 8004ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004f00:	230d      	movs	r3, #13
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4824      	ldr	r0, [pc, #144]	; (8004f9c <HAL_SAI_MspInit+0xe8>)
 8004f0c:	f001 fbfa 	bl	8006704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004f22:	230d      	movs	r3, #13
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	481c      	ldr	r0, [pc, #112]	; (8004fa0 <HAL_SAI_MspInit+0xec>)
 8004f2e:	f001 fbe9 	bl	8006704 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_SAI_MspInit+0xf0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d124      	bne.n	8004f86 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f4e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f50:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_SAI_MspInit+0xe4>)
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <HAL_SAI_MspInit+0xe0>)
 8004f64:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8004f66:	2308      	movs	r3, #8
 8004f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8004f76:	230d      	movs	r3, #13
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4806      	ldr	r0, [pc, #24]	; (8004f9c <HAL_SAI_MspInit+0xe8>)
 8004f82:	f001 fbbf 	bl	8006704 <HAL_GPIO_Init>

    }
}
 8004f86:	bf00      	nop
 8004f88:	3728      	adds	r7, #40	; 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40015404 	.word	0x40015404
 8004f94:	2000046c 	.word	0x2000046c
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	48001000 	.word	0x48001000
 8004fa0:	48000400 	.word	0x48000400
 8004fa4:	40015424 	.word	0x40015424

08004fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8004fb8:	2200      	movs	r2, #0
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	2036      	movs	r0, #54	; 0x36
 8004fbe:	f001 faa1 	bl	8006504 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8004fc2:	2036      	movs	r0, #54	; 0x36
 8004fc4:	f001 faba 	bl	800653c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <HAL_InitTick+0x9c>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_InitTick+0x9c>)
 8004fce:	f043 0310 	orr.w	r3, r3, #16
 8004fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_InitTick+0x9c>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fe0:	f107 0210 	add.w	r2, r7, #16
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fc1a 	bl	8009824 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f004 fbec 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 8004ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	4a13      	ldr	r2, [pc, #76]	; (8005048 <HAL_InitTick+0xa0>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	0c9b      	lsrs	r3, r3, #18
 8005000:	3b01      	subs	r3, #1
 8005002:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005004:	4b11      	ldr	r3, [pc, #68]	; (800504c <HAL_InitTick+0xa4>)
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <HAL_InitTick+0xa8>)
 8005008:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_InitTick+0xa4>)
 800500c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005010:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005012:	4a0e      	ldr	r2, [pc, #56]	; (800504c <HAL_InitTick+0xa4>)
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <HAL_InitTick+0xa4>)
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_InitTick+0xa4>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005024:	4809      	ldr	r0, [pc, #36]	; (800504c <HAL_InitTick+0xa4>)
 8005026:	f006 ff53 	bl	800bed0 <HAL_TIM_Base_Init>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005030:	4806      	ldr	r0, [pc, #24]	; (800504c <HAL_InitTick+0xa4>)
 8005032:	f006 ff83 	bl	800bf3c <HAL_TIM_Base_Start_IT>
 8005036:	4603      	mov	r3, r0
 8005038:	e000      	b.n	800503c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	3730      	adds	r7, #48	; 0x30
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	431bde83 	.word	0x431bde83
 800504c:	2000ebfc 	.word	0x2000ebfc
 8005050:	40001000 	.word	0x40001000

08005054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	vLedWrite(LED_5, GPIO_PIN_SET);
 8005066:	2101      	movs	r1, #1
 8005068:	2004      	movs	r0, #4
 800506a:	f7fd fc53 	bl	8002914 <vLedWrite>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800506e:	e7fe      	b.n	800506e <HardFault_Handler+0xc>

08005070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005074:	e7fe      	b.n	8005074 <MemManage_Handler+0x4>

08005076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800507a:	e7fe      	b.n	800507a <BusFault_Handler+0x4>

0800507c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005080:	e7fe      	b.n	8005080 <UsageFault_Handler+0x4>

08005082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <USART1_IRQHandler+0x10>)
 8005096:	f007 fafd 	bl	800c694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2000e8dc 	.word	0x2000e8dc

080050a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <TIM6_DAC_IRQHandler+0x10>)
 80050aa:	f006 ff71 	bl	800bf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000ebfc 	.word	0x2000ebfc

080050b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <OTG_FS_IRQHandler+0x10>)
 80050be:	f002 fd39 	bl	8007b34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20010144 	.word	0x20010144

080050cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
	return 1;
 80050d0:	2301      	movs	r3, #1
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <_kill>:

int _kill(int pid, int sig)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050e6:	f00f fd45 	bl	8014b74 <__errno>
 80050ea:	4602      	mov	r2, r0
 80050ec:	2316      	movs	r3, #22
 80050ee:	6013      	str	r3, [r2, #0]
	return -1;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_exit>:

void _exit (int status)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ffe7 	bl	80050dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800510e:	e7fe      	b.n	800510e <_exit+0x12>

08005110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e00a      	b.n	8005138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005122:	f3af 8000 	nop.w
 8005126:	4601      	mov	r1, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	60ba      	str	r2, [r7, #8]
 800512e:	b2ca      	uxtb	r2, r1
 8005130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3301      	adds	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	dbf0      	blt.n	8005122 <_read+0x12>
	}

return len;
 8005140:	687b      	ldr	r3, [r7, #4]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <_close>:
	}
	return len;
}

int _close(int file)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
	return -1;
 8005152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005172:	605a      	str	r2, [r3, #4]
	return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_isatty>:

int _isatty(int file)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
	return 1;
 800518a:	2301      	movs	r3, #1
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
	return 0;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <_sbrk+0x50>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x16>
		heap_end = &end;
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <_sbrk+0x50>)
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <_sbrk+0x54>)
 80051c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <_sbrk+0x50>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <_sbrk+0x50>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	466a      	mov	r2, sp
 80051da:	4293      	cmp	r3, r2
 80051dc:	d907      	bls.n	80051ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80051de:	f00f fcc9 	bl	8014b74 <__errno>
 80051e2:	4602      	mov	r2, r0
 80051e4:	230c      	movs	r3, #12
 80051e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ec:	e006      	b.n	80051fc <_sbrk+0x48>
	}

	heap_end += incr;
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <_sbrk+0x50>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a03      	ldr	r2, [pc, #12]	; (8005204 <_sbrk+0x50>)
 80051f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000470 	.word	0x20000470
 8005208:	20010550 	.word	0x20010550

0800520c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005210:	4b17      	ldr	r3, [pc, #92]	; (8005270 <SystemInit+0x64>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <SystemInit+0x64>)
 8005218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800521c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <SystemInit+0x68>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <SystemInit+0x68>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <SystemInit+0x68>)
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <SystemInit+0x68>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <SystemInit+0x68>)
 8005238:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800523c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005240:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <SystemInit+0x68>)
 8005244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005248:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <SystemInit+0x68>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <SystemInit+0x68>)
 8005250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005254:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <SystemInit+0x68>)
 8005258:	2200      	movs	r2, #0
 800525a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <SystemInit+0x64>)
 800525e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005262:	609a      	str	r2, [r3, #8]
#endif
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00
 8005274:	40021000 	.word	0x40021000

08005278 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Callback when new data is received on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	static BaseType_t xHigherPriorityTaskWoken;

	xHigherPriorityTaskWoken = pdFALSE;
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <HAL_UART_RxCpltCallback+0xac>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

	if (huart->Instance == USART1) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a27      	ldr	r2, [pc, #156]	; (8005328 <HAL_UART_RxCpltCallback+0xb0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d138      	bne.n	8005302 <HAL_UART_RxCpltCallback+0x8a>
		uint8_t dato = WiFiRxBuffer.data[WiFiRxBuffer.tail];
 8005290:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 8005292:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8005296:	461a      	mov	r2, r3
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 800529a:	5c9b      	ldrb	r3, [r3, r2]
 800529c:	73fb      	strb	r3, [r7, #15]


		if (++WiFiRxBuffer.tail >= ESP_BUFFERSIZE_CIRCULAR) {
 800529e:	4b23      	ldr	r3, [pc, #140]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052a0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80052a4:	3301      	adds	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052aa:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
 80052ae:	4b1f      	ldr	r3, [pc, #124]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052b0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b8:	d303      	bcc.n	80052c2 <HAL_UART_RxCpltCallback+0x4a>
			WiFiRxBuffer.tail = 0;
 80052ba:	4b1c      	ldr	r3, [pc, #112]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052bc:	2200      	movs	r2, #0
 80052be:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}
		// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(huart, (uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052c4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <HAL_UART_RxCpltCallback+0xb4>)
 80052cc:	4413      	add	r3, r2
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f007 f93c 	bl	800c550 <HAL_UART_Receive_IT>
		if(xSemaphoreSub != NULL){
 80052d8:	4b15      	ldr	r3, [pc, #84]	; (8005330 <HAL_UART_RxCpltCallback+0xb8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_RxCpltCallback+0x7a>
			if(dato == '\n')
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b0a      	cmp	r3, #10
 80052e4:	d105      	bne.n	80052f2 <HAL_UART_RxCpltCallback+0x7a>
				xSemaphoreGiveFromISR(xSemaphoreSub, &xHigherPriorityTaskWoken);
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_UART_RxCpltCallback+0xb8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	490e      	ldr	r1, [pc, #56]	; (8005324 <HAL_UART_RxCpltCallback+0xac>)
 80052ec:	4618      	mov	r0, r3
 80052ee:	f00c fa07 	bl	8011700 <xQueueGiveFromISR>
		}
#if DEBUG == 1
		//if(dato == '\n')
			xQueueSendFromISR(xQueuePrintConsole, &dato, &xHigherPriorityTaskWoken);
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_UART_RxCpltCallback+0xbc>)
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	f107 010f 	add.w	r1, r7, #15
 80052fa:	2300      	movs	r3, #0
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <HAL_UART_RxCpltCallback+0xac>)
 80052fe:	f00c f96b 	bl	80115d8 <xQueueGenericSendFromISR>
#endif
	}
	/* If xHigherPriorityTaskWoken was set to true you
	    we should yield.  The actual macro used here is
	    port specific. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_UART_RxCpltCallback+0xac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_UART_RxCpltCallback+0xa2>
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_UART_RxCpltCallback+0xc0>)
 800530c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	f3bf 8f6f 	isb	sy
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000474 	.word	0x20000474
 8005328:	40013800 	.word	0x40013800
 800532c:	2000dcd8 	.word	0x2000dcd8
 8005330:	2000ebf8 	.word	0x2000ebf8
 8005334:	2000ebd0 	.word	0x2000ebd0
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <HAL_UART_ErrorCallback>:
/**
 * @brief  Function called when error happens on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	WIFI_Handler();
 8005344:	f000 f83a 	bl	80053bc <WIFI_Handler>
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_F_Init>:

void HAL_UART_F_Init(void) {
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0

	WiFiRxBuffer.head = 0;
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_UART_F_Init+0x30>)
 8005356:	2200      	movs	r2, #0
 8005358:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	WiFiRxBuffer.tail = 0;
 800535c:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_UART_F_Init+0x30>)
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

	HAL_UART_Receive_IT(&huart1,
			(uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_UART_F_Init+0x30>)
 8005366:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800536a:	461a      	mov	r2, r3
	HAL_UART_Receive_IT(&huart1,
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_UART_F_Init+0x30>)
 800536e:	4413      	add	r3, r2
 8005370:	2201      	movs	r2, #1
 8005372:	4619      	mov	r1, r3
 8005374:	4803      	ldr	r0, [pc, #12]	; (8005384 <HAL_UART_F_Init+0x34>)
 8005376:	f007 f8eb 	bl	800c550 <HAL_UART_Receive_IT>

}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000dcd8 	.word	0x2000dcd8
 8005384:	2000e8dc 	.word	0x2000e8dc

08005388 <HAL_UART_F_Send>:
void HAL_UART_F_DeInit(void) {
	/* Reset USART configuration to default */
	HAL_UART_DeInit(&huart1);
}

int8_t HAL_UART_F_Send(const char* Buffer, const uint8_t Length) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
	/* It is using a blocking call to ensure that the AT commands were correctly sent. */
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) Buffer, Length) != HAL_OK){//, ESP_DEFAULT_TIME_OUT
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4806      	ldr	r0, [pc, #24]	; (80053b8 <HAL_UART_F_Send+0x30>)
 800539e:	f007 f87b 	bl	800c498 <HAL_UART_Transmit_IT>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_UART_F_Send+0x26>
	//if (HAL_UART_Transmit(&huart1, (uint8_t*) Buffer, Length, ESP_DEFAULT_TIME_OUT) != HAL_OK){
		return -1;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ac:	e000      	b.n	80053b0 <HAL_UART_F_Send+0x28>
	}
	return 0;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2000e8dc 	.word	0x2000e8dc

080053bc <WIFI_Handler>:
/**
 * @brief  Handler to deinialize the ESP8266 UART interface in case of errors.
 * @param  None
 * @retval None.
 */
static void WIFI_Handler(void) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80053c0:	4803      	ldr	r0, [pc, #12]	; (80053d0 <WIFI_Handler+0x14>)
 80053c2:	f007 f833 	bl	800c42c <HAL_UART_DeInit>
	vLedWrite(LED_5, GPIO_PIN_SET);
 80053c6:	2101      	movs	r1, #1
 80053c8:	2004      	movs	r0, #4
 80053ca:	f7fd faa3 	bl	8002914 <vLedWrite>
	while (1) {
 80053ce:	e7fe      	b.n	80053ce <WIFI_Handler+0x12>
 80053d0:	2000e8dc 	.word	0x2000e8dc

080053d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80053d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800540c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80053d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80053da:	e003      	b.n	80053e4 <LoopCopyDataInit>

080053dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80053de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80053e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80053e2:	3104      	adds	r1, #4

080053e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <LoopForever+0xa>)
	ldr	r3, =_edata
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <LoopForever+0xe>)
	adds	r2, r0, r1
 80053e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80053ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80053ec:	d3f6      	bcc.n	80053dc <CopyDataInit>
	ldr	r2, =_sbss
 80053ee:	4a0b      	ldr	r2, [pc, #44]	; (800541c <LoopForever+0x12>)
	b	LoopFillZerobss
 80053f0:	e002      	b.n	80053f8 <LoopFillZerobss>

080053f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80053f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80053f4:	f842 3b04 	str.w	r3, [r2], #4

080053f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <LoopForever+0x16>)
	cmp	r2, r3
 80053fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80053fc:	d3f9      	bcc.n	80053f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80053fe:	f7ff ff05 	bl	800520c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005402:	f00f fbcf 	bl	8014ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005406:	f7fd fbf5 	bl	8002bf4 <main>

0800540a <LoopForever>:

LoopForever:
    b LoopForever
 800540a:	e7fe      	b.n	800540a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800540c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8005410:	080181d8 	.word	0x080181d8
	ldr	r0, =_sdata
 8005414:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005418:	200003bc 	.word	0x200003bc
	ldr	r2, =_sbss
 800541c:	200003bc 	.word	0x200003bc
	ldr	r3, = _ebss
 8005420:	20010550 	.word	0x20010550

08005424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005424:	e7fe      	b.n	8005424 <ADC1_2_IRQHandler>

08005426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005430:	2003      	movs	r0, #3
 8005432:	f001 f85c 	bl	80064ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005436:	2000      	movs	r0, #0
 8005438:	f7ff fdb6 	bl	8004fa8 <HAL_InitTick>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	71fb      	strb	r3, [r7, #7]
 8005446:	e001      	b.n	800544c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005448:	f7ff f896 	bl	8004578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800544c:	79fb      	ldrb	r3, [r7, #7]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_IncTick+0x1c>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_IncTick+0x20>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4413      	add	r3, r2
 8005466:	4a03      	ldr	r2, [pc, #12]	; (8005474 <HAL_IncTick+0x1c>)
 8005468:	6013      	str	r3, [r2, #0]
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	2000ec3c 	.word	0x2000ec3c
 8005478:	20000060 	.word	0x20000060

0800547c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return uwTick;
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <HAL_GetTick+0x14>)
 8005482:	681b      	ldr	r3, [r3, #0]
}
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000ec3c 	.word	0x2000ec3c

08005494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800549c:	f7ff ffee 	bl	800547c <HAL_GetTick>
 80054a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ac:	d004      	beq.n	80054b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_Delay+0x40>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054b8:	bf00      	nop
 80054ba:	f7ff ffdf 	bl	800547c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d8f7      	bhi.n	80054ba <HAL_Delay+0x26>
  {
  }
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000060 	.word	0x20000060

080054d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005540:	b490      	push	{r4, r7}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3360      	adds	r3, #96	; 0x60
 8005552:	461a      	mov	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	4b08      	ldr	r3, [pc, #32]	; (8005580 <LL_ADC_SetOffset+0x40>)
 8005560:	4013      	ands	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005572:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bc90      	pop	{r4, r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	03fff000 	.word	0x03fff000

08005584 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005584:	b490      	push	{r4, r7}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3360      	adds	r3, #96	; 0x60
 8005592:	461a      	mov	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc90      	pop	{r4, r7}
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80055ac:	b490      	push	{r4, r7}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3360      	adds	r3, #96	; 0x60
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc90      	pop	{r4, r7}
 80055da:	4770      	bx	lr

080055dc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005602:	b490      	push	{r4, r7}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3330      	adds	r3, #48	; 0x30
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	4413      	add	r3, r2
 8005620:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	211f      	movs	r1, #31
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	0e9b      	lsrs	r3, r3, #26
 8005638:	f003 011f 	and.w	r1, r3, #31
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bc90      	pop	{r4, r7}
 8005652:	4770      	bx	lr

08005654 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005654:	b490      	push	{r4, r7}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3314      	adds	r3, #20
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	0e5b      	lsrs	r3, r3, #25
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	0d1b      	lsrs	r3, r3, #20
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2107      	movs	r1, #7
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	0d1b      	lsrs	r3, r3, #20
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc90      	pop	{r4, r7}
 80056a2:	4770      	bx	lr

080056a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0318 	and.w	r3, r3, #24
 80056c6:	4908      	ldr	r1, [pc, #32]	; (80056e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056c8:	40d9      	lsrs	r1, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	400b      	ands	r3, r1
 80056ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	0007ffff 	.word	0x0007ffff

080056ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80056fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6093      	str	r3, [r2, #8]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005724:	d101      	bne.n	800572a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800574c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005774:	d101      	bne.n	800577a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <LL_ADC_IsEnabled+0x18>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <LL_ADC_IsEnabled+0x1a>
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d101      	bne.n	80057c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d101      	bne.n	80057ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e137      	b.n	8005a86 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fe fecf 	bl	80045c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff67 	bl	8005710 <LL_ADC_IsDeepPowerDownEnabled>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ff4d 	bl	80056ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff82 	bl	8005760 <LL_ADC_IsInternalRegulatorEnabled>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d113      	bne.n	800588a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff66 	bl	8005738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800586c:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_ADC_Init+0x294>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	4a88      	ldr	r2, [pc, #544]	; (8005a94 <HAL_ADC_Init+0x298>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800587c:	e002      	b.n	8005884 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3b01      	subs	r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f9      	bne.n	800587e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff ff66 	bl	8005760 <LL_ADC_IsInternalRegulatorEnabled>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10d      	bne.n	80058b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	f043 0210 	orr.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff ff77 	bl	80057ae <LL_ADC_REG_IsConversionOngoing>
 80058c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 80d2 	bne.w	8005a74 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 80ce 	bne.w	8005a74 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80058e0:	f043 0202 	orr.w	r2, r3, #2
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff ff4b 	bl	8005788 <LL_ADC_IsEnabled>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d115      	bne.n	8005924 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058f8:	4867      	ldr	r0, [pc, #412]	; (8005a98 <HAL_ADC_Init+0x29c>)
 80058fa:	f7ff ff45 	bl	8005788 <LL_ADC_IsEnabled>
 80058fe:	4604      	mov	r4, r0
 8005900:	4866      	ldr	r0, [pc, #408]	; (8005a9c <HAL_ADC_Init+0x2a0>)
 8005902:	f7ff ff41 	bl	8005788 <LL_ADC_IsEnabled>
 8005906:	4603      	mov	r3, r0
 8005908:	431c      	orrs	r4, r3
 800590a:	4865      	ldr	r0, [pc, #404]	; (8005aa0 <HAL_ADC_Init+0x2a4>)
 800590c:	f7ff ff3c 	bl	8005788 <LL_ADC_IsEnabled>
 8005910:	4603      	mov	r3, r0
 8005912:	4323      	orrs	r3, r4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4619      	mov	r1, r3
 800591e:	4861      	ldr	r0, [pc, #388]	; (8005aa4 <HAL_ADC_Init+0x2a8>)
 8005920:	f7ff fdda 	bl	80054d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	7e5b      	ldrb	r3, [r3, #25]
 8005928:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800592e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005934:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800593a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005942:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d106      	bne.n	8005960 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	3b01      	subs	r3, #1
 8005958:	045b      	lsls	r3, r3, #17
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <HAL_ADC_Init+0x2ac>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	69b9      	ldr	r1, [r7, #24]
 800598c:	430b      	orrs	r3, r1
 800598e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff0a 	bl	80057ae <LL_ADC_REG_IsConversionOngoing>
 800599a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff ff17 	bl	80057d4 <LL_ADC_INJ_IsConversionOngoing>
 80059a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d140      	bne.n	8005a30 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d13d      	bne.n	8005a30 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7e1b      	ldrb	r3, [r3, #24]
 80059bc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059be:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d6:	f023 0306 	bic.w	r3, r3, #6
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d118      	bne.n	8005a20 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a04:	4311      	orrs	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a10:	430a      	orrs	r2, r1
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
 8005a1e:	e007      	b.n	8005a30 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10c      	bne.n	8005a52 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	f023 010f 	bic.w	r1, r3, #15
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a50:	e007      	b.n	8005a62 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 020f 	bic.w	r2, r2, #15
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	659a      	str	r2, [r3, #88]	; 0x58
 8005a72:	e007      	b.n	8005a84 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a78:	f043 0210 	orr.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000058 	.word	0x20000058
 8005a94:	053e2d63 	.word	0x053e2d63
 8005a98:	50040000 	.word	0x50040000
 8005a9c:	50040100 	.word	0x50040100
 8005aa0:	50040200 	.word	0x50040200
 8005aa4:	50040300 	.word	0x50040300
 8005aa8:	fff0c007 	.word	0xfff0c007

08005aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b0a6      	sub	sp, #152	; 0x98
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x22>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e364      	b.n	8006198 <HAL_ADC_ConfigChannel+0x6ec>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fe67 	bl	80057ae <LL_ADC_REG_IsConversionOngoing>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 8345 	bne.w	8006172 <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d824      	bhi.n	8005b3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	3b02      	subs	r3, #2
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d81b      	bhi.n	8005b32 <HAL_ADC_ConfigChannel+0x86>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_ADC_ConfigChannel+0x54>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b19 	.word	0x08005b19
 8005b08:	08005b21 	.word	0x08005b21
 8005b0c:	08005b29 	.word	0x08005b29
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	220c      	movs	r2, #12
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	e011      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2212      	movs	r2, #18
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e00d      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2218      	movs	r2, #24
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	e009      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e004      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2206      	movs	r2, #6
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	e000      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005b3a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f7ff fd5a 	bl	8005602 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fe2b 	bl	80057ae <LL_ADC_REG_IsConversionOngoing>
 8005b58:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fe37 	bl	80057d4 <LL_ADC_INJ_IsConversionOngoing>
 8005b66:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 8163 	bne.w	8005e3a <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 815e 	bne.w	8005e3a <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b86:	d10f      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2200      	movs	r2, #0
 8005b92:	4619      	mov	r1, r3
 8005b94:	f7ff fd5e 	bl	8005654 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fd1b 	bl	80055dc <LL_ADC_SetSamplingTimeCommonConfig>
 8005ba6:	e00e      	b.n	8005bc6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f7ff fd4d 	bl	8005654 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fd0b 	bl	80055dc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d00a      	beq.n	8005bfe <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	6919      	ldr	r1, [r3, #16]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bf8:	f7ff fca2 	bl	8005540 <LL_ADC_SetOffset>
 8005bfc:	e11d      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fcbd 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x17e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fcb2 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005c20:	4603      	mov	r3, r0
 8005c22:	0e9b      	lsrs	r3, r3, #26
 8005c24:	f003 021f 	and.w	r2, r3, #31
 8005c28:	e012      	b.n	8005c50 <HAL_ADC_ConfigChannel+0x1a4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fca7 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c40:	fa93 f3a3 	rbit	r3, r3
 8005c44:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c48:	fab3 f383 	clz	r3, r3
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_ADC_ConfigChannel+0x1bc>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0e9b      	lsrs	r3, r3, #26
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	e00a      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x1d2>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c70:	fa93 f3a3 	rbit	r3, r3
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	fab3 f383 	clz	r3, r3
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d106      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fc8e 	bl	80055ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fc74 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x210>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2101      	movs	r1, #1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fc69 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	0e9b      	lsrs	r3, r3, #26
 8005cb6:	f003 021f 	and.w	r2, r3, #31
 8005cba:	e010      	b.n	8005cde <HAL_ADC_ConfigChannel+0x232>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fc5e 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x24a>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	0e9b      	lsrs	r3, r3, #26
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	e00a      	b.n	8005d0c <HAL_ADC_ConfigChannel+0x260>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cfe:	fa93 f3a3 	rbit	r3, r3
 8005d02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d06:	fab3 f383 	clz	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d106      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2200      	movs	r2, #0
 8005d16:	2101      	movs	r1, #1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fc47 	bl	80055ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2102      	movs	r1, #2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fc2d 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x29e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2102      	movs	r1, #2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fc22 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005d40:	4603      	mov	r3, r0
 8005d42:	0e9b      	lsrs	r3, r3, #26
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	e010      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x2c0>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2102      	movs	r1, #2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fc17 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005d56:	4603      	mov	r3, r0
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	fab3 f383 	clz	r3, r3
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x2d8>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	0e9b      	lsrs	r3, r3, #26
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	e00a      	b.n	8005d9a <HAL_ADC_ConfigChannel+0x2ee>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d94:	fab3 f383 	clz	r3, r3
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d106      	bne.n	8005dac <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fc00 	bl	80055ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2103      	movs	r1, #3
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fbe6 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x32c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fbdb 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	0e9b      	lsrs	r3, r3, #26
 8005dd2:	f003 021f 	and.w	r2, r3, #31
 8005dd6:	e010      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x34e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2103      	movs	r1, #3
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fbd0 	bl	8005584 <LL_ADC_GetOffsetChannel>
 8005de4:	4603      	mov	r3, r0
 8005de6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x366>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	0e9b      	lsrs	r3, r3, #26
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	e00a      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x37c>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	fa93 f3a3 	rbit	r3, r3
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	fab3 f383 	clz	r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d106      	bne.n	8005e3a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2103      	movs	r1, #3
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fbb9 	bl	80055ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fca2 	bl	8005788 <LL_ADC_IsEnabled>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f040 810c 	bne.w	8006064 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f7ff fc23 	bl	80056a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4aae      	ldr	r2, [pc, #696]	; (800611c <HAL_ADC_ConfigChannel+0x670>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	f040 80fd 	bne.w	8006064 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x3e6>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	0e9b      	lsrs	r3, r3, #26
 8005e80:	3301      	adds	r3, #1
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	bf94      	ite	ls
 8005e8a:	2301      	movls	r3, #1
 8005e8c:	2300      	movhi	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e012      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x40c>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	fa93 f3a3 	rbit	r3, r3
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	bf94      	ite	ls
 8005eb2:	2301      	movls	r3, #1
 8005eb4:	2300      	movhi	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d064      	beq.n	8005f86 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x42c>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	0e9b      	lsrs	r3, r3, #26
 8005ece:	3301      	adds	r3, #1
 8005ed0:	069b      	lsls	r3, r3, #26
 8005ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ed6:	e00e      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x44a>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	fab3 f383 	clz	r3, r3
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	069b      	lsls	r3, r3, #26
 8005ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x46a>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	0e9b      	lsrs	r3, r3, #26
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2101      	movs	r1, #1
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	e010      	b.n	8005f38 <HAL_ADC_ConfigChannel+0x48c>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	fa93 f3a3 	rbit	r3, r3
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	fab3 f383 	clz	r3, r3
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	ea42 0103 	orr.w	r1, r2, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x4b2>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0e9b      	lsrs	r3, r3, #26
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f003 021f 	and.w	r2, r3, #31
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	051b      	lsls	r3, r3, #20
 8005f5c:	e011      	b.n	8005f82 <HAL_ADC_ConfigChannel+0x4d6>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	fa93 f3a3 	rbit	r3, r3
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	3301      	adds	r3, #1
 8005f76:	f003 021f 	and.w	r2, r3, #31
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f82:	430b      	orrs	r3, r1
 8005f84:	e069      	b.n	800605a <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d107      	bne.n	8005fa2 <HAL_ADC_ConfigChannel+0x4f6>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	0e9b      	lsrs	r3, r3, #26
 8005f98:	3301      	adds	r3, #1
 8005f9a:	069b      	lsls	r3, r3, #26
 8005f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fa0:	e00e      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x514>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	fa93 f3a3 	rbit	r3, r3
 8005fae:	61fb      	str	r3, [r7, #28]
  return result;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	fab3 f383 	clz	r3, r3
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	3301      	adds	r3, #1
 8005fba:	069b      	lsls	r3, r3, #26
 8005fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x534>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	0e9b      	lsrs	r3, r3, #26
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2101      	movs	r1, #1
 8005fda:	fa01 f303 	lsl.w	r3, r1, r3
 8005fde:	e010      	b.n	8006002 <HAL_ADC_ConfigChannel+0x556>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	617b      	str	r3, [r7, #20]
  return result;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	fab3 f383 	clz	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8006002:	ea42 0103 	orr.w	r1, r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <HAL_ADC_ConfigChannel+0x582>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	0e9b      	lsrs	r3, r3, #26
 8006018:	3301      	adds	r3, #1
 800601a:	f003 021f 	and.w	r2, r3, #31
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	3b1e      	subs	r3, #30
 8006026:	051b      	lsls	r3, r3, #20
 8006028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800602c:	e014      	b.n	8006058 <HAL_ADC_ConfigChannel+0x5ac>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	fa93 f3a3 	rbit	r3, r3
 800603a:	60fb      	str	r3, [r7, #12]
  return result;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	fab3 f383 	clz	r3, r3
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3301      	adds	r3, #1
 8006046:	f003 021f 	and.w	r2, r3, #31
 800604a:	4613      	mov	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	3b1e      	subs	r3, #30
 8006052:	051b      	lsls	r3, r3, #20
 8006054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006058:	430b      	orrs	r3, r1
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	4619      	mov	r1, r3
 8006060:	f7ff faf8 	bl	8005654 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <HAL_ADC_ConfigChannel+0x674>)
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 808d 	beq.w	800618c <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006072:	482c      	ldr	r0, [pc, #176]	; (8006124 <HAL_ADC_ConfigChannel+0x678>)
 8006074:	f7ff fa56 	bl	8005524 <LL_ADC_GetCommonPathInternalCh>
 8006078:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <HAL_ADC_ConfigChannel+0x67c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d12b      	bne.n	80060de <HAL_ADC_ConfigChannel+0x632>
 8006086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800608a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d125      	bne.n	80060de <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a25      	ldr	r2, [pc, #148]	; (800612c <HAL_ADC_ConfigChannel+0x680>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_ADC_ConfigChannel+0x5fa>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <HAL_ADC_ConfigChannel+0x684>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d16f      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80060a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060ae:	4619      	mov	r1, r3
 80060b0:	481c      	ldr	r0, [pc, #112]	; (8006124 <HAL_ADC_ConfigChannel+0x678>)
 80060b2:	f7ff fa24 	bl	80054fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80060b6:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <HAL_ADC_ConfigChannel+0x688>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	4a1e      	ldr	r2, [pc, #120]	; (8006138 <HAL_ADC_ConfigChannel+0x68c>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	099a      	lsrs	r2, r3, #6
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80060ce:	e002      	b.n	80060d6 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f9      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060dc:	e053      	b.n	8006186 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a16      	ldr	r2, [pc, #88]	; (800613c <HAL_ADC_ConfigChannel+0x690>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d12b      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x694>
 80060e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d125      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a0c      	ldr	r2, [pc, #48]	; (800612c <HAL_ADC_ConfigChannel+0x680>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_ADC_ConfigChannel+0x65c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <HAL_ADC_ConfigChannel+0x684>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d140      	bne.n	800618a <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800610c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006110:	4619      	mov	r1, r3
 8006112:	4804      	ldr	r0, [pc, #16]	; (8006124 <HAL_ADC_ConfigChannel+0x678>)
 8006114:	f7ff f9f3 	bl	80054fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006118:	e037      	b.n	800618a <HAL_ADC_ConfigChannel+0x6de>
 800611a:	bf00      	nop
 800611c:	407f0000 	.word	0x407f0000
 8006120:	80080000 	.word	0x80080000
 8006124:	50040300 	.word	0x50040300
 8006128:	c7520000 	.word	0xc7520000
 800612c:	50040000 	.word	0x50040000
 8006130:	50040200 	.word	0x50040200
 8006134:	20000058 	.word	0x20000058
 8006138:	053e2d63 	.word	0x053e2d63
 800613c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_ADC_ConfigChannel+0x6f4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d120      	bne.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800614a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800614e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d11a      	bne.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <HAL_ADC_ConfigChannel+0x6f8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d115      	bne.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006168:	4619      	mov	r1, r3
 800616a:	480f      	ldr	r0, [pc, #60]	; (80061a8 <HAL_ADC_ConfigChannel+0x6fc>)
 800616c:	f7ff f9c7 	bl	80054fe <LL_ADC_SetCommonPathInternalCh>
 8006170:	e00c      	b.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006184:	e002      	b.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800618a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006198:	4618      	mov	r0, r3
 800619a:	3798      	adds	r7, #152	; 0x98
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	80000001 	.word	0x80000001
 80061a4:	50040000 	.word	0x50040000
 80061a8:	50040300 	.word	0x50040300

080061ac <LL_ADC_IsEnabled>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <LL_ADC_IsEnabled+0x18>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <LL_ADC_IsEnabled+0x1a>
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d101      	bne.n	80061ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b0a1      	sub	sp, #132	; 0x84
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e08f      	b.n	8006336 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a47      	ldr	r2, [pc, #284]	; (8006340 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d102      	bne.n	800622e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006228:	4b46      	ldr	r3, [pc, #280]	; (8006344 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e001      	b.n	8006232 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10b      	bne.n	8006250 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e072      	b.n	8006336 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ffbd 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 8006258:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ffb7 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d154      	bne.n	8006314 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800626a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800626c:	2b00      	cmp	r3, #0
 800626e:	d151      	bne.n	8006314 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006270:	4b35      	ldr	r3, [pc, #212]	; (8006348 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006272:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02c      	beq.n	80062d6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800627c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800628e:	035b      	lsls	r3, r3, #13
 8006290:	430b      	orrs	r3, r1
 8006292:	431a      	orrs	r2, r3
 8006294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006296:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006298:	4829      	ldr	r0, [pc, #164]	; (8006340 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800629a:	f7ff ff87 	bl	80061ac <LL_ADC_IsEnabled>
 800629e:	4604      	mov	r4, r0
 80062a0:	4828      	ldr	r0, [pc, #160]	; (8006344 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80062a2:	f7ff ff83 	bl	80061ac <LL_ADC_IsEnabled>
 80062a6:	4603      	mov	r3, r0
 80062a8:	431c      	orrs	r4, r3
 80062aa:	4828      	ldr	r0, [pc, #160]	; (800634c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80062ac:	f7ff ff7e 	bl	80061ac <LL_ADC_IsEnabled>
 80062b0:	4603      	mov	r3, r0
 80062b2:	4323      	orrs	r3, r4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d137      	bne.n	8006328 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80062b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80062c0:	f023 030f 	bic.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	6811      	ldr	r1, [r2, #0]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6892      	ldr	r2, [r2, #8]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80062d4:	e028      	b.n	8006328 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062e2:	4817      	ldr	r0, [pc, #92]	; (8006340 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80062e4:	f7ff ff62 	bl	80061ac <LL_ADC_IsEnabled>
 80062e8:	4604      	mov	r4, r0
 80062ea:	4816      	ldr	r0, [pc, #88]	; (8006344 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80062ec:	f7ff ff5e 	bl	80061ac <LL_ADC_IsEnabled>
 80062f0:	4603      	mov	r3, r0
 80062f2:	431c      	orrs	r4, r3
 80062f4:	4815      	ldr	r0, [pc, #84]	; (800634c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80062f6:	f7ff ff59 	bl	80061ac <LL_ADC_IsEnabled>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4323      	orrs	r3, r4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d112      	bne.n	8006328 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800630a:	f023 030f 	bic.w	r3, r3, #15
 800630e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006310:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006312:	e009      	b.n	8006328 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	f043 0220 	orr.w	r2, r3, #32
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006326:	e000      	b.n	800632a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006332:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006336:	4618      	mov	r0, r3
 8006338:	3784      	adds	r7, #132	; 0x84
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	50040000 	.word	0x50040000
 8006344:	50040100 	.word	0x50040100
 8006348:	50040300 	.word	0x50040300
 800634c:	50040200 	.word	0x50040200

08006350 <__NVIC_SetPriorityGrouping>:
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006360:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <__NVIC_SetPriorityGrouping+0x44>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800636c:	4013      	ands	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800637c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006382:	4a04      	ldr	r2, [pc, #16]	; (8006394 <__NVIC_SetPriorityGrouping+0x44>)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	60d3      	str	r3, [r2, #12]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	e000ed00 	.word	0xe000ed00

08006398 <__NVIC_GetPriorityGrouping>:
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <__NVIC_GetPriorityGrouping+0x18>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	0a1b      	lsrs	r3, r3, #8
 80063a2:	f003 0307 	and.w	r3, r3, #7
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000ed00 	.word	0xe000ed00

080063b4 <__NVIC_EnableIRQ>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	db0b      	blt.n	80063de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f003 021f 	and.w	r2, r3, #31
 80063cc:	4907      	ldr	r1, [pc, #28]	; (80063ec <__NVIC_EnableIRQ+0x38>)
 80063ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2001      	movs	r0, #1
 80063d6:	fa00 f202 	lsl.w	r2, r0, r2
 80063da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000e100 	.word	0xe000e100

080063f0 <__NVIC_DisableIRQ>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	db10      	blt.n	8006424 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	f003 021f 	and.w	r2, r3, #31
 8006408:	4909      	ldr	r1, [pc, #36]	; (8006430 <__NVIC_DisableIRQ+0x40>)
 800640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	2001      	movs	r0, #1
 8006412:	fa00 f202 	lsl.w	r2, r0, r2
 8006416:	3320      	adds	r3, #32
 8006418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800641c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006420:	f3bf 8f6f 	isb	sy
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	e000e100 	.word	0xe000e100

08006434 <__NVIC_SetPriority>:
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006444:	2b00      	cmp	r3, #0
 8006446:	db0a      	blt.n	800645e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	b2da      	uxtb	r2, r3
 800644c:	490c      	ldr	r1, [pc, #48]	; (8006480 <__NVIC_SetPriority+0x4c>)
 800644e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006452:	0112      	lsls	r2, r2, #4
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	440b      	add	r3, r1
 8006458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800645c:	e00a      	b.n	8006474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4908      	ldr	r1, [pc, #32]	; (8006484 <__NVIC_SetPriority+0x50>)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	3b04      	subs	r3, #4
 800646c:	0112      	lsls	r2, r2, #4
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	440b      	add	r3, r1
 8006472:	761a      	strb	r2, [r3, #24]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	e000e100 	.word	0xe000e100
 8006484:	e000ed00 	.word	0xe000ed00

08006488 <NVIC_EncodePriority>:
{
 8006488:	b480      	push	{r7}
 800648a:	b089      	sub	sp, #36	; 0x24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f1c3 0307 	rsb	r3, r3, #7
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	bf28      	it	cs
 80064a6:	2304      	movcs	r3, #4
 80064a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2b06      	cmp	r3, #6
 80064b0:	d902      	bls.n	80064b8 <NVIC_EncodePriority+0x30>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3b03      	subs	r3, #3
 80064b6:	e000      	b.n	80064ba <NVIC_EncodePriority+0x32>
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	401a      	ands	r2, r3
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	43d9      	mvns	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e0:	4313      	orrs	r3, r2
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	; 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff2a 	bl	8006350 <__NVIC_SetPriorityGrouping>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006516:	f7ff ff3f 	bl	8006398 <__NVIC_GetPriorityGrouping>
 800651a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	6978      	ldr	r0, [r7, #20]
 8006522:	f7ff ffb1 	bl	8006488 <NVIC_EncodePriority>
 8006526:	4602      	mov	r2, r0
 8006528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff ff80 	bl	8006434 <__NVIC_SetPriority>
}
 8006534:	bf00      	nop
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff ff32 	bl	80063b4 <__NVIC_EnableIRQ>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff42 	bl	80063f0 <__NVIC_DisableIRQ>
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e075      	b.n	8006672 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fe f896 	bl	80046cc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065b6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6819      	ldr	r1, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b2a      	ldr	r3, [pc, #168]	; (800667c <HAL_DCMI_Init+0x108>)
 80065d2:	400b      	ands	r3, r1
 80065d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80065ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80065f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006602:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800660e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800661a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b10      	cmp	r3, #16
 800662a:	d112      	bne.n	8006652 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7f1b      	ldrb	r3, [r3, #28]
 8006630:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7f5b      	ldrb	r3, [r3, #29]
 8006636:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006638:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7f9b      	ldrb	r3, [r3, #30]
 800663e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006640:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7fdb      	ldrb	r3, [r3, #31]
 8006648:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800664e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006650:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 021f 	orr.w	r2, r2, #31
 8006660:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	ffe0f007 	.word	0xffe0f007

08006680 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d005      	beq.n	80066a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
 80066a2:	e029      	b.n	80066f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 020e 	bic.w	r2, r2, #14
 80066b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c8:	f003 021c 	and.w	r2, r3, #28
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f202 	lsl.w	r2, r1, r2
 80066d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
    }
  }
  return status;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006712:	e166      	b.n	80069e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	2101      	movs	r1, #1
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	fa01 f303 	lsl.w	r3, r1, r3
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8158 	beq.w	80069dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d00b      	beq.n	800674c <HAL_GPIO_Init+0x48>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d007      	beq.n	800674c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006740:	2b11      	cmp	r3, #17
 8006742:	d003      	beq.n	800674c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b12      	cmp	r3, #18
 800674a:	d130      	bne.n	80067ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	2203      	movs	r2, #3
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4013      	ands	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006782:	2201      	movs	r2, #1
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4013      	ands	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 0201 	and.w	r2, r3, #1
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	2203      	movs	r2, #3
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4013      	ands	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_Init+0xea>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b12      	cmp	r3, #18
 80067ec:	d123      	bne.n	8006836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	08da      	lsrs	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3208      	adds	r2, #8
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	220f      	movs	r2, #15
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	08da      	lsrs	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3208      	adds	r2, #8
 8006830:	6939      	ldr	r1, [r7, #16]
 8006832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	2203      	movs	r2, #3
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0203 	and.w	r2, r3, #3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80b2 	beq.w	80069dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <HAL_GPIO_Init+0x2fc>)
 800687a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687c:	4a60      	ldr	r2, [pc, #384]	; (8006a00 <HAL_GPIO_Init+0x2fc>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6613      	str	r3, [r2, #96]	; 0x60
 8006884:	4b5e      	ldr	r3, [pc, #376]	; (8006a00 <HAL_GPIO_Init+0x2fc>)
 8006886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006890:	4a5c      	ldr	r2, [pc, #368]	; (8006a04 <HAL_GPIO_Init+0x300>)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	089b      	lsrs	r3, r3, #2
 8006896:	3302      	adds	r3, #2
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	220f      	movs	r2, #15
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80068ba:	d02b      	beq.n	8006914 <HAL_GPIO_Init+0x210>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a52      	ldr	r2, [pc, #328]	; (8006a08 <HAL_GPIO_Init+0x304>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d025      	beq.n	8006910 <HAL_GPIO_Init+0x20c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a51      	ldr	r2, [pc, #324]	; (8006a0c <HAL_GPIO_Init+0x308>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d01f      	beq.n	800690c <HAL_GPIO_Init+0x208>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a50      	ldr	r2, [pc, #320]	; (8006a10 <HAL_GPIO_Init+0x30c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d019      	beq.n	8006908 <HAL_GPIO_Init+0x204>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a4f      	ldr	r2, [pc, #316]	; (8006a14 <HAL_GPIO_Init+0x310>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_GPIO_Init+0x200>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a4e      	ldr	r2, [pc, #312]	; (8006a18 <HAL_GPIO_Init+0x314>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00d      	beq.n	8006900 <HAL_GPIO_Init+0x1fc>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a4d      	ldr	r2, [pc, #308]	; (8006a1c <HAL_GPIO_Init+0x318>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d007      	beq.n	80068fc <HAL_GPIO_Init+0x1f8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a4c      	ldr	r2, [pc, #304]	; (8006a20 <HAL_GPIO_Init+0x31c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d101      	bne.n	80068f8 <HAL_GPIO_Init+0x1f4>
 80068f4:	2307      	movs	r3, #7
 80068f6:	e00e      	b.n	8006916 <HAL_GPIO_Init+0x212>
 80068f8:	2308      	movs	r3, #8
 80068fa:	e00c      	b.n	8006916 <HAL_GPIO_Init+0x212>
 80068fc:	2306      	movs	r3, #6
 80068fe:	e00a      	b.n	8006916 <HAL_GPIO_Init+0x212>
 8006900:	2305      	movs	r3, #5
 8006902:	e008      	b.n	8006916 <HAL_GPIO_Init+0x212>
 8006904:	2304      	movs	r3, #4
 8006906:	e006      	b.n	8006916 <HAL_GPIO_Init+0x212>
 8006908:	2303      	movs	r3, #3
 800690a:	e004      	b.n	8006916 <HAL_GPIO_Init+0x212>
 800690c:	2302      	movs	r3, #2
 800690e:	e002      	b.n	8006916 <HAL_GPIO_Init+0x212>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <HAL_GPIO_Init+0x212>
 8006914:	2300      	movs	r3, #0
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f002 0203 	and.w	r2, r2, #3
 800691c:	0092      	lsls	r2, r2, #2
 800691e:	4093      	lsls	r3, r2
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006926:	4937      	ldr	r1, [pc, #220]	; (8006a04 <HAL_GPIO_Init+0x300>)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	089b      	lsrs	r3, r3, #2
 800692c:	3302      	adds	r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006934:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_GPIO_Init+0x320>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	43db      	mvns	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006958:	4a32      	ldr	r2, [pc, #200]	; (8006a24 <HAL_GPIO_Init+0x320>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800695e:	4b31      	ldr	r3, [pc, #196]	; (8006a24 <HAL_GPIO_Init+0x320>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	43db      	mvns	r3, r3
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4013      	ands	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006982:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <HAL_GPIO_Init+0x320>)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006988:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <HAL_GPIO_Init+0x320>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	43db      	mvns	r3, r3
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4013      	ands	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_GPIO_Init+0x320>)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <HAL_GPIO_Init+0x320>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	43db      	mvns	r3, r3
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4013      	ands	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <HAL_GPIO_Init+0x320>)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3301      	adds	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f ae91 	bne.w	8006714 <HAL_GPIO_Init+0x10>
  }
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40010000 	.word	0x40010000
 8006a08:	48000400 	.word	0x48000400
 8006a0c:	48000800 	.word	0x48000800
 8006a10:	48000c00 	.word	0x48000c00
 8006a14:	48001000 	.word	0x48001000
 8006a18:	48001400 	.word	0x48001400
 8006a1c:	48001800 	.word	0x48001800
 8006a20:	48001c00 	.word	0x48001c00
 8006a24:	40010400 	.word	0x40010400

08006a28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006a36:	e0c9      	b.n	8006bcc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006a38:	2201      	movs	r2, #1
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	4013      	ands	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80bc 	beq.w	8006bc6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006a4e:	4a66      	ldr	r2, [pc, #408]	; (8006be8 <HAL_GPIO_DeInit+0x1c0>)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	3302      	adds	r3, #2
 8006a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	220f      	movs	r2, #15
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a76:	d02b      	beq.n	8006ad0 <HAL_GPIO_DeInit+0xa8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a5c      	ldr	r2, [pc, #368]	; (8006bec <HAL_GPIO_DeInit+0x1c4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d025      	beq.n	8006acc <HAL_GPIO_DeInit+0xa4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a5b      	ldr	r2, [pc, #364]	; (8006bf0 <HAL_GPIO_DeInit+0x1c8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01f      	beq.n	8006ac8 <HAL_GPIO_DeInit+0xa0>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a5a      	ldr	r2, [pc, #360]	; (8006bf4 <HAL_GPIO_DeInit+0x1cc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d019      	beq.n	8006ac4 <HAL_GPIO_DeInit+0x9c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a59      	ldr	r2, [pc, #356]	; (8006bf8 <HAL_GPIO_DeInit+0x1d0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_GPIO_DeInit+0x98>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <HAL_GPIO_DeInit+0x1d4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00d      	beq.n	8006abc <HAL_GPIO_DeInit+0x94>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a57      	ldr	r2, [pc, #348]	; (8006c00 <HAL_GPIO_DeInit+0x1d8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <HAL_GPIO_DeInit+0x90>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a56      	ldr	r2, [pc, #344]	; (8006c04 <HAL_GPIO_DeInit+0x1dc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_GPIO_DeInit+0x8c>
 8006ab0:	2307      	movs	r3, #7
 8006ab2:	e00e      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	e00c      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ab8:	2306      	movs	r3, #6
 8006aba:	e00a      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006abc:	2305      	movs	r3, #5
 8006abe:	e008      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	e006      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e004      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e002      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <HAL_GPIO_DeInit+0xaa>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	f002 0203 	and.w	r2, r2, #3
 8006ad8:	0092      	lsls	r2, r2, #2
 8006ada:	4093      	lsls	r3, r2
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d132      	bne.n	8006b48 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006ae2:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	4947      	ldr	r1, [pc, #284]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006af0:	4b45      	ldr	r3, [pc, #276]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	4943      	ldr	r1, [pc, #268]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	4940      	ldr	r1, [pc, #256]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8006b0c:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	43db      	mvns	r3, r3
 8006b14:	493c      	ldr	r1, [pc, #240]	; (8006c08 <HAL_GPIO_DeInit+0x1e0>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	220f      	movs	r2, #15
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <HAL_GPIO_DeInit+0x1c0>)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	3302      	adds	r3, #2
 8006b32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	43da      	mvns	r2, r3
 8006b3a:	482b      	ldr	r0, [pc, #172]	; (8006be8 <HAL_GPIO_DeInit+0x1c0>)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	400a      	ands	r2, r1
 8006b42:	3302      	adds	r3, #2
 8006b44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2103      	movs	r1, #3
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	08da      	lsrs	r2, r3, #3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3208      	adds	r2, #8
 8006b64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	220f      	movs	r2, #15
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	08d2      	lsrs	r2, r2, #3
 8006b7c:	4019      	ands	r1, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3208      	adds	r2, #8
 8006b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	2103      	movs	r1, #3
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	43db      	mvns	r3, r3
 8006b96:	401a      	ands	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	401a      	ands	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	2103      	movs	r1, #3
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f af2f 	bne.w	8006a38 <HAL_GPIO_DeInit+0x10>
  }
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	48000400 	.word	0x48000400
 8006bf0:	48000800 	.word	0x48000800
 8006bf4:	48000c00 	.word	0x48000c00
 8006bf8:	48001000 	.word	0x48001000
 8006bfc:	48001400 	.word	0x48001400
 8006c00:	48001800 	.word	0x48001800
 8006c04:	48001c00 	.word	0x48001c00
 8006c08:	40010400 	.word	0x40010400

08006c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e001      	b.n	8006c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	807b      	strh	r3, [r7, #2]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c4c:	787b      	ldrb	r3, [r7, #1]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c52:	887a      	ldrh	r2, [r7, #2]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c58:	e002      	b.n	8006c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c5a:	887a      	ldrh	r2, [r7, #2]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695a      	ldr	r2, [r3, #20]
 8006c7c:	887b      	ldrh	r3, [r7, #2]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c84:	887a      	ldrh	r2, [r7, #2]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006c8a:	e002      	b.n	8006c92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c8c:	887a      	ldrh	r2, [r7, #2]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	619a      	str	r2, [r3, #24]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e081      	b.n	8006db4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fd fd81 	bl	80047cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2224      	movs	r2, #36	; 0x24
 8006cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cfe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d14:	609a      	str	r2, [r3, #8]
 8006d16:	e006      	b.n	8006d26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d104      	bne.n	8006d38 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	ea42 0103 	orr.w	r1, r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	021a      	lsls	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69d9      	ldr	r1, [r3, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	817b      	strh	r3, [r7, #10]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	f040 80da 	bne.w	8006f92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_I2C_Master_Transmit+0x30>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e0d3      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006df4:	f7fe fb42 	bl	800547c <HAL_GetTick>
 8006df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	2319      	movs	r3, #25
 8006e00:	2201      	movs	r2, #1
 8006e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 faed 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0be      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2221      	movs	r2, #33	; 0x21
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2210      	movs	r2, #16
 8006e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	893a      	ldrh	r2, [r7, #8]
 8006e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2bff      	cmp	r3, #255	; 0xff
 8006e46:	d90e      	bls.n	8006e66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	22ff      	movs	r2, #255	; 0xff
 8006e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	8979      	ldrh	r1, [r7, #10]
 8006e56:	4b51      	ldr	r3, [pc, #324]	; (8006f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fc50 	bl	8007704 <I2C_TransferConfig>
 8006e64:	e06c      	b.n	8006f40 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	8979      	ldrh	r1, [r7, #10]
 8006e78:	4b48      	ldr	r3, [pc, #288]	; (8006f9c <HAL_I2C_Master_Transmit+0x1e0>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fc3f 	bl	8007704 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006e86:	e05b      	b.n	8006f40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	6a39      	ldr	r1, [r7, #32]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 faea 	bl	8007466 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e07b      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d034      	beq.n	8006f40 <HAL_I2C_Master_Transmit+0x184>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d130      	bne.n	8006f40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fa7c 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e04d      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2bff      	cmp	r3, #255	; 0xff
 8006f00:	d90e      	bls.n	8006f20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	8979      	ldrh	r1, [r7, #10]
 8006f10:	2300      	movs	r3, #0
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fbf3 	bl	8007704 <I2C_TransferConfig>
 8006f1e:	e00f      	b.n	8006f40 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	8979      	ldrh	r1, [r7, #10]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fbe2 	bl	8007704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d19e      	bne.n	8006e88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	6a39      	ldr	r1, [r7, #32]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fac9 	bl	80074e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e01a      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2220      	movs	r2, #32
 8006f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <HAL_I2C_Master_Transmit+0x1e4>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e000      	b.n	8006f94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
  }
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	80002000 	.word	0x80002000
 8006fa0:	fe00e800 	.word	0xfe00e800

08006fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	817b      	strh	r3, [r7, #10]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	f040 80db 	bne.w	800717c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_I2C_Master_Receive+0x30>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e0d4      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fdc:	f7fe fa4e 	bl	800547c <HAL_GetTick>
 8006fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	2319      	movs	r3, #25
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f9f9 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e0bf      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2222      	movs	r2, #34	; 0x22
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2210      	movs	r2, #16
 800700a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	893a      	ldrh	r2, [r7, #8]
 800701e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702a:	b29b      	uxth	r3, r3
 800702c:	2bff      	cmp	r3, #255	; 0xff
 800702e:	d90e      	bls.n	800704e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	22ff      	movs	r2, #255	; 0xff
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800703a:	b2da      	uxtb	r2, r3
 800703c:	8979      	ldrh	r1, [r7, #10]
 800703e:	4b52      	ldr	r3, [pc, #328]	; (8007188 <HAL_I2C_Master_Receive+0x1e4>)
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fb5c 	bl	8007704 <I2C_TransferConfig>
 800704c:	e06d      	b.n	800712a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705c:	b2da      	uxtb	r2, r3
 800705e:	8979      	ldrh	r1, [r7, #10]
 8007060:	4b49      	ldr	r3, [pc, #292]	; (8007188 <HAL_I2C_Master_Receive+0x1e4>)
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fb4b 	bl	8007704 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800706e:	e05c      	b.n	800712a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	6a39      	ldr	r1, [r7, #32]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fa73 	bl	8007560 <I2C_WaitOnRXNEFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e07c      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d034      	beq.n	800712a <HAL_I2C_Master_Receive+0x186>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d130      	bne.n	800712a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2200      	movs	r2, #0
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f987 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e04d      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2bff      	cmp	r3, #255	; 0xff
 80070ea:	d90e      	bls.n	800710a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	22ff      	movs	r2, #255	; 0xff
 80070f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	8979      	ldrh	r1, [r7, #10]
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fafe 	bl	8007704 <I2C_TransferConfig>
 8007108:	e00f      	b.n	800712a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007118:	b2da      	uxtb	r2, r3
 800711a:	8979      	ldrh	r1, [r7, #10]
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 faed 	bl	8007704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d19d      	bne.n	8007070 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	6a39      	ldr	r1, [r7, #32]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f9d4 	bl	80074e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e01a      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2220      	movs	r2, #32
 800714e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6859      	ldr	r1, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <HAL_I2C_Master_Receive+0x1e8>)
 800715c:	400b      	ands	r3, r1
 800715e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e000      	b.n	800717e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	80002400 	.word	0x80002400
 800718c:	fe00e800 	.word	0xfe00e800

08007190 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	f040 80f1 	bne.w	8007394 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c0:	d101      	bne.n	80071c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0e7      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_I2C_IsDeviceReady+0x44>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0e0      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2224      	movs	r2, #36	; 0x24
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <HAL_I2C_IsDeviceReady+0x72>
 80071f2:	897b      	ldrh	r3, [r7, #10]
 80071f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007200:	e004      	b.n	800720c <HAL_I2C_IsDeviceReady+0x7c>
 8007202:	897b      	ldrh	r3, [r7, #10]
 8007204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007208:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007212:	f7fe f933 	bl	800547c <HAL_GetTick>
 8007216:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	bf0c      	ite	eq
 8007226:	2301      	moveq	r3, #1
 8007228:	2300      	movne	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b10      	cmp	r3, #16
 800723a:	bf0c      	ite	eq
 800723c:	2301      	moveq	r3, #1
 800723e:	2300      	movne	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007244:	e034      	b.n	80072b0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724c:	d01a      	beq.n	8007284 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fe f915 	bl	800547c <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <HAL_I2C_IsDeviceReady+0xd4>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10f      	bne.n	8007284 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007270:	f043 0220 	orr.w	r2, r3, #32
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e088      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b20      	cmp	r3, #32
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80072b0:	7ffb      	ldrb	r3, [r7, #31]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d102      	bne.n	80072bc <HAL_I2C_IsDeviceReady+0x12c>
 80072b6:	7fbb      	ldrb	r3, [r7, #30]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0c4      	beq.n	8007246 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d01a      	beq.n	8007300 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	2120      	movs	r1, #32
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f886 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e058      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2220      	movs	r2, #32
 80072ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e04a      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	2120      	movs	r1, #32
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f86b 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e03d      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2210      	movs	r2, #16
 8007320:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2220      	movs	r2, #32
 8007328:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d118      	bne.n	8007364 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007340:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	2120      	movs	r1, #32
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f84a 	bl	80073e6 <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e01c      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2220      	movs	r2, #32
 8007362:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	3301      	adds	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	f63f af3b 	bhi.w	80071ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
  }
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d103      	bne.n	80073bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2200      	movs	r2, #0
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d007      	beq.n	80073da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0201 	orr.w	r2, r2, #1
 80073d8:	619a      	str	r2, [r3, #24]
  }
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	4613      	mov	r3, r2
 80073f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f6:	e022      	b.n	800743e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fe:	d01e      	beq.n	800743e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007400:	f7fe f83c 	bl	800547c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d113      	bne.n	800743e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f043 0220 	orr.w	r2, r3, #32
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e00f      	b.n	800745e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	429a      	cmp	r2, r3
 800745a:	d0cd      	beq.n	80073f8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007472:	e02c      	b.n	80074ce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f8dd 	bl	8007638 <I2C_IsAcknowledgeFailed>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e02a      	b.n	80074de <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800748e:	d01e      	beq.n	80074ce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007490:	f7fd fff4 	bl	800547c <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d113      	bne.n	80074ce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e007      	b.n	80074de <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d1cb      	bne.n	8007474 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074f2:	e028      	b.n	8007546 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f89d 	bl	8007638 <I2C_IsAcknowledgeFailed>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e026      	b.n	8007556 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007508:	f7fd ffb8 	bl	800547c <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d113      	bne.n	8007546 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	f043 0220 	orr.w	r2, r3, #32
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e007      	b.n	8007556 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b20      	cmp	r3, #32
 8007552:	d1cf      	bne.n	80074f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800756c:	e055      	b.n	800761a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f860 	bl	8007638 <I2C_IsAcknowledgeFailed>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e053      	b.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b20      	cmp	r3, #32
 800758e:	d129      	bne.n	80075e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b04      	cmp	r3, #4
 800759c:	d105      	bne.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e03f      	b.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2220      	movs	r2, #32
 80075b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6859      	ldr	r1, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4b1d      	ldr	r3, [pc, #116]	; (8007634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80075be:	400b      	ands	r3, r1
 80075c0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e022      	b.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e4:	f7fd ff4a 	bl	800547c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d302      	bcc.n	80075fa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10f      	bne.n	800761a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	f043 0220 	orr.w	r2, r3, #32
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e007      	b.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b04      	cmp	r3, #4
 8007626:	d1a2      	bne.n	800756e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	fe00e800 	.word	0xfe00e800

08007638 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b10      	cmp	r3, #16
 8007650:	d151      	bne.n	80076f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007652:	e022      	b.n	800769a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765a:	d01e      	beq.n	800769a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765c:	f7fd ff0e 	bl	800547c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	d302      	bcc.n	8007672 <I2C_IsAcknowledgeFailed+0x3a>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d113      	bne.n	800769a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e02e      	b.n	80076f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b20      	cmp	r3, #32
 80076a6:	d1d5      	bne.n	8007654 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2210      	movs	r2, #16
 80076ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2220      	movs	r2, #32
 80076b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fe70 	bl	800739e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <I2C_IsAcknowledgeFailed+0xc8>)
 80076ca:	400b      	ands	r3, r1
 80076cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	f043 0204 	orr.w	r2, r3, #4
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	fe00e800 	.word	0xfe00e800

08007704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	817b      	strh	r3, [r7, #10]
 8007712:	4613      	mov	r3, r2
 8007714:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	0d5b      	lsrs	r3, r3, #21
 8007720:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <I2C_TransferConfig+0x58>)
 8007726:	430b      	orrs	r3, r1
 8007728:	43db      	mvns	r3, r3
 800772a:	ea02 0103 	and.w	r1, r2, r3
 800772e:	897b      	ldrh	r3, [r7, #10]
 8007730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007734:	7a7b      	ldrb	r3, [r7, #9]
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	431a      	orrs	r2, r3
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	431a      	orrs	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	03ff63ff 	.word	0x03ff63ff

08007760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b20      	cmp	r3, #32
 8007774:	d138      	bne.n	80077e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007780:	2302      	movs	r3, #2
 8007782:	e032      	b.n	80077ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2224      	movs	r2, #36	; 0x24
 8007790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0201 	bic.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e000      	b.n	80077ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077e8:	2302      	movs	r3, #2
  }
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b20      	cmp	r3, #32
 800780a:	d139      	bne.n	8007880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007816:	2302      	movs	r3, #2
 8007818:	e033      	b.n	8007882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2224      	movs	r2, #36	; 0x24
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800788e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007890:	b08f      	sub	sp, #60	; 0x3c
 8007892:	af0a      	add	r7, sp, #40	; 0x28
 8007894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e116      	b.n	8007ace <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f00c fd1c 	bl	80142f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2203      	movs	r2, #3
 80078c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f006 fd19 	bl	800e316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	687e      	ldr	r6, [r7, #4]
 80078ec:	466d      	mov	r5, sp
 80078ee:	f106 0410 	add.w	r4, r6, #16
 80078f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8007902:	1d33      	adds	r3, r6, #4
 8007904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007906:	6838      	ldr	r0, [r7, #0]
 8007908:	f006 fc06 	bl	800e118 <USB_CoreInit>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0d7      	b.n	8007ace <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f006 fd07 	bl	800e338 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
 800792e:	e04a      	b.n	80079c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007930:	7bfa      	ldrb	r2, [r7, #15]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	333d      	adds	r3, #61	; 0x3d
 8007940:	2201      	movs	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007944:	7bfa      	ldrb	r2, [r7, #15]
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4613      	mov	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	1a9b      	subs	r3, r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	333c      	adds	r3, #60	; 0x3c
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007958:	7bfa      	ldrb	r2, [r7, #15]
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	b298      	uxth	r0, r3
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	3342      	adds	r3, #66	; 0x42
 800796c:	4602      	mov	r2, r0
 800796e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	333f      	adds	r3, #63	; 0x3f
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007984:	7bfa      	ldrb	r2, [r7, #15]
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	3344      	adds	r3, #68	; 0x44
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007998:	7bfa      	ldrb	r2, [r7, #15]
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	3348      	adds	r3, #72	; 0x48
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80079ac:	7bfa      	ldrb	r2, [r7, #15]
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	3350      	adds	r3, #80	; 0x50
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	3301      	adds	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
 80079c6:	7bfa      	ldrb	r2, [r7, #15]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d3af      	bcc.n	8007930 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
 80079d4:	e044      	b.n	8007a60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80079d6:	7bfa      	ldrb	r2, [r7, #15]
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80079ec:	7bfa      	ldrb	r2, [r7, #15]
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80079fe:	7bfa      	ldrb	r2, [r7, #15]
 8007a00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007a02:	7bfa      	ldrb	r2, [r7, #15]
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007a18:	7bfa      	ldrb	r2, [r7, #15]
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a2e:	7bfa      	ldrb	r2, [r7, #15]
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d3b5      	bcc.n	80079d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	687e      	ldr	r6, [r7, #4]
 8007a72:	466d      	mov	r5, sp
 8007a74:	f106 0410 	add.w	r4, r6, #16
 8007a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a84:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a88:	1d33      	adds	r3, r6, #4
 8007a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a8c:	6838      	ldr	r0, [r7, #0]
 8007a8e:	f006 fc7d 	bl	800e38c <USB_DevInit>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e014      	b.n	8007ace <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d102      	bne.n	8007ac2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 ff61 	bl	8008984 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f007 fbf6 	bl	800f2b8 <USB_DevDisconnect>

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ad6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_PCD_Start+0x1c>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e01c      	b.n	8007b2c <HAL_PCD_Start+0x56>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d105      	bne.n	8007b0e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f007 fbb8 	bl	800f288 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f006 fbe9 	bl	800e2f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b08d      	sub	sp, #52	; 0x34
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f007 fc5f 	bl	800f40e <USB_GetMode>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 838f 	bne.w	8008276 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f007 fbc3 	bl	800f2e8 <USB_ReadInterrupts>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8385 	beq.w	8008274 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f007 fbba 	bl	800f2e8 <USB_ReadInterrupts>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d107      	bne.n	8007b8e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f002 0202 	and.w	r2, r2, #2
 8007b8c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f007 fba8 	bl	800f2e8 <USB_ReadInterrupts>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d161      	bne.n	8007c66 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0210 	bic.w	r2, r2, #16
 8007bb0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f003 020f 	and.w	r2, r3, #15
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	0c5b      	lsrs	r3, r3, #17
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d124      	bne.n	8007c28 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007be4:	4013      	ands	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d035      	beq.n	8007c56 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6a38      	ldr	r0, [r7, #32]
 8007bfe:	f007 fa20 	bl	800f042 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c0e:	441a      	add	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c20:	441a      	add	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	619a      	str	r2, [r3, #24]
 8007c26:	e016      	b.n	8007c56 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	0c5b      	lsrs	r3, r3, #17
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d110      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6a38      	ldr	r0, [r7, #32]
 8007c40:	f007 f9ff 	bl	800f042 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	091b      	lsrs	r3, r3, #4
 8007c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c50:	441a      	add	r2, r3
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0210 	orr.w	r2, r2, #16
 8007c64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f007 fb3c 	bl	800f2e8 <USB_ReadInterrupts>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c7a:	d16e      	bne.n	8007d5a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f007 fb42 	bl	800f30e <USB_ReadDevAllOutEpInterrupt>
 8007c8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007c8c:	e062      	b.n	8007d54 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d057      	beq.n	8007d48 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f007 fb67 	bl	800f376 <USB_ReadDevOutEPInterrupt>
 8007ca8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00c      	beq.n	8007cce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fd81 	bl	80087d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	2308      	movs	r3, #8
 8007ce8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fdbd 	bl	800886c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d24:	461a      	mov	r2, r3
 8007d26:	2320      	movs	r3, #32
 8007d28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d40:	461a      	mov	r2, r3
 8007d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	085b      	lsrs	r3, r3, #1
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d199      	bne.n	8007c8e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f007 fac2 	bl	800f2e8 <USB_ReadInterrupts>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d6e:	f040 8087 	bne.w	8007e80 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f007 fae3 	bl	800f342 <USB_ReadDevAllInEpInterrupt>
 8007d7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007d82:	e07a      	b.n	8007e7a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d06f      	beq.n	8007e6e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f007 fb0a 	bl	800f3b2 <USB_ReadDevInEPInterrupt>
 8007d9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d020      	beq.n	8007dec <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	2201      	movs	r2, #1
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	43db      	mvns	r3, r3
 8007dc4:	69f9      	ldr	r1, [r7, #28]
 8007dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dca:	4013      	ands	r3, r2
 8007dcc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2301      	movs	r3, #1
 8007dde:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f00c fb19 	bl	801441e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e02:	461a      	mov	r2, r3
 8007e04:	2308      	movs	r3, #8
 8007e06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	461a      	mov	r2, r3
 8007e20:	2310      	movs	r3, #16
 8007e22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e56:	461a      	mov	r2, r3
 8007e58:	2302      	movs	r3, #2
 8007e5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fc29 	bl	80086c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	3301      	adds	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d181      	bne.n	8007d84 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f007 fa2f 	bl	800f2e8 <USB_ReadInterrupts>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e94:	d122      	bne.n	8007edc <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d108      	bne.n	8007ec6 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f00c fdca 	bl	8014a58 <HAL_PCDEx_LPM_Callback>
 8007ec4:	e002      	b.n	8007ecc <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f00c fb16 	bl	80144f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f007 fa01 	bl	800f2e8 <USB_ReadInterrupts>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef0:	d112      	bne.n	8007f18 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d102      	bne.n	8007f08 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f00c fad2 	bl	80144ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	695a      	ldr	r2, [r3, #20]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007f16:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f007 f9e3 	bl	800f2e8 <USB_ReadInterrupts>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f2c:	d121      	bne.n	8007f72 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007f3c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d111      	bne.n	8007f6c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	089b      	lsrs	r3, r3, #2
 8007f58:	f003 020f 	and.w	r2, r3, #15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f62:	2101      	movs	r1, #1
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f00c fd77 	bl	8014a58 <HAL_PCDEx_LPM_Callback>
 8007f6a:	e002      	b.n	8007f72 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f00c fa9d 	bl	80144ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f007 f9b6 	bl	800f2e8 <USB_ReadInterrupts>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	f040 80c5 	bne.w	8008114 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2110      	movs	r1, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f006 fb3d 	bl	800e624 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fae:	e056      	b.n	800805e <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fc2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fe2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008002:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008010:	461a      	mov	r2, r3
 8008012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008016:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008036:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008056:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	3301      	adds	r3, #1
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008064:	429a      	cmp	r2, r3
 8008066:	d3a3      	bcc.n	8007fb0 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008076:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800807a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d016      	beq.n	80080b2 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008094:	f043 030b 	orr.w	r3, r3, #11
 8008098:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080aa:	f043 030b 	orr.w	r3, r3, #11
 80080ae:	6453      	str	r3, [r2, #68]	; 0x44
 80080b0:	e015      	b.n	80080de <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80080c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080d8:	f043 030b 	orr.w	r3, r3, #11
 80080dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f007 f9b6 	bl	800f470 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695a      	ldr	r2, [r3, #20]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4618      	mov	r0, r3
 800811a:	f007 f8e5 	bl	800f2e8 <USB_ReadInterrupts>
 800811e:	4603      	mov	r3, r0
 8008120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008128:	d124      	bne.n	8008174 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f007 f97b 	bl	800f42a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f006 fad4 	bl	800e6e6 <USB_GetDevSpeed>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681c      	ldr	r4, [r3, #0]
 800814a:	f001 fb33 	bl	80097b4 <HAL_RCC_GetHCLKFreq>
 800814e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	4620      	mov	r0, r4
 800815a:	f006 f82f 	bl	800e1bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f00c f985 	bl	801446e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695a      	ldr	r2, [r3, #20]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008172:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4618      	mov	r0, r3
 800817a:	f007 f8b5 	bl	800f2e8 <USB_ReadInterrupts>
 800817e:	4603      	mov	r3, r0
 8008180:	f003 0308 	and.w	r3, r3, #8
 8008184:	2b08      	cmp	r3, #8
 8008186:	d10a      	bne.n	800819e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f00c f962 	bl	8014452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695a      	ldr	r2, [r3, #20]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f002 0208 	and.w	r2, r2, #8
 800819c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f007 f8a0 	bl	800f2e8 <USB_ReadInterrupts>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b2:	d10f      	bne.n	80081d4 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f00c f9d4 	bl	801456c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695a      	ldr	r2, [r3, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80081d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f007 f885 	bl	800f2e8 <USB_ReadInterrupts>
 80081de:	4603      	mov	r3, r0
 80081e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081e8:	d10f      	bne.n	800820a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f00c f9a7 	bl	8014548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695a      	ldr	r2, [r3, #20]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f007 f86a 	bl	800f2e8 <USB_ReadInterrupts>
 8008214:	4603      	mov	r3, r0
 8008216:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d10a      	bne.n	8008236 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f00c f9b5 	bl	8014590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f007 f854 	bl	800f2e8 <USB_ReadInterrupts>
 8008240:	4603      	mov	r3, r0
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b04      	cmp	r3, #4
 8008248:	d115      	bne.n	8008276 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f00c f9a5 	bl	80145ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6859      	ldr	r1, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	430a      	orrs	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	e000      	b.n	8008276 <HAL_PCD_IRQHandler+0x742>
      return;
 8008274:	bf00      	nop
    }
  }
}
 8008276:	3734      	adds	r7, #52	; 0x34
 8008278:	46bd      	mov	sp, r7
 800827a:	bd90      	pop	{r4, r7, pc}

0800827c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_PCD_SetAddress+0x1a>
 8008292:	2302      	movs	r3, #2
 8008294:	e013      	b.n	80082be <HAL_PCD_SetAddress+0x42>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	78fa      	ldrb	r2, [r7, #3]
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f006 ffc4 	bl	800f23c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	461a      	mov	r2, r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	70fb      	strb	r3, [r7, #3]
 80082d8:	460b      	mov	r3, r1
 80082da:	803b      	strh	r3, [r7, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da0f      	bge.n	800830c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	f003 020f 	and.w	r2, r3, #15
 80082f2:	4613      	mov	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	3338      	adds	r3, #56	; 0x38
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4413      	add	r3, r2
 8008300:	3304      	adds	r3, #4
 8008302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	705a      	strb	r2, [r3, #1]
 800830a:	e00f      	b.n	800832c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	f003 020f 	and.w	r2, r3, #15
 8008312:	4613      	mov	r3, r2
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	3304      	adds	r3, #4
 8008324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	b2da      	uxtb	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008338:	883a      	ldrh	r2, [r7, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	78ba      	ldrb	r2, [r7, #2]
 8008342:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008356:	78bb      	ldrb	r3, [r7, #2]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d102      	bne.n	8008362 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_PCD_EP_Open+0xaa>
 800836c:	2302      	movs	r3, #2
 800836e:	e00e      	b.n	800838e <HAL_PCD_EP_Open+0xc8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	4618      	mov	r0, r3
 8008380:	f006 f9d0 	bl	800e724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800838c:	7afb      	ldrb	r3, [r7, #11]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da0f      	bge.n	80083ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	3338      	adds	r3, #56	; 0x38
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	3304      	adds	r3, #4
 80083c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	705a      	strb	r2, [r3, #1]
 80083c8:	e00f      	b.n	80083ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	f003 020f 	and.w	r2, r3, #15
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4413      	add	r3, r2
 80083e0:	3304      	adds	r3, #4
 80083e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_PCD_EP_Close+0x6e>
 8008400:	2302      	movs	r3, #2
 8008402:	e00e      	b.n	8008422 <HAL_PCD_EP_Close+0x8c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68f9      	ldr	r1, [r7, #12]
 8008412:	4618      	mov	r0, r3
 8008414:	f006 fa0e 	bl	800e834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
 8008436:	460b      	mov	r3, r1
 8008438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	4613      	mov	r3, r2
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	3304      	adds	r3, #4
 8008452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2200      	movs	r2, #0
 8008464:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	b2da      	uxtb	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	4618      	mov	r0, r3
 800848a:	f006 fc8b 	bl	800eda4 <USB_EP0StartXfer>
 800848e:	e005      	b.n	800849c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6979      	ldr	r1, [r7, #20]
 8008496:	4618      	mov	r0, r3
 8008498:	f006 faa8 	bl	800e9ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	f003 020f 	and.w	r2, r3, #15
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80084c8:	681b      	ldr	r3, [r3, #0]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	460b      	mov	r3, r1
 80084e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	4613      	mov	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	3338      	adds	r3, #56	; 0x38
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2201      	movs	r2, #1
 8008514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	b2da      	uxtb	r2, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6979      	ldr	r1, [r7, #20]
 8008532:	4618      	mov	r0, r3
 8008534:	f006 fc36 	bl	800eda4 <USB_EP0StartXfer>
 8008538:	e005      	b.n	8008546 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6979      	ldr	r1, [r7, #20]
 8008540:	4618      	mov	r0, r3
 8008542:	f006 fa53 	bl	800e9ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	f003 020f 	and.w	r2, r3, #15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d901      	bls.n	800856e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e04e      	b.n	800860c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800856e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008572:	2b00      	cmp	r3, #0
 8008574:	da0f      	bge.n	8008596 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	3338      	adds	r3, #56	; 0x38
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	705a      	strb	r2, [r3, #1]
 8008594:	e00d      	b.n	80085b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	4613      	mov	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4413      	add	r3, r2
 80085a8:	3304      	adds	r3, #4
 80085aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_PCD_EP_SetStall+0x82>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e01c      	b.n	800860c <HAL_PCD_EP_SetStall+0xbc>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f006 fd57 	bl	800f094 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d108      	bne.n	8008602 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f006 ff37 	bl	800f470 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f003 020f 	and.w	r2, r3, #15
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	429a      	cmp	r2, r3
 800862c:	d901      	bls.n	8008632 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e042      	b.n	80086b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da0f      	bge.n	800865a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	3338      	adds	r3, #56	; 0x38
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	3304      	adds	r3, #4
 8008650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	705a      	strb	r2, [r3, #1]
 8008658:	e00f      	b.n	800867a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	4613      	mov	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4413      	add	r3, r2
 8008670:	3304      	adds	r3, #4
 8008672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	b2da      	uxtb	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008692:	2b01      	cmp	r3, #1
 8008694:	d101      	bne.n	800869a <HAL_PCD_EP_ClrStall+0x86>
 8008696:	2302      	movs	r3, #2
 8008698:	e00e      	b.n	80086b8 <HAL_PCD_EP_ClrStall+0xa4>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f006 fd61 	bl	800f170 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	3338      	adds	r3, #56	; 0x38
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d901      	bls.n	80086f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e067      	b.n	80087c8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	429a      	cmp	r2, r3
 800870c:	d902      	bls.n	8008714 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	3303      	adds	r3, #3
 8008718:	089b      	lsrs	r3, r3, #2
 800871a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800871c:	e026      	b.n	800876c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	429a      	cmp	r2, r3
 8008732:	d902      	bls.n	800873a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	3303      	adds	r3, #3
 800873e:	089b      	lsrs	r3, r3, #2
 8008740:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68d9      	ldr	r1, [r3, #12]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	b2da      	uxtb	r2, r3
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	b29b      	uxth	r3, r3
 800874e:	6978      	ldr	r0, [r7, #20]
 8008750:	f006 fc46 	bl	800efe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	441a      	add	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	441a      	add	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	b29b      	uxth	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	429a      	cmp	r2, r3
 8008780:	d809      	bhi.n	8008796 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800878a:	429a      	cmp	r2, r3
 800878c:	d203      	bcs.n	8008796 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1c3      	bne.n	800871e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d811      	bhi.n	80087c6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	2201      	movs	r2, #1
 80087aa:	fa02 f303 	lsl.w	r3, r2, r3
 80087ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	43db      	mvns	r3, r3
 80087bc:	6939      	ldr	r1, [r7, #16]
 80087be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c2:	4013      	ands	r3, r2
 80087c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	333c      	adds	r3, #60	; 0x3c
 80087e8:	3304      	adds	r3, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4a19      	ldr	r2, [pc, #100]	; (8008868 <PCD_EP_OutXfrComplete_int+0x98>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d124      	bne.n	8008850 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	461a      	mov	r2, r3
 800881e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008822:	6093      	str	r3, [r2, #8]
 8008824:	e01a      	b.n	800885c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2320      	movs	r3, #32
 8008840:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f00b fdcd 	bl	80143e8 <HAL_PCD_DataOutStageCallback>
 800884e:	e005      	b.n	800885c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f00b fdc6 	bl	80143e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	4f54310a 	.word	0x4f54310a

0800886c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	333c      	adds	r3, #60	; 0x3c
 8008884:	3304      	adds	r3, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <PCD_EP_OutSetupPacket_int+0x64>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d90e      	bls.n	80088c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	461a      	mov	r2, r3
 80088ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f00b fd7f 	bl	80143c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	4f54300a 	.word	0x4f54300a

080088d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
 80088e0:	4613      	mov	r3, r2
 80088e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d107      	bne.n	8008902 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80088f2:	883b      	ldrh	r3, [r7, #0]
 80088f4:	0419      	lsls	r1, r3, #16
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008900:	e028      	b.n	8008954 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	0c1b      	lsrs	r3, r3, #16
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e00d      	b.n	8008932 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	3340      	adds	r3, #64	; 0x40
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	3301      	adds	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
 8008932:	7bfa      	ldrb	r2, [r7, #15]
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	3b01      	subs	r3, #1
 8008938:	429a      	cmp	r2, r3
 800893a:	d3ec      	bcc.n	8008916 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800893c:	883b      	ldrh	r3, [r7, #0]
 800893e:	0418      	lsls	r0, r3, #16
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	3b01      	subs	r3, #1
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4302      	orrs	r2, r0
 800894c:	3340      	adds	r3, #64	; 0x40
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	887a      	ldrh	r2, [r7, #2]
 8008974:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b6:	f043 0303 	orr.w	r3, r3, #3
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a04      	ldr	r2, [pc, #16]	; (80089e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089da:	6013      	str	r3, [r2, #0]
}
 80089dc:	bf00      	nop
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40007000 	.word	0x40007000

080089ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40007000 	.word	0x40007000

08008a08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a16:	d130      	bne.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a18:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a24:	d038      	beq.n	8008a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a26:	4b20      	ldr	r3, [pc, #128]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a36:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2232      	movs	r2, #50	; 0x32
 8008a3c:	fb02 f303 	mul.w	r3, r2, r3
 8008a40:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	0c9b      	lsrs	r3, r3, #18
 8008a48:	3301      	adds	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a4c:	e002      	b.n	8008a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a54:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a60:	d102      	bne.n	8008a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f2      	bne.n	8008a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a74:	d110      	bne.n	8008a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e00f      	b.n	8008a9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a86:	d007      	beq.n	8008a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a90:	4a05      	ldr	r2, [pc, #20]	; (8008aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40007000 	.word	0x40007000
 8008aac:	20000058 	.word	0x20000058
 8008ab0:	431bde83 	.word	0x431bde83

08008ab4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4a04      	ldr	r2, [pc, #16]	; (8008ad0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ac2:	6053      	str	r3, [r2, #4]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40007000 	.word	0x40007000

08008ad4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	4a04      	ldr	r2, [pc, #16]	; (8008af0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ae2:	6053      	str	r3, [r2, #4]
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40007000 	.word	0x40007000

08008af4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008afc:	f7fc fcbe 	bl	800547c <HAL_GetTick>
 8008b00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e075      	b.n	8008bf8 <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_QSPI_Init+0x28>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e06d      	b.n	8008bf8 <HAL_QSPI_Init+0x104>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10b      	bne.n	8008b48 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fc f81d 	bl	8004b78 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008b3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f85e 	bl	8008c04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	021a      	lsls	r2, r3, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2120      	movs	r1, #32
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f856 	bl	8008c20 <QSPI_WaitFlagStateUntilTimeout>
 8008b74:	4603      	mov	r3, r0
 8008b76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d137      	bne.n	8008bee <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b88:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6852      	ldr	r2, [r2, #4]
 8008b90:	0611      	lsls	r1, r2, #24
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68d2      	ldr	r2, [r2, #12]
 8008b96:	4311      	orrs	r1, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	69d2      	ldr	r2, [r2, #28]
 8008b9c:	4311      	orrs	r1, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6a12      	ldr	r2, [r2, #32]
 8008ba2:	4311      	orrs	r1, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <HAL_QSPI_Init+0x10c>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6912      	ldr	r2, [r2, #16]
 8008bba:	0411      	lsls	r1, r2, #16
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6952      	ldr	r2, [r2, #20]
 8008bc0:	4311      	orrs	r1, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6992      	ldr	r2, [r2, #24]
 8008bc6:	4311      	orrs	r1, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	ffe0f8fe 	.word	0xffe0f8fe

08008c04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008c30:	e01a      	b.n	8008c68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c38:	d016      	beq.n	8008c68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3a:	f7fc fc1f 	bl	800547c <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2204      	movs	r2, #4
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	f043 0201 	orr.w	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e00e      	b.n	8008c86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	4013      	ands	r3, r2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d1d6      	bne.n	8008c32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f000 bc16 	b.w	80094d0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ca4:	4ba0      	ldr	r3, [pc, #640]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 030c 	and.w	r3, r3, #12
 8008cac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cae:	4b9e      	ldr	r3, [pc, #632]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80e4 	beq.w	8008e8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_RCC_OscConfig+0x4c>
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b0c      	cmp	r3, #12
 8008cd0:	f040 808b 	bne.w	8008dea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	f040 8087 	bne.w	8008dea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008cdc:	4b92      	ldr	r3, [pc, #584]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x64>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e3ed      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1a      	ldr	r2, [r3, #32]
 8008cf8:	4b8b      	ldr	r3, [pc, #556]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <HAL_RCC_OscConfig+0x7e>
 8008d04:	4b88      	ldr	r3, [pc, #544]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d0c:	e005      	b.n	8008d1a <HAL_RCC_OscConfig+0x8a>
 8008d0e:	4b86      	ldr	r3, [pc, #536]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d14:	091b      	lsrs	r3, r3, #4
 8008d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d223      	bcs.n	8008d66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fdb0 	bl	8009888 <RCC_SetFlashLatencyFromMSIRange>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e3ce      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d32:	4b7d      	ldr	r3, [pc, #500]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7c      	ldr	r2, [pc, #496]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d38:	f043 0308 	orr.w	r3, r3, #8
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	4b7a      	ldr	r3, [pc, #488]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	4977      	ldr	r1, [pc, #476]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d50:	4b75      	ldr	r3, [pc, #468]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	4972      	ldr	r1, [pc, #456]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	e025      	b.n	8008db2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d66:	4b70      	ldr	r3, [pc, #448]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a6f      	ldr	r2, [pc, #444]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d6c:	f043 0308 	orr.w	r3, r3, #8
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	4b6d      	ldr	r3, [pc, #436]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	496a      	ldr	r1, [pc, #424]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d84:	4b68      	ldr	r3, [pc, #416]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	4965      	ldr	r1, [pc, #404]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d109      	bne.n	8008db2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fd70 	bl	8009888 <RCC_SetFlashLatencyFromMSIRange>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e38e      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008db2:	f000 fc75 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 8008db6:	4601      	mov	r1, r0
 8008db8:	4b5b      	ldr	r3, [pc, #364]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	091b      	lsrs	r3, r3, #4
 8008dbe:	f003 030f 	and.w	r3, r3, #15
 8008dc2:	4a5a      	ldr	r2, [pc, #360]	; (8008f2c <HAL_RCC_OscConfig+0x29c>)
 8008dc4:	5cd3      	ldrb	r3, [r2, r3]
 8008dc6:	f003 031f 	and.w	r3, r3, #31
 8008dca:	fa21 f303 	lsr.w	r3, r1, r3
 8008dce:	4a58      	ldr	r2, [pc, #352]	; (8008f30 <HAL_RCC_OscConfig+0x2a0>)
 8008dd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008dd2:	4b58      	ldr	r3, [pc, #352]	; (8008f34 <HAL_RCC_OscConfig+0x2a4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fc f8e6 	bl	8004fa8 <HAL_InitTick>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d052      	beq.n	8008e8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	e372      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d032      	beq.n	8008e58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008df2:	4b4d      	ldr	r3, [pc, #308]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a4c      	ldr	r2, [pc, #304]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008dfe:	f7fc fb3d 	bl	800547c <HAL_GetTick>
 8008e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e04:	e008      	b.n	8008e18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e06:	f7fc fb39 	bl	800547c <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d901      	bls.n	8008e18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e35b      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e18:	4b43      	ldr	r3, [pc, #268]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0f0      	beq.n	8008e06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e24:	4b40      	ldr	r3, [pc, #256]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a3f      	ldr	r2, [pc, #252]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e2a:	f043 0308 	orr.w	r3, r3, #8
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	4b3d      	ldr	r3, [pc, #244]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	493a      	ldr	r1, [pc, #232]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e42:	4b39      	ldr	r3, [pc, #228]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	4935      	ldr	r1, [pc, #212]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	604b      	str	r3, [r1, #4]
 8008e56:	e01a      	b.n	8008e8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e58:	4b33      	ldr	r3, [pc, #204]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a32      	ldr	r2, [pc, #200]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e64:	f7fc fb0a 	bl	800547c <HAL_GetTick>
 8008e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e6c:	f7fc fb06 	bl	800547c <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e328      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e7e:	4b2a      	ldr	r3, [pc, #168]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1f0      	bne.n	8008e6c <HAL_RCC_OscConfig+0x1dc>
 8008e8a:	e000      	b.n	8008e8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d073      	beq.n	8008f82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d005      	beq.n	8008eac <HAL_RCC_OscConfig+0x21c>
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2b0c      	cmp	r3, #12
 8008ea4:	d10e      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d10b      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eac:	4b1e      	ldr	r3, [pc, #120]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d063      	beq.n	8008f80 <HAL_RCC_OscConfig+0x2f0>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d15f      	bne.n	8008f80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e305      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ecc:	d106      	bne.n	8008edc <HAL_RCC_OscConfig+0x24c>
 8008ece:	4b16      	ldr	r3, [pc, #88]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e01d      	b.n	8008f18 <HAL_RCC_OscConfig+0x288>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ee4:	d10c      	bne.n	8008f00 <HAL_RCC_OscConfig+0x270>
 8008ee6:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a0f      	ldr	r2, [pc, #60]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	e00b      	b.n	8008f18 <HAL_RCC_OscConfig+0x288>
 8008f00:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a08      	ldr	r2, [pc, #32]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <HAL_RCC_OscConfig+0x298>)
 8008f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01b      	beq.n	8008f58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fc faac 	bl	800547c <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f26:	e010      	b.n	8008f4a <HAL_RCC_OscConfig+0x2ba>
 8008f28:	40021000 	.word	0x40021000
 8008f2c:	08017f34 	.word	0x08017f34
 8008f30:	20000058 	.word	0x20000058
 8008f34:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f38:	f7fc faa0 	bl	800547c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b64      	cmp	r3, #100	; 0x64
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e2c2      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f4a:	4baf      	ldr	r3, [pc, #700]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x2a8>
 8008f56:	e014      	b.n	8008f82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f58:	f7fc fa90 	bl	800547c <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f60:	f7fc fa8c 	bl	800547c <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b64      	cmp	r3, #100	; 0x64
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e2ae      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f72:	4ba5      	ldr	r3, [pc, #660]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1f0      	bne.n	8008f60 <HAL_RCC_OscConfig+0x2d0>
 8008f7e:	e000      	b.n	8008f82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d060      	beq.n	8009050 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d005      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x310>
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b0c      	cmp	r3, #12
 8008f98:	d119      	bne.n	8008fce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d116      	bne.n	8008fce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa0:	4b99      	ldr	r3, [pc, #612]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x328>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e28b      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fb8:	4b93      	ldr	r3, [pc, #588]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	4990      	ldr	r1, [pc, #576]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fcc:	e040      	b.n	8009050 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d023      	beq.n	800901e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fd6:	4b8c      	ldr	r3, [pc, #560]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a8b      	ldr	r2, [pc, #556]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe2:	f7fc fa4b 	bl	800547c <HAL_GetTick>
 8008fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fea:	f7fc fa47 	bl	800547c <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e269      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ffc:	4b82      	ldr	r3, [pc, #520]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0f0      	beq.n	8008fea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009008:	4b7f      	ldr	r3, [pc, #508]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	061b      	lsls	r3, r3, #24
 8009016:	497c      	ldr	r1, [pc, #496]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009018:	4313      	orrs	r3, r2
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	e018      	b.n	8009050 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800901e:	4b7a      	ldr	r3, [pc, #488]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a79      	ldr	r2, [pc, #484]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902a:	f7fc fa27 	bl	800547c <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009032:	f7fc fa23 	bl	800547c <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e245      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009044:	4b70      	ldr	r3, [pc, #448]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f0      	bne.n	8009032 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0308 	and.w	r3, r3, #8
 8009058:	2b00      	cmp	r3, #0
 800905a:	d03c      	beq.n	80090d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d01c      	beq.n	800909e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009064:	4b68      	ldr	r3, [pc, #416]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800906a:	4a67      	ldr	r2, [pc, #412]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009074:	f7fc fa02 	bl	800547c <HAL_GetTick>
 8009078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800907c:	f7fc f9fe 	bl	800547c <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e220      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800908e:	4b5e      	ldr	r3, [pc, #376]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0ef      	beq.n	800907c <HAL_RCC_OscConfig+0x3ec>
 800909c:	e01b      	b.n	80090d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800909e:	4b5a      	ldr	r3, [pc, #360]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090a4:	4a58      	ldr	r2, [pc, #352]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090a6:	f023 0301 	bic.w	r3, r3, #1
 80090aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ae:	f7fc f9e5 	bl	800547c <HAL_GetTick>
 80090b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090b6:	f7fc f9e1 	bl	800547c <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e203      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090c8:	4b4f      	ldr	r3, [pc, #316]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1ef      	bne.n	80090b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 80a6 	beq.w	8009230 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090e4:	2300      	movs	r3, #0
 80090e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80090e8:	4b47      	ldr	r3, [pc, #284]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10d      	bne.n	8009110 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090f4:	4b44      	ldr	r3, [pc, #272]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f8:	4a43      	ldr	r2, [pc, #268]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80090fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009100:	4b41      	ldr	r3, [pc, #260]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009108:	60bb      	str	r3, [r7, #8]
 800910a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800910c:	2301      	movs	r3, #1
 800910e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009110:	4b3e      	ldr	r3, [pc, #248]	; (800920c <HAL_RCC_OscConfig+0x57c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d118      	bne.n	800914e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800911c:	4b3b      	ldr	r3, [pc, #236]	; (800920c <HAL_RCC_OscConfig+0x57c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a3a      	ldr	r2, [pc, #232]	; (800920c <HAL_RCC_OscConfig+0x57c>)
 8009122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009128:	f7fc f9a8 	bl	800547c <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009130:	f7fc f9a4 	bl	800547c <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e1c6      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009142:	4b32      	ldr	r3, [pc, #200]	; (800920c <HAL_RCC_OscConfig+0x57c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0f0      	beq.n	8009130 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d108      	bne.n	8009168 <HAL_RCC_OscConfig+0x4d8>
 8009156:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915c:	4a2a      	ldr	r2, [pc, #168]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009166:	e024      	b.n	80091b2 <HAL_RCC_OscConfig+0x522>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b05      	cmp	r3, #5
 800916e:	d110      	bne.n	8009192 <HAL_RCC_OscConfig+0x502>
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009176:	4a24      	ldr	r2, [pc, #144]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009178:	f043 0304 	orr.w	r3, r3, #4
 800917c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009180:	4b21      	ldr	r3, [pc, #132]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009186:	4a20      	ldr	r2, [pc, #128]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009188:	f043 0301 	orr.w	r3, r3, #1
 800918c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009190:	e00f      	b.n	80091b2 <HAL_RCC_OscConfig+0x522>
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 8009194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009198:	4a1b      	ldr	r2, [pc, #108]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80091a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a8:	4a17      	ldr	r2, [pc, #92]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80091aa:	f023 0304 	bic.w	r3, r3, #4
 80091ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d016      	beq.n	80091e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ba:	f7fc f95f 	bl	800547c <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091c0:	e00a      	b.n	80091d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091c2:	f7fc f95b 	bl	800547c <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e17b      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091d8:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <HAL_RCC_OscConfig+0x578>)
 80091da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0ed      	beq.n	80091c2 <HAL_RCC_OscConfig+0x532>
 80091e6:	e01a      	b.n	800921e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e8:	f7fc f948 	bl	800547c <HAL_GetTick>
 80091ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091ee:	e00f      	b.n	8009210 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f0:	f7fc f944 	bl	800547c <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fe:	4293      	cmp	r3, r2
 8009200:	d906      	bls.n	8009210 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e164      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
 8009206:	bf00      	nop
 8009208:	40021000 	.word	0x40021000
 800920c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009210:	4ba8      	ldr	r3, [pc, #672]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e8      	bne.n	80091f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800921e:	7ffb      	ldrb	r3, [r7, #31]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d105      	bne.n	8009230 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009224:	4ba3      	ldr	r3, [pc, #652]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009228:	4aa2      	ldr	r2, [pc, #648]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800922a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800922e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0320 	and.w	r3, r3, #32
 8009238:	2b00      	cmp	r3, #0
 800923a:	d03c      	beq.n	80092b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01c      	beq.n	800927e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009244:	4b9b      	ldr	r3, [pc, #620]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800924a:	4a9a      	ldr	r2, [pc, #616]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800924c:	f043 0301 	orr.w	r3, r3, #1
 8009250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009254:	f7fc f912 	bl	800547c <HAL_GetTick>
 8009258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800925c:	f7fc f90e 	bl	800547c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e130      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800926e:	4b91      	ldr	r3, [pc, #580]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0ef      	beq.n	800925c <HAL_RCC_OscConfig+0x5cc>
 800927c:	e01b      	b.n	80092b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800927e:	4b8d      	ldr	r3, [pc, #564]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009284:	4a8b      	ldr	r2, [pc, #556]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928e:	f7fc f8f5 	bl	800547c <HAL_GetTick>
 8009292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009296:	f7fc f8f1 	bl	800547c <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e113      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092a8:	4b82      	ldr	r3, [pc, #520]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80092aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1ef      	bne.n	8009296 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8107 	beq.w	80094ce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f040 80cb 	bne.w	8009460 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80092ca:	4b7a      	ldr	r3, [pc, #488]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f003 0203 	and.w	r2, r3, #3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	429a      	cmp	r2, r3
 80092dc:	d12c      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	3b01      	subs	r3, #1
 80092ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d123      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d11b      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800930c:	429a      	cmp	r2, r3
 800930e:	d113      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	3b01      	subs	r3, #1
 800931e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009320:	429a      	cmp	r2, r3
 8009322:	d109      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932e:	085b      	lsrs	r3, r3, #1
 8009330:	3b01      	subs	r3, #1
 8009332:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009334:	429a      	cmp	r2, r3
 8009336:	d06d      	beq.n	8009414 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	2b0c      	cmp	r3, #12
 800933c:	d068      	beq.n	8009410 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800933e:	4b5d      	ldr	r3, [pc, #372]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800934a:	4b5a      	ldr	r3, [pc, #360]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e0ba      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800935a:	4b56      	ldr	r3, [pc, #344]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a55      	ldr	r2, [pc, #340]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009364:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009366:	f7fc f889 	bl	800547c <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800936c:	e008      	b.n	8009380 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800936e:	f7fc f885 	bl	800547c <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e0a7      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009380:	4b4c      	ldr	r3, [pc, #304]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1f0      	bne.n	800936e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800938c:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	4b49      	ldr	r3, [pc, #292]	; (80094b8 <HAL_RCC_OscConfig+0x828>)
 8009392:	4013      	ands	r3, r2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800939c:	3a01      	subs	r2, #1
 800939e:	0112      	lsls	r2, r2, #4
 80093a0:	4311      	orrs	r1, r2
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093a6:	0212      	lsls	r2, r2, #8
 80093a8:	4311      	orrs	r1, r2
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093ae:	0852      	lsrs	r2, r2, #1
 80093b0:	3a01      	subs	r2, #1
 80093b2:	0552      	lsls	r2, r2, #21
 80093b4:	4311      	orrs	r1, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80093ba:	0852      	lsrs	r2, r2, #1
 80093bc:	3a01      	subs	r2, #1
 80093be:	0652      	lsls	r2, r2, #25
 80093c0:	4311      	orrs	r1, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093c6:	06d2      	lsls	r2, r2, #27
 80093c8:	430a      	orrs	r2, r1
 80093ca:	493a      	ldr	r1, [pc, #232]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80093d0:	4b38      	ldr	r3, [pc, #224]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a37      	ldr	r2, [pc, #220]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80093d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093dc:	4b35      	ldr	r3, [pc, #212]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a34      	ldr	r2, [pc, #208]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 80093e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80093e8:	f7fc f848 	bl	800547c <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f0:	f7fc f844 	bl	800547c <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e066      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009402:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800940e:	e05e      	b.n	80094ce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e05d      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009414:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d156      	bne.n	80094ce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009420:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a23      	ldr	r2, [pc, #140]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800942a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800942c:	4b21      	ldr	r3, [pc, #132]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	4a20      	ldr	r2, [pc, #128]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009438:	f7fc f820 	bl	800547c <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009440:	f7fc f81c 	bl	800547c <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e03e      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009452:	4b18      	ldr	r3, [pc, #96]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0f0      	beq.n	8009440 <HAL_RCC_OscConfig+0x7b0>
 800945e:	e036      	b.n	80094ce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b0c      	cmp	r3, #12
 8009464:	d031      	beq.n	80094ca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a12      	ldr	r2, [pc, #72]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800946c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009470:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009472:	4b10      	ldr	r3, [pc, #64]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800947e:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <HAL_RCC_OscConfig+0x824>)
 8009490:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009498:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800949a:	f7fb ffef 	bl	800547c <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094a0:	e00c      	b.n	80094bc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094a2:	f7fb ffeb 	bl	800547c <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d905      	bls.n	80094bc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e00d      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
 80094b4:	40021000 	.word	0x40021000
 80094b8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <HAL_RCC_OscConfig+0x848>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1ec      	bne.n	80094a2 <HAL_RCC_OscConfig+0x812>
 80094c8:	e001      	b.n	80094ce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3720      	adds	r7, #32
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40021000 	.word	0x40021000

080094dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0c8      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	4b66      	ldr	r3, [pc, #408]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d910      	bls.n	8009520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b63      	ldr	r3, [pc, #396]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f023 0207 	bic.w	r2, r3, #7
 8009506:	4961      	ldr	r1, [pc, #388]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	4313      	orrs	r3, r2
 800950c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800950e:	4b5f      	ldr	r3, [pc, #380]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d001      	beq.n	8009520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e0b0      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d04c      	beq.n	80095c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b03      	cmp	r3, #3
 8009532:	d107      	bne.n	8009544 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009534:	4b56      	ldr	r3, [pc, #344]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d121      	bne.n	8009584 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e09e      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b02      	cmp	r3, #2
 800954a:	d107      	bne.n	800955c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800954c:	4b50      	ldr	r3, [pc, #320]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d115      	bne.n	8009584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e092      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d107      	bne.n	8009574 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009564:	4b4a      	ldr	r3, [pc, #296]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d109      	bne.n	8009584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e086      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009574:	4b46      	ldr	r3, [pc, #280]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e07e      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009584:	4b42      	ldr	r3, [pc, #264]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f023 0203 	bic.w	r2, r3, #3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	493f      	ldr	r1, [pc, #252]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009592:	4313      	orrs	r3, r2
 8009594:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009596:	f7fb ff71 	bl	800547c <HAL_GetTick>
 800959a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800959c:	e00a      	b.n	80095b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800959e:	f7fb ff6d 	bl	800547c <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d901      	bls.n	80095b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e066      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b4:	4b36      	ldr	r3, [pc, #216]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 020c 	and.w	r2, r3, #12
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d1eb      	bne.n	800959e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d008      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095d2:	4b2f      	ldr	r3, [pc, #188]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	492c      	ldr	r1, [pc, #176]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095e4:	4b29      	ldr	r3, [pc, #164]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d210      	bcs.n	8009614 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f2:	4b26      	ldr	r3, [pc, #152]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f023 0207 	bic.w	r2, r3, #7
 80095fa:	4924      	ldr	r1, [pc, #144]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	4313      	orrs	r3, r2
 8009600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <HAL_RCC_ClockConfig+0x1b0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d001      	beq.n	8009614 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e036      	b.n	8009682 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d008      	beq.n	8009632 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009620:	4b1b      	ldr	r3, [pc, #108]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	4918      	ldr	r1, [pc, #96]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 800962e:	4313      	orrs	r3, r2
 8009630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800963e:	4b14      	ldr	r3, [pc, #80]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4910      	ldr	r1, [pc, #64]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 800964e:	4313      	orrs	r3, r2
 8009650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009652:	f000 f825 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 8009656:	4601      	mov	r1, r0
 8009658:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <HAL_RCC_ClockConfig+0x1b4>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	091b      	lsrs	r3, r3, #4
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <HAL_RCC_ClockConfig+0x1b8>)
 8009664:	5cd3      	ldrb	r3, [r2, r3]
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	fa21 f303 	lsr.w	r3, r1, r3
 800966e:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <HAL_RCC_ClockConfig+0x1bc>)
 8009670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <HAL_RCC_ClockConfig+0x1c0>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f7fb fc96 	bl	8004fa8 <HAL_InitTick>
 800967c:	4603      	mov	r3, r0
 800967e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009680:	7afb      	ldrb	r3, [r7, #11]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40022000 	.word	0x40022000
 8009690:	40021000 	.word	0x40021000
 8009694:	08017f34 	.word	0x08017f34
 8009698:	20000058 	.word	0x20000058
 800969c:	2000005c 	.word	0x2000005c

080096a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b089      	sub	sp, #36	; 0x24
 80096a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	2300      	movs	r3, #0
 80096ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ae:	4b3d      	ldr	r3, [pc, #244]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 030c 	and.w	r3, r3, #12
 80096b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096b8:	4b3a      	ldr	r3, [pc, #232]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_GetSysClockFreq+0x34>
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b0c      	cmp	r3, #12
 80096cc:	d121      	bne.n	8009712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d11e      	bne.n	8009712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80096d4:	4b33      	ldr	r3, [pc, #204]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0308 	and.w	r3, r3, #8
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d107      	bne.n	80096f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80096e0:	4b30      	ldr	r3, [pc, #192]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80096e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	e005      	b.n	80096fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80096f0:	4b2c      	ldr	r3, [pc, #176]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	091b      	lsrs	r3, r3, #4
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80096fc:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009710:	e00a      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b04      	cmp	r3, #4
 8009716:	d102      	bne.n	800971e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009718:	4b24      	ldr	r3, [pc, #144]	; (80097ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800971a:	61bb      	str	r3, [r7, #24]
 800971c:	e004      	b.n	8009728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b08      	cmp	r3, #8
 8009722:	d101      	bne.n	8009728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009724:	4b22      	ldr	r3, [pc, #136]	; (80097b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b0c      	cmp	r3, #12
 800972c:	d133      	bne.n	8009796 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d002      	beq.n	8009744 <HAL_RCC_GetSysClockFreq+0xa4>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d003      	beq.n	800974a <HAL_RCC_GetSysClockFreq+0xaa>
 8009742:	e005      	b.n	8009750 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009744:	4b19      	ldr	r3, [pc, #100]	; (80097ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8009746:	617b      	str	r3, [r7, #20]
      break;
 8009748:	e005      	b.n	8009756 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800974a:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800974c:	617b      	str	r3, [r7, #20]
      break;
 800974e:	e002      	b.n	8009756 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	617b      	str	r3, [r7, #20]
      break;
 8009754:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009756:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	091b      	lsrs	r3, r3, #4
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	3301      	adds	r3, #1
 8009762:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	0a1b      	lsrs	r3, r3, #8
 800976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	fb02 f203 	mul.w	r2, r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	fbb2 f3f3 	udiv	r3, r2, r3
 800977a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	0e5b      	lsrs	r3, r3, #25
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	3301      	adds	r3, #1
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	fbb2 f3f3 	udiv	r3, r2, r3
 8009794:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009796:	69bb      	ldr	r3, [r7, #24]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3724      	adds	r7, #36	; 0x24
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40021000 	.word	0x40021000
 80097a8:	08017f4c 	.word	0x08017f4c
 80097ac:	00f42400 	.word	0x00f42400
 80097b0:	007a1200 	.word	0x007a1200

080097b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097b8:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80097ba:	681b      	ldr	r3, [r3, #0]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000058 	.word	0x20000058

080097cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80097d0:	f7ff fff0 	bl	80097b4 <HAL_RCC_GetHCLKFreq>
 80097d4:	4601      	mov	r1, r0
 80097d6:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	f003 0307 	and.w	r3, r3, #7
 80097e0:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097e2:	5cd3      	ldrb	r3, [r2, r3]
 80097e4:	f003 031f 	and.w	r3, r3, #31
 80097e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40021000 	.word	0x40021000
 80097f4:	08017f44 	.word	0x08017f44

080097f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80097fc:	f7ff ffda 	bl	80097b4 <HAL_RCC_GetHCLKFreq>
 8009800:	4601      	mov	r1, r0
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	0adb      	lsrs	r3, r3, #11
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	4a04      	ldr	r2, [pc, #16]	; (8009820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800980e:	5cd3      	ldrb	r3, [r2, r3]
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009818:	4618      	mov	r0, r3
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40021000 	.word	0x40021000
 8009820:	08017f44 	.word	0x08017f44

08009824 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	220f      	movs	r2, #15
 8009832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009834:	4b12      	ldr	r3, [pc, #72]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0203 	and.w	r2, r3, #3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009858:	4b09      	ldr	r3, [pc, #36]	; (8009880 <HAL_RCC_GetClockConfig+0x5c>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	08db      	lsrs	r3, r3, #3
 800985e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <HAL_RCC_GetClockConfig+0x60>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0207 	and.w	r2, r3, #7
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	601a      	str	r2, [r3, #0]
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40021000 	.word	0x40021000
 8009884:	40022000 	.word	0x40022000

08009888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009894:	4b2a      	ldr	r3, [pc, #168]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80098a0:	f7ff f8a4 	bl	80089ec <HAL_PWREx_GetVoltageRange>
 80098a4:	6178      	str	r0, [r7, #20]
 80098a6:	e014      	b.n	80098d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80098a8:	4b25      	ldr	r3, [pc, #148]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	4a24      	ldr	r2, [pc, #144]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b2:	6593      	str	r3, [r2, #88]	; 0x58
 80098b4:	4b22      	ldr	r3, [pc, #136]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80098c0:	f7ff f894 	bl	80089ec <HAL_PWREx_GetVoltageRange>
 80098c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80098c6:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ca:	4a1d      	ldr	r2, [pc, #116]	; (8009940 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d8:	d10b      	bne.n	80098f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b80      	cmp	r3, #128	; 0x80
 80098de:	d919      	bls.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2ba0      	cmp	r3, #160	; 0xa0
 80098e4:	d902      	bls.n	80098ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80098e6:	2302      	movs	r3, #2
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	e013      	b.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80098ec:	2301      	movs	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	e010      	b.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b80      	cmp	r3, #128	; 0x80
 80098f6:	d902      	bls.n	80098fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80098f8:	2303      	movs	r3, #3
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	e00a      	b.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d102      	bne.n	800990a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009904:	2302      	movs	r3, #2
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	e004      	b.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b70      	cmp	r3, #112	; 0x70
 800990e:	d101      	bne.n	8009914 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009910:	2301      	movs	r3, #1
 8009912:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009914:	4b0b      	ldr	r3, [pc, #44]	; (8009944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f023 0207 	bic.w	r2, r3, #7
 800991c:	4909      	ldr	r1, [pc, #36]	; (8009944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009924:	4b07      	ldr	r3, [pc, #28]	; (8009944 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	429a      	cmp	r2, r3
 8009930:	d001      	beq.n	8009936 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e000      	b.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	40021000 	.word	0x40021000
 8009944:	40022000 	.word	0x40022000

08009948 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009950:	2300      	movs	r3, #0
 8009952:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009954:	2300      	movs	r3, #0
 8009956:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009960:	2b00      	cmp	r3, #0
 8009962:	d03f      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800996c:	d01c      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800996e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009972:	d802      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00e      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009978:	e01f      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800997a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800997e:	d003      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009984:	d01c      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009986:	e018      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009988:	4b85      	ldr	r3, [pc, #532]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	4a84      	ldr	r2, [pc, #528]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800998e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009992:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009994:	e015      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f000 ffa1 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099a6:	e00c      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3320      	adds	r3, #32
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 f888 	bl	800aac4 <RCCEx_PLLSAI2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099b8:	e003      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	74fb      	strb	r3, [r7, #19]
      break;
 80099be:	e000      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80099c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099c2:	7cfb      	ldrb	r3, [r7, #19]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099c8:	4b75      	ldr	r3, [pc, #468]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099d6:	4972      	ldr	r1, [pc, #456]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80099de:	e001      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d03f      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099f8:	d01c      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80099fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099fe:	d802      	bhi.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00e      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009a04:	e01f      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a0a:	d003      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009a0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a10:	d01c      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8009a12:	e018      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a14:	4b62      	ldr	r3, [pc, #392]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4a61      	ldr	r2, [pc, #388]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a20:	e015      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3304      	adds	r3, #4
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 ff5b 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a32:	e00c      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3320      	adds	r3, #32
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 f842 	bl	800aac4 <RCCEx_PLLSAI2_Config>
 8009a40:	4603      	mov	r3, r0
 8009a42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	74fb      	strb	r3, [r7, #19]
      break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a4e:	7cfb      	ldrb	r3, [r7, #19]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a54:	4b52      	ldr	r3, [pc, #328]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a62:	494f      	ldr	r1, [pc, #316]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009a6a:	e001      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 80a0 	beq.w	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009a82:	4b47      	ldr	r3, [pc, #284]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009a92:	2300      	movs	r3, #0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00d      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a98:	4b41      	ldr	r3, [pc, #260]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9c:	4a40      	ldr	r2, [pc, #256]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8009aa4:	4b3e      	ldr	r3, [pc, #248]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ab4:	4b3b      	ldr	r3, [pc, #236]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a3a      	ldr	r2, [pc, #232]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009abe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ac0:	f7fb fcdc 	bl	800547c <HAL_GetTick>
 8009ac4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009ac6:	e009      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac8:	f7fb fcd8 	bl	800547c <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d902      	bls.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	74fb      	strb	r3, [r7, #19]
        break;
 8009ada:	e005      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009adc:	4b31      	ldr	r3, [pc, #196]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0ef      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009ae8:	7cfb      	ldrb	r3, [r7, #19]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d15c      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009aee:	4b2c      	ldr	r3, [pc, #176]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01f      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d019      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b0c:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b18:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b1e:	4a20      	ldr	r2, [pc, #128]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b28:	4b1d      	ldr	r3, [pc, #116]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2e:	4a1c      	ldr	r2, [pc, #112]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b38:	4a19      	ldr	r2, [pc, #100]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4a:	f7fb fc97 	bl	800547c <HAL_GetTick>
 8009b4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b50:	e00b      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b52:	f7fb fc93 	bl	800547c <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d902      	bls.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	74fb      	strb	r3, [r7, #19]
            break;
 8009b68:	e006      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0ec      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8009b78:	7cfb      	ldrb	r3, [r7, #19]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10c      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b7e:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b8e:	4904      	ldr	r1, [pc, #16]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009b96:	e009      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b98:	7cfb      	ldrb	r3, [r7, #19]
 8009b9a:	74bb      	strb	r3, [r7, #18]
 8009b9c:	e006      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x264>
 8009b9e:	bf00      	nop
 8009ba0:	40021000 	.word	0x40021000
 8009ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	7cfb      	ldrb	r3, [r7, #19]
 8009baa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bac:	7c7b      	ldrb	r3, [r7, #17]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d105      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bb2:	4ba6      	ldr	r3, [pc, #664]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb6:	4aa5      	ldr	r2, [pc, #660]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009bca:	4ba0      	ldr	r3, [pc, #640]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd0:	f023 0203 	bic.w	r2, r3, #3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	499c      	ldr	r1, [pc, #624]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009bec:	4b97      	ldr	r3, [pc, #604]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	f023 020c 	bic.w	r2, r3, #12
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	4994      	ldr	r1, [pc, #592]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c0e:	4b8f      	ldr	r3, [pc, #572]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	498b      	ldr	r1, [pc, #556]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00a      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c30:	4b86      	ldr	r3, [pc, #536]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	4983      	ldr	r1, [pc, #524]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0310 	and.w	r3, r3, #16
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c52:	4b7e      	ldr	r3, [pc, #504]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c60:	497a      	ldr	r1, [pc, #488]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00a      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c74:	4b75      	ldr	r3, [pc, #468]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c82:	4972      	ldr	r1, [pc, #456]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c96:	4b6d      	ldr	r3, [pc, #436]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ca4:	4969      	ldr	r1, [pc, #420]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cb8:	4b64      	ldr	r3, [pc, #400]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cc6:	4961      	ldr	r1, [pc, #388]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cda:	4b5c      	ldr	r3, [pc, #368]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce8:	4958      	ldr	r1, [pc, #352]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009cfc:	4b53      	ldr	r3, [pc, #332]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	4950      	ldr	r1, [pc, #320]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d1e:	4b4b      	ldr	r3, [pc, #300]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2c:	4947      	ldr	r1, [pc, #284]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d40:	4b42      	ldr	r3, [pc, #264]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d46:	f023 0203 	bic.w	r2, r3, #3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d4e:	493f      	ldr	r1, [pc, #252]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d028      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d62:	4b3a      	ldr	r3, [pc, #232]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d70:	4936      	ldr	r1, [pc, #216]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d80:	d106      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d82:	4b32      	ldr	r3, [pc, #200]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4a31      	ldr	r2, [pc, #196]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d8c:	60d3      	str	r3, [r2, #12]
 8009d8e:	e011      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d98:	d10c      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	2101      	movs	r1, #1
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fd9f 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 8009da6:	4603      	mov	r3, r0
 8009da8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009daa:	7cfb      	ldrb	r3, [r7, #19]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8009db0:	7cfb      	ldrb	r3, [r7, #19]
 8009db2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d028      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009dc0:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dce:	491f      	ldr	r1, [pc, #124]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dde:	d106      	bne.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009de0:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	4a19      	ldr	r2, [pc, #100]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dea:	60d3      	str	r3, [r2, #12]
 8009dec:	e011      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009df6:	d10c      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fd70 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e08:	7cfb      	ldrb	r3, [r7, #19]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8009e0e:	7cfb      	ldrb	r3, [r7, #19]
 8009e10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02a      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e2c:	4907      	ldr	r1, [pc, #28]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e3c:	d108      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	4a02      	ldr	r2, [pc, #8]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e48:	60d3      	str	r3, [r2, #12]
 8009e4a:	e013      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e58:	d10c      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	2101      	movs	r1, #1
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fd3f 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 8009e66:	4603      	mov	r3, r0
 8009e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e6a:	7cfb      	ldrb	r3, [r7, #19]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8009e70:	7cfb      	ldrb	r3, [r7, #19]
 8009e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d02f      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e80:	4b2c      	ldr	r3, [pc, #176]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8e:	4929      	ldr	r1, [pc, #164]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e9e:	d10d      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	2102      	movs	r1, #2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fd1c 	bl	800a8e4 <RCCEx_PLLSAI1_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009eb0:	7cfb      	ldrb	r3, [r7, #19]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d014      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009eb6:	7cfb      	ldrb	r3, [r7, #19]
 8009eb8:	74bb      	strb	r3, [r7, #18]
 8009eba:	e011      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3320      	adds	r3, #32
 8009eca:	2102      	movs	r1, #2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fdf9 	bl	800aac4 <RCCEx_PLLSAI2_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ed6:	7cfb      	ldrb	r3, [r7, #19]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009edc:	7cfb      	ldrb	r3, [r7, #19]
 8009ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009eec:	4b11      	ldr	r3, [pc, #68]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efc:	490d      	ldr	r1, [pc, #52]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f10:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f20:	4904      	ldr	r1, [pc, #16]	; (8009f34 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40021000 	.word	0x40021000

08009f38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b088      	sub	sp, #32
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f4a:	d137      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009f4c:	4ba9      	ldr	r3, [pc, #676]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f56:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f5e:	d014      	beq.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f64:	d01e      	beq.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8009f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f6a:	d001      	beq.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009f6c:	f000 bca0 	b.w	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f70:	4ba0      	ldr	r3, [pc, #640]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	f040 8493 	bne.w	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 8009f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f84:	61fb      	str	r3, [r7, #28]
      break;
 8009f86:	f000 bc8e 	b.w	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009f8a:	4b9a      	ldr	r3, [pc, #616]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	f040 8488 	bne.w	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 8009f9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009f9e:	61fb      	str	r3, [r7, #28]
      break;
 8009fa0:	f000 bc83 	b.w	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fa4:	4b93      	ldr	r3, [pc, #588]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb0:	f040 847d 	bne.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8009fb4:	4b90      	ldr	r3, [pc, #576]	; (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009fb6:	61fb      	str	r3, [r7, #28]
      break;
 8009fb8:	f000 bc79 	b.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fbc:	4b8d      	ldr	r3, [pc, #564]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d023      	beq.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d02e      	beq.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d139      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009fd4:	4b87      	ldr	r3, [pc, #540]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d116      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009fe0:	4b84      	ldr	r3, [pc, #528]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8009fec:	4b81      	ldr	r3, [pc, #516]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	091b      	lsrs	r3, r3, #4
 8009ff2:	f003 030f 	and.w	r3, r3, #15
 8009ff6:	e005      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8009ff8:	4b7e      	ldr	r3, [pc, #504]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ffe:	0a1b      	lsrs	r3, r3, #8
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	4a7d      	ldr	r2, [pc, #500]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800a006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a00a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a00c:	e01f      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
      break;
 800a012:	e01c      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a014:	4b77      	ldr	r3, [pc, #476]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a020:	d102      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800a022:	4b77      	ldr	r3, [pc, #476]	; (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a026:	e012      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	61bb      	str	r3, [r7, #24]
      break;
 800a02c:	e00f      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a02e:	4b71      	ldr	r3, [pc, #452]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a03a:	d102      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800a03c:	4b71      	ldr	r3, [pc, #452]	; (800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a03e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a040:	e005      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
      break;
 800a046:	e002      	b.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	61bb      	str	r3, [r7, #24]
      break;
 800a04c:	bf00      	nop
    }

    switch(PeriphClk)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a054:	f000 8384 	beq.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05c:	d828      	bhi.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 800a05e:	2b10      	cmp	r3, #16
 800a060:	f000 81fb 	beq.w	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a064:	2b10      	cmp	r3, #16
 800a066:	d811      	bhi.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800a068:	2b02      	cmp	r3, #2
 800a06a:	f000 8144 	beq.w	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d804      	bhi.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800a072:	2b01      	cmp	r3, #1
 800a074:	f000 8107 	beq.w	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a078:	f000 bc1a 	b.w	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	f000 8184 	beq.w	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a082:	2b08      	cmp	r3, #8
 800a084:	f000 81b5 	beq.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 800a088:	f000 bc12 	b.w	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	f000 82dd 	beq.w	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a092:	2b40      	cmp	r3, #64	; 0x40
 800a094:	d804      	bhi.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a096:	2b20      	cmp	r3, #32
 800a098:	f000 821e 	beq.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 800a09c:	f000 bc08 	b.w	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0a0:	2b80      	cmp	r3, #128	; 0x80
 800a0a2:	f000 82f6 	beq.w	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800a0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0aa:	f000 8315 	beq.w	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 800a0ae:	e3ff      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0b4:	f000 8248 	beq.w	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 800a0b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0bc:	d811      	bhi.n	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a0be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0c2:	d025      	beq.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a0c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0c8:	d804      	bhi.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ce:	f000 838d 	beq.w	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 800a0d2:	e3ed      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d8:	d021      	beq.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0de:	d025      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 800a0e0:	e3e6      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0e6:	d021      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a0e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0ec:	d808      	bhi.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800a0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0f2:	f000 83bc 	beq.w	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	f000 8296 	beq.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 800a0fe:	e3d7      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a104:	d012      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a10a:	f000 8308 	beq.w	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 800a10e:	e3cf      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a110:	69b9      	ldr	r1, [r7, #24]
 800a112:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a116:	f000 fdaf 	bl	800ac78 <RCCEx_GetSAIxPeriphCLKFreq>
 800a11a:	61f8      	str	r0, [r7, #28]
      break;
 800a11c:	e3c8      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a11e:	69b9      	ldr	r1, [r7, #24]
 800a120:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a124:	f000 fda8 	bl	800ac78 <RCCEx_GetSAIxPeriphCLKFreq>
 800a128:	61f8      	str	r0, [r7, #28]
      break;
 800a12a:	e3c1      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a12c:	4b31      	ldr	r3, [pc, #196]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a132:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a136:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a13e:	d063      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800a140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a144:	d803      	bhi.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 808b 	beq.w	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 800a14c:	e09a      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 800a14e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a152:	d021      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a154:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a158:	d000      	beq.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 800a15a:	e093      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a15c:	4b25      	ldr	r3, [pc, #148]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b02      	cmp	r3, #2
 800a166:	f040 8086 	bne.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 800a176:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	091b      	lsrs	r3, r3, #4
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	e005      	b.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a182:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	4a1b      	ldr	r2, [pc, #108]	; (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800a190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a194:	61fb      	str	r3, [r7, #28]
          break;
 800a196:	e06e      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a198:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a4:	d169      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a1a6:	4b13      	ldr	r3, [pc, #76]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b2:	d162      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	0a1b      	lsrs	r3, r3, #8
 800a1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1be:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	fb02 f203 	mul.w	r2, r2, r3
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	091b      	lsrs	r3, r3, #4
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a1da:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	0d5b      	lsrs	r3, r3, #21
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ee:	61fb      	str	r3, [r7, #28]
          break;
 800a1f0:	e043      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a1f2:	bf00      	nop
 800a1f4:	40021000 	.word	0x40021000
 800a1f8:	0003d090 	.word	0x0003d090
 800a1fc:	08017f4c 	.word	0x08017f4c
 800a200:	00f42400 	.word	0x00f42400
 800a204:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a208:	4bb0      	ldr	r3, [pc, #704]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a214:	d133      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a216:	4bad      	ldr	r3, [pc, #692]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a21e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a222:	d12c      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a224:	4ba9      	ldr	r3, [pc, #676]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	0a1b      	lsrs	r3, r3, #8
 800a22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	fb02 f203 	mul.w	r2, r2, r3
 800a238:	4ba4      	ldr	r3, [pc, #656]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	091b      	lsrs	r3, r3, #4
 800a23e:	f003 0307 	and.w	r3, r3, #7
 800a242:	3301      	adds	r3, #1
 800a244:	fbb2 f3f3 	udiv	r3, r2, r3
 800a248:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a24a:	4ba0      	ldr	r3, [pc, #640]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	0d5b      	lsrs	r3, r3, #21
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	3301      	adds	r3, #1
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25e:	61fb      	str	r3, [r7, #28]
          break;
 800a260:	e00d      	b.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a262:	4b9a      	ldr	r3, [pc, #616]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d108      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 800a270:	4b97      	ldr	r3, [pc, #604]	; (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a272:	61fb      	str	r3, [r7, #28]
          break;
 800a274:	e005      	b.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 800a276:	bf00      	nop
 800a278:	e31a      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a27a:	bf00      	nop
 800a27c:	e318      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a27e:	bf00      	nop
 800a280:	e316      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a282:	bf00      	nop
        break;
 800a284:	e314      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a286:	4b91      	ldr	r3, [pc, #580]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28c:	f003 0303 	and.w	r3, r3, #3
 800a290:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b03      	cmp	r3, #3
 800a296:	d828      	bhi.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a298:	a201      	add	r2, pc, #4	; (adr r2, 800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 800a29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29e:	bf00      	nop
 800a2a0:	0800a2b1 	.word	0x0800a2b1
 800a2a4:	0800a2b9 	.word	0x0800a2b9
 800a2a8:	0800a2c1 	.word	0x0800a2c1
 800a2ac:	0800a2d5 	.word	0x0800a2d5
          frequency = HAL_RCC_GetPCLK2Freq();
 800a2b0:	f7ff faa2 	bl	80097f8 <HAL_RCC_GetPCLK2Freq>
 800a2b4:	61f8      	str	r0, [r7, #28]
          break;
 800a2b6:	e01d      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 800a2b8:	f7ff f9f2 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a2bc:	61f8      	str	r0, [r7, #28]
          break;
 800a2be:	e019      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2c0:	4b82      	ldr	r3, [pc, #520]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2cc:	d10f      	bne.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 800a2ce:	4b81      	ldr	r3, [pc, #516]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a2d0:	61fb      	str	r3, [r7, #28]
          break;
 800a2d2:	e00c      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2d4:	4b7d      	ldr	r3, [pc, #500]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d107      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 800a2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e6:	61fb      	str	r3, [r7, #28]
          break;
 800a2e8:	e003      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 800a2ea:	bf00      	nop
 800a2ec:	e2e0      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a2ee:	bf00      	nop
 800a2f0:	e2de      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a2f2:	bf00      	nop
        break;
 800a2f4:	e2dc      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a2f6:	4b75      	ldr	r3, [pc, #468]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	f003 030c 	and.w	r3, r3, #12
 800a300:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b0c      	cmp	r3, #12
 800a306:	d83a      	bhi.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a345 	.word	0x0800a345
 800a314:	0800a37f 	.word	0x0800a37f
 800a318:	0800a37f 	.word	0x0800a37f
 800a31c:	0800a37f 	.word	0x0800a37f
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a37f 	.word	0x0800a37f
 800a328:	0800a37f 	.word	0x0800a37f
 800a32c:	0800a37f 	.word	0x0800a37f
 800a330:	0800a355 	.word	0x0800a355
 800a334:	0800a37f 	.word	0x0800a37f
 800a338:	0800a37f 	.word	0x0800a37f
 800a33c:	0800a37f 	.word	0x0800a37f
 800a340:	0800a369 	.word	0x0800a369
          frequency = HAL_RCC_GetPCLK1Freq();
 800a344:	f7ff fa42 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a348:	61f8      	str	r0, [r7, #28]
          break;
 800a34a:	e01d      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 800a34c:	f7ff f9a8 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a350:	61f8      	str	r0, [r7, #28]
          break;
 800a352:	e019      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a354:	4b5d      	ldr	r3, [pc, #372]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a35c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a360:	d10f      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 800a362:	4b5c      	ldr	r3, [pc, #368]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a364:	61fb      	str	r3, [r7, #28]
          break;
 800a366:	e00c      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a368:	4b58      	ldr	r3, [pc, #352]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d107      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 800a376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37a:	61fb      	str	r3, [r7, #28]
          break;
 800a37c:	e003      	b.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 800a37e:	bf00      	nop
 800a380:	e296      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a382:	bf00      	nop
 800a384:	e294      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a386:	bf00      	nop
        break;
 800a388:	e292      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a38a:	4b50      	ldr	r3, [pc, #320]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a394:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2b10      	cmp	r3, #16
 800a39a:	d00d      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800a39c:	2b10      	cmp	r3, #16
 800a39e:	d802      	bhi.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 800a3a4:	e024      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d00a      	beq.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 800a3aa:	2b30      	cmp	r3, #48	; 0x30
 800a3ac:	d012      	beq.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 800a3ae:	e01f      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3b0:	f7ff fa0c 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a3b4:	61f8      	str	r0, [r7, #28]
          break;
 800a3b6:	e01b      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a3b8:	f7ff f972 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a3bc:	61f8      	str	r0, [r7, #28]
          break;
 800a3be:	e017      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3c0:	4b42      	ldr	r3, [pc, #264]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3cc:	d10d      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 800a3ce:	4b41      	ldr	r3, [pc, #260]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a3d0:	61fb      	str	r3, [r7, #28]
          break;
 800a3d2:	e00a      	b.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3d4:	4b3d      	ldr	r3, [pc, #244]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d105      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 800a3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e6:	61fb      	str	r3, [r7, #28]
          break;
 800a3e8:	e001      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 800a3ea:	bf00      	nop
 800a3ec:	e260      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a3ee:	bf00      	nop
        break;
 800a3f0:	e25e      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a3f2:	4b36      	ldr	r3, [pc, #216]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3fc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b40      	cmp	r3, #64	; 0x40
 800a402:	d00d      	beq.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 800a404:	2b40      	cmp	r3, #64	; 0x40
 800a406:	d802      	bhi.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 800a40c:	e024      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 800a40e:	2b80      	cmp	r3, #128	; 0x80
 800a410:	d00a      	beq.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800a412:	2bc0      	cmp	r3, #192	; 0xc0
 800a414:	d012      	beq.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 800a416:	e01f      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a418:	f7ff f9d8 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a41c:	61f8      	str	r0, [r7, #28]
          break;
 800a41e:	e01b      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800a420:	f7ff f93e 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a424:	61f8      	str	r0, [r7, #28]
          break;
 800a426:	e017      	b.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a428:	4b28      	ldr	r3, [pc, #160]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a434:	d10d      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800a436:	4b27      	ldr	r3, [pc, #156]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a438:	61fb      	str	r3, [r7, #28]
          break;
 800a43a:	e00a      	b.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a43c:	4b23      	ldr	r3, [pc, #140]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b02      	cmp	r3, #2
 800a448:	d105      	bne.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800a44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a44e:	61fb      	str	r3, [r7, #28]
          break;
 800a450:	e001      	b.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800a452:	bf00      	nop
 800a454:	e22c      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a456:	bf00      	nop
        break;
 800a458:	e22a      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a45a:	4b1c      	ldr	r3, [pc, #112]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a464:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46c:	d010      	beq.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800a46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a472:	d802      	bhi.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d007      	beq.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 800a478:	e026      	b.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 800a47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47e:	d00b      	beq.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 800a480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a484:	d012      	beq.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 800a486:	e01f      	b.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a488:	f7ff f9a0 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a48c:	61f8      	str	r0, [r7, #28]
          break;
 800a48e:	e01b      	b.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 800a490:	f7ff f906 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a494:	61f8      	str	r0, [r7, #28]
          break;
 800a496:	e017      	b.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a498:	4b0c      	ldr	r3, [pc, #48]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a4:	d10d      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a4a8:	61fb      	str	r3, [r7, #28]
          break;
 800a4aa:	e00a      	b.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4ac:	4b07      	ldr	r3, [pc, #28]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d105      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 800a4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4be:	61fb      	str	r3, [r7, #28]
          break;
 800a4c0:	e001      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 800a4c2:	bf00      	nop
 800a4c4:	e1f4      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a4c6:	bf00      	nop
        break;
 800a4c8:	e1f2      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800a4ca:	bf00      	nop
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	02dc6c00 	.word	0x02dc6c00
 800a4d4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a4d8:	4bad      	ldr	r3, [pc, #692]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4e2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ea:	d010      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800a4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f0:	d802      	bhi.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 800a4f6:	e026      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 800a4f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4fc:	d00b      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 800a4fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a502:	d012      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800a504:	e01f      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a506:	f7ff f961 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a50a:	61f8      	str	r0, [r7, #28]
          break;
 800a50c:	e01b      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a50e:	f7ff f8c7 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a512:	61f8      	str	r0, [r7, #28]
          break;
 800a514:	e017      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a516:	4b9e      	ldr	r3, [pc, #632]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a522:	d10d      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 800a524:	4b9b      	ldr	r3, [pc, #620]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a526:	61fb      	str	r3, [r7, #28]
          break;
 800a528:	e00a      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a52a:	4b99      	ldr	r3, [pc, #612]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b02      	cmp	r3, #2
 800a536:	d105      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 800a538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53c:	61fb      	str	r3, [r7, #28]
          break;
 800a53e:	e001      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 800a540:	bf00      	nop
 800a542:	e1b5      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a544:	bf00      	nop
        break;
 800a546:	e1b3      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a548:	4b91      	ldr	r3, [pc, #580]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a552:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a55a:	d036      	beq.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a55c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a560:	d003      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800a562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a566:	d004      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 800a568:	e05e      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a56a:	f7ff f899 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a56e:	61f8      	str	r0, [r7, #28]
          break;
 800a570:	e05a      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a572:	4b87      	ldr	r3, [pc, #540]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a57a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a57e:	d150      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800a580:	4b83      	ldr	r3, [pc, #524]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d04a      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a58c:	4b80      	ldr	r3, [pc, #512]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a596:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	fb02 f203 	mul.w	r2, r2, r3
 800a5a0:	4b7b      	ldr	r3, [pc, #492]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	091b      	lsrs	r3, r3, #4
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a5b2:	4b77      	ldr	r3, [pc, #476]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	0e5b      	lsrs	r3, r3, #25
 800a5b8:	f003 0303 	and.w	r3, r3, #3
 800a5bc:	3301      	adds	r3, #1
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c6:	61fb      	str	r3, [r7, #28]
          break;
 800a5c8:	e02b      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a5ca:	4b71      	ldr	r3, [pc, #452]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d6:	d126      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800a5d8:	4b6d      	ldr	r3, [pc, #436]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d020      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a5e4:	4b6a      	ldr	r3, [pc, #424]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	0a1b      	lsrs	r3, r3, #8
 800a5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ee:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	fb02 f203 	mul.w	r2, r2, r3
 800a5f8:	4b65      	ldr	r3, [pc, #404]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	091b      	lsrs	r3, r3, #4
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	3301      	adds	r3, #1
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a60a:	4b61      	ldr	r3, [pc, #388]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	0e5b      	lsrs	r3, r3, #25
 800a610:	f003 0303 	and.w	r3, r3, #3
 800a614:	3301      	adds	r3, #1
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61e:	61fb      	str	r3, [r7, #28]
          break;
 800a620:	e001      	b.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 800a622:	bf00      	nop
 800a624:	e144      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a626:	bf00      	nop
        break;
 800a628:	e142      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a62a:	4b59      	ldr	r3, [pc, #356]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a634:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a63c:	f7ff f8dc 	bl	80097f8 <HAL_RCC_GetPCLK2Freq>
 800a640:	61f8      	str	r0, [r7, #28]
        break;
 800a642:	e135      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a644:	f7ff f82c 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a648:	61f8      	str	r0, [r7, #28]
        break;
 800a64a:	e131      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a64c:	4b50      	ldr	r3, [pc, #320]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a656:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65e:	d009      	beq.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a664:	d00a      	beq.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d000      	beq.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 800a66a:	e011      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a66c:	f7ff f8ae 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a670:	61f8      	str	r0, [r7, #28]
          break;
 800a672:	e00d      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 800a674:	f7ff f814 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a678:	61f8      	str	r0, [r7, #28]
          break;
 800a67a:	e009      	b.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a67c:	4b44      	ldr	r3, [pc, #272]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a688:	d101      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 800a68a:	4b42      	ldr	r3, [pc, #264]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a68c:	61fb      	str	r3, [r7, #28]
          break;
 800a68e:	bf00      	nop
        break;
 800a690:	e10e      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a692:	4b3f      	ldr	r3, [pc, #252]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a69c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6a4:	d009      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a6a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6aa:	d00a      	beq.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d000      	beq.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 800a6b0:	e011      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6b2:	f7ff f88b 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a6b6:	61f8      	str	r0, [r7, #28]
          break;
 800a6b8:	e00d      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a6ba:	f7fe fff1 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a6be:	61f8      	str	r0, [r7, #28]
          break;
 800a6c0:	e009      	b.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6c2:	4b33      	ldr	r3, [pc, #204]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ce:	d101      	bne.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 800a6d0:	4b30      	ldr	r3, [pc, #192]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a6d2:	61fb      	str	r3, [r7, #28]
          break;
 800a6d4:	bf00      	nop
        break;
 800a6d6:	e0eb      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a6d8:	4b2d      	ldr	r3, [pc, #180]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6e2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ea:	d009      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 800a6ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f0:	d00a      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d000      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 800a6f6:	e011      	b.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6f8:	f7ff f868 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a6fc:	61f8      	str	r0, [r7, #28]
          break;
 800a6fe:	e00d      	b.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a700:	f7fe ffce 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a704:	61f8      	str	r0, [r7, #28]
          break;
 800a706:	e009      	b.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a708:	4b21      	ldr	r3, [pc, #132]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a714:	d101      	bne.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800a716:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a718:	61fb      	str	r3, [r7, #28]
          break;
 800a71a:	bf00      	nop
        break;
 800a71c:	e0c8      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a71e:	4b1c      	ldr	r3, [pc, #112]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d008      	beq.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a730:	2b01      	cmp	r3, #1
 800a732:	d302      	bcc.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 800a734:	2b02      	cmp	r3, #2
 800a736:	d008      	beq.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800a738:	e011      	b.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a73a:	f7ff f847 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a73e:	61f8      	str	r0, [r7, #28]
          break;
 800a740:	e00d      	b.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 800a742:	f7fe ffad 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800a746:	61f8      	str	r0, [r7, #28]
          break;
 800a748:	e009      	b.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a74a:	4b11      	ldr	r3, [pc, #68]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a756:	d101      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 800a758:	4b0e      	ldr	r3, [pc, #56]	; (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a75a:	61fb      	str	r3, [r7, #28]
          break;
 800a75c:	bf00      	nop
        break;
 800a75e:	e0a7      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a766:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a76a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a772:	d015      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a778:	d802      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00c      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800a77e:	e034      	b.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 800a780:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a784:	d017      	beq.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800a786:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a78a:	d01e      	beq.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 800a78c:	e02d      	b.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a78e:	bf00      	nop
 800a790:	40021000 	.word	0x40021000
 800a794:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800a798:	f7ff f818 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a79c:	61f8      	str	r0, [r7, #28]
          break;
 800a79e:	e024      	b.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a7a0:	4b46      	ldr	r3, [pc, #280]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d118      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 800a7ae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a7b2:	61fb      	str	r3, [r7, #28]
          break;
 800a7b4:	e014      	b.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7b6:	4b41      	ldr	r3, [pc, #260]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c2:	d10f      	bne.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 800a7c4:	4b3e      	ldr	r3, [pc, #248]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a7c6:	61fb      	str	r3, [r7, #28]
          break;
 800a7c8:	e00c      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a7ca:	4b3c      	ldr	r3, [pc, #240]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d107      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 800a7d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7dc:	61fb      	str	r3, [r7, #28]
          break;
 800a7de:	e003      	b.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 800a7e0:	bf00      	nop
 800a7e2:	e065      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a7e4:	bf00      	nop
 800a7e6:	e063      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a7e8:	bf00      	nop
        break;
 800a7ea:	e061      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a7ec:	4b33      	ldr	r3, [pc, #204]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a7f6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fe:	d010      	beq.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a804:	d802      	bhi.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 800a80a:	e02f      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 800a80c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a810:	d012      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 800a812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a816:	d019      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800a818:	e028      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a81a:	f7fe ffd7 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a81e:	61f8      	str	r0, [r7, #28]
          break;
 800a820:	e024      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a822:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d118      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 800a830:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a834:	61fb      	str	r3, [r7, #28]
          break;
 800a836:	e014      	b.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a838:	4b20      	ldr	r3, [pc, #128]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a844:	d10f      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 800a846:	4b1e      	ldr	r3, [pc, #120]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a848:	61fb      	str	r3, [r7, #28]
          break;
 800a84a:	e00c      	b.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b02      	cmp	r3, #2
 800a858:	d107      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 800a85a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a85e:	61fb      	str	r3, [r7, #28]
          break;
 800a860:	e003      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800a862:	bf00      	nop
 800a864:	e024      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a866:	bf00      	nop
 800a868:	e022      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a86a:	bf00      	nop
        break;
 800a86c:	e020      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a86e:	4b13      	ldr	r3, [pc, #76]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a878:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800a880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a884:	d004      	beq.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800a886:	e00d      	b.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a888:	f7fe ffa0 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800a88c:	61f8      	str	r0, [r7, #28]
          break;
 800a88e:	e009      	b.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a890:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a89c:	d101      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 800a89e:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a8a0:	61fb      	str	r3, [r7, #28]
          break;
 800a8a2:	bf00      	nop
        break;
 800a8a4:	e004      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8a6:	bf00      	nop
 800a8a8:	e002      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e000      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8ae:	bf00      	nop
    }
  }

  return(frequency);
 800a8b0:	69fb      	ldr	r3, [r7, #28]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	40021000 	.word	0x40021000
 800a8c0:	00f42400 	.word	0x00f42400

0800a8c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a04      	ldr	r2, [pc, #16]	; (800a8e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a8ce:	f043 0304 	orr.w	r3, r3, #4
 800a8d2:	6013      	str	r3, [r2, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	40021000 	.word	0x40021000

0800a8e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a8f2:	4b73      	ldr	r3, [pc, #460]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0303 	and.w	r3, r3, #3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d018      	beq.n	800a930 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a8fe:	4b70      	ldr	r3, [pc, #448]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f003 0203 	and.w	r2, r3, #3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d10d      	bne.n	800a92a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
       ||
 800a912:	2b00      	cmp	r3, #0
 800a914:	d009      	beq.n	800a92a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a916:	4b6a      	ldr	r3, [pc, #424]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	091b      	lsrs	r3, r3, #4
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
       ||
 800a926:	429a      	cmp	r2, r3
 800a928:	d044      	beq.n	800a9b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	73fb      	strb	r3, [r7, #15]
 800a92e:	e041      	b.n	800a9b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d00c      	beq.n	800a952 <RCCEx_PLLSAI1_Config+0x6e>
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d013      	beq.n	800a964 <RCCEx_PLLSAI1_Config+0x80>
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d120      	bne.n	800a982 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a940:	4b5f      	ldr	r3, [pc, #380]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d11d      	bne.n	800a988 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a950:	e01a      	b.n	800a988 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a952:	4b5b      	ldr	r3, [pc, #364]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d116      	bne.n	800a98c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a962:	e013      	b.n	800a98c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a964:	4b56      	ldr	r3, [pc, #344]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10f      	bne.n	800a990 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a970:	4b53      	ldr	r3, [pc, #332]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d109      	bne.n	800a990 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a980:	e006      	b.n	800a990 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
      break;
 800a986:	e004      	b.n	800a992 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a988:	bf00      	nop
 800a98a:	e002      	b.n	800a992 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a98c:	bf00      	nop
 800a98e:	e000      	b.n	800a992 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a990:	bf00      	nop
    }

    if(status == HAL_OK)
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10d      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a998:	4b49      	ldr	r3, [pc, #292]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	011b      	lsls	r3, r3, #4
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	4944      	ldr	r1, [pc, #272]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d17c      	bne.n	800aab4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a9ba:	4b41      	ldr	r3, [pc, #260]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a40      	ldr	r2, [pc, #256]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9c6:	f7fa fd59 	bl	800547c <HAL_GetTick>
 800a9ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a9cc:	e009      	b.n	800a9e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9ce:	f7fa fd55 	bl	800547c <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d902      	bls.n	800a9e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	73fb      	strb	r3, [r7, #15]
        break;
 800a9e0:	e005      	b.n	800a9ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a9e2:	4b37      	ldr	r3, [pc, #220]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1ef      	bne.n	800a9ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d15f      	bne.n	800aab4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d110      	bne.n	800aa1c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a9fa:	4b31      	ldr	r3, [pc, #196]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800aa02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6892      	ldr	r2, [r2, #8]
 800aa0a:	0211      	lsls	r1, r2, #8
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	68d2      	ldr	r2, [r2, #12]
 800aa10:	06d2      	lsls	r2, r2, #27
 800aa12:	430a      	orrs	r2, r1
 800aa14:	492a      	ldr	r1, [pc, #168]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	610b      	str	r3, [r1, #16]
 800aa1a:	e027      	b.n	800aa6c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d112      	bne.n	800aa48 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa22:	4b27      	ldr	r3, [pc, #156]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800aa2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6892      	ldr	r2, [r2, #8]
 800aa32:	0211      	lsls	r1, r2, #8
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6912      	ldr	r2, [r2, #16]
 800aa38:	0852      	lsrs	r2, r2, #1
 800aa3a:	3a01      	subs	r2, #1
 800aa3c:	0552      	lsls	r2, r2, #21
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	491f      	ldr	r1, [pc, #124]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	610b      	str	r3, [r1, #16]
 800aa46:	e011      	b.n	800aa6c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800aa50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	6892      	ldr	r2, [r2, #8]
 800aa58:	0211      	lsls	r1, r2, #8
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6952      	ldr	r2, [r2, #20]
 800aa5e:	0852      	lsrs	r2, r2, #1
 800aa60:	3a01      	subs	r2, #1
 800aa62:	0652      	lsls	r2, r2, #25
 800aa64:	430a      	orrs	r2, r1
 800aa66:	4916      	ldr	r1, [pc, #88]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800aa6c:	4b14      	ldr	r3, [pc, #80]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa78:	f7fa fd00 	bl	800547c <HAL_GetTick>
 800aa7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aa7e:	e009      	b.n	800aa94 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa80:	f7fa fcfc 	bl	800547c <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d902      	bls.n	800aa94 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	73fb      	strb	r3, [r7, #15]
          break;
 800aa92:	e005      	b.n	800aaa0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aa94:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0ef      	beq.n	800aa80 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800aaa6:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aaa8:	691a      	ldr	r2, [r3, #16]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	4904      	ldr	r1, [pc, #16]	; (800aac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	40021000 	.word	0x40021000

0800aac4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aad2:	4b68      	ldr	r3, [pc, #416]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0303 	and.w	r3, r3, #3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d018      	beq.n	800ab10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800aade:	4b65      	ldr	r3, [pc, #404]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f003 0203 	and.w	r2, r3, #3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d10d      	bne.n	800ab0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
       ||
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d009      	beq.n	800ab0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800aaf6:	4b5f      	ldr	r3, [pc, #380]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	091b      	lsrs	r3, r3, #4
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
       ||
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d044      	beq.n	800ab94 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	73fb      	strb	r3, [r7, #15]
 800ab0e:	e041      	b.n	800ab94 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d00c      	beq.n	800ab32 <RCCEx_PLLSAI2_Config+0x6e>
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d013      	beq.n	800ab44 <RCCEx_PLLSAI2_Config+0x80>
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d120      	bne.n	800ab62 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ab20:	4b54      	ldr	r3, [pc, #336]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d11d      	bne.n	800ab68 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab30:	e01a      	b.n	800ab68 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ab32:	4b50      	ldr	r3, [pc, #320]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d116      	bne.n	800ab6c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab42:	e013      	b.n	800ab6c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ab44:	4b4b      	ldr	r3, [pc, #300]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10f      	bne.n	800ab70 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ab50:	4b48      	ldr	r3, [pc, #288]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab60:	e006      	b.n	800ab70 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	73fb      	strb	r3, [r7, #15]
      break;
 800ab66:	e004      	b.n	800ab72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab68:	bf00      	nop
 800ab6a:	e002      	b.n	800ab72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e000      	b.n	800ab72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab70:	bf00      	nop
    }

    if(status == HAL_OK)
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10d      	bne.n	800ab94 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ab78:	4b3e      	ldr	r3, [pc, #248]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6819      	ldr	r1, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	430b      	orrs	r3, r1
 800ab8e:	4939      	ldr	r1, [pc, #228]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d166      	bne.n	800ac68 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ab9a:	4b36      	ldr	r3, [pc, #216]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a35      	ldr	r2, [pc, #212]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800aba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aba6:	f7fa fc69 	bl	800547c <HAL_GetTick>
 800abaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abac:	e009      	b.n	800abc2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800abae:	f7fa fc65 	bl	800547c <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d902      	bls.n	800abc2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	73fb      	strb	r3, [r7, #15]
        break;
 800abc0:	e005      	b.n	800abce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abc2:	4b2c      	ldr	r3, [pc, #176]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1ef      	bne.n	800abae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d149      	bne.n	800ac68 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d110      	bne.n	800abfc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800abda:	4b26      	ldr	r3, [pc, #152]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800abe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	6892      	ldr	r2, [r2, #8]
 800abea:	0211      	lsls	r1, r2, #8
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	68d2      	ldr	r2, [r2, #12]
 800abf0:	06d2      	lsls	r2, r2, #27
 800abf2:	430a      	orrs	r2, r1
 800abf4:	491f      	ldr	r1, [pc, #124]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	614b      	str	r3, [r1, #20]
 800abfa:	e011      	b.n	800ac20 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800abfc:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ac04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6892      	ldr	r2, [r2, #8]
 800ac0c:	0211      	lsls	r1, r2, #8
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6912      	ldr	r2, [r2, #16]
 800ac12:	0852      	lsrs	r2, r2, #1
 800ac14:	3a01      	subs	r2, #1
 800ac16:	0652      	lsls	r2, r2, #25
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	4916      	ldr	r1, [pc, #88]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ac20:	4b14      	ldr	r3, [pc, #80]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac2c:	f7fa fc26 	bl	800547c <HAL_GetTick>
 800ac30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac32:	e009      	b.n	800ac48 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ac34:	f7fa fc22 	bl	800547c <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d902      	bls.n	800ac48 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	73fb      	strb	r3, [r7, #15]
          break;
 800ac46:	e005      	b.n	800ac54 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0ef      	beq.n	800ac34 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac5c:	695a      	ldr	r2, [r3, #20]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	4904      	ldr	r1, [pc, #16]	; (800ac74 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	40021000 	.word	0x40021000

0800ac78 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b089      	sub	sp, #36	; 0x24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac94:	d10c      	bne.n	800acb0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ac96:	4b77      	ldr	r3, [pc, #476]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800aca0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aca8:	d112      	bne.n	800acd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800acaa:	4b73      	ldr	r3, [pc, #460]	; (800ae78 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	e00f      	b.n	800acd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb6:	d10b      	bne.n	800acd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800acb8:	4b6e      	ldr	r3, [pc, #440]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800acba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acbe:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800acc2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acca:	d101      	bne.n	800acd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800accc:	4b6a      	ldr	r3, [pc, #424]	; (800ae78 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800acce:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f040 80c6 	bne.w	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ace2:	d003      	beq.n	800acec <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acea:	d13b      	bne.n	800ad64 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800acec:	4b61      	ldr	r3, [pc, #388]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acf8:	f040 80b3 	bne.w	800ae62 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800acfc:	4b5d      	ldr	r3, [pc, #372]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80ac 	beq.w	800ae62 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad0a:	4b5a      	ldr	r3, [pc, #360]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	091b      	lsrs	r3, r3, #4
 800ad10:	f003 0307 	and.w	r3, r3, #7
 800ad14:	3301      	adds	r3, #1
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad1e:	4b55      	ldr	r3, [pc, #340]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad28:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ad2a:	4b52      	ldr	r3, [pc, #328]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	0edb      	lsrs	r3, r3, #27
 800ad30:	f003 031f 	and.w	r3, r3, #31
 800ad34:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ad3c:	4b4d      	ldr	r3, [pc, #308]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800ad48:	2311      	movs	r3, #17
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	e001      	b.n	800ad52 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800ad4e:	2307      	movs	r3, #7
 800ad50:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	fb02 f203 	mul.w	r2, r2, r3
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad60:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ad62:	e07e      	b.n	800ae62 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d139      	bne.n	800adde <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ad6a:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad76:	d175      	bne.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800ad78:	4b3e      	ldr	r3, [pc, #248]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d06f      	beq.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad84:	4b3b      	ldr	r3, [pc, #236]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	091b      	lsrs	r3, r3, #4
 800ad8a:	f003 0307 	and.w	r3, r3, #7
 800ad8e:	3301      	adds	r3, #1
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad96:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad98:	4b36      	ldr	r3, [pc, #216]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	0a1b      	lsrs	r3, r3, #8
 800ad9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800ada4:	4b33      	ldr	r3, [pc, #204]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	0edb      	lsrs	r3, r3, #27
 800adaa:	f003 031f 	and.w	r3, r3, #31
 800adae:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10a      	bne.n	800adcc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800adb6:	4b2f      	ldr	r3, [pc, #188]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800adc2:	2311      	movs	r3, #17
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	e001      	b.n	800adcc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800adc8:	2307      	movs	r3, #7
 800adca:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	fb02 f203 	mul.w	r2, r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e042      	b.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ade4:	d003      	beq.n	800adee <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800adec:	d13a      	bne.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800adee:	4b21      	ldr	r3, [pc, #132]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adfa:	d133      	bne.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800adfc:	4b1d      	ldr	r3, [pc, #116]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d02d      	beq.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ae08:	4b1a      	ldr	r3, [pc, #104]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	091b      	lsrs	r3, r3, #4
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	3301      	adds	r3, #1
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ae1c:	4b15      	ldr	r3, [pc, #84]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	0a1b      	lsrs	r3, r3, #8
 800ae22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae26:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800ae28:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	0edb      	lsrs	r3, r3, #27
 800ae2e:	f003 031f 	and.w	r3, r3, #31
 800ae32:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800ae46:	2311      	movs	r3, #17
 800ae48:	617b      	str	r3, [r7, #20]
 800ae4a:	e001      	b.n	800ae50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800ae4c:	2307      	movs	r3, #7
 800ae4e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	fb02 f203 	mul.w	r2, r2, r3
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5e:	61fb      	str	r3, [r7, #28]
 800ae60:	e000      	b.n	800ae64 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ae62:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ae64:	69fb      	ldr	r3, [r7, #28]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3724      	adds	r7, #36	; 0x24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40021000 	.word	0x40021000
 800ae78:	001fff68 	.word	0x001fff68

0800ae7c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e153      	b.n	800b136 <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fa f806 	bl	8004eb4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f957 	bl	800b15c <SAI_Disable>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e13e      	b.n	800b136 <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d007      	beq.n	800aed8 <HAL_SAI_Init+0x5c>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d302      	bcc.n	800aed2 <HAL_SAI_Init+0x56>
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d006      	beq.n	800aede <HAL_SAI_Init+0x62>
 800aed0:	e008      	b.n	800aee4 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	61fb      	str	r3, [r7, #28]
      break;
 800aed6:	e008      	b.n	800aeea <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aed8:	2310      	movs	r3, #16
 800aeda:	61fb      	str	r3, [r7, #28]
      break;
 800aedc:	e005      	b.n	800aeea <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800aede:	2320      	movs	r3, #32
 800aee0:	61fb      	str	r3, [r7, #28]
      break;
 800aee2:	e002      	b.n	800aeea <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61fb      	str	r3, [r7, #28]
      break;
 800aee8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d81d      	bhi.n	800af2e <HAL_SAI_Init+0xb2>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <HAL_SAI_Init+0x7c>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af09 	.word	0x0800af09
 800aefc:	0800af0f 	.word	0x0800af0f
 800af00:	0800af17 	.word	0x0800af17
 800af04:	0800af1f 	.word	0x0800af1f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]
      break;
 800af0c:	e012      	b.n	800af34 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800af0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af12:	617b      	str	r3, [r7, #20]
      break;
 800af14:	e00e      	b.n	800af34 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af1a:	617b      	str	r3, [r7, #20]
      break;
 800af1c:	e00a      	b.n	800af34 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af22:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	61fb      	str	r3, [r7, #28]
      break;
 800af2c:	e002      	b.n	800af34 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	617b      	str	r3, [r7, #20]
      break;
 800af32:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a81      	ldr	r2, [pc, #516]	; (800b140 <HAL_SAI_Init+0x2c4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d004      	beq.n	800af48 <HAL_SAI_Init+0xcc>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a80      	ldr	r2, [pc, #512]	; (800b144 <HAL_SAI_Init+0x2c8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d103      	bne.n	800af50 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800af48:	4a7f      	ldr	r2, [pc, #508]	; (800b148 <HAL_SAI_Init+0x2cc>)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	e002      	b.n	800af56 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800af50:	4a7e      	ldr	r2, [pc, #504]	; (800b14c <HAL_SAI_Init+0x2d0>)
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d041      	beq.n	800afe2 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a77      	ldr	r2, [pc, #476]	; (800b140 <HAL_SAI_Init+0x2c4>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d004      	beq.n	800af72 <HAL_SAI_Init+0xf6>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a75      	ldr	r2, [pc, #468]	; (800b144 <HAL_SAI_Init+0x2c8>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d105      	bne.n	800af7e <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800af72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af76:	f7fe ffdf 	bl	8009f38 <HAL_RCCEx_GetPeriphCLKFreq>
 800af7a:	6138      	str	r0, [r7, #16]
 800af7c:	e004      	b.n	800af88 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800af7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800af82:	f7fe ffd9 	bl	8009f38 <HAL_RCCEx_GetPeriphCLKFreq>
 800af86:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	461a      	mov	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	69db      	ldr	r3, [r3, #28]
 800af98:	025b      	lsls	r3, r3, #9
 800af9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4a6b      	ldr	r2, [pc, #428]	; (800b150 <HAL_SAI_Init+0x2d4>)
 800afa4:	fba2 2303 	umull	r2, r3, r2, r3
 800afa8:	08da      	lsrs	r2, r3, #3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800afae:	68f9      	ldr	r1, [r7, #12]
 800afb0:	4b67      	ldr	r3, [pc, #412]	; (800b150 <HAL_SAI_Init+0x2d4>)
 800afb2:	fba3 2301 	umull	r2, r3, r3, r1
 800afb6:	08da      	lsrs	r2, r3, #3
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	1aca      	subs	r2, r1, r3
 800afc2:	2a08      	cmp	r2, #8
 800afc4:	d904      	bls.n	800afd0 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d104      	bne.n	800afe2 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	085a      	lsrs	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <HAL_SAI_Init+0x176>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d109      	bne.n	800b006 <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_SAI_Init+0x182>
 800affa:	2300      	movs	r3, #0
 800affc:	e001      	b.n	800b002 <HAL_SAI_Init+0x186>
 800affe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b002:	61bb      	str	r3, [r7, #24]
 800b004:	e008      	b.n	800b018 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d102      	bne.n	800b014 <HAL_SAI_Init+0x198>
 800b00e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b012:	e000      	b.n	800b016 <HAL_SAI_Init+0x19a>
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6819      	ldr	r1, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4b4c      	ldr	r3, [pc, #304]	; (800b154 <HAL_SAI_Init+0x2d8>)
 800b024:	400b      	ands	r3, r1
 800b026:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6819      	ldr	r1, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b036:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b03c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b042:	431a      	orrs	r2, r3
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800b050:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b05c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	051b      	lsls	r3, r3, #20
 800b064:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b07c:	f023 030f 	bic.w	r3, r3, #15
 800b080:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6859      	ldr	r1, [r3, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	699a      	ldr	r2, [r3, #24]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b090:	431a      	orrs	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6899      	ldr	r1, [r3, #8]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b2b      	ldr	r3, [pc, #172]	; (800b158 <HAL_SAI_Init+0x2dc>)
 800b0ac:	400b      	ands	r3, r1
 800b0ae:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6899      	ldr	r1, [r3, #8]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0c0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b0c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b0cc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b0d6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68d9      	ldr	r1, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b0ee:	400b      	ands	r3, r1
 800b0f0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68d9      	ldr	r1, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b100:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b106:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b108:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b10e:	3b01      	subs	r3, #1
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	40015404 	.word	0x40015404
 800b144:	40015424 	.word	0x40015424
 800b148:	40015400 	.word	0x40015400
 800b14c:	40015800 	.word	0x40015800
 800b150:	cccccccd 	.word	0xcccccccd
 800b154:	ff05c010 	.word	0xff05c010
 800b158:	fff88000 	.word	0xfff88000

0800b15c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b15c:	b490      	push	{r4, r7}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b164:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <SAI_Disable+0x60>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a15      	ldr	r2, [pc, #84]	; (800b1c0 <SAI_Disable+0x64>)
 800b16a:	fba2 2303 	umull	r2, r3, r2, r3
 800b16e:	0b1b      	lsrs	r3, r3, #12
 800b170:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b184:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b186:	2c00      	cmp	r4, #0
 800b188:	d10a      	bne.n	800b1a0 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	73fb      	strb	r3, [r7, #15]
      break;
 800b19e:	e007      	b.n	800b1b0 <SAI_Disable+0x54>
    }
    count--;
 800b1a0:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1ea      	bne.n	800b186 <SAI_Disable+0x2a>

  return status;
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc90      	pop	{r4, r7}
 800b1ba:	4770      	bx	lr
 800b1bc:	20000058 	.word	0x20000058
 800b1c0:	95cbec1b 	.word	0x95cbec1b

0800b1c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e022      	b.n	800b21c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f9 fd27 	bl	8004c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f814 	bl	800b224 <HAL_SD_InitCard>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e00a      	b.n	800b21c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b224:	b5b0      	push	{r4, r5, r7, lr}
 800b226:	b08e      	sub	sp, #56	; 0x38
 800b228:	af04      	add	r7, sp, #16
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b234:	2300      	movs	r3, #0
 800b236:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b23c:	2300      	movs	r3, #0
 800b23e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b240:	2376      	movs	r3, #118	; 0x76
 800b242:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681d      	ldr	r5, [r3, #0]
 800b248:	466c      	mov	r4, sp
 800b24a:	f107 0314 	add.w	r3, r7, #20
 800b24e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b25c:	4628      	mov	r0, r5
 800b25e:	f002 fad1 	bl	800d804 <SDMMC_Init>
 800b262:	4603      	mov	r3, r0
 800b264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e05f      	b.n	800b334 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b282:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f002 faf5 	bl	800d878 <SDMMC_PowerState_ON>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e049      	b.n	800b334 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2ae:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fb4d 	bl	800b950 <SD_PowerON>
 800b2b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00b      	beq.n	800b2d6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e02e      	b.n	800b334 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fa6c 	bl	800b7b4 <SD_InitCard>
 800b2dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e01b      	b.n	800b334 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fb4a 	bl	800d99e <SDMMC_CmdBlockLength>
 800b30a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b30c:	6a3b      	ldr	r3, [r7, #32]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00f      	beq.n	800b332 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a09      	ldr	r2, [pc, #36]	; (800b33c <HAL_SD_InitCard+0x118>)
 800b318:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	431a      	orrs	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e000      	b.n	800b334 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3728      	adds	r7, #40	; 0x28
 800b338:	46bd      	mov	sp, r7
 800b33a:	bdb0      	pop	{r4, r5, r7, pc}
 800b33c:	004005ff 	.word	0x004005ff

0800b340 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b34e:	0f9b      	lsrs	r3, r3, #30
 800b350:	b2da      	uxtb	r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b35a:	0e9b      	lsrs	r3, r3, #26
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	b2da      	uxtb	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b36c:	0e1b      	lsrs	r3, r3, #24
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 0303 	and.w	r3, r3, #3
 800b374:	b2da      	uxtb	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b37e:	0c1b      	lsrs	r3, r3, #16
 800b380:	b2da      	uxtb	r2, r3
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b38a:	0a1b      	lsrs	r3, r3, #8
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b396:	b2da      	uxtb	r2, r3
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3a0:	0d1b      	lsrs	r3, r3, #20
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ac:	0c1b      	lsrs	r3, r3, #16
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 030f 	and.w	r3, r3, #15
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3be:	0bdb      	lsrs	r3, r3, #15
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3d0:	0b9b      	lsrs	r3, r3, #14
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3e2:	0b5b      	lsrs	r3, r3, #13
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f4:	0b1b      	lsrs	r3, r3, #12
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2200      	movs	r2, #0
 800b406:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d163      	bne.n	800b4d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b414:	009a      	lsls	r2, r3, #2
 800b416:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b41a:	4013      	ands	r3, r2
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b420:	0f92      	lsrs	r2, r2, #30
 800b422:	431a      	orrs	r2, r3
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b42c:	0edb      	lsrs	r3, r3, #27
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	b2da      	uxtb	r2, r3
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43e:	0e1b      	lsrs	r3, r3, #24
 800b440:	b2db      	uxtb	r3, r3
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	b2da      	uxtb	r2, r3
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	0d5b      	lsrs	r3, r3, #21
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 0307 	and.w	r3, r3, #7
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b462:	0c9b      	lsrs	r3, r3, #18
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	0bdb      	lsrs	r3, r3, #15
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	7e1b      	ldrb	r3, [r3, #24]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	3302      	adds	r3, #2
 800b498:	2201      	movs	r2, #1
 800b49a:	fa02 f303 	lsl.w	r3, r2, r3
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b4a2:	fb02 f203 	mul.w	r2, r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	7a1b      	ldrb	r3, [r3, #8]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	f003 030f 	and.w	r3, r3, #15
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	409a      	lsls	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b4c4:	0a52      	lsrs	r2, r2, #9
 800b4c6:	fb02 f203 	mul.w	r2, r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b4d6:	e031      	b.n	800b53c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d11d      	bne.n	800b51c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4e4:	041b      	lsls	r3, r3, #16
 800b4e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ee:	0c1b      	lsrs	r3, r3, #16
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	029a      	lsls	r2, r3, #10
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b510:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	661a      	str	r2, [r3, #96]	; 0x60
 800b51a:	e00f      	b.n	800b53c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a58      	ldr	r2, [pc, #352]	; (800b684 <HAL_SD_GetCardCSD+0x344>)
 800b522:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b528:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e09d      	b.n	800b678 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b540:	0b9b      	lsrs	r3, r3, #14
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b552:	09db      	lsrs	r3, r3, #7
 800b554:	b2db      	uxtb	r3, r3
 800b556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b564:	b2db      	uxtb	r3, r3
 800b566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b574:	0fdb      	lsrs	r3, r3, #31
 800b576:	b2da      	uxtb	r2, r3
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b580:	0f5b      	lsrs	r3, r3, #29
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b592:	0e9b      	lsrs	r3, r3, #26
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 0307 	and.w	r3, r3, #7
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a4:	0d9b      	lsrs	r3, r3, #22
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 030f 	and.w	r3, r3, #15
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b6:	0d5b      	lsrs	r3, r3, #21
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	b2da      	uxtb	r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d2:	0c1b      	lsrs	r3, r3, #16
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e6:	0bdb      	lsrs	r3, r3, #15
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	0b9b      	lsrs	r3, r3, #14
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	b2da      	uxtb	r2, r3
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60e:	0b5b      	lsrs	r3, r3, #13
 800b610:	b2db      	uxtb	r3, r3
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b622:	0b1b      	lsrs	r3, r3, #12
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b636:	0a9b      	lsrs	r3, r3, #10
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0303 	and.w	r3, r3, #3
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	b2da      	uxtb	r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65e:	085b      	lsrs	r3, r3, #1
 800b660:	b2db      	uxtb	r3, r3
 800b662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b666:	b2da      	uxtb	r2, r3
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	004005ff 	.word	0x004005ff

0800b688 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b688:	b5b0      	push	{r4, r5, r7, lr}
 800b68a:	b08e      	sub	sp, #56	; 0x38
 800b68c:	af04      	add	r7, sp, #16
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2203      	movs	r2, #3
 800b69c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d02e      	beq.n	800b706 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ae:	d106      	bne.n	800b6be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38
 800b6bc:	e029      	b.n	800b712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6c4:	d10a      	bne.n	800b6dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f9d0 	bl	800ba6c <SD_WideBus_Enable>
 800b6cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	639a      	str	r2, [r3, #56]	; 0x38
 800b6da:	e01a      	b.n	800b712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10a      	bne.n	800b6f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa0d 	bl	800bb02 <SD_WideBus_Disable>
 800b6e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
 800b6f6:	e00c      	b.n	800b712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
 800b704:	e005      	b.n	800b712 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	2b00      	cmp	r3, #0
 800b718:	d007      	beq.n	800b72a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a24      	ldr	r2, [pc, #144]	; (800b7b0 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b728:	e01f      	b.n	800b76a <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681d      	ldr	r5, [r3, #0]
 800b750:	466c      	mov	r4, sp
 800b752:	f107 0314 	add.w	r3, r7, #20
 800b756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b75a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b75e:	f107 0308 	add.w	r3, r7, #8
 800b762:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b764:	4628      	mov	r0, r5
 800b766:	f002 f84d 	bl	800d804 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b772:	4618      	mov	r0, r3
 800b774:	f002 f913 	bl	800d99e <SDMMC_CmdBlockLength>
 800b778:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00c      	beq.n	800b79a <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	004005ff 	.word	0x004005ff

0800b7b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b7b4:	b5b0      	push	{r4, r5, r7, lr}
 800b7b6:	b094      	sub	sp, #80	; 0x50
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f002 f866 	bl	800d896 <SDMMC_GetPowerState>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b7d4:	e0b7      	b.n	800b946 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d02f      	beq.n	800b83e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f002 f9e5 	bl	800dbb2 <SDMMC_CmdSendCID>
 800b7e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <SD_InitCard+0x40>
    {
      return errorstate;
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	e0a8      	b.n	800b946 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f002 f890 	bl	800d920 <SDMMC_GetResponse>
 800b800:	4602      	mov	r2, r0
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2104      	movs	r1, #4
 800b80c:	4618      	mov	r0, r3
 800b80e:	f002 f887 	bl	800d920 <SDMMC_GetResponse>
 800b812:	4602      	mov	r2, r0
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2108      	movs	r1, #8
 800b81e:	4618      	mov	r0, r3
 800b820:	f002 f87e 	bl	800d920 <SDMMC_GetResponse>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	210c      	movs	r1, #12
 800b830:	4618      	mov	r0, r3
 800b832:	f002 f875 	bl	800d920 <SDMMC_GetResponse>
 800b836:	4602      	mov	r2, r0
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b842:	2b03      	cmp	r3, #3
 800b844:	d00d      	beq.n	800b862 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f107 020e 	add.w	r2, r7, #14
 800b84e:	4611      	mov	r1, r2
 800b850:	4618      	mov	r0, r3
 800b852:	f002 f9eb 	bl	800dc2c <SDMMC_CmdSetRelAdd>
 800b856:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <SD_InitCard+0xae>
    {
      return errorstate;
 800b85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b860:	e071      	b.n	800b946 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b866:	2b03      	cmp	r3, #3
 800b868:	d036      	beq.n	800b8d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	461a      	mov	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b87a:	041b      	lsls	r3, r3, #16
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f002 f9b5 	bl	800dbee <SDMMC_CmdSendCSD>
 800b884:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b88e:	e05a      	b.n	800b946 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2100      	movs	r1, #0
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f842 	bl	800d920 <SDMMC_GetResponse>
 800b89c:	4602      	mov	r2, r0
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f002 f839 	bl	800d920 <SDMMC_GetResponse>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2108      	movs	r1, #8
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f002 f830 	bl	800d920 <SDMMC_GetResponse>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	210c      	movs	r1, #12
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f002 f827 	bl	800d920 <SDMMC_GetResponse>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2104      	movs	r1, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f002 f81e 	bl	800d920 <SDMMC_GetResponse>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	0d1a      	lsrs	r2, r3, #20
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b8ec:	f107 0310 	add.w	r3, r7, #16
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff fd24 	bl	800b340 <HAL_SD_GetCardCSD>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b902:	e020      	b.n	800b946 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6819      	ldr	r1, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	f04f 0400 	mov.w	r4, #0
 800b912:	461a      	mov	r2, r3
 800b914:	4623      	mov	r3, r4
 800b916:	4608      	mov	r0, r1
 800b918:	f002 f863 	bl	800d9e2 <SDMMC_CmdSelDesel>
 800b91c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <SD_InitCard+0x174>
  {
    return errorstate;
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	e00e      	b.n	800b946 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681d      	ldr	r5, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	466c      	mov	r4, sp
 800b930:	f103 0210 	add.w	r2, r3, #16
 800b934:	ca07      	ldmia	r2, {r0, r1, r2}
 800b936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b93a:	3304      	adds	r3, #4
 800b93c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b93e:	4628      	mov	r0, r5
 800b940:	f001 ff60 	bl	800d804 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3740      	adds	r7, #64	; 0x40
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b950 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]
 800b960:	2300      	movs	r3, #0
 800b962:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 f85d 	bl	800da28 <SDMMC_CmdGoIdleState>
 800b96e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	e072      	b.n	800ba60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f002 f870 	bl	800da64 <SDMMC_CmdOperCond>
 800b984:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00d      	beq.n	800b9a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f002 f846 	bl	800da28 <SDMMC_CmdGoIdleState>
 800b99c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d004      	beq.n	800b9ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	e05b      	b.n	800ba60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d137      	bne.n	800ba26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f002 f870 	bl	800daa2 <SDMMC_CmdAppCommand>
 800b9c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d02d      	beq.n	800ba26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9ce:	e047      	b.n	800ba60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f002 f863 	bl	800daa2 <SDMMC_CmdAppCommand>
 800b9dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	e03b      	b.n	800ba60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	491e      	ldr	r1, [pc, #120]	; (800ba68 <SD_PowerON+0x118>)
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f002 f879 	bl	800dae6 <SDMMC_CmdAppOperCommand>
 800b9f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba00:	e02e      	b.n	800ba60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 ff89 	bl	800d920 <SDMMC_GetResponse>
 800ba0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	0fdb      	lsrs	r3, r3, #31
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d101      	bne.n	800ba1c <SD_PowerON+0xcc>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e000      	b.n	800ba1e <SD_PowerON+0xce>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]

    count++;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	3301      	adds	r3, #1
 800ba24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d802      	bhi.n	800ba36 <SD_PowerON+0xe6>
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0cc      	beq.n	800b9d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d902      	bls.n	800ba46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba44:	e00c      	b.n	800ba60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	645a      	str	r2, [r3, #68]	; 0x44
 800ba56:	e002      	b.n	800ba5e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	c1100000 	.word	0xc1100000

0800ba6c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2100      	movs	r1, #0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f001 ff4c 	bl	800d920 <SDMMC_GetResponse>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba92:	d102      	bne.n	800ba9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba98:	e02f      	b.n	800bafa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba9a:	f107 030c 	add.w	r3, r7, #12
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f879 	bl	800bb98 <SD_FindSCR>
 800baa6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	e023      	b.n	800bafa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01c      	beq.n	800baf6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac4:	041b      	lsls	r3, r3, #16
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f001 ffea 	bl	800daa2 <SDMMC_CmdAppCommand>
 800bace:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	e00f      	b.n	800bafa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2102      	movs	r1, #2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f002 f823 	bl	800db2c <SDMMC_CmdBusWidth>
 800bae6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	e003      	b.n	800bafa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e001      	b.n	800bafa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800baf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f001 ff01 	bl	800d920 <SDMMC_GetResponse>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb28:	d102      	bne.n	800bb30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb2e:	e02f      	b.n	800bb90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f82e 	bl	800bb98 <SD_FindSCR>
 800bb3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	e023      	b.n	800bb90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01c      	beq.n	800bb8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb5a:	041b      	lsls	r3, r3, #16
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f001 ff9f 	bl	800daa2 <SDMMC_CmdAppCommand>
 800bb64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	e00f      	b.n	800bb90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 ffd8 	bl	800db2c <SDMMC_CmdBusWidth>
 800bb7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	e003      	b.n	800bb90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e001      	b.n	800bb90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b08f      	sub	sp, #60	; 0x3c
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bba2:	f7f9 fc6b 	bl	800547c <HAL_GetTick>
 800bba6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bbac:	2300      	movs	r3, #0
 800bbae:	60bb      	str	r3, [r7, #8]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2108      	movs	r1, #8
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 feed 	bl	800d99e <SDMMC_CmdBlockLength>
 800bbc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	e0a9      	b.n	800bd24 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd8:	041b      	lsls	r3, r3, #16
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4610      	mov	r0, r2
 800bbde:	f001 ff60 	bl	800daa2 <SDMMC_CmdAppCommand>
 800bbe2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <SD_FindSCR+0x56>
  {
    return errorstate;
 800bbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbec:	e09a      	b.n	800bd24 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bbf4:	2308      	movs	r3, #8
 800bbf6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bbf8:	2330      	movs	r3, #48	; 0x30
 800bbfa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f107 0210 	add.w	r2, r7, #16
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 fe97 	bl	800d946 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 ffa7 	bl	800db70 <SDMMC_CmdSendSCR>
 800bc22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d022      	beq.n	800bc70 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	e07a      	b.n	800bd24 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6819      	ldr	r1, [r3, #0]
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	f107 0208 	add.w	r2, r7, #8
 800bc48:	18d4      	adds	r4, r2, r3
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	f001 fe07 	bl	800d85e <SDMMC_ReadFIFO>
 800bc50:	4603      	mov	r3, r0
 800bc52:	6023      	str	r3, [r4, #0]
      index++;
 800bc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc56:	3301      	adds	r3, #1
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc5a:	f7f9 fc0f 	bl	800547c <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc68:	d102      	bne.n	800bc70 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc6e:	e059      	b.n	800bd24 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc76:	f240 432a 	movw	r3, #1066	; 0x42a
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0d6      	beq.n	800bc2e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d005      	beq.n	800bc9a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2208      	movs	r2, #8
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc96:	2308      	movs	r3, #8
 800bc98:	e044      	b.n	800bd24 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca0:	f003 0302 	and.w	r3, r3, #2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2202      	movs	r2, #2
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e037      	b.n	800bd24 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d005      	beq.n	800bcce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bcca:	2320      	movs	r3, #32
 800bccc:	e02a      	b.n	800bd24 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f240 523a 	movw	r2, #1338	; 0x53a
 800bcd6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	061a      	lsls	r2, r3, #24
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bce4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	0a1b      	lsrs	r3, r3, #8
 800bcea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0e1b      	lsrs	r3, r3, #24
 800bcf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf8:	601a      	str	r2, [r3, #0]
    scr++;
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	061a      	lsls	r2, r3, #24
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	021b      	lsls	r3, r3, #8
 800bd08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	0a1b      	lsrs	r3, r3, #8
 800bd12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	0e1b      	lsrs	r3, r3, #24
 800bd1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	373c      	adds	r7, #60	; 0x3c
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd90      	pop	{r4, r7, pc}

0800bd2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e07c      	b.n	800be38 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7f8 ffd1 	bl	8004d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2202      	movs	r2, #2
 800bd62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd7e:	d902      	bls.n	800bd86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e002      	b.n	800bd8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd94:	d007      	beq.n	800bda6 <HAL_SPI_Init+0x7a>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd9e:	d002      	beq.n	800bda6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10b      	bne.n	800bdc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdb6:	d903      	bls.n	800bdc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	631a      	str	r2, [r3, #48]	; 0x30
 800bdbe:	e002      	b.n	800bdc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685a      	ldr	r2, [r3, #4]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	431a      	orrs	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bde4:	431a      	orrs	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	ea42 0103 	orr.w	r1, r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	0c1b      	lsrs	r3, r3, #16
 800be06:	f003 0204 	and.w	r2, r3, #4
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	431a      	orrs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be14:	431a      	orrs	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	ea42 0103 	orr.w	r1, r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	430a      	orrs	r2, r1
 800be26:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e038      	b.n	800bec8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f7f9 f818 	bl	8004ea0 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3308      	adds	r3, #8
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f001 fbaa 	bl	800d5d4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6818      	ldr	r0, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	461a      	mov	r2, r3
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	f001 fc32 	bl	800d6f4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6858      	ldr	r0, [r3, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	689a      	ldr	r2, [r3, #8]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9c:	6879      	ldr	r1, [r7, #4]
 800be9e:	f001 fc79 	bl	800d794 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	6892      	ldr	r2, [r2, #8]
 800beaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	6892      	ldr	r2, [r2, #8]
 800beb6:	f041 0101 	orr.w	r1, r1, #1
 800beba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e01d      	b.n	800bf1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f815 	bl	800bf26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f000 f986 	bl	800c220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
	...

0800bf3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f042 0201 	orr.w	r2, r2, #1
 800bf52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	689a      	ldr	r2, [r3, #8]
 800bf5a:	4b0c      	ldr	r3, [pc, #48]	; (800bf8c <HAL_TIM_Base_Start_IT+0x50>)
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b06      	cmp	r3, #6
 800bf64:	d00b      	beq.n	800bf7e <HAL_TIM_Base_Start_IT+0x42>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf6c:	d007      	beq.n	800bf7e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0201 	orr.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	00010007 	.word	0x00010007

0800bf90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	f003 0302 	and.w	r3, r3, #2
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d122      	bne.n	800bfec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d11b      	bne.n	800bfec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0202 	mvn.w	r2, #2
 800bfbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f003 0303 	and.w	r3, r3, #3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f905 	bl	800c1e2 <HAL_TIM_IC_CaptureCallback>
 800bfd8:	e005      	b.n	800bfe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f8f7 	bl	800c1ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f908 	bl	800c1f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f003 0304 	and.w	r3, r3, #4
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	d122      	bne.n	800c040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b04      	cmp	r3, #4
 800c006:	d11b      	bne.n	800c040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f06f 0204 	mvn.w	r2, #4
 800c010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2202      	movs	r2, #2
 800c016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f8db 	bl	800c1e2 <HAL_TIM_IC_CaptureCallback>
 800c02c:	e005      	b.n	800c03a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f8cd 	bl	800c1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f8de 	bl	800c1f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	f003 0308 	and.w	r3, r3, #8
 800c04a:	2b08      	cmp	r3, #8
 800c04c:	d122      	bne.n	800c094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	f003 0308 	and.w	r3, r3, #8
 800c058:	2b08      	cmp	r3, #8
 800c05a:	d11b      	bne.n	800c094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f06f 0208 	mvn.w	r2, #8
 800c064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2204      	movs	r2, #4
 800c06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	f003 0303 	and.w	r3, r3, #3
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f8b1 	bl	800c1e2 <HAL_TIM_IC_CaptureCallback>
 800c080:	e005      	b.n	800c08e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f8a3 	bl	800c1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f8b4 	bl	800c1f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	f003 0310 	and.w	r3, r3, #16
 800c09e:	2b10      	cmp	r3, #16
 800c0a0:	d122      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f003 0310 	and.w	r3, r3, #16
 800c0ac:	2b10      	cmp	r3, #16
 800c0ae:	d11b      	bne.n	800c0e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f06f 0210 	mvn.w	r2, #16
 800c0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2208      	movs	r2, #8
 800c0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f887 	bl	800c1e2 <HAL_TIM_IC_CaptureCallback>
 800c0d4:	e005      	b.n	800c0e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f879 	bl	800c1ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f88a 	bl	800c1f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d10e      	bne.n	800c114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b01      	cmp	r3, #1
 800c102:	d107      	bne.n	800c114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0201 	mvn.w	r2, #1
 800c10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f7 fc5c 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11e:	2b80      	cmp	r3, #128	; 0x80
 800c120:	d10e      	bne.n	800c140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c12c:	2b80      	cmp	r3, #128	; 0x80
 800c12e:	d107      	bne.n	800c140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f914 	bl	800c368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14e:	d10e      	bne.n	800c16e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c15a:	2b80      	cmp	r3, #128	; 0x80
 800c15c:	d107      	bne.n	800c16e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f907 	bl	800c37c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c178:	2b40      	cmp	r3, #64	; 0x40
 800c17a:	d10e      	bne.n	800c19a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c186:	2b40      	cmp	r3, #64	; 0x40
 800c188:	d107      	bne.n	800c19a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f838 	bl	800c20a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	f003 0320 	and.w	r3, r3, #32
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d10e      	bne.n	800c1c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	f003 0320 	and.w	r3, r3, #32
 800c1b2:	2b20      	cmp	r3, #32
 800c1b4:	d107      	bne.n	800c1c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f06f 0220 	mvn.w	r2, #32
 800c1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f8c7 	bl	800c354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1fe:	bf00      	nop
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c212:	bf00      	nop
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
	...

0800c220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a40      	ldr	r2, [pc, #256]	; (800c334 <TIM_Base_SetConfig+0x114>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d013      	beq.n	800c260 <TIM_Base_SetConfig+0x40>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c23e:	d00f      	beq.n	800c260 <TIM_Base_SetConfig+0x40>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a3d      	ldr	r2, [pc, #244]	; (800c338 <TIM_Base_SetConfig+0x118>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d00b      	beq.n	800c260 <TIM_Base_SetConfig+0x40>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a3c      	ldr	r2, [pc, #240]	; (800c33c <TIM_Base_SetConfig+0x11c>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d007      	beq.n	800c260 <TIM_Base_SetConfig+0x40>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a3b      	ldr	r2, [pc, #236]	; (800c340 <TIM_Base_SetConfig+0x120>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d003      	beq.n	800c260 <TIM_Base_SetConfig+0x40>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a3a      	ldr	r2, [pc, #232]	; (800c344 <TIM_Base_SetConfig+0x124>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d108      	bne.n	800c272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4313      	orrs	r3, r2
 800c270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2f      	ldr	r2, [pc, #188]	; (800c334 <TIM_Base_SetConfig+0x114>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01f      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c280:	d01b      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a2c      	ldr	r2, [pc, #176]	; (800c338 <TIM_Base_SetConfig+0x118>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d017      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a2b      	ldr	r2, [pc, #172]	; (800c33c <TIM_Base_SetConfig+0x11c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d013      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a2a      	ldr	r2, [pc, #168]	; (800c340 <TIM_Base_SetConfig+0x120>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a29      	ldr	r2, [pc, #164]	; (800c344 <TIM_Base_SetConfig+0x124>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a28      	ldr	r2, [pc, #160]	; (800c348 <TIM_Base_SetConfig+0x128>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a27      	ldr	r2, [pc, #156]	; (800c34c <TIM_Base_SetConfig+0x12c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_Base_SetConfig+0x9a>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a26      	ldr	r2, [pc, #152]	; (800c350 <TIM_Base_SetConfig+0x130>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d108      	bne.n	800c2cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <TIM_Base_SetConfig+0x114>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d00f      	beq.n	800c318 <TIM_Base_SetConfig+0xf8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a12      	ldr	r2, [pc, #72]	; (800c344 <TIM_Base_SetConfig+0x124>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d00b      	beq.n	800c318 <TIM_Base_SetConfig+0xf8>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a11      	ldr	r2, [pc, #68]	; (800c348 <TIM_Base_SetConfig+0x128>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d007      	beq.n	800c318 <TIM_Base_SetConfig+0xf8>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a10      	ldr	r2, [pc, #64]	; (800c34c <TIM_Base_SetConfig+0x12c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d003      	beq.n	800c318 <TIM_Base_SetConfig+0xf8>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a0f      	ldr	r2, [pc, #60]	; (800c350 <TIM_Base_SetConfig+0x130>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d103      	bne.n	800c320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	615a      	str	r2, [r3, #20]
}
 800c326:	bf00      	nop
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	40012c00 	.word	0x40012c00
 800c338:	40000400 	.word	0x40000400
 800c33c:	40000800 	.word	0x40000800
 800c340:	40000c00 	.word	0x40000c00
 800c344:	40013400 	.word	0x40013400
 800c348:	40014000 	.word	0x40014000
 800c34c:	40014400 	.word	0x40014400
 800c350:	40014800 	.word	0x40014800

0800c354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e040      	b.n	800c424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7f8 fa9e 	bl	80048f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2224      	movs	r2, #36	; 0x24
 800c3bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f022 0201 	bic.w	r2, r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fab0 	bl	800c934 <UART_SetConfig>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d101      	bne.n	800c3de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e022      	b.n	800c424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fe16 	bl	800d018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c40a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0201 	orr.w	r2, r2, #1
 800c41a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fe9d 	bl	800d15c <UART_CheckIdleState>
 800c422:	4603      	mov	r3, r0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e027      	b.n	800c48e <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2224      	movs	r2, #36	; 0x24
 800c442:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0201 	bic.w	r2, r2, #1
 800c452:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2200      	movs	r2, #0
 800c462:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2200      	movs	r2, #0
 800c46a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7f8 fb2f 	bl	8004ad0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d144      	bne.n	800c538 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d002      	beq.n	800c4ba <HAL_UART_Transmit_IT+0x22>
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e03d      	b.n	800c53a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d101      	bne.n	800c4cc <HAL_UART_Transmit_IT+0x34>
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	e036      	b.n	800c53a <HAL_UART_Transmit_IT+0xa2>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	88fa      	ldrh	r2, [r7, #6]
 800c4de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	88fa      	ldrh	r2, [r7, #6]
 800c4e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2221      	movs	r2, #33	; 0x21
 800c4fa:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c504:	d107      	bne.n	800c516 <HAL_UART_Transmit_IT+0x7e>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d103      	bne.n	800c516 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4a0d      	ldr	r2, [pc, #52]	; (800c548 <HAL_UART_Transmit_IT+0xb0>)
 800c512:	665a      	str	r2, [r3, #100]	; 0x64
 800c514:	e002      	b.n	800c51c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	4a0c      	ldr	r2, [pc, #48]	; (800c54c <HAL_UART_Transmit_IT+0xb4>)
 800c51a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c532:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	e000      	b.n	800c53a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800c538:	2302      	movs	r3, #2
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	0800d3bd 	.word	0x0800d3bd
 800c54c:	0800d349 	.word	0x0800d349

0800c550 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c562:	2b20      	cmp	r3, #32
 800c564:	f040 808a 	bne.w	800c67c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <HAL_UART_Receive_IT+0x24>
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e082      	b.n	800c67e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_UART_Receive_IT+0x36>
 800c582:	2302      	movs	r3, #2
 800c584:	e07b      	b.n	800c67e <HAL_UART_Receive_IT+0x12e>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	88fa      	ldrh	r2, [r7, #6]
 800c5a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b2:	d10e      	bne.n	800c5d2 <HAL_UART_Receive_IT+0x82>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d105      	bne.n	800c5c8 <HAL_UART_Receive_IT+0x78>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c5c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5c6:	e02d      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	22ff      	movs	r2, #255	; 0xff
 800c5cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5d0:	e028      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10d      	bne.n	800c5f6 <HAL_UART_Receive_IT+0xa6>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d104      	bne.n	800c5ec <HAL_UART_Receive_IT+0x9c>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	22ff      	movs	r2, #255	; 0xff
 800c5e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5ea:	e01b      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	227f      	movs	r2, #127	; 0x7f
 800c5f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5f4:	e016      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5fe:	d10d      	bne.n	800c61c <HAL_UART_Receive_IT+0xcc>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d104      	bne.n	800c612 <HAL_UART_Receive_IT+0xc2>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	227f      	movs	r2, #127	; 0x7f
 800c60c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c610:	e008      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	223f      	movs	r2, #63	; 0x3f
 800c616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c61a:	e003      	b.n	800c624 <HAL_UART_Receive_IT+0xd4>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2222      	movs	r2, #34	; 0x22
 800c62e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0201 	orr.w	r2, r2, #1
 800c63e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c648:	d107      	bne.n	800c65a <HAL_UART_Receive_IT+0x10a>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4a0d      	ldr	r2, [pc, #52]	; (800c68c <HAL_UART_Receive_IT+0x13c>)
 800c656:	661a      	str	r2, [r3, #96]	; 0x60
 800c658:	e002      	b.n	800c660 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4a0c      	ldr	r2, [pc, #48]	; (800c690 <HAL_UART_Receive_IT+0x140>)
 800c65e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c676:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	e000      	b.n	800c67e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800c67c:	2302      	movs	r3, #2
  }
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3714      	adds	r7, #20
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	0800d515 	.word	0x0800d515
 800c690:	0800d46b 	.word	0x0800d46b

0800c694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c6b4:	69fa      	ldr	r2, [r7, #28]
 800c6b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d113      	bne.n	800c6ec <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	f003 0320 	and.w	r3, r3, #32
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00e      	beq.n	800c6ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	f003 0320 	and.w	r3, r3, #32
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d009      	beq.n	800c6ec <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8114 	beq.w	800c90a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	4798      	blx	r3
      }
      return;
 800c6ea:	e10e      	b.n	800c90a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 80d6 	beq.w	800c8a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d105      	bne.n	800c70a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 80cb 	beq.w	800c8a0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00e      	beq.n	800c732 <HAL_UART_IRQHandler+0x9e>
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2201      	movs	r2, #1
 800c724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c72a:	f043 0201 	orr.w	r2, r3, #1
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00e      	beq.n	800c75a <HAL_UART_IRQHandler+0xc6>
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d009      	beq.n	800c75a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2202      	movs	r2, #2
 800c74c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c752:	f043 0204 	orr.w	r2, r3, #4
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00e      	beq.n	800c782 <HAL_UART_IRQHandler+0xee>
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2204      	movs	r2, #4
 800c774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77a:	f043 0202 	orr.w	r2, r3, #2
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	f003 0308 	and.w	r3, r3, #8
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d013      	beq.n	800c7b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d104      	bne.n	800c7a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d009      	beq.n	800c7b4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ac:	f043 0208 	orr.w	r2, r3, #8
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00f      	beq.n	800c7de <HAL_UART_IRQHandler+0x14a>
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d6:	f043 0220 	orr.w	r2, r3, #32
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 8093 	beq.w	800c90e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	f003 0320 	and.w	r3, r3, #32
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00c      	beq.n	800c80c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	f003 0320 	and.w	r3, r3, #32
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c810:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81c:	2b40      	cmp	r3, #64	; 0x40
 800c81e:	d004      	beq.n	800c82a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c826:	2b00      	cmp	r3, #0
 800c828:	d031      	beq.n	800c88e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fd56 	bl	800d2dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c83a:	2b40      	cmp	r3, #64	; 0x40
 800c83c:	d123      	bne.n	800c886 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c84c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c852:	2b00      	cmp	r3, #0
 800c854:	d013      	beq.n	800c87e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85a:	4a30      	ldr	r2, [pc, #192]	; (800c91c <HAL_UART_IRQHandler+0x288>)
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c862:	4618      	mov	r0, r3
 800c864:	f7f9 ff0c 	bl	8006680 <HAL_DMA_Abort_IT>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d016      	beq.n	800c89c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c87c:	e00e      	b.n	800c89c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f8 fd5c 	bl	800533c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c884:	e00a      	b.n	800c89c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7f8 fd58 	bl	800533c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c88c:	e006      	b.n	800c89c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7f8 fd54 	bl	800533c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800c89a:	e038      	b.n	800c90e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89c:	bf00      	nop
    return;
 800c89e:	e036      	b.n	800c90e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00d      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x232>
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d008      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c8bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fe7d 	bl	800d5be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8c4:	e026      	b.n	800c914 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00d      	beq.n	800c8ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d008      	beq.n	800c8ec <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d017      	beq.n	800c912 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
    }
    return;
 800c8ea:	e012      	b.n	800c912 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00e      	beq.n	800c914 <HAL_UART_IRQHandler+0x280>
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d009      	beq.n	800c914 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fd99 	bl	800d438 <UART_EndTransmit_IT>
    return;
 800c906:	bf00      	nop
 800c908:	e004      	b.n	800c914 <HAL_UART_IRQHandler+0x280>
      return;
 800c90a:	bf00      	nop
 800c90c:	e002      	b.n	800c914 <HAL_UART_IRQHandler+0x280>
    return;
 800c90e:	bf00      	nop
 800c910:	e000      	b.n	800c914 <HAL_UART_IRQHandler+0x280>
    return;
 800c912:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c914:	3720      	adds	r7, #32
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	0800d31d 	.word	0x0800d31d

0800c920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c934:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c938:	b08a      	sub	sp, #40	; 0x28
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c93e:	2300      	movs	r3, #0
 800c940:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689a      	ldr	r2, [r3, #8]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	431a      	orrs	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69db      	ldr	r3, [r3, #28]
 800c95e:	4313      	orrs	r3, r2
 800c960:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	4bb8      	ldr	r3, [pc, #736]	; (800cc4c <UART_SetConfig+0x318>)
 800c96a:	4013      	ands	r3, r2
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	6812      	ldr	r2, [r2, #0]
 800c970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c972:	430b      	orrs	r3, r1
 800c974:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	430a      	orrs	r2, r1
 800c98a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4aae      	ldr	r2, [pc, #696]	; (800cc50 <UART_SetConfig+0x31c>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d004      	beq.n	800c9a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4aa5      	ldr	r2, [pc, #660]	; (800cc54 <UART_SetConfig+0x320>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d126      	bne.n	800ca12 <UART_SetConfig+0xde>
 800c9c4:	4ba4      	ldr	r3, [pc, #656]	; (800cc58 <UART_SetConfig+0x324>)
 800c9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ca:	f003 0303 	and.w	r3, r3, #3
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d81a      	bhi.n	800ca08 <UART_SetConfig+0xd4>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <UART_SetConfig+0xa4>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9e9 	.word	0x0800c9e9
 800c9dc:	0800c9f9 	.word	0x0800c9f9
 800c9e0:	0800c9f1 	.word	0x0800c9f1
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9ee:	e105      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9f6:	e101      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9fe:	e0fd      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca06:	e0f9      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca0e:	bf00      	nop
 800ca10:	e0f4      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a91      	ldr	r2, [pc, #580]	; (800cc5c <UART_SetConfig+0x328>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d138      	bne.n	800ca8e <UART_SetConfig+0x15a>
 800ca1c:	4b8e      	ldr	r3, [pc, #568]	; (800cc58 <UART_SetConfig+0x324>)
 800ca1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca22:	f003 030c 	and.w	r3, r3, #12
 800ca26:	2b0c      	cmp	r3, #12
 800ca28:	d82c      	bhi.n	800ca84 <UART_SetConfig+0x150>
 800ca2a:	a201      	add	r2, pc, #4	; (adr r2, 800ca30 <UART_SetConfig+0xfc>)
 800ca2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca30:	0800ca65 	.word	0x0800ca65
 800ca34:	0800ca85 	.word	0x0800ca85
 800ca38:	0800ca85 	.word	0x0800ca85
 800ca3c:	0800ca85 	.word	0x0800ca85
 800ca40:	0800ca75 	.word	0x0800ca75
 800ca44:	0800ca85 	.word	0x0800ca85
 800ca48:	0800ca85 	.word	0x0800ca85
 800ca4c:	0800ca85 	.word	0x0800ca85
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca85 	.word	0x0800ca85
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca7d 	.word	0x0800ca7d
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca6a:	e0c7      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca72:	e0c3      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca74:	2304      	movs	r3, #4
 800ca76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca7a:	e0bf      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca7c:	2308      	movs	r3, #8
 800ca7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca82:	e0bb      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca84:	2310      	movs	r3, #16
 800ca86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca8a:	bf00      	nop
 800ca8c:	e0b6      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a73      	ldr	r2, [pc, #460]	; (800cc60 <UART_SetConfig+0x32c>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d125      	bne.n	800cae4 <UART_SetConfig+0x1b0>
 800ca98:	4b6f      	ldr	r3, [pc, #444]	; (800cc58 <UART_SetConfig+0x324>)
 800ca9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800caa2:	2b10      	cmp	r3, #16
 800caa4:	d011      	beq.n	800caca <UART_SetConfig+0x196>
 800caa6:	2b10      	cmp	r3, #16
 800caa8:	d802      	bhi.n	800cab0 <UART_SetConfig+0x17c>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d005      	beq.n	800caba <UART_SetConfig+0x186>
 800caae:	e014      	b.n	800cada <UART_SetConfig+0x1a6>
 800cab0:	2b20      	cmp	r3, #32
 800cab2:	d006      	beq.n	800cac2 <UART_SetConfig+0x18e>
 800cab4:	2b30      	cmp	r3, #48	; 0x30
 800cab6:	d00c      	beq.n	800cad2 <UART_SetConfig+0x19e>
 800cab8:	e00f      	b.n	800cada <UART_SetConfig+0x1a6>
 800caba:	2300      	movs	r3, #0
 800cabc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cac0:	e09c      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cac2:	2302      	movs	r3, #2
 800cac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cac8:	e098      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800caca:	2304      	movs	r3, #4
 800cacc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cad0:	e094      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cad2:	2308      	movs	r3, #8
 800cad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cad8:	e090      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cada:	2310      	movs	r3, #16
 800cadc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cae0:	bf00      	nop
 800cae2:	e08b      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a5e      	ldr	r2, [pc, #376]	; (800cc64 <UART_SetConfig+0x330>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d125      	bne.n	800cb3a <UART_SetConfig+0x206>
 800caee:	4b5a      	ldr	r3, [pc, #360]	; (800cc58 <UART_SetConfig+0x324>)
 800caf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800caf8:	2b40      	cmp	r3, #64	; 0x40
 800cafa:	d011      	beq.n	800cb20 <UART_SetConfig+0x1ec>
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	d802      	bhi.n	800cb06 <UART_SetConfig+0x1d2>
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d005      	beq.n	800cb10 <UART_SetConfig+0x1dc>
 800cb04:	e014      	b.n	800cb30 <UART_SetConfig+0x1fc>
 800cb06:	2b80      	cmp	r3, #128	; 0x80
 800cb08:	d006      	beq.n	800cb18 <UART_SetConfig+0x1e4>
 800cb0a:	2bc0      	cmp	r3, #192	; 0xc0
 800cb0c:	d00c      	beq.n	800cb28 <UART_SetConfig+0x1f4>
 800cb0e:	e00f      	b.n	800cb30 <UART_SetConfig+0x1fc>
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb16:	e071      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb1e:	e06d      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb20:	2304      	movs	r3, #4
 800cb22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb26:	e069      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb28:	2308      	movs	r3, #8
 800cb2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb2e:	e065      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb30:	2310      	movs	r3, #16
 800cb32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb36:	bf00      	nop
 800cb38:	e060      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a4a      	ldr	r2, [pc, #296]	; (800cc68 <UART_SetConfig+0x334>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d129      	bne.n	800cb98 <UART_SetConfig+0x264>
 800cb44:	4b44      	ldr	r3, [pc, #272]	; (800cc58 <UART_SetConfig+0x324>)
 800cb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb52:	d014      	beq.n	800cb7e <UART_SetConfig+0x24a>
 800cb54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb58:	d802      	bhi.n	800cb60 <UART_SetConfig+0x22c>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d007      	beq.n	800cb6e <UART_SetConfig+0x23a>
 800cb5e:	e016      	b.n	800cb8e <UART_SetConfig+0x25a>
 800cb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb64:	d007      	beq.n	800cb76 <UART_SetConfig+0x242>
 800cb66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb6a:	d00c      	beq.n	800cb86 <UART_SetConfig+0x252>
 800cb6c:	e00f      	b.n	800cb8e <UART_SetConfig+0x25a>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb74:	e042      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb76:	2302      	movs	r3, #2
 800cb78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb7c:	e03e      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb7e:	2304      	movs	r3, #4
 800cb80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb84:	e03a      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb86:	2308      	movs	r3, #8
 800cb88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb8c:	e036      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb8e:	2310      	movs	r3, #16
 800cb90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb94:	bf00      	nop
 800cb96:	e031      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a2c      	ldr	r2, [pc, #176]	; (800cc50 <UART_SetConfig+0x31c>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d129      	bne.n	800cbf6 <UART_SetConfig+0x2c2>
 800cba2:	4b2d      	ldr	r3, [pc, #180]	; (800cc58 <UART_SetConfig+0x324>)
 800cba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cbac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbb0:	d014      	beq.n	800cbdc <UART_SetConfig+0x2a8>
 800cbb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbb6:	d802      	bhi.n	800cbbe <UART_SetConfig+0x28a>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d007      	beq.n	800cbcc <UART_SetConfig+0x298>
 800cbbc:	e016      	b.n	800cbec <UART_SetConfig+0x2b8>
 800cbbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbc2:	d007      	beq.n	800cbd4 <UART_SetConfig+0x2a0>
 800cbc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbc8:	d00c      	beq.n	800cbe4 <UART_SetConfig+0x2b0>
 800cbca:	e00f      	b.n	800cbec <UART_SetConfig+0x2b8>
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbd2:	e013      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbda:	e00f      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cbdc:	2304      	movs	r3, #4
 800cbde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbe2:	e00b      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cbe4:	2308      	movs	r3, #8
 800cbe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbea:	e007      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cbec:	2310      	movs	r3, #16
 800cbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbf2:	bf00      	nop
 800cbf4:	e002      	b.n	800cbfc <UART_SetConfig+0x2c8>
 800cbf6:	2310      	movs	r3, #16
 800cbf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a13      	ldr	r2, [pc, #76]	; (800cc50 <UART_SetConfig+0x31c>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	f040 80fe 	bne.w	800ce04 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	d837      	bhi.n	800cc80 <UART_SetConfig+0x34c>
 800cc10:	a201      	add	r2, pc, #4	; (adr r2, 800cc18 <UART_SetConfig+0x2e4>)
 800cc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc16:	bf00      	nop
 800cc18:	0800cc3d 	.word	0x0800cc3d
 800cc1c:	0800cc81 	.word	0x0800cc81
 800cc20:	0800cc45 	.word	0x0800cc45
 800cc24:	0800cc81 	.word	0x0800cc81
 800cc28:	0800cc71 	.word	0x0800cc71
 800cc2c:	0800cc81 	.word	0x0800cc81
 800cc30:	0800cc81 	.word	0x0800cc81
 800cc34:	0800cc81 	.word	0x0800cc81
 800cc38:	0800cc79 	.word	0x0800cc79
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800cc3c:	f7fc fdc6 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800cc40:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc42:	e020      	b.n	800cc86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800cc44:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <UART_SetConfig+0x338>)
 800cc46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc48:	e01d      	b.n	800cc86 <UART_SetConfig+0x352>
 800cc4a:	bf00      	nop
 800cc4c:	efff69f3 	.word	0xefff69f3
 800cc50:	40008000 	.word	0x40008000
 800cc54:	40013800 	.word	0x40013800
 800cc58:	40021000 	.word	0x40021000
 800cc5c:	40004400 	.word	0x40004400
 800cc60:	40004800 	.word	0x40004800
 800cc64:	40004c00 	.word	0x40004c00
 800cc68:	40005000 	.word	0x40005000
 800cc6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800cc70:	f7fc fd16 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800cc74:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc76:	e006      	b.n	800cc86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800cc78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc7e:	e002      	b.n	800cc86 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	76fb      	strb	r3, [r7, #27]
        break;
 800cc84:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 81b9 	beq.w	800d000 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	4613      	mov	r3, r2
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4413      	add	r3, r2
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d305      	bcc.n	800ccaa <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d902      	bls.n	800ccb0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	76fb      	strb	r3, [r7, #27]
 800ccae:	e1a7      	b.n	800d000 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800ccb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccb4:	2b08      	cmp	r3, #8
 800ccb6:	f200 8092 	bhi.w	800cdde <UART_SetConfig+0x4aa>
 800ccba:	a201      	add	r2, pc, #4	; (adr r2, 800ccc0 <UART_SetConfig+0x38c>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cce5 	.word	0x0800cce5
 800ccc4:	0800cddf 	.word	0x0800cddf
 800ccc8:	0800cd33 	.word	0x0800cd33
 800cccc:	0800cddf 	.word	0x0800cddf
 800ccd0:	0800cd67 	.word	0x0800cd67
 800ccd4:	0800cddf 	.word	0x0800cddf
 800ccd8:	0800cddf 	.word	0x0800cddf
 800ccdc:	0800cddf 	.word	0x0800cddf
 800cce0:	0800cdb5 	.word	0x0800cdb5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800cce4:	f7fc fd72 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800cce8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	4619      	mov	r1, r3
 800ccee:	f04f 0200 	mov.w	r2, #0
 800ccf2:	f04f 0300 	mov.w	r3, #0
 800ccf6:	f04f 0400 	mov.w	r4, #0
 800ccfa:	0214      	lsls	r4, r2, #8
 800ccfc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd00:	020b      	lsls	r3, r1, #8
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	6852      	ldr	r2, [r2, #4]
 800cd06:	0852      	lsrs	r2, r2, #1
 800cd08:	4611      	mov	r1, r2
 800cd0a:	f04f 0200 	mov.w	r2, #0
 800cd0e:	eb13 0b01 	adds.w	fp, r3, r1
 800cd12:	eb44 0c02 	adc.w	ip, r4, r2
 800cd16:	4658      	mov	r0, fp
 800cd18:	4661      	mov	r1, ip
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f04f 0400 	mov.w	r4, #0
 800cd22:	461a      	mov	r2, r3
 800cd24:	4623      	mov	r3, r4
 800cd26:	f7f3 ff9f 	bl	8000c68 <__aeabi_uldivmod>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cd30:	e058      	b.n	800cde4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	085b      	lsrs	r3, r3, #1
 800cd38:	f04f 0400 	mov.w	r4, #0
 800cd3c:	49ae      	ldr	r1, [pc, #696]	; (800cff8 <UART_SetConfig+0x6c4>)
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	eb13 0b01 	adds.w	fp, r3, r1
 800cd46:	eb44 0c02 	adc.w	ip, r4, r2
 800cd4a:	4658      	mov	r0, fp
 800cd4c:	4661      	mov	r1, ip
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	f04f 0400 	mov.w	r4, #0
 800cd56:	461a      	mov	r2, r3
 800cd58:	4623      	mov	r3, r4
 800cd5a:	f7f3 ff85 	bl	8000c68 <__aeabi_uldivmod>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	460c      	mov	r4, r1
 800cd62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cd64:	e03e      	b.n	800cde4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800cd66:	f7fc fc9b 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800cd6a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f04f 0200 	mov.w	r2, #0
 800cd74:	f04f 0300 	mov.w	r3, #0
 800cd78:	f04f 0400 	mov.w	r4, #0
 800cd7c:	0214      	lsls	r4, r2, #8
 800cd7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd82:	020b      	lsls	r3, r1, #8
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6852      	ldr	r2, [r2, #4]
 800cd88:	0852      	lsrs	r2, r2, #1
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	f04f 0200 	mov.w	r2, #0
 800cd90:	eb13 0b01 	adds.w	fp, r3, r1
 800cd94:	eb44 0c02 	adc.w	ip, r4, r2
 800cd98:	4658      	mov	r0, fp
 800cd9a:	4661      	mov	r1, ip
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	f04f 0400 	mov.w	r4, #0
 800cda4:	461a      	mov	r2, r3
 800cda6:	4623      	mov	r3, r4
 800cda8:	f7f3 ff5e 	bl	8000c68 <__aeabi_uldivmod>
 800cdac:	4603      	mov	r3, r0
 800cdae:	460c      	mov	r4, r1
 800cdb0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cdb2:	e017      	b.n	800cde4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	085b      	lsrs	r3, r3, #1
 800cdba:	f04f 0400 	mov.w	r4, #0
 800cdbe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800cdc2:	f144 0100 	adc.w	r1, r4, #0
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f04f 0400 	mov.w	r4, #0
 800cdce:	461a      	mov	r2, r3
 800cdd0:	4623      	mov	r3, r4
 800cdd2:	f7f3 ff49 	bl	8000c68 <__aeabi_uldivmod>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	460c      	mov	r4, r1
 800cdda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cddc:	e002      	b.n	800cde4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	76fb      	strb	r3, [r7, #27]
            break;
 800cde2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cdea:	d308      	bcc.n	800cdfe <UART_SetConfig+0x4ca>
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdf2:	d204      	bcs.n	800cdfe <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	60da      	str	r2, [r3, #12]
 800cdfc:	e100      	b.n	800d000 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	76fb      	strb	r3, [r7, #27]
 800ce02:	e0fd      	b.n	800d000 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	69db      	ldr	r3, [r3, #28]
 800ce08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce0c:	f040 8084 	bne.w	800cf18 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800ce10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce14:	2b08      	cmp	r3, #8
 800ce16:	d85f      	bhi.n	800ced8 <UART_SetConfig+0x5a4>
 800ce18:	a201      	add	r2, pc, #4	; (adr r2, 800ce20 <UART_SetConfig+0x4ec>)
 800ce1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1e:	bf00      	nop
 800ce20:	0800ce45 	.word	0x0800ce45
 800ce24:	0800ce65 	.word	0x0800ce65
 800ce28:	0800ce85 	.word	0x0800ce85
 800ce2c:	0800ced9 	.word	0x0800ced9
 800ce30:	0800cea1 	.word	0x0800cea1
 800ce34:	0800ced9 	.word	0x0800ced9
 800ce38:	0800ced9 	.word	0x0800ced9
 800ce3c:	0800ced9 	.word	0x0800ced9
 800ce40:	0800cec1 	.word	0x0800cec1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce44:	f7fc fcc2 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800ce48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	005a      	lsls	r2, r3, #1
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	085b      	lsrs	r3, r3, #1
 800ce54:	441a      	add	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce62:	e03c      	b.n	800cede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce64:	f7fc fcc8 	bl	80097f8 <HAL_RCC_GetPCLK2Freq>
 800ce68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	005a      	lsls	r2, r3, #1
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	085b      	lsrs	r3, r3, #1
 800ce74:	441a      	add	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce82:	e02c      	b.n	800cede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	085b      	lsrs	r3, r3, #1
 800ce8a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800ce8e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	6852      	ldr	r2, [r2, #4]
 800ce96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce9e:	e01e      	b.n	800cede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cea0:	f7fc fbfe 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800cea4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	005a      	lsls	r2, r3, #1
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	085b      	lsrs	r3, r3, #1
 800ceb0:	441a      	add	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cebe:	e00e      	b.n	800cede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	085b      	lsrs	r3, r3, #1
 800cec6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ced6:	e002      	b.n	800cede <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	76fb      	strb	r3, [r7, #27]
        break;
 800cedc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	2b0f      	cmp	r3, #15
 800cee2:	d916      	bls.n	800cf12 <UART_SetConfig+0x5de>
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceea:	d212      	bcs.n	800cf12 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f023 030f 	bic.w	r3, r3, #15
 800cef4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	f003 0307 	and.w	r3, r3, #7
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	89fa      	ldrh	r2, [r7, #14]
 800cf0e:	60da      	str	r2, [r3, #12]
 800cf10:	e076      	b.n	800d000 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	76fb      	strb	r3, [r7, #27]
 800cf16:	e073      	b.n	800d000 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800cf18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	d85c      	bhi.n	800cfda <UART_SetConfig+0x6a6>
 800cf20:	a201      	add	r2, pc, #4	; (adr r2, 800cf28 <UART_SetConfig+0x5f4>)
 800cf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf26:	bf00      	nop
 800cf28:	0800cf4d 	.word	0x0800cf4d
 800cf2c:	0800cf6b 	.word	0x0800cf6b
 800cf30:	0800cf89 	.word	0x0800cf89
 800cf34:	0800cfdb 	.word	0x0800cfdb
 800cf38:	0800cfa5 	.word	0x0800cfa5
 800cf3c:	0800cfdb 	.word	0x0800cfdb
 800cf40:	0800cfdb 	.word	0x0800cfdb
 800cf44:	0800cfdb 	.word	0x0800cfdb
 800cf48:	0800cfc3 	.word	0x0800cfc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf4c:	f7fc fc3e 	bl	80097cc <HAL_RCC_GetPCLK1Freq>
 800cf50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	085a      	lsrs	r2, r3, #1
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	441a      	add	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf68:	e03a      	b.n	800cfe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf6a:	f7fc fc45 	bl	80097f8 <HAL_RCC_GetPCLK2Freq>
 800cf6e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	085a      	lsrs	r2, r3, #1
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	441a      	add	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf86:	e02b      	b.n	800cfe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	085b      	lsrs	r3, r3, #1
 800cf8e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800cf92:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	6852      	ldr	r2, [r2, #4]
 800cf9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cfa2:	e01d      	b.n	800cfe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfa4:	f7fc fb7c 	bl	80096a0 <HAL_RCC_GetSysClockFreq>
 800cfa8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	085a      	lsrs	r2, r3, #1
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	441a      	add	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cfc0:	e00e      	b.n	800cfe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	085b      	lsrs	r3, r3, #1
 800cfc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cfd8:	e002      	b.n	800cfe0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	76fb      	strb	r3, [r7, #27]
        break;
 800cfde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	2b0f      	cmp	r3, #15
 800cfe4:	d90a      	bls.n	800cffc <UART_SetConfig+0x6c8>
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfec:	d206      	bcs.n	800cffc <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69fa      	ldr	r2, [r7, #28]
 800cff4:	60da      	str	r2, [r3, #12]
 800cff6:	e003      	b.n	800d000 <UART_SetConfig+0x6cc>
 800cff8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d00c:	7efb      	ldrb	r3, [r7, #27]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3728      	adds	r7, #40	; 0x28
 800d012:	46bd      	mov	sp, r7
 800d014:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800d018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	f003 0302 	and.w	r3, r3, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	430a      	orrs	r2, r1
 800d062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	f003 0308 	and.w	r3, r3, #8
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00a      	beq.n	800d0a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	f003 0310 	and.w	r3, r3, #16
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	430a      	orrs	r2, r1
 800d0c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ce:	f003 0320 	and.w	r3, r3, #32
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01a      	beq.n	800d12e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	430a      	orrs	r2, r1
 800d10c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d116:	d10a      	bne.n	800d12e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	430a      	orrs	r2, r1
 800d14e:	605a      	str	r2, [r3, #4]
  }
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af02      	add	r7, sp, #8
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d16a:	f7f8 f987 	bl	800547c <HAL_GetTick>
 800d16e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 0308 	and.w	r3, r3, #8
 800d17a:	2b08      	cmp	r3, #8
 800d17c:	d10e      	bne.n	800d19c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d17e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2200      	movs	r2, #0
 800d188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f82a 	bl	800d1e6 <UART_WaitOnFlagUntilTimeout>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d001      	beq.n	800d19c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d198:	2303      	movs	r3, #3
 800d19a:	e020      	b.n	800d1de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0304 	and.w	r3, r3, #4
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	d10e      	bne.n	800d1c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f814 	bl	800d1e6 <UART_WaitOnFlagUntilTimeout>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	e00a      	b.n	800d1de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2220      	movs	r2, #32
 800d1cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2220      	movs	r2, #32
 800d1d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b084      	sub	sp, #16
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	60f8      	str	r0, [r7, #12]
 800d1ee:	60b9      	str	r1, [r7, #8]
 800d1f0:	603b      	str	r3, [r7, #0]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f6:	e05d      	b.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1fe:	d059      	beq.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d200:	f7f8 f93c 	bl	800547c <HAL_GetTick>
 800d204:	4602      	mov	r2, r0
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d302      	bcc.n	800d216 <UART_WaitOnFlagUntilTimeout+0x30>
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d11b      	bne.n	800d24e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d224:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f022 0201 	bic.w	r2, r2, #1
 800d234:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2220      	movs	r2, #32
 800d23a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2220      	movs	r2, #32
 800d240:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	e042      	b.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 0304 	and.w	r3, r3, #4
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d02b      	beq.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	69db      	ldr	r3, [r3, #28]
 800d262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d26a:	d123      	bne.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d274:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d284:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f022 0201 	bic.w	r2, r2, #1
 800d294:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2220      	movs	r2, #32
 800d29a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2220      	movs	r2, #32
 800d2a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2220      	movs	r2, #32
 800d2a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e00f      	b.n	800d2d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69da      	ldr	r2, [r3, #28]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	4013      	ands	r3, r2
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	bf0c      	ite	eq
 800d2c4:	2301      	moveq	r3, #1
 800d2c6:	2300      	movne	r3, #0
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d092      	beq.n	800d1f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d2f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689a      	ldr	r2, [r3, #8]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f022 0201 	bic.w	r2, r2, #1
 800d302:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2220      	movs	r2, #32
 800d308:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7f7 fffe 	bl	800533c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d340:	bf00      	nop
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d354:	2b21      	cmp	r3, #33	; 0x21
 800d356:	d12b      	bne.n	800d3b0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d35e:	b29b      	uxth	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	d110      	bne.n	800d386 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d372:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d382:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d384:	e014      	b.n	800d3b0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d38a:	781a      	ldrb	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	b292      	uxth	r2, r2
 800d392:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d398:	1c5a      	adds	r2, r3, #1
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3c8:	2b21      	cmp	r3, #33	; 0x21
 800d3ca:	d12f      	bne.n	800d42c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d110      	bne.n	800d3fa <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3e6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3f6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d3f8:	e018      	b.n	800d42c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	881a      	ldrh	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d40c:	b292      	uxth	r2, r2
 800d40e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d414:	1c9a      	adds	r2, r3, #2
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d420:	b29b      	uxth	r3, r3
 800d422:	3b01      	subs	r3, #1
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d44e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2220      	movs	r2, #32
 800d454:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff fa5f 	bl	800c920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d462:	bf00      	nop
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b084      	sub	sp, #16
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d478:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d47e:	2b22      	cmp	r3, #34	; 0x22
 800d480:	d13a      	bne.n	800d4f8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d488:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d48a:	89bb      	ldrh	r3, [r7, #12]
 800d48c:	b2d9      	uxtb	r1, r3
 800d48e:	89fb      	ldrh	r3, [r7, #14]
 800d490:	b2da      	uxtb	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d496:	400a      	ands	r2, r1
 800d498:	b2d2      	uxtb	r2, r2
 800d49a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d123      	bne.n	800d50c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d4d2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689a      	ldr	r2, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f022 0201 	bic.w	r2, r2, #1
 800d4e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2220      	movs	r2, #32
 800d4e8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7f7 fec1 	bl	8005278 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4f6:	e009      	b.n	800d50c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	8b1b      	ldrh	r3, [r3, #24]
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f042 0208 	orr.w	r2, r2, #8
 800d508:	b292      	uxth	r2, r2
 800d50a:	831a      	strh	r2, [r3, #24]
}
 800d50c:	bf00      	nop
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d522:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d528:	2b22      	cmp	r3, #34	; 0x22
 800d52a:	d13a      	bne.n	800d5a2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d532:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d538:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d53a:	89ba      	ldrh	r2, [r7, #12]
 800d53c:	89fb      	ldrh	r3, [r7, #14]
 800d53e:	4013      	ands	r3, r2
 800d540:	b29a      	uxth	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54a:	1c9a      	adds	r2, r3, #2
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d556:	b29b      	uxth	r3, r3
 800d558:	3b01      	subs	r3, #1
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d568:	b29b      	uxth	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d123      	bne.n	800d5b6 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d57c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	689a      	ldr	r2, [r3, #8]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f022 0201 	bic.w	r2, r2, #1
 800d58c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2220      	movs	r2, #32
 800d592:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7f7 fe6c 	bl	8005278 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5a0:	e009      	b.n	800d5b6 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	8b1b      	ldrh	r3, [r3, #24]
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f042 0208 	orr.w	r2, r2, #8
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	831a      	strh	r2, [r3, #24]
}
 800d5b6:	bf00      	nop
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b087      	sub	sp, #28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	6812      	ldr	r2, [r2, #0]
 800d5ec:	f023 0101 	bic.w	r1, r3, #1
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2b08      	cmp	r3, #8
 800d5fc:	d102      	bne.n	800d604 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d5fe:	2340      	movs	r3, #64	; 0x40
 800d600:	617b      	str	r3, [r7, #20]
 800d602:	e001      	b.n	800d608 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d614:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d61a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d620:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d626:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d62c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d632:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d638:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d63e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d644:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d64a:	4313      	orrs	r3, r2
 800d64c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d652:	693a      	ldr	r2, [r7, #16]
 800d654:	4313      	orrs	r3, r2
 800d656:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	4313      	orrs	r3, r2
 800d660:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	4313      	orrs	r3, r2
 800d66a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d66c:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <FMC_NORSRAM_Init+0x11c>)
 800d66e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d676:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d67e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d686:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	43db      	mvns	r3, r3
 800d696:	ea02 0103 	and.w	r1, r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	4319      	orrs	r1, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6b0:	d10c      	bne.n	800d6cc <FMC_NORSRAM_Init+0xf8>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d008      	beq.n	800d6cc <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	431a      	orrs	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	0008fb7f 	.word	0x0008fb7f

0800d6f4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b087      	sub	sp, #28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d70a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	431a      	orrs	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	021b      	lsls	r3, r3, #8
 800d720:	431a      	orrs	r2, r3
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	041b      	lsls	r3, r3, #16
 800d728:	431a      	orrs	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	3b01      	subs	r3, #1
 800d730:	051b      	lsls	r3, r3, #20
 800d732:	431a      	orrs	r2, r3
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	3b02      	subs	r3, #2
 800d73a:	061b      	lsls	r3, r3, #24
 800d73c:	431a      	orrs	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	69db      	ldr	r3, [r3, #28]
 800d742:	4313      	orrs	r3, r2
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	3201      	adds	r2, #1
 800d748:	4319      	orrs	r1, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d75c:	d113      	bne.n	800d786 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d766:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	695b      	ldr	r3, [r3, #20]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	051b      	lsls	r3, r3, #20
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4313      	orrs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	431a      	orrs	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d786:	2300      	movs	r3, #0
}
 800d788:	4618      	mov	r0, r3
 800d78a:	371c      	adds	r7, #28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7a8:	d11d      	bne.n	800d7e6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7b2:	4b13      	ldr	r3, [pc, #76]	; (800d800 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	6811      	ldr	r1, [r2, #0]
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	6852      	ldr	r2, [r2, #4]
 800d7be:	0112      	lsls	r2, r2, #4
 800d7c0:	4311      	orrs	r1, r2
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	6892      	ldr	r2, [r2, #8]
 800d7c6:	0212      	lsls	r2, r2, #8
 800d7c8:	4311      	orrs	r1, r2
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	69d2      	ldr	r2, [r2, #28]
 800d7ce:	4311      	orrs	r1, r2
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	6912      	ldr	r2, [r2, #16]
 800d7d4:	0412      	lsls	r2, r2, #16
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	ea43 0102 	orr.w	r1, r3, r2
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d7e4:	e005      	b.n	800d7f2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d7ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	cff00000 	.word	0xcff00000

0800d804 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d804:	b084      	sub	sp, #16
 800d806:	b480      	push	{r7}
 800d808:	b085      	sub	sp, #20
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	f107 001c 	add.w	r0, r7, #28
 800d812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d822:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800d826:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d82a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d82e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d832:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d842:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	b004      	add	sp, #16
 800d85c:	4770      	bx	lr

0800d85e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d85e:	b480      	push	{r7}
 800d860:	b083      	sub	sp, #12
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2203      	movs	r2, #3
 800d884:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d886:	2002      	movs	r0, #2
 800d888:	f7f7 fe04 	bl	8005494 <HAL_Delay>

  return HAL_OK;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d896:	b480      	push	{r7}
 800d898:	b083      	sub	sp, #12
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 0303 	and.w	r3, r3, #3
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b085      	sub	sp, #20
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d8d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d8d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d8dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d8ec:	f023 030f 	bic.w	r3, r3, #15
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	431a      	orrs	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	b2db      	uxtb	r3, r3
}
 800d914:	4618      	mov	r0, r3
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3314      	adds	r3, #20
 800d92e:	461a      	mov	r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	4413      	add	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d946:	b480      	push	{r7}
 800d948:	b085      	sub	sp, #20
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d96c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d972:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d978:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d984:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d990:	2300      	movs	r3, #0

}
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b088      	sub	sp, #32
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d9ac:	2310      	movs	r3, #16
 800d9ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9b0:	2340      	movs	r3, #64	; 0x40
 800d9b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9be:	f107 0308 	add.w	r3, r7, #8
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff ff74 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ce:	2110      	movs	r1, #16
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f975 	bl	800dcc0 <SDMMC_GetCmdResp1>
 800d9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3720      	adds	r7, #32
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b08a      	sub	sp, #40	; 0x28
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d9f2:	2307      	movs	r3, #7
 800d9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9f6:	2340      	movs	r3, #64	; 0x40
 800d9f8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da02:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da04:	f107 0310 	add.w	r3, r7, #16
 800da08:	4619      	mov	r1, r3
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7ff ff51 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800da10:	f241 3288 	movw	r2, #5000	; 0x1388
 800da14:	2107      	movs	r1, #7
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 f952 	bl	800dcc0 <SDMMC_GetCmdResp1>
 800da1c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800da1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da20:	4618      	mov	r0, r3
 800da22:	3728      	adds	r7, #40	; 0x28
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800da30:	2300      	movs	r3, #0
 800da32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800da34:	2300      	movs	r3, #0
 800da36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800da38:	2300      	movs	r3, #0
 800da3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da3c:	2300      	movs	r3, #0
 800da3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da46:	f107 0308 	add.w	r3, r7, #8
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff ff30 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f90c 	bl	800dc70 <SDMMC_GetCmdError>
 800da58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da5a:	69fb      	ldr	r3, [r7, #28]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3720      	adds	r7, #32
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da6c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800da70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da72:	2308      	movs	r3, #8
 800da74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da76:	2340      	movs	r3, #64	; 0x40
 800da78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da7a:	2300      	movs	r3, #0
 800da7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da84:	f107 0308 	add.w	r3, r7, #8
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff ff11 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 faf5 	bl	800e080 <SDMMC_GetCmdResp7>
 800da96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da98:	69fb      	ldr	r3, [r7, #28]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3720      	adds	r7, #32
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b088      	sub	sp, #32
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dab0:	2337      	movs	r3, #55	; 0x37
 800dab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab4:	2340      	movs	r3, #64	; 0x40
 800dab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dab8:	2300      	movs	r3, #0
 800daba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dabc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dac2:	f107 0308 	add.w	r3, r7, #8
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7ff fef2 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dace:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad2:	2137      	movs	r1, #55	; 0x37
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f8f3 	bl	800dcc0 <SDMMC_GetCmdResp1>
 800dada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dadc:	69fb      	ldr	r3, [r7, #28]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3720      	adds	r7, #32
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b088      	sub	sp, #32
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800daf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dafa:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dafc:	2329      	movs	r3, #41	; 0x29
 800dafe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db00:	2340      	movs	r3, #64	; 0x40
 800db02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db04:	2300      	movs	r3, #0
 800db06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db0e:	f107 0308 	add.w	r3, r7, #8
 800db12:	4619      	mov	r1, r3
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7ff fecc 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 fa02 	bl	800df24 <SDMMC_GetCmdResp3>
 800db20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db22:	69fb      	ldr	r3, [r7, #28]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3720      	adds	r7, #32
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800db3a:	2306      	movs	r3, #6
 800db3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db42:	2300      	movs	r3, #0
 800db44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fead 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800db58:	f241 3288 	movw	r2, #5000	; 0x1388
 800db5c:	2106      	movs	r1, #6
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f8ae 	bl	800dcc0 <SDMMC_GetCmdResp1>
 800db64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db66:	69fb      	ldr	r3, [r7, #28]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800db7c:	2333      	movs	r3, #51	; 0x33
 800db7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db80:	2340      	movs	r3, #64	; 0x40
 800db82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8e:	f107 0308 	add.w	r3, r7, #8
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fe8c 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800db9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800db9e:	2133      	movs	r1, #51	; 0x33
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f88d 	bl	800dcc0 <SDMMC_GetCmdResp1>
 800dba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dba8:	69fb      	ldr	r3, [r7, #28]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3720      	adds	r7, #32
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b088      	sub	sp, #32
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dbbe:	2302      	movs	r3, #2
 800dbc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dbc2:	23c0      	movs	r3, #192	; 0xc0
 800dbc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbd0:	f107 0308 	add.w	r3, r7, #8
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff fe6b 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f95b 	bl	800de98 <SDMMC_GetCmdResp2>
 800dbe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3720      	adds	r7, #32
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b088      	sub	sp, #32
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dbfc:	2309      	movs	r3, #9
 800dbfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc00:	23c0      	movs	r3, #192	; 0xc0
 800dc02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc04:	2300      	movs	r3, #0
 800dc06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc0e:	f107 0308 	add.w	r3, r7, #8
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff fe4c 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f93c 	bl	800de98 <SDMMC_GetCmdResp2>
 800dc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc22:	69fb      	ldr	r3, [r7, #28]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc36:	2300      	movs	r3, #0
 800dc38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc3e:	2340      	movs	r3, #64	; 0x40
 800dc40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc42:	2300      	movs	r3, #0
 800dc44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc4c:	f107 0308 	add.w	r3, r7, #8
 800dc50:	4619      	mov	r1, r3
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7ff fe2d 	bl	800d8b2 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	2103      	movs	r1, #3
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f99b 	bl	800df98 <SDMMC_GetCmdResp6>
 800dc62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc64:	69fb      	ldr	r3, [r7, #28]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3720      	adds	r7, #32
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
	...

0800dc70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc70:	b490      	push	{r4, r7}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc78:	4b0f      	ldr	r3, [pc, #60]	; (800dcb8 <SDMMC_GetCmdError+0x48>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a0f      	ldr	r2, [pc, #60]	; (800dcbc <SDMMC_GetCmdError+0x4c>)
 800dc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc82:	0a5b      	lsrs	r3, r3, #9
 800dc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc88:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	1e5c      	subs	r4, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d102      	bne.n	800dc9a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc98:	e009      	b.n	800dcae <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0f2      	beq.n	800dc8c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	22c5      	movs	r2, #197	; 0xc5
 800dcaa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bc90      	pop	{r4, r7}
 800dcb6:	4770      	bx	lr
 800dcb8:	20000058 	.word	0x20000058
 800dcbc:	10624dd3 	.word	0x10624dd3

0800dcc0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dcc0:	b590      	push	{r4, r7, lr}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	607a      	str	r2, [r7, #4]
 800dccc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dcce:	4b6f      	ldr	r3, [pc, #444]	; (800de8c <SDMMC_GetCmdResp1+0x1cc>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a6f      	ldr	r2, [pc, #444]	; (800de90 <SDMMC_GetCmdResp1+0x1d0>)
 800dcd4:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd8:	0a5b      	lsrs	r3, r3, #9
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dce0:	4623      	mov	r3, r4
 800dce2:	1e5c      	subs	r4, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d102      	bne.n	800dcee <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcec:	e0c9      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf2:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d0f0      	beq.n	800dce0 <SDMMC_GetCmdResp1+0x20>
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1eb      	bne.n	800dce0 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d004      	beq.n	800dd1e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2204      	movs	r2, #4
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd1a:	2304      	movs	r3, #4
 800dd1c:	e0b1      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e0a6      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	22c5      	movs	r2, #197	; 0xc5
 800dd38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff fde3 	bl	800d906 <SDMMC_GetCommandResponse>
 800dd40:	4603      	mov	r3, r0
 800dd42:	461a      	mov	r2, r3
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d001      	beq.n	800dd4e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e099      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd4e:	2100      	movs	r1, #0
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff fde5 	bl	800d920 <SDMMC_GetResponse>
 800dd56:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	4b4e      	ldr	r3, [pc, #312]	; (800de94 <SDMMC_GetCmdResp1+0x1d4>)
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e08d      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da02      	bge.n	800dd72 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd70:	e087      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dd7c:	2340      	movs	r3, #64	; 0x40
 800dd7e:	e080      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dd8a:	2380      	movs	r3, #128	; 0x80
 800dd8c:	e079      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd9c:	e071      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddac:	e069      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ddb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddbc:	e061      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ddc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddcc:	e059      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ddd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dddc:	e051      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dde8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ddec:	e049      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d002      	beq.n	800ddfe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ddf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddfc:	e041      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800de08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de0c:	e039      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de1c:	e031      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de2c:	e029      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de3c:	e021      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de4c:	e019      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de5c:	e011      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800de68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de6c:	e009      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	f003 0308 	and.w	r3, r3, #8
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800de78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800de7c:	e001      	b.n	800de82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800de82:	4618      	mov	r0, r3
 800de84:	371c      	adds	r7, #28
 800de86:	46bd      	mov	sp, r7
 800de88:	bd90      	pop	{r4, r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20000058 	.word	0x20000058
 800de90:	10624dd3 	.word	0x10624dd3
 800de94:	fdffe008 	.word	0xfdffe008

0800de98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800de98:	b490      	push	{r4, r7}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dea0:	4b1e      	ldr	r3, [pc, #120]	; (800df1c <SDMMC_GetCmdResp2+0x84>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a1e      	ldr	r2, [pc, #120]	; (800df20 <SDMMC_GetCmdResp2+0x88>)
 800dea6:	fba2 2303 	umull	r2, r3, r2, r3
 800deaa:	0a5b      	lsrs	r3, r3, #9
 800deac:	f241 3288 	movw	r2, #5000	; 0x1388
 800deb0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800deb4:	4623      	mov	r3, r4
 800deb6:	1e5c      	subs	r4, r3, #1
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800debc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dec0:	e026      	b.n	800df10 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0f0      	beq.n	800deb4 <SDMMC_GetCmdResp2+0x1c>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1eb      	bne.n	800deb4 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee0:	f003 0304 	and.w	r3, r3, #4
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2204      	movs	r2, #4
 800deec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deee:	2304      	movs	r3, #4
 800def0:	e00e      	b.n	800df10 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2201      	movs	r2, #1
 800df02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df04:	2301      	movs	r3, #1
 800df06:	e003      	b.n	800df10 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	22c5      	movs	r2, #197	; 0xc5
 800df0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bc90      	pop	{r4, r7}
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20000058 	.word	0x20000058
 800df20:	10624dd3 	.word	0x10624dd3

0800df24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800df24:	b490      	push	{r4, r7}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df2c:	4b18      	ldr	r3, [pc, #96]	; (800df90 <SDMMC_GetCmdResp3+0x6c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a18      	ldr	r2, [pc, #96]	; (800df94 <SDMMC_GetCmdResp3+0x70>)
 800df32:	fba2 2303 	umull	r2, r3, r2, r3
 800df36:	0a5b      	lsrs	r3, r3, #9
 800df38:	f241 3288 	movw	r2, #5000	; 0x1388
 800df3c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800df40:	4623      	mov	r3, r4
 800df42:	1e5c      	subs	r4, r3, #1
 800df44:	2b00      	cmp	r3, #0
 800df46:	d102      	bne.n	800df4e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df4c:	e01b      	b.n	800df86 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0f0      	beq.n	800df40 <SDMMC_GetCmdResp3+0x1c>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1eb      	bne.n	800df40 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6c:	f003 0304 	and.w	r3, r3, #4
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2204      	movs	r2, #4
 800df78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df7a:	2304      	movs	r3, #4
 800df7c:	e003      	b.n	800df86 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	22c5      	movs	r2, #197	; 0xc5
 800df82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bc90      	pop	{r4, r7}
 800df8e:	4770      	bx	lr
 800df90:	20000058 	.word	0x20000058
 800df94:	10624dd3 	.word	0x10624dd3

0800df98 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800df98:	b590      	push	{r4, r7, lr}
 800df9a:	b087      	sub	sp, #28
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	607a      	str	r2, [r7, #4]
 800dfa4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfa6:	4b34      	ldr	r3, [pc, #208]	; (800e078 <SDMMC_GetCmdResp6+0xe0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a34      	ldr	r2, [pc, #208]	; (800e07c <SDMMC_GetCmdResp6+0xe4>)
 800dfac:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb0:	0a5b      	lsrs	r3, r3, #9
 800dfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb6:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dfba:	4623      	mov	r3, r4
 800dfbc:	1e5c      	subs	r4, r3, #1
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfc6:	e052      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfcc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d0f0      	beq.n	800dfba <SDMMC_GetCmdResp6+0x22>
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1eb      	bne.n	800dfba <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe6:	f003 0304 	and.w	r3, r3, #4
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d004      	beq.n	800dff8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2204      	movs	r2, #4
 800dff2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dff4:	2304      	movs	r3, #4
 800dff6:	e03a      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d004      	beq.n	800e00e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2201      	movs	r2, #1
 800e008:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e02f      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7ff fc79 	bl	800d906 <SDMMC_GetCommandResponse>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d001      	beq.n	800e022 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e01e:	2301      	movs	r3, #1
 800e020:	e025      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	22c5      	movs	r2, #197	; 0xc5
 800e026:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e028:	2100      	movs	r1, #0
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff fc78 	bl	800d920 <SDMMC_GetResponse>
 800e030:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	0c1b      	lsrs	r3, r3, #16
 800e040:	b29a      	uxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e046:	2300      	movs	r3, #0
 800e048:	e011      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e058:	e009      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e068:	e001      	b.n	800e06e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e06a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e06e:	4618      	mov	r0, r3
 800e070:	371c      	adds	r7, #28
 800e072:	46bd      	mov	sp, r7
 800e074:	bd90      	pop	{r4, r7, pc}
 800e076:	bf00      	nop
 800e078:	20000058 	.word	0x20000058
 800e07c:	10624dd3 	.word	0x10624dd3

0800e080 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e080:	b490      	push	{r4, r7}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e088:	4b21      	ldr	r3, [pc, #132]	; (800e110 <SDMMC_GetCmdResp7+0x90>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a21      	ldr	r2, [pc, #132]	; (800e114 <SDMMC_GetCmdResp7+0x94>)
 800e08e:	fba2 2303 	umull	r2, r3, r2, r3
 800e092:	0a5b      	lsrs	r3, r3, #9
 800e094:	f241 3288 	movw	r2, #5000	; 0x1388
 800e098:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800e09c:	4623      	mov	r3, r4
 800e09e:	1e5c      	subs	r4, r3, #1
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0a8:	e02c      	b.n	800e104 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0f0      	beq.n	800e09c <SDMMC_GetCmdResp7+0x1c>
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1eb      	bne.n	800e09c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d004      	beq.n	800e0da <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2204      	movs	r2, #4
 800e0d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0d6:	2304      	movs	r3, #4
 800e0d8:	e014      	b.n	800e104 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d004      	beq.n	800e0f0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e009      	b.n	800e104 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2240      	movs	r2, #64	; 0x40
 800e100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e102:	2300      	movs	r3, #0

}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bc90      	pop	{r4, r7}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	20000058 	.word	0x20000058
 800e114:	10624dd3 	.word	0x10624dd3

0800e118 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e118:	b084      	sub	sp, #16
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	f107 001c 	add.w	r0, r7, #28
 800e126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d122      	bne.n	800e176 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d105      	bne.n	800e16a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 f9c8 	bl	800f500 <USB_CoreReset>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]
 800e174:	e01a      	b.n	800e1ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f001 f9bc 	bl	800f500 <USB_CoreReset>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	639a      	str	r2, [r3, #56]	; 0x38
 800e19e:	e005      	b.n	800e1ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e1b8:	b004      	add	sp, #16
 800e1ba:	4770      	bx	lr

0800e1bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d165      	bne.n	800e29c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	4a3e      	ldr	r2, [pc, #248]	; (800e2cc <USB_SetTurnaroundTime+0x110>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d906      	bls.n	800e1e6 <USB_SetTurnaroundTime+0x2a>
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	4a3d      	ldr	r2, [pc, #244]	; (800e2d0 <USB_SetTurnaroundTime+0x114>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d802      	bhi.n	800e1e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e1e0:	230f      	movs	r3, #15
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	e05c      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	4a39      	ldr	r2, [pc, #228]	; (800e2d0 <USB_SetTurnaroundTime+0x114>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d906      	bls.n	800e1fc <USB_SetTurnaroundTime+0x40>
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	4a38      	ldr	r2, [pc, #224]	; (800e2d4 <USB_SetTurnaroundTime+0x118>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d802      	bhi.n	800e1fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e1f6:	230e      	movs	r3, #14
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	e051      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	4a35      	ldr	r2, [pc, #212]	; (800e2d4 <USB_SetTurnaroundTime+0x118>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d906      	bls.n	800e212 <USB_SetTurnaroundTime+0x56>
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	4a34      	ldr	r2, [pc, #208]	; (800e2d8 <USB_SetTurnaroundTime+0x11c>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d802      	bhi.n	800e212 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e20c:	230d      	movs	r3, #13
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	e046      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	4a30      	ldr	r2, [pc, #192]	; (800e2d8 <USB_SetTurnaroundTime+0x11c>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d906      	bls.n	800e228 <USB_SetTurnaroundTime+0x6c>
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	4a2f      	ldr	r2, [pc, #188]	; (800e2dc <USB_SetTurnaroundTime+0x120>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d802      	bhi.n	800e228 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e222:	230c      	movs	r3, #12
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	e03b      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	4a2c      	ldr	r2, [pc, #176]	; (800e2dc <USB_SetTurnaroundTime+0x120>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d906      	bls.n	800e23e <USB_SetTurnaroundTime+0x82>
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	4a2b      	ldr	r2, [pc, #172]	; (800e2e0 <USB_SetTurnaroundTime+0x124>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d802      	bhi.n	800e23e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e238:	230b      	movs	r3, #11
 800e23a:	617b      	str	r3, [r7, #20]
 800e23c:	e030      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	4a27      	ldr	r2, [pc, #156]	; (800e2e0 <USB_SetTurnaroundTime+0x124>)
 800e242:	4293      	cmp	r3, r2
 800e244:	d906      	bls.n	800e254 <USB_SetTurnaroundTime+0x98>
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	4a26      	ldr	r2, [pc, #152]	; (800e2e4 <USB_SetTurnaroundTime+0x128>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d802      	bhi.n	800e254 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e24e:	230a      	movs	r3, #10
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e025      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	4a23      	ldr	r2, [pc, #140]	; (800e2e4 <USB_SetTurnaroundTime+0x128>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d906      	bls.n	800e26a <USB_SetTurnaroundTime+0xae>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	4a22      	ldr	r2, [pc, #136]	; (800e2e8 <USB_SetTurnaroundTime+0x12c>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d802      	bhi.n	800e26a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e264:	2309      	movs	r3, #9
 800e266:	617b      	str	r3, [r7, #20]
 800e268:	e01a      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	4a1e      	ldr	r2, [pc, #120]	; (800e2e8 <USB_SetTurnaroundTime+0x12c>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d906      	bls.n	800e280 <USB_SetTurnaroundTime+0xc4>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	4a1d      	ldr	r2, [pc, #116]	; (800e2ec <USB_SetTurnaroundTime+0x130>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d802      	bhi.n	800e280 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e27a:	2308      	movs	r3, #8
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	e00f      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	4a1a      	ldr	r2, [pc, #104]	; (800e2ec <USB_SetTurnaroundTime+0x130>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d906      	bls.n	800e296 <USB_SetTurnaroundTime+0xda>
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	4a19      	ldr	r2, [pc, #100]	; (800e2f0 <USB_SetTurnaroundTime+0x134>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d802      	bhi.n	800e296 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e290:	2307      	movs	r3, #7
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	e004      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e296:	2306      	movs	r3, #6
 800e298:	617b      	str	r3, [r7, #20]
 800e29a:	e001      	b.n	800e2a0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e29c:	2309      	movs	r3, #9
 800e29e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	029b      	lsls	r3, r3, #10
 800e2b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e2b8:	431a      	orrs	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	371c      	adds	r7, #28
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	00d8acbf 	.word	0x00d8acbf
 800e2d0:	00e4e1bf 	.word	0x00e4e1bf
 800e2d4:	00f423ff 	.word	0x00f423ff
 800e2d8:	0106737f 	.word	0x0106737f
 800e2dc:	011a499f 	.word	0x011a499f
 800e2e0:	01312cff 	.word	0x01312cff
 800e2e4:	014ca43f 	.word	0x014ca43f
 800e2e8:	016e35ff 	.word	0x016e35ff
 800e2ec:	01a6ab1f 	.word	0x01a6ab1f
 800e2f0:	01e847ff 	.word	0x01e847ff

0800e2f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	f043 0201 	orr.w	r2, r3, #1
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	370c      	adds	r7, #12
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e316:	b480      	push	{r7}
 800e318:	b083      	sub	sp, #12
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f023 0201 	bic.w	r2, r3, #1
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d106      	bne.n	800e364 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	60da      	str	r2, [r3, #12]
 800e362:	e00b      	b.n	800e37c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	60da      	str	r2, [r3, #12]
 800e376:	e001      	b.n	800e37c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e003      	b.n	800e384 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e37c:	2032      	movs	r0, #50	; 0x32
 800e37e:	f7f7 f889 	bl	8005494 <HAL_Delay>

  return HAL_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e38c:	b084      	sub	sp, #16
 800e38e:	b580      	push	{r7, lr}
 800e390:	b086      	sub	sp, #24
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e39a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	613b      	str	r3, [r7, #16]
 800e3aa:	e009      	b.n	800e3c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	3340      	adds	r3, #64	; 0x40
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	613b      	str	r3, [r7, #16]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	2b0e      	cmp	r3, #14
 800e3c4:	d9f2      	bls.n	800e3ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d11c      	bne.n	800e406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3da:	f043 0302 	orr.w	r3, r3, #2
 800e3de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	e005      	b.n	800e412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e40a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e418:	461a      	mov	r2, r3
 800e41a:	2300      	movs	r3, #0
 800e41c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e424:	4619      	mov	r1, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e42c:	461a      	mov	r2, r3
 800e42e:	680b      	ldr	r3, [r1, #0]
 800e430:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e432:	2103      	movs	r1, #3
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f93d 	bl	800e6b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e43a:	2110      	movs	r1, #16
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f8f1 	bl	800e624 <USB_FlushTxFifo>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f90f 	bl	800e670 <USB_FlushRxFifo>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e462:	461a      	mov	r2, r3
 800e464:	2300      	movs	r3, #0
 800e466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e46e:	461a      	mov	r2, r3
 800e470:	2300      	movs	r3, #0
 800e472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e47a:	461a      	mov	r2, r3
 800e47c:	2300      	movs	r3, #0
 800e47e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e480:	2300      	movs	r3, #0
 800e482:	613b      	str	r3, [r7, #16]
 800e484:	e043      	b.n	800e50e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4413      	add	r3, r2
 800e48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e49c:	d118      	bne.n	800e4d0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	e013      	b.n	800e4e2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	015a      	lsls	r2, r3, #5
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e4cc:	6013      	str	r3, [r2, #0]
 800e4ce:	e008      	b.n	800e4e2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4dc:	461a      	mov	r2, r3
 800e4de:	2300      	movs	r3, #0
 800e4e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	015a      	lsls	r2, r3, #5
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	015a      	lsls	r2, r3, #5
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e500:	461a      	mov	r2, r3
 800e502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	3301      	adds	r3, #1
 800e50c:	613b      	str	r3, [r7, #16]
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	429a      	cmp	r2, r3
 800e514:	d3b7      	bcc.n	800e486 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e516:	2300      	movs	r3, #0
 800e518:	613b      	str	r3, [r7, #16]
 800e51a:	e043      	b.n	800e5a4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	015a      	lsls	r2, r3, #5
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	4413      	add	r3, r2
 800e524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e52e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e532:	d118      	bne.n	800e566 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10a      	bne.n	800e550 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e546:	461a      	mov	r2, r3
 800e548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	e013      	b.n	800e578 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e55c:	461a      	mov	r2, r3
 800e55e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	e008      	b.n	800e578 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e572:	461a      	mov	r2, r3
 800e574:	2300      	movs	r3, #0
 800e576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	015a      	lsls	r2, r3, #5
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4413      	add	r3, r2
 800e580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e584:	461a      	mov	r2, r3
 800e586:	2300      	movs	r3, #0
 800e588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	015a      	lsls	r2, r3, #5
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	4413      	add	r3, r2
 800e592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e596:	461a      	mov	r2, r3
 800e598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e59c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	613b      	str	r3, [r7, #16]
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d3b7      	bcc.n	800e51c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e5cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	f043 0210 	orr.w	r2, r3, #16
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	699a      	ldr	r2, [r3, #24]
 800e5de:	4b10      	ldr	r3, [pc, #64]	; (800e620 <USB_DevInit+0x294>)
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	f043 0208 	orr.w	r2, r3, #8
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d107      	bne.n	800e60e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e606:	f043 0304 	orr.w	r3, r3, #4
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e60e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e610:	4618      	mov	r0, r3
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e61a:	b004      	add	sp, #16
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	803c3800 	.word	0x803c3800

0800e624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e62e:	2300      	movs	r3, #0
 800e630:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	019b      	lsls	r3, r3, #6
 800e636:	f043 0220 	orr.w	r2, r3, #32
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3301      	adds	r3, #1
 800e642:	60fb      	str	r3, [r7, #12]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4a09      	ldr	r2, [pc, #36]	; (800e66c <USB_FlushTxFifo+0x48>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d901      	bls.n	800e650 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e006      	b.n	800e65e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	f003 0320 	and.w	r3, r3, #32
 800e658:	2b20      	cmp	r3, #32
 800e65a:	d0f0      	beq.n	800e63e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	00030d40 	.word	0x00030d40

0800e670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2210      	movs	r2, #16
 800e680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3301      	adds	r3, #1
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4a09      	ldr	r2, [pc, #36]	; (800e6b0 <USB_FlushRxFifo+0x40>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d901      	bls.n	800e694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e690:	2303      	movs	r3, #3
 800e692:	e006      	b.n	800e6a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	f003 0310 	and.w	r3, r3, #16
 800e69c:	2b10      	cmp	r3, #16
 800e69e:	d0f0      	beq.n	800e682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	00030d40 	.word	0x00030d40

0800e6b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	78fb      	ldrb	r3, [r7, #3]
 800e6ce:	68f9      	ldr	r1, [r7, #12]
 800e6d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3714      	adds	r7, #20
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e6e6:	b480      	push	{r7}
 800e6e8:	b087      	sub	sp, #28
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	f003 0306 	and.w	r3, r3, #6
 800e6fe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2b02      	cmp	r3, #2
 800e704:	d002      	beq.n	800e70c <USB_GetDevSpeed+0x26>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2b06      	cmp	r3, #6
 800e70a:	d102      	bne.n	800e712 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e70c:	2302      	movs	r3, #2
 800e70e:	75fb      	strb	r3, [r7, #23]
 800e710:	e001      	b.n	800e716 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800e712:	230f      	movs	r3, #15
 800e714:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e716:	7dfb      	ldrb	r3, [r7, #23]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	371c      	adds	r7, #28
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	785b      	ldrb	r3, [r3, #1]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d13a      	bne.n	800e7b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	f003 030f 	and.w	r3, r3, #15
 800e750:	2101      	movs	r1, #1
 800e752:	fa01 f303 	lsl.w	r3, r1, r3
 800e756:	b29b      	uxth	r3, r3
 800e758:	68f9      	ldr	r1, [r7, #12]
 800e75a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e75e:	4313      	orrs	r3, r2
 800e760:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	015a      	lsls	r2, r3, #5
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4413      	add	r3, r2
 800e76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d155      	bne.n	800e824 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	015a      	lsls	r2, r3, #5
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	4413      	add	r3, r2
 800e780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	78db      	ldrb	r3, [r3, #3]
 800e792:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e794:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	059b      	lsls	r3, r3, #22
 800e79a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e79c:	4313      	orrs	r3, r2
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	0151      	lsls	r1, r2, #5
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	440a      	add	r2, r1
 800e7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7b2:	6013      	str	r3, [r2, #0]
 800e7b4:	e036      	b.n	800e824 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7bc:	69da      	ldr	r2, [r3, #28]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 030f 	and.w	r3, r3, #15
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7cc:	041b      	lsls	r3, r3, #16
 800e7ce:	68f9      	ldr	r1, [r7, #12]
 800e7d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d11a      	bne.n	800e824 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	015a      	lsls	r2, r3, #5
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	78db      	ldrb	r3, [r3, #3]
 800e808:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e80a:	430b      	orrs	r3, r1
 800e80c:	4313      	orrs	r3, r2
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	0151      	lsls	r1, r2, #5
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	440a      	add	r2, r1
 800e816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e81a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e81e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e822:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
	...

0800e834 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d161      	bne.n	800e914 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	015a      	lsls	r2, r3, #5
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	4413      	add	r3, r2
 800e858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e866:	d11f      	bne.n	800e8a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	015a      	lsls	r2, r3, #5
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4413      	add	r3, r2
 800e870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	0151      	lsls	r1, r2, #5
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	440a      	add	r2, r1
 800e87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e886:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	015a      	lsls	r2, r3, #5
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4413      	add	r3, r2
 800e890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	0151      	lsls	r1, r2, #5
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	440a      	add	r2, r1
 800e89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e8a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 030f 	and.w	r3, r3, #15
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	68f9      	ldr	r1, [r7, #12]
 800e8c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8d2:	69da      	ldr	r2, [r3, #28]
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	f003 030f 	and.w	r3, r3, #15
 800e8dc:	2101      	movs	r1, #1
 800e8de:	fa01 f303 	lsl.w	r3, r1, r3
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	43db      	mvns	r3, r3
 800e8e6:	68f9      	ldr	r1, [r7, #12]
 800e8e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	015a      	lsls	r2, r3, #5
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	0159      	lsls	r1, r3, #5
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	440b      	add	r3, r1
 800e906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e90a:	4619      	mov	r1, r3
 800e90c:	4b35      	ldr	r3, [pc, #212]	; (800e9e4 <USB_DeactivateEndpoint+0x1b0>)
 800e90e:	4013      	ands	r3, r2
 800e910:	600b      	str	r3, [r1, #0]
 800e912:	e060      	b.n	800e9d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e92a:	d11f      	bne.n	800e96c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	0151      	lsls	r1, r2, #5
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	440a      	add	r2, r1
 800e942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e94a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	015a      	lsls	r2, r3, #5
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	0151      	lsls	r1, r2, #5
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	440a      	add	r2, r1
 800e962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e96a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	f003 030f 	and.w	r3, r3, #15
 800e97c:	2101      	movs	r1, #1
 800e97e:	fa01 f303 	lsl.w	r3, r1, r3
 800e982:	041b      	lsls	r3, r3, #16
 800e984:	43db      	mvns	r3, r3
 800e986:	68f9      	ldr	r1, [r7, #12]
 800e988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e98c:	4013      	ands	r3, r2
 800e98e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e996:	69da      	ldr	r2, [r3, #28]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 030f 	and.w	r3, r3, #15
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9a6:	041b      	lsls	r3, r3, #16
 800e9a8:	43db      	mvns	r3, r3
 800e9aa:	68f9      	ldr	r1, [r7, #12]
 800e9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	0159      	lsls	r1, r3, #5
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	440b      	add	r3, r1
 800e9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <USB_DeactivateEndpoint+0x1b4>)
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3714      	adds	r7, #20
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	ec337800 	.word	0xec337800
 800e9e8:	eff37800 	.word	0xeff37800

0800e9ec <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	785b      	ldrb	r3, [r3, #1]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	f040 810a 	bne.w	800ec1e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d132      	bne.n	800ea78 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	015a      	lsls	r2, r3, #5
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	4413      	add	r3, r2
 800ea1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	693a      	ldr	r2, [r7, #16]
 800ea22:	0151      	lsls	r1, r2, #5
 800ea24:	697a      	ldr	r2, [r7, #20]
 800ea26:	440a      	add	r2, r1
 800ea28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	693a      	ldr	r2, [r7, #16]
 800ea46:	0151      	lsls	r1, r2, #5
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	440a      	add	r2, r1
 800ea4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	693a      	ldr	r2, [r7, #16]
 800ea66:	0151      	lsls	r1, r2, #5
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea70:	0cdb      	lsrs	r3, r3, #19
 800ea72:	04db      	lsls	r3, r3, #19
 800ea74:	6113      	str	r3, [r2, #16]
 800ea76:	e074      	b.n	800eb62 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	015a      	lsls	r2, r3, #5
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	4413      	add	r3, r2
 800ea80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	0151      	lsls	r1, r2, #5
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	440a      	add	r2, r1
 800ea8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea92:	0cdb      	lsrs	r3, r3, #19
 800ea94:	04db      	lsls	r3, r3, #19
 800ea96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	693a      	ldr	r2, [r7, #16]
 800eaa8:	0151      	lsls	r1, r2, #5
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	440a      	add	r2, r1
 800eaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eaba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac8:	691a      	ldr	r2, [r3, #16]
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	6959      	ldr	r1, [r3, #20]
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	440b      	add	r3, r1
 800ead4:	1e59      	subs	r1, r3, #1
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	fbb1 f3f3 	udiv	r3, r1, r3
 800eade:	04d9      	lsls	r1, r3, #19
 800eae0:	4baf      	ldr	r3, [pc, #700]	; (800eda0 <USB_EPStartXfer+0x3b4>)
 800eae2:	400b      	ands	r3, r1
 800eae4:	6939      	ldr	r1, [r7, #16]
 800eae6:	0148      	lsls	r0, r1, #5
 800eae8:	6979      	ldr	r1, [r7, #20]
 800eaea:	4401      	add	r1, r0
 800eaec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb00:	691a      	ldr	r2, [r3, #16]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb0a:	6939      	ldr	r1, [r7, #16]
 800eb0c:	0148      	lsls	r0, r1, #5
 800eb0e:	6979      	ldr	r1, [r7, #20]
 800eb10:	4401      	add	r1, r0
 800eb12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb16:	4313      	orrs	r3, r2
 800eb18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	78db      	ldrb	r3, [r3, #3]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d11f      	bne.n	800eb62 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	015a      	lsls	r2, r3, #5
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	4413      	add	r3, r2
 800eb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	0151      	lsls	r1, r2, #5
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	440a      	add	r2, r1
 800eb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eb40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	015a      	lsls	r2, r3, #5
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	4413      	add	r3, r2
 800eb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	693a      	ldr	r2, [r7, #16]
 800eb52:	0151      	lsls	r1, r2, #5
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	440a      	add	r2, r1
 800eb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb60:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	0151      	lsls	r1, r2, #5
 800eb74:	697a      	ldr	r2, [r7, #20]
 800eb76:	440a      	add	r2, r1
 800eb78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb80:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	78db      	ldrb	r3, [r3, #3]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d015      	beq.n	800ebb6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f000 8100 	beq.w	800ed94 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	f003 030f 	and.w	r3, r3, #15
 800eba4:	2101      	movs	r1, #1
 800eba6:	fa01 f303 	lsl.w	r3, r1, r3
 800ebaa:	6979      	ldr	r1, [r7, #20]
 800ebac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	634b      	str	r3, [r1, #52]	; 0x34
 800ebb4:	e0ee      	b.n	800ed94 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d110      	bne.n	800ebe8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	015a      	lsls	r2, r3, #5
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	4413      	add	r3, r2
 800ebce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	0151      	lsls	r1, r2, #5
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	440a      	add	r2, r1
 800ebdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebe4:	6013      	str	r3, [r2, #0]
 800ebe6:	e00f      	b.n	800ec08 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	693a      	ldr	r2, [r7, #16]
 800ebf8:	0151      	lsls	r1, r2, #5
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	440a      	add	r2, r1
 800ebfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec06:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	68d9      	ldr	r1, [r3, #12]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	781a      	ldrb	r2, [r3, #0]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 f9e2 	bl	800efe0 <USB_WritePacket>
 800ec1c:	e0ba      	b.n	800ed94 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	015a      	lsls	r2, r3, #5
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	4413      	add	r3, r2
 800ec26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	0151      	lsls	r1, r2, #5
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	440a      	add	r2, r1
 800ec34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec38:	0cdb      	lsrs	r3, r3, #19
 800ec3a:	04db      	lsls	r3, r3, #19
 800ec3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	015a      	lsls	r2, r3, #5
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	4413      	add	r3, r2
 800ec46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	0151      	lsls	r1, r2, #5
 800ec50:	697a      	ldr	r2, [r7, #20]
 800ec52:	440a      	add	r2, r1
 800ec54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d123      	bne.n	800ecb2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	015a      	lsls	r2, r3, #5
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	4413      	add	r3, r2
 800ec72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec76:	691a      	ldr	r2, [r3, #16]
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	689b      	ldr	r3, [r3, #8]
 800ec7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec80:	6939      	ldr	r1, [r7, #16]
 800ec82:	0148      	lsls	r0, r1, #5
 800ec84:	6979      	ldr	r1, [r7, #20]
 800ec86:	4401      	add	r1, r0
 800ec88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	015a      	lsls	r2, r3, #5
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	4413      	add	r3, r2
 800ec98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	0151      	lsls	r1, r2, #5
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	440a      	add	r2, r1
 800eca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecae:	6113      	str	r3, [r2, #16]
 800ecb0:	e033      	b.n	800ed1a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	695a      	ldr	r2, [r3, #20]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	4413      	add	r3, r2
 800ecbc:	1e5a      	subs	r2, r3, #1
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecc6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	015a      	lsls	r2, r3, #5
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	4413      	add	r3, r2
 800ecd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd4:	691a      	ldr	r2, [r3, #16]
 800ecd6:	89fb      	ldrh	r3, [r7, #14]
 800ecd8:	04d9      	lsls	r1, r3, #19
 800ecda:	4b31      	ldr	r3, [pc, #196]	; (800eda0 <USB_EPStartXfer+0x3b4>)
 800ecdc:	400b      	ands	r3, r1
 800ecde:	6939      	ldr	r1, [r7, #16]
 800ece0:	0148      	lsls	r0, r1, #5
 800ece2:	6979      	ldr	r1, [r7, #20]
 800ece4:	4401      	add	r1, r0
 800ece6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ecea:	4313      	orrs	r3, r2
 800ecec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	015a      	lsls	r2, r3, #5
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecfa:	691a      	ldr	r2, [r3, #16]
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	89f9      	ldrh	r1, [r7, #14]
 800ed02:	fb01 f303 	mul.w	r3, r1, r3
 800ed06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed0a:	6939      	ldr	r1, [r7, #16]
 800ed0c:	0148      	lsls	r0, r1, #5
 800ed0e:	6979      	ldr	r1, [r7, #20]
 800ed10:	4401      	add	r1, r0
 800ed12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed16:	4313      	orrs	r3, r2
 800ed18:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	78db      	ldrb	r3, [r3, #3]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d128      	bne.n	800ed74 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d110      	bne.n	800ed54 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	015a      	lsls	r2, r3, #5
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	4413      	add	r3, r2
 800ed3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	0151      	lsls	r1, r2, #5
 800ed44:	697a      	ldr	r2, [r7, #20]
 800ed46:	440a      	add	r2, r1
 800ed48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed50:	6013      	str	r3, [r2, #0]
 800ed52:	e00f      	b.n	800ed74 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	015a      	lsls	r2, r3, #5
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	0151      	lsls	r1, r2, #5
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	440a      	add	r2, r1
 800ed6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	0151      	lsls	r1, r2, #5
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	440a      	add	r2, r1
 800ed8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	1ff80000 	.word	0x1ff80000

0800eda4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	f040 80ab 	bne.w	800ef18 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d132      	bne.n	800ee30 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	015a      	lsls	r2, r3, #5
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	4413      	add	r3, r2
 800edd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	0151      	lsls	r1, r2, #5
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	440a      	add	r2, r1
 800ede0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ede4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ede8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800edec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	0151      	lsls	r1, r2, #5
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	440a      	add	r2, r1
 800ee04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	015a      	lsls	r2, r3, #5
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	4413      	add	r3, r2
 800ee16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	68ba      	ldr	r2, [r7, #8]
 800ee1e:	0151      	lsls	r1, r2, #5
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	440a      	add	r2, r1
 800ee24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee28:	0cdb      	lsrs	r3, r3, #19
 800ee2a:	04db      	lsls	r3, r3, #19
 800ee2c:	6113      	str	r3, [r2, #16]
 800ee2e:	e04e      	b.n	800eece <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	015a      	lsls	r2, r3, #5
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	4413      	add	r3, r2
 800ee38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	0151      	lsls	r1, r2, #5
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	440a      	add	r2, r1
 800ee46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee4a:	0cdb      	lsrs	r3, r3, #19
 800ee4c:	04db      	lsls	r3, r3, #19
 800ee4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	015a      	lsls	r2, r3, #5
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	4413      	add	r3, r2
 800ee58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	0151      	lsls	r1, r2, #5
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	440a      	add	r2, r1
 800ee66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	695a      	ldr	r2, [r3, #20]
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d903      	bls.n	800ee88 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	689a      	ldr	r2, [r3, #8]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	015a      	lsls	r2, r3, #5
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4413      	add	r3, r2
 800ee90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee94:	691b      	ldr	r3, [r3, #16]
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	0151      	lsls	r1, r2, #5
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	440a      	add	r2, r1
 800ee9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb4:	691a      	ldr	r2, [r3, #16]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	695b      	ldr	r3, [r3, #20]
 800eeba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eebe:	68b9      	ldr	r1, [r7, #8]
 800eec0:	0148      	lsls	r0, r1, #5
 800eec2:	68f9      	ldr	r1, [r7, #12]
 800eec4:	4401      	add	r1, r0
 800eec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eeca:	4313      	orrs	r3, r2
 800eecc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	0151      	lsls	r1, r2, #5
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	440a      	add	r2, r1
 800eee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eeec:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d06d      	beq.n	800efd2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eefc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	f003 030f 	and.w	r3, r3, #15
 800ef06:	2101      	movs	r1, #1
 800ef08:	fa01 f303 	lsl.w	r3, r1, r3
 800ef0c:	68f9      	ldr	r1, [r7, #12]
 800ef0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef12:	4313      	orrs	r3, r2
 800ef14:	634b      	str	r3, [r1, #52]	; 0x34
 800ef16:	e05c      	b.n	800efd2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	015a      	lsls	r2, r3, #5
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	4413      	add	r3, r2
 800ef20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	0151      	lsls	r1, r2, #5
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	440a      	add	r2, r1
 800ef2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef32:	0cdb      	lsrs	r3, r3, #19
 800ef34:	04db      	lsls	r3, r3, #19
 800ef36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	015a      	lsls	r2, r3, #5
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	4413      	add	r3, r2
 800ef40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	0151      	lsls	r1, r2, #5
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	440a      	add	r2, r1
 800ef4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	695b      	ldr	r3, [r3, #20]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d003      	beq.n	800ef6c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	689a      	ldr	r2, [r3, #8]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	0151      	lsls	r1, r2, #5
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	440a      	add	r2, r1
 800ef82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	015a      	lsls	r2, r3, #5
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef98:	691a      	ldr	r2, [r3, #16]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	0148      	lsls	r0, r1, #5
 800efa6:	68f9      	ldr	r1, [r7, #12]
 800efa8:	4401      	add	r1, r0
 800efaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800efae:	4313      	orrs	r3, r2
 800efb0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	015a      	lsls	r2, r3, #5
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4413      	add	r3, r2
 800efba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	0151      	lsls	r1, r2, #5
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	440a      	add	r2, r1
 800efc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800efcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3714      	adds	r7, #20
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b089      	sub	sp, #36	; 0x24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	4611      	mov	r1, r2
 800efec:	461a      	mov	r2, r3
 800efee:	460b      	mov	r3, r1
 800eff0:	71fb      	strb	r3, [r7, #7]
 800eff2:	4613      	mov	r3, r2
 800eff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800effe:	88bb      	ldrh	r3, [r7, #4]
 800f000:	3303      	adds	r3, #3
 800f002:	089b      	lsrs	r3, r3, #2
 800f004:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800f006:	2300      	movs	r3, #0
 800f008:	61bb      	str	r3, [r7, #24]
 800f00a:	e00f      	b.n	800f02c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	031a      	lsls	r2, r3, #12
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	4413      	add	r3, r2
 800f014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f018:	461a      	mov	r2, r3
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	3304      	adds	r3, #4
 800f024:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	3301      	adds	r3, #1
 800f02a:	61bb      	str	r3, [r7, #24]
 800f02c:	69ba      	ldr	r2, [r7, #24]
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	429a      	cmp	r2, r3
 800f032:	d3eb      	bcc.n	800f00c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3724      	adds	r7, #36	; 0x24
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr

0800f042 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f042:	b480      	push	{r7}
 800f044:	b089      	sub	sp, #36	; 0x24
 800f046:	af00      	add	r7, sp, #0
 800f048:	60f8      	str	r0, [r7, #12]
 800f04a:	60b9      	str	r1, [r7, #8]
 800f04c:	4613      	mov	r3, r2
 800f04e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f058:	88fb      	ldrh	r3, [r7, #6]
 800f05a:	3303      	adds	r3, #3
 800f05c:	089b      	lsrs	r3, r3, #2
 800f05e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f060:	2300      	movs	r3, #0
 800f062:	61bb      	str	r3, [r7, #24]
 800f064:	e00b      	b.n	800f07e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	601a      	str	r2, [r3, #0]
    pDest++;
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	3304      	adds	r3, #4
 800f076:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	3301      	adds	r3, #1
 800f07c:	61bb      	str	r3, [r7, #24]
 800f07e:	69ba      	ldr	r2, [r7, #24]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	429a      	cmp	r2, r3
 800f084:	d3ef      	bcc.n	800f066 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f086:	69fb      	ldr	r3, [r7, #28]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3724      	adds	r7, #36	; 0x24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	785b      	ldrb	r3, [r3, #1]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d12c      	bne.n	800f10a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	db12      	blt.n	800f0e8 <USB_EPSetStall+0x54>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00f      	beq.n	800f0e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	015a      	lsls	r2, r3, #5
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	0151      	lsls	r1, r2, #5
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	440a      	add	r2, r1
 800f0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f0e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	015a      	lsls	r2, r3, #5
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	0151      	lsls	r1, r2, #5
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	440a      	add	r2, r1
 800f0fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f102:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f106:	6013      	str	r3, [r2, #0]
 800f108:	e02b      	b.n	800f162 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	015a      	lsls	r2, r3, #5
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	4413      	add	r3, r2
 800f112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	db12      	blt.n	800f142 <USB_EPSetStall+0xae>
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00f      	beq.n	800f142 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	015a      	lsls	r2, r3, #5
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	4413      	add	r3, r2
 800f12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	0151      	lsls	r1, r2, #5
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	440a      	add	r2, r1
 800f138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f13c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f140:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	015a      	lsls	r2, r3, #5
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	4413      	add	r3, r2
 800f14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	0151      	lsls	r1, r2, #5
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	440a      	add	r2, r1
 800f158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f15c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f160:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d128      	bne.n	800f1de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	015a      	lsls	r2, r3, #5
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4413      	add	r3, r2
 800f194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	0151      	lsls	r1, r2, #5
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	440a      	add	r2, r1
 800f1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	78db      	ldrb	r3, [r3, #3]
 800f1b0:	2b03      	cmp	r3, #3
 800f1b2:	d003      	beq.n	800f1bc <USB_EPClearStall+0x4c>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	78db      	ldrb	r3, [r3, #3]
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	d138      	bne.n	800f22e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	015a      	lsls	r2, r3, #5
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	0151      	lsls	r1, r2, #5
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	440a      	add	r2, r1
 800f1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	e027      	b.n	800f22e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	015a      	lsls	r2, r3, #5
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	0151      	lsls	r1, r2, #5
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	440a      	add	r2, r1
 800f1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	78db      	ldrb	r3, [r3, #3]
 800f202:	2b03      	cmp	r3, #3
 800f204:	d003      	beq.n	800f20e <USB_EPClearStall+0x9e>
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	78db      	ldrb	r3, [r3, #3]
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d10f      	bne.n	800f22e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	015a      	lsls	r2, r3, #5
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	4413      	add	r3, r2
 800f216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	0151      	lsls	r1, r2, #5
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	440a      	add	r2, r1
 800f224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f22c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f22e:	2300      	movs	r3, #0
}
 800f230:	4618      	mov	r0, r3
 800f232:	3714      	adds	r7, #20
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr

0800f23c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	460b      	mov	r3, r1
 800f246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f25a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f25e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	78fb      	ldrb	r3, [r7, #3]
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f270:	68f9      	ldr	r1, [r7, #12]
 800f272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f276:	4313      	orrs	r3, r2
 800f278:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2a2:	f023 0302 	bic.w	r3, r3, #2
 800f2a6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f2a8:	2003      	movs	r0, #3
 800f2aa:	f7f6 f8f3 	bl	8005494 <HAL_Delay>

  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2d2:	f043 0302 	orr.w	r3, r3, #2
 800f2d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f2d8:	2003      	movs	r0, #3
 800f2da:	f7f6 f8db 	bl	8005494 <HAL_Delay>

  return HAL_OK;
 800f2de:	2300      	movs	r3, #0
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3710      	adds	r7, #16
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	699b      	ldr	r3, [r3, #24]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f300:	68fb      	ldr	r3, [r7, #12]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f30e:	b480      	push	{r7}
 800f310:	b085      	sub	sp, #20
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f32a:	69db      	ldr	r3, [r3, #28]
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	4013      	ands	r3, r2
 800f330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	0c1b      	lsrs	r3, r3, #16
}
 800f336:	4618      	mov	r0, r3
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f342:	b480      	push	{r7}
 800f344:	b085      	sub	sp, #20
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	4013      	ands	r3, r2
 800f364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	b29b      	uxth	r3, r3
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3714      	adds	r7, #20
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f376:	b480      	push	{r7}
 800f378:	b085      	sub	sp, #20
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	460b      	mov	r3, r1
 800f380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f386:	78fb      	ldrb	r3, [r7, #3]
 800f388:	015a      	lsls	r2, r3, #5
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4413      	add	r3, r2
 800f38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39c:	695b      	ldr	r3, [r3, #20]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b087      	sub	sp, #28
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3c8:	691b      	ldr	r3, [r3, #16]
 800f3ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f3d6:	78fb      	ldrb	r3, [r7, #3]
 800f3d8:	f003 030f 	and.w	r3, r3, #15
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	fa22 f303 	lsr.w	r3, r2, r3
 800f3e2:	01db      	lsls	r3, r3, #7
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	693a      	ldr	r2, [r7, #16]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3ec:	78fb      	ldrb	r3, [r7, #3]
 800f3ee:	015a      	lsls	r2, r3, #5
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f400:	68bb      	ldr	r3, [r7, #8]
}
 800f402:	4618      	mov	r0, r3
 800f404:	371c      	adds	r7, #28
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f40e:	b480      	push	{r7}
 800f410:	b083      	sub	sp, #12
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	f003 0301 	and.w	r3, r3, #1
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b085      	sub	sp, #20
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f444:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f448:	f023 0307 	bic.w	r3, r3, #7
 800f44c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f45c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	333c      	adds	r3, #60	; 0x3c
 800f482:	3304      	adds	r3, #4
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	4a1c      	ldr	r2, [pc, #112]	; (800f4fc <USB_EP0_OutStart+0x8c>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d90a      	bls.n	800f4a6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4a0:	d101      	bne.n	800f4a6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e024      	b.n	800f4f0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4cc:	691b      	ldr	r3, [r3, #16]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4d4:	f043 0318 	orr.w	r3, r3, #24
 800f4d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f4ec:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	4f54300a 	.word	0x4f54300a

0800f500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f500:	b480      	push	{r7}
 800f502:	b085      	sub	sp, #20
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	3301      	adds	r3, #1
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	4a13      	ldr	r2, [pc, #76]	; (800f564 <USB_CoreReset+0x64>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d901      	bls.n	800f51e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f51a:	2303      	movs	r3, #3
 800f51c:	e01b      	b.n	800f556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	daf2      	bge.n	800f50c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f526:	2300      	movs	r3, #0
 800f528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	f043 0201 	orr.w	r2, r3, #1
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	3301      	adds	r3, #1
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4a09      	ldr	r2, [pc, #36]	; (800f564 <USB_CoreReset+0x64>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d901      	bls.n	800f548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f544:	2303      	movs	r3, #3
 800f546:	e006      	b.n	800f556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	2b01      	cmp	r3, #1
 800f552:	d0f0      	beq.n	800f536 <USB_CoreReset+0x36>

  return HAL_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	00030d40 	.word	0x00030d40

0800f568 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	460b      	mov	r3, r1
 800f572:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f574:	2300      	movs	r3, #0
 800f576:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	7c1b      	ldrb	r3, [r3, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d115      	bne.n	800f5ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f580:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f584:	2202      	movs	r2, #2
 800f586:	2181      	movs	r1, #129	; 0x81
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f005 f89b 	bl	80146c4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2201      	movs	r2, #1
 800f592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f594:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f598:	2202      	movs	r2, #2
 800f59a:	2101      	movs	r1, #1
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f005 f891 	bl	80146c4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f5aa:	e012      	b.n	800f5d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f5ac:	2340      	movs	r3, #64	; 0x40
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	2181      	movs	r1, #129	; 0x81
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f005 f886 	bl	80146c4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f5be:	2340      	movs	r3, #64	; 0x40
 800f5c0:	2202      	movs	r2, #2
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f005 f87d 	bl	80146c4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	2203      	movs	r2, #3
 800f5d6:	2182      	movs	r1, #130	; 0x82
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f005 f873 	bl	80146c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f5e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f5e8:	f005 fa84 	bl	8014af4 <USBD_static_malloc>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d102      	bne.n	800f604 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800f5fe:	2301      	movs	r3, #1
 800f600:	73fb      	strb	r3, [r7, #15]
 800f602:	e026      	b.n	800f652 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f60a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	2200      	movs	r2, #0
 800f61a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2200      	movs	r2, #0
 800f622:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	7c1b      	ldrb	r3, [r3, #16]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f634:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f638:	2101      	movs	r1, #1
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f005 f9be 	bl	80149bc <USBD_LL_PrepareReceive>
 800f640:	e007      	b.n	800f652 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f648:	2340      	movs	r3, #64	; 0x40
 800f64a:	2101      	movs	r1, #1
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f005 f9b5 	bl	80149bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f652:	7bfb      	ldrb	r3, [r7, #15]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	460b      	mov	r3, r1
 800f666:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f668:	2300      	movs	r3, #0
 800f66a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f66c:	2181      	movs	r1, #129	; 0x81
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f005 f866 	bl	8014740 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f67a:	2101      	movs	r1, #1
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f005 f85f 	bl	8014740 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f68a:	2182      	movs	r1, #130	; 0x82
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f005 f857 	bl	8014740 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00e      	beq.n	800f6c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f005 fa2c 	bl	8014b10 <USBD_static_free>
    pdev->pClassData = NULL;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b086      	sub	sp, #24
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d039      	beq.n	800f768 <USBD_CDC_Setup+0x9e>
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d17c      	bne.n	800f7f2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	88db      	ldrh	r3, [r3, #6]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d029      	beq.n	800f754 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	b25b      	sxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	da11      	bge.n	800f72e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	683a      	ldr	r2, [r7, #0]
 800f714:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800f716:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	88d2      	ldrh	r2, [r2, #6]
 800f71c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f71e:	6939      	ldr	r1, [r7, #16]
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	88db      	ldrh	r3, [r3, #6]
 800f724:	461a      	mov	r2, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f001 fa3a 	bl	8010ba0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800f72c:	e068      	b.n	800f800 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	785a      	ldrb	r2, [r3, #1]
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	88db      	ldrh	r3, [r3, #6]
 800f73c:	b2da      	uxtb	r2, r3
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f744:	6939      	ldr	r1, [r7, #16]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	88db      	ldrh	r3, [r3, #6]
 800f74a:	461a      	mov	r2, r3
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 fa55 	bl	8010bfc <USBD_CtlPrepareRx>
      break;
 800f752:	e055      	b.n	800f800 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	7850      	ldrb	r0, [r2, #1]
 800f760:	2200      	movs	r2, #0
 800f762:	6839      	ldr	r1, [r7, #0]
 800f764:	4798      	blx	r3
      break;
 800f766:	e04b      	b.n	800f800 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	785b      	ldrb	r3, [r3, #1]
 800f76c:	2b0a      	cmp	r3, #10
 800f76e:	d017      	beq.n	800f7a0 <USBD_CDC_Setup+0xd6>
 800f770:	2b0b      	cmp	r3, #11
 800f772:	d029      	beq.n	800f7c8 <USBD_CDC_Setup+0xfe>
 800f774:	2b00      	cmp	r3, #0
 800f776:	d133      	bne.n	800f7e0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d107      	bne.n	800f792 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f782:	f107 030c 	add.w	r3, r7, #12
 800f786:	2202      	movs	r2, #2
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f001 fa08 	bl	8010ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f790:	e02e      	b.n	800f7f0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f001 f998 	bl	8010aca <USBD_CtlError>
            ret = USBD_FAIL;
 800f79a:	2302      	movs	r3, #2
 800f79c:	75fb      	strb	r3, [r7, #23]
          break;
 800f79e:	e027      	b.n	800f7f0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d107      	bne.n	800f7ba <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800f7aa:	f107 030f 	add.w	r3, r7, #15
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f001 f9f4 	bl	8010ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7b8:	e01a      	b.n	800f7f0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f001 f984 	bl	8010aca <USBD_CtlError>
            ret = USBD_FAIL;
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	75fb      	strb	r3, [r7, #23]
          break;
 800f7c6:	e013      	b.n	800f7f0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	d00d      	beq.n	800f7ee <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800f7d2:	6839      	ldr	r1, [r7, #0]
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f001 f978 	bl	8010aca <USBD_CtlError>
            ret = USBD_FAIL;
 800f7da:	2302      	movs	r3, #2
 800f7dc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f7de:	e006      	b.n	800f7ee <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f001 f971 	bl	8010aca <USBD_CtlError>
          ret = USBD_FAIL;
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	75fb      	strb	r3, [r7, #23]
          break;
 800f7ec:	e000      	b.n	800f7f0 <USBD_CDC_Setup+0x126>
          break;
 800f7ee:	bf00      	nop
      }
      break;
 800f7f0:	e006      	b.n	800f800 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800f7f2:	6839      	ldr	r1, [r7, #0]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f001 f968 	bl	8010aca <USBD_CtlError>
      ret = USBD_FAIL;
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	75fb      	strb	r3, [r7, #23]
      break;
 800f7fe:	bf00      	nop
  }

  return ret;
 800f800:	7dfb      	ldrb	r3, [r7, #23]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3718      	adds	r7, #24
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b084      	sub	sp, #16
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	460b      	mov	r3, r1
 800f814:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f824:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d03a      	beq.n	800f8a6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f830:	78fa      	ldrb	r2, [r7, #3]
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	440b      	add	r3, r1
 800f83e:	331c      	adds	r3, #28
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d029      	beq.n	800f89a <USBD_CDC_DataIn+0x90>
 800f846:	78fa      	ldrb	r2, [r7, #3]
 800f848:	6879      	ldr	r1, [r7, #4]
 800f84a:	4613      	mov	r3, r2
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	4413      	add	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	440b      	add	r3, r1
 800f854:	331c      	adds	r3, #28
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	78f9      	ldrb	r1, [r7, #3]
 800f85a:	68b8      	ldr	r0, [r7, #8]
 800f85c:	460b      	mov	r3, r1
 800f85e:	00db      	lsls	r3, r3, #3
 800f860:	1a5b      	subs	r3, r3, r1
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	4403      	add	r3, r0
 800f866:	3344      	adds	r3, #68	; 0x44
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	fbb2 f1f3 	udiv	r1, r2, r3
 800f86e:	fb03 f301 	mul.w	r3, r3, r1
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	2b00      	cmp	r3, #0
 800f876:	d110      	bne.n	800f89a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f878:	78fa      	ldrb	r2, [r7, #3]
 800f87a:	6879      	ldr	r1, [r7, #4]
 800f87c:	4613      	mov	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4413      	add	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	440b      	add	r3, r1
 800f886:	331c      	adds	r3, #28
 800f888:	2200      	movs	r2, #0
 800f88a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f88c:	78f9      	ldrb	r1, [r7, #3]
 800f88e:	2300      	movs	r3, #0
 800f890:	2200      	movs	r2, #0
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f005 f858 	bl	8014948 <USBD_LL_Transmit>
 800f898:	e003      	b.n	800f8a2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e000      	b.n	800f8a8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f8a6:	2302      	movs	r3, #2
  }
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f005 f8b1 	bl	8014a30 <USBD_LL_GetRxDataSize>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00d      	beq.n	800f8fc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f8f4:	4611      	mov	r1, r2
 800f8f6:	4798      	blx	r3

    return USBD_OK;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	e000      	b.n	800f8fe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f8fc:	2302      	movs	r3, #2
  }
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b084      	sub	sp, #16
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f914:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d015      	beq.n	800f94c <USBD_CDC_EP0_RxReady+0x46>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f926:	2bff      	cmp	r3, #255	; 0xff
 800f928:	d010      	beq.n	800f94c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f938:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f940:	b292      	uxth	r2, r2
 800f942:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	22ff      	movs	r2, #255	; 0xff
 800f948:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
	...

0800f958 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2243      	movs	r2, #67	; 0x43
 800f964:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f966:	4b03      	ldr	r3, [pc, #12]	; (800f974 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f968:	4618      	mov	r0, r3
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	200000ec 	.word	0x200000ec

0800f978 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2243      	movs	r2, #67	; 0x43
 800f984:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f986:	4b03      	ldr	r3, [pc, #12]	; (800f994 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	200000a8 	.word	0x200000a8

0800f998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2243      	movs	r2, #67	; 0x43
 800f9a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f9a6:	4b03      	ldr	r3, [pc, #12]	; (800f9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr
 800f9b4:	20000130 	.word	0x20000130

0800f9b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	220a      	movs	r2, #10
 800f9c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f9c6:	4b03      	ldr	r3, [pc, #12]	; (800f9d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr
 800f9d4:	20000064 	.word	0x20000064

0800f9d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d005      	beq.n	800f9f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800fa06:	b480      	push	{r7}
 800fa08:	b087      	sub	sp, #28
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	4613      	mov	r3, r2
 800fa12:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa1a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fa24:	88fa      	ldrh	r2, [r7, #6]
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	371c      	adds	r7, #28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b085      	sub	sp, #20
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	683a      	ldr	r2, [r7, #0]
 800fa50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b084      	sub	sp, #16
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d017      	beq.n	800faac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	7c1b      	ldrb	r3, [r3, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fa8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa8e:	2101      	movs	r1, #1
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f004 ff93 	bl	80149bc <USBD_LL_PrepareReceive>
 800fa96:	e007      	b.n	800faa8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fa9e:	2340      	movs	r3, #64	; 0x40
 800faa0:	2101      	movs	r1, #1
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f004 ff8a 	bl	80149bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	e000      	b.n	800faae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800faac:	2302      	movs	r3, #2
  }
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b084      	sub	sp, #16
 800faba:	af00      	add	r7, sp, #0
 800fabc:	60f8      	str	r0, [r7, #12]
 800fabe:	60b9      	str	r1, [r7, #8]
 800fac0:	4613      	mov	r3, r2
 800fac2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d101      	bne.n	800face <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800faca:	2302      	movs	r3, #2
 800facc:	e01a      	b.n	800fb04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2200      	movs	r2, #0
 800fadc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d003      	beq.n	800faee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	79fa      	ldrb	r2, [r7, #7]
 800fafa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f004 fd63 	bl	80145c8 <USBD_LL_Init>

  return USBD_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d006      	beq.n	800fb2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	683a      	ldr	r2, [r7, #0]
 800fb24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73fb      	strb	r3, [r7, #15]
 800fb2c:	e001      	b.n	800fb32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fb2e:	2302      	movs	r3, #2
 800fb30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f004 fd89 	bl	8014660 <USBD_LL_Start>

  return USBD_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b084      	sub	sp, #16
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	460b      	mov	r3, r1
 800fb78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00c      	beq.n	800fba2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	78fa      	ldrb	r2, [r7, #3]
 800fb92:	4611      	mov	r1, r2
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	4798      	blx	r3
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	78fa      	ldrb	r2, [r7, #3]
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	4798      	blx	r3

  return USBD_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f000 ff33 	bl	8010a50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fc06:	f003 031f 	and.w	r3, r3, #31
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d00c      	beq.n	800fc28 <USBD_LL_SetupStage+0x56>
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d302      	bcc.n	800fc18 <USBD_LL_SetupStage+0x46>
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d010      	beq.n	800fc38 <USBD_LL_SetupStage+0x66>
 800fc16:	e017      	b.n	800fc48 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fa09 	bl	8010038 <USBD_StdDevReq>
      break;
 800fc26:	e01a      	b.n	800fc5e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fa6b 	bl	801010c <USBD_StdItfReq>
      break;
 800fc36:	e012      	b.n	800fc5e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 faa9 	bl	8010198 <USBD_StdEPReq>
      break;
 800fc46:	e00a      	b.n	800fc5e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fc4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	4619      	mov	r1, r3
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f004 fda8 	bl	80147ac <USBD_LL_StallEP>
      break;
 800fc5c:	bf00      	nop
  }

  return USBD_OK;
 800fc5e:	2300      	movs	r3, #0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b086      	sub	sp, #24
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	460b      	mov	r3, r1
 800fc72:	607a      	str	r2, [r7, #4]
 800fc74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fc76:	7afb      	ldrb	r3, [r7, #11]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d14b      	bne.n	800fd14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fc82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc8a:	2b03      	cmp	r3, #3
 800fc8c:	d134      	bne.n	800fcf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	68da      	ldr	r2, [r3, #12]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d919      	bls.n	800fcce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	68da      	ldr	r2, [r3, #12]
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	1ad2      	subs	r2, r2, r3
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	68da      	ldr	r2, [r3, #12]
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d203      	bcs.n	800fcbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	e002      	b.n	800fcc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f000 ffb6 	bl	8010c38 <USBD_CtlContinueRx>
 800fccc:	e038      	b.n	800fd40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00a      	beq.n	800fcf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d105      	bne.n	800fcf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f000 ffb3 	bl	8010c5c <USBD_CtlSendStatus>
 800fcf6:	e023      	b.n	800fd40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcfe:	2b05      	cmp	r3, #5
 800fd00:	d11e      	bne.n	800fd40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f004 fd4d 	bl	80147ac <USBD_LL_StallEP>
 800fd12:	e015      	b.n	800fd40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00d      	beq.n	800fd3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d108      	bne.n	800fd3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	7afa      	ldrb	r2, [r7, #11]
 800fd34:	4611      	mov	r1, r2
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	4798      	blx	r3
 800fd3a:	e001      	b.n	800fd40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	e000      	b.n	800fd42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b086      	sub	sp, #24
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	60f8      	str	r0, [r7, #12]
 800fd52:	460b      	mov	r3, r1
 800fd54:	607a      	str	r2, [r7, #4]
 800fd56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fd58:	7afb      	ldrb	r3, [r7, #11]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d17f      	bne.n	800fe5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	3314      	adds	r3, #20
 800fd62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	d15c      	bne.n	800fe28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	68da      	ldr	r2, [r3, #12]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d915      	bls.n	800fda6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	68da      	ldr	r2, [r3, #12]
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	1ad2      	subs	r2, r2, r3
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	461a      	mov	r2, r3
 800fd90:	6879      	ldr	r1, [r7, #4]
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 ff20 	bl	8010bd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f004 fe0c 	bl	80149bc <USBD_LL_PrepareReceive>
 800fda4:	e04e      	b.n	800fe44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	6912      	ldr	r2, [r2, #16]
 800fdae:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdb2:	fb02 f201 	mul.w	r2, r2, r1
 800fdb6:	1a9b      	subs	r3, r3, r2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d11c      	bne.n	800fdf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	689a      	ldr	r2, [r3, #8]
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d316      	bcc.n	800fdf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	689a      	ldr	r2, [r3, #8]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d20f      	bcs.n	800fdf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	2100      	movs	r1, #0
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f000 fefc 	bl	8010bd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2200      	movs	r2, #0
 800fde4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fde8:	2300      	movs	r3, #0
 800fdea:	2200      	movs	r2, #0
 800fdec:	2100      	movs	r1, #0
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f004 fde4 	bl	80149bc <USBD_LL_PrepareReceive>
 800fdf4:	e026      	b.n	800fe44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fe08:	2b03      	cmp	r3, #3
 800fe0a:	d105      	bne.n	800fe18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fe18:	2180      	movs	r1, #128	; 0x80
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f004 fcc6 	bl	80147ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 ff2e 	bl	8010c82 <USBD_CtlReceiveStatus>
 800fe26:	e00d      	b.n	800fe44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe2e:	2b04      	cmp	r3, #4
 800fe30:	d004      	beq.n	800fe3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d103      	bne.n	800fe44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fe3c:	2180      	movs	r1, #128	; 0x80
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f004 fcb4 	bl	80147ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d11d      	bne.n	800fe8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7ff fe82 	bl	800fb58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fe5c:	e015      	b.n	800fe8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe64:	695b      	ldr	r3, [r3, #20]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00d      	beq.n	800fe86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d108      	bne.n	800fe86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	7afa      	ldrb	r2, [r7, #11]
 800fe7e:	4611      	mov	r1, r2
 800fe80:	68f8      	ldr	r0, [r7, #12]
 800fe82:	4798      	blx	r3
 800fe84:	e001      	b.n	800fe8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fe86:	2302      	movs	r3, #2
 800fe88:	e000      	b.n	800fe8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe9c:	2340      	movs	r3, #64	; 0x40
 800fe9e:	2200      	movs	r2, #0
 800fea0:	2100      	movs	r1, #0
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f004 fc0e 	bl	80146c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2201      	movs	r2, #1
 800feac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2240      	movs	r2, #64	; 0x40
 800feb4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800feb8:	2340      	movs	r3, #64	; 0x40
 800feba:	2200      	movs	r2, #0
 800febc:	2180      	movs	r1, #128	; 0x80
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f004 fc00 	bl	80146c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2201      	movs	r2, #1
 800fec8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2240      	movs	r2, #64	; 0x40
 800fece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d009      	beq.n	800ff0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	6852      	ldr	r2, [r2, #4]
 800ff04:	b2d2      	uxtb	r2, r2
 800ff06:	4611      	mov	r1, r2
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	4798      	blx	r3
  }

  return USBD_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b083      	sub	sp, #12
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	460b      	mov	r3, r1
 800ff20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	78fa      	ldrb	r2, [r7, #3]
 800ff26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	370c      	adds	r7, #12
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr

0800ff36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2204      	movs	r2, #4
 800ff4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff6e:	2b04      	cmp	r3, #4
 800ff70:	d105      	bne.n	800ff7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d10b      	bne.n	800ffb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d005      	beq.n	800ffb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffb0:	69db      	ldr	r3, [r3, #28]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	460b      	mov	r3, r1
 800ffca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	370c      	adds	r7, #12
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr

0800ffda <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b083      	sub	sp, #12
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr

0801000a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b082      	sub	sp, #8
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	6852      	ldr	r2, [r2, #4]
 8010026:	b2d2      	uxtb	r2, r2
 8010028:	4611      	mov	r1, r2
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	4798      	blx	r3

  return USBD_OK;
 801002e:	2300      	movs	r3, #0
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801004e:	2b20      	cmp	r3, #32
 8010050:	d004      	beq.n	801005c <USBD_StdDevReq+0x24>
 8010052:	2b40      	cmp	r3, #64	; 0x40
 8010054:	d002      	beq.n	801005c <USBD_StdDevReq+0x24>
 8010056:	2b00      	cmp	r3, #0
 8010058:	d008      	beq.n	801006c <USBD_StdDevReq+0x34>
 801005a:	e04c      	b.n	80100f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	6839      	ldr	r1, [r7, #0]
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	4798      	blx	r3
      break;
 801006a:	e049      	b.n	8010100 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	785b      	ldrb	r3, [r3, #1]
 8010070:	2b09      	cmp	r3, #9
 8010072:	d83a      	bhi.n	80100ea <USBD_StdDevReq+0xb2>
 8010074:	a201      	add	r2, pc, #4	; (adr r2, 801007c <USBD_StdDevReq+0x44>)
 8010076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007a:	bf00      	nop
 801007c:	080100cd 	.word	0x080100cd
 8010080:	080100e1 	.word	0x080100e1
 8010084:	080100eb 	.word	0x080100eb
 8010088:	080100d7 	.word	0x080100d7
 801008c:	080100eb 	.word	0x080100eb
 8010090:	080100af 	.word	0x080100af
 8010094:	080100a5 	.word	0x080100a5
 8010098:	080100eb 	.word	0x080100eb
 801009c:	080100c3 	.word	0x080100c3
 80100a0:	080100b9 	.word	0x080100b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f9d4 	bl	8010454 <USBD_GetDescriptor>
          break;
 80100ac:	e022      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fb61 	bl	8010778 <USBD_SetAddress>
          break;
 80100b6:	e01d      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80100b8:	6839      	ldr	r1, [r7, #0]
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 fb9e 	bl	80107fc <USBD_SetConfig>
          break;
 80100c0:	e018      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80100c2:	6839      	ldr	r1, [r7, #0]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fc27 	bl	8010918 <USBD_GetConfig>
          break;
 80100ca:	e013      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80100cc:	6839      	ldr	r1, [r7, #0]
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 fc56 	bl	8010980 <USBD_GetStatus>
          break;
 80100d4:	e00e      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fc84 	bl	80109e6 <USBD_SetFeature>
          break;
 80100de:	e009      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80100e0:	6839      	ldr	r1, [r7, #0]
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 fc93 	bl	8010a0e <USBD_ClrFeature>
          break;
 80100e8:	e004      	b.n	80100f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fcec 	bl	8010aca <USBD_CtlError>
          break;
 80100f2:	bf00      	nop
      }
      break;
 80100f4:	e004      	b.n	8010100 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80100f6:	6839      	ldr	r1, [r7, #0]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fce6 	bl	8010aca <USBD_CtlError>
      break;
 80100fe:	bf00      	nop
  }

  return ret;
 8010100:	7bfb      	ldrb	r3, [r7, #15]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop

0801010c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010122:	2b20      	cmp	r3, #32
 8010124:	d003      	beq.n	801012e <USBD_StdItfReq+0x22>
 8010126:	2b40      	cmp	r3, #64	; 0x40
 8010128:	d001      	beq.n	801012e <USBD_StdItfReq+0x22>
 801012a:	2b00      	cmp	r3, #0
 801012c:	d12a      	bne.n	8010184 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010134:	3b01      	subs	r3, #1
 8010136:	2b02      	cmp	r3, #2
 8010138:	d81d      	bhi.n	8010176 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	889b      	ldrh	r3, [r3, #4]
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b01      	cmp	r3, #1
 8010142:	d813      	bhi.n	801016c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	4798      	blx	r3
 8010152:	4603      	mov	r3, r0
 8010154:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	88db      	ldrh	r3, [r3, #6]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d110      	bne.n	8010180 <USBD_StdItfReq+0x74>
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10d      	bne.n	8010180 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fd79 	bl	8010c5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801016a:	e009      	b.n	8010180 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801016c:	6839      	ldr	r1, [r7, #0]
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f000 fcab 	bl	8010aca <USBD_CtlError>
          break;
 8010174:	e004      	b.n	8010180 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fca6 	bl	8010aca <USBD_CtlError>
          break;
 801017e:	e000      	b.n	8010182 <USBD_StdItfReq+0x76>
          break;
 8010180:	bf00      	nop
      }
      break;
 8010182:	e004      	b.n	801018e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8010184:	6839      	ldr	r1, [r7, #0]
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 fc9f 	bl	8010aca <USBD_CtlError>
      break;
 801018c:	bf00      	nop
  }

  return USBD_OK;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80101a2:	2300      	movs	r3, #0
 80101a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	889b      	ldrh	r3, [r3, #4]
 80101aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101b4:	2b20      	cmp	r3, #32
 80101b6:	d004      	beq.n	80101c2 <USBD_StdEPReq+0x2a>
 80101b8:	2b40      	cmp	r3, #64	; 0x40
 80101ba:	d002      	beq.n	80101c2 <USBD_StdEPReq+0x2a>
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d008      	beq.n	80101d2 <USBD_StdEPReq+0x3a>
 80101c0:	e13d      	b.n	801043e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	6839      	ldr	r1, [r7, #0]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	4798      	blx	r3
      break;
 80101d0:	e13a      	b.n	8010448 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101da:	2b20      	cmp	r3, #32
 80101dc:	d10a      	bne.n	80101f4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	6839      	ldr	r1, [r7, #0]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	4798      	blx	r3
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]

        return ret;
 80101f0:	7bfb      	ldrb	r3, [r7, #15]
 80101f2:	e12a      	b.n	801044a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	785b      	ldrb	r3, [r3, #1]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d03e      	beq.n	801027a <USBD_StdEPReq+0xe2>
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d002      	beq.n	8010206 <USBD_StdEPReq+0x6e>
 8010200:	2b00      	cmp	r3, #0
 8010202:	d070      	beq.n	80102e6 <USBD_StdEPReq+0x14e>
 8010204:	e115      	b.n	8010432 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801020c:	2b02      	cmp	r3, #2
 801020e:	d002      	beq.n	8010216 <USBD_StdEPReq+0x7e>
 8010210:	2b03      	cmp	r3, #3
 8010212:	d015      	beq.n	8010240 <USBD_StdEPReq+0xa8>
 8010214:	e02b      	b.n	801026e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010216:	7bbb      	ldrb	r3, [r7, #14]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00c      	beq.n	8010236 <USBD_StdEPReq+0x9e>
 801021c:	7bbb      	ldrb	r3, [r7, #14]
 801021e:	2b80      	cmp	r3, #128	; 0x80
 8010220:	d009      	beq.n	8010236 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8010222:	7bbb      	ldrb	r3, [r7, #14]
 8010224:	4619      	mov	r1, r3
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f004 fac0 	bl	80147ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801022c:	2180      	movs	r1, #128	; 0x80
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f004 fabc 	bl	80147ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010234:	e020      	b.n	8010278 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8010236:	6839      	ldr	r1, [r7, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 fc46 	bl	8010aca <USBD_CtlError>
              break;
 801023e:	e01b      	b.n	8010278 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	885b      	ldrh	r3, [r3, #2]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d10e      	bne.n	8010266 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8010248:	7bbb      	ldrb	r3, [r7, #14]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00b      	beq.n	8010266 <USBD_StdEPReq+0xce>
 801024e:	7bbb      	ldrb	r3, [r7, #14]
 8010250:	2b80      	cmp	r3, #128	; 0x80
 8010252:	d008      	beq.n	8010266 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	88db      	ldrh	r3, [r3, #6]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d104      	bne.n	8010266 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801025c:	7bbb      	ldrb	r3, [r7, #14]
 801025e:	4619      	mov	r1, r3
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f004 faa3 	bl	80147ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fcf8 	bl	8010c5c <USBD_CtlSendStatus>

              break;
 801026c:	e004      	b.n	8010278 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801026e:	6839      	ldr	r1, [r7, #0]
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fc2a 	bl	8010aca <USBD_CtlError>
              break;
 8010276:	bf00      	nop
          }
          break;
 8010278:	e0e0      	b.n	801043c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010280:	2b02      	cmp	r3, #2
 8010282:	d002      	beq.n	801028a <USBD_StdEPReq+0xf2>
 8010284:	2b03      	cmp	r3, #3
 8010286:	d015      	beq.n	80102b4 <USBD_StdEPReq+0x11c>
 8010288:	e026      	b.n	80102d8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801028a:	7bbb      	ldrb	r3, [r7, #14]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00c      	beq.n	80102aa <USBD_StdEPReq+0x112>
 8010290:	7bbb      	ldrb	r3, [r7, #14]
 8010292:	2b80      	cmp	r3, #128	; 0x80
 8010294:	d009      	beq.n	80102aa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8010296:	7bbb      	ldrb	r3, [r7, #14]
 8010298:	4619      	mov	r1, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f004 fa86 	bl	80147ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80102a0:	2180      	movs	r1, #128	; 0x80
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f004 fa82 	bl	80147ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80102a8:	e01c      	b.n	80102e4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80102aa:	6839      	ldr	r1, [r7, #0]
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 fc0c 	bl	8010aca <USBD_CtlError>
              break;
 80102b2:	e017      	b.n	80102e4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	885b      	ldrh	r3, [r3, #2]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d112      	bne.n	80102e2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80102bc:	7bbb      	ldrb	r3, [r7, #14]
 80102be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d004      	beq.n	80102d0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80102c6:	7bbb      	ldrb	r3, [r7, #14]
 80102c8:	4619      	mov	r1, r3
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f004 faa4 	bl	8014818 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 fcc3 	bl	8010c5c <USBD_CtlSendStatus>
              }
              break;
 80102d6:	e004      	b.n	80102e2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80102d8:	6839      	ldr	r1, [r7, #0]
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 fbf5 	bl	8010aca <USBD_CtlError>
              break;
 80102e0:	e000      	b.n	80102e4 <USBD_StdEPReq+0x14c>
              break;
 80102e2:	bf00      	nop
          }
          break;
 80102e4:	e0aa      	b.n	801043c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d002      	beq.n	80102f6 <USBD_StdEPReq+0x15e>
 80102f0:	2b03      	cmp	r3, #3
 80102f2:	d032      	beq.n	801035a <USBD_StdEPReq+0x1c2>
 80102f4:	e097      	b.n	8010426 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102f6:	7bbb      	ldrb	r3, [r7, #14]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d007      	beq.n	801030c <USBD_StdEPReq+0x174>
 80102fc:	7bbb      	ldrb	r3, [r7, #14]
 80102fe:	2b80      	cmp	r3, #128	; 0x80
 8010300:	d004      	beq.n	801030c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8010302:	6839      	ldr	r1, [r7, #0]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fbe0 	bl	8010aca <USBD_CtlError>
                break;
 801030a:	e091      	b.n	8010430 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801030c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010310:	2b00      	cmp	r3, #0
 8010312:	da0b      	bge.n	801032c <USBD_StdEPReq+0x194>
 8010314:	7bbb      	ldrb	r3, [r7, #14]
 8010316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801031a:	4613      	mov	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4413      	add	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	3310      	adds	r3, #16
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	4413      	add	r3, r2
 8010328:	3304      	adds	r3, #4
 801032a:	e00b      	b.n	8010344 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801032c:	7bbb      	ldrb	r3, [r7, #14]
 801032e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010332:	4613      	mov	r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4413      	add	r3, r2
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	4413      	add	r3, r2
 8010342:	3304      	adds	r3, #4
 8010344:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2200      	movs	r2, #0
 801034a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2202      	movs	r2, #2
 8010350:	4619      	mov	r1, r3
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fc24 	bl	8010ba0 <USBD_CtlSendData>
              break;
 8010358:	e06a      	b.n	8010430 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801035a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801035e:	2b00      	cmp	r3, #0
 8010360:	da11      	bge.n	8010386 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	f003 020f 	and.w	r2, r3, #15
 8010368:	6879      	ldr	r1, [r7, #4]
 801036a:	4613      	mov	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	4413      	add	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	440b      	add	r3, r1
 8010374:	3318      	adds	r3, #24
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d117      	bne.n	80103ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801037c:	6839      	ldr	r1, [r7, #0]
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 fba3 	bl	8010aca <USBD_CtlError>
                  break;
 8010384:	e054      	b.n	8010430 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010386:	7bbb      	ldrb	r3, [r7, #14]
 8010388:	f003 020f 	and.w	r2, r3, #15
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	4613      	mov	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4413      	add	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	440b      	add	r3, r1
 8010398:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d104      	bne.n	80103ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80103a2:	6839      	ldr	r1, [r7, #0]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 fb90 	bl	8010aca <USBD_CtlError>
                  break;
 80103aa:	e041      	b.n	8010430 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	da0b      	bge.n	80103cc <USBD_StdEPReq+0x234>
 80103b4:	7bbb      	ldrb	r3, [r7, #14]
 80103b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ba:	4613      	mov	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	3310      	adds	r3, #16
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	4413      	add	r3, r2
 80103c8:	3304      	adds	r3, #4
 80103ca:	e00b      	b.n	80103e4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103cc:	7bbb      	ldrb	r3, [r7, #14]
 80103ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103d2:	4613      	mov	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	4413      	add	r3, r2
 80103e2:	3304      	adds	r3, #4
 80103e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103e6:	7bbb      	ldrb	r3, [r7, #14]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d002      	beq.n	80103f2 <USBD_StdEPReq+0x25a>
 80103ec:	7bbb      	ldrb	r3, [r7, #14]
 80103ee:	2b80      	cmp	r3, #128	; 0x80
 80103f0:	d103      	bne.n	80103fa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2200      	movs	r2, #0
 80103f6:	601a      	str	r2, [r3, #0]
 80103f8:	e00e      	b.n	8010418 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
 80103fc:	4619      	mov	r1, r3
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f004 fa40 	bl	8014884 <USBD_LL_IsStallEP>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	2201      	movs	r2, #1
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	e002      	b.n	8010418 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2202      	movs	r2, #2
 801041c:	4619      	mov	r1, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fbbe 	bl	8010ba0 <USBD_CtlSendData>
              break;
 8010424:	e004      	b.n	8010430 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 fb4e 	bl	8010aca <USBD_CtlError>
              break;
 801042e:	bf00      	nop
          }
          break;
 8010430:	e004      	b.n	801043c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 fb48 	bl	8010aca <USBD_CtlError>
          break;
 801043a:	bf00      	nop
      }
      break;
 801043c:	e004      	b.n	8010448 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fb42 	bl	8010aca <USBD_CtlError>
      break;
 8010446:	bf00      	nop
  }

  return ret;
 8010448:	7bfb      	ldrb	r3, [r7, #15]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801045e:	2300      	movs	r3, #0
 8010460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010462:	2300      	movs	r3, #0
 8010464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010466:	2300      	movs	r3, #0
 8010468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	885b      	ldrh	r3, [r3, #2]
 801046e:	0a1b      	lsrs	r3, r3, #8
 8010470:	b29b      	uxth	r3, r3
 8010472:	3b01      	subs	r3, #1
 8010474:	2b0e      	cmp	r3, #14
 8010476:	f200 8152 	bhi.w	801071e <USBD_GetDescriptor+0x2ca>
 801047a:	a201      	add	r2, pc, #4	; (adr r2, 8010480 <USBD_GetDescriptor+0x2c>)
 801047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010480:	080104f1 	.word	0x080104f1
 8010484:	08010509 	.word	0x08010509
 8010488:	08010549 	.word	0x08010549
 801048c:	0801071f 	.word	0x0801071f
 8010490:	0801071f 	.word	0x0801071f
 8010494:	080106bf 	.word	0x080106bf
 8010498:	080106eb 	.word	0x080106eb
 801049c:	0801071f 	.word	0x0801071f
 80104a0:	0801071f 	.word	0x0801071f
 80104a4:	0801071f 	.word	0x0801071f
 80104a8:	0801071f 	.word	0x0801071f
 80104ac:	0801071f 	.word	0x0801071f
 80104b0:	0801071f 	.word	0x0801071f
 80104b4:	0801071f 	.word	0x0801071f
 80104b8:	080104bd 	.word	0x080104bd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80104c2:	69db      	ldr	r3, [r3, #28]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00b      	beq.n	80104e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80104ce:	69db      	ldr	r3, [r3, #28]
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	7c12      	ldrb	r2, [r2, #16]
 80104d4:	f107 0108 	add.w	r1, r7, #8
 80104d8:	4610      	mov	r0, r2
 80104da:	4798      	blx	r3
 80104dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80104de:	e126      	b.n	801072e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 faf1 	bl	8010aca <USBD_CtlError>
        err++;
 80104e8:	7afb      	ldrb	r3, [r7, #11]
 80104ea:	3301      	adds	r3, #1
 80104ec:	72fb      	strb	r3, [r7, #11]
      break;
 80104ee:	e11e      	b.n	801072e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	7c12      	ldrb	r2, [r2, #16]
 80104fc:	f107 0108 	add.w	r1, r7, #8
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	60f8      	str	r0, [r7, #12]
      break;
 8010506:	e112      	b.n	801072e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	7c1b      	ldrb	r3, [r3, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d10d      	bne.n	801052c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010518:	f107 0208 	add.w	r2, r7, #8
 801051c:	4610      	mov	r0, r2
 801051e:	4798      	blx	r3
 8010520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3301      	adds	r3, #1
 8010526:	2202      	movs	r2, #2
 8010528:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801052a:	e100      	b.n	801072e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010534:	f107 0208 	add.w	r2, r7, #8
 8010538:	4610      	mov	r0, r2
 801053a:	4798      	blx	r3
 801053c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	3301      	adds	r3, #1
 8010542:	2202      	movs	r2, #2
 8010544:	701a      	strb	r2, [r3, #0]
      break;
 8010546:	e0f2      	b.n	801072e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	885b      	ldrh	r3, [r3, #2]
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b05      	cmp	r3, #5
 8010550:	f200 80ac 	bhi.w	80106ac <USBD_GetDescriptor+0x258>
 8010554:	a201      	add	r2, pc, #4	; (adr r2, 801055c <USBD_GetDescriptor+0x108>)
 8010556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801055a:	bf00      	nop
 801055c:	08010575 	.word	0x08010575
 8010560:	080105a9 	.word	0x080105a9
 8010564:	080105dd 	.word	0x080105dd
 8010568:	08010611 	.word	0x08010611
 801056c:	08010645 	.word	0x08010645
 8010570:	08010679 	.word	0x08010679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00b      	beq.n	8010598 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	7c12      	ldrb	r2, [r2, #16]
 801058c:	f107 0108 	add.w	r1, r7, #8
 8010590:	4610      	mov	r0, r2
 8010592:	4798      	blx	r3
 8010594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010596:	e091      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010598:	6839      	ldr	r1, [r7, #0]
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 fa95 	bl	8010aca <USBD_CtlError>
            err++;
 80105a0:	7afb      	ldrb	r3, [r7, #11]
 80105a2:	3301      	adds	r3, #1
 80105a4:	72fb      	strb	r3, [r7, #11]
          break;
 80105a6:	e089      	b.n	80106bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00b      	beq.n	80105cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	7c12      	ldrb	r2, [r2, #16]
 80105c0:	f107 0108 	add.w	r1, r7, #8
 80105c4:	4610      	mov	r0, r2
 80105c6:	4798      	blx	r3
 80105c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105ca:	e077      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 fa7b 	bl	8010aca <USBD_CtlError>
            err++;
 80105d4:	7afb      	ldrb	r3, [r7, #11]
 80105d6:	3301      	adds	r3, #1
 80105d8:	72fb      	strb	r3, [r7, #11]
          break;
 80105da:	e06f      	b.n	80106bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00b      	beq.n	8010600 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	7c12      	ldrb	r2, [r2, #16]
 80105f4:	f107 0108 	add.w	r1, r7, #8
 80105f8:	4610      	mov	r0, r2
 80105fa:	4798      	blx	r3
 80105fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105fe:	e05d      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010600:	6839      	ldr	r1, [r7, #0]
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fa61 	bl	8010aca <USBD_CtlError>
            err++;
 8010608:	7afb      	ldrb	r3, [r7, #11]
 801060a:	3301      	adds	r3, #1
 801060c:	72fb      	strb	r3, [r7, #11]
          break;
 801060e:	e055      	b.n	80106bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00b      	beq.n	8010634 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	7c12      	ldrb	r2, [r2, #16]
 8010628:	f107 0108 	add.w	r1, r7, #8
 801062c:	4610      	mov	r0, r2
 801062e:	4798      	blx	r3
 8010630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010632:	e043      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010634:	6839      	ldr	r1, [r7, #0]
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 fa47 	bl	8010aca <USBD_CtlError>
            err++;
 801063c:	7afb      	ldrb	r3, [r7, #11]
 801063e:	3301      	adds	r3, #1
 8010640:	72fb      	strb	r3, [r7, #11]
          break;
 8010642:	e03b      	b.n	80106bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801064a:	695b      	ldr	r3, [r3, #20]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00b      	beq.n	8010668 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010656:	695b      	ldr	r3, [r3, #20]
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	7c12      	ldrb	r2, [r2, #16]
 801065c:	f107 0108 	add.w	r1, r7, #8
 8010660:	4610      	mov	r0, r2
 8010662:	4798      	blx	r3
 8010664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010666:	e029      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010668:	6839      	ldr	r1, [r7, #0]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fa2d 	bl	8010aca <USBD_CtlError>
            err++;
 8010670:	7afb      	ldrb	r3, [r7, #11]
 8010672:	3301      	adds	r3, #1
 8010674:	72fb      	strb	r3, [r7, #11]
          break;
 8010676:	e021      	b.n	80106bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d00b      	beq.n	801069c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801068a:	699b      	ldr	r3, [r3, #24]
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	7c12      	ldrb	r2, [r2, #16]
 8010690:	f107 0108 	add.w	r1, r7, #8
 8010694:	4610      	mov	r0, r2
 8010696:	4798      	blx	r3
 8010698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801069a:	e00f      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801069c:	6839      	ldr	r1, [r7, #0]
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 fa13 	bl	8010aca <USBD_CtlError>
            err++;
 80106a4:	7afb      	ldrb	r3, [r7, #11]
 80106a6:	3301      	adds	r3, #1
 80106a8:	72fb      	strb	r3, [r7, #11]
          break;
 80106aa:	e007      	b.n	80106bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 fa0b 	bl	8010aca <USBD_CtlError>
          err++;
 80106b4:	7afb      	ldrb	r3, [r7, #11]
 80106b6:	3301      	adds	r3, #1
 80106b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80106ba:	e038      	b.n	801072e <USBD_GetDescriptor+0x2da>
 80106bc:	e037      	b.n	801072e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	7c1b      	ldrb	r3, [r3, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d109      	bne.n	80106da <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	f107 0208 	add.w	r2, r7, #8
 80106d2:	4610      	mov	r0, r2
 80106d4:	4798      	blx	r3
 80106d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106d8:	e029      	b.n	801072e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f000 f9f4 	bl	8010aca <USBD_CtlError>
        err++;
 80106e2:	7afb      	ldrb	r3, [r7, #11]
 80106e4:	3301      	adds	r3, #1
 80106e6:	72fb      	strb	r3, [r7, #11]
      break;
 80106e8:	e021      	b.n	801072e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	7c1b      	ldrb	r3, [r3, #16]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d10d      	bne.n	801070e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106fa:	f107 0208 	add.w	r2, r7, #8
 80106fe:	4610      	mov	r0, r2
 8010700:	4798      	blx	r3
 8010702:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	3301      	adds	r3, #1
 8010708:	2207      	movs	r2, #7
 801070a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801070c:	e00f      	b.n	801072e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f9da 	bl	8010aca <USBD_CtlError>
        err++;
 8010716:	7afb      	ldrb	r3, [r7, #11]
 8010718:	3301      	adds	r3, #1
 801071a:	72fb      	strb	r3, [r7, #11]
      break;
 801071c:	e007      	b.n	801072e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 f9d2 	bl	8010aca <USBD_CtlError>
      err++;
 8010726:	7afb      	ldrb	r3, [r7, #11]
 8010728:	3301      	adds	r3, #1
 801072a:	72fb      	strb	r3, [r7, #11]
      break;
 801072c:	bf00      	nop
  }

  if (err != 0U)
 801072e:	7afb      	ldrb	r3, [r7, #11]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d11c      	bne.n	801076e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8010734:	893b      	ldrh	r3, [r7, #8]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d011      	beq.n	801075e <USBD_GetDescriptor+0x30a>
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	88db      	ldrh	r3, [r3, #6]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00d      	beq.n	801075e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	88da      	ldrh	r2, [r3, #6]
 8010746:	893b      	ldrh	r3, [r7, #8]
 8010748:	4293      	cmp	r3, r2
 801074a:	bf28      	it	cs
 801074c:	4613      	movcs	r3, r2
 801074e:	b29b      	uxth	r3, r3
 8010750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010752:	893b      	ldrh	r3, [r7, #8]
 8010754:	461a      	mov	r2, r3
 8010756:	68f9      	ldr	r1, [r7, #12]
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 fa21 	bl	8010ba0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	88db      	ldrh	r3, [r3, #6]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d104      	bne.n	8010770 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fa78 	bl	8010c5c <USBD_CtlSendStatus>
 801076c:	e000      	b.n	8010770 <USBD_GetDescriptor+0x31c>
    return;
 801076e:	bf00      	nop
    }
  }
}
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop

08010778 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	889b      	ldrh	r3, [r3, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d130      	bne.n	80107ec <USBD_SetAddress+0x74>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	88db      	ldrh	r3, [r3, #6]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d12c      	bne.n	80107ec <USBD_SetAddress+0x74>
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	885b      	ldrh	r3, [r3, #2]
 8010796:	2b7f      	cmp	r3, #127	; 0x7f
 8010798:	d828      	bhi.n	80107ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	885b      	ldrh	r3, [r3, #2]
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107ac:	2b03      	cmp	r3, #3
 80107ae:	d104      	bne.n	80107ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80107b0:	6839      	ldr	r1, [r7, #0]
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f989 	bl	8010aca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107b8:	e01c      	b.n	80107f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	7bfa      	ldrb	r2, [r7, #15]
 80107be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
 80107c4:	4619      	mov	r1, r3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f004 f888 	bl	80148dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 fa45 	bl	8010c5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d004      	beq.n	80107e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2202      	movs	r2, #2
 80107dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107e0:	e008      	b.n	80107f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ea:	e003      	b.n	80107f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80107ec:	6839      	ldr	r1, [r7, #0]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 f96b 	bl	8010aca <USBD_CtlError>
  }
}
 80107f4:	bf00      	nop
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	885b      	ldrh	r3, [r3, #2]
 801080a:	b2da      	uxtb	r2, r3
 801080c:	4b41      	ldr	r3, [pc, #260]	; (8010914 <USBD_SetConfig+0x118>)
 801080e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010810:	4b40      	ldr	r3, [pc, #256]	; (8010914 <USBD_SetConfig+0x118>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d904      	bls.n	8010822 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010818:	6839      	ldr	r1, [r7, #0]
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f955 	bl	8010aca <USBD_CtlError>
 8010820:	e075      	b.n	801090e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010828:	2b02      	cmp	r3, #2
 801082a:	d002      	beq.n	8010832 <USBD_SetConfig+0x36>
 801082c:	2b03      	cmp	r3, #3
 801082e:	d023      	beq.n	8010878 <USBD_SetConfig+0x7c>
 8010830:	e062      	b.n	80108f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8010832:	4b38      	ldr	r3, [pc, #224]	; (8010914 <USBD_SetConfig+0x118>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d01a      	beq.n	8010870 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801083a:	4b36      	ldr	r3, [pc, #216]	; (8010914 <USBD_SetConfig+0x118>)
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2203      	movs	r2, #3
 8010848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801084c:	4b31      	ldr	r3, [pc, #196]	; (8010914 <USBD_SetConfig+0x118>)
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff f98b 	bl	800fb6e <USBD_SetClassConfig>
 8010858:	4603      	mov	r3, r0
 801085a:	2b02      	cmp	r3, #2
 801085c:	d104      	bne.n	8010868 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801085e:	6839      	ldr	r1, [r7, #0]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 f932 	bl	8010aca <USBD_CtlError>
            return;
 8010866:	e052      	b.n	801090e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f9f7 	bl	8010c5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801086e:	e04e      	b.n	801090e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 f9f3 	bl	8010c5c <USBD_CtlSendStatus>
        break;
 8010876:	e04a      	b.n	801090e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8010878:	4b26      	ldr	r3, [pc, #152]	; (8010914 <USBD_SetConfig+0x118>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d112      	bne.n	80108a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2202      	movs	r2, #2
 8010884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010888:	4b22      	ldr	r3, [pc, #136]	; (8010914 <USBD_SetConfig+0x118>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	461a      	mov	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8010892:	4b20      	ldr	r3, [pc, #128]	; (8010914 <USBD_SetConfig+0x118>)
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff f987 	bl	800fbac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 f9dc 	bl	8010c5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80108a4:	e033      	b.n	801090e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80108a6:	4b1b      	ldr	r3, [pc, #108]	; (8010914 <USBD_SetConfig+0x118>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	461a      	mov	r2, r3
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d01d      	beq.n	80108f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7ff f975 	bl	800fbac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80108c2:	4b14      	ldr	r3, [pc, #80]	; (8010914 <USBD_SetConfig+0x118>)
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	461a      	mov	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80108cc:	4b11      	ldr	r3, [pc, #68]	; (8010914 <USBD_SetConfig+0x118>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff f94b 	bl	800fb6e <USBD_SetClassConfig>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d104      	bne.n	80108e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 f8f2 	bl	8010aca <USBD_CtlError>
            return;
 80108e6:	e012      	b.n	801090e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 f9b7 	bl	8010c5c <USBD_CtlSendStatus>
        break;
 80108ee:	e00e      	b.n	801090e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 f9b3 	bl	8010c5c <USBD_CtlSendStatus>
        break;
 80108f6:	e00a      	b.n	801090e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80108f8:	6839      	ldr	r1, [r7, #0]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 f8e5 	bl	8010aca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8010900:	4b04      	ldr	r3, [pc, #16]	; (8010914 <USBD_SetConfig+0x118>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	4619      	mov	r1, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff f950 	bl	800fbac <USBD_ClrClassConfig>
        break;
 801090c:	bf00      	nop
    }
  }
}
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	20000478 	.word	0x20000478

08010918 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	88db      	ldrh	r3, [r3, #6]
 8010926:	2b01      	cmp	r3, #1
 8010928:	d004      	beq.n	8010934 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801092a:	6839      	ldr	r1, [r7, #0]
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 f8cc 	bl	8010aca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010932:	e021      	b.n	8010978 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801093a:	2b01      	cmp	r3, #1
 801093c:	db17      	blt.n	801096e <USBD_GetConfig+0x56>
 801093e:	2b02      	cmp	r3, #2
 8010940:	dd02      	ble.n	8010948 <USBD_GetConfig+0x30>
 8010942:	2b03      	cmp	r3, #3
 8010944:	d00b      	beq.n	801095e <USBD_GetConfig+0x46>
 8010946:	e012      	b.n	801096e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	3308      	adds	r3, #8
 8010952:	2201      	movs	r2, #1
 8010954:	4619      	mov	r1, r3
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f922 	bl	8010ba0 <USBD_CtlSendData>
        break;
 801095c:	e00c      	b.n	8010978 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	3304      	adds	r3, #4
 8010962:	2201      	movs	r2, #1
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 f91a 	bl	8010ba0 <USBD_CtlSendData>
        break;
 801096c:	e004      	b.n	8010978 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 f8aa 	bl	8010aca <USBD_CtlError>
        break;
 8010976:	bf00      	nop
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010990:	3b01      	subs	r3, #1
 8010992:	2b02      	cmp	r3, #2
 8010994:	d81e      	bhi.n	80109d4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	88db      	ldrh	r3, [r3, #6]
 801099a:	2b02      	cmp	r3, #2
 801099c:	d004      	beq.n	80109a8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 f892 	bl	8010aca <USBD_CtlError>
        break;
 80109a6:	e01a      	b.n	80109de <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2201      	movs	r2, #1
 80109ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d005      	beq.n	80109c4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	68db      	ldr	r3, [r3, #12]
 80109bc:	f043 0202 	orr.w	r2, r3, #2
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	330c      	adds	r3, #12
 80109c8:	2202      	movs	r2, #2
 80109ca:	4619      	mov	r1, r3
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 f8e7 	bl	8010ba0 <USBD_CtlSendData>
      break;
 80109d2:	e004      	b.n	80109de <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 f877 	bl	8010aca <USBD_CtlError>
      break;
 80109dc:	bf00      	nop
  }
}
 80109de:	bf00      	nop
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b082      	sub	sp, #8
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	885b      	ldrh	r3, [r3, #2]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d106      	bne.n	8010a06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2201      	movs	r2, #1
 80109fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 f92b 	bl	8010c5c <USBD_CtlSendStatus>
  }
}
 8010a06:	bf00      	nop
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b082      	sub	sp, #8
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	d80b      	bhi.n	8010a3c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	885b      	ldrh	r3, [r3, #2]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d10c      	bne.n	8010a46 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f911 	bl	8010c5c <USBD_CtlSendStatus>
      }
      break;
 8010a3a:	e004      	b.n	8010a46 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 f843 	bl	8010aca <USBD_CtlError>
      break;
 8010a44:	e000      	b.n	8010a48 <USBD_ClrFeature+0x3a>
      break;
 8010a46:	bf00      	nop
  }
}
 8010a48:	bf00      	nop
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	781a      	ldrb	r2, [r3, #0]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	785a      	ldrb	r2, [r3, #1]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	3302      	adds	r3, #2
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	3303      	adds	r3, #3
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	4413      	add	r3, r2
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	3305      	adds	r3, #5
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	021b      	lsls	r3, r3, #8
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	4413      	add	r3, r2
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	3306      	adds	r3, #6
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	3307      	adds	r3, #7
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	021b      	lsls	r3, r3, #8
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	80da      	strh	r2, [r3, #6]

}
 8010abe:	bf00      	nop
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b082      	sub	sp, #8
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
 8010ad2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010ad4:	2180      	movs	r1, #128	; 0x80
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f003 fe68 	bl	80147ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010adc:	2100      	movs	r1, #0
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f003 fe64 	bl	80147ac <USBD_LL_StallEP>
}
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b086      	sub	sp, #24
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010af8:	2300      	movs	r3, #0
 8010afa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d032      	beq.n	8010b68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f000 f834 	bl	8010b70 <USBD_GetLen>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	005b      	lsls	r3, r3, #1
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
 8010b18:	1c5a      	adds	r2, r3, #1
 8010b1a:	75fa      	strb	r2, [r7, #23]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	4413      	add	r3, r2
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	7812      	ldrb	r2, [r2, #0]
 8010b26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010b28:	7dfb      	ldrb	r3, [r7, #23]
 8010b2a:	1c5a      	adds	r2, r3, #1
 8010b2c:	75fa      	strb	r2, [r7, #23]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	4413      	add	r3, r2
 8010b34:	2203      	movs	r2, #3
 8010b36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010b38:	e012      	b.n	8010b60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	1c5a      	adds	r2, r3, #1
 8010b3e:	60fa      	str	r2, [r7, #12]
 8010b40:	7dfa      	ldrb	r2, [r7, #23]
 8010b42:	1c51      	adds	r1, r2, #1
 8010b44:	75f9      	strb	r1, [r7, #23]
 8010b46:	4611      	mov	r1, r2
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	440a      	add	r2, r1
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	75fa      	strb	r2, [r7, #23]
 8010b56:	461a      	mov	r2, r3
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e8      	bne.n	8010b3a <USBD_GetString+0x4e>
    }
  }
}
 8010b68:	bf00      	nop
 8010b6a:	3718      	adds	r7, #24
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8010b7c:	e005      	b.n	8010b8a <USBD_GetLen+0x1a>
  {
    len++;
 8010b7e:	7bfb      	ldrb	r3, [r7, #15]
 8010b80:	3301      	adds	r3, #1
 8010b82:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	3301      	adds	r3, #1
 8010b88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1f5      	bne.n	8010b7e <USBD_GetLen+0xe>
  }

  return len;
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	4613      	mov	r3, r2
 8010bac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2202      	movs	r2, #2
 8010bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010bb6:	88fa      	ldrh	r2, [r7, #6]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010bbc:	88fa      	ldrh	r2, [r7, #6]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010bc2:	88fb      	ldrh	r3, [r7, #6]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f003 febd 	bl	8014948 <USBD_LL_Transmit>

  return USBD_OK;
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3710      	adds	r7, #16
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	4613      	mov	r3, r2
 8010be4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010be6:	88fb      	ldrh	r3, [r7, #6]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	2100      	movs	r1, #0
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f003 feab 	bl	8014948 <USBD_LL_Transmit>

  return USBD_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	4613      	mov	r3, r2
 8010c08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2203      	movs	r2, #3
 8010c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010c12:	88fa      	ldrh	r2, [r7, #6]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8010c1a:	88fa      	ldrh	r2, [r7, #6]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c22:	88fb      	ldrh	r3, [r7, #6]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	2100      	movs	r1, #0
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f003 fec7 	bl	80149bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c2e:	2300      	movs	r3, #0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	60f8      	str	r0, [r7, #12]
 8010c40:	60b9      	str	r1, [r7, #8]
 8010c42:	4613      	mov	r3, r2
 8010c44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010c46:	88fb      	ldrh	r3, [r7, #6]
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f003 feb5 	bl	80149bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2204      	movs	r2, #4
 8010c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2100      	movs	r1, #0
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f003 fe68 	bl	8014948 <USBD_LL_Transmit>

  return USBD_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2205      	movs	r2, #5
 8010c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c92:	2300      	movs	r3, #0
 8010c94:	2200      	movs	r2, #0
 8010c96:	2100      	movs	r1, #0
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f003 fe8f 	bl	80149bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c9e:	2300      	movs	r3, #0
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010ca8:	b480      	push	{r7}
 8010caa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010cac:	bf00      	nop
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
	...

08010cb8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cbe:	f3ef 8305 	mrs	r3, IPSR
 8010cc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8010cc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10f      	bne.n	8010cea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cca:	f3ef 8310 	mrs	r3, PRIMASK
 8010cce:	607b      	str	r3, [r7, #4]
  return(result);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d105      	bne.n	8010ce2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8010cda:	603b      	str	r3, [r7, #0]
  return(result);
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d007      	beq.n	8010cf2 <osKernelInitialize+0x3a>
 8010ce2:	4b0e      	ldr	r3, [pc, #56]	; (8010d1c <osKernelInitialize+0x64>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b02      	cmp	r3, #2
 8010ce8:	d103      	bne.n	8010cf2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010cea:	f06f 0305 	mvn.w	r3, #5
 8010cee:	60fb      	str	r3, [r7, #12]
 8010cf0:	e00c      	b.n	8010d0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010cf2:	4b0a      	ldr	r3, [pc, #40]	; (8010d1c <osKernelInitialize+0x64>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d105      	bne.n	8010d06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010cfa:	4b08      	ldr	r3, [pc, #32]	; (8010d1c <osKernelInitialize+0x64>)
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010d00:	2300      	movs	r3, #0
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	e002      	b.n	8010d0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	2000047c 	.word	0x2000047c

08010d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d26:	f3ef 8305 	mrs	r3, IPSR
 8010d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10f      	bne.n	8010d52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d32:	f3ef 8310 	mrs	r3, PRIMASK
 8010d36:	607b      	str	r3, [r7, #4]
  return(result);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d105      	bne.n	8010d4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8010d42:	603b      	str	r3, [r7, #0]
  return(result);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d007      	beq.n	8010d5a <osKernelStart+0x3a>
 8010d4a:	4b0f      	ldr	r3, [pc, #60]	; (8010d88 <osKernelStart+0x68>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d103      	bne.n	8010d5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8010d52:	f06f 0305 	mvn.w	r3, #5
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	e010      	b.n	8010d7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010d5a:	4b0b      	ldr	r3, [pc, #44]	; (8010d88 <osKernelStart+0x68>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d109      	bne.n	8010d76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010d62:	f7ff ffa1 	bl	8010ca8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010d66:	4b08      	ldr	r3, [pc, #32]	; (8010d88 <osKernelStart+0x68>)
 8010d68:	2202      	movs	r2, #2
 8010d6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010d6c:	f001 fb78 	bl	8012460 <vTaskStartScheduler>
      stat = osOK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	e002      	b.n	8010d7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	2000047c 	.word	0x2000047c

08010d8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b090      	sub	sp, #64	; 0x40
 8010d90:	af04      	add	r7, sp, #16
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d9c:	f3ef 8305 	mrs	r3, IPSR
 8010da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8010da2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f040 808f 	bne.w	8010ec8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010daa:	f3ef 8310 	mrs	r3, PRIMASK
 8010dae:	61bb      	str	r3, [r7, #24]
  return(result);
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d105      	bne.n	8010dc2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010db6:	f3ef 8311 	mrs	r3, BASEPRI
 8010dba:	617b      	str	r3, [r7, #20]
  return(result);
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d003      	beq.n	8010dca <osThreadNew+0x3e>
 8010dc2:	4b44      	ldr	r3, [pc, #272]	; (8010ed4 <osThreadNew+0x148>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d07e      	beq.n	8010ec8 <osThreadNew+0x13c>
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d07b      	beq.n	8010ec8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010dd0:	2380      	movs	r3, #128	; 0x80
 8010dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010dd4:	2318      	movs	r3, #24
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010de0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d045      	beq.n	8010e74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <osThreadNew+0x6a>
        name = attr->name;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	699b      	ldr	r3, [r3, #24]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d002      	beq.n	8010e04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	699b      	ldr	r3, [r3, #24]
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d008      	beq.n	8010e1c <osThreadNew+0x90>
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	2b38      	cmp	r3, #56	; 0x38
 8010e0e:	d805      	bhi.n	8010e1c <osThreadNew+0x90>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	f003 0301 	and.w	r3, r3, #1
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <osThreadNew+0x94>
        return (NULL);
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	e054      	b.n	8010eca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	695b      	ldr	r3, [r3, #20]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d003      	beq.n	8010e30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	089b      	lsrs	r3, r3, #2
 8010e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00e      	beq.n	8010e56 <osThreadNew+0xca>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	2b5b      	cmp	r3, #91	; 0x5b
 8010e3e:	d90a      	bls.n	8010e56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d006      	beq.n	8010e56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	695b      	ldr	r3, [r3, #20]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <osThreadNew+0xca>
        mem = 1;
 8010e50:	2301      	movs	r3, #1
 8010e52:	623b      	str	r3, [r7, #32]
 8010e54:	e010      	b.n	8010e78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10c      	bne.n	8010e78 <osThreadNew+0xec>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d108      	bne.n	8010e78 <osThreadNew+0xec>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d104      	bne.n	8010e78 <osThreadNew+0xec>
          mem = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	623b      	str	r3, [r7, #32]
 8010e72:	e001      	b.n	8010e78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d110      	bne.n	8010ea0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e86:	9202      	str	r2, [sp, #8]
 8010e88:	9301      	str	r3, [sp, #4]
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f001 f825 	bl	8011ee4 <xTaskCreateStatic>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	613b      	str	r3, [r7, #16]
 8010e9e:	e013      	b.n	8010ec8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010ea0:	6a3b      	ldr	r3, [r7, #32]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d110      	bne.n	8010ec8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	f107 0310 	add.w	r3, r7, #16
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f001 f86d 	bl	8011f98 <xTaskCreate>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d001      	beq.n	8010ec8 <osThreadNew+0x13c>
          hTask = NULL;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010ec8:	693b      	ldr	r3, [r7, #16]
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3730      	adds	r7, #48	; 0x30
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	2000047c 	.word	0x2000047c

08010ed8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b086      	sub	sp, #24
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ee0:	f3ef 8305 	mrs	r3, IPSR
 8010ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8010ee6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10f      	bne.n	8010f0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eec:	f3ef 8310 	mrs	r3, PRIMASK
 8010ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d105      	bne.n	8010f04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8010efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d007      	beq.n	8010f14 <osDelay+0x3c>
 8010f04:	4b0a      	ldr	r3, [pc, #40]	; (8010f30 <osDelay+0x58>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d103      	bne.n	8010f14 <osDelay+0x3c>
    stat = osErrorISR;
 8010f0c:	f06f 0305 	mvn.w	r3, #5
 8010f10:	617b      	str	r3, [r7, #20]
 8010f12:	e007      	b.n	8010f24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d002      	beq.n	8010f24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f001 fa6a 	bl	80123f8 <vTaskDelay>
    }
  }

  return (stat);
 8010f24:	697b      	ldr	r3, [r7, #20]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3718      	adds	r7, #24
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	2000047c 	.word	0x2000047c

08010f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	4a07      	ldr	r2, [pc, #28]	; (8010f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8010f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	4a06      	ldr	r2, [pc, #24]	; (8010f64 <vApplicationGetIdleTaskMemory+0x30>)
 8010f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2280      	movs	r2, #128	; 0x80
 8010f50:	601a      	str	r2, [r3, #0]
}
 8010f52:	bf00      	nop
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop
 8010f60:	20000480 	.word	0x20000480
 8010f64:	200004dc 	.word	0x200004dc

08010f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010f68:	b480      	push	{r7}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	4a07      	ldr	r2, [pc, #28]	; (8010f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8010f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	4a06      	ldr	r2, [pc, #24]	; (8010f98 <vApplicationGetTimerTaskMemory+0x30>)
 8010f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f86:	601a      	str	r2, [r3, #0]
}
 8010f88:	bf00      	nop
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr
 8010f94:	200006dc 	.word	0x200006dc
 8010f98:	20000738 	.word	0x20000738

08010f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f103 0208 	add.w	r2, r3, #8
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f103 0208 	add.w	r2, r3, #8
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f103 0208 	add.w	r2, r3, #8
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010fea:	bf00      	nop
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ff6:	b480      	push	{r7}
 8010ff8:	b085      	sub	sp, #20
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	689a      	ldr	r2, [r3, #8]
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	601a      	str	r2, [r3, #0]
}
 8011032:	bf00      	nop
 8011034:	3714      	adds	r7, #20
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801103e:	b480      	push	{r7}
 8011040:	b085      	sub	sp, #20
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011054:	d103      	bne.n	801105e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	60fb      	str	r3, [r7, #12]
 801105c:	e00c      	b.n	8011078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	3308      	adds	r3, #8
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	e002      	b.n	801106c <vListInsert+0x2e>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	60fb      	str	r3, [r7, #12]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	68ba      	ldr	r2, [r7, #8]
 8011074:	429a      	cmp	r2, r3
 8011076:	d2f6      	bcs.n	8011066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	683a      	ldr	r2, [r7, #0]
 8011086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	601a      	str	r2, [r3, #0]
}
 80110a4:	bf00      	nop
 80110a6:	3714      	adds	r7, #20
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	6892      	ldr	r2, [r2, #8]
 80110c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	6852      	ldr	r2, [r2, #4]
 80110d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d103      	bne.n	80110e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	689a      	ldr	r2, [r3, #8]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	1e5a      	subs	r2, r3, #1
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d109      	bne.n	801112c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111c:	f383 8811 	msr	BASEPRI, r3
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f3bf 8f4f 	dsb	sy
 8011128:	60bb      	str	r3, [r7, #8]
 801112a:	e7fe      	b.n	801112a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801112c:	f002 fc16 	bl	801395c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011138:	68f9      	ldr	r1, [r7, #12]
 801113a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801113c:	fb01 f303 	mul.w	r3, r1, r3
 8011140:	441a      	add	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801115c:	3b01      	subs	r3, #1
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011162:	fb01 f303 	mul.w	r3, r1, r3
 8011166:	441a      	add	r2, r3
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	22ff      	movs	r2, #255	; 0xff
 8011170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	22ff      	movs	r2, #255	; 0xff
 8011178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d114      	bne.n	80111ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d01a      	beq.n	80111c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	3310      	adds	r3, #16
 801118e:	4618      	mov	r0, r3
 8011190:	f001 fbe6 	bl	8012960 <xTaskRemoveFromEventList>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d012      	beq.n	80111c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801119a:	4b0d      	ldr	r3, [pc, #52]	; (80111d0 <xQueueGenericReset+0xcc>)
 801119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	e009      	b.n	80111c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	3310      	adds	r3, #16
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff fef3 	bl	8010f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	3324      	adds	r3, #36	; 0x24
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ff feee 	bl	8010f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80111c0:	f002 fbfa 	bl	80139b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80111c4:	2301      	movs	r3, #1
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08e      	sub	sp, #56	; 0x38
 80111d8:	af02      	add	r7, sp, #8
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d109      	bne.n	80111fc <xQueueGenericCreateStatic+0x28>
 80111e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ec:	f383 8811 	msr	BASEPRI, r3
 80111f0:	f3bf 8f6f 	isb	sy
 80111f4:	f3bf 8f4f 	dsb	sy
 80111f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80111fa:	e7fe      	b.n	80111fa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d109      	bne.n	8011216 <xQueueGenericCreateStatic+0x42>
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	627b      	str	r3, [r7, #36]	; 0x24
 8011214:	e7fe      	b.n	8011214 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d002      	beq.n	8011222 <xQueueGenericCreateStatic+0x4e>
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <xQueueGenericCreateStatic+0x52>
 8011222:	2301      	movs	r3, #1
 8011224:	e000      	b.n	8011228 <xQueueGenericCreateStatic+0x54>
 8011226:	2300      	movs	r3, #0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d109      	bne.n	8011240 <xQueueGenericCreateStatic+0x6c>
 801122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011230:	f383 8811 	msr	BASEPRI, r3
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	f3bf 8f4f 	dsb	sy
 801123c:	623b      	str	r3, [r7, #32]
 801123e:	e7fe      	b.n	801123e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d102      	bne.n	801124c <xQueueGenericCreateStatic+0x78>
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d101      	bne.n	8011250 <xQueueGenericCreateStatic+0x7c>
 801124c:	2301      	movs	r3, #1
 801124e:	e000      	b.n	8011252 <xQueueGenericCreateStatic+0x7e>
 8011250:	2300      	movs	r3, #0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d109      	bne.n	801126a <xQueueGenericCreateStatic+0x96>
 8011256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	61fb      	str	r3, [r7, #28]
 8011268:	e7fe      	b.n	8011268 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801126a:	2350      	movs	r3, #80	; 0x50
 801126c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	2b50      	cmp	r3, #80	; 0x50
 8011272:	d009      	beq.n	8011288 <xQueueGenericCreateStatic+0xb4>
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	61bb      	str	r3, [r7, #24]
 8011286:	e7fe      	b.n	8011286 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011288:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00d      	beq.n	80112b0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011296:	2201      	movs	r2, #1
 8011298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801129c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	4613      	mov	r3, r2
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f000 f844 	bl	8011338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3730      	adds	r7, #48	; 0x30
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b08a      	sub	sp, #40	; 0x28
 80112be:	af02      	add	r7, sp, #8
 80112c0:	60f8      	str	r0, [r7, #12]
 80112c2:	60b9      	str	r1, [r7, #8]
 80112c4:	4613      	mov	r3, r2
 80112c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d109      	bne.n	80112e2 <xQueueGenericCreate+0x28>
 80112ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d2:	f383 8811 	msr	BASEPRI, r3
 80112d6:	f3bf 8f6f 	isb	sy
 80112da:	f3bf 8f4f 	dsb	sy
 80112de:	613b      	str	r3, [r7, #16]
 80112e0:	e7fe      	b.n	80112e0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	61fb      	str	r3, [r7, #28]
 80112ec:	e004      	b.n	80112f8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	fb02 f303 	mul.w	r3, r2, r3
 80112f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	3350      	adds	r3, #80	; 0x50
 80112fc:	4618      	mov	r0, r3
 80112fe:	f002 fc47 	bl	8013b90 <pvPortMalloc>
 8011302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d011      	beq.n	801132e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	3350      	adds	r3, #80	; 0x50
 8011312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	2200      	movs	r2, #0
 8011318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801131c:	79fa      	ldrb	r2, [r7, #7]
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	9300      	str	r3, [sp, #0]
 8011322:	4613      	mov	r3, r2
 8011324:	697a      	ldr	r2, [r7, #20]
 8011326:	68b9      	ldr	r1, [r7, #8]
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f000 f805 	bl	8011338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801132e:	69bb      	ldr	r3, [r7, #24]
	}
 8011330:	4618      	mov	r0, r3
 8011332:	3720      	adds	r7, #32
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
 8011344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d103      	bne.n	8011354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	e002      	b.n	801135a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011366:	2101      	movs	r1, #1
 8011368:	69b8      	ldr	r0, [r7, #24]
 801136a:	f7ff fecb 	bl	8011104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801136e:	69bb      	ldr	r3, [r7, #24]
 8011370:	78fa      	ldrb	r2, [r7, #3]
 8011372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011376:	bf00      	nop
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801137e:	b580      	push	{r7, lr}
 8011380:	b082      	sub	sp, #8
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00e      	beq.n	80113aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801139e:	2300      	movs	r3, #0
 80113a0:	2200      	movs	r2, #0
 80113a2:	2100      	movs	r1, #0
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 f81d 	bl	80113e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b086      	sub	sp, #24
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	4603      	mov	r3, r0
 80113ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80113bc:	2301      	movs	r3, #1
 80113be:	617b      	str	r3, [r7, #20]
 80113c0:	2300      	movs	r3, #0
 80113c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	461a      	mov	r2, r3
 80113c8:	6939      	ldr	r1, [r7, #16]
 80113ca:	6978      	ldr	r0, [r7, #20]
 80113cc:	f7ff ff75 	bl	80112ba <xQueueGenericCreate>
 80113d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	f7ff ffd3 	bl	801137e <prvInitialiseMutex>

		return xNewQueue;
 80113d8:	68fb      	ldr	r3, [r7, #12]
	}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
	...

080113e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08e      	sub	sp, #56	; 0x38
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80113f2:	2300      	movs	r3, #0
 80113f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80113fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d109      	bne.n	8011414 <xQueueGenericSend+0x30>
 8011400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	62bb      	str	r3, [r7, #40]	; 0x28
 8011412:	e7fe      	b.n	8011412 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d103      	bne.n	8011422 <xQueueGenericSend+0x3e>
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <xQueueGenericSend+0x42>
 8011422:	2301      	movs	r3, #1
 8011424:	e000      	b.n	8011428 <xQueueGenericSend+0x44>
 8011426:	2300      	movs	r3, #0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d109      	bne.n	8011440 <xQueueGenericSend+0x5c>
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	627b      	str	r3, [r7, #36]	; 0x24
 801143e:	e7fe      	b.n	801143e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	2b02      	cmp	r3, #2
 8011444:	d103      	bne.n	801144e <xQueueGenericSend+0x6a>
 8011446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801144a:	2b01      	cmp	r3, #1
 801144c:	d101      	bne.n	8011452 <xQueueGenericSend+0x6e>
 801144e:	2301      	movs	r3, #1
 8011450:	e000      	b.n	8011454 <xQueueGenericSend+0x70>
 8011452:	2300      	movs	r3, #0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d109      	bne.n	801146c <xQueueGenericSend+0x88>
 8011458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145c:	f383 8811 	msr	BASEPRI, r3
 8011460:	f3bf 8f6f 	isb	sy
 8011464:	f3bf 8f4f 	dsb	sy
 8011468:	623b      	str	r3, [r7, #32]
 801146a:	e7fe      	b.n	801146a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801146c:	f001 fc2e 	bl	8012ccc <xTaskGetSchedulerState>
 8011470:	4603      	mov	r3, r0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d102      	bne.n	801147c <xQueueGenericSend+0x98>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d101      	bne.n	8011480 <xQueueGenericSend+0x9c>
 801147c:	2301      	movs	r3, #1
 801147e:	e000      	b.n	8011482 <xQueueGenericSend+0x9e>
 8011480:	2300      	movs	r3, #0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d109      	bne.n	801149a <xQueueGenericSend+0xb6>
 8011486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	61fb      	str	r3, [r7, #28]
 8011498:	e7fe      	b.n	8011498 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801149a:	f002 fa5f 	bl	801395c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d302      	bcc.n	80114b0 <xQueueGenericSend+0xcc>
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	2b02      	cmp	r3, #2
 80114ae:	d129      	bne.n	8011504 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80114b0:	683a      	ldr	r2, [r7, #0]
 80114b2:	68b9      	ldr	r1, [r7, #8]
 80114b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114b6:	f000 fba9 	bl	8011c0c <prvCopyDataToQueue>
 80114ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d010      	beq.n	80114e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c6:	3324      	adds	r3, #36	; 0x24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f001 fa49 	bl	8012960 <xTaskRemoveFromEventList>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d013      	beq.n	80114fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80114d4:	4b3f      	ldr	r3, [pc, #252]	; (80115d4 <xQueueGenericSend+0x1f0>)
 80114d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	e00a      	b.n	80114fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80114e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d007      	beq.n	80114fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80114ec:	4b39      	ldr	r3, [pc, #228]	; (80115d4 <xQueueGenericSend+0x1f0>)
 80114ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114f2:	601a      	str	r2, [r3, #0]
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80114fc:	f002 fa5c 	bl	80139b8 <vPortExitCritical>
				return pdPASS;
 8011500:	2301      	movs	r3, #1
 8011502:	e063      	b.n	80115cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d103      	bne.n	8011512 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801150a:	f002 fa55 	bl	80139b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801150e:	2300      	movs	r3, #0
 8011510:	e05c      	b.n	80115cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011514:	2b00      	cmp	r3, #0
 8011516:	d106      	bne.n	8011526 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011518:	f107 0314 	add.w	r3, r7, #20
 801151c:	4618      	mov	r0, r3
 801151e:	f001 fa81 	bl	8012a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011522:	2301      	movs	r3, #1
 8011524:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011526:	f002 fa47 	bl	80139b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801152a:	f000 fffd 	bl	8012528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801152e:	f002 fa15 	bl	801395c <vPortEnterCritical>
 8011532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011538:	b25b      	sxtb	r3, r3
 801153a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801153e:	d103      	bne.n	8011548 <xQueueGenericSend+0x164>
 8011540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011542:	2200      	movs	r2, #0
 8011544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801154e:	b25b      	sxtb	r3, r3
 8011550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011554:	d103      	bne.n	801155e <xQueueGenericSend+0x17a>
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	2200      	movs	r2, #0
 801155a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801155e:	f002 fa2b 	bl	80139b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011562:	1d3a      	adds	r2, r7, #4
 8011564:	f107 0314 	add.w	r3, r7, #20
 8011568:	4611      	mov	r1, r2
 801156a:	4618      	mov	r0, r3
 801156c:	f001 fa70 	bl	8012a50 <xTaskCheckForTimeOut>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d124      	bne.n	80115c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011578:	f000 fc40 	bl	8011dfc <prvIsQueueFull>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d018      	beq.n	80115b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011584:	3310      	adds	r3, #16
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	4611      	mov	r1, r2
 801158a:	4618      	mov	r0, r3
 801158c:	f001 f99a 	bl	80128c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011592:	f000 fbcb 	bl	8011d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011596:	f000 ffd5 	bl	8012544 <xTaskResumeAll>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	f47f af7c 	bne.w	801149a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80115a2:	4b0c      	ldr	r3, [pc, #48]	; (80115d4 <xQueueGenericSend+0x1f0>)
 80115a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	f3bf 8f4f 	dsb	sy
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	e772      	b.n	801149a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80115b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115b6:	f000 fbb9 	bl	8011d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115ba:	f000 ffc3 	bl	8012544 <xTaskResumeAll>
 80115be:	e76c      	b.n	801149a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80115c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115c2:	f000 fbb3 	bl	8011d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115c6:	f000 ffbd 	bl	8012544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80115ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3738      	adds	r7, #56	; 0x38
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	e000ed04 	.word	0xe000ed04

080115d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b08e      	sub	sp, #56	; 0x38
 80115dc:	af00      	add	r7, sp, #0
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	60b9      	str	r1, [r7, #8]
 80115e2:	607a      	str	r2, [r7, #4]
 80115e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80115ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d109      	bne.n	8011604 <xQueueGenericSendFromISR+0x2c>
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	627b      	str	r3, [r7, #36]	; 0x24
 8011602:	e7fe      	b.n	8011602 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d103      	bne.n	8011612 <xQueueGenericSendFromISR+0x3a>
 801160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801160e:	2b00      	cmp	r3, #0
 8011610:	d101      	bne.n	8011616 <xQueueGenericSendFromISR+0x3e>
 8011612:	2301      	movs	r3, #1
 8011614:	e000      	b.n	8011618 <xQueueGenericSendFromISR+0x40>
 8011616:	2300      	movs	r3, #0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <xQueueGenericSendFromISR+0x58>
 801161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011620:	f383 8811 	msr	BASEPRI, r3
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	623b      	str	r3, [r7, #32]
 801162e:	e7fe      	b.n	801162e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	2b02      	cmp	r3, #2
 8011634:	d103      	bne.n	801163e <xQueueGenericSendFromISR+0x66>
 8011636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801163a:	2b01      	cmp	r3, #1
 801163c:	d101      	bne.n	8011642 <xQueueGenericSendFromISR+0x6a>
 801163e:	2301      	movs	r3, #1
 8011640:	e000      	b.n	8011644 <xQueueGenericSendFromISR+0x6c>
 8011642:	2300      	movs	r3, #0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d109      	bne.n	801165c <xQueueGenericSendFromISR+0x84>
 8011648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	61fb      	str	r3, [r7, #28]
 801165a:	e7fe      	b.n	801165a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801165c:	f002 fa5a 	bl	8013b14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011660:	f3ef 8211 	mrs	r2, BASEPRI
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	61ba      	str	r2, [r7, #24]
 8011676:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011678:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801167a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011684:	429a      	cmp	r2, r3
 8011686:	d302      	bcc.n	801168e <xQueueGenericSendFromISR+0xb6>
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	2b02      	cmp	r3, #2
 801168c:	d12c      	bne.n	80116e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011698:	683a      	ldr	r2, [r7, #0]
 801169a:	68b9      	ldr	r1, [r7, #8]
 801169c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801169e:	f000 fab5 	bl	8011c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80116a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80116a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116aa:	d112      	bne.n	80116d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d016      	beq.n	80116e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b6:	3324      	adds	r3, #36	; 0x24
 80116b8:	4618      	mov	r0, r3
 80116ba:	f001 f951 	bl	8012960 <xTaskRemoveFromEventList>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00e      	beq.n	80116e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00b      	beq.n	80116e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	601a      	str	r2, [r3, #0]
 80116d0:	e007      	b.n	80116e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80116d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80116d6:	3301      	adds	r3, #1
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	b25a      	sxtb	r2, r3
 80116dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80116e2:	2301      	movs	r3, #1
 80116e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80116e6:	e001      	b.n	80116ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80116e8:	2300      	movs	r3, #0
 80116ea:	637b      	str	r3, [r7, #52]	; 0x34
 80116ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80116f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3738      	adds	r7, #56	; 0x38
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b08e      	sub	sp, #56	; 0x38
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	2b00      	cmp	r3, #0
 8011712:	d109      	bne.n	8011728 <xQueueGiveFromISR+0x28>
	__asm volatile
 8011714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011718:	f383 8811 	msr	BASEPRI, r3
 801171c:	f3bf 8f6f 	isb	sy
 8011720:	f3bf 8f4f 	dsb	sy
 8011724:	623b      	str	r3, [r7, #32]
 8011726:	e7fe      	b.n	8011726 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801172c:	2b00      	cmp	r3, #0
 801172e:	d009      	beq.n	8011744 <xQueueGiveFromISR+0x44>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	61fb      	str	r3, [r7, #28]
 8011742:	e7fe      	b.n	8011742 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <xQueueGiveFromISR+0x54>
 801174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d101      	bne.n	8011758 <xQueueGiveFromISR+0x58>
 8011754:	2301      	movs	r3, #1
 8011756:	e000      	b.n	801175a <xQueueGiveFromISR+0x5a>
 8011758:	2300      	movs	r3, #0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d109      	bne.n	8011772 <xQueueGiveFromISR+0x72>
 801175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	61bb      	str	r3, [r7, #24]
 8011770:	e7fe      	b.n	8011770 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011772:	f002 f9cf 	bl	8013b14 <vPortValidateInterruptPriority>
	__asm volatile
 8011776:	f3ef 8211 	mrs	r2, BASEPRI
 801177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177e:	f383 8811 	msr	BASEPRI, r3
 8011782:	f3bf 8f6f 	isb	sy
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	617a      	str	r2, [r7, #20]
 801178c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801178e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011796:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801179c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801179e:	429a      	cmp	r2, r3
 80117a0:	d22b      	bcs.n	80117fa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	1c5a      	adds	r2, r3, #1
 80117b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80117b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117bc:	d112      	bne.n	80117e4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d016      	beq.n	80117f4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c8:	3324      	adds	r3, #36	; 0x24
 80117ca:	4618      	mov	r0, r3
 80117cc:	f001 f8c8 	bl	8012960 <xTaskRemoveFromEventList>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00e      	beq.n	80117f4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00b      	beq.n	80117f4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2201      	movs	r2, #1
 80117e0:	601a      	str	r2, [r3, #0]
 80117e2:	e007      	b.n	80117f4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80117e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117e8:	3301      	adds	r3, #1
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	b25a      	sxtb	r2, r3
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80117f4:	2301      	movs	r3, #1
 80117f6:	637b      	str	r3, [r7, #52]	; 0x34
 80117f8:	e001      	b.n	80117fe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	637b      	str	r3, [r7, #52]	; 0x34
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801180a:	4618      	mov	r0, r3
 801180c:	3738      	adds	r7, #56	; 0x38
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
	...

08011814 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08c      	sub	sp, #48	; 0x30
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011820:	2300      	movs	r3, #0
 8011822:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	2b00      	cmp	r3, #0
 801182c:	d109      	bne.n	8011842 <xQueueReceive+0x2e>
	__asm volatile
 801182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	623b      	str	r3, [r7, #32]
 8011840:	e7fe      	b.n	8011840 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d103      	bne.n	8011850 <xQueueReceive+0x3c>
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801184c:	2b00      	cmp	r3, #0
 801184e:	d101      	bne.n	8011854 <xQueueReceive+0x40>
 8011850:	2301      	movs	r3, #1
 8011852:	e000      	b.n	8011856 <xQueueReceive+0x42>
 8011854:	2300      	movs	r3, #0
 8011856:	2b00      	cmp	r3, #0
 8011858:	d109      	bne.n	801186e <xQueueReceive+0x5a>
 801185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801185e:	f383 8811 	msr	BASEPRI, r3
 8011862:	f3bf 8f6f 	isb	sy
 8011866:	f3bf 8f4f 	dsb	sy
 801186a:	61fb      	str	r3, [r7, #28]
 801186c:	e7fe      	b.n	801186c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801186e:	f001 fa2d 	bl	8012ccc <xTaskGetSchedulerState>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d102      	bne.n	801187e <xQueueReceive+0x6a>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d101      	bne.n	8011882 <xQueueReceive+0x6e>
 801187e:	2301      	movs	r3, #1
 8011880:	e000      	b.n	8011884 <xQueueReceive+0x70>
 8011882:	2300      	movs	r3, #0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d109      	bne.n	801189c <xQueueReceive+0x88>
 8011888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188c:	f383 8811 	msr	BASEPRI, r3
 8011890:	f3bf 8f6f 	isb	sy
 8011894:	f3bf 8f4f 	dsb	sy
 8011898:	61bb      	str	r3, [r7, #24]
 801189a:	e7fe      	b.n	801189a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801189c:	f002 f85e 	bl	801395c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d01f      	beq.n	80118ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80118ac:	68b9      	ldr	r1, [r7, #8]
 80118ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118b0:	f000 fa16 	bl	8011ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80118b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b6:	1e5a      	subs	r2, r3, #1
 80118b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118be:	691b      	ldr	r3, [r3, #16]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00f      	beq.n	80118e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c6:	3310      	adds	r3, #16
 80118c8:	4618      	mov	r0, r3
 80118ca:	f001 f849 	bl	8012960 <xTaskRemoveFromEventList>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d007      	beq.n	80118e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80118d4:	4b3c      	ldr	r3, [pc, #240]	; (80119c8 <xQueueReceive+0x1b4>)
 80118d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80118e4:	f002 f868 	bl	80139b8 <vPortExitCritical>
				return pdPASS;
 80118e8:	2301      	movs	r3, #1
 80118ea:	e069      	b.n	80119c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d103      	bne.n	80118fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80118f2:	f002 f861 	bl	80139b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80118f6:	2300      	movs	r3, #0
 80118f8:	e062      	b.n	80119c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d106      	bne.n	801190e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011900:	f107 0310 	add.w	r3, r7, #16
 8011904:	4618      	mov	r0, r3
 8011906:	f001 f88d 	bl	8012a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801190a:	2301      	movs	r3, #1
 801190c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801190e:	f002 f853 	bl	80139b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011912:	f000 fe09 	bl	8012528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011916:	f002 f821 	bl	801395c <vPortEnterCritical>
 801191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011920:	b25b      	sxtb	r3, r3
 8011922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011926:	d103      	bne.n	8011930 <xQueueReceive+0x11c>
 8011928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192a:	2200      	movs	r2, #0
 801192c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011936:	b25b      	sxtb	r3, r3
 8011938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801193c:	d103      	bne.n	8011946 <xQueueReceive+0x132>
 801193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011940:	2200      	movs	r2, #0
 8011942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011946:	f002 f837 	bl	80139b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801194a:	1d3a      	adds	r2, r7, #4
 801194c:	f107 0310 	add.w	r3, r7, #16
 8011950:	4611      	mov	r1, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f001 f87c 	bl	8012a50 <xTaskCheckForTimeOut>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d123      	bne.n	80119a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801195e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011960:	f000 fa36 	bl	8011dd0 <prvIsQueueEmpty>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d017      	beq.n	801199a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196c:	3324      	adds	r3, #36	; 0x24
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	4611      	mov	r1, r2
 8011972:	4618      	mov	r0, r3
 8011974:	f000 ffa6 	bl	80128c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801197a:	f000 f9d7 	bl	8011d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801197e:	f000 fde1 	bl	8012544 <xTaskResumeAll>
 8011982:	4603      	mov	r3, r0
 8011984:	2b00      	cmp	r3, #0
 8011986:	d189      	bne.n	801189c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011988:	4b0f      	ldr	r3, [pc, #60]	; (80119c8 <xQueueReceive+0x1b4>)
 801198a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801198e:	601a      	str	r2, [r3, #0]
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	e780      	b.n	801189c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801199a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801199c:	f000 f9c6 	bl	8011d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119a0:	f000 fdd0 	bl	8012544 <xTaskResumeAll>
 80119a4:	e77a      	b.n	801189c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80119a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119a8:	f000 f9c0 	bl	8011d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80119ac:	f000 fdca 	bl	8012544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119b2:	f000 fa0d 	bl	8011dd0 <prvIsQueueEmpty>
 80119b6:	4603      	mov	r3, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f43f af6f 	beq.w	801189c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80119be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3730      	adds	r7, #48	; 0x30
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	e000ed04 	.word	0xe000ed04

080119cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b08e      	sub	sp, #56	; 0x38
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80119d6:	2300      	movs	r3, #0
 80119d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80119de:	2300      	movs	r3, #0
 80119e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d109      	bne.n	80119fc <xQueueSemaphoreTake+0x30>
 80119e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ec:	f383 8811 	msr	BASEPRI, r3
 80119f0:	f3bf 8f6f 	isb	sy
 80119f4:	f3bf 8f4f 	dsb	sy
 80119f8:	623b      	str	r3, [r7, #32]
 80119fa:	e7fe      	b.n	80119fa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d009      	beq.n	8011a18 <xQueueSemaphoreTake+0x4c>
 8011a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	61fb      	str	r3, [r7, #28]
 8011a16:	e7fe      	b.n	8011a16 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a18:	f001 f958 	bl	8012ccc <xTaskGetSchedulerState>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <xQueueSemaphoreTake+0x5c>
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <xQueueSemaphoreTake+0x60>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e000      	b.n	8011a2e <xQueueSemaphoreTake+0x62>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d109      	bne.n	8011a46 <xQueueSemaphoreTake+0x7a>
 8011a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a36:	f383 8811 	msr	BASEPRI, r3
 8011a3a:	f3bf 8f6f 	isb	sy
 8011a3e:	f3bf 8f4f 	dsb	sy
 8011a42:	61bb      	str	r3, [r7, #24]
 8011a44:	e7fe      	b.n	8011a44 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a46:	f001 ff89 	bl	801395c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a4e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d024      	beq.n	8011aa0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a58:	1e5a      	subs	r2, r3, #1
 8011a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d104      	bne.n	8011a70 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011a66:	f001 faa3 	bl	8012fb0 <pvTaskIncrementMutexHeldCount>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a72:	691b      	ldr	r3, [r3, #16]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00f      	beq.n	8011a98 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7a:	3310      	adds	r3, #16
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f000 ff6f 	bl	8012960 <xTaskRemoveFromEventList>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d007      	beq.n	8011a98 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a88:	4b53      	ldr	r3, [pc, #332]	; (8011bd8 <xQueueSemaphoreTake+0x20c>)
 8011a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a8e:	601a      	str	r2, [r3, #0]
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a98:	f001 ff8e 	bl	80139b8 <vPortExitCritical>
				return pdPASS;
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e096      	b.n	8011bce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d110      	bne.n	8011ac8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <xQueueSemaphoreTake+0xf4>
 8011aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab0:	f383 8811 	msr	BASEPRI, r3
 8011ab4:	f3bf 8f6f 	isb	sy
 8011ab8:	f3bf 8f4f 	dsb	sy
 8011abc:	617b      	str	r3, [r7, #20]
 8011abe:	e7fe      	b.n	8011abe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011ac0:	f001 ff7a 	bl	80139b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	e082      	b.n	8011bce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d106      	bne.n	8011adc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f000 ffa6 	bl	8012a24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011adc:	f001 ff6c 	bl	80139b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ae0:	f000 fd22 	bl	8012528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ae4:	f001 ff3a 	bl	801395c <vPortEnterCritical>
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aee:	b25b      	sxtb	r3, r3
 8011af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011af4:	d103      	bne.n	8011afe <xQueueSemaphoreTake+0x132>
 8011af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b04:	b25b      	sxtb	r3, r3
 8011b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b0a:	d103      	bne.n	8011b14 <xQueueSemaphoreTake+0x148>
 8011b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b14:	f001 ff50 	bl	80139b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b18:	463a      	mov	r2, r7
 8011b1a:	f107 030c 	add.w	r3, r7, #12
 8011b1e:	4611      	mov	r1, r2
 8011b20:	4618      	mov	r0, r3
 8011b22:	f000 ff95 	bl	8012a50 <xTaskCheckForTimeOut>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d132      	bne.n	8011b92 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b2e:	f000 f94f 	bl	8011dd0 <prvIsQueueEmpty>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d026      	beq.n	8011b86 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d109      	bne.n	8011b54 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011b40:	f001 ff0c 	bl	801395c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f001 f8dd 	bl	8012d08 <xTaskPriorityInherit>
 8011b4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011b50:	f001 ff32 	bl	80139b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b56:	3324      	adds	r3, #36	; 0x24
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	4611      	mov	r1, r2
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f000 feb1 	bl	80128c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b64:	f000 f8e2 	bl	8011d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b68:	f000 fcec 	bl	8012544 <xTaskResumeAll>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f47f af69 	bne.w	8011a46 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011b74:	4b18      	ldr	r3, [pc, #96]	; (8011bd8 <xQueueSemaphoreTake+0x20c>)
 8011b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b7a:	601a      	str	r2, [r3, #0]
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	f3bf 8f6f 	isb	sy
 8011b84:	e75f      	b.n	8011a46 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b88:	f000 f8d0 	bl	8011d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b8c:	f000 fcda 	bl	8012544 <xTaskResumeAll>
 8011b90:	e759      	b.n	8011a46 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b94:	f000 f8ca 	bl	8011d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b98:	f000 fcd4 	bl	8012544 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b9e:	f000 f917 	bl	8011dd0 <prvIsQueueEmpty>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f43f af4e 	beq.w	8011a46 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00d      	beq.n	8011bcc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011bb0:	f001 fed4 	bl	801395c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bb6:	f000 f811 	bl	8011bdc <prvGetDisinheritPriorityAfterTimeout>
 8011bba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	689b      	ldr	r3, [r3, #8]
 8011bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f001 f974 	bl	8012eb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011bc8:	f001 fef6 	bl	80139b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3738      	adds	r7, #56	; 0x38
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	e000ed04 	.word	0xe000ed04

08011bdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d006      	beq.n	8011bfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	e001      	b.n	8011bfe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3714      	adds	r7, #20
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr

08011c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d10d      	bne.n	8011c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d14d      	bne.n	8011cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f001 f8ce 	bl	8012dd8 <xTaskPriorityDisinherit>
 8011c3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2200      	movs	r2, #0
 8011c42:	609a      	str	r2, [r3, #8]
 8011c44:	e043      	b.n	8011cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d119      	bne.n	8011c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6858      	ldr	r0, [r3, #4]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c54:	461a      	mov	r2, r3
 8011c56:	68b9      	ldr	r1, [r7, #8]
 8011c58:	f002 ffc8 	bl	8014bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	685a      	ldr	r2, [r3, #4]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c64:	441a      	add	r2, r3
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685a      	ldr	r2, [r3, #4]
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d32b      	bcc.n	8011cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	605a      	str	r2, [r3, #4]
 8011c7e:	e026      	b.n	8011cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	68d8      	ldr	r0, [r3, #12]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c88:	461a      	mov	r2, r3
 8011c8a:	68b9      	ldr	r1, [r7, #8]
 8011c8c:	f002 ffae 	bl	8014bec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	68da      	ldr	r2, [r3, #12]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c98:	425b      	negs	r3, r3
 8011c9a:	441a      	add	r2, r3
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	68da      	ldr	r2, [r3, #12]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d207      	bcs.n	8011cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	689a      	ldr	r2, [r3, #8]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb4:	425b      	negs	r3, r3
 8011cb6:	441a      	add	r2, r3
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b02      	cmp	r3, #2
 8011cc0:	d105      	bne.n	8011cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	1c5a      	adds	r2, r3, #1
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011cd6:	697b      	ldr	r3, [r7, #20]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3718      	adds	r7, #24
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d018      	beq.n	8011d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	68da      	ldr	r2, [r3, #12]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	441a      	add	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	68da      	ldr	r2, [r3, #12]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	689b      	ldr	r3, [r3, #8]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d303      	bcc.n	8011d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	68d9      	ldr	r1, [r3, #12]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	6838      	ldr	r0, [r7, #0]
 8011d20:	f002 ff64 	bl	8014bec <memcpy>
	}
}
 8011d24:	bf00      	nop
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011d34:	f001 fe12 	bl	801395c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d40:	e011      	b.n	8011d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d012      	beq.n	8011d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	3324      	adds	r3, #36	; 0x24
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 fe06 	bl	8012960 <xTaskRemoveFromEventList>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011d5a:	f000 fed9 	bl	8012b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011d5e:	7bfb      	ldrb	r3, [r7, #15]
 8011d60:	3b01      	subs	r3, #1
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	dce9      	bgt.n	8011d42 <prvUnlockQueue+0x16>
 8011d6e:	e000      	b.n	8011d72 <prvUnlockQueue+0x46>
					break;
 8011d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	22ff      	movs	r2, #255	; 0xff
 8011d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011d7a:	f001 fe1d 	bl	80139b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011d7e:	f001 fded 	bl	801395c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d8a:	e011      	b.n	8011db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	691b      	ldr	r3, [r3, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d012      	beq.n	8011dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	3310      	adds	r3, #16
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 fde1 	bl	8012960 <xTaskRemoveFromEventList>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d001      	beq.n	8011da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011da4:	f000 feb4 	bl	8012b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011da8:	7bbb      	ldrb	r3, [r7, #14]
 8011daa:	3b01      	subs	r3, #1
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	dce9      	bgt.n	8011d8c <prvUnlockQueue+0x60>
 8011db8:	e000      	b.n	8011dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	22ff      	movs	r2, #255	; 0xff
 8011dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011dc4:	f001 fdf8 	bl	80139b8 <vPortExitCritical>
}
 8011dc8:	bf00      	nop
 8011dca:	3710      	adds	r7, #16
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011dd8:	f001 fdc0 	bl	801395c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011de4:	2301      	movs	r3, #1
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e001      	b.n	8011dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011dee:	f001 fde3 	bl	80139b8 <vPortExitCritical>

	return xReturn;
 8011df2:	68fb      	ldr	r3, [r7, #12]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e04:	f001 fdaa 	bl	801395c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d102      	bne.n	8011e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011e14:	2301      	movs	r3, #1
 8011e16:	60fb      	str	r3, [r7, #12]
 8011e18:	e001      	b.n	8011e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e1e:	f001 fdcb 	bl	80139b8 <vPortExitCritical>

	return xReturn;
 8011e22:	68fb      	ldr	r3, [r7, #12]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e36:	2300      	movs	r3, #0
 8011e38:	60fb      	str	r3, [r7, #12]
 8011e3a:	e014      	b.n	8011e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011e3c:	4a0e      	ldr	r2, [pc, #56]	; (8011e78 <vQueueAddToRegistry+0x4c>)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d10b      	bne.n	8011e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011e48:	490b      	ldr	r1, [pc, #44]	; (8011e78 <vQueueAddToRegistry+0x4c>)
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011e52:	4a09      	ldr	r2, [pc, #36]	; (8011e78 <vQueueAddToRegistry+0x4c>)
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	4413      	add	r3, r2
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011e5e:	e005      	b.n	8011e6c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	3301      	adds	r3, #1
 8011e64:	60fb      	str	r3, [r7, #12]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2b07      	cmp	r3, #7
 8011e6a:	d9e7      	bls.n	8011e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e6c:	bf00      	nop
 8011e6e:	3714      	adds	r7, #20
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	2000ec40 	.word	0x2000ec40

08011e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e8c:	f001 fd66 	bl	801395c <vPortEnterCritical>
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e96:	b25b      	sxtb	r3, r3
 8011e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e9c:	d103      	bne.n	8011ea6 <vQueueWaitForMessageRestricted+0x2a>
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eac:	b25b      	sxtb	r3, r3
 8011eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011eb2:	d103      	bne.n	8011ebc <vQueueWaitForMessageRestricted+0x40>
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ebc:	f001 fd7c 	bl	80139b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d106      	bne.n	8011ed6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	3324      	adds	r3, #36	; 0x24
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	68b9      	ldr	r1, [r7, #8]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 fd1b 	bl	801290c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ed6:	6978      	ldr	r0, [r7, #20]
 8011ed8:	f7ff ff28 	bl	8011d2c <prvUnlockQueue>
	}
 8011edc:	bf00      	nop
 8011ede:	3718      	adds	r7, #24
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b08e      	sub	sp, #56	; 0x38
 8011ee8:	af04      	add	r7, sp, #16
 8011eea:	60f8      	str	r0, [r7, #12]
 8011eec:	60b9      	str	r1, [r7, #8]
 8011eee:	607a      	str	r2, [r7, #4]
 8011ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d109      	bne.n	8011f0c <xTaskCreateStatic+0x28>
 8011ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efc:	f383 8811 	msr	BASEPRI, r3
 8011f00:	f3bf 8f6f 	isb	sy
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	623b      	str	r3, [r7, #32]
 8011f0a:	e7fe      	b.n	8011f0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d109      	bne.n	8011f26 <xTaskCreateStatic+0x42>
 8011f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f16:	f383 8811 	msr	BASEPRI, r3
 8011f1a:	f3bf 8f6f 	isb	sy
 8011f1e:	f3bf 8f4f 	dsb	sy
 8011f22:	61fb      	str	r3, [r7, #28]
 8011f24:	e7fe      	b.n	8011f24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011f26:	235c      	movs	r3, #92	; 0x5c
 8011f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	2b5c      	cmp	r3, #92	; 0x5c
 8011f2e:	d009      	beq.n	8011f44 <xTaskCreateStatic+0x60>
 8011f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f34:	f383 8811 	msr	BASEPRI, r3
 8011f38:	f3bf 8f6f 	isb	sy
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	61bb      	str	r3, [r7, #24]
 8011f42:	e7fe      	b.n	8011f42 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011f44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d01e      	beq.n	8011f8a <xTaskCreateStatic+0xa6>
 8011f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d01b      	beq.n	8011f8a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	2202      	movs	r2, #2
 8011f60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011f64:	2300      	movs	r3, #0
 8011f66:	9303      	str	r3, [sp, #12]
 8011f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6a:	9302      	str	r3, [sp, #8]
 8011f6c:	f107 0314 	add.w	r3, r7, #20
 8011f70:	9301      	str	r3, [sp, #4]
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	68b9      	ldr	r1, [r7, #8]
 8011f7c:	68f8      	ldr	r0, [r7, #12]
 8011f7e:	f000 f850 	bl	8012022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f84:	f000 f8dc 	bl	8012140 <prvAddNewTaskToReadyList>
 8011f88:	e001      	b.n	8011f8e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f8e:	697b      	ldr	r3, [r7, #20]
	}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3728      	adds	r7, #40	; 0x28
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b08c      	sub	sp, #48	; 0x30
 8011f9c:	af04      	add	r7, sp, #16
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011fa8:	88fb      	ldrh	r3, [r7, #6]
 8011faa:	009b      	lsls	r3, r3, #2
 8011fac:	4618      	mov	r0, r3
 8011fae:	f001 fdef 	bl	8013b90 <pvPortMalloc>
 8011fb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00e      	beq.n	8011fd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011fba:	205c      	movs	r0, #92	; 0x5c
 8011fbc:	f001 fde8 	bl	8013b90 <pvPortMalloc>
 8011fc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d003      	beq.n	8011fd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	697a      	ldr	r2, [r7, #20]
 8011fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8011fce:	e005      	b.n	8011fdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011fd0:	6978      	ldr	r0, [r7, #20]
 8011fd2:	f001 fe9f 	bl	8013d14 <vPortFree>
 8011fd6:	e001      	b.n	8011fdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d017      	beq.n	8012012 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011fea:	88fa      	ldrh	r2, [r7, #6]
 8011fec:	2300      	movs	r3, #0
 8011fee:	9303      	str	r3, [sp, #12]
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	9302      	str	r3, [sp, #8]
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	9301      	str	r3, [sp, #4]
 8011ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	68b9      	ldr	r1, [r7, #8]
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	f000 f80e 	bl	8012022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012006:	69f8      	ldr	r0, [r7, #28]
 8012008:	f000 f89a 	bl	8012140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801200c:	2301      	movs	r3, #1
 801200e:	61bb      	str	r3, [r7, #24]
 8012010:	e002      	b.n	8012018 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012018:	69bb      	ldr	r3, [r7, #24]
	}
 801201a:	4618      	mov	r0, r3
 801201c:	3720      	adds	r7, #32
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b088      	sub	sp, #32
 8012026:	af00      	add	r7, sp, #0
 8012028:	60f8      	str	r0, [r7, #12]
 801202a:	60b9      	str	r1, [r7, #8]
 801202c:	607a      	str	r2, [r7, #4]
 801202e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012032:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	461a      	mov	r2, r3
 801203a:	21a5      	movs	r1, #165	; 0xa5
 801203c:	f002 fde1 	bl	8014c02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801204a:	3b01      	subs	r3, #1
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	4413      	add	r3, r2
 8012050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	f023 0307 	bic.w	r3, r3, #7
 8012058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	f003 0307 	and.w	r3, r3, #7
 8012060:	2b00      	cmp	r3, #0
 8012062:	d009      	beq.n	8012078 <prvInitialiseNewTask+0x56>
 8012064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	617b      	str	r3, [r7, #20]
 8012076:	e7fe      	b.n	8012076 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d01f      	beq.n	80120be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801207e:	2300      	movs	r3, #0
 8012080:	61fb      	str	r3, [r7, #28]
 8012082:	e012      	b.n	80120aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012084:	68ba      	ldr	r2, [r7, #8]
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	4413      	add	r3, r2
 801208a:	7819      	ldrb	r1, [r3, #0]
 801208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	4413      	add	r3, r2
 8012092:	3334      	adds	r3, #52	; 0x34
 8012094:	460a      	mov	r2, r1
 8012096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	4413      	add	r3, r2
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	3301      	adds	r3, #1
 80120a8:	61fb      	str	r3, [r7, #28]
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	2b0f      	cmp	r3, #15
 80120ae:	d9e9      	bls.n	8012084 <prvInitialiseNewTask+0x62>
 80120b0:	e000      	b.n	80120b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80120b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80120b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b6:	2200      	movs	r2, #0
 80120b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80120bc:	e003      	b.n	80120c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80120be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c0:	2200      	movs	r2, #0
 80120c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80120c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c8:	2b37      	cmp	r3, #55	; 0x37
 80120ca:	d901      	bls.n	80120d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80120cc:	2337      	movs	r3, #55	; 0x37
 80120ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80120d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80120dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120de:	2200      	movs	r2, #0
 80120e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	3304      	adds	r3, #4
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fe ff78 	bl	8010fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80120ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ee:	3318      	adds	r3, #24
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7fe ff73 	bl	8010fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801210a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210e:	2200      	movs	r2, #0
 8012110:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	2200      	movs	r2, #0
 8012116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	68f9      	ldr	r1, [r7, #12]
 801211e:	69b8      	ldr	r0, [r7, #24]
 8012120:	f001 faf4 	bl	801370c <pxPortInitialiseStack>
 8012124:	4602      	mov	r2, r0
 8012126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012136:	bf00      	nop
 8012138:	3720      	adds	r7, #32
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012148:	f001 fc08 	bl	801395c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801214c:	4b2d      	ldr	r3, [pc, #180]	; (8012204 <prvAddNewTaskToReadyList+0xc4>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3301      	adds	r3, #1
 8012152:	4a2c      	ldr	r2, [pc, #176]	; (8012204 <prvAddNewTaskToReadyList+0xc4>)
 8012154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012156:	4b2c      	ldr	r3, [pc, #176]	; (8012208 <prvAddNewTaskToReadyList+0xc8>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d109      	bne.n	8012172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801215e:	4a2a      	ldr	r2, [pc, #168]	; (8012208 <prvAddNewTaskToReadyList+0xc8>)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012164:	4b27      	ldr	r3, [pc, #156]	; (8012204 <prvAddNewTaskToReadyList+0xc4>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d110      	bne.n	801218e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801216c:	f000 fcf4 	bl	8012b58 <prvInitialiseTaskLists>
 8012170:	e00d      	b.n	801218e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012172:	4b26      	ldr	r3, [pc, #152]	; (801220c <prvAddNewTaskToReadyList+0xcc>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d109      	bne.n	801218e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801217a:	4b23      	ldr	r3, [pc, #140]	; (8012208 <prvAddNewTaskToReadyList+0xc8>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012184:	429a      	cmp	r2, r3
 8012186:	d802      	bhi.n	801218e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012188:	4a1f      	ldr	r2, [pc, #124]	; (8012208 <prvAddNewTaskToReadyList+0xc8>)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801218e:	4b20      	ldr	r3, [pc, #128]	; (8012210 <prvAddNewTaskToReadyList+0xd0>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	4a1e      	ldr	r2, [pc, #120]	; (8012210 <prvAddNewTaskToReadyList+0xd0>)
 8012196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012198:	4b1d      	ldr	r3, [pc, #116]	; (8012210 <prvAddNewTaskToReadyList+0xd0>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a4:	4b1b      	ldr	r3, [pc, #108]	; (8012214 <prvAddNewTaskToReadyList+0xd4>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d903      	bls.n	80121b4 <prvAddNewTaskToReadyList+0x74>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b0:	4a18      	ldr	r2, [pc, #96]	; (8012214 <prvAddNewTaskToReadyList+0xd4>)
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b8:	4613      	mov	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4413      	add	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4a15      	ldr	r2, [pc, #84]	; (8012218 <prvAddNewTaskToReadyList+0xd8>)
 80121c2:	441a      	add	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	3304      	adds	r3, #4
 80121c8:	4619      	mov	r1, r3
 80121ca:	4610      	mov	r0, r2
 80121cc:	f7fe ff13 	bl	8010ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80121d0:	f001 fbf2 	bl	80139b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80121d4:	4b0d      	ldr	r3, [pc, #52]	; (801220c <prvAddNewTaskToReadyList+0xcc>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00e      	beq.n	80121fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80121dc:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <prvAddNewTaskToReadyList+0xc8>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d207      	bcs.n	80121fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80121ea:	4b0c      	ldr	r3, [pc, #48]	; (801221c <prvAddNewTaskToReadyList+0xdc>)
 80121ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f0:	601a      	str	r2, [r3, #0]
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80121fa:	bf00      	nop
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	2000100c 	.word	0x2000100c
 8012208:	20000b38 	.word	0x20000b38
 801220c:	20001018 	.word	0x20001018
 8012210:	20001028 	.word	0x20001028
 8012214:	20001014 	.word	0x20001014
 8012218:	20000b3c 	.word	0x20000b3c
 801221c:	e000ed04 	.word	0xe000ed04

08012220 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012228:	f001 fb98 	bl	801395c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d102      	bne.n	8012238 <vTaskDelete+0x18>
 8012232:	4b2c      	ldr	r3, [pc, #176]	; (80122e4 <vTaskDelete+0xc4>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	e000      	b.n	801223a <vTaskDelete+0x1a>
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	3304      	adds	r3, #4
 8012240:	4618      	mov	r0, r3
 8012242:	f7fe ff35 	bl	80110b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801224a:	2b00      	cmp	r3, #0
 801224c:	d004      	beq.n	8012258 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3318      	adds	r3, #24
 8012252:	4618      	mov	r0, r3
 8012254:	f7fe ff2c 	bl	80110b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8012258:	4b23      	ldr	r3, [pc, #140]	; (80122e8 <vTaskDelete+0xc8>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	3301      	adds	r3, #1
 801225e:	4a22      	ldr	r2, [pc, #136]	; (80122e8 <vTaskDelete+0xc8>)
 8012260:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8012262:	4b20      	ldr	r3, [pc, #128]	; (80122e4 <vTaskDelete+0xc4>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	429a      	cmp	r2, r3
 801226a:	d10b      	bne.n	8012284 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	3304      	adds	r3, #4
 8012270:	4619      	mov	r1, r3
 8012272:	481e      	ldr	r0, [pc, #120]	; (80122ec <vTaskDelete+0xcc>)
 8012274:	f7fe febf 	bl	8010ff6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012278:	4b1d      	ldr	r3, [pc, #116]	; (80122f0 <vTaskDelete+0xd0>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	3301      	adds	r3, #1
 801227e:	4a1c      	ldr	r2, [pc, #112]	; (80122f0 <vTaskDelete+0xd0>)
 8012280:	6013      	str	r3, [r2, #0]
 8012282:	e009      	b.n	8012298 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8012284:	4b1b      	ldr	r3, [pc, #108]	; (80122f4 <vTaskDelete+0xd4>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	3b01      	subs	r3, #1
 801228a:	4a1a      	ldr	r2, [pc, #104]	; (80122f4 <vTaskDelete+0xd4>)
 801228c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f000 fcce 	bl	8012c30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8012294:	f000 fcfa 	bl	8012c8c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8012298:	f001 fb8e 	bl	80139b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801229c:	4b16      	ldr	r3, [pc, #88]	; (80122f8 <vTaskDelete+0xd8>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d01a      	beq.n	80122da <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80122a4:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <vTaskDelete+0xc4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	68fa      	ldr	r2, [r7, #12]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d115      	bne.n	80122da <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80122ae:	4b13      	ldr	r3, [pc, #76]	; (80122fc <vTaskDelete+0xdc>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d009      	beq.n	80122ca <vTaskDelete+0xaa>
 80122b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ba:	f383 8811 	msr	BASEPRI, r3
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	f3bf 8f4f 	dsb	sy
 80122c6:	60bb      	str	r3, [r7, #8]
 80122c8:	e7fe      	b.n	80122c8 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80122ca:	4b0d      	ldr	r3, [pc, #52]	; (8012300 <vTaskDelete+0xe0>)
 80122cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80122da:	bf00      	nop
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	20000b38 	.word	0x20000b38
 80122e8:	20001028 	.word	0x20001028
 80122ec:	20000fe0 	.word	0x20000fe0
 80122f0:	20000ff4 	.word	0x20000ff4
 80122f4:	2000100c 	.word	0x2000100c
 80122f8:	20001018 	.word	0x20001018
 80122fc:	20001034 	.word	0x20001034
 8012300:	e000ed04 	.word	0xe000ed04

08012304 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012304:	b580      	push	{r7, lr}
 8012306:	b08a      	sub	sp, #40	; 0x28
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801230e:	2300      	movs	r3, #0
 8012310:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d109      	bne.n	801232c <vTaskDelayUntil+0x28>
 8012318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801231c:	f383 8811 	msr	BASEPRI, r3
 8012320:	f3bf 8f6f 	isb	sy
 8012324:	f3bf 8f4f 	dsb	sy
 8012328:	617b      	str	r3, [r7, #20]
 801232a:	e7fe      	b.n	801232a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d109      	bne.n	8012346 <vTaskDelayUntil+0x42>
 8012332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	613b      	str	r3, [r7, #16]
 8012344:	e7fe      	b.n	8012344 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8012346:	4b29      	ldr	r3, [pc, #164]	; (80123ec <vTaskDelayUntil+0xe8>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d009      	beq.n	8012362 <vTaskDelayUntil+0x5e>
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	60fb      	str	r3, [r7, #12]
 8012360:	e7fe      	b.n	8012360 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8012362:	f000 f8e1 	bl	8012528 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012366:	4b22      	ldr	r3, [pc, #136]	; (80123f0 <vTaskDelayUntil+0xec>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	4413      	add	r3, r2
 8012374:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	6a3a      	ldr	r2, [r7, #32]
 801237c:	429a      	cmp	r2, r3
 801237e:	d20b      	bcs.n	8012398 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	69fa      	ldr	r2, [r7, #28]
 8012386:	429a      	cmp	r2, r3
 8012388:	d211      	bcs.n	80123ae <vTaskDelayUntil+0xaa>
 801238a:	69fa      	ldr	r2, [r7, #28]
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	429a      	cmp	r2, r3
 8012390:	d90d      	bls.n	80123ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8012392:	2301      	movs	r3, #1
 8012394:	627b      	str	r3, [r7, #36]	; 0x24
 8012396:	e00a      	b.n	80123ae <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	69fa      	ldr	r2, [r7, #28]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d303      	bcc.n	80123aa <vTaskDelayUntil+0xa6>
 80123a2:	69fa      	ldr	r2, [r7, #28]
 80123a4:	6a3b      	ldr	r3, [r7, #32]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d901      	bls.n	80123ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80123aa:	2301      	movs	r3, #1
 80123ac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	69fa      	ldr	r2, [r7, #28]
 80123b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80123b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d006      	beq.n	80123c8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80123ba:	69fa      	ldr	r2, [r7, #28]
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	2100      	movs	r1, #0
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 fe08 	bl	8012fd8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80123c8:	f000 f8bc 	bl	8012544 <xTaskResumeAll>
 80123cc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d107      	bne.n	80123e4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80123d4:	4b07      	ldr	r3, [pc, #28]	; (80123f4 <vTaskDelayUntil+0xf0>)
 80123d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123da:	601a      	str	r2, [r3, #0]
 80123dc:	f3bf 8f4f 	dsb	sy
 80123e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80123e4:	bf00      	nop
 80123e6:	3728      	adds	r7, #40	; 0x28
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	20001034 	.word	0x20001034
 80123f0:	20001010 	.word	0x20001010
 80123f4:	e000ed04 	.word	0xe000ed04

080123f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012400:	2300      	movs	r3, #0
 8012402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d016      	beq.n	8012438 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801240a:	4b13      	ldr	r3, [pc, #76]	; (8012458 <vTaskDelay+0x60>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d009      	beq.n	8012426 <vTaskDelay+0x2e>
 8012412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	60bb      	str	r3, [r7, #8]
 8012424:	e7fe      	b.n	8012424 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012426:	f000 f87f 	bl	8012528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801242a:	2100      	movs	r1, #0
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fdd3 	bl	8012fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012432:	f000 f887 	bl	8012544 <xTaskResumeAll>
 8012436:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d107      	bne.n	801244e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801243e:	4b07      	ldr	r3, [pc, #28]	; (801245c <vTaskDelay+0x64>)
 8012440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801244e:	bf00      	nop
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	20001034 	.word	0x20001034
 801245c:	e000ed04 	.word	0xe000ed04

08012460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b08a      	sub	sp, #40	; 0x28
 8012464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012466:	2300      	movs	r3, #0
 8012468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801246a:	2300      	movs	r3, #0
 801246c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801246e:	463a      	mov	r2, r7
 8012470:	1d39      	adds	r1, r7, #4
 8012472:	f107 0308 	add.w	r3, r7, #8
 8012476:	4618      	mov	r0, r3
 8012478:	f7fe fd5c 	bl	8010f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801247c:	6839      	ldr	r1, [r7, #0]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	68ba      	ldr	r2, [r7, #8]
 8012482:	9202      	str	r2, [sp, #8]
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	2300      	movs	r3, #0
 8012488:	9300      	str	r3, [sp, #0]
 801248a:	2300      	movs	r3, #0
 801248c:	460a      	mov	r2, r1
 801248e:	4920      	ldr	r1, [pc, #128]	; (8012510 <vTaskStartScheduler+0xb0>)
 8012490:	4820      	ldr	r0, [pc, #128]	; (8012514 <vTaskStartScheduler+0xb4>)
 8012492:	f7ff fd27 	bl	8011ee4 <xTaskCreateStatic>
 8012496:	4602      	mov	r2, r0
 8012498:	4b1f      	ldr	r3, [pc, #124]	; (8012518 <vTaskStartScheduler+0xb8>)
 801249a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801249c:	4b1e      	ldr	r3, [pc, #120]	; (8012518 <vTaskStartScheduler+0xb8>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80124a4:	2301      	movs	r3, #1
 80124a6:	617b      	str	r3, [r7, #20]
 80124a8:	e001      	b.n	80124ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80124aa:	2300      	movs	r3, #0
 80124ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d102      	bne.n	80124ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80124b4:	f000 fde4 	bl	8013080 <xTimerCreateTimerTask>
 80124b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d115      	bne.n	80124ec <vTaskStartScheduler+0x8c>
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80124d2:	4b12      	ldr	r3, [pc, #72]	; (801251c <vTaskStartScheduler+0xbc>)
 80124d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80124da:	4b11      	ldr	r3, [pc, #68]	; (8012520 <vTaskStartScheduler+0xc0>)
 80124dc:	2201      	movs	r2, #1
 80124de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80124e0:	4b10      	ldr	r3, [pc, #64]	; (8012524 <vTaskStartScheduler+0xc4>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80124e6:	f001 f99b 	bl	8013820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124ea:	e00d      	b.n	8012508 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124f2:	d109      	bne.n	8012508 <vTaskStartScheduler+0xa8>
 80124f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f8:	f383 8811 	msr	BASEPRI, r3
 80124fc:	f3bf 8f6f 	isb	sy
 8012500:	f3bf 8f4f 	dsb	sy
 8012504:	60fb      	str	r3, [r7, #12]
 8012506:	e7fe      	b.n	8012506 <vTaskStartScheduler+0xa6>
}
 8012508:	bf00      	nop
 801250a:	3718      	adds	r7, #24
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	08017e7c 	.word	0x08017e7c
 8012514:	08012b29 	.word	0x08012b29
 8012518:	20001030 	.word	0x20001030
 801251c:	2000102c 	.word	0x2000102c
 8012520:	20001018 	.word	0x20001018
 8012524:	20001010 	.word	0x20001010

08012528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012528:	b480      	push	{r7}
 801252a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801252c:	4b04      	ldr	r3, [pc, #16]	; (8012540 <vTaskSuspendAll+0x18>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	3301      	adds	r3, #1
 8012532:	4a03      	ldr	r2, [pc, #12]	; (8012540 <vTaskSuspendAll+0x18>)
 8012534:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012536:	bf00      	nop
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr
 8012540:	20001034 	.word	0x20001034

08012544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801254a:	2300      	movs	r3, #0
 801254c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801254e:	2300      	movs	r3, #0
 8012550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012552:	4b41      	ldr	r3, [pc, #260]	; (8012658 <xTaskResumeAll+0x114>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d109      	bne.n	801256e <xTaskResumeAll+0x2a>
 801255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255e:	f383 8811 	msr	BASEPRI, r3
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	603b      	str	r3, [r7, #0]
 801256c:	e7fe      	b.n	801256c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801256e:	f001 f9f5 	bl	801395c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012572:	4b39      	ldr	r3, [pc, #228]	; (8012658 <xTaskResumeAll+0x114>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	3b01      	subs	r3, #1
 8012578:	4a37      	ldr	r2, [pc, #220]	; (8012658 <xTaskResumeAll+0x114>)
 801257a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801257c:	4b36      	ldr	r3, [pc, #216]	; (8012658 <xTaskResumeAll+0x114>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d162      	bne.n	801264a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012584:	4b35      	ldr	r3, [pc, #212]	; (801265c <xTaskResumeAll+0x118>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d05e      	beq.n	801264a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801258c:	e02f      	b.n	80125ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801258e:	4b34      	ldr	r3, [pc, #208]	; (8012660 <xTaskResumeAll+0x11c>)
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3318      	adds	r3, #24
 801259a:	4618      	mov	r0, r3
 801259c:	f7fe fd88 	bl	80110b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	3304      	adds	r3, #4
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fe fd83 	bl	80110b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ae:	4b2d      	ldr	r3, [pc, #180]	; (8012664 <xTaskResumeAll+0x120>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d903      	bls.n	80125be <xTaskResumeAll+0x7a>
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125ba:	4a2a      	ldr	r2, [pc, #168]	; (8012664 <xTaskResumeAll+0x120>)
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c2:	4613      	mov	r3, r2
 80125c4:	009b      	lsls	r3, r3, #2
 80125c6:	4413      	add	r3, r2
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	4a27      	ldr	r2, [pc, #156]	; (8012668 <xTaskResumeAll+0x124>)
 80125cc:	441a      	add	r2, r3
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	3304      	adds	r3, #4
 80125d2:	4619      	mov	r1, r3
 80125d4:	4610      	mov	r0, r2
 80125d6:	f7fe fd0e 	bl	8010ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125de:	4b23      	ldr	r3, [pc, #140]	; (801266c <xTaskResumeAll+0x128>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d302      	bcc.n	80125ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80125e8:	4b21      	ldr	r3, [pc, #132]	; (8012670 <xTaskResumeAll+0x12c>)
 80125ea:	2201      	movs	r2, #1
 80125ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125ee:	4b1c      	ldr	r3, [pc, #112]	; (8012660 <xTaskResumeAll+0x11c>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d1cb      	bne.n	801258e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80125fc:	f000 fb46 	bl	8012c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012600:	4b1c      	ldr	r3, [pc, #112]	; (8012674 <xTaskResumeAll+0x130>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d010      	beq.n	801262e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801260c:	f000 f846 	bl	801269c <xTaskIncrementTick>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d002      	beq.n	801261c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012616:	4b16      	ldr	r3, [pc, #88]	; (8012670 <xTaskResumeAll+0x12c>)
 8012618:	2201      	movs	r2, #1
 801261a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	3b01      	subs	r3, #1
 8012620:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1f1      	bne.n	801260c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012628:	4b12      	ldr	r3, [pc, #72]	; (8012674 <xTaskResumeAll+0x130>)
 801262a:	2200      	movs	r2, #0
 801262c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801262e:	4b10      	ldr	r3, [pc, #64]	; (8012670 <xTaskResumeAll+0x12c>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d009      	beq.n	801264a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012636:	2301      	movs	r3, #1
 8012638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801263a:	4b0f      	ldr	r3, [pc, #60]	; (8012678 <xTaskResumeAll+0x134>)
 801263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012640:	601a      	str	r2, [r3, #0]
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801264a:	f001 f9b5 	bl	80139b8 <vPortExitCritical>

	return xAlreadyYielded;
 801264e:	68bb      	ldr	r3, [r7, #8]
}
 8012650:	4618      	mov	r0, r3
 8012652:	3710      	adds	r7, #16
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}
 8012658:	20001034 	.word	0x20001034
 801265c:	2000100c 	.word	0x2000100c
 8012660:	20000fcc 	.word	0x20000fcc
 8012664:	20001014 	.word	0x20001014
 8012668:	20000b3c 	.word	0x20000b3c
 801266c:	20000b38 	.word	0x20000b38
 8012670:	20001020 	.word	0x20001020
 8012674:	2000101c 	.word	0x2000101c
 8012678:	e000ed04 	.word	0xe000ed04

0801267c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012682:	4b05      	ldr	r3, [pc, #20]	; (8012698 <xTaskGetTickCount+0x1c>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012688:	687b      	ldr	r3, [r7, #4]
}
 801268a:	4618      	mov	r0, r3
 801268c:	370c      	adds	r7, #12
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop
 8012698:	20001010 	.word	0x20001010

0801269c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80126a2:	2300      	movs	r3, #0
 80126a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126a6:	4b4e      	ldr	r3, [pc, #312]	; (80127e0 <xTaskIncrementTick+0x144>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f040 8088 	bne.w	80127c0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80126b0:	4b4c      	ldr	r3, [pc, #304]	; (80127e4 <xTaskIncrementTick+0x148>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	3301      	adds	r3, #1
 80126b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80126b8:	4a4a      	ldr	r2, [pc, #296]	; (80127e4 <xTaskIncrementTick+0x148>)
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11f      	bne.n	8012704 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80126c4:	4b48      	ldr	r3, [pc, #288]	; (80127e8 <xTaskIncrementTick+0x14c>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d009      	beq.n	80126e2 <xTaskIncrementTick+0x46>
 80126ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d2:	f383 8811 	msr	BASEPRI, r3
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	603b      	str	r3, [r7, #0]
 80126e0:	e7fe      	b.n	80126e0 <xTaskIncrementTick+0x44>
 80126e2:	4b41      	ldr	r3, [pc, #260]	; (80127e8 <xTaskIncrementTick+0x14c>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	60fb      	str	r3, [r7, #12]
 80126e8:	4b40      	ldr	r3, [pc, #256]	; (80127ec <xTaskIncrementTick+0x150>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4a3e      	ldr	r2, [pc, #248]	; (80127e8 <xTaskIncrementTick+0x14c>)
 80126ee:	6013      	str	r3, [r2, #0]
 80126f0:	4a3e      	ldr	r2, [pc, #248]	; (80127ec <xTaskIncrementTick+0x150>)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	6013      	str	r3, [r2, #0]
 80126f6:	4b3e      	ldr	r3, [pc, #248]	; (80127f0 <xTaskIncrementTick+0x154>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	3301      	adds	r3, #1
 80126fc:	4a3c      	ldr	r2, [pc, #240]	; (80127f0 <xTaskIncrementTick+0x154>)
 80126fe:	6013      	str	r3, [r2, #0]
 8012700:	f000 fac4 	bl	8012c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012704:	4b3b      	ldr	r3, [pc, #236]	; (80127f4 <xTaskIncrementTick+0x158>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	429a      	cmp	r2, r3
 801270c:	d349      	bcc.n	80127a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801270e:	4b36      	ldr	r3, [pc, #216]	; (80127e8 <xTaskIncrementTick+0x14c>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d104      	bne.n	8012722 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012718:	4b36      	ldr	r3, [pc, #216]	; (80127f4 <xTaskIncrementTick+0x158>)
 801271a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801271e:	601a      	str	r2, [r3, #0]
					break;
 8012720:	e03f      	b.n	80127a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012722:	4b31      	ldr	r3, [pc, #196]	; (80127e8 <xTaskIncrementTick+0x14c>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012732:	693a      	ldr	r2, [r7, #16]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	429a      	cmp	r2, r3
 8012738:	d203      	bcs.n	8012742 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801273a:	4a2e      	ldr	r2, [pc, #184]	; (80127f4 <xTaskIncrementTick+0x158>)
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012740:	e02f      	b.n	80127a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	3304      	adds	r3, #4
 8012746:	4618      	mov	r0, r3
 8012748:	f7fe fcb2 	bl	80110b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012750:	2b00      	cmp	r3, #0
 8012752:	d004      	beq.n	801275e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	3318      	adds	r3, #24
 8012758:	4618      	mov	r0, r3
 801275a:	f7fe fca9 	bl	80110b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012762:	4b25      	ldr	r3, [pc, #148]	; (80127f8 <xTaskIncrementTick+0x15c>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d903      	bls.n	8012772 <xTaskIncrementTick+0xd6>
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801276e:	4a22      	ldr	r2, [pc, #136]	; (80127f8 <xTaskIncrementTick+0x15c>)
 8012770:	6013      	str	r3, [r2, #0]
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012776:	4613      	mov	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	4a1f      	ldr	r2, [pc, #124]	; (80127fc <xTaskIncrementTick+0x160>)
 8012780:	441a      	add	r2, r3
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	3304      	adds	r3, #4
 8012786:	4619      	mov	r1, r3
 8012788:	4610      	mov	r0, r2
 801278a:	f7fe fc34 	bl	8010ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012792:	4b1b      	ldr	r3, [pc, #108]	; (8012800 <xTaskIncrementTick+0x164>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012798:	429a      	cmp	r2, r3
 801279a:	d3b8      	bcc.n	801270e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801279c:	2301      	movs	r3, #1
 801279e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127a0:	e7b5      	b.n	801270e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80127a2:	4b17      	ldr	r3, [pc, #92]	; (8012800 <xTaskIncrementTick+0x164>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a8:	4914      	ldr	r1, [pc, #80]	; (80127fc <xTaskIncrementTick+0x160>)
 80127aa:	4613      	mov	r3, r2
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	440b      	add	r3, r1
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2b01      	cmp	r3, #1
 80127b8:	d907      	bls.n	80127ca <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80127ba:	2301      	movs	r3, #1
 80127bc:	617b      	str	r3, [r7, #20]
 80127be:	e004      	b.n	80127ca <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80127c0:	4b10      	ldr	r3, [pc, #64]	; (8012804 <xTaskIncrementTick+0x168>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	3301      	adds	r3, #1
 80127c6:	4a0f      	ldr	r2, [pc, #60]	; (8012804 <xTaskIncrementTick+0x168>)
 80127c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80127ca:	4b0f      	ldr	r3, [pc, #60]	; (8012808 <xTaskIncrementTick+0x16c>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d001      	beq.n	80127d6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80127d2:	2301      	movs	r3, #1
 80127d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80127d6:	697b      	ldr	r3, [r7, #20]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	20001034 	.word	0x20001034
 80127e4:	20001010 	.word	0x20001010
 80127e8:	20000fc4 	.word	0x20000fc4
 80127ec:	20000fc8 	.word	0x20000fc8
 80127f0:	20001024 	.word	0x20001024
 80127f4:	2000102c 	.word	0x2000102c
 80127f8:	20001014 	.word	0x20001014
 80127fc:	20000b3c 	.word	0x20000b3c
 8012800:	20000b38 	.word	0x20000b38
 8012804:	2000101c 	.word	0x2000101c
 8012808:	20001020 	.word	0x20001020

0801280c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012812:	4b27      	ldr	r3, [pc, #156]	; (80128b0 <vTaskSwitchContext+0xa4>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d003      	beq.n	8012822 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801281a:	4b26      	ldr	r3, [pc, #152]	; (80128b4 <vTaskSwitchContext+0xa8>)
 801281c:	2201      	movs	r2, #1
 801281e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012820:	e040      	b.n	80128a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012822:	4b24      	ldr	r3, [pc, #144]	; (80128b4 <vTaskSwitchContext+0xa8>)
 8012824:	2200      	movs	r2, #0
 8012826:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012828:	4b23      	ldr	r3, [pc, #140]	; (80128b8 <vTaskSwitchContext+0xac>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	60fb      	str	r3, [r7, #12]
 801282e:	e00f      	b.n	8012850 <vTaskSwitchContext+0x44>
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d109      	bne.n	801284a <vTaskSwitchContext+0x3e>
 8012836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283a:	f383 8811 	msr	BASEPRI, r3
 801283e:	f3bf 8f6f 	isb	sy
 8012842:	f3bf 8f4f 	dsb	sy
 8012846:	607b      	str	r3, [r7, #4]
 8012848:	e7fe      	b.n	8012848 <vTaskSwitchContext+0x3c>
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	3b01      	subs	r3, #1
 801284e:	60fb      	str	r3, [r7, #12]
 8012850:	491a      	ldr	r1, [pc, #104]	; (80128bc <vTaskSwitchContext+0xb0>)
 8012852:	68fa      	ldr	r2, [r7, #12]
 8012854:	4613      	mov	r3, r2
 8012856:	009b      	lsls	r3, r3, #2
 8012858:	4413      	add	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	440b      	add	r3, r1
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d0e5      	beq.n	8012830 <vTaskSwitchContext+0x24>
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	4613      	mov	r3, r2
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4413      	add	r3, r2
 801286c:	009b      	lsls	r3, r3, #2
 801286e:	4a13      	ldr	r2, [pc, #76]	; (80128bc <vTaskSwitchContext+0xb0>)
 8012870:	4413      	add	r3, r2
 8012872:	60bb      	str	r3, [r7, #8]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	685a      	ldr	r2, [r3, #4]
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	605a      	str	r2, [r3, #4]
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	685a      	ldr	r2, [r3, #4]
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	3308      	adds	r3, #8
 8012886:	429a      	cmp	r2, r3
 8012888:	d104      	bne.n	8012894 <vTaskSwitchContext+0x88>
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	685a      	ldr	r2, [r3, #4]
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	605a      	str	r2, [r3, #4]
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	4a09      	ldr	r2, [pc, #36]	; (80128c0 <vTaskSwitchContext+0xb4>)
 801289c:	6013      	str	r3, [r2, #0]
 801289e:	4a06      	ldr	r2, [pc, #24]	; (80128b8 <vTaskSwitchContext+0xac>)
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6013      	str	r3, [r2, #0]
}
 80128a4:	bf00      	nop
 80128a6:	3714      	adds	r7, #20
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr
 80128b0:	20001034 	.word	0x20001034
 80128b4:	20001020 	.word	0x20001020
 80128b8:	20001014 	.word	0x20001014
 80128bc:	20000b3c 	.word	0x20000b3c
 80128c0:	20000b38 	.word	0x20000b38

080128c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d109      	bne.n	80128e8 <vTaskPlaceOnEventList+0x24>
 80128d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d8:	f383 8811 	msr	BASEPRI, r3
 80128dc:	f3bf 8f6f 	isb	sy
 80128e0:	f3bf 8f4f 	dsb	sy
 80128e4:	60fb      	str	r3, [r7, #12]
 80128e6:	e7fe      	b.n	80128e6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128e8:	4b07      	ldr	r3, [pc, #28]	; (8012908 <vTaskPlaceOnEventList+0x44>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	3318      	adds	r3, #24
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7fe fba4 	bl	801103e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128f6:	2101      	movs	r1, #1
 80128f8:	6838      	ldr	r0, [r7, #0]
 80128fa:	f000 fb6d 	bl	8012fd8 <prvAddCurrentTaskToDelayedList>
}
 80128fe:	bf00      	nop
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	20000b38 	.word	0x20000b38

0801290c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d109      	bne.n	8012932 <vTaskPlaceOnEventListRestricted+0x26>
 801291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012922:	f383 8811 	msr	BASEPRI, r3
 8012926:	f3bf 8f6f 	isb	sy
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	617b      	str	r3, [r7, #20]
 8012930:	e7fe      	b.n	8012930 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012932:	4b0a      	ldr	r3, [pc, #40]	; (801295c <vTaskPlaceOnEventListRestricted+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3318      	adds	r3, #24
 8012938:	4619      	mov	r1, r3
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	f7fe fb5b 	bl	8010ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d002      	beq.n	801294c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801294a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801294c:	6879      	ldr	r1, [r7, #4]
 801294e:	68b8      	ldr	r0, [r7, #8]
 8012950:	f000 fb42 	bl	8012fd8 <prvAddCurrentTaskToDelayedList>
	}
 8012954:	bf00      	nop
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	20000b38 	.word	0x20000b38

08012960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d109      	bne.n	801298a <xTaskRemoveFromEventList+0x2a>
 8012976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	60fb      	str	r3, [r7, #12]
 8012988:	e7fe      	b.n	8012988 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	3318      	adds	r3, #24
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe fb8e 	bl	80110b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012994:	4b1d      	ldr	r3, [pc, #116]	; (8012a0c <xTaskRemoveFromEventList+0xac>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d11d      	bne.n	80129d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	3304      	adds	r3, #4
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fe fb85 	bl	80110b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129aa:	4b19      	ldr	r3, [pc, #100]	; (8012a10 <xTaskRemoveFromEventList+0xb0>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d903      	bls.n	80129ba <xTaskRemoveFromEventList+0x5a>
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b6:	4a16      	ldr	r2, [pc, #88]	; (8012a10 <xTaskRemoveFromEventList+0xb0>)
 80129b8:	6013      	str	r3, [r2, #0]
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129be:	4613      	mov	r3, r2
 80129c0:	009b      	lsls	r3, r3, #2
 80129c2:	4413      	add	r3, r2
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	4a13      	ldr	r2, [pc, #76]	; (8012a14 <xTaskRemoveFromEventList+0xb4>)
 80129c8:	441a      	add	r2, r3
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	3304      	adds	r3, #4
 80129ce:	4619      	mov	r1, r3
 80129d0:	4610      	mov	r0, r2
 80129d2:	f7fe fb10 	bl	8010ff6 <vListInsertEnd>
 80129d6:	e005      	b.n	80129e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	3318      	adds	r3, #24
 80129dc:	4619      	mov	r1, r3
 80129de:	480e      	ldr	r0, [pc, #56]	; (8012a18 <xTaskRemoveFromEventList+0xb8>)
 80129e0:	f7fe fb09 	bl	8010ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129e8:	4b0c      	ldr	r3, [pc, #48]	; (8012a1c <xTaskRemoveFromEventList+0xbc>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d905      	bls.n	80129fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80129f2:	2301      	movs	r3, #1
 80129f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80129f6:	4b0a      	ldr	r3, [pc, #40]	; (8012a20 <xTaskRemoveFromEventList+0xc0>)
 80129f8:	2201      	movs	r2, #1
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	e001      	b.n	8012a02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80129fe:	2300      	movs	r3, #0
 8012a00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012a02:	697b      	ldr	r3, [r7, #20]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3718      	adds	r7, #24
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20001034 	.word	0x20001034
 8012a10:	20001014 	.word	0x20001014
 8012a14:	20000b3c 	.word	0x20000b3c
 8012a18:	20000fcc 	.word	0x20000fcc
 8012a1c:	20000b38 	.word	0x20000b38
 8012a20:	20001020 	.word	0x20001020

08012a24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012a2c:	4b06      	ldr	r3, [pc, #24]	; (8012a48 <vTaskInternalSetTimeOutState+0x24>)
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012a34:	4b05      	ldr	r3, [pc, #20]	; (8012a4c <vTaskInternalSetTimeOutState+0x28>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	605a      	str	r2, [r3, #4]
}
 8012a3c:	bf00      	nop
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr
 8012a48:	20001024 	.word	0x20001024
 8012a4c:	20001010 	.word	0x20001010

08012a50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b088      	sub	sp, #32
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d109      	bne.n	8012a74 <xTaskCheckForTimeOut+0x24>
 8012a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a64:	f383 8811 	msr	BASEPRI, r3
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	f3bf 8f4f 	dsb	sy
 8012a70:	613b      	str	r3, [r7, #16]
 8012a72:	e7fe      	b.n	8012a72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d109      	bne.n	8012a8e <xTaskCheckForTimeOut+0x3e>
 8012a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	60fb      	str	r3, [r7, #12]
 8012a8c:	e7fe      	b.n	8012a8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012a8e:	f000 ff65 	bl	801395c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012a92:	4b1d      	ldr	r3, [pc, #116]	; (8012b08 <xTaskCheckForTimeOut+0xb8>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	69ba      	ldr	r2, [r7, #24]
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012aaa:	d102      	bne.n	8012ab2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012aac:	2300      	movs	r3, #0
 8012aae:	61fb      	str	r3, [r7, #28]
 8012ab0:	e023      	b.n	8012afa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	4b15      	ldr	r3, [pc, #84]	; (8012b0c <xTaskCheckForTimeOut+0xbc>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d007      	beq.n	8012ace <xTaskCheckForTimeOut+0x7e>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	69ba      	ldr	r2, [r7, #24]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d302      	bcc.n	8012ace <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	61fb      	str	r3, [r7, #28]
 8012acc:	e015      	b.n	8012afa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d20b      	bcs.n	8012af0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	1ad2      	subs	r2, r2, r3
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff ff9d 	bl	8012a24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012aea:	2300      	movs	r3, #0
 8012aec:	61fb      	str	r3, [r7, #28]
 8012aee:	e004      	b.n	8012afa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	2200      	movs	r2, #0
 8012af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012af6:	2301      	movs	r3, #1
 8012af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012afa:	f000 ff5d 	bl	80139b8 <vPortExitCritical>

	return xReturn;
 8012afe:	69fb      	ldr	r3, [r7, #28]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3720      	adds	r7, #32
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	20001010 	.word	0x20001010
 8012b0c:	20001024 	.word	0x20001024

08012b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012b10:	b480      	push	{r7}
 8012b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012b14:	4b03      	ldr	r3, [pc, #12]	; (8012b24 <vTaskMissedYield+0x14>)
 8012b16:	2201      	movs	r2, #1
 8012b18:	601a      	str	r2, [r3, #0]
}
 8012b1a:	bf00      	nop
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr
 8012b24:	20001020 	.word	0x20001020

08012b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012b30:	f000 f852 	bl	8012bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012b34:	4b06      	ldr	r3, [pc, #24]	; (8012b50 <prvIdleTask+0x28>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d9f9      	bls.n	8012b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012b3c:	4b05      	ldr	r3, [pc, #20]	; (8012b54 <prvIdleTask+0x2c>)
 8012b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b42:	601a      	str	r2, [r3, #0]
 8012b44:	f3bf 8f4f 	dsb	sy
 8012b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012b4c:	e7f0      	b.n	8012b30 <prvIdleTask+0x8>
 8012b4e:	bf00      	nop
 8012b50:	20000b3c 	.word	0x20000b3c
 8012b54:	e000ed04 	.word	0xe000ed04

08012b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b5e:	2300      	movs	r3, #0
 8012b60:	607b      	str	r3, [r7, #4]
 8012b62:	e00c      	b.n	8012b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	4613      	mov	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4a12      	ldr	r2, [pc, #72]	; (8012bb8 <prvInitialiseTaskLists+0x60>)
 8012b70:	4413      	add	r3, r2
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe fa12 	bl	8010f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	607b      	str	r3, [r7, #4]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b37      	cmp	r3, #55	; 0x37
 8012b82:	d9ef      	bls.n	8012b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b84:	480d      	ldr	r0, [pc, #52]	; (8012bbc <prvInitialiseTaskLists+0x64>)
 8012b86:	f7fe fa09 	bl	8010f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b8a:	480d      	ldr	r0, [pc, #52]	; (8012bc0 <prvInitialiseTaskLists+0x68>)
 8012b8c:	f7fe fa06 	bl	8010f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b90:	480c      	ldr	r0, [pc, #48]	; (8012bc4 <prvInitialiseTaskLists+0x6c>)
 8012b92:	f7fe fa03 	bl	8010f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b96:	480c      	ldr	r0, [pc, #48]	; (8012bc8 <prvInitialiseTaskLists+0x70>)
 8012b98:	f7fe fa00 	bl	8010f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b9c:	480b      	ldr	r0, [pc, #44]	; (8012bcc <prvInitialiseTaskLists+0x74>)
 8012b9e:	f7fe f9fd 	bl	8010f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012ba2:	4b0b      	ldr	r3, [pc, #44]	; (8012bd0 <prvInitialiseTaskLists+0x78>)
 8012ba4:	4a05      	ldr	r2, [pc, #20]	; (8012bbc <prvInitialiseTaskLists+0x64>)
 8012ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ba8:	4b0a      	ldr	r3, [pc, #40]	; (8012bd4 <prvInitialiseTaskLists+0x7c>)
 8012baa:	4a05      	ldr	r2, [pc, #20]	; (8012bc0 <prvInitialiseTaskLists+0x68>)
 8012bac:	601a      	str	r2, [r3, #0]
}
 8012bae:	bf00      	nop
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	20000b3c 	.word	0x20000b3c
 8012bbc:	20000f9c 	.word	0x20000f9c
 8012bc0:	20000fb0 	.word	0x20000fb0
 8012bc4:	20000fcc 	.word	0x20000fcc
 8012bc8:	20000fe0 	.word	0x20000fe0
 8012bcc:	20000ff8 	.word	0x20000ff8
 8012bd0:	20000fc4 	.word	0x20000fc4
 8012bd4:	20000fc8 	.word	0x20000fc8

08012bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012bde:	e019      	b.n	8012c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012be0:	f000 febc 	bl	801395c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012be4:	4b0f      	ldr	r3, [pc, #60]	; (8012c24 <prvCheckTasksWaitingTermination+0x4c>)
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	3304      	adds	r3, #4
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7fe fa5d 	bl	80110b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012bf6:	4b0c      	ldr	r3, [pc, #48]	; (8012c28 <prvCheckTasksWaitingTermination+0x50>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	4a0a      	ldr	r2, [pc, #40]	; (8012c28 <prvCheckTasksWaitingTermination+0x50>)
 8012bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012c00:	4b0a      	ldr	r3, [pc, #40]	; (8012c2c <prvCheckTasksWaitingTermination+0x54>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	3b01      	subs	r3, #1
 8012c06:	4a09      	ldr	r2, [pc, #36]	; (8012c2c <prvCheckTasksWaitingTermination+0x54>)
 8012c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012c0a:	f000 fed5 	bl	80139b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 f80e 	bl	8012c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012c14:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <prvCheckTasksWaitingTermination+0x54>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1e1      	bne.n	8012be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012c1c:	bf00      	nop
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	20000fe0 	.word	0x20000fe0
 8012c28:	2000100c 	.word	0x2000100c
 8012c2c:	20000ff4 	.word	0x20000ff4

08012c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d108      	bne.n	8012c54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c46:	4618      	mov	r0, r3
 8012c48:	f001 f864 	bl	8013d14 <vPortFree>
				vPortFree( pxTCB );
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f001 f861 	bl	8013d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012c52:	e017      	b.n	8012c84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d103      	bne.n	8012c66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f001 f858 	bl	8013d14 <vPortFree>
	}
 8012c64:	e00e      	b.n	8012c84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d009      	beq.n	8012c84 <prvDeleteTCB+0x54>
 8012c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c74:	f383 8811 	msr	BASEPRI, r3
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	60fb      	str	r3, [r7, #12]
 8012c82:	e7fe      	b.n	8012c82 <prvDeleteTCB+0x52>
	}
 8012c84:	bf00      	nop
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c92:	4b0c      	ldr	r3, [pc, #48]	; (8012cc4 <prvResetNextTaskUnblockTime+0x38>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d104      	bne.n	8012ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012c9c:	4b0a      	ldr	r3, [pc, #40]	; (8012cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8012c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012ca4:	e008      	b.n	8012cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ca6:	4b07      	ldr	r3, [pc, #28]	; (8012cc4 <prvResetNextTaskUnblockTime+0x38>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	68db      	ldr	r3, [r3, #12]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	4a04      	ldr	r2, [pc, #16]	; (8012cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8012cb6:	6013      	str	r3, [r2, #0]
}
 8012cb8:	bf00      	nop
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	20000fc4 	.word	0x20000fc4
 8012cc8:	2000102c 	.word	0x2000102c

08012ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012cd2:	4b0b      	ldr	r3, [pc, #44]	; (8012d00 <xTaskGetSchedulerState+0x34>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d102      	bne.n	8012ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	607b      	str	r3, [r7, #4]
 8012cde:	e008      	b.n	8012cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ce0:	4b08      	ldr	r3, [pc, #32]	; (8012d04 <xTaskGetSchedulerState+0x38>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d102      	bne.n	8012cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ce8:	2302      	movs	r3, #2
 8012cea:	607b      	str	r3, [r7, #4]
 8012cec:	e001      	b.n	8012cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012cf2:	687b      	ldr	r3, [r7, #4]
	}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr
 8012d00:	20001018 	.word	0x20001018
 8012d04:	20001034 	.word	0x20001034

08012d08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012d14:	2300      	movs	r3, #0
 8012d16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d051      	beq.n	8012dc2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d22:	4b2a      	ldr	r3, [pc, #168]	; (8012dcc <xTaskPriorityInherit+0xc4>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d241      	bcs.n	8012db0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	db06      	blt.n	8012d42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d34:	4b25      	ldr	r3, [pc, #148]	; (8012dcc <xTaskPriorityInherit+0xc4>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	6959      	ldr	r1, [r3, #20]
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	4413      	add	r3, r2
 8012d50:	009b      	lsls	r3, r3, #2
 8012d52:	4a1f      	ldr	r2, [pc, #124]	; (8012dd0 <xTaskPriorityInherit+0xc8>)
 8012d54:	4413      	add	r3, r2
 8012d56:	4299      	cmp	r1, r3
 8012d58:	d122      	bne.n	8012da0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	3304      	adds	r3, #4
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe f9a6 	bl	80110b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d64:	4b19      	ldr	r3, [pc, #100]	; (8012dcc <xTaskPriorityInherit+0xc4>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d72:	4b18      	ldr	r3, [pc, #96]	; (8012dd4 <xTaskPriorityInherit+0xcc>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d903      	bls.n	8012d82 <xTaskPriorityInherit+0x7a>
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d7e:	4a15      	ldr	r2, [pc, #84]	; (8012dd4 <xTaskPriorityInherit+0xcc>)
 8012d80:	6013      	str	r3, [r2, #0]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d86:	4613      	mov	r3, r2
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	4413      	add	r3, r2
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	4a10      	ldr	r2, [pc, #64]	; (8012dd0 <xTaskPriorityInherit+0xc8>)
 8012d90:	441a      	add	r2, r3
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	3304      	adds	r3, #4
 8012d96:	4619      	mov	r1, r3
 8012d98:	4610      	mov	r0, r2
 8012d9a:	f7fe f92c 	bl	8010ff6 <vListInsertEnd>
 8012d9e:	e004      	b.n	8012daa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012da0:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <xTaskPriorityInherit+0xc4>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012daa:	2301      	movs	r3, #1
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	e008      	b.n	8012dc2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012db4:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <xTaskPriorityInherit+0xc4>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d201      	bcs.n	8012dc2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	20000b38 	.word	0x20000b38
 8012dd0:	20000b3c 	.word	0x20000b3c
 8012dd4:	20001014 	.word	0x20001014

08012dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b086      	sub	sp, #24
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012de4:	2300      	movs	r3, #0
 8012de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d054      	beq.n	8012e98 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012dee:	4b2d      	ldr	r3, [pc, #180]	; (8012ea4 <xTaskPriorityDisinherit+0xcc>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	693a      	ldr	r2, [r7, #16]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d009      	beq.n	8012e0c <xTaskPriorityDisinherit+0x34>
 8012df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfc:	f383 8811 	msr	BASEPRI, r3
 8012e00:	f3bf 8f6f 	isb	sy
 8012e04:	f3bf 8f4f 	dsb	sy
 8012e08:	60fb      	str	r3, [r7, #12]
 8012e0a:	e7fe      	b.n	8012e0a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d109      	bne.n	8012e28 <xTaskPriorityDisinherit+0x50>
 8012e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e18:	f383 8811 	msr	BASEPRI, r3
 8012e1c:	f3bf 8f6f 	isb	sy
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	60bb      	str	r3, [r7, #8]
 8012e26:	e7fe      	b.n	8012e26 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e2c:	1e5a      	subs	r2, r3, #1
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d02c      	beq.n	8012e98 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d128      	bne.n	8012e98 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	3304      	adds	r3, #4
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fe f930 	bl	80110b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e68:	4b0f      	ldr	r3, [pc, #60]	; (8012ea8 <xTaskPriorityDisinherit+0xd0>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d903      	bls.n	8012e78 <xTaskPriorityDisinherit+0xa0>
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e74:	4a0c      	ldr	r2, [pc, #48]	; (8012ea8 <xTaskPriorityDisinherit+0xd0>)
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	4413      	add	r3, r2
 8012e82:	009b      	lsls	r3, r3, #2
 8012e84:	4a09      	ldr	r2, [pc, #36]	; (8012eac <xTaskPriorityDisinherit+0xd4>)
 8012e86:	441a      	add	r2, r3
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	4610      	mov	r0, r2
 8012e90:	f7fe f8b1 	bl	8010ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e94:	2301      	movs	r3, #1
 8012e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e98:	697b      	ldr	r3, [r7, #20]
	}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	20000b38 	.word	0x20000b38
 8012ea8:	20001014 	.word	0x20001014
 8012eac:	20000b3c 	.word	0x20000b3c

08012eb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b088      	sub	sp, #32
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d068      	beq.n	8012f9a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d109      	bne.n	8012ee4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	60fb      	str	r3, [r7, #12]
 8012ee2:	e7fe      	b.n	8012ee2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d902      	bls.n	8012ef4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	61fb      	str	r3, [r7, #28]
 8012ef2:	e002      	b.n	8012efa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ef8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	69fa      	ldr	r2, [r7, #28]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d04a      	beq.n	8012f9a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f08:	697a      	ldr	r2, [r7, #20]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d145      	bne.n	8012f9a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012f0e:	4b25      	ldr	r3, [pc, #148]	; (8012fa4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	69ba      	ldr	r2, [r7, #24]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d109      	bne.n	8012f2c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1c:	f383 8811 	msr	BASEPRI, r3
 8012f20:	f3bf 8f6f 	isb	sy
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	60bb      	str	r3, [r7, #8]
 8012f2a:	e7fe      	b.n	8012f2a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	69fa      	ldr	r2, [r7, #28]
 8012f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	699b      	ldr	r3, [r3, #24]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	db04      	blt.n	8012f4a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	6959      	ldr	r1, [r3, #20]
 8012f4e:	693a      	ldr	r2, [r7, #16]
 8012f50:	4613      	mov	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	4413      	add	r3, r2
 8012f56:	009b      	lsls	r3, r3, #2
 8012f58:	4a13      	ldr	r2, [pc, #76]	; (8012fa8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f5a:	4413      	add	r3, r2
 8012f5c:	4299      	cmp	r1, r3
 8012f5e:	d11c      	bne.n	8012f9a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f60:	69bb      	ldr	r3, [r7, #24]
 8012f62:	3304      	adds	r3, #4
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fe f8a3 	bl	80110b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f6e:	4b0f      	ldr	r3, [pc, #60]	; (8012fac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d903      	bls.n	8012f7e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f7a:	4a0c      	ldr	r2, [pc, #48]	; (8012fac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f7c:	6013      	str	r3, [r2, #0]
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f82:	4613      	mov	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	4413      	add	r3, r2
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	4a07      	ldr	r2, [pc, #28]	; (8012fa8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f8c:	441a      	add	r2, r3
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	3304      	adds	r3, #4
 8012f92:	4619      	mov	r1, r3
 8012f94:	4610      	mov	r0, r2
 8012f96:	f7fe f82e 	bl	8010ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f9a:	bf00      	nop
 8012f9c:	3720      	adds	r7, #32
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	20000b38 	.word	0x20000b38
 8012fa8:	20000b3c 	.word	0x20000b3c
 8012fac:	20001014 	.word	0x20001014

08012fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012fb0:	b480      	push	{r7}
 8012fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012fb4:	4b07      	ldr	r3, [pc, #28]	; (8012fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d004      	beq.n	8012fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012fbc:	4b05      	ldr	r3, [pc, #20]	; (8012fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012fc2:	3201      	adds	r2, #1
 8012fc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012fc6:	4b03      	ldr	r3, [pc, #12]	; (8012fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
	}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr
 8012fd4:	20000b38 	.word	0x20000b38

08012fd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012fe2:	4b21      	ldr	r3, [pc, #132]	; (8013068 <prvAddCurrentTaskToDelayedList+0x90>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fe8:	4b20      	ldr	r3, [pc, #128]	; (801306c <prvAddCurrentTaskToDelayedList+0x94>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	3304      	adds	r3, #4
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7fe f85e 	bl	80110b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ffa:	d10a      	bne.n	8013012 <prvAddCurrentTaskToDelayedList+0x3a>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d007      	beq.n	8013012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013002:	4b1a      	ldr	r3, [pc, #104]	; (801306c <prvAddCurrentTaskToDelayedList+0x94>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	3304      	adds	r3, #4
 8013008:	4619      	mov	r1, r3
 801300a:	4819      	ldr	r0, [pc, #100]	; (8013070 <prvAddCurrentTaskToDelayedList+0x98>)
 801300c:	f7fd fff3 	bl	8010ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013010:	e026      	b.n	8013060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013012:	68fa      	ldr	r2, [r7, #12]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	4413      	add	r3, r2
 8013018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801301a:	4b14      	ldr	r3, [pc, #80]	; (801306c <prvAddCurrentTaskToDelayedList+0x94>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	429a      	cmp	r2, r3
 8013028:	d209      	bcs.n	801303e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801302a:	4b12      	ldr	r3, [pc, #72]	; (8013074 <prvAddCurrentTaskToDelayedList+0x9c>)
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	4b0f      	ldr	r3, [pc, #60]	; (801306c <prvAddCurrentTaskToDelayedList+0x94>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	3304      	adds	r3, #4
 8013034:	4619      	mov	r1, r3
 8013036:	4610      	mov	r0, r2
 8013038:	f7fe f801 	bl	801103e <vListInsert>
}
 801303c:	e010      	b.n	8013060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801303e:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	4b0a      	ldr	r3, [pc, #40]	; (801306c <prvAddCurrentTaskToDelayedList+0x94>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	3304      	adds	r3, #4
 8013048:	4619      	mov	r1, r3
 801304a:	4610      	mov	r0, r2
 801304c:	f7fd fff7 	bl	801103e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013050:	4b0a      	ldr	r3, [pc, #40]	; (801307c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68ba      	ldr	r2, [r7, #8]
 8013056:	429a      	cmp	r2, r3
 8013058:	d202      	bcs.n	8013060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801305a:	4a08      	ldr	r2, [pc, #32]	; (801307c <prvAddCurrentTaskToDelayedList+0xa4>)
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	6013      	str	r3, [r2, #0]
}
 8013060:	bf00      	nop
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	20001010 	.word	0x20001010
 801306c:	20000b38 	.word	0x20000b38
 8013070:	20000ff8 	.word	0x20000ff8
 8013074:	20000fc8 	.word	0x20000fc8
 8013078:	20000fc4 	.word	0x20000fc4
 801307c:	2000102c 	.word	0x2000102c

08013080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08a      	sub	sp, #40	; 0x28
 8013084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013086:	2300      	movs	r3, #0
 8013088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801308a:	f000 faff 	bl	801368c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801308e:	4b1c      	ldr	r3, [pc, #112]	; (8013100 <xTimerCreateTimerTask+0x80>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d021      	beq.n	80130da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013096:	2300      	movs	r3, #0
 8013098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801309a:	2300      	movs	r3, #0
 801309c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801309e:	1d3a      	adds	r2, r7, #4
 80130a0:	f107 0108 	add.w	r1, r7, #8
 80130a4:	f107 030c 	add.w	r3, r7, #12
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7fd ff5d 	bl	8010f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80130ae:	6879      	ldr	r1, [r7, #4]
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	68fa      	ldr	r2, [r7, #12]
 80130b4:	9202      	str	r2, [sp, #8]
 80130b6:	9301      	str	r3, [sp, #4]
 80130b8:	2302      	movs	r3, #2
 80130ba:	9300      	str	r3, [sp, #0]
 80130bc:	2300      	movs	r3, #0
 80130be:	460a      	mov	r2, r1
 80130c0:	4910      	ldr	r1, [pc, #64]	; (8013104 <xTimerCreateTimerTask+0x84>)
 80130c2:	4811      	ldr	r0, [pc, #68]	; (8013108 <xTimerCreateTimerTask+0x88>)
 80130c4:	f7fe ff0e 	bl	8011ee4 <xTaskCreateStatic>
 80130c8:	4602      	mov	r2, r0
 80130ca:	4b10      	ldr	r3, [pc, #64]	; (801310c <xTimerCreateTimerTask+0x8c>)
 80130cc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80130ce:	4b0f      	ldr	r3, [pc, #60]	; (801310c <xTimerCreateTimerTask+0x8c>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d001      	beq.n	80130da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80130d6:	2301      	movs	r3, #1
 80130d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d109      	bne.n	80130f4 <xTimerCreateTimerTask+0x74>
 80130e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e4:	f383 8811 	msr	BASEPRI, r3
 80130e8:	f3bf 8f6f 	isb	sy
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	613b      	str	r3, [r7, #16]
 80130f2:	e7fe      	b.n	80130f2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80130f4:	697b      	ldr	r3, [r7, #20]
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3718      	adds	r7, #24
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	20001068 	.word	0x20001068
 8013104:	08017e84 	.word	0x08017e84
 8013108:	08013241 	.word	0x08013241
 801310c:	2000106c 	.word	0x2000106c

08013110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b08a      	sub	sp, #40	; 0x28
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801311e:	2300      	movs	r3, #0
 8013120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d109      	bne.n	801313c <xTimerGenericCommand+0x2c>
 8013128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	623b      	str	r3, [r7, #32]
 801313a:	e7fe      	b.n	801313a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801313c:	4b19      	ldr	r3, [pc, #100]	; (80131a4 <xTimerGenericCommand+0x94>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d02a      	beq.n	801319a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	2b05      	cmp	r3, #5
 8013154:	dc18      	bgt.n	8013188 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013156:	f7ff fdb9 	bl	8012ccc <xTaskGetSchedulerState>
 801315a:	4603      	mov	r3, r0
 801315c:	2b02      	cmp	r3, #2
 801315e:	d109      	bne.n	8013174 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013160:	4b10      	ldr	r3, [pc, #64]	; (80131a4 <xTimerGenericCommand+0x94>)
 8013162:	6818      	ldr	r0, [r3, #0]
 8013164:	f107 0110 	add.w	r1, r7, #16
 8013168:	2300      	movs	r3, #0
 801316a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801316c:	f7fe f93a 	bl	80113e4 <xQueueGenericSend>
 8013170:	6278      	str	r0, [r7, #36]	; 0x24
 8013172:	e012      	b.n	801319a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013174:	4b0b      	ldr	r3, [pc, #44]	; (80131a4 <xTimerGenericCommand+0x94>)
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	f107 0110 	add.w	r1, r7, #16
 801317c:	2300      	movs	r3, #0
 801317e:	2200      	movs	r2, #0
 8013180:	f7fe f930 	bl	80113e4 <xQueueGenericSend>
 8013184:	6278      	str	r0, [r7, #36]	; 0x24
 8013186:	e008      	b.n	801319a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013188:	4b06      	ldr	r3, [pc, #24]	; (80131a4 <xTimerGenericCommand+0x94>)
 801318a:	6818      	ldr	r0, [r3, #0]
 801318c:	f107 0110 	add.w	r1, r7, #16
 8013190:	2300      	movs	r3, #0
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	f7fe fa20 	bl	80115d8 <xQueueGenericSendFromISR>
 8013198:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801319c:	4618      	mov	r0, r3
 801319e:	3728      	adds	r7, #40	; 0x28
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	20001068 	.word	0x20001068

080131a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b088      	sub	sp, #32
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131b2:	4b22      	ldr	r3, [pc, #136]	; (801323c <prvProcessExpiredTimer+0x94>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	3304      	adds	r3, #4
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fd ff75 	bl	80110b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131cc:	f003 0304 	and.w	r3, r3, #4
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d021      	beq.n	8013218 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	699a      	ldr	r2, [r3, #24]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	18d1      	adds	r1, r2, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	6978      	ldr	r0, [r7, #20]
 80131e2:	f000 f8d1 	bl	8013388 <prvInsertTimerInActiveList>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d01e      	beq.n	801322a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131ec:	2300      	movs	r3, #0
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	2300      	movs	r3, #0
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	2100      	movs	r1, #0
 80131f6:	6978      	ldr	r0, [r7, #20]
 80131f8:	f7ff ff8a 	bl	8013110 <xTimerGenericCommand>
 80131fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d112      	bne.n	801322a <prvProcessExpiredTimer+0x82>
 8013204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013208:	f383 8811 	msr	BASEPRI, r3
 801320c:	f3bf 8f6f 	isb	sy
 8013210:	f3bf 8f4f 	dsb	sy
 8013214:	60fb      	str	r3, [r7, #12]
 8013216:	e7fe      	b.n	8013216 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801321e:	f023 0301 	bic.w	r3, r3, #1
 8013222:	b2da      	uxtb	r2, r3
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	6a1b      	ldr	r3, [r3, #32]
 801322e:	6978      	ldr	r0, [r7, #20]
 8013230:	4798      	blx	r3
}
 8013232:	bf00      	nop
 8013234:	3718      	adds	r7, #24
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	20001060 	.word	0x20001060

08013240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013248:	f107 0308 	add.w	r3, r7, #8
 801324c:	4618      	mov	r0, r3
 801324e:	f000 f857 	bl	8013300 <prvGetNextExpireTime>
 8013252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	4619      	mov	r1, r3
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f000 f803 	bl	8013264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801325e:	f000 f8d5 	bl	801340c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013262:	e7f1      	b.n	8013248 <prvTimerTask+0x8>

08013264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801326e:	f7ff f95b 	bl	8012528 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013272:	f107 0308 	add.w	r3, r7, #8
 8013276:	4618      	mov	r0, r3
 8013278:	f000 f866 	bl	8013348 <prvSampleTimeNow>
 801327c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d130      	bne.n	80132e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d10a      	bne.n	80132a0 <prvProcessTimerOrBlockTask+0x3c>
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	429a      	cmp	r2, r3
 8013290:	d806      	bhi.n	80132a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013292:	f7ff f957 	bl	8012544 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013296:	68f9      	ldr	r1, [r7, #12]
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff ff85 	bl	80131a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801329e:	e024      	b.n	80132ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d008      	beq.n	80132b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80132a6:	4b13      	ldr	r3, [pc, #76]	; (80132f4 <prvProcessTimerOrBlockTask+0x90>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d101      	bne.n	80132b4 <prvProcessTimerOrBlockTask+0x50>
 80132b0:	2301      	movs	r3, #1
 80132b2:	e000      	b.n	80132b6 <prvProcessTimerOrBlockTask+0x52>
 80132b4:	2300      	movs	r3, #0
 80132b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80132b8:	4b0f      	ldr	r3, [pc, #60]	; (80132f8 <prvProcessTimerOrBlockTask+0x94>)
 80132ba:	6818      	ldr	r0, [r3, #0]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	683a      	ldr	r2, [r7, #0]
 80132c4:	4619      	mov	r1, r3
 80132c6:	f7fe fdd9 	bl	8011e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80132ca:	f7ff f93b 	bl	8012544 <xTaskResumeAll>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d10a      	bne.n	80132ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80132d4:	4b09      	ldr	r3, [pc, #36]	; (80132fc <prvProcessTimerOrBlockTask+0x98>)
 80132d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	f3bf 8f6f 	isb	sy
}
 80132e4:	e001      	b.n	80132ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80132e6:	f7ff f92d 	bl	8012544 <xTaskResumeAll>
}
 80132ea:	bf00      	nop
 80132ec:	3710      	adds	r7, #16
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	20001064 	.word	0x20001064
 80132f8:	20001068 	.word	0x20001068
 80132fc:	e000ed04 	.word	0xe000ed04

08013300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013300:	b480      	push	{r7}
 8013302:	b085      	sub	sp, #20
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013308:	4b0e      	ldr	r3, [pc, #56]	; (8013344 <prvGetNextExpireTime+0x44>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d101      	bne.n	8013316 <prvGetNextExpireTime+0x16>
 8013312:	2201      	movs	r2, #1
 8013314:	e000      	b.n	8013318 <prvGetNextExpireTime+0x18>
 8013316:	2200      	movs	r2, #0
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d105      	bne.n	8013330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013324:	4b07      	ldr	r3, [pc, #28]	; (8013344 <prvGetNextExpireTime+0x44>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	60fb      	str	r3, [r7, #12]
 801332e:	e001      	b.n	8013334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013330:	2300      	movs	r3, #0
 8013332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013334:	68fb      	ldr	r3, [r7, #12]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3714      	adds	r7, #20
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr
 8013342:	bf00      	nop
 8013344:	20001060 	.word	0x20001060

08013348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013350:	f7ff f994 	bl	801267c <xTaskGetTickCount>
 8013354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013356:	4b0b      	ldr	r3, [pc, #44]	; (8013384 <prvSampleTimeNow+0x3c>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	429a      	cmp	r2, r3
 801335e:	d205      	bcs.n	801336c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013360:	f000 f930 	bl	80135c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2201      	movs	r2, #1
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	e002      	b.n	8013372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013372:	4a04      	ldr	r2, [pc, #16]	; (8013384 <prvSampleTimeNow+0x3c>)
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013378:	68fb      	ldr	r3, [r7, #12]
}
 801337a:	4618      	mov	r0, r3
 801337c:	3710      	adds	r7, #16
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20001070 	.word	0x20001070

08013388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af00      	add	r7, sp, #0
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	607a      	str	r2, [r7, #4]
 8013394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013396:	2300      	movs	r3, #0
 8013398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	68ba      	ldr	r2, [r7, #8]
 801339e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80133a6:	68ba      	ldr	r2, [r7, #8]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d812      	bhi.n	80133d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	1ad2      	subs	r2, r2, r3
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	699b      	ldr	r3, [r3, #24]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d302      	bcc.n	80133c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80133bc:	2301      	movs	r3, #1
 80133be:	617b      	str	r3, [r7, #20]
 80133c0:	e01b      	b.n	80133fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80133c2:	4b10      	ldr	r3, [pc, #64]	; (8013404 <prvInsertTimerInActiveList+0x7c>)
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	3304      	adds	r3, #4
 80133ca:	4619      	mov	r1, r3
 80133cc:	4610      	mov	r0, r2
 80133ce:	f7fd fe36 	bl	801103e <vListInsert>
 80133d2:	e012      	b.n	80133fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d206      	bcs.n	80133ea <prvInsertTimerInActiveList+0x62>
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d302      	bcc.n	80133ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80133e4:	2301      	movs	r3, #1
 80133e6:	617b      	str	r3, [r7, #20]
 80133e8:	e007      	b.n	80133fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80133ea:	4b07      	ldr	r3, [pc, #28]	; (8013408 <prvInsertTimerInActiveList+0x80>)
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	3304      	adds	r3, #4
 80133f2:	4619      	mov	r1, r3
 80133f4:	4610      	mov	r0, r2
 80133f6:	f7fd fe22 	bl	801103e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80133fa:	697b      	ldr	r3, [r7, #20]
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3718      	adds	r7, #24
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	20001064 	.word	0x20001064
 8013408:	20001060 	.word	0x20001060

0801340c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08e      	sub	sp, #56	; 0x38
 8013410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013412:	e0c6      	b.n	80135a2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	da17      	bge.n	801344a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801341a:	1d3b      	adds	r3, r7, #4
 801341c:	3304      	adds	r3, #4
 801341e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013422:	2b00      	cmp	r3, #0
 8013424:	d109      	bne.n	801343a <prvProcessReceivedCommands+0x2e>
 8013426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	61fb      	str	r3, [r7, #28]
 8013438:	e7fe      	b.n	8013438 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013440:	6850      	ldr	r0, [r2, #4]
 8013442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013444:	6892      	ldr	r2, [r2, #8]
 8013446:	4611      	mov	r1, r2
 8013448:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	f2c0 80a7 	blt.w	80135a0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013458:	695b      	ldr	r3, [r3, #20]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d004      	beq.n	8013468 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	3304      	adds	r3, #4
 8013462:	4618      	mov	r0, r3
 8013464:	f7fd fe24 	bl	80110b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013468:	463b      	mov	r3, r7
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff ff6c 	bl	8013348 <prvSampleTimeNow>
 8013470:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2b09      	cmp	r3, #9
 8013476:	f200 8094 	bhi.w	80135a2 <prvProcessReceivedCommands+0x196>
 801347a:	a201      	add	r2, pc, #4	; (adr r2, 8013480 <prvProcessReceivedCommands+0x74>)
 801347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013480:	080134a9 	.word	0x080134a9
 8013484:	080134a9 	.word	0x080134a9
 8013488:	080134a9 	.word	0x080134a9
 801348c:	0801351b 	.word	0x0801351b
 8013490:	0801352f 	.word	0x0801352f
 8013494:	08013577 	.word	0x08013577
 8013498:	080134a9 	.word	0x080134a9
 801349c:	080134a9 	.word	0x080134a9
 80134a0:	0801351b 	.word	0x0801351b
 80134a4:	0801352f 	.word	0x0801352f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80134a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134ae:	f043 0301 	orr.w	r3, r3, #1
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80134ba:	68ba      	ldr	r2, [r7, #8]
 80134bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134be:	699b      	ldr	r3, [r3, #24]
 80134c0:	18d1      	adds	r1, r2, r3
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134c8:	f7ff ff5e 	bl	8013388 <prvInsertTimerInActiveList>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d067      	beq.n	80135a2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e0:	f003 0304 	and.w	r3, r3, #4
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d05c      	beq.n	80135a2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80134e8:	68ba      	ldr	r2, [r7, #8]
 80134ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ec:	699b      	ldr	r3, [r3, #24]
 80134ee:	441a      	add	r2, r3
 80134f0:	2300      	movs	r3, #0
 80134f2:	9300      	str	r3, [sp, #0]
 80134f4:	2300      	movs	r3, #0
 80134f6:	2100      	movs	r1, #0
 80134f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134fa:	f7ff fe09 	bl	8013110 <xTimerGenericCommand>
 80134fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013500:	6a3b      	ldr	r3, [r7, #32]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d14d      	bne.n	80135a2 <prvProcessReceivedCommands+0x196>
 8013506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	61bb      	str	r3, [r7, #24]
 8013518:	e7fe      	b.n	8013518 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013520:	f023 0301 	bic.w	r3, r3, #1
 8013524:	b2da      	uxtb	r2, r3
 8013526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801352c:	e039      	b.n	80135a2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013534:	f043 0301 	orr.w	r3, r3, #1
 8013538:	b2da      	uxtb	r2, r3
 801353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013540:	68ba      	ldr	r2, [r7, #8]
 8013542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013544:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	699b      	ldr	r3, [r3, #24]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d109      	bne.n	8013562 <prvProcessReceivedCommands+0x156>
 801354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013552:	f383 8811 	msr	BASEPRI, r3
 8013556:	f3bf 8f6f 	isb	sy
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	617b      	str	r3, [r7, #20]
 8013560:	e7fe      	b.n	8013560 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013564:	699a      	ldr	r2, [r3, #24]
 8013566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013568:	18d1      	adds	r1, r2, r3
 801356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801356e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013570:	f7ff ff0a 	bl	8013388 <prvInsertTimerInActiveList>
					break;
 8013574:	e015      	b.n	80135a2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801357c:	f003 0302 	and.w	r3, r3, #2
 8013580:	2b00      	cmp	r3, #0
 8013582:	d103      	bne.n	801358c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8013584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013586:	f000 fbc5 	bl	8013d14 <vPortFree>
 801358a:	e00a      	b.n	80135a2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013592:	f023 0301 	bic.w	r3, r3, #1
 8013596:	b2da      	uxtb	r2, r3
 8013598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801359e:	e000      	b.n	80135a2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80135a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80135a2:	4b07      	ldr	r3, [pc, #28]	; (80135c0 <prvProcessReceivedCommands+0x1b4>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	1d39      	adds	r1, r7, #4
 80135a8:	2200      	movs	r2, #0
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7fe f932 	bl	8011814 <xQueueReceive>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f47f af2e 	bne.w	8013414 <prvProcessReceivedCommands+0x8>
	}
}
 80135b8:	bf00      	nop
 80135ba:	3730      	adds	r7, #48	; 0x30
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	20001068 	.word	0x20001068

080135c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b088      	sub	sp, #32
 80135c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80135ca:	e047      	b.n	801365c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135cc:	4b2d      	ldr	r3, [pc, #180]	; (8013684 <prvSwitchTimerLists+0xc0>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135d6:	4b2b      	ldr	r3, [pc, #172]	; (8013684 <prvSwitchTimerLists+0xc0>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3304      	adds	r3, #4
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fd fd63 	bl	80110b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	6a1b      	ldr	r3, [r3, #32]
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135f8:	f003 0304 	and.w	r3, r3, #4
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d02d      	beq.n	801365c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	699b      	ldr	r3, [r3, #24]
 8013604:	693a      	ldr	r2, [r7, #16]
 8013606:	4413      	add	r3, r2
 8013608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801360a:	68ba      	ldr	r2, [r7, #8]
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	429a      	cmp	r2, r3
 8013610:	d90e      	bls.n	8013630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801361e:	4b19      	ldr	r3, [pc, #100]	; (8013684 <prvSwitchTimerLists+0xc0>)
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	3304      	adds	r3, #4
 8013626:	4619      	mov	r1, r3
 8013628:	4610      	mov	r0, r2
 801362a:	f7fd fd08 	bl	801103e <vListInsert>
 801362e:	e015      	b.n	801365c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013630:	2300      	movs	r3, #0
 8013632:	9300      	str	r3, [sp, #0]
 8013634:	2300      	movs	r3, #0
 8013636:	693a      	ldr	r2, [r7, #16]
 8013638:	2100      	movs	r1, #0
 801363a:	68f8      	ldr	r0, [r7, #12]
 801363c:	f7ff fd68 	bl	8013110 <xTimerGenericCommand>
 8013640:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d109      	bne.n	801365c <prvSwitchTimerLists+0x98>
 8013648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364c:	f383 8811 	msr	BASEPRI, r3
 8013650:	f3bf 8f6f 	isb	sy
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	603b      	str	r3, [r7, #0]
 801365a:	e7fe      	b.n	801365a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801365c:	4b09      	ldr	r3, [pc, #36]	; (8013684 <prvSwitchTimerLists+0xc0>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1b2      	bne.n	80135cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013666:	4b07      	ldr	r3, [pc, #28]	; (8013684 <prvSwitchTimerLists+0xc0>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801366c:	4b06      	ldr	r3, [pc, #24]	; (8013688 <prvSwitchTimerLists+0xc4>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4a04      	ldr	r2, [pc, #16]	; (8013684 <prvSwitchTimerLists+0xc0>)
 8013672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013674:	4a04      	ldr	r2, [pc, #16]	; (8013688 <prvSwitchTimerLists+0xc4>)
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	6013      	str	r3, [r2, #0]
}
 801367a:	bf00      	nop
 801367c:	3718      	adds	r7, #24
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	20001060 	.word	0x20001060
 8013688:	20001064 	.word	0x20001064

0801368c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013692:	f000 f963 	bl	801395c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013696:	4b15      	ldr	r3, [pc, #84]	; (80136ec <prvCheckForValidListAndQueue+0x60>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d120      	bne.n	80136e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801369e:	4814      	ldr	r0, [pc, #80]	; (80136f0 <prvCheckForValidListAndQueue+0x64>)
 80136a0:	f7fd fc7c 	bl	8010f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80136a4:	4813      	ldr	r0, [pc, #76]	; (80136f4 <prvCheckForValidListAndQueue+0x68>)
 80136a6:	f7fd fc79 	bl	8010f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80136aa:	4b13      	ldr	r3, [pc, #76]	; (80136f8 <prvCheckForValidListAndQueue+0x6c>)
 80136ac:	4a10      	ldr	r2, [pc, #64]	; (80136f0 <prvCheckForValidListAndQueue+0x64>)
 80136ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80136b0:	4b12      	ldr	r3, [pc, #72]	; (80136fc <prvCheckForValidListAndQueue+0x70>)
 80136b2:	4a10      	ldr	r2, [pc, #64]	; (80136f4 <prvCheckForValidListAndQueue+0x68>)
 80136b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80136b6:	2300      	movs	r3, #0
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	4b11      	ldr	r3, [pc, #68]	; (8013700 <prvCheckForValidListAndQueue+0x74>)
 80136bc:	4a11      	ldr	r2, [pc, #68]	; (8013704 <prvCheckForValidListAndQueue+0x78>)
 80136be:	2110      	movs	r1, #16
 80136c0:	200a      	movs	r0, #10
 80136c2:	f7fd fd87 	bl	80111d4 <xQueueGenericCreateStatic>
 80136c6:	4602      	mov	r2, r0
 80136c8:	4b08      	ldr	r3, [pc, #32]	; (80136ec <prvCheckForValidListAndQueue+0x60>)
 80136ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80136cc:	4b07      	ldr	r3, [pc, #28]	; (80136ec <prvCheckForValidListAndQueue+0x60>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d005      	beq.n	80136e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80136d4:	4b05      	ldr	r3, [pc, #20]	; (80136ec <prvCheckForValidListAndQueue+0x60>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	490b      	ldr	r1, [pc, #44]	; (8013708 <prvCheckForValidListAndQueue+0x7c>)
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fe fba6 	bl	8011e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136e0:	f000 f96a 	bl	80139b8 <vPortExitCritical>
}
 80136e4:	bf00      	nop
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	20001068 	.word	0x20001068
 80136f0:	20001038 	.word	0x20001038
 80136f4:	2000104c 	.word	0x2000104c
 80136f8:	20001060 	.word	0x20001060
 80136fc:	20001064 	.word	0x20001064
 8013700:	20001114 	.word	0x20001114
 8013704:	20001074 	.word	0x20001074
 8013708:	08017e8c 	.word	0x08017e8c

0801370c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801370c:	b480      	push	{r7}
 801370e:	b085      	sub	sp, #20
 8013710:	af00      	add	r7, sp, #0
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	3b04      	subs	r3, #4
 801371c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	3b04      	subs	r3, #4
 801372a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	f023 0201 	bic.w	r2, r3, #1
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	3b04      	subs	r3, #4
 801373a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801373c:	4a0c      	ldr	r2, [pc, #48]	; (8013770 <pxPortInitialiseStack+0x64>)
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	3b14      	subs	r3, #20
 8013746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	3b04      	subs	r3, #4
 8013752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f06f 0202 	mvn.w	r2, #2
 801375a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	3b20      	subs	r3, #32
 8013760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013762:	68fb      	ldr	r3, [r7, #12]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3714      	adds	r7, #20
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr
 8013770:	08013775 	.word	0x08013775

08013774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013774:	b480      	push	{r7}
 8013776:	b085      	sub	sp, #20
 8013778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801377a:	2300      	movs	r3, #0
 801377c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801377e:	4b11      	ldr	r3, [pc, #68]	; (80137c4 <prvTaskExitError+0x50>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013786:	d009      	beq.n	801379c <prvTaskExitError+0x28>
 8013788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378c:	f383 8811 	msr	BASEPRI, r3
 8013790:	f3bf 8f6f 	isb	sy
 8013794:	f3bf 8f4f 	dsb	sy
 8013798:	60fb      	str	r3, [r7, #12]
 801379a:	e7fe      	b.n	801379a <prvTaskExitError+0x26>
 801379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a0:	f383 8811 	msr	BASEPRI, r3
 80137a4:	f3bf 8f6f 	isb	sy
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80137ae:	bf00      	nop
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d0fc      	beq.n	80137b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137b6:	bf00      	nop
 80137b8:	3714      	adds	r7, #20
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop
 80137c4:	20000174 	.word	0x20000174
	...

080137d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80137d0:	4b07      	ldr	r3, [pc, #28]	; (80137f0 <pxCurrentTCBConst2>)
 80137d2:	6819      	ldr	r1, [r3, #0]
 80137d4:	6808      	ldr	r0, [r1, #0]
 80137d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137da:	f380 8809 	msr	PSP, r0
 80137de:	f3bf 8f6f 	isb	sy
 80137e2:	f04f 0000 	mov.w	r0, #0
 80137e6:	f380 8811 	msr	BASEPRI, r0
 80137ea:	4770      	bx	lr
 80137ec:	f3af 8000 	nop.w

080137f0 <pxCurrentTCBConst2>:
 80137f0:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137f4:	bf00      	nop
 80137f6:	bf00      	nop

080137f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80137f8:	4808      	ldr	r0, [pc, #32]	; (801381c <prvPortStartFirstTask+0x24>)
 80137fa:	6800      	ldr	r0, [r0, #0]
 80137fc:	6800      	ldr	r0, [r0, #0]
 80137fe:	f380 8808 	msr	MSP, r0
 8013802:	f04f 0000 	mov.w	r0, #0
 8013806:	f380 8814 	msr	CONTROL, r0
 801380a:	b662      	cpsie	i
 801380c:	b661      	cpsie	f
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	f3bf 8f6f 	isb	sy
 8013816:	df00      	svc	0
 8013818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801381a:	bf00      	nop
 801381c:	e000ed08 	.word	0xe000ed08

08013820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b086      	sub	sp, #24
 8013824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013826:	4b44      	ldr	r3, [pc, #272]	; (8013938 <xPortStartScheduler+0x118>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4a44      	ldr	r2, [pc, #272]	; (801393c <xPortStartScheduler+0x11c>)
 801382c:	4293      	cmp	r3, r2
 801382e:	d109      	bne.n	8013844 <xPortStartScheduler+0x24>
 8013830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	613b      	str	r3, [r7, #16]
 8013842:	e7fe      	b.n	8013842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013844:	4b3c      	ldr	r3, [pc, #240]	; (8013938 <xPortStartScheduler+0x118>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4a3d      	ldr	r2, [pc, #244]	; (8013940 <xPortStartScheduler+0x120>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d109      	bne.n	8013862 <xPortStartScheduler+0x42>
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	60fb      	str	r3, [r7, #12]
 8013860:	e7fe      	b.n	8013860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013862:	4b38      	ldr	r3, [pc, #224]	; (8013944 <xPortStartScheduler+0x124>)
 8013864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	b2db      	uxtb	r3, r3
 801386c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	22ff      	movs	r2, #255	; 0xff
 8013872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	b2db      	uxtb	r3, r3
 801387a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801387c:	78fb      	ldrb	r3, [r7, #3]
 801387e:	b2db      	uxtb	r3, r3
 8013880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013884:	b2da      	uxtb	r2, r3
 8013886:	4b30      	ldr	r3, [pc, #192]	; (8013948 <xPortStartScheduler+0x128>)
 8013888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801388a:	4b30      	ldr	r3, [pc, #192]	; (801394c <xPortStartScheduler+0x12c>)
 801388c:	2207      	movs	r2, #7
 801388e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013890:	e009      	b.n	80138a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013892:	4b2e      	ldr	r3, [pc, #184]	; (801394c <xPortStartScheduler+0x12c>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	3b01      	subs	r3, #1
 8013898:	4a2c      	ldr	r2, [pc, #176]	; (801394c <xPortStartScheduler+0x12c>)
 801389a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801389c:	78fb      	ldrb	r3, [r7, #3]
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	005b      	lsls	r3, r3, #1
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138a6:	78fb      	ldrb	r3, [r7, #3]
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138ae:	2b80      	cmp	r3, #128	; 0x80
 80138b0:	d0ef      	beq.n	8013892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80138b2:	4b26      	ldr	r3, [pc, #152]	; (801394c <xPortStartScheduler+0x12c>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f1c3 0307 	rsb	r3, r3, #7
 80138ba:	2b04      	cmp	r3, #4
 80138bc:	d009      	beq.n	80138d2 <xPortStartScheduler+0xb2>
 80138be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c2:	f383 8811 	msr	BASEPRI, r3
 80138c6:	f3bf 8f6f 	isb	sy
 80138ca:	f3bf 8f4f 	dsb	sy
 80138ce:	60bb      	str	r3, [r7, #8]
 80138d0:	e7fe      	b.n	80138d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138d2:	4b1e      	ldr	r3, [pc, #120]	; (801394c <xPortStartScheduler+0x12c>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	021b      	lsls	r3, r3, #8
 80138d8:	4a1c      	ldr	r2, [pc, #112]	; (801394c <xPortStartScheduler+0x12c>)
 80138da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80138dc:	4b1b      	ldr	r3, [pc, #108]	; (801394c <xPortStartScheduler+0x12c>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80138e4:	4a19      	ldr	r2, [pc, #100]	; (801394c <xPortStartScheduler+0x12c>)
 80138e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	b2da      	uxtb	r2, r3
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138f0:	4b17      	ldr	r3, [pc, #92]	; (8013950 <xPortStartScheduler+0x130>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4a16      	ldr	r2, [pc, #88]	; (8013950 <xPortStartScheduler+0x130>)
 80138f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80138fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138fc:	4b14      	ldr	r3, [pc, #80]	; (8013950 <xPortStartScheduler+0x130>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a13      	ldr	r2, [pc, #76]	; (8013950 <xPortStartScheduler+0x130>)
 8013902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013908:	f000 f8d6 	bl	8013ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801390c:	4b11      	ldr	r3, [pc, #68]	; (8013954 <xPortStartScheduler+0x134>)
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013912:	f000 f8f5 	bl	8013b00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013916:	4b10      	ldr	r3, [pc, #64]	; (8013958 <xPortStartScheduler+0x138>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a0f      	ldr	r2, [pc, #60]	; (8013958 <xPortStartScheduler+0x138>)
 801391c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013922:	f7ff ff69 	bl	80137f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013926:	f7fe ff71 	bl	801280c <vTaskSwitchContext>
	prvTaskExitError();
 801392a:	f7ff ff23 	bl	8013774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801392e:	2300      	movs	r3, #0
}
 8013930:	4618      	mov	r0, r3
 8013932:	3718      	adds	r7, #24
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}
 8013938:	e000ed00 	.word	0xe000ed00
 801393c:	410fc271 	.word	0x410fc271
 8013940:	410fc270 	.word	0x410fc270
 8013944:	e000e400 	.word	0xe000e400
 8013948:	20001164 	.word	0x20001164
 801394c:	20001168 	.word	0x20001168
 8013950:	e000ed20 	.word	0xe000ed20
 8013954:	20000174 	.word	0x20000174
 8013958:	e000ef34 	.word	0xe000ef34

0801395c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013966:	f383 8811 	msr	BASEPRI, r3
 801396a:	f3bf 8f6f 	isb	sy
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013974:	4b0e      	ldr	r3, [pc, #56]	; (80139b0 <vPortEnterCritical+0x54>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	3301      	adds	r3, #1
 801397a:	4a0d      	ldr	r2, [pc, #52]	; (80139b0 <vPortEnterCritical+0x54>)
 801397c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801397e:	4b0c      	ldr	r3, [pc, #48]	; (80139b0 <vPortEnterCritical+0x54>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	2b01      	cmp	r3, #1
 8013984:	d10e      	bne.n	80139a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013986:	4b0b      	ldr	r3, [pc, #44]	; (80139b4 <vPortEnterCritical+0x58>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	b2db      	uxtb	r3, r3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d009      	beq.n	80139a4 <vPortEnterCritical+0x48>
 8013990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013994:	f383 8811 	msr	BASEPRI, r3
 8013998:	f3bf 8f6f 	isb	sy
 801399c:	f3bf 8f4f 	dsb	sy
 80139a0:	603b      	str	r3, [r7, #0]
 80139a2:	e7fe      	b.n	80139a2 <vPortEnterCritical+0x46>
	}
}
 80139a4:	bf00      	nop
 80139a6:	370c      	adds	r7, #12
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	20000174 	.word	0x20000174
 80139b4:	e000ed04 	.word	0xe000ed04

080139b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80139b8:	b480      	push	{r7}
 80139ba:	b083      	sub	sp, #12
 80139bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80139be:	4b11      	ldr	r3, [pc, #68]	; (8013a04 <vPortExitCritical+0x4c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d109      	bne.n	80139da <vPortExitCritical+0x22>
 80139c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ca:	f383 8811 	msr	BASEPRI, r3
 80139ce:	f3bf 8f6f 	isb	sy
 80139d2:	f3bf 8f4f 	dsb	sy
 80139d6:	607b      	str	r3, [r7, #4]
 80139d8:	e7fe      	b.n	80139d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80139da:	4b0a      	ldr	r3, [pc, #40]	; (8013a04 <vPortExitCritical+0x4c>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	3b01      	subs	r3, #1
 80139e0:	4a08      	ldr	r2, [pc, #32]	; (8013a04 <vPortExitCritical+0x4c>)
 80139e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139e4:	4b07      	ldr	r3, [pc, #28]	; (8013a04 <vPortExitCritical+0x4c>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d104      	bne.n	80139f6 <vPortExitCritical+0x3e>
 80139ec:	2300      	movs	r3, #0
 80139ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80139f6:	bf00      	nop
 80139f8:	370c      	adds	r7, #12
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	20000174 	.word	0x20000174
	...

08013a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013a10:	f3ef 8009 	mrs	r0, PSP
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	4b15      	ldr	r3, [pc, #84]	; (8013a70 <pxCurrentTCBConst>)
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	f01e 0f10 	tst.w	lr, #16
 8013a20:	bf08      	it	eq
 8013a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a2a:	6010      	str	r0, [r2, #0]
 8013a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013a34:	f380 8811 	msr	BASEPRI, r0
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	f3bf 8f6f 	isb	sy
 8013a40:	f7fe fee4 	bl	801280c <vTaskSwitchContext>
 8013a44:	f04f 0000 	mov.w	r0, #0
 8013a48:	f380 8811 	msr	BASEPRI, r0
 8013a4c:	bc09      	pop	{r0, r3}
 8013a4e:	6819      	ldr	r1, [r3, #0]
 8013a50:	6808      	ldr	r0, [r1, #0]
 8013a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a56:	f01e 0f10 	tst.w	lr, #16
 8013a5a:	bf08      	it	eq
 8013a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a60:	f380 8809 	msr	PSP, r0
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	f3af 8000 	nop.w

08013a70 <pxCurrentTCBConst>:
 8013a70:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a74:	bf00      	nop
 8013a76:	bf00      	nop

08013a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a82:	f383 8811 	msr	BASEPRI, r3
 8013a86:	f3bf 8f6f 	isb	sy
 8013a8a:	f3bf 8f4f 	dsb	sy
 8013a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a90:	f7fe fe04 	bl	801269c <xTaskIncrementTick>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d003      	beq.n	8013aa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a9a:	4b06      	ldr	r3, [pc, #24]	; (8013ab4 <SysTick_Handler+0x3c>)
 8013a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aa0:	601a      	str	r2, [r3, #0]
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013aac:	bf00      	nop
 8013aae:	3708      	adds	r7, #8
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	e000ed04 	.word	0xe000ed04

08013ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013ab8:	b480      	push	{r7}
 8013aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013abc:	4b0b      	ldr	r3, [pc, #44]	; (8013aec <vPortSetupTimerInterrupt+0x34>)
 8013abe:	2200      	movs	r2, #0
 8013ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ac2:	4b0b      	ldr	r3, [pc, #44]	; (8013af0 <vPortSetupTimerInterrupt+0x38>)
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ac8:	4b0a      	ldr	r3, [pc, #40]	; (8013af4 <vPortSetupTimerInterrupt+0x3c>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4a0a      	ldr	r2, [pc, #40]	; (8013af8 <vPortSetupTimerInterrupt+0x40>)
 8013ace:	fba2 2303 	umull	r2, r3, r2, r3
 8013ad2:	099b      	lsrs	r3, r3, #6
 8013ad4:	4a09      	ldr	r2, [pc, #36]	; (8013afc <vPortSetupTimerInterrupt+0x44>)
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013ada:	4b04      	ldr	r3, [pc, #16]	; (8013aec <vPortSetupTimerInterrupt+0x34>)
 8013adc:	2207      	movs	r2, #7
 8013ade:	601a      	str	r2, [r3, #0]
}
 8013ae0:	bf00      	nop
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr
 8013aea:	bf00      	nop
 8013aec:	e000e010 	.word	0xe000e010
 8013af0:	e000e018 	.word	0xe000e018
 8013af4:	20000058 	.word	0x20000058
 8013af8:	10624dd3 	.word	0x10624dd3
 8013afc:	e000e014 	.word	0xe000e014

08013b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013b10 <vPortEnableVFP+0x10>
 8013b04:	6801      	ldr	r1, [r0, #0]
 8013b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013b0a:	6001      	str	r1, [r0, #0]
 8013b0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013b0e:	bf00      	nop
 8013b10:	e000ed88 	.word	0xe000ed88

08013b14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013b14:	b480      	push	{r7}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b1a:	f3ef 8305 	mrs	r3, IPSR
 8013b1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b0f      	cmp	r3, #15
 8013b24:	d913      	bls.n	8013b4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b26:	4a16      	ldr	r2, [pc, #88]	; (8013b80 <vPortValidateInterruptPriority+0x6c>)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013b30:	4b14      	ldr	r3, [pc, #80]	; (8013b84 <vPortValidateInterruptPriority+0x70>)
 8013b32:	781b      	ldrb	r3, [r3, #0]
 8013b34:	7afa      	ldrb	r2, [r7, #11]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d209      	bcs.n	8013b4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b3e:	f383 8811 	msr	BASEPRI, r3
 8013b42:	f3bf 8f6f 	isb	sy
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	607b      	str	r3, [r7, #4]
 8013b4c:	e7fe      	b.n	8013b4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b4e:	4b0e      	ldr	r3, [pc, #56]	; (8013b88 <vPortValidateInterruptPriority+0x74>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013b56:	4b0d      	ldr	r3, [pc, #52]	; (8013b8c <vPortValidateInterruptPriority+0x78>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d909      	bls.n	8013b72 <vPortValidateInterruptPriority+0x5e>
 8013b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	603b      	str	r3, [r7, #0]
 8013b70:	e7fe      	b.n	8013b70 <vPortValidateInterruptPriority+0x5c>
	}
 8013b72:	bf00      	nop
 8013b74:	3714      	adds	r7, #20
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop
 8013b80:	e000e3f0 	.word	0xe000e3f0
 8013b84:	20001164 	.word	0x20001164
 8013b88:	e000ed0c 	.word	0xe000ed0c
 8013b8c:	20001168 	.word	0x20001168

08013b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b08a      	sub	sp, #40	; 0x28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013b9c:	f7fe fcc4 	bl	8012528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013ba0:	4b57      	ldr	r3, [pc, #348]	; (8013d00 <pvPortMalloc+0x170>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d101      	bne.n	8013bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013ba8:	f000 f90c 	bl	8013dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013bac:	4b55      	ldr	r3, [pc, #340]	; (8013d04 <pvPortMalloc+0x174>)
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	4013      	ands	r3, r2
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f040 808c 	bne.w	8013cd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01c      	beq.n	8013bfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013bc0:	2208      	movs	r2, #8
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f003 0307 	and.w	r3, r3, #7
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d013      	beq.n	8013bfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f023 0307 	bic.w	r3, r3, #7
 8013bd8:	3308      	adds	r3, #8
 8013bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f003 0307 	and.w	r3, r3, #7
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d009      	beq.n	8013bfa <pvPortMalloc+0x6a>
 8013be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bea:	f383 8811 	msr	BASEPRI, r3
 8013bee:	f3bf 8f6f 	isb	sy
 8013bf2:	f3bf 8f4f 	dsb	sy
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	e7fe      	b.n	8013bf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d068      	beq.n	8013cd2 <pvPortMalloc+0x142>
 8013c00:	4b41      	ldr	r3, [pc, #260]	; (8013d08 <pvPortMalloc+0x178>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d863      	bhi.n	8013cd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c0a:	4b40      	ldr	r3, [pc, #256]	; (8013d0c <pvPortMalloc+0x17c>)
 8013c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c0e:	4b3f      	ldr	r3, [pc, #252]	; (8013d0c <pvPortMalloc+0x17c>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c14:	e004      	b.n	8013c20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d903      	bls.n	8013c32 <pvPortMalloc+0xa2>
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1f1      	bne.n	8013c16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c32:	4b33      	ldr	r3, [pc, #204]	; (8013d00 <pvPortMalloc+0x170>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d04a      	beq.n	8013cd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c3c:	6a3b      	ldr	r3, [r7, #32]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2208      	movs	r2, #8
 8013c42:	4413      	add	r3, r2
 8013c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	685a      	ldr	r2, [r3, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	1ad2      	subs	r2, r2, r3
 8013c56:	2308      	movs	r3, #8
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d91e      	bls.n	8013c9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	4413      	add	r3, r2
 8013c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f003 0307 	and.w	r3, r3, #7
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d009      	beq.n	8013c84 <pvPortMalloc+0xf4>
 8013c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c74:	f383 8811 	msr	BASEPRI, r3
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	f3bf 8f4f 	dsb	sy
 8013c80:	613b      	str	r3, [r7, #16]
 8013c82:	e7fe      	b.n	8013c82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c86:	685a      	ldr	r2, [r3, #4]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	1ad2      	subs	r2, r2, r3
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013c96:	69b8      	ldr	r0, [r7, #24]
 8013c98:	f000 f8f6 	bl	8013e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013c9c:	4b1a      	ldr	r3, [pc, #104]	; (8013d08 <pvPortMalloc+0x178>)
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	1ad3      	subs	r3, r2, r3
 8013ca6:	4a18      	ldr	r2, [pc, #96]	; (8013d08 <pvPortMalloc+0x178>)
 8013ca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013caa:	4b17      	ldr	r3, [pc, #92]	; (8013d08 <pvPortMalloc+0x178>)
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	4b18      	ldr	r3, [pc, #96]	; (8013d10 <pvPortMalloc+0x180>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d203      	bcs.n	8013cbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013cb6:	4b14      	ldr	r3, [pc, #80]	; (8013d08 <pvPortMalloc+0x178>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4a15      	ldr	r2, [pc, #84]	; (8013d10 <pvPortMalloc+0x180>)
 8013cbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	685a      	ldr	r2, [r3, #4]
 8013cc2:	4b10      	ldr	r3, [pc, #64]	; (8013d04 <pvPortMalloc+0x174>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	431a      	orrs	r2, r3
 8013cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	2200      	movs	r2, #0
 8013cd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013cd2:	f7fe fc37 	bl	8012544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	f003 0307 	and.w	r3, r3, #7
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d009      	beq.n	8013cf4 <pvPortMalloc+0x164>
 8013ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce4:	f383 8811 	msr	BASEPRI, r3
 8013ce8:	f3bf 8f6f 	isb	sy
 8013cec:	f3bf 8f4f 	dsb	sy
 8013cf0:	60fb      	str	r3, [r7, #12]
 8013cf2:	e7fe      	b.n	8013cf2 <pvPortMalloc+0x162>
	return pvReturn;
 8013cf4:	69fb      	ldr	r3, [r7, #28]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3728      	adds	r7, #40	; 0x28
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	2000d4c4 	.word	0x2000d4c4
 8013d04:	2000d4d0 	.word	0x2000d4d0
 8013d08:	2000d4c8 	.word	0x2000d4c8
 8013d0c:	2000d4bc 	.word	0x2000d4bc
 8013d10:	2000d4cc 	.word	0x2000d4cc

08013d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b086      	sub	sp, #24
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d046      	beq.n	8013db4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d26:	2308      	movs	r3, #8
 8013d28:	425b      	negs	r3, r3
 8013d2a:	697a      	ldr	r2, [r7, #20]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	685a      	ldr	r2, [r3, #4]
 8013d38:	4b20      	ldr	r3, [pc, #128]	; (8013dbc <vPortFree+0xa8>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d109      	bne.n	8013d56 <vPortFree+0x42>
 8013d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d46:	f383 8811 	msr	BASEPRI, r3
 8013d4a:	f3bf 8f6f 	isb	sy
 8013d4e:	f3bf 8f4f 	dsb	sy
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	e7fe      	b.n	8013d54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d009      	beq.n	8013d72 <vPortFree+0x5e>
 8013d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d62:	f383 8811 	msr	BASEPRI, r3
 8013d66:	f3bf 8f6f 	isb	sy
 8013d6a:	f3bf 8f4f 	dsb	sy
 8013d6e:	60bb      	str	r3, [r7, #8]
 8013d70:	e7fe      	b.n	8013d70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	685a      	ldr	r2, [r3, #4]
 8013d76:	4b11      	ldr	r3, [pc, #68]	; (8013dbc <vPortFree+0xa8>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4013      	ands	r3, r2
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d019      	beq.n	8013db4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d115      	bne.n	8013db4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	4b0b      	ldr	r3, [pc, #44]	; (8013dbc <vPortFree+0xa8>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	43db      	mvns	r3, r3
 8013d92:	401a      	ands	r2, r3
 8013d94:	693b      	ldr	r3, [r7, #16]
 8013d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013d98:	f7fe fbc6 	bl	8012528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	685a      	ldr	r2, [r3, #4]
 8013da0:	4b07      	ldr	r3, [pc, #28]	; (8013dc0 <vPortFree+0xac>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4413      	add	r3, r2
 8013da6:	4a06      	ldr	r2, [pc, #24]	; (8013dc0 <vPortFree+0xac>)
 8013da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013daa:	6938      	ldr	r0, [r7, #16]
 8013dac:	f000 f86c 	bl	8013e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013db0:	f7fe fbc8 	bl	8012544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013db4:	bf00      	nop
 8013db6:	3718      	adds	r7, #24
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	2000d4d0 	.word	0x2000d4d0
 8013dc0:	2000d4c8 	.word	0x2000d4c8

08013dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b085      	sub	sp, #20
 8013dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013dca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013dd0:	4b27      	ldr	r3, [pc, #156]	; (8013e70 <prvHeapInit+0xac>)
 8013dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f003 0307 	and.w	r3, r3, #7
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00c      	beq.n	8013df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	3307      	adds	r3, #7
 8013de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f023 0307 	bic.w	r3, r3, #7
 8013dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	4a1f      	ldr	r2, [pc, #124]	; (8013e70 <prvHeapInit+0xac>)
 8013df4:	4413      	add	r3, r2
 8013df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013dfc:	4a1d      	ldr	r2, [pc, #116]	; (8013e74 <prvHeapInit+0xb0>)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013e02:	4b1c      	ldr	r3, [pc, #112]	; (8013e74 <prvHeapInit+0xb0>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	68ba      	ldr	r2, [r7, #8]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e10:	2208      	movs	r2, #8
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	1a9b      	subs	r3, r3, r2
 8013e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f023 0307 	bic.w	r3, r3, #7
 8013e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	4a15      	ldr	r2, [pc, #84]	; (8013e78 <prvHeapInit+0xb4>)
 8013e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e26:	4b14      	ldr	r3, [pc, #80]	; (8013e78 <prvHeapInit+0xb4>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e2e:	4b12      	ldr	r3, [pc, #72]	; (8013e78 <prvHeapInit+0xb4>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	2200      	movs	r2, #0
 8013e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	1ad2      	subs	r2, r2, r3
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e44:	4b0c      	ldr	r3, [pc, #48]	; (8013e78 <prvHeapInit+0xb4>)
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	4a0a      	ldr	r2, [pc, #40]	; (8013e7c <prvHeapInit+0xb8>)
 8013e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	4a09      	ldr	r2, [pc, #36]	; (8013e80 <prvHeapInit+0xbc>)
 8013e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e5c:	4b09      	ldr	r3, [pc, #36]	; (8013e84 <prvHeapInit+0xc0>)
 8013e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013e62:	601a      	str	r2, [r3, #0]
}
 8013e64:	bf00      	nop
 8013e66:	3714      	adds	r7, #20
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr
 8013e70:	2000116c 	.word	0x2000116c
 8013e74:	2000d4bc 	.word	0x2000d4bc
 8013e78:	2000d4c4 	.word	0x2000d4c4
 8013e7c:	2000d4cc 	.word	0x2000d4cc
 8013e80:	2000d4c8 	.word	0x2000d4c8
 8013e84:	2000d4d0 	.word	0x2000d4d0

08013e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b085      	sub	sp, #20
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013e90:	4b28      	ldr	r3, [pc, #160]	; (8013f34 <prvInsertBlockIntoFreeList+0xac>)
 8013e92:	60fb      	str	r3, [r7, #12]
 8013e94:	e002      	b.n	8013e9c <prvInsertBlockIntoFreeList+0x14>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	60fb      	str	r3, [r7, #12]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d8f7      	bhi.n	8013e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	68ba      	ldr	r2, [r7, #8]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d108      	bne.n	8013eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	685a      	ldr	r2, [r3, #4]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	441a      	add	r2, r3
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	68ba      	ldr	r2, [r7, #8]
 8013ed4:	441a      	add	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d118      	bne.n	8013f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	4b15      	ldr	r3, [pc, #84]	; (8013f38 <prvInsertBlockIntoFreeList+0xb0>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d00d      	beq.n	8013f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685a      	ldr	r2, [r3, #4]
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	441a      	add	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	601a      	str	r2, [r3, #0]
 8013f04:	e008      	b.n	8013f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f06:	4b0c      	ldr	r3, [pc, #48]	; (8013f38 <prvInsertBlockIntoFreeList+0xb0>)
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	e003      	b.n	8013f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d002      	beq.n	8013f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f26:	bf00      	nop
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	2000d4bc 	.word	0x2000d4bc
 8013f38:	2000d4c4 	.word	0x2000d4c4

08013f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013f40:	2200      	movs	r2, #0
 8013f42:	4912      	ldr	r1, [pc, #72]	; (8013f8c <MX_USB_DEVICE_Init+0x50>)
 8013f44:	4812      	ldr	r0, [pc, #72]	; (8013f90 <MX_USB_DEVICE_Init+0x54>)
 8013f46:	f7fb fdb6 	bl	800fab6 <USBD_Init>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d001      	beq.n	8013f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013f50:	f7ef fd4e 	bl	80039f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013f54:	490f      	ldr	r1, [pc, #60]	; (8013f94 <MX_USB_DEVICE_Init+0x58>)
 8013f56:	480e      	ldr	r0, [pc, #56]	; (8013f90 <MX_USB_DEVICE_Init+0x54>)
 8013f58:	f7fb fdd8 	bl	800fb0c <USBD_RegisterClass>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013f62:	f7ef fd45 	bl	80039f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013f66:	490c      	ldr	r1, [pc, #48]	; (8013f98 <MX_USB_DEVICE_Init+0x5c>)
 8013f68:	4809      	ldr	r0, [pc, #36]	; (8013f90 <MX_USB_DEVICE_Init+0x54>)
 8013f6a:	f7fb fd35 	bl	800f9d8 <USBD_CDC_RegisterInterface>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013f74:	f7ef fd3c 	bl	80039f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013f78:	4805      	ldr	r0, [pc, #20]	; (8013f90 <MX_USB_DEVICE_Init+0x54>)
 8013f7a:	f7fb fde1 	bl	800fb40 <USBD_Start>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d001      	beq.n	8013f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013f84:	f7ef fd34 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013f88:	bf00      	nop
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	20000188 	.word	0x20000188
 8013f90:	2000ec80 	.word	0x2000ec80
 8013f94:	20000070 	.word	0x20000070
 8013f98:	20000178 	.word	0x20000178

08013f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	4905      	ldr	r1, [pc, #20]	; (8013fb8 <CDC_Init_FS+0x1c>)
 8013fa4:	4805      	ldr	r0, [pc, #20]	; (8013fbc <CDC_Init_FS+0x20>)
 8013fa6:	f7fb fd2e 	bl	800fa06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013faa:	4905      	ldr	r1, [pc, #20]	; (8013fc0 <CDC_Init_FS+0x24>)
 8013fac:	4803      	ldr	r0, [pc, #12]	; (8013fbc <CDC_Init_FS+0x20>)
 8013fae:	f7fb fd44 	bl	800fa3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	2000f744 	.word	0x2000f744
 8013fbc:	2000ec80 	.word	0x2000ec80
 8013fc0:	2000ef44 	.word	0x2000ef44

08013fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr

08013fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	4603      	mov	r3, r0
 8013fdc:	6039      	str	r1, [r7, #0]
 8013fde:	71fb      	strb	r3, [r7, #7]
 8013fe0:	4613      	mov	r3, r2
 8013fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013fe4:	79fb      	ldrb	r3, [r7, #7]
 8013fe6:	2b23      	cmp	r3, #35	; 0x23
 8013fe8:	d84a      	bhi.n	8014080 <CDC_Control_FS+0xac>
 8013fea:	a201      	add	r2, pc, #4	; (adr r2, 8013ff0 <CDC_Control_FS+0x1c>)
 8013fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ff0:	08014081 	.word	0x08014081
 8013ff4:	08014081 	.word	0x08014081
 8013ff8:	08014081 	.word	0x08014081
 8013ffc:	08014081 	.word	0x08014081
 8014000:	08014081 	.word	0x08014081
 8014004:	08014081 	.word	0x08014081
 8014008:	08014081 	.word	0x08014081
 801400c:	08014081 	.word	0x08014081
 8014010:	08014081 	.word	0x08014081
 8014014:	08014081 	.word	0x08014081
 8014018:	08014081 	.word	0x08014081
 801401c:	08014081 	.word	0x08014081
 8014020:	08014081 	.word	0x08014081
 8014024:	08014081 	.word	0x08014081
 8014028:	08014081 	.word	0x08014081
 801402c:	08014081 	.word	0x08014081
 8014030:	08014081 	.word	0x08014081
 8014034:	08014081 	.word	0x08014081
 8014038:	08014081 	.word	0x08014081
 801403c:	08014081 	.word	0x08014081
 8014040:	08014081 	.word	0x08014081
 8014044:	08014081 	.word	0x08014081
 8014048:	08014081 	.word	0x08014081
 801404c:	08014081 	.word	0x08014081
 8014050:	08014081 	.word	0x08014081
 8014054:	08014081 	.word	0x08014081
 8014058:	08014081 	.word	0x08014081
 801405c:	08014081 	.word	0x08014081
 8014060:	08014081 	.word	0x08014081
 8014064:	08014081 	.word	0x08014081
 8014068:	08014081 	.word	0x08014081
 801406c:	08014081 	.word	0x08014081
 8014070:	08014081 	.word	0x08014081
 8014074:	08014081 	.word	0x08014081
 8014078:	08014081 	.word	0x08014081
 801407c:	08014081 	.word	0x08014081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014080:	bf00      	nop
  }

  return (USBD_OK);
 8014082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014084:	4618      	mov	r0, r3
 8014086:	370c      	adds	r7, #12
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr

08014090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801409a:	6879      	ldr	r1, [r7, #4]
 801409c:	4805      	ldr	r0, [pc, #20]	; (80140b4 <CDC_Receive_FS+0x24>)
 801409e:	f7fb fccc 	bl	800fa3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80140a2:	4804      	ldr	r0, [pc, #16]	; (80140b4 <CDC_Receive_FS+0x24>)
 80140a4:	f7fb fcdd 	bl	800fa62 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80140a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3708      	adds	r7, #8
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	2000ec80 	.word	0x2000ec80

080140b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
 80140be:	4603      	mov	r3, r0
 80140c0:	6039      	str	r1, [r7, #0]
 80140c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	2212      	movs	r2, #18
 80140c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80140ca:	4b03      	ldr	r3, [pc, #12]	; (80140d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	370c      	adds	r7, #12
 80140d0:	46bd      	mov	sp, r7
 80140d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d6:	4770      	bx	lr
 80140d8:	200001a8 	.word	0x200001a8

080140dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140dc:	b480      	push	{r7}
 80140de:	b083      	sub	sp, #12
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	4603      	mov	r3, r0
 80140e4:	6039      	str	r1, [r7, #0]
 80140e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	2204      	movs	r2, #4
 80140ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80140ee:	4b03      	ldr	r3, [pc, #12]	; (80140fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	370c      	adds	r7, #12
 80140f4:	46bd      	mov	sp, r7
 80140f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fa:	4770      	bx	lr
 80140fc:	200001c8 	.word	0x200001c8

08014100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	4603      	mov	r3, r0
 8014108:	6039      	str	r1, [r7, #0]
 801410a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801410c:	79fb      	ldrb	r3, [r7, #7]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d105      	bne.n	801411e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014112:	683a      	ldr	r2, [r7, #0]
 8014114:	4907      	ldr	r1, [pc, #28]	; (8014134 <USBD_FS_ProductStrDescriptor+0x34>)
 8014116:	4808      	ldr	r0, [pc, #32]	; (8014138 <USBD_FS_ProductStrDescriptor+0x38>)
 8014118:	f7fc fce8 	bl	8010aec <USBD_GetString>
 801411c:	e004      	b.n	8014128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801411e:	683a      	ldr	r2, [r7, #0]
 8014120:	4904      	ldr	r1, [pc, #16]	; (8014134 <USBD_FS_ProductStrDescriptor+0x34>)
 8014122:	4805      	ldr	r0, [pc, #20]	; (8014138 <USBD_FS_ProductStrDescriptor+0x38>)
 8014124:	f7fc fce2 	bl	8010aec <USBD_GetString>
  }
  return USBD_StrDesc;
 8014128:	4b02      	ldr	r3, [pc, #8]	; (8014134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801412a:	4618      	mov	r0, r3
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	2000ff44 	.word	0x2000ff44
 8014138:	08017e94 	.word	0x08017e94

0801413c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	6039      	str	r1, [r7, #0]
 8014146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014148:	683a      	ldr	r2, [r7, #0]
 801414a:	4904      	ldr	r1, [pc, #16]	; (801415c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801414c:	4804      	ldr	r0, [pc, #16]	; (8014160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801414e:	f7fc fccd 	bl	8010aec <USBD_GetString>
  return USBD_StrDesc;
 8014152:	4b02      	ldr	r3, [pc, #8]	; (801415c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	2000ff44 	.word	0x2000ff44
 8014160:	08017eac 	.word	0x08017eac

08014164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	4603      	mov	r3, r0
 801416c:	6039      	str	r1, [r7, #0]
 801416e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	221a      	movs	r2, #26
 8014174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014176:	f000 f855 	bl	8014224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801417a:	4b02      	ldr	r3, [pc, #8]	; (8014184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801417c:	4618      	mov	r0, r3
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	200001cc 	.word	0x200001cc

08014188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	4603      	mov	r3, r0
 8014190:	6039      	str	r1, [r7, #0]
 8014192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014194:	79fb      	ldrb	r3, [r7, #7]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d105      	bne.n	80141a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801419a:	683a      	ldr	r2, [r7, #0]
 801419c:	4907      	ldr	r1, [pc, #28]	; (80141bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801419e:	4808      	ldr	r0, [pc, #32]	; (80141c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80141a0:	f7fc fca4 	bl	8010aec <USBD_GetString>
 80141a4:	e004      	b.n	80141b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80141a6:	683a      	ldr	r2, [r7, #0]
 80141a8:	4904      	ldr	r1, [pc, #16]	; (80141bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80141aa:	4805      	ldr	r0, [pc, #20]	; (80141c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80141ac:	f7fc fc9e 	bl	8010aec <USBD_GetString>
  }
  return USBD_StrDesc;
 80141b0:	4b02      	ldr	r3, [pc, #8]	; (80141bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3708      	adds	r7, #8
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	2000ff44 	.word	0x2000ff44
 80141c0:	08017ec0 	.word	0x08017ec0

080141c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	4603      	mov	r3, r0
 80141cc:	6039      	str	r1, [r7, #0]
 80141ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80141d0:	79fb      	ldrb	r3, [r7, #7]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d105      	bne.n	80141e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	4907      	ldr	r1, [pc, #28]	; (80141f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80141da:	4808      	ldr	r0, [pc, #32]	; (80141fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80141dc:	f7fc fc86 	bl	8010aec <USBD_GetString>
 80141e0:	e004      	b.n	80141ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80141e2:	683a      	ldr	r2, [r7, #0]
 80141e4:	4904      	ldr	r1, [pc, #16]	; (80141f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80141e6:	4805      	ldr	r0, [pc, #20]	; (80141fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80141e8:	f7fc fc80 	bl	8010aec <USBD_GetString>
  }
  return USBD_StrDesc;
 80141ec:	4b02      	ldr	r3, [pc, #8]	; (80141f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	2000ff44 	.word	0x2000ff44
 80141fc:	08017ecc 	.word	0x08017ecc

08014200 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	4603      	mov	r3, r0
 8014208:	6039      	str	r1, [r7, #0]
 801420a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	220c      	movs	r2, #12
 8014210:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8014212:	4b03      	ldr	r3, [pc, #12]	; (8014220 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8014214:	4618      	mov	r0, r3
 8014216:	370c      	adds	r7, #12
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr
 8014220:	200001bc 	.word	0x200001bc

08014224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801422a:	4b0f      	ldr	r3, [pc, #60]	; (8014268 <Get_SerialNum+0x44>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014230:	4b0e      	ldr	r3, [pc, #56]	; (801426c <Get_SerialNum+0x48>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014236:	4b0e      	ldr	r3, [pc, #56]	; (8014270 <Get_SerialNum+0x4c>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4413      	add	r3, r2
 8014242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d009      	beq.n	801425e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801424a:	2208      	movs	r2, #8
 801424c:	4909      	ldr	r1, [pc, #36]	; (8014274 <Get_SerialNum+0x50>)
 801424e:	68f8      	ldr	r0, [r7, #12]
 8014250:	f000 f814 	bl	801427c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014254:	2204      	movs	r2, #4
 8014256:	4908      	ldr	r1, [pc, #32]	; (8014278 <Get_SerialNum+0x54>)
 8014258:	68b8      	ldr	r0, [r7, #8]
 801425a:	f000 f80f 	bl	801427c <IntToUnicode>
  }
}
 801425e:	bf00      	nop
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	1fff7590 	.word	0x1fff7590
 801426c:	1fff7594 	.word	0x1fff7594
 8014270:	1fff7598 	.word	0x1fff7598
 8014274:	200001ce 	.word	0x200001ce
 8014278:	200001de 	.word	0x200001de

0801427c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801427c:	b480      	push	{r7}
 801427e:	b087      	sub	sp, #28
 8014280:	af00      	add	r7, sp, #0
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	4613      	mov	r3, r2
 8014288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801428a:	2300      	movs	r3, #0
 801428c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801428e:	2300      	movs	r3, #0
 8014290:	75fb      	strb	r3, [r7, #23]
 8014292:	e027      	b.n	80142e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	0f1b      	lsrs	r3, r3, #28
 8014298:	2b09      	cmp	r3, #9
 801429a:	d80b      	bhi.n	80142b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	0f1b      	lsrs	r3, r3, #28
 80142a0:	b2da      	uxtb	r2, r3
 80142a2:	7dfb      	ldrb	r3, [r7, #23]
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	4619      	mov	r1, r3
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	440b      	add	r3, r1
 80142ac:	3230      	adds	r2, #48	; 0x30
 80142ae:	b2d2      	uxtb	r2, r2
 80142b0:	701a      	strb	r2, [r3, #0]
 80142b2:	e00a      	b.n	80142ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	0f1b      	lsrs	r3, r3, #28
 80142b8:	b2da      	uxtb	r2, r3
 80142ba:	7dfb      	ldrb	r3, [r7, #23]
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	4619      	mov	r1, r3
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	440b      	add	r3, r1
 80142c4:	3237      	adds	r2, #55	; 0x37
 80142c6:	b2d2      	uxtb	r2, r2
 80142c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	011b      	lsls	r3, r3, #4
 80142ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80142d0:	7dfb      	ldrb	r3, [r7, #23]
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	3301      	adds	r3, #1
 80142d6:	68ba      	ldr	r2, [r7, #8]
 80142d8:	4413      	add	r3, r2
 80142da:	2200      	movs	r2, #0
 80142dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80142de:	7dfb      	ldrb	r3, [r7, #23]
 80142e0:	3301      	adds	r3, #1
 80142e2:	75fb      	strb	r3, [r7, #23]
 80142e4:	7dfa      	ldrb	r2, [r7, #23]
 80142e6:	79fb      	ldrb	r3, [r7, #7]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d3d3      	bcc.n	8014294 <IntToUnicode+0x18>
  }
}
 80142ec:	bf00      	nop
 80142ee:	371c      	adds	r7, #28
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b08a      	sub	sp, #40	; 0x28
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014300:	f107 0314 	add.w	r3, r7, #20
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
 8014308:	605a      	str	r2, [r3, #4]
 801430a:	609a      	str	r2, [r3, #8]
 801430c:	60da      	str	r2, [r3, #12]
 801430e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014318:	d14e      	bne.n	80143b8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801431a:	4b29      	ldr	r3, [pc, #164]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 801431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801431e:	4a28      	ldr	r2, [pc, #160]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014320:	f043 0301 	orr.w	r3, r3, #1
 8014324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014326:	4b26      	ldr	r3, [pc, #152]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801432a:	f003 0301 	and.w	r3, r3, #1
 801432e:	613b      	str	r3, [r7, #16]
 8014330:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8014332:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014338:	2302      	movs	r3, #2
 801433a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801433c:	2300      	movs	r3, #0
 801433e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014340:	2303      	movs	r3, #3
 8014342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014344:	230a      	movs	r3, #10
 8014346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014348:	f107 0314 	add.w	r3, r7, #20
 801434c:	4619      	mov	r1, r3
 801434e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014352:	f7f2 f9d7 	bl	8006704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014356:	4b1a      	ldr	r3, [pc, #104]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801435a:	4a19      	ldr	r2, [pc, #100]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 801435c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014362:	4b17      	ldr	r3, [pc, #92]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801436a:	60fb      	str	r3, [r7, #12]
 801436c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801436e:	4b14      	ldr	r3, [pc, #80]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014376:	2b00      	cmp	r3, #0
 8014378:	d114      	bne.n	80143a4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801437a:	4b11      	ldr	r3, [pc, #68]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 801437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801437e:	4a10      	ldr	r2, [pc, #64]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014384:	6593      	str	r3, [r2, #88]	; 0x58
 8014386:	4b0e      	ldr	r3, [pc, #56]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801438e:	60bb      	str	r3, [r7, #8]
 8014390:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8014392:	f7f4 fb8f 	bl	8008ab4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8014396:	4b0a      	ldr	r3, [pc, #40]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 8014398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801439a:	4a09      	ldr	r2, [pc, #36]	; (80143c0 <HAL_PCD_MspInit+0xc8>)
 801439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80143a0:	6593      	str	r3, [r2, #88]	; 0x58
 80143a2:	e001      	b.n	80143a8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80143a4:	f7f4 fb86 	bl	8008ab4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80143a8:	2200      	movs	r2, #0
 80143aa:	2105      	movs	r1, #5
 80143ac:	2043      	movs	r0, #67	; 0x43
 80143ae:	f7f2 f8a9 	bl	8006504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80143b2:	2043      	movs	r0, #67	; 0x43
 80143b4:	f7f2 f8c2 	bl	800653c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80143b8:	bf00      	nop
 80143ba:	3728      	adds	r7, #40	; 0x28
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	40021000 	.word	0x40021000

080143c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80143d8:	4619      	mov	r1, r3
 80143da:	4610      	mov	r0, r2
 80143dc:	f7fb fbf9 	bl	800fbd2 <USBD_LL_SetupStage>
}
 80143e0:	bf00      	nop
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	460b      	mov	r3, r1
 80143f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80143fa:	78fa      	ldrb	r2, [r7, #3]
 80143fc:	6879      	ldr	r1, [r7, #4]
 80143fe:	4613      	mov	r3, r2
 8014400:	00db      	lsls	r3, r3, #3
 8014402:	1a9b      	subs	r3, r3, r2
 8014404:	009b      	lsls	r3, r3, #2
 8014406:	440b      	add	r3, r1
 8014408:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	78fb      	ldrb	r3, [r7, #3]
 8014410:	4619      	mov	r1, r3
 8014412:	f7fb fc29 	bl	800fc68 <USBD_LL_DataOutStage>
}
 8014416:	bf00      	nop
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801441e:	b580      	push	{r7, lr}
 8014420:	b082      	sub	sp, #8
 8014422:	af00      	add	r7, sp, #0
 8014424:	6078      	str	r0, [r7, #4]
 8014426:	460b      	mov	r3, r1
 8014428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014430:	78fa      	ldrb	r2, [r7, #3]
 8014432:	6879      	ldr	r1, [r7, #4]
 8014434:	4613      	mov	r3, r2
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	1a9b      	subs	r3, r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	440b      	add	r3, r1
 801443e:	3348      	adds	r3, #72	; 0x48
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	78fb      	ldrb	r3, [r7, #3]
 8014444:	4619      	mov	r1, r3
 8014446:	f7fb fc80 	bl	800fd4a <USBD_LL_DataInStage>
}
 801444a:	bf00      	nop
 801444c:	3708      	adds	r7, #8
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}

08014452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014452:	b580      	push	{r7, lr}
 8014454:	b082      	sub	sp, #8
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014460:	4618      	mov	r0, r3
 8014462:	f7fb fd93 	bl	800ff8c <USBD_LL_SOF>
}
 8014466:	bf00      	nop
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801446e:	b580      	push	{r7, lr}
 8014470:	b084      	sub	sp, #16
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014476:	2301      	movs	r3, #1
 8014478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	68db      	ldr	r3, [r3, #12]
 801447e:	2b02      	cmp	r3, #2
 8014480:	d001      	beq.n	8014486 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014482:	f7ef fab5 	bl	80039f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801448c:	7bfa      	ldrb	r2, [r7, #15]
 801448e:	4611      	mov	r1, r2
 8014490:	4618      	mov	r0, r3
 8014492:	f7fb fd40 	bl	800ff16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801449c:	4618      	mov	r0, r3
 801449e:	f7fb fcf9 	bl	800fe94 <USBD_LL_Reset>
}
 80144a2:	bf00      	nop
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
	...

080144ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	6812      	ldr	r2, [r2, #0]
 80144c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80144c6:	f043 0301 	orr.w	r3, r3, #1
 80144ca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fb fd2f 	bl	800ff36 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6a1b      	ldr	r3, [r3, #32]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d005      	beq.n	80144ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80144e0:	4b04      	ldr	r3, [pc, #16]	; (80144f4 <HAL_PCD_SuspendCallback+0x48>)
 80144e2:	691b      	ldr	r3, [r3, #16]
 80144e4:	4a03      	ldr	r2, [pc, #12]	; (80144f4 <HAL_PCD_SuspendCallback+0x48>)
 80144e6:	f043 0306 	orr.w	r3, r3, #6
 80144ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80144ec:	bf00      	nop
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	e000ed00 	.word	0xe000ed00

080144f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	6812      	ldr	r2, [r2, #0]
 801450e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014512:	f023 0301 	bic.w	r3, r3, #1
 8014516:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6a1b      	ldr	r3, [r3, #32]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d007      	beq.n	8014530 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014520:	4b08      	ldr	r3, [pc, #32]	; (8014544 <HAL_PCD_ResumeCallback+0x4c>)
 8014522:	691b      	ldr	r3, [r3, #16]
 8014524:	4a07      	ldr	r2, [pc, #28]	; (8014544 <HAL_PCD_ResumeCallback+0x4c>)
 8014526:	f023 0306 	bic.w	r3, r3, #6
 801452a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801452c:	f000 fafa 	bl	8014b24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014536:	4618      	mov	r0, r3
 8014538:	f7fb fd12 	bl	800ff60 <USBD_LL_Resume>
}
 801453c:	bf00      	nop
 801453e:	3708      	adds	r7, #8
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	e000ed00 	.word	0xe000ed00

08014548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	460b      	mov	r3, r1
 8014552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801455a:	78fa      	ldrb	r2, [r7, #3]
 801455c:	4611      	mov	r1, r2
 801455e:	4618      	mov	r0, r3
 8014560:	f7fb fd3b 	bl	800ffda <USBD_LL_IsoOUTIncomplete>
}
 8014564:	bf00      	nop
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	460b      	mov	r3, r1
 8014576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801457e:	78fa      	ldrb	r2, [r7, #3]
 8014580:	4611      	mov	r1, r2
 8014582:	4618      	mov	r0, r3
 8014584:	f7fb fd1c 	bl	800ffc0 <USBD_LL_IsoINIncomplete>
}
 8014588:	bf00      	nop
 801458a:	3708      	adds	r7, #8
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fb fd28 	bl	800fff4 <USBD_LL_DevConnected>
}
 80145a4:	bf00      	nop
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fb fd25 	bl	801000a <USBD_LL_DevDisconnected>
}
 80145c0:	bf00      	nop
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d13c      	bne.n	8014652 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80145d8:	4a20      	ldr	r2, [pc, #128]	; (801465c <USBD_LL_Init+0x94>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	4a1e      	ldr	r2, [pc, #120]	; (801465c <USBD_LL_Init+0x94>)
 80145e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80145e8:	4b1c      	ldr	r3, [pc, #112]	; (801465c <USBD_LL_Init+0x94>)
 80145ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80145ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80145f0:	4b1a      	ldr	r3, [pc, #104]	; (801465c <USBD_LL_Init+0x94>)
 80145f2:	2206      	movs	r2, #6
 80145f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80145f6:	4b19      	ldr	r3, [pc, #100]	; (801465c <USBD_LL_Init+0x94>)
 80145f8:	2202      	movs	r2, #2
 80145fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80145fc:	4b17      	ldr	r3, [pc, #92]	; (801465c <USBD_LL_Init+0x94>)
 80145fe:	2202      	movs	r2, #2
 8014600:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014602:	4b16      	ldr	r3, [pc, #88]	; (801465c <USBD_LL_Init+0x94>)
 8014604:	2200      	movs	r2, #0
 8014606:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014608:	4b14      	ldr	r3, [pc, #80]	; (801465c <USBD_LL_Init+0x94>)
 801460a:	2200      	movs	r2, #0
 801460c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801460e:	4b13      	ldr	r3, [pc, #76]	; (801465c <USBD_LL_Init+0x94>)
 8014610:	2200      	movs	r2, #0
 8014612:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014614:	4b11      	ldr	r3, [pc, #68]	; (801465c <USBD_LL_Init+0x94>)
 8014616:	2200      	movs	r2, #0
 8014618:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801461a:	4b10      	ldr	r3, [pc, #64]	; (801465c <USBD_LL_Init+0x94>)
 801461c:	2200      	movs	r2, #0
 801461e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014620:	4b0e      	ldr	r3, [pc, #56]	; (801465c <USBD_LL_Init+0x94>)
 8014622:	2200      	movs	r2, #0
 8014624:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014626:	480d      	ldr	r0, [pc, #52]	; (801465c <USBD_LL_Init+0x94>)
 8014628:	f7f3 f931 	bl	800788e <HAL_PCD_Init>
 801462c:	4603      	mov	r3, r0
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014632:	f7ef f9dd 	bl	80039f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014636:	2180      	movs	r1, #128	; 0x80
 8014638:	4808      	ldr	r0, [pc, #32]	; (801465c <USBD_LL_Init+0x94>)
 801463a:	f7f4 f992 	bl	8008962 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801463e:	2240      	movs	r2, #64	; 0x40
 8014640:	2100      	movs	r1, #0
 8014642:	4806      	ldr	r0, [pc, #24]	; (801465c <USBD_LL_Init+0x94>)
 8014644:	f7f4 f946 	bl	80088d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014648:	2280      	movs	r2, #128	; 0x80
 801464a:	2101      	movs	r1, #1
 801464c:	4803      	ldr	r0, [pc, #12]	; (801465c <USBD_LL_Init+0x94>)
 801464e:	f7f4 f941 	bl	80088d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014652:	2300      	movs	r3, #0
}
 8014654:	4618      	mov	r0, r3
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	20010144 	.word	0x20010144

08014660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b084      	sub	sp, #16
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014668:	2300      	movs	r3, #0
 801466a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801466c:	2300      	movs	r3, #0
 801466e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014676:	4618      	mov	r0, r3
 8014678:	f7f3 fa2d 	bl	8007ad6 <HAL_PCD_Start>
 801467c:	4603      	mov	r3, r0
 801467e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	2b03      	cmp	r3, #3
 8014684:	d816      	bhi.n	80146b4 <USBD_LL_Start+0x54>
 8014686:	a201      	add	r2, pc, #4	; (adr r2, 801468c <USBD_LL_Start+0x2c>)
 8014688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468c:	0801469d 	.word	0x0801469d
 8014690:	080146a3 	.word	0x080146a3
 8014694:	080146a9 	.word	0x080146a9
 8014698:	080146af 	.word	0x080146af
    case HAL_OK :
      usb_status = USBD_OK;
 801469c:	2300      	movs	r3, #0
 801469e:	73fb      	strb	r3, [r7, #15]
    break;
 80146a0:	e00b      	b.n	80146ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80146a2:	2302      	movs	r3, #2
 80146a4:	73fb      	strb	r3, [r7, #15]
    break;
 80146a6:	e008      	b.n	80146ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80146a8:	2301      	movs	r3, #1
 80146aa:	73fb      	strb	r3, [r7, #15]
    break;
 80146ac:	e005      	b.n	80146ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80146ae:	2302      	movs	r3, #2
 80146b0:	73fb      	strb	r3, [r7, #15]
    break;
 80146b2:	e002      	b.n	80146ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80146b4:	2302      	movs	r3, #2
 80146b6:	73fb      	strb	r3, [r7, #15]
    break;
 80146b8:	bf00      	nop
  }
  return usb_status;
 80146ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	4608      	mov	r0, r1
 80146ce:	4611      	mov	r1, r2
 80146d0:	461a      	mov	r2, r3
 80146d2:	4603      	mov	r3, r0
 80146d4:	70fb      	strb	r3, [r7, #3]
 80146d6:	460b      	mov	r3, r1
 80146d8:	70bb      	strb	r3, [r7, #2]
 80146da:	4613      	mov	r3, r2
 80146dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146de:	2300      	movs	r3, #0
 80146e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146e2:	2300      	movs	r3, #0
 80146e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80146ec:	78bb      	ldrb	r3, [r7, #2]
 80146ee:	883a      	ldrh	r2, [r7, #0]
 80146f0:	78f9      	ldrb	r1, [r7, #3]
 80146f2:	f7f3 fde8 	bl	80082c6 <HAL_PCD_EP_Open>
 80146f6:	4603      	mov	r3, r0
 80146f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80146fa:	7bbb      	ldrb	r3, [r7, #14]
 80146fc:	2b03      	cmp	r3, #3
 80146fe:	d817      	bhi.n	8014730 <USBD_LL_OpenEP+0x6c>
 8014700:	a201      	add	r2, pc, #4	; (adr r2, 8014708 <USBD_LL_OpenEP+0x44>)
 8014702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014706:	bf00      	nop
 8014708:	08014719 	.word	0x08014719
 801470c:	0801471f 	.word	0x0801471f
 8014710:	08014725 	.word	0x08014725
 8014714:	0801472b 	.word	0x0801472b
    case HAL_OK :
      usb_status = USBD_OK;
 8014718:	2300      	movs	r3, #0
 801471a:	73fb      	strb	r3, [r7, #15]
    break;
 801471c:	e00b      	b.n	8014736 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801471e:	2302      	movs	r3, #2
 8014720:	73fb      	strb	r3, [r7, #15]
    break;
 8014722:	e008      	b.n	8014736 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014724:	2301      	movs	r3, #1
 8014726:	73fb      	strb	r3, [r7, #15]
    break;
 8014728:	e005      	b.n	8014736 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801472a:	2302      	movs	r3, #2
 801472c:	73fb      	strb	r3, [r7, #15]
    break;
 801472e:	e002      	b.n	8014736 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014730:	2302      	movs	r3, #2
 8014732:	73fb      	strb	r3, [r7, #15]
    break;
 8014734:	bf00      	nop
  }
  return usb_status;
 8014736:	7bfb      	ldrb	r3, [r7, #15]
}
 8014738:	4618      	mov	r0, r3
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	460b      	mov	r3, r1
 801474a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801474c:	2300      	movs	r3, #0
 801474e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014750:	2300      	movs	r3, #0
 8014752:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801475a:	78fa      	ldrb	r2, [r7, #3]
 801475c:	4611      	mov	r1, r2
 801475e:	4618      	mov	r0, r3
 8014760:	f7f3 fe19 	bl	8008396 <HAL_PCD_EP_Close>
 8014764:	4603      	mov	r3, r0
 8014766:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8014768:	7bbb      	ldrb	r3, [r7, #14]
 801476a:	2b03      	cmp	r3, #3
 801476c:	d816      	bhi.n	801479c <USBD_LL_CloseEP+0x5c>
 801476e:	a201      	add	r2, pc, #4	; (adr r2, 8014774 <USBD_LL_CloseEP+0x34>)
 8014770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014774:	08014785 	.word	0x08014785
 8014778:	0801478b 	.word	0x0801478b
 801477c:	08014791 	.word	0x08014791
 8014780:	08014797 	.word	0x08014797
    case HAL_OK :
      usb_status = USBD_OK;
 8014784:	2300      	movs	r3, #0
 8014786:	73fb      	strb	r3, [r7, #15]
    break;
 8014788:	e00b      	b.n	80147a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801478a:	2302      	movs	r3, #2
 801478c:	73fb      	strb	r3, [r7, #15]
    break;
 801478e:	e008      	b.n	80147a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014790:	2301      	movs	r3, #1
 8014792:	73fb      	strb	r3, [r7, #15]
    break;
 8014794:	e005      	b.n	80147a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014796:	2302      	movs	r3, #2
 8014798:	73fb      	strb	r3, [r7, #15]
    break;
 801479a:	e002      	b.n	80147a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801479c:	2302      	movs	r3, #2
 801479e:	73fb      	strb	r3, [r7, #15]
    break;
 80147a0:	bf00      	nop
  }
  return usb_status;  
 80147a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	460b      	mov	r3, r1
 80147b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147b8:	2300      	movs	r3, #0
 80147ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147bc:	2300      	movs	r3, #0
 80147be:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80147c6:	78fa      	ldrb	r2, [r7, #3]
 80147c8:	4611      	mov	r1, r2
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7f3 fec0 	bl	8008550 <HAL_PCD_EP_SetStall>
 80147d0:	4603      	mov	r3, r0
 80147d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80147d4:	7bbb      	ldrb	r3, [r7, #14]
 80147d6:	2b03      	cmp	r3, #3
 80147d8:	d816      	bhi.n	8014808 <USBD_LL_StallEP+0x5c>
 80147da:	a201      	add	r2, pc, #4	; (adr r2, 80147e0 <USBD_LL_StallEP+0x34>)
 80147dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e0:	080147f1 	.word	0x080147f1
 80147e4:	080147f7 	.word	0x080147f7
 80147e8:	080147fd 	.word	0x080147fd
 80147ec:	08014803 	.word	0x08014803
    case HAL_OK :
      usb_status = USBD_OK;
 80147f0:	2300      	movs	r3, #0
 80147f2:	73fb      	strb	r3, [r7, #15]
    break;
 80147f4:	e00b      	b.n	801480e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80147f6:	2302      	movs	r3, #2
 80147f8:	73fb      	strb	r3, [r7, #15]
    break;
 80147fa:	e008      	b.n	801480e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80147fc:	2301      	movs	r3, #1
 80147fe:	73fb      	strb	r3, [r7, #15]
    break;
 8014800:	e005      	b.n	801480e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014802:	2302      	movs	r3, #2
 8014804:	73fb      	strb	r3, [r7, #15]
    break;
 8014806:	e002      	b.n	801480e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014808:	2302      	movs	r3, #2
 801480a:	73fb      	strb	r3, [r7, #15]
    break;
 801480c:	bf00      	nop
  }
  return usb_status;  
 801480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014810:	4618      	mov	r0, r3
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b084      	sub	sp, #16
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	460b      	mov	r3, r1
 8014822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014824:	2300      	movs	r3, #0
 8014826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014828:	2300      	movs	r3, #0
 801482a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014832:	78fa      	ldrb	r2, [r7, #3]
 8014834:	4611      	mov	r1, r2
 8014836:	4618      	mov	r0, r3
 8014838:	f7f3 feec 	bl	8008614 <HAL_PCD_EP_ClrStall>
 801483c:	4603      	mov	r3, r0
 801483e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014840:	7bbb      	ldrb	r3, [r7, #14]
 8014842:	2b03      	cmp	r3, #3
 8014844:	d816      	bhi.n	8014874 <USBD_LL_ClearStallEP+0x5c>
 8014846:	a201      	add	r2, pc, #4	; (adr r2, 801484c <USBD_LL_ClearStallEP+0x34>)
 8014848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801484c:	0801485d 	.word	0x0801485d
 8014850:	08014863 	.word	0x08014863
 8014854:	08014869 	.word	0x08014869
 8014858:	0801486f 	.word	0x0801486f
    case HAL_OK :
      usb_status = USBD_OK;
 801485c:	2300      	movs	r3, #0
 801485e:	73fb      	strb	r3, [r7, #15]
    break;
 8014860:	e00b      	b.n	801487a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014862:	2302      	movs	r3, #2
 8014864:	73fb      	strb	r3, [r7, #15]
    break;
 8014866:	e008      	b.n	801487a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014868:	2301      	movs	r3, #1
 801486a:	73fb      	strb	r3, [r7, #15]
    break;
 801486c:	e005      	b.n	801487a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801486e:	2302      	movs	r3, #2
 8014870:	73fb      	strb	r3, [r7, #15]
    break;
 8014872:	e002      	b.n	801487a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014874:	2302      	movs	r3, #2
 8014876:	73fb      	strb	r3, [r7, #15]
    break;
 8014878:	bf00      	nop
  }
  return usb_status; 
 801487a:	7bfb      	ldrb	r3, [r7, #15]
}
 801487c:	4618      	mov	r0, r3
 801487e:	3710      	adds	r7, #16
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	460b      	mov	r3, r1
 801488e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014896:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801489c:	2b00      	cmp	r3, #0
 801489e:	da0b      	bge.n	80148b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80148a0:	78fb      	ldrb	r3, [r7, #3]
 80148a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80148a6:	68f9      	ldr	r1, [r7, #12]
 80148a8:	4613      	mov	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	1a9b      	subs	r3, r3, r2
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	440b      	add	r3, r1
 80148b2:	333e      	adds	r3, #62	; 0x3e
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	e00b      	b.n	80148d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80148b8:	78fb      	ldrb	r3, [r7, #3]
 80148ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80148be:	68f9      	ldr	r1, [r7, #12]
 80148c0:	4613      	mov	r3, r2
 80148c2:	00db      	lsls	r3, r3, #3
 80148c4:	1a9b      	subs	r3, r3, r2
 80148c6:	009b      	lsls	r3, r3, #2
 80148c8:	440b      	add	r3, r1
 80148ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80148ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	460b      	mov	r3, r1
 80148e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148ec:	2300      	movs	r3, #0
 80148ee:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148f6:	78fa      	ldrb	r2, [r7, #3]
 80148f8:	4611      	mov	r1, r2
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7f3 fcbe 	bl	800827c <HAL_PCD_SetAddress>
 8014900:	4603      	mov	r3, r0
 8014902:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014904:	7bbb      	ldrb	r3, [r7, #14]
 8014906:	2b03      	cmp	r3, #3
 8014908:	d816      	bhi.n	8014938 <USBD_LL_SetUSBAddress+0x5c>
 801490a:	a201      	add	r2, pc, #4	; (adr r2, 8014910 <USBD_LL_SetUSBAddress+0x34>)
 801490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014910:	08014921 	.word	0x08014921
 8014914:	08014927 	.word	0x08014927
 8014918:	0801492d 	.word	0x0801492d
 801491c:	08014933 	.word	0x08014933
    case HAL_OK :
      usb_status = USBD_OK;
 8014920:	2300      	movs	r3, #0
 8014922:	73fb      	strb	r3, [r7, #15]
    break;
 8014924:	e00b      	b.n	801493e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014926:	2302      	movs	r3, #2
 8014928:	73fb      	strb	r3, [r7, #15]
    break;
 801492a:	e008      	b.n	801493e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801492c:	2301      	movs	r3, #1
 801492e:	73fb      	strb	r3, [r7, #15]
    break;
 8014930:	e005      	b.n	801493e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014932:	2302      	movs	r3, #2
 8014934:	73fb      	strb	r3, [r7, #15]
    break;
 8014936:	e002      	b.n	801493e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014938:	2302      	movs	r3, #2
 801493a:	73fb      	strb	r3, [r7, #15]
    break;
 801493c:	bf00      	nop
  }
  return usb_status;  
 801493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014940:	4618      	mov	r0, r3
 8014942:	3710      	adds	r7, #16
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	607a      	str	r2, [r7, #4]
 8014952:	461a      	mov	r2, r3
 8014954:	460b      	mov	r3, r1
 8014956:	72fb      	strb	r3, [r7, #11]
 8014958:	4613      	mov	r3, r2
 801495a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801495c:	2300      	movs	r3, #0
 801495e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014960:	2300      	movs	r3, #0
 8014962:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801496a:	893b      	ldrh	r3, [r7, #8]
 801496c:	7af9      	ldrb	r1, [r7, #11]
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	f7f3 fdb1 	bl	80084d6 <HAL_PCD_EP_Transmit>
 8014974:	4603      	mov	r3, r0
 8014976:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8014978:	7dbb      	ldrb	r3, [r7, #22]
 801497a:	2b03      	cmp	r3, #3
 801497c:	d816      	bhi.n	80149ac <USBD_LL_Transmit+0x64>
 801497e:	a201      	add	r2, pc, #4	; (adr r2, 8014984 <USBD_LL_Transmit+0x3c>)
 8014980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014984:	08014995 	.word	0x08014995
 8014988:	0801499b 	.word	0x0801499b
 801498c:	080149a1 	.word	0x080149a1
 8014990:	080149a7 	.word	0x080149a7
    case HAL_OK :
      usb_status = USBD_OK;
 8014994:	2300      	movs	r3, #0
 8014996:	75fb      	strb	r3, [r7, #23]
    break;
 8014998:	e00b      	b.n	80149b2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801499a:	2302      	movs	r3, #2
 801499c:	75fb      	strb	r3, [r7, #23]
    break;
 801499e:	e008      	b.n	80149b2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80149a0:	2301      	movs	r3, #1
 80149a2:	75fb      	strb	r3, [r7, #23]
    break;
 80149a4:	e005      	b.n	80149b2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80149a6:	2302      	movs	r3, #2
 80149a8:	75fb      	strb	r3, [r7, #23]
    break;
 80149aa:	e002      	b.n	80149b2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80149ac:	2302      	movs	r3, #2
 80149ae:	75fb      	strb	r3, [r7, #23]
    break;
 80149b0:	bf00      	nop
  }
  return usb_status;    
 80149b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3718      	adds	r7, #24
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	607a      	str	r2, [r7, #4]
 80149c6:	461a      	mov	r2, r3
 80149c8:	460b      	mov	r3, r1
 80149ca:	72fb      	strb	r3, [r7, #11]
 80149cc:	4613      	mov	r3, r2
 80149ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149d0:	2300      	movs	r3, #0
 80149d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80149de:	893b      	ldrh	r3, [r7, #8]
 80149e0:	7af9      	ldrb	r1, [r7, #11]
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	f7f3 fd21 	bl	800842a <HAL_PCD_EP_Receive>
 80149e8:	4603      	mov	r3, r0
 80149ea:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80149ec:	7dbb      	ldrb	r3, [r7, #22]
 80149ee:	2b03      	cmp	r3, #3
 80149f0:	d816      	bhi.n	8014a20 <USBD_LL_PrepareReceive+0x64>
 80149f2:	a201      	add	r2, pc, #4	; (adr r2, 80149f8 <USBD_LL_PrepareReceive+0x3c>)
 80149f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149f8:	08014a09 	.word	0x08014a09
 80149fc:	08014a0f 	.word	0x08014a0f
 8014a00:	08014a15 	.word	0x08014a15
 8014a04:	08014a1b 	.word	0x08014a1b
    case HAL_OK :
      usb_status = USBD_OK;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	75fb      	strb	r3, [r7, #23]
    break;
 8014a0c:	e00b      	b.n	8014a26 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014a0e:	2302      	movs	r3, #2
 8014a10:	75fb      	strb	r3, [r7, #23]
    break;
 8014a12:	e008      	b.n	8014a26 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014a14:	2301      	movs	r3, #1
 8014a16:	75fb      	strb	r3, [r7, #23]
    break;
 8014a18:	e005      	b.n	8014a26 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014a1a:	2302      	movs	r3, #2
 8014a1c:	75fb      	strb	r3, [r7, #23]
    break;
 8014a1e:	e002      	b.n	8014a26 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8014a20:	2302      	movs	r3, #2
 8014a22:	75fb      	strb	r3, [r7, #23]
    break;
 8014a24:	bf00      	nop
  }
  return usb_status; 
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3718      	adds	r7, #24
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	460b      	mov	r3, r1
 8014a3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a42:	78fa      	ldrb	r2, [r7, #3]
 8014a44:	4611      	mov	r1, r2
 8014a46:	4618      	mov	r0, r3
 8014a48:	f7f3 fd2d 	bl	80084a6 <HAL_PCD_EP_GetRxCount>
 8014a4c:	4603      	mov	r3, r0
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
	...

08014a58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	460b      	mov	r3, r1
 8014a62:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014a64:	78fb      	ldrb	r3, [r7, #3]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d002      	beq.n	8014a70 <HAL_PCDEx_LPM_Callback+0x18>
 8014a6a:	2b01      	cmp	r3, #1
 8014a6c:	d01f      	beq.n	8014aae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8014a6e:	e03b      	b.n	8014ae8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6a1b      	ldr	r3, [r3, #32]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d007      	beq.n	8014a88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014a78:	f000 f854 	bl	8014b24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a7c:	4b1c      	ldr	r3, [pc, #112]	; (8014af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	4a1b      	ldr	r2, [pc, #108]	; (8014af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a82:	f023 0306 	bic.w	r3, r3, #6
 8014a86:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	687a      	ldr	r2, [r7, #4]
 8014a94:	6812      	ldr	r2, [r2, #0]
 8014a96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014a9a:	f023 0301 	bic.w	r3, r3, #1
 8014a9e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7fb fa5a 	bl	800ff60 <USBD_LL_Resume>
    break;
 8014aac:	e01c      	b.n	8014ae8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	6812      	ldr	r2, [r2, #0]
 8014abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ac0:	f043 0301 	orr.w	r3, r3, #1
 8014ac4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7fb fa32 	bl	800ff36 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6a1b      	ldr	r3, [r3, #32]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d005      	beq.n	8014ae6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ada:	4b05      	ldr	r3, [pc, #20]	; (8014af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014adc:	691b      	ldr	r3, [r3, #16]
 8014ade:	4a04      	ldr	r2, [pc, #16]	; (8014af0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014ae0:	f043 0306 	orr.w	r3, r3, #6
 8014ae4:	6113      	str	r3, [r2, #16]
    break;   
 8014ae6:	bf00      	nop
}
 8014ae8:	bf00      	nop
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	e000ed00 	.word	0xe000ed00

08014af4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014afc:	4b03      	ldr	r3, [pc, #12]	; (8014b0c <USBD_static_malloc+0x18>)
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	370c      	adds	r7, #12
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop
 8014b0c:	2000d4d4 	.word	0x2000d4d4

08014b10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]

}
 8014b18:	bf00      	nop
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014b28:	f7ee f8a6 	bl	8002c78 <SystemClock_Config>
}
 8014b2c:	bf00      	nop
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <__assert_func>:
 8014b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b32:	461c      	mov	r4, r3
 8014b34:	4b09      	ldr	r3, [pc, #36]	; (8014b5c <__assert_func+0x2c>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	4605      	mov	r5, r0
 8014b3a:	68d8      	ldr	r0, [r3, #12]
 8014b3c:	b152      	cbz	r2, 8014b54 <__assert_func+0x24>
 8014b3e:	4b08      	ldr	r3, [pc, #32]	; (8014b60 <__assert_func+0x30>)
 8014b40:	9100      	str	r1, [sp, #0]
 8014b42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014b46:	4907      	ldr	r1, [pc, #28]	; (8014b64 <__assert_func+0x34>)
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4622      	mov	r2, r4
 8014b4c:	f000 f818 	bl	8014b80 <fiprintf>
 8014b50:	f000 fdec 	bl	801572c <abort>
 8014b54:	4b04      	ldr	r3, [pc, #16]	; (8014b68 <__assert_func+0x38>)
 8014b56:	461a      	mov	r2, r3
 8014b58:	e7f2      	b.n	8014b40 <__assert_func+0x10>
 8014b5a:	bf00      	nop
 8014b5c:	200001e8 	.word	0x200001e8
 8014b60:	08017f7c 	.word	0x08017f7c
 8014b64:	08017f89 	.word	0x08017f89
 8014b68:	08017fb7 	.word	0x08017fb7

08014b6c <atoi>:
 8014b6c:	220a      	movs	r2, #10
 8014b6e:	2100      	movs	r1, #0
 8014b70:	f000 bd06 	b.w	8015580 <strtol>

08014b74 <__errno>:
 8014b74:	4b01      	ldr	r3, [pc, #4]	; (8014b7c <__errno+0x8>)
 8014b76:	6818      	ldr	r0, [r3, #0]
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	200001e8 	.word	0x200001e8

08014b80 <fiprintf>:
 8014b80:	b40e      	push	{r1, r2, r3}
 8014b82:	b503      	push	{r0, r1, lr}
 8014b84:	4601      	mov	r1, r0
 8014b86:	ab03      	add	r3, sp, #12
 8014b88:	4805      	ldr	r0, [pc, #20]	; (8014ba0 <fiprintf+0x20>)
 8014b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b8e:	6800      	ldr	r0, [r0, #0]
 8014b90:	9301      	str	r3, [sp, #4]
 8014b92:	f000 f911 	bl	8014db8 <_vfiprintf_r>
 8014b96:	b002      	add	sp, #8
 8014b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b9c:	b003      	add	sp, #12
 8014b9e:	4770      	bx	lr
 8014ba0:	200001e8 	.word	0x200001e8

08014ba4 <__libc_init_array>:
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	4e0d      	ldr	r6, [pc, #52]	; (8014bdc <__libc_init_array+0x38>)
 8014ba8:	4c0d      	ldr	r4, [pc, #52]	; (8014be0 <__libc_init_array+0x3c>)
 8014baa:	1ba4      	subs	r4, r4, r6
 8014bac:	10a4      	asrs	r4, r4, #2
 8014bae:	2500      	movs	r5, #0
 8014bb0:	42a5      	cmp	r5, r4
 8014bb2:	d109      	bne.n	8014bc8 <__libc_init_array+0x24>
 8014bb4:	4e0b      	ldr	r6, [pc, #44]	; (8014be4 <__libc_init_array+0x40>)
 8014bb6:	4c0c      	ldr	r4, [pc, #48]	; (8014be8 <__libc_init_array+0x44>)
 8014bb8:	f002 ffda 	bl	8017b70 <_init>
 8014bbc:	1ba4      	subs	r4, r4, r6
 8014bbe:	10a4      	asrs	r4, r4, #2
 8014bc0:	2500      	movs	r5, #0
 8014bc2:	42a5      	cmp	r5, r4
 8014bc4:	d105      	bne.n	8014bd2 <__libc_init_array+0x2e>
 8014bc6:	bd70      	pop	{r4, r5, r6, pc}
 8014bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bcc:	4798      	blx	r3
 8014bce:	3501      	adds	r5, #1
 8014bd0:	e7ee      	b.n	8014bb0 <__libc_init_array+0xc>
 8014bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bd6:	4798      	blx	r3
 8014bd8:	3501      	adds	r5, #1
 8014bda:	e7f2      	b.n	8014bc2 <__libc_init_array+0x1e>
 8014bdc:	080181d0 	.word	0x080181d0
 8014be0:	080181d0 	.word	0x080181d0
 8014be4:	080181d0 	.word	0x080181d0
 8014be8:	080181d4 	.word	0x080181d4

08014bec <memcpy>:
 8014bec:	b510      	push	{r4, lr}
 8014bee:	1e43      	subs	r3, r0, #1
 8014bf0:	440a      	add	r2, r1
 8014bf2:	4291      	cmp	r1, r2
 8014bf4:	d100      	bne.n	8014bf8 <memcpy+0xc>
 8014bf6:	bd10      	pop	{r4, pc}
 8014bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c00:	e7f7      	b.n	8014bf2 <memcpy+0x6>

08014c02 <memset>:
 8014c02:	4402      	add	r2, r0
 8014c04:	4603      	mov	r3, r0
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d100      	bne.n	8014c0c <memset+0xa>
 8014c0a:	4770      	bx	lr
 8014c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8014c10:	e7f9      	b.n	8014c06 <memset+0x4>
	...

08014c14 <_free_r>:
 8014c14:	b538      	push	{r3, r4, r5, lr}
 8014c16:	4605      	mov	r5, r0
 8014c18:	2900      	cmp	r1, #0
 8014c1a:	d045      	beq.n	8014ca8 <_free_r+0x94>
 8014c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c20:	1f0c      	subs	r4, r1, #4
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bfb8      	it	lt
 8014c26:	18e4      	addlt	r4, r4, r3
 8014c28:	f000 ff95 	bl	8015b56 <__malloc_lock>
 8014c2c:	4a1f      	ldr	r2, [pc, #124]	; (8014cac <_free_r+0x98>)
 8014c2e:	6813      	ldr	r3, [r2, #0]
 8014c30:	4610      	mov	r0, r2
 8014c32:	b933      	cbnz	r3, 8014c42 <_free_r+0x2e>
 8014c34:	6063      	str	r3, [r4, #4]
 8014c36:	6014      	str	r4, [r2, #0]
 8014c38:	4628      	mov	r0, r5
 8014c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c3e:	f000 bf8b 	b.w	8015b58 <__malloc_unlock>
 8014c42:	42a3      	cmp	r3, r4
 8014c44:	d90c      	bls.n	8014c60 <_free_r+0x4c>
 8014c46:	6821      	ldr	r1, [r4, #0]
 8014c48:	1862      	adds	r2, r4, r1
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	bf04      	itt	eq
 8014c4e:	681a      	ldreq	r2, [r3, #0]
 8014c50:	685b      	ldreq	r3, [r3, #4]
 8014c52:	6063      	str	r3, [r4, #4]
 8014c54:	bf04      	itt	eq
 8014c56:	1852      	addeq	r2, r2, r1
 8014c58:	6022      	streq	r2, [r4, #0]
 8014c5a:	6004      	str	r4, [r0, #0]
 8014c5c:	e7ec      	b.n	8014c38 <_free_r+0x24>
 8014c5e:	4613      	mov	r3, r2
 8014c60:	685a      	ldr	r2, [r3, #4]
 8014c62:	b10a      	cbz	r2, 8014c68 <_free_r+0x54>
 8014c64:	42a2      	cmp	r2, r4
 8014c66:	d9fa      	bls.n	8014c5e <_free_r+0x4a>
 8014c68:	6819      	ldr	r1, [r3, #0]
 8014c6a:	1858      	adds	r0, r3, r1
 8014c6c:	42a0      	cmp	r0, r4
 8014c6e:	d10b      	bne.n	8014c88 <_free_r+0x74>
 8014c70:	6820      	ldr	r0, [r4, #0]
 8014c72:	4401      	add	r1, r0
 8014c74:	1858      	adds	r0, r3, r1
 8014c76:	4282      	cmp	r2, r0
 8014c78:	6019      	str	r1, [r3, #0]
 8014c7a:	d1dd      	bne.n	8014c38 <_free_r+0x24>
 8014c7c:	6810      	ldr	r0, [r2, #0]
 8014c7e:	6852      	ldr	r2, [r2, #4]
 8014c80:	605a      	str	r2, [r3, #4]
 8014c82:	4401      	add	r1, r0
 8014c84:	6019      	str	r1, [r3, #0]
 8014c86:	e7d7      	b.n	8014c38 <_free_r+0x24>
 8014c88:	d902      	bls.n	8014c90 <_free_r+0x7c>
 8014c8a:	230c      	movs	r3, #12
 8014c8c:	602b      	str	r3, [r5, #0]
 8014c8e:	e7d3      	b.n	8014c38 <_free_r+0x24>
 8014c90:	6820      	ldr	r0, [r4, #0]
 8014c92:	1821      	adds	r1, r4, r0
 8014c94:	428a      	cmp	r2, r1
 8014c96:	bf04      	itt	eq
 8014c98:	6811      	ldreq	r1, [r2, #0]
 8014c9a:	6852      	ldreq	r2, [r2, #4]
 8014c9c:	6062      	str	r2, [r4, #4]
 8014c9e:	bf04      	itt	eq
 8014ca0:	1809      	addeq	r1, r1, r0
 8014ca2:	6021      	streq	r1, [r4, #0]
 8014ca4:	605c      	str	r4, [r3, #4]
 8014ca6:	e7c7      	b.n	8014c38 <_free_r+0x24>
 8014ca8:	bd38      	pop	{r3, r4, r5, pc}
 8014caa:	bf00      	nop
 8014cac:	2000d6f4 	.word	0x2000d6f4

08014cb0 <_malloc_r>:
 8014cb0:	b570      	push	{r4, r5, r6, lr}
 8014cb2:	1ccd      	adds	r5, r1, #3
 8014cb4:	f025 0503 	bic.w	r5, r5, #3
 8014cb8:	3508      	adds	r5, #8
 8014cba:	2d0c      	cmp	r5, #12
 8014cbc:	bf38      	it	cc
 8014cbe:	250c      	movcc	r5, #12
 8014cc0:	2d00      	cmp	r5, #0
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	db01      	blt.n	8014cca <_malloc_r+0x1a>
 8014cc6:	42a9      	cmp	r1, r5
 8014cc8:	d903      	bls.n	8014cd2 <_malloc_r+0x22>
 8014cca:	230c      	movs	r3, #12
 8014ccc:	6033      	str	r3, [r6, #0]
 8014cce:	2000      	movs	r0, #0
 8014cd0:	bd70      	pop	{r4, r5, r6, pc}
 8014cd2:	f000 ff40 	bl	8015b56 <__malloc_lock>
 8014cd6:	4a21      	ldr	r2, [pc, #132]	; (8014d5c <_malloc_r+0xac>)
 8014cd8:	6814      	ldr	r4, [r2, #0]
 8014cda:	4621      	mov	r1, r4
 8014cdc:	b991      	cbnz	r1, 8014d04 <_malloc_r+0x54>
 8014cde:	4c20      	ldr	r4, [pc, #128]	; (8014d60 <_malloc_r+0xb0>)
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	b91b      	cbnz	r3, 8014cec <_malloc_r+0x3c>
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f000 fb7d 	bl	80153e4 <_sbrk_r>
 8014cea:	6020      	str	r0, [r4, #0]
 8014cec:	4629      	mov	r1, r5
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f000 fb78 	bl	80153e4 <_sbrk_r>
 8014cf4:	1c43      	adds	r3, r0, #1
 8014cf6:	d124      	bne.n	8014d42 <_malloc_r+0x92>
 8014cf8:	230c      	movs	r3, #12
 8014cfa:	6033      	str	r3, [r6, #0]
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	f000 ff2b 	bl	8015b58 <__malloc_unlock>
 8014d02:	e7e4      	b.n	8014cce <_malloc_r+0x1e>
 8014d04:	680b      	ldr	r3, [r1, #0]
 8014d06:	1b5b      	subs	r3, r3, r5
 8014d08:	d418      	bmi.n	8014d3c <_malloc_r+0x8c>
 8014d0a:	2b0b      	cmp	r3, #11
 8014d0c:	d90f      	bls.n	8014d2e <_malloc_r+0x7e>
 8014d0e:	600b      	str	r3, [r1, #0]
 8014d10:	50cd      	str	r5, [r1, r3]
 8014d12:	18cc      	adds	r4, r1, r3
 8014d14:	4630      	mov	r0, r6
 8014d16:	f000 ff1f 	bl	8015b58 <__malloc_unlock>
 8014d1a:	f104 000b 	add.w	r0, r4, #11
 8014d1e:	1d23      	adds	r3, r4, #4
 8014d20:	f020 0007 	bic.w	r0, r0, #7
 8014d24:	1ac3      	subs	r3, r0, r3
 8014d26:	d0d3      	beq.n	8014cd0 <_malloc_r+0x20>
 8014d28:	425a      	negs	r2, r3
 8014d2a:	50e2      	str	r2, [r4, r3]
 8014d2c:	e7d0      	b.n	8014cd0 <_malloc_r+0x20>
 8014d2e:	428c      	cmp	r4, r1
 8014d30:	684b      	ldr	r3, [r1, #4]
 8014d32:	bf16      	itet	ne
 8014d34:	6063      	strne	r3, [r4, #4]
 8014d36:	6013      	streq	r3, [r2, #0]
 8014d38:	460c      	movne	r4, r1
 8014d3a:	e7eb      	b.n	8014d14 <_malloc_r+0x64>
 8014d3c:	460c      	mov	r4, r1
 8014d3e:	6849      	ldr	r1, [r1, #4]
 8014d40:	e7cc      	b.n	8014cdc <_malloc_r+0x2c>
 8014d42:	1cc4      	adds	r4, r0, #3
 8014d44:	f024 0403 	bic.w	r4, r4, #3
 8014d48:	42a0      	cmp	r0, r4
 8014d4a:	d005      	beq.n	8014d58 <_malloc_r+0xa8>
 8014d4c:	1a21      	subs	r1, r4, r0
 8014d4e:	4630      	mov	r0, r6
 8014d50:	f000 fb48 	bl	80153e4 <_sbrk_r>
 8014d54:	3001      	adds	r0, #1
 8014d56:	d0cf      	beq.n	8014cf8 <_malloc_r+0x48>
 8014d58:	6025      	str	r5, [r4, #0]
 8014d5a:	e7db      	b.n	8014d14 <_malloc_r+0x64>
 8014d5c:	2000d6f4 	.word	0x2000d6f4
 8014d60:	2000d6f8 	.word	0x2000d6f8

08014d64 <__sfputc_r>:
 8014d64:	6893      	ldr	r3, [r2, #8]
 8014d66:	3b01      	subs	r3, #1
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	b410      	push	{r4}
 8014d6c:	6093      	str	r3, [r2, #8]
 8014d6e:	da08      	bge.n	8014d82 <__sfputc_r+0x1e>
 8014d70:	6994      	ldr	r4, [r2, #24]
 8014d72:	42a3      	cmp	r3, r4
 8014d74:	db01      	blt.n	8014d7a <__sfputc_r+0x16>
 8014d76:	290a      	cmp	r1, #10
 8014d78:	d103      	bne.n	8014d82 <__sfputc_r+0x1e>
 8014d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d7e:	f000 bc15 	b.w	80155ac <__swbuf_r>
 8014d82:	6813      	ldr	r3, [r2, #0]
 8014d84:	1c58      	adds	r0, r3, #1
 8014d86:	6010      	str	r0, [r2, #0]
 8014d88:	7019      	strb	r1, [r3, #0]
 8014d8a:	4608      	mov	r0, r1
 8014d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <__sfputs_r>:
 8014d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d94:	4606      	mov	r6, r0
 8014d96:	460f      	mov	r7, r1
 8014d98:	4614      	mov	r4, r2
 8014d9a:	18d5      	adds	r5, r2, r3
 8014d9c:	42ac      	cmp	r4, r5
 8014d9e:	d101      	bne.n	8014da4 <__sfputs_r+0x12>
 8014da0:	2000      	movs	r0, #0
 8014da2:	e007      	b.n	8014db4 <__sfputs_r+0x22>
 8014da4:	463a      	mov	r2, r7
 8014da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014daa:	4630      	mov	r0, r6
 8014dac:	f7ff ffda 	bl	8014d64 <__sfputc_r>
 8014db0:	1c43      	adds	r3, r0, #1
 8014db2:	d1f3      	bne.n	8014d9c <__sfputs_r+0xa>
 8014db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014db8 <_vfiprintf_r>:
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	460c      	mov	r4, r1
 8014dbe:	b09d      	sub	sp, #116	; 0x74
 8014dc0:	4617      	mov	r7, r2
 8014dc2:	461d      	mov	r5, r3
 8014dc4:	4606      	mov	r6, r0
 8014dc6:	b118      	cbz	r0, 8014dd0 <_vfiprintf_r+0x18>
 8014dc8:	6983      	ldr	r3, [r0, #24]
 8014dca:	b90b      	cbnz	r3, 8014dd0 <_vfiprintf_r+0x18>
 8014dcc:	f000 fda6 	bl	801591c <__sinit>
 8014dd0:	4b7c      	ldr	r3, [pc, #496]	; (8014fc4 <_vfiprintf_r+0x20c>)
 8014dd2:	429c      	cmp	r4, r3
 8014dd4:	d158      	bne.n	8014e88 <_vfiprintf_r+0xd0>
 8014dd6:	6874      	ldr	r4, [r6, #4]
 8014dd8:	89a3      	ldrh	r3, [r4, #12]
 8014dda:	0718      	lsls	r0, r3, #28
 8014ddc:	d55e      	bpl.n	8014e9c <_vfiprintf_r+0xe4>
 8014dde:	6923      	ldr	r3, [r4, #16]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d05b      	beq.n	8014e9c <_vfiprintf_r+0xe4>
 8014de4:	2300      	movs	r3, #0
 8014de6:	9309      	str	r3, [sp, #36]	; 0x24
 8014de8:	2320      	movs	r3, #32
 8014dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014dee:	2330      	movs	r3, #48	; 0x30
 8014df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014df4:	9503      	str	r5, [sp, #12]
 8014df6:	f04f 0b01 	mov.w	fp, #1
 8014dfa:	46b8      	mov	r8, r7
 8014dfc:	4645      	mov	r5, r8
 8014dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e02:	b10b      	cbz	r3, 8014e08 <_vfiprintf_r+0x50>
 8014e04:	2b25      	cmp	r3, #37	; 0x25
 8014e06:	d154      	bne.n	8014eb2 <_vfiprintf_r+0xfa>
 8014e08:	ebb8 0a07 	subs.w	sl, r8, r7
 8014e0c:	d00b      	beq.n	8014e26 <_vfiprintf_r+0x6e>
 8014e0e:	4653      	mov	r3, sl
 8014e10:	463a      	mov	r2, r7
 8014e12:	4621      	mov	r1, r4
 8014e14:	4630      	mov	r0, r6
 8014e16:	f7ff ffbc 	bl	8014d92 <__sfputs_r>
 8014e1a:	3001      	adds	r0, #1
 8014e1c:	f000 80c2 	beq.w	8014fa4 <_vfiprintf_r+0x1ec>
 8014e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e22:	4453      	add	r3, sl
 8014e24:	9309      	str	r3, [sp, #36]	; 0x24
 8014e26:	f898 3000 	ldrb.w	r3, [r8]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f000 80ba 	beq.w	8014fa4 <_vfiprintf_r+0x1ec>
 8014e30:	2300      	movs	r3, #0
 8014e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e3a:	9304      	str	r3, [sp, #16]
 8014e3c:	9307      	str	r3, [sp, #28]
 8014e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e42:	931a      	str	r3, [sp, #104]	; 0x68
 8014e44:	46a8      	mov	r8, r5
 8014e46:	2205      	movs	r2, #5
 8014e48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014e4c:	485e      	ldr	r0, [pc, #376]	; (8014fc8 <_vfiprintf_r+0x210>)
 8014e4e:	f7eb f9d7 	bl	8000200 <memchr>
 8014e52:	9b04      	ldr	r3, [sp, #16]
 8014e54:	bb78      	cbnz	r0, 8014eb6 <_vfiprintf_r+0xfe>
 8014e56:	06d9      	lsls	r1, r3, #27
 8014e58:	bf44      	itt	mi
 8014e5a:	2220      	movmi	r2, #32
 8014e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e60:	071a      	lsls	r2, r3, #28
 8014e62:	bf44      	itt	mi
 8014e64:	222b      	movmi	r2, #43	; 0x2b
 8014e66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e6a:	782a      	ldrb	r2, [r5, #0]
 8014e6c:	2a2a      	cmp	r2, #42	; 0x2a
 8014e6e:	d02a      	beq.n	8014ec6 <_vfiprintf_r+0x10e>
 8014e70:	9a07      	ldr	r2, [sp, #28]
 8014e72:	46a8      	mov	r8, r5
 8014e74:	2000      	movs	r0, #0
 8014e76:	250a      	movs	r5, #10
 8014e78:	4641      	mov	r1, r8
 8014e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e7e:	3b30      	subs	r3, #48	; 0x30
 8014e80:	2b09      	cmp	r3, #9
 8014e82:	d969      	bls.n	8014f58 <_vfiprintf_r+0x1a0>
 8014e84:	b360      	cbz	r0, 8014ee0 <_vfiprintf_r+0x128>
 8014e86:	e024      	b.n	8014ed2 <_vfiprintf_r+0x11a>
 8014e88:	4b50      	ldr	r3, [pc, #320]	; (8014fcc <_vfiprintf_r+0x214>)
 8014e8a:	429c      	cmp	r4, r3
 8014e8c:	d101      	bne.n	8014e92 <_vfiprintf_r+0xda>
 8014e8e:	68b4      	ldr	r4, [r6, #8]
 8014e90:	e7a2      	b.n	8014dd8 <_vfiprintf_r+0x20>
 8014e92:	4b4f      	ldr	r3, [pc, #316]	; (8014fd0 <_vfiprintf_r+0x218>)
 8014e94:	429c      	cmp	r4, r3
 8014e96:	bf08      	it	eq
 8014e98:	68f4      	ldreq	r4, [r6, #12]
 8014e9a:	e79d      	b.n	8014dd8 <_vfiprintf_r+0x20>
 8014e9c:	4621      	mov	r1, r4
 8014e9e:	4630      	mov	r0, r6
 8014ea0:	f000 fbd6 	bl	8015650 <__swsetup_r>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d09d      	beq.n	8014de4 <_vfiprintf_r+0x2c>
 8014ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eac:	b01d      	add	sp, #116	; 0x74
 8014eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb2:	46a8      	mov	r8, r5
 8014eb4:	e7a2      	b.n	8014dfc <_vfiprintf_r+0x44>
 8014eb6:	4a44      	ldr	r2, [pc, #272]	; (8014fc8 <_vfiprintf_r+0x210>)
 8014eb8:	1a80      	subs	r0, r0, r2
 8014eba:	fa0b f000 	lsl.w	r0, fp, r0
 8014ebe:	4318      	orrs	r0, r3
 8014ec0:	9004      	str	r0, [sp, #16]
 8014ec2:	4645      	mov	r5, r8
 8014ec4:	e7be      	b.n	8014e44 <_vfiprintf_r+0x8c>
 8014ec6:	9a03      	ldr	r2, [sp, #12]
 8014ec8:	1d11      	adds	r1, r2, #4
 8014eca:	6812      	ldr	r2, [r2, #0]
 8014ecc:	9103      	str	r1, [sp, #12]
 8014ece:	2a00      	cmp	r2, #0
 8014ed0:	db01      	blt.n	8014ed6 <_vfiprintf_r+0x11e>
 8014ed2:	9207      	str	r2, [sp, #28]
 8014ed4:	e004      	b.n	8014ee0 <_vfiprintf_r+0x128>
 8014ed6:	4252      	negs	r2, r2
 8014ed8:	f043 0302 	orr.w	r3, r3, #2
 8014edc:	9207      	str	r2, [sp, #28]
 8014ede:	9304      	str	r3, [sp, #16]
 8014ee0:	f898 3000 	ldrb.w	r3, [r8]
 8014ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8014ee6:	d10e      	bne.n	8014f06 <_vfiprintf_r+0x14e>
 8014ee8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014eec:	2b2a      	cmp	r3, #42	; 0x2a
 8014eee:	d138      	bne.n	8014f62 <_vfiprintf_r+0x1aa>
 8014ef0:	9b03      	ldr	r3, [sp, #12]
 8014ef2:	1d1a      	adds	r2, r3, #4
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	9203      	str	r2, [sp, #12]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	bfb8      	it	lt
 8014efc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014f00:	f108 0802 	add.w	r8, r8, #2
 8014f04:	9305      	str	r3, [sp, #20]
 8014f06:	4d33      	ldr	r5, [pc, #204]	; (8014fd4 <_vfiprintf_r+0x21c>)
 8014f08:	f898 1000 	ldrb.w	r1, [r8]
 8014f0c:	2203      	movs	r2, #3
 8014f0e:	4628      	mov	r0, r5
 8014f10:	f7eb f976 	bl	8000200 <memchr>
 8014f14:	b140      	cbz	r0, 8014f28 <_vfiprintf_r+0x170>
 8014f16:	2340      	movs	r3, #64	; 0x40
 8014f18:	1b40      	subs	r0, r0, r5
 8014f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8014f1e:	9b04      	ldr	r3, [sp, #16]
 8014f20:	4303      	orrs	r3, r0
 8014f22:	f108 0801 	add.w	r8, r8, #1
 8014f26:	9304      	str	r3, [sp, #16]
 8014f28:	f898 1000 	ldrb.w	r1, [r8]
 8014f2c:	482a      	ldr	r0, [pc, #168]	; (8014fd8 <_vfiprintf_r+0x220>)
 8014f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f32:	2206      	movs	r2, #6
 8014f34:	f108 0701 	add.w	r7, r8, #1
 8014f38:	f7eb f962 	bl	8000200 <memchr>
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d037      	beq.n	8014fb0 <_vfiprintf_r+0x1f8>
 8014f40:	4b26      	ldr	r3, [pc, #152]	; (8014fdc <_vfiprintf_r+0x224>)
 8014f42:	bb1b      	cbnz	r3, 8014f8c <_vfiprintf_r+0x1d4>
 8014f44:	9b03      	ldr	r3, [sp, #12]
 8014f46:	3307      	adds	r3, #7
 8014f48:	f023 0307 	bic.w	r3, r3, #7
 8014f4c:	3308      	adds	r3, #8
 8014f4e:	9303      	str	r3, [sp, #12]
 8014f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f52:	444b      	add	r3, r9
 8014f54:	9309      	str	r3, [sp, #36]	; 0x24
 8014f56:	e750      	b.n	8014dfa <_vfiprintf_r+0x42>
 8014f58:	fb05 3202 	mla	r2, r5, r2, r3
 8014f5c:	2001      	movs	r0, #1
 8014f5e:	4688      	mov	r8, r1
 8014f60:	e78a      	b.n	8014e78 <_vfiprintf_r+0xc0>
 8014f62:	2300      	movs	r3, #0
 8014f64:	f108 0801 	add.w	r8, r8, #1
 8014f68:	9305      	str	r3, [sp, #20]
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	250a      	movs	r5, #10
 8014f6e:	4640      	mov	r0, r8
 8014f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f74:	3a30      	subs	r2, #48	; 0x30
 8014f76:	2a09      	cmp	r2, #9
 8014f78:	d903      	bls.n	8014f82 <_vfiprintf_r+0x1ca>
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d0c3      	beq.n	8014f06 <_vfiprintf_r+0x14e>
 8014f7e:	9105      	str	r1, [sp, #20]
 8014f80:	e7c1      	b.n	8014f06 <_vfiprintf_r+0x14e>
 8014f82:	fb05 2101 	mla	r1, r5, r1, r2
 8014f86:	2301      	movs	r3, #1
 8014f88:	4680      	mov	r8, r0
 8014f8a:	e7f0      	b.n	8014f6e <_vfiprintf_r+0x1b6>
 8014f8c:	ab03      	add	r3, sp, #12
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	4622      	mov	r2, r4
 8014f92:	4b13      	ldr	r3, [pc, #76]	; (8014fe0 <_vfiprintf_r+0x228>)
 8014f94:	a904      	add	r1, sp, #16
 8014f96:	4630      	mov	r0, r6
 8014f98:	f3af 8000 	nop.w
 8014f9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014fa0:	4681      	mov	r9, r0
 8014fa2:	d1d5      	bne.n	8014f50 <_vfiprintf_r+0x198>
 8014fa4:	89a3      	ldrh	r3, [r4, #12]
 8014fa6:	065b      	lsls	r3, r3, #25
 8014fa8:	f53f af7e 	bmi.w	8014ea8 <_vfiprintf_r+0xf0>
 8014fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fae:	e77d      	b.n	8014eac <_vfiprintf_r+0xf4>
 8014fb0:	ab03      	add	r3, sp, #12
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	4622      	mov	r2, r4
 8014fb6:	4b0a      	ldr	r3, [pc, #40]	; (8014fe0 <_vfiprintf_r+0x228>)
 8014fb8:	a904      	add	r1, sp, #16
 8014fba:	4630      	mov	r0, r6
 8014fbc:	f000 f888 	bl	80150d0 <_printf_i>
 8014fc0:	e7ec      	b.n	8014f9c <_vfiprintf_r+0x1e4>
 8014fc2:	bf00      	nop
 8014fc4:	08018010 	.word	0x08018010
 8014fc8:	08017fbc 	.word	0x08017fbc
 8014fcc:	08018030 	.word	0x08018030
 8014fd0:	08017ff0 	.word	0x08017ff0
 8014fd4:	08017fc2 	.word	0x08017fc2
 8014fd8:	08017fc6 	.word	0x08017fc6
 8014fdc:	00000000 	.word	0x00000000
 8014fe0:	08014d93 	.word	0x08014d93

08014fe4 <_printf_common>:
 8014fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fe8:	4691      	mov	r9, r2
 8014fea:	461f      	mov	r7, r3
 8014fec:	688a      	ldr	r2, [r1, #8]
 8014fee:	690b      	ldr	r3, [r1, #16]
 8014ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	bfb8      	it	lt
 8014ff8:	4613      	movlt	r3, r2
 8014ffa:	f8c9 3000 	str.w	r3, [r9]
 8014ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015002:	4606      	mov	r6, r0
 8015004:	460c      	mov	r4, r1
 8015006:	b112      	cbz	r2, 801500e <_printf_common+0x2a>
 8015008:	3301      	adds	r3, #1
 801500a:	f8c9 3000 	str.w	r3, [r9]
 801500e:	6823      	ldr	r3, [r4, #0]
 8015010:	0699      	lsls	r1, r3, #26
 8015012:	bf42      	ittt	mi
 8015014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015018:	3302      	addmi	r3, #2
 801501a:	f8c9 3000 	strmi.w	r3, [r9]
 801501e:	6825      	ldr	r5, [r4, #0]
 8015020:	f015 0506 	ands.w	r5, r5, #6
 8015024:	d107      	bne.n	8015036 <_printf_common+0x52>
 8015026:	f104 0a19 	add.w	sl, r4, #25
 801502a:	68e3      	ldr	r3, [r4, #12]
 801502c:	f8d9 2000 	ldr.w	r2, [r9]
 8015030:	1a9b      	subs	r3, r3, r2
 8015032:	42ab      	cmp	r3, r5
 8015034:	dc28      	bgt.n	8015088 <_printf_common+0xa4>
 8015036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801503a:	6822      	ldr	r2, [r4, #0]
 801503c:	3300      	adds	r3, #0
 801503e:	bf18      	it	ne
 8015040:	2301      	movne	r3, #1
 8015042:	0692      	lsls	r2, r2, #26
 8015044:	d42d      	bmi.n	80150a2 <_printf_common+0xbe>
 8015046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801504a:	4639      	mov	r1, r7
 801504c:	4630      	mov	r0, r6
 801504e:	47c0      	blx	r8
 8015050:	3001      	adds	r0, #1
 8015052:	d020      	beq.n	8015096 <_printf_common+0xb2>
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	68e5      	ldr	r5, [r4, #12]
 8015058:	f8d9 2000 	ldr.w	r2, [r9]
 801505c:	f003 0306 	and.w	r3, r3, #6
 8015060:	2b04      	cmp	r3, #4
 8015062:	bf08      	it	eq
 8015064:	1aad      	subeq	r5, r5, r2
 8015066:	68a3      	ldr	r3, [r4, #8]
 8015068:	6922      	ldr	r2, [r4, #16]
 801506a:	bf0c      	ite	eq
 801506c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015070:	2500      	movne	r5, #0
 8015072:	4293      	cmp	r3, r2
 8015074:	bfc4      	itt	gt
 8015076:	1a9b      	subgt	r3, r3, r2
 8015078:	18ed      	addgt	r5, r5, r3
 801507a:	f04f 0900 	mov.w	r9, #0
 801507e:	341a      	adds	r4, #26
 8015080:	454d      	cmp	r5, r9
 8015082:	d11a      	bne.n	80150ba <_printf_common+0xd6>
 8015084:	2000      	movs	r0, #0
 8015086:	e008      	b.n	801509a <_printf_common+0xb6>
 8015088:	2301      	movs	r3, #1
 801508a:	4652      	mov	r2, sl
 801508c:	4639      	mov	r1, r7
 801508e:	4630      	mov	r0, r6
 8015090:	47c0      	blx	r8
 8015092:	3001      	adds	r0, #1
 8015094:	d103      	bne.n	801509e <_printf_common+0xba>
 8015096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801509e:	3501      	adds	r5, #1
 80150a0:	e7c3      	b.n	801502a <_printf_common+0x46>
 80150a2:	18e1      	adds	r1, r4, r3
 80150a4:	1c5a      	adds	r2, r3, #1
 80150a6:	2030      	movs	r0, #48	; 0x30
 80150a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80150ac:	4422      	add	r2, r4
 80150ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80150b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80150b6:	3302      	adds	r3, #2
 80150b8:	e7c5      	b.n	8015046 <_printf_common+0x62>
 80150ba:	2301      	movs	r3, #1
 80150bc:	4622      	mov	r2, r4
 80150be:	4639      	mov	r1, r7
 80150c0:	4630      	mov	r0, r6
 80150c2:	47c0      	blx	r8
 80150c4:	3001      	adds	r0, #1
 80150c6:	d0e6      	beq.n	8015096 <_printf_common+0xb2>
 80150c8:	f109 0901 	add.w	r9, r9, #1
 80150cc:	e7d8      	b.n	8015080 <_printf_common+0x9c>
	...

080150d0 <_printf_i>:
 80150d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80150d8:	460c      	mov	r4, r1
 80150da:	7e09      	ldrb	r1, [r1, #24]
 80150dc:	b085      	sub	sp, #20
 80150de:	296e      	cmp	r1, #110	; 0x6e
 80150e0:	4617      	mov	r7, r2
 80150e2:	4606      	mov	r6, r0
 80150e4:	4698      	mov	r8, r3
 80150e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150e8:	f000 80b3 	beq.w	8015252 <_printf_i+0x182>
 80150ec:	d822      	bhi.n	8015134 <_printf_i+0x64>
 80150ee:	2963      	cmp	r1, #99	; 0x63
 80150f0:	d036      	beq.n	8015160 <_printf_i+0x90>
 80150f2:	d80a      	bhi.n	801510a <_printf_i+0x3a>
 80150f4:	2900      	cmp	r1, #0
 80150f6:	f000 80b9 	beq.w	801526c <_printf_i+0x19c>
 80150fa:	2958      	cmp	r1, #88	; 0x58
 80150fc:	f000 8083 	beq.w	8015206 <_printf_i+0x136>
 8015100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015108:	e032      	b.n	8015170 <_printf_i+0xa0>
 801510a:	2964      	cmp	r1, #100	; 0x64
 801510c:	d001      	beq.n	8015112 <_printf_i+0x42>
 801510e:	2969      	cmp	r1, #105	; 0x69
 8015110:	d1f6      	bne.n	8015100 <_printf_i+0x30>
 8015112:	6820      	ldr	r0, [r4, #0]
 8015114:	6813      	ldr	r3, [r2, #0]
 8015116:	0605      	lsls	r5, r0, #24
 8015118:	f103 0104 	add.w	r1, r3, #4
 801511c:	d52a      	bpl.n	8015174 <_printf_i+0xa4>
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6011      	str	r1, [r2, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	da03      	bge.n	801512e <_printf_i+0x5e>
 8015126:	222d      	movs	r2, #45	; 0x2d
 8015128:	425b      	negs	r3, r3
 801512a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801512e:	486f      	ldr	r0, [pc, #444]	; (80152ec <_printf_i+0x21c>)
 8015130:	220a      	movs	r2, #10
 8015132:	e039      	b.n	80151a8 <_printf_i+0xd8>
 8015134:	2973      	cmp	r1, #115	; 0x73
 8015136:	f000 809d 	beq.w	8015274 <_printf_i+0x1a4>
 801513a:	d808      	bhi.n	801514e <_printf_i+0x7e>
 801513c:	296f      	cmp	r1, #111	; 0x6f
 801513e:	d020      	beq.n	8015182 <_printf_i+0xb2>
 8015140:	2970      	cmp	r1, #112	; 0x70
 8015142:	d1dd      	bne.n	8015100 <_printf_i+0x30>
 8015144:	6823      	ldr	r3, [r4, #0]
 8015146:	f043 0320 	orr.w	r3, r3, #32
 801514a:	6023      	str	r3, [r4, #0]
 801514c:	e003      	b.n	8015156 <_printf_i+0x86>
 801514e:	2975      	cmp	r1, #117	; 0x75
 8015150:	d017      	beq.n	8015182 <_printf_i+0xb2>
 8015152:	2978      	cmp	r1, #120	; 0x78
 8015154:	d1d4      	bne.n	8015100 <_printf_i+0x30>
 8015156:	2378      	movs	r3, #120	; 0x78
 8015158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801515c:	4864      	ldr	r0, [pc, #400]	; (80152f0 <_printf_i+0x220>)
 801515e:	e055      	b.n	801520c <_printf_i+0x13c>
 8015160:	6813      	ldr	r3, [r2, #0]
 8015162:	1d19      	adds	r1, r3, #4
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	6011      	str	r1, [r2, #0]
 8015168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801516c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015170:	2301      	movs	r3, #1
 8015172:	e08c      	b.n	801528e <_printf_i+0x1be>
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	6011      	str	r1, [r2, #0]
 8015178:	f010 0f40 	tst.w	r0, #64	; 0x40
 801517c:	bf18      	it	ne
 801517e:	b21b      	sxthne	r3, r3
 8015180:	e7cf      	b.n	8015122 <_printf_i+0x52>
 8015182:	6813      	ldr	r3, [r2, #0]
 8015184:	6825      	ldr	r5, [r4, #0]
 8015186:	1d18      	adds	r0, r3, #4
 8015188:	6010      	str	r0, [r2, #0]
 801518a:	0628      	lsls	r0, r5, #24
 801518c:	d501      	bpl.n	8015192 <_printf_i+0xc2>
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	e002      	b.n	8015198 <_printf_i+0xc8>
 8015192:	0668      	lsls	r0, r5, #25
 8015194:	d5fb      	bpl.n	801518e <_printf_i+0xbe>
 8015196:	881b      	ldrh	r3, [r3, #0]
 8015198:	4854      	ldr	r0, [pc, #336]	; (80152ec <_printf_i+0x21c>)
 801519a:	296f      	cmp	r1, #111	; 0x6f
 801519c:	bf14      	ite	ne
 801519e:	220a      	movne	r2, #10
 80151a0:	2208      	moveq	r2, #8
 80151a2:	2100      	movs	r1, #0
 80151a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80151a8:	6865      	ldr	r5, [r4, #4]
 80151aa:	60a5      	str	r5, [r4, #8]
 80151ac:	2d00      	cmp	r5, #0
 80151ae:	f2c0 8095 	blt.w	80152dc <_printf_i+0x20c>
 80151b2:	6821      	ldr	r1, [r4, #0]
 80151b4:	f021 0104 	bic.w	r1, r1, #4
 80151b8:	6021      	str	r1, [r4, #0]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d13d      	bne.n	801523a <_printf_i+0x16a>
 80151be:	2d00      	cmp	r5, #0
 80151c0:	f040 808e 	bne.w	80152e0 <_printf_i+0x210>
 80151c4:	4665      	mov	r5, ip
 80151c6:	2a08      	cmp	r2, #8
 80151c8:	d10b      	bne.n	80151e2 <_printf_i+0x112>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	07db      	lsls	r3, r3, #31
 80151ce:	d508      	bpl.n	80151e2 <_printf_i+0x112>
 80151d0:	6923      	ldr	r3, [r4, #16]
 80151d2:	6862      	ldr	r2, [r4, #4]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	bfde      	ittt	le
 80151d8:	2330      	movle	r3, #48	; 0x30
 80151da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80151de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80151e2:	ebac 0305 	sub.w	r3, ip, r5
 80151e6:	6123      	str	r3, [r4, #16]
 80151e8:	f8cd 8000 	str.w	r8, [sp]
 80151ec:	463b      	mov	r3, r7
 80151ee:	aa03      	add	r2, sp, #12
 80151f0:	4621      	mov	r1, r4
 80151f2:	4630      	mov	r0, r6
 80151f4:	f7ff fef6 	bl	8014fe4 <_printf_common>
 80151f8:	3001      	adds	r0, #1
 80151fa:	d14d      	bne.n	8015298 <_printf_i+0x1c8>
 80151fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015200:	b005      	add	sp, #20
 8015202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015206:	4839      	ldr	r0, [pc, #228]	; (80152ec <_printf_i+0x21c>)
 8015208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801520c:	6813      	ldr	r3, [r2, #0]
 801520e:	6821      	ldr	r1, [r4, #0]
 8015210:	1d1d      	adds	r5, r3, #4
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	6015      	str	r5, [r2, #0]
 8015216:	060a      	lsls	r2, r1, #24
 8015218:	d50b      	bpl.n	8015232 <_printf_i+0x162>
 801521a:	07ca      	lsls	r2, r1, #31
 801521c:	bf44      	itt	mi
 801521e:	f041 0120 	orrmi.w	r1, r1, #32
 8015222:	6021      	strmi	r1, [r4, #0]
 8015224:	b91b      	cbnz	r3, 801522e <_printf_i+0x15e>
 8015226:	6822      	ldr	r2, [r4, #0]
 8015228:	f022 0220 	bic.w	r2, r2, #32
 801522c:	6022      	str	r2, [r4, #0]
 801522e:	2210      	movs	r2, #16
 8015230:	e7b7      	b.n	80151a2 <_printf_i+0xd2>
 8015232:	064d      	lsls	r5, r1, #25
 8015234:	bf48      	it	mi
 8015236:	b29b      	uxthmi	r3, r3
 8015238:	e7ef      	b.n	801521a <_printf_i+0x14a>
 801523a:	4665      	mov	r5, ip
 801523c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015240:	fb02 3311 	mls	r3, r2, r1, r3
 8015244:	5cc3      	ldrb	r3, [r0, r3]
 8015246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801524a:	460b      	mov	r3, r1
 801524c:	2900      	cmp	r1, #0
 801524e:	d1f5      	bne.n	801523c <_printf_i+0x16c>
 8015250:	e7b9      	b.n	80151c6 <_printf_i+0xf6>
 8015252:	6813      	ldr	r3, [r2, #0]
 8015254:	6825      	ldr	r5, [r4, #0]
 8015256:	6961      	ldr	r1, [r4, #20]
 8015258:	1d18      	adds	r0, r3, #4
 801525a:	6010      	str	r0, [r2, #0]
 801525c:	0628      	lsls	r0, r5, #24
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	d501      	bpl.n	8015266 <_printf_i+0x196>
 8015262:	6019      	str	r1, [r3, #0]
 8015264:	e002      	b.n	801526c <_printf_i+0x19c>
 8015266:	066a      	lsls	r2, r5, #25
 8015268:	d5fb      	bpl.n	8015262 <_printf_i+0x192>
 801526a:	8019      	strh	r1, [r3, #0]
 801526c:	2300      	movs	r3, #0
 801526e:	6123      	str	r3, [r4, #16]
 8015270:	4665      	mov	r5, ip
 8015272:	e7b9      	b.n	80151e8 <_printf_i+0x118>
 8015274:	6813      	ldr	r3, [r2, #0]
 8015276:	1d19      	adds	r1, r3, #4
 8015278:	6011      	str	r1, [r2, #0]
 801527a:	681d      	ldr	r5, [r3, #0]
 801527c:	6862      	ldr	r2, [r4, #4]
 801527e:	2100      	movs	r1, #0
 8015280:	4628      	mov	r0, r5
 8015282:	f7ea ffbd 	bl	8000200 <memchr>
 8015286:	b108      	cbz	r0, 801528c <_printf_i+0x1bc>
 8015288:	1b40      	subs	r0, r0, r5
 801528a:	6060      	str	r0, [r4, #4]
 801528c:	6863      	ldr	r3, [r4, #4]
 801528e:	6123      	str	r3, [r4, #16]
 8015290:	2300      	movs	r3, #0
 8015292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015296:	e7a7      	b.n	80151e8 <_printf_i+0x118>
 8015298:	6923      	ldr	r3, [r4, #16]
 801529a:	462a      	mov	r2, r5
 801529c:	4639      	mov	r1, r7
 801529e:	4630      	mov	r0, r6
 80152a0:	47c0      	blx	r8
 80152a2:	3001      	adds	r0, #1
 80152a4:	d0aa      	beq.n	80151fc <_printf_i+0x12c>
 80152a6:	6823      	ldr	r3, [r4, #0]
 80152a8:	079b      	lsls	r3, r3, #30
 80152aa:	d413      	bmi.n	80152d4 <_printf_i+0x204>
 80152ac:	68e0      	ldr	r0, [r4, #12]
 80152ae:	9b03      	ldr	r3, [sp, #12]
 80152b0:	4298      	cmp	r0, r3
 80152b2:	bfb8      	it	lt
 80152b4:	4618      	movlt	r0, r3
 80152b6:	e7a3      	b.n	8015200 <_printf_i+0x130>
 80152b8:	2301      	movs	r3, #1
 80152ba:	464a      	mov	r2, r9
 80152bc:	4639      	mov	r1, r7
 80152be:	4630      	mov	r0, r6
 80152c0:	47c0      	blx	r8
 80152c2:	3001      	adds	r0, #1
 80152c4:	d09a      	beq.n	80151fc <_printf_i+0x12c>
 80152c6:	3501      	adds	r5, #1
 80152c8:	68e3      	ldr	r3, [r4, #12]
 80152ca:	9a03      	ldr	r2, [sp, #12]
 80152cc:	1a9b      	subs	r3, r3, r2
 80152ce:	42ab      	cmp	r3, r5
 80152d0:	dcf2      	bgt.n	80152b8 <_printf_i+0x1e8>
 80152d2:	e7eb      	b.n	80152ac <_printf_i+0x1dc>
 80152d4:	2500      	movs	r5, #0
 80152d6:	f104 0919 	add.w	r9, r4, #25
 80152da:	e7f5      	b.n	80152c8 <_printf_i+0x1f8>
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1ac      	bne.n	801523a <_printf_i+0x16a>
 80152e0:	7803      	ldrb	r3, [r0, #0]
 80152e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80152e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152ea:	e76c      	b.n	80151c6 <_printf_i+0xf6>
 80152ec:	08017fcd 	.word	0x08017fcd
 80152f0:	08017fde 	.word	0x08017fde

080152f4 <putchar>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4b08      	ldr	r3, [pc, #32]	; (8015318 <putchar+0x24>)
 80152f8:	681c      	ldr	r4, [r3, #0]
 80152fa:	4605      	mov	r5, r0
 80152fc:	b124      	cbz	r4, 8015308 <putchar+0x14>
 80152fe:	69a3      	ldr	r3, [r4, #24]
 8015300:	b913      	cbnz	r3, 8015308 <putchar+0x14>
 8015302:	4620      	mov	r0, r4
 8015304:	f000 fb0a 	bl	801591c <__sinit>
 8015308:	68a2      	ldr	r2, [r4, #8]
 801530a:	4629      	mov	r1, r5
 801530c:	4620      	mov	r0, r4
 801530e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015312:	f000 bd9b 	b.w	8015e4c <_putc_r>
 8015316:	bf00      	nop
 8015318:	200001e8 	.word	0x200001e8

0801531c <_puts_r>:
 801531c:	b570      	push	{r4, r5, r6, lr}
 801531e:	460e      	mov	r6, r1
 8015320:	4605      	mov	r5, r0
 8015322:	b118      	cbz	r0, 801532c <_puts_r+0x10>
 8015324:	6983      	ldr	r3, [r0, #24]
 8015326:	b90b      	cbnz	r3, 801532c <_puts_r+0x10>
 8015328:	f000 faf8 	bl	801591c <__sinit>
 801532c:	69ab      	ldr	r3, [r5, #24]
 801532e:	68ac      	ldr	r4, [r5, #8]
 8015330:	b913      	cbnz	r3, 8015338 <_puts_r+0x1c>
 8015332:	4628      	mov	r0, r5
 8015334:	f000 faf2 	bl	801591c <__sinit>
 8015338:	4b23      	ldr	r3, [pc, #140]	; (80153c8 <_puts_r+0xac>)
 801533a:	429c      	cmp	r4, r3
 801533c:	d117      	bne.n	801536e <_puts_r+0x52>
 801533e:	686c      	ldr	r4, [r5, #4]
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	071b      	lsls	r3, r3, #28
 8015344:	d51d      	bpl.n	8015382 <_puts_r+0x66>
 8015346:	6923      	ldr	r3, [r4, #16]
 8015348:	b1db      	cbz	r3, 8015382 <_puts_r+0x66>
 801534a:	3e01      	subs	r6, #1
 801534c:	68a3      	ldr	r3, [r4, #8]
 801534e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015352:	3b01      	subs	r3, #1
 8015354:	60a3      	str	r3, [r4, #8]
 8015356:	b9e9      	cbnz	r1, 8015394 <_puts_r+0x78>
 8015358:	2b00      	cmp	r3, #0
 801535a:	da2e      	bge.n	80153ba <_puts_r+0x9e>
 801535c:	4622      	mov	r2, r4
 801535e:	210a      	movs	r1, #10
 8015360:	4628      	mov	r0, r5
 8015362:	f000 f923 	bl	80155ac <__swbuf_r>
 8015366:	3001      	adds	r0, #1
 8015368:	d011      	beq.n	801538e <_puts_r+0x72>
 801536a:	200a      	movs	r0, #10
 801536c:	e011      	b.n	8015392 <_puts_r+0x76>
 801536e:	4b17      	ldr	r3, [pc, #92]	; (80153cc <_puts_r+0xb0>)
 8015370:	429c      	cmp	r4, r3
 8015372:	d101      	bne.n	8015378 <_puts_r+0x5c>
 8015374:	68ac      	ldr	r4, [r5, #8]
 8015376:	e7e3      	b.n	8015340 <_puts_r+0x24>
 8015378:	4b15      	ldr	r3, [pc, #84]	; (80153d0 <_puts_r+0xb4>)
 801537a:	429c      	cmp	r4, r3
 801537c:	bf08      	it	eq
 801537e:	68ec      	ldreq	r4, [r5, #12]
 8015380:	e7de      	b.n	8015340 <_puts_r+0x24>
 8015382:	4621      	mov	r1, r4
 8015384:	4628      	mov	r0, r5
 8015386:	f000 f963 	bl	8015650 <__swsetup_r>
 801538a:	2800      	cmp	r0, #0
 801538c:	d0dd      	beq.n	801534a <_puts_r+0x2e>
 801538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015392:	bd70      	pop	{r4, r5, r6, pc}
 8015394:	2b00      	cmp	r3, #0
 8015396:	da04      	bge.n	80153a2 <_puts_r+0x86>
 8015398:	69a2      	ldr	r2, [r4, #24]
 801539a:	429a      	cmp	r2, r3
 801539c:	dc06      	bgt.n	80153ac <_puts_r+0x90>
 801539e:	290a      	cmp	r1, #10
 80153a0:	d004      	beq.n	80153ac <_puts_r+0x90>
 80153a2:	6823      	ldr	r3, [r4, #0]
 80153a4:	1c5a      	adds	r2, r3, #1
 80153a6:	6022      	str	r2, [r4, #0]
 80153a8:	7019      	strb	r1, [r3, #0]
 80153aa:	e7cf      	b.n	801534c <_puts_r+0x30>
 80153ac:	4622      	mov	r2, r4
 80153ae:	4628      	mov	r0, r5
 80153b0:	f000 f8fc 	bl	80155ac <__swbuf_r>
 80153b4:	3001      	adds	r0, #1
 80153b6:	d1c9      	bne.n	801534c <_puts_r+0x30>
 80153b8:	e7e9      	b.n	801538e <_puts_r+0x72>
 80153ba:	6823      	ldr	r3, [r4, #0]
 80153bc:	200a      	movs	r0, #10
 80153be:	1c5a      	adds	r2, r3, #1
 80153c0:	6022      	str	r2, [r4, #0]
 80153c2:	7018      	strb	r0, [r3, #0]
 80153c4:	e7e5      	b.n	8015392 <_puts_r+0x76>
 80153c6:	bf00      	nop
 80153c8:	08018010 	.word	0x08018010
 80153cc:	08018030 	.word	0x08018030
 80153d0:	08017ff0 	.word	0x08017ff0

080153d4 <puts>:
 80153d4:	4b02      	ldr	r3, [pc, #8]	; (80153e0 <puts+0xc>)
 80153d6:	4601      	mov	r1, r0
 80153d8:	6818      	ldr	r0, [r3, #0]
 80153da:	f7ff bf9f 	b.w	801531c <_puts_r>
 80153de:	bf00      	nop
 80153e0:	200001e8 	.word	0x200001e8

080153e4 <_sbrk_r>:
 80153e4:	b538      	push	{r3, r4, r5, lr}
 80153e6:	4c06      	ldr	r4, [pc, #24]	; (8015400 <_sbrk_r+0x1c>)
 80153e8:	2300      	movs	r3, #0
 80153ea:	4605      	mov	r5, r0
 80153ec:	4608      	mov	r0, r1
 80153ee:	6023      	str	r3, [r4, #0]
 80153f0:	f7ef fee0 	bl	80051b4 <_sbrk>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d102      	bne.n	80153fe <_sbrk_r+0x1a>
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	b103      	cbz	r3, 80153fe <_sbrk_r+0x1a>
 80153fc:	602b      	str	r3, [r5, #0]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	2001054c 	.word	0x2001054c

08015404 <siprintf>:
 8015404:	b40e      	push	{r1, r2, r3}
 8015406:	b500      	push	{lr}
 8015408:	b09c      	sub	sp, #112	; 0x70
 801540a:	ab1d      	add	r3, sp, #116	; 0x74
 801540c:	9002      	str	r0, [sp, #8]
 801540e:	9006      	str	r0, [sp, #24]
 8015410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015414:	4809      	ldr	r0, [pc, #36]	; (801543c <siprintf+0x38>)
 8015416:	9107      	str	r1, [sp, #28]
 8015418:	9104      	str	r1, [sp, #16]
 801541a:	4909      	ldr	r1, [pc, #36]	; (8015440 <siprintf+0x3c>)
 801541c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015420:	9105      	str	r1, [sp, #20]
 8015422:	6800      	ldr	r0, [r0, #0]
 8015424:	9301      	str	r3, [sp, #4]
 8015426:	a902      	add	r1, sp, #8
 8015428:	f000 fc18 	bl	8015c5c <_svfiprintf_r>
 801542c:	9b02      	ldr	r3, [sp, #8]
 801542e:	2200      	movs	r2, #0
 8015430:	701a      	strb	r2, [r3, #0]
 8015432:	b01c      	add	sp, #112	; 0x70
 8015434:	f85d eb04 	ldr.w	lr, [sp], #4
 8015438:	b003      	add	sp, #12
 801543a:	4770      	bx	lr
 801543c:	200001e8 	.word	0x200001e8
 8015440:	ffff0208 	.word	0xffff0208

08015444 <strcpy>:
 8015444:	4603      	mov	r3, r0
 8015446:	f811 2b01 	ldrb.w	r2, [r1], #1
 801544a:	f803 2b01 	strb.w	r2, [r3], #1
 801544e:	2a00      	cmp	r2, #0
 8015450:	d1f9      	bne.n	8015446 <strcpy+0x2>
 8015452:	4770      	bx	lr

08015454 <strstr>:
 8015454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015456:	7803      	ldrb	r3, [r0, #0]
 8015458:	b17b      	cbz	r3, 801547a <strstr+0x26>
 801545a:	4604      	mov	r4, r0
 801545c:	7823      	ldrb	r3, [r4, #0]
 801545e:	4620      	mov	r0, r4
 8015460:	1c66      	adds	r6, r4, #1
 8015462:	b17b      	cbz	r3, 8015484 <strstr+0x30>
 8015464:	1e4a      	subs	r2, r1, #1
 8015466:	1e63      	subs	r3, r4, #1
 8015468:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801546c:	b14d      	cbz	r5, 8015482 <strstr+0x2e>
 801546e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015472:	42af      	cmp	r7, r5
 8015474:	4634      	mov	r4, r6
 8015476:	d0f7      	beq.n	8015468 <strstr+0x14>
 8015478:	e7f0      	b.n	801545c <strstr+0x8>
 801547a:	780b      	ldrb	r3, [r1, #0]
 801547c:	2b00      	cmp	r3, #0
 801547e:	bf18      	it	ne
 8015480:	2000      	movne	r0, #0
 8015482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015484:	4618      	mov	r0, r3
 8015486:	e7fc      	b.n	8015482 <strstr+0x2e>

08015488 <_strtol_l.isra.0>:
 8015488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801548c:	4680      	mov	r8, r0
 801548e:	4689      	mov	r9, r1
 8015490:	4692      	mov	sl, r2
 8015492:	461e      	mov	r6, r3
 8015494:	460f      	mov	r7, r1
 8015496:	463d      	mov	r5, r7
 8015498:	9808      	ldr	r0, [sp, #32]
 801549a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801549e:	f000 fac7 	bl	8015a30 <__locale_ctype_ptr_l>
 80154a2:	4420      	add	r0, r4
 80154a4:	7843      	ldrb	r3, [r0, #1]
 80154a6:	f013 0308 	ands.w	r3, r3, #8
 80154aa:	d132      	bne.n	8015512 <_strtol_l.isra.0+0x8a>
 80154ac:	2c2d      	cmp	r4, #45	; 0x2d
 80154ae:	d132      	bne.n	8015516 <_strtol_l.isra.0+0x8e>
 80154b0:	787c      	ldrb	r4, [r7, #1]
 80154b2:	1cbd      	adds	r5, r7, #2
 80154b4:	2201      	movs	r2, #1
 80154b6:	2e00      	cmp	r6, #0
 80154b8:	d05d      	beq.n	8015576 <_strtol_l.isra.0+0xee>
 80154ba:	2e10      	cmp	r6, #16
 80154bc:	d109      	bne.n	80154d2 <_strtol_l.isra.0+0x4a>
 80154be:	2c30      	cmp	r4, #48	; 0x30
 80154c0:	d107      	bne.n	80154d2 <_strtol_l.isra.0+0x4a>
 80154c2:	782b      	ldrb	r3, [r5, #0]
 80154c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80154c8:	2b58      	cmp	r3, #88	; 0x58
 80154ca:	d14f      	bne.n	801556c <_strtol_l.isra.0+0xe4>
 80154cc:	786c      	ldrb	r4, [r5, #1]
 80154ce:	2610      	movs	r6, #16
 80154d0:	3502      	adds	r5, #2
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	bf14      	ite	ne
 80154d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80154da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80154de:	2700      	movs	r7, #0
 80154e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80154e4:	4638      	mov	r0, r7
 80154e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80154ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80154ee:	2b09      	cmp	r3, #9
 80154f0:	d817      	bhi.n	8015522 <_strtol_l.isra.0+0x9a>
 80154f2:	461c      	mov	r4, r3
 80154f4:	42a6      	cmp	r6, r4
 80154f6:	dd23      	ble.n	8015540 <_strtol_l.isra.0+0xb8>
 80154f8:	1c7b      	adds	r3, r7, #1
 80154fa:	d007      	beq.n	801550c <_strtol_l.isra.0+0x84>
 80154fc:	4584      	cmp	ip, r0
 80154fe:	d31c      	bcc.n	801553a <_strtol_l.isra.0+0xb2>
 8015500:	d101      	bne.n	8015506 <_strtol_l.isra.0+0x7e>
 8015502:	45a6      	cmp	lr, r4
 8015504:	db19      	blt.n	801553a <_strtol_l.isra.0+0xb2>
 8015506:	fb00 4006 	mla	r0, r0, r6, r4
 801550a:	2701      	movs	r7, #1
 801550c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015510:	e7eb      	b.n	80154ea <_strtol_l.isra.0+0x62>
 8015512:	462f      	mov	r7, r5
 8015514:	e7bf      	b.n	8015496 <_strtol_l.isra.0+0xe>
 8015516:	2c2b      	cmp	r4, #43	; 0x2b
 8015518:	bf04      	itt	eq
 801551a:	1cbd      	addeq	r5, r7, #2
 801551c:	787c      	ldrbeq	r4, [r7, #1]
 801551e:	461a      	mov	r2, r3
 8015520:	e7c9      	b.n	80154b6 <_strtol_l.isra.0+0x2e>
 8015522:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015526:	2b19      	cmp	r3, #25
 8015528:	d801      	bhi.n	801552e <_strtol_l.isra.0+0xa6>
 801552a:	3c37      	subs	r4, #55	; 0x37
 801552c:	e7e2      	b.n	80154f4 <_strtol_l.isra.0+0x6c>
 801552e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015532:	2b19      	cmp	r3, #25
 8015534:	d804      	bhi.n	8015540 <_strtol_l.isra.0+0xb8>
 8015536:	3c57      	subs	r4, #87	; 0x57
 8015538:	e7dc      	b.n	80154f4 <_strtol_l.isra.0+0x6c>
 801553a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801553e:	e7e5      	b.n	801550c <_strtol_l.isra.0+0x84>
 8015540:	1c7b      	adds	r3, r7, #1
 8015542:	d108      	bne.n	8015556 <_strtol_l.isra.0+0xce>
 8015544:	2322      	movs	r3, #34	; 0x22
 8015546:	f8c8 3000 	str.w	r3, [r8]
 801554a:	4608      	mov	r0, r1
 801554c:	f1ba 0f00 	cmp.w	sl, #0
 8015550:	d107      	bne.n	8015562 <_strtol_l.isra.0+0xda>
 8015552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015556:	b102      	cbz	r2, 801555a <_strtol_l.isra.0+0xd2>
 8015558:	4240      	negs	r0, r0
 801555a:	f1ba 0f00 	cmp.w	sl, #0
 801555e:	d0f8      	beq.n	8015552 <_strtol_l.isra.0+0xca>
 8015560:	b10f      	cbz	r7, 8015566 <_strtol_l.isra.0+0xde>
 8015562:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8015566:	f8ca 9000 	str.w	r9, [sl]
 801556a:	e7f2      	b.n	8015552 <_strtol_l.isra.0+0xca>
 801556c:	2430      	movs	r4, #48	; 0x30
 801556e:	2e00      	cmp	r6, #0
 8015570:	d1af      	bne.n	80154d2 <_strtol_l.isra.0+0x4a>
 8015572:	2608      	movs	r6, #8
 8015574:	e7ad      	b.n	80154d2 <_strtol_l.isra.0+0x4a>
 8015576:	2c30      	cmp	r4, #48	; 0x30
 8015578:	d0a3      	beq.n	80154c2 <_strtol_l.isra.0+0x3a>
 801557a:	260a      	movs	r6, #10
 801557c:	e7a9      	b.n	80154d2 <_strtol_l.isra.0+0x4a>
	...

08015580 <strtol>:
 8015580:	4b08      	ldr	r3, [pc, #32]	; (80155a4 <strtol+0x24>)
 8015582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015584:	681c      	ldr	r4, [r3, #0]
 8015586:	4d08      	ldr	r5, [pc, #32]	; (80155a8 <strtol+0x28>)
 8015588:	6a23      	ldr	r3, [r4, #32]
 801558a:	2b00      	cmp	r3, #0
 801558c:	bf08      	it	eq
 801558e:	462b      	moveq	r3, r5
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	4613      	mov	r3, r2
 8015594:	460a      	mov	r2, r1
 8015596:	4601      	mov	r1, r0
 8015598:	4620      	mov	r0, r4
 801559a:	f7ff ff75 	bl	8015488 <_strtol_l.isra.0>
 801559e:	b003      	add	sp, #12
 80155a0:	bd30      	pop	{r4, r5, pc}
 80155a2:	bf00      	nop
 80155a4:	200001e8 	.word	0x200001e8
 80155a8:	2000024c 	.word	0x2000024c

080155ac <__swbuf_r>:
 80155ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ae:	460e      	mov	r6, r1
 80155b0:	4614      	mov	r4, r2
 80155b2:	4605      	mov	r5, r0
 80155b4:	b118      	cbz	r0, 80155be <__swbuf_r+0x12>
 80155b6:	6983      	ldr	r3, [r0, #24]
 80155b8:	b90b      	cbnz	r3, 80155be <__swbuf_r+0x12>
 80155ba:	f000 f9af 	bl	801591c <__sinit>
 80155be:	4b21      	ldr	r3, [pc, #132]	; (8015644 <__swbuf_r+0x98>)
 80155c0:	429c      	cmp	r4, r3
 80155c2:	d12a      	bne.n	801561a <__swbuf_r+0x6e>
 80155c4:	686c      	ldr	r4, [r5, #4]
 80155c6:	69a3      	ldr	r3, [r4, #24]
 80155c8:	60a3      	str	r3, [r4, #8]
 80155ca:	89a3      	ldrh	r3, [r4, #12]
 80155cc:	071a      	lsls	r2, r3, #28
 80155ce:	d52e      	bpl.n	801562e <__swbuf_r+0x82>
 80155d0:	6923      	ldr	r3, [r4, #16]
 80155d2:	b363      	cbz	r3, 801562e <__swbuf_r+0x82>
 80155d4:	6923      	ldr	r3, [r4, #16]
 80155d6:	6820      	ldr	r0, [r4, #0]
 80155d8:	1ac0      	subs	r0, r0, r3
 80155da:	6963      	ldr	r3, [r4, #20]
 80155dc:	b2f6      	uxtb	r6, r6
 80155de:	4283      	cmp	r3, r0
 80155e0:	4637      	mov	r7, r6
 80155e2:	dc04      	bgt.n	80155ee <__swbuf_r+0x42>
 80155e4:	4621      	mov	r1, r4
 80155e6:	4628      	mov	r0, r5
 80155e8:	f000 f92e 	bl	8015848 <_fflush_r>
 80155ec:	bb28      	cbnz	r0, 801563a <__swbuf_r+0x8e>
 80155ee:	68a3      	ldr	r3, [r4, #8]
 80155f0:	3b01      	subs	r3, #1
 80155f2:	60a3      	str	r3, [r4, #8]
 80155f4:	6823      	ldr	r3, [r4, #0]
 80155f6:	1c5a      	adds	r2, r3, #1
 80155f8:	6022      	str	r2, [r4, #0]
 80155fa:	701e      	strb	r6, [r3, #0]
 80155fc:	6963      	ldr	r3, [r4, #20]
 80155fe:	3001      	adds	r0, #1
 8015600:	4283      	cmp	r3, r0
 8015602:	d004      	beq.n	801560e <__swbuf_r+0x62>
 8015604:	89a3      	ldrh	r3, [r4, #12]
 8015606:	07db      	lsls	r3, r3, #31
 8015608:	d519      	bpl.n	801563e <__swbuf_r+0x92>
 801560a:	2e0a      	cmp	r6, #10
 801560c:	d117      	bne.n	801563e <__swbuf_r+0x92>
 801560e:	4621      	mov	r1, r4
 8015610:	4628      	mov	r0, r5
 8015612:	f000 f919 	bl	8015848 <_fflush_r>
 8015616:	b190      	cbz	r0, 801563e <__swbuf_r+0x92>
 8015618:	e00f      	b.n	801563a <__swbuf_r+0x8e>
 801561a:	4b0b      	ldr	r3, [pc, #44]	; (8015648 <__swbuf_r+0x9c>)
 801561c:	429c      	cmp	r4, r3
 801561e:	d101      	bne.n	8015624 <__swbuf_r+0x78>
 8015620:	68ac      	ldr	r4, [r5, #8]
 8015622:	e7d0      	b.n	80155c6 <__swbuf_r+0x1a>
 8015624:	4b09      	ldr	r3, [pc, #36]	; (801564c <__swbuf_r+0xa0>)
 8015626:	429c      	cmp	r4, r3
 8015628:	bf08      	it	eq
 801562a:	68ec      	ldreq	r4, [r5, #12]
 801562c:	e7cb      	b.n	80155c6 <__swbuf_r+0x1a>
 801562e:	4621      	mov	r1, r4
 8015630:	4628      	mov	r0, r5
 8015632:	f000 f80d 	bl	8015650 <__swsetup_r>
 8015636:	2800      	cmp	r0, #0
 8015638:	d0cc      	beq.n	80155d4 <__swbuf_r+0x28>
 801563a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801563e:	4638      	mov	r0, r7
 8015640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015642:	bf00      	nop
 8015644:	08018010 	.word	0x08018010
 8015648:	08018030 	.word	0x08018030
 801564c:	08017ff0 	.word	0x08017ff0

08015650 <__swsetup_r>:
 8015650:	4b32      	ldr	r3, [pc, #200]	; (801571c <__swsetup_r+0xcc>)
 8015652:	b570      	push	{r4, r5, r6, lr}
 8015654:	681d      	ldr	r5, [r3, #0]
 8015656:	4606      	mov	r6, r0
 8015658:	460c      	mov	r4, r1
 801565a:	b125      	cbz	r5, 8015666 <__swsetup_r+0x16>
 801565c:	69ab      	ldr	r3, [r5, #24]
 801565e:	b913      	cbnz	r3, 8015666 <__swsetup_r+0x16>
 8015660:	4628      	mov	r0, r5
 8015662:	f000 f95b 	bl	801591c <__sinit>
 8015666:	4b2e      	ldr	r3, [pc, #184]	; (8015720 <__swsetup_r+0xd0>)
 8015668:	429c      	cmp	r4, r3
 801566a:	d10f      	bne.n	801568c <__swsetup_r+0x3c>
 801566c:	686c      	ldr	r4, [r5, #4]
 801566e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015672:	b29a      	uxth	r2, r3
 8015674:	0715      	lsls	r5, r2, #28
 8015676:	d42c      	bmi.n	80156d2 <__swsetup_r+0x82>
 8015678:	06d0      	lsls	r0, r2, #27
 801567a:	d411      	bmi.n	80156a0 <__swsetup_r+0x50>
 801567c:	2209      	movs	r2, #9
 801567e:	6032      	str	r2, [r6, #0]
 8015680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015684:	81a3      	strh	r3, [r4, #12]
 8015686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801568a:	e03e      	b.n	801570a <__swsetup_r+0xba>
 801568c:	4b25      	ldr	r3, [pc, #148]	; (8015724 <__swsetup_r+0xd4>)
 801568e:	429c      	cmp	r4, r3
 8015690:	d101      	bne.n	8015696 <__swsetup_r+0x46>
 8015692:	68ac      	ldr	r4, [r5, #8]
 8015694:	e7eb      	b.n	801566e <__swsetup_r+0x1e>
 8015696:	4b24      	ldr	r3, [pc, #144]	; (8015728 <__swsetup_r+0xd8>)
 8015698:	429c      	cmp	r4, r3
 801569a:	bf08      	it	eq
 801569c:	68ec      	ldreq	r4, [r5, #12]
 801569e:	e7e6      	b.n	801566e <__swsetup_r+0x1e>
 80156a0:	0751      	lsls	r1, r2, #29
 80156a2:	d512      	bpl.n	80156ca <__swsetup_r+0x7a>
 80156a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156a6:	b141      	cbz	r1, 80156ba <__swsetup_r+0x6a>
 80156a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156ac:	4299      	cmp	r1, r3
 80156ae:	d002      	beq.n	80156b6 <__swsetup_r+0x66>
 80156b0:	4630      	mov	r0, r6
 80156b2:	f7ff faaf 	bl	8014c14 <_free_r>
 80156b6:	2300      	movs	r3, #0
 80156b8:	6363      	str	r3, [r4, #52]	; 0x34
 80156ba:	89a3      	ldrh	r3, [r4, #12]
 80156bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80156c0:	81a3      	strh	r3, [r4, #12]
 80156c2:	2300      	movs	r3, #0
 80156c4:	6063      	str	r3, [r4, #4]
 80156c6:	6923      	ldr	r3, [r4, #16]
 80156c8:	6023      	str	r3, [r4, #0]
 80156ca:	89a3      	ldrh	r3, [r4, #12]
 80156cc:	f043 0308 	orr.w	r3, r3, #8
 80156d0:	81a3      	strh	r3, [r4, #12]
 80156d2:	6923      	ldr	r3, [r4, #16]
 80156d4:	b94b      	cbnz	r3, 80156ea <__swsetup_r+0x9a>
 80156d6:	89a3      	ldrh	r3, [r4, #12]
 80156d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80156dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156e0:	d003      	beq.n	80156ea <__swsetup_r+0x9a>
 80156e2:	4621      	mov	r1, r4
 80156e4:	4630      	mov	r0, r6
 80156e6:	f000 f9cb 	bl	8015a80 <__smakebuf_r>
 80156ea:	89a2      	ldrh	r2, [r4, #12]
 80156ec:	f012 0301 	ands.w	r3, r2, #1
 80156f0:	d00c      	beq.n	801570c <__swsetup_r+0xbc>
 80156f2:	2300      	movs	r3, #0
 80156f4:	60a3      	str	r3, [r4, #8]
 80156f6:	6963      	ldr	r3, [r4, #20]
 80156f8:	425b      	negs	r3, r3
 80156fa:	61a3      	str	r3, [r4, #24]
 80156fc:	6923      	ldr	r3, [r4, #16]
 80156fe:	b953      	cbnz	r3, 8015716 <__swsetup_r+0xc6>
 8015700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015704:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015708:	d1ba      	bne.n	8015680 <__swsetup_r+0x30>
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	0792      	lsls	r2, r2, #30
 801570e:	bf58      	it	pl
 8015710:	6963      	ldrpl	r3, [r4, #20]
 8015712:	60a3      	str	r3, [r4, #8]
 8015714:	e7f2      	b.n	80156fc <__swsetup_r+0xac>
 8015716:	2000      	movs	r0, #0
 8015718:	e7f7      	b.n	801570a <__swsetup_r+0xba>
 801571a:	bf00      	nop
 801571c:	200001e8 	.word	0x200001e8
 8015720:	08018010 	.word	0x08018010
 8015724:	08018030 	.word	0x08018030
 8015728:	08017ff0 	.word	0x08017ff0

0801572c <abort>:
 801572c:	b508      	push	{r3, lr}
 801572e:	2006      	movs	r0, #6
 8015730:	f000 fbea 	bl	8015f08 <raise>
 8015734:	2001      	movs	r0, #1
 8015736:	f7ef fce1 	bl	80050fc <_exit>
	...

0801573c <__sflush_r>:
 801573c:	898a      	ldrh	r2, [r1, #12]
 801573e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015742:	4605      	mov	r5, r0
 8015744:	0710      	lsls	r0, r2, #28
 8015746:	460c      	mov	r4, r1
 8015748:	d458      	bmi.n	80157fc <__sflush_r+0xc0>
 801574a:	684b      	ldr	r3, [r1, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	dc05      	bgt.n	801575c <__sflush_r+0x20>
 8015750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015752:	2b00      	cmp	r3, #0
 8015754:	dc02      	bgt.n	801575c <__sflush_r+0x20>
 8015756:	2000      	movs	r0, #0
 8015758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801575e:	2e00      	cmp	r6, #0
 8015760:	d0f9      	beq.n	8015756 <__sflush_r+0x1a>
 8015762:	2300      	movs	r3, #0
 8015764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015768:	682f      	ldr	r7, [r5, #0]
 801576a:	6a21      	ldr	r1, [r4, #32]
 801576c:	602b      	str	r3, [r5, #0]
 801576e:	d032      	beq.n	80157d6 <__sflush_r+0x9a>
 8015770:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015772:	89a3      	ldrh	r3, [r4, #12]
 8015774:	075a      	lsls	r2, r3, #29
 8015776:	d505      	bpl.n	8015784 <__sflush_r+0x48>
 8015778:	6863      	ldr	r3, [r4, #4]
 801577a:	1ac0      	subs	r0, r0, r3
 801577c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801577e:	b10b      	cbz	r3, 8015784 <__sflush_r+0x48>
 8015780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015782:	1ac0      	subs	r0, r0, r3
 8015784:	2300      	movs	r3, #0
 8015786:	4602      	mov	r2, r0
 8015788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801578a:	6a21      	ldr	r1, [r4, #32]
 801578c:	4628      	mov	r0, r5
 801578e:	47b0      	blx	r6
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	89a3      	ldrh	r3, [r4, #12]
 8015794:	d106      	bne.n	80157a4 <__sflush_r+0x68>
 8015796:	6829      	ldr	r1, [r5, #0]
 8015798:	291d      	cmp	r1, #29
 801579a:	d848      	bhi.n	801582e <__sflush_r+0xf2>
 801579c:	4a29      	ldr	r2, [pc, #164]	; (8015844 <__sflush_r+0x108>)
 801579e:	40ca      	lsrs	r2, r1
 80157a0:	07d6      	lsls	r6, r2, #31
 80157a2:	d544      	bpl.n	801582e <__sflush_r+0xf2>
 80157a4:	2200      	movs	r2, #0
 80157a6:	6062      	str	r2, [r4, #4]
 80157a8:	04d9      	lsls	r1, r3, #19
 80157aa:	6922      	ldr	r2, [r4, #16]
 80157ac:	6022      	str	r2, [r4, #0]
 80157ae:	d504      	bpl.n	80157ba <__sflush_r+0x7e>
 80157b0:	1c42      	adds	r2, r0, #1
 80157b2:	d101      	bne.n	80157b8 <__sflush_r+0x7c>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	b903      	cbnz	r3, 80157ba <__sflush_r+0x7e>
 80157b8:	6560      	str	r0, [r4, #84]	; 0x54
 80157ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157bc:	602f      	str	r7, [r5, #0]
 80157be:	2900      	cmp	r1, #0
 80157c0:	d0c9      	beq.n	8015756 <__sflush_r+0x1a>
 80157c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157c6:	4299      	cmp	r1, r3
 80157c8:	d002      	beq.n	80157d0 <__sflush_r+0x94>
 80157ca:	4628      	mov	r0, r5
 80157cc:	f7ff fa22 	bl	8014c14 <_free_r>
 80157d0:	2000      	movs	r0, #0
 80157d2:	6360      	str	r0, [r4, #52]	; 0x34
 80157d4:	e7c0      	b.n	8015758 <__sflush_r+0x1c>
 80157d6:	2301      	movs	r3, #1
 80157d8:	4628      	mov	r0, r5
 80157da:	47b0      	blx	r6
 80157dc:	1c41      	adds	r1, r0, #1
 80157de:	d1c8      	bne.n	8015772 <__sflush_r+0x36>
 80157e0:	682b      	ldr	r3, [r5, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d0c5      	beq.n	8015772 <__sflush_r+0x36>
 80157e6:	2b1d      	cmp	r3, #29
 80157e8:	d001      	beq.n	80157ee <__sflush_r+0xb2>
 80157ea:	2b16      	cmp	r3, #22
 80157ec:	d101      	bne.n	80157f2 <__sflush_r+0xb6>
 80157ee:	602f      	str	r7, [r5, #0]
 80157f0:	e7b1      	b.n	8015756 <__sflush_r+0x1a>
 80157f2:	89a3      	ldrh	r3, [r4, #12]
 80157f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157f8:	81a3      	strh	r3, [r4, #12]
 80157fa:	e7ad      	b.n	8015758 <__sflush_r+0x1c>
 80157fc:	690f      	ldr	r7, [r1, #16]
 80157fe:	2f00      	cmp	r7, #0
 8015800:	d0a9      	beq.n	8015756 <__sflush_r+0x1a>
 8015802:	0793      	lsls	r3, r2, #30
 8015804:	680e      	ldr	r6, [r1, #0]
 8015806:	bf08      	it	eq
 8015808:	694b      	ldreq	r3, [r1, #20]
 801580a:	600f      	str	r7, [r1, #0]
 801580c:	bf18      	it	ne
 801580e:	2300      	movne	r3, #0
 8015810:	eba6 0807 	sub.w	r8, r6, r7
 8015814:	608b      	str	r3, [r1, #8]
 8015816:	f1b8 0f00 	cmp.w	r8, #0
 801581a:	dd9c      	ble.n	8015756 <__sflush_r+0x1a>
 801581c:	4643      	mov	r3, r8
 801581e:	463a      	mov	r2, r7
 8015820:	6a21      	ldr	r1, [r4, #32]
 8015822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015824:	4628      	mov	r0, r5
 8015826:	47b0      	blx	r6
 8015828:	2800      	cmp	r0, #0
 801582a:	dc06      	bgt.n	801583a <__sflush_r+0xfe>
 801582c:	89a3      	ldrh	r3, [r4, #12]
 801582e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015832:	81a3      	strh	r3, [r4, #12]
 8015834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015838:	e78e      	b.n	8015758 <__sflush_r+0x1c>
 801583a:	4407      	add	r7, r0
 801583c:	eba8 0800 	sub.w	r8, r8, r0
 8015840:	e7e9      	b.n	8015816 <__sflush_r+0xda>
 8015842:	bf00      	nop
 8015844:	20400001 	.word	0x20400001

08015848 <_fflush_r>:
 8015848:	b538      	push	{r3, r4, r5, lr}
 801584a:	690b      	ldr	r3, [r1, #16]
 801584c:	4605      	mov	r5, r0
 801584e:	460c      	mov	r4, r1
 8015850:	b1db      	cbz	r3, 801588a <_fflush_r+0x42>
 8015852:	b118      	cbz	r0, 801585c <_fflush_r+0x14>
 8015854:	6983      	ldr	r3, [r0, #24]
 8015856:	b90b      	cbnz	r3, 801585c <_fflush_r+0x14>
 8015858:	f000 f860 	bl	801591c <__sinit>
 801585c:	4b0c      	ldr	r3, [pc, #48]	; (8015890 <_fflush_r+0x48>)
 801585e:	429c      	cmp	r4, r3
 8015860:	d109      	bne.n	8015876 <_fflush_r+0x2e>
 8015862:	686c      	ldr	r4, [r5, #4]
 8015864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015868:	b17b      	cbz	r3, 801588a <_fflush_r+0x42>
 801586a:	4621      	mov	r1, r4
 801586c:	4628      	mov	r0, r5
 801586e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015872:	f7ff bf63 	b.w	801573c <__sflush_r>
 8015876:	4b07      	ldr	r3, [pc, #28]	; (8015894 <_fflush_r+0x4c>)
 8015878:	429c      	cmp	r4, r3
 801587a:	d101      	bne.n	8015880 <_fflush_r+0x38>
 801587c:	68ac      	ldr	r4, [r5, #8]
 801587e:	e7f1      	b.n	8015864 <_fflush_r+0x1c>
 8015880:	4b05      	ldr	r3, [pc, #20]	; (8015898 <_fflush_r+0x50>)
 8015882:	429c      	cmp	r4, r3
 8015884:	bf08      	it	eq
 8015886:	68ec      	ldreq	r4, [r5, #12]
 8015888:	e7ec      	b.n	8015864 <_fflush_r+0x1c>
 801588a:	2000      	movs	r0, #0
 801588c:	bd38      	pop	{r3, r4, r5, pc}
 801588e:	bf00      	nop
 8015890:	08018010 	.word	0x08018010
 8015894:	08018030 	.word	0x08018030
 8015898:	08017ff0 	.word	0x08017ff0

0801589c <std>:
 801589c:	2300      	movs	r3, #0
 801589e:	b510      	push	{r4, lr}
 80158a0:	4604      	mov	r4, r0
 80158a2:	e9c0 3300 	strd	r3, r3, [r0]
 80158a6:	6083      	str	r3, [r0, #8]
 80158a8:	8181      	strh	r1, [r0, #12]
 80158aa:	6643      	str	r3, [r0, #100]	; 0x64
 80158ac:	81c2      	strh	r2, [r0, #14]
 80158ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158b2:	6183      	str	r3, [r0, #24]
 80158b4:	4619      	mov	r1, r3
 80158b6:	2208      	movs	r2, #8
 80158b8:	305c      	adds	r0, #92	; 0x5c
 80158ba:	f7ff f9a2 	bl	8014c02 <memset>
 80158be:	4b05      	ldr	r3, [pc, #20]	; (80158d4 <std+0x38>)
 80158c0:	6263      	str	r3, [r4, #36]	; 0x24
 80158c2:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <std+0x3c>)
 80158c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80158c6:	4b05      	ldr	r3, [pc, #20]	; (80158dc <std+0x40>)
 80158c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158ca:	4b05      	ldr	r3, [pc, #20]	; (80158e0 <std+0x44>)
 80158cc:	6224      	str	r4, [r4, #32]
 80158ce:	6323      	str	r3, [r4, #48]	; 0x30
 80158d0:	bd10      	pop	{r4, pc}
 80158d2:	bf00      	nop
 80158d4:	08015f41 	.word	0x08015f41
 80158d8:	08015f63 	.word	0x08015f63
 80158dc:	08015f9b 	.word	0x08015f9b
 80158e0:	08015fbf 	.word	0x08015fbf

080158e4 <_cleanup_r>:
 80158e4:	4901      	ldr	r1, [pc, #4]	; (80158ec <_cleanup_r+0x8>)
 80158e6:	f000 b885 	b.w	80159f4 <_fwalk_reent>
 80158ea:	bf00      	nop
 80158ec:	08015849 	.word	0x08015849

080158f0 <__sfmoreglue>:
 80158f0:	b570      	push	{r4, r5, r6, lr}
 80158f2:	1e4a      	subs	r2, r1, #1
 80158f4:	2568      	movs	r5, #104	; 0x68
 80158f6:	4355      	muls	r5, r2
 80158f8:	460e      	mov	r6, r1
 80158fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158fe:	f7ff f9d7 	bl	8014cb0 <_malloc_r>
 8015902:	4604      	mov	r4, r0
 8015904:	b140      	cbz	r0, 8015918 <__sfmoreglue+0x28>
 8015906:	2100      	movs	r1, #0
 8015908:	e9c0 1600 	strd	r1, r6, [r0]
 801590c:	300c      	adds	r0, #12
 801590e:	60a0      	str	r0, [r4, #8]
 8015910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015914:	f7ff f975 	bl	8014c02 <memset>
 8015918:	4620      	mov	r0, r4
 801591a:	bd70      	pop	{r4, r5, r6, pc}

0801591c <__sinit>:
 801591c:	6983      	ldr	r3, [r0, #24]
 801591e:	b510      	push	{r4, lr}
 8015920:	4604      	mov	r4, r0
 8015922:	bb33      	cbnz	r3, 8015972 <__sinit+0x56>
 8015924:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015928:	6503      	str	r3, [r0, #80]	; 0x50
 801592a:	4b12      	ldr	r3, [pc, #72]	; (8015974 <__sinit+0x58>)
 801592c:	4a12      	ldr	r2, [pc, #72]	; (8015978 <__sinit+0x5c>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	6282      	str	r2, [r0, #40]	; 0x28
 8015932:	4298      	cmp	r0, r3
 8015934:	bf04      	itt	eq
 8015936:	2301      	moveq	r3, #1
 8015938:	6183      	streq	r3, [r0, #24]
 801593a:	f000 f81f 	bl	801597c <__sfp>
 801593e:	6060      	str	r0, [r4, #4]
 8015940:	4620      	mov	r0, r4
 8015942:	f000 f81b 	bl	801597c <__sfp>
 8015946:	60a0      	str	r0, [r4, #8]
 8015948:	4620      	mov	r0, r4
 801594a:	f000 f817 	bl	801597c <__sfp>
 801594e:	2200      	movs	r2, #0
 8015950:	60e0      	str	r0, [r4, #12]
 8015952:	2104      	movs	r1, #4
 8015954:	6860      	ldr	r0, [r4, #4]
 8015956:	f7ff ffa1 	bl	801589c <std>
 801595a:	2201      	movs	r2, #1
 801595c:	2109      	movs	r1, #9
 801595e:	68a0      	ldr	r0, [r4, #8]
 8015960:	f7ff ff9c 	bl	801589c <std>
 8015964:	2202      	movs	r2, #2
 8015966:	2112      	movs	r1, #18
 8015968:	68e0      	ldr	r0, [r4, #12]
 801596a:	f7ff ff97 	bl	801589c <std>
 801596e:	2301      	movs	r3, #1
 8015970:	61a3      	str	r3, [r4, #24]
 8015972:	bd10      	pop	{r4, pc}
 8015974:	08017fb8 	.word	0x08017fb8
 8015978:	080158e5 	.word	0x080158e5

0801597c <__sfp>:
 801597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801597e:	4b1b      	ldr	r3, [pc, #108]	; (80159ec <__sfp+0x70>)
 8015980:	681e      	ldr	r6, [r3, #0]
 8015982:	69b3      	ldr	r3, [r6, #24]
 8015984:	4607      	mov	r7, r0
 8015986:	b913      	cbnz	r3, 801598e <__sfp+0x12>
 8015988:	4630      	mov	r0, r6
 801598a:	f7ff ffc7 	bl	801591c <__sinit>
 801598e:	3648      	adds	r6, #72	; 0x48
 8015990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015994:	3b01      	subs	r3, #1
 8015996:	d503      	bpl.n	80159a0 <__sfp+0x24>
 8015998:	6833      	ldr	r3, [r6, #0]
 801599a:	b133      	cbz	r3, 80159aa <__sfp+0x2e>
 801599c:	6836      	ldr	r6, [r6, #0]
 801599e:	e7f7      	b.n	8015990 <__sfp+0x14>
 80159a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159a4:	b16d      	cbz	r5, 80159c2 <__sfp+0x46>
 80159a6:	3468      	adds	r4, #104	; 0x68
 80159a8:	e7f4      	b.n	8015994 <__sfp+0x18>
 80159aa:	2104      	movs	r1, #4
 80159ac:	4638      	mov	r0, r7
 80159ae:	f7ff ff9f 	bl	80158f0 <__sfmoreglue>
 80159b2:	6030      	str	r0, [r6, #0]
 80159b4:	2800      	cmp	r0, #0
 80159b6:	d1f1      	bne.n	801599c <__sfp+0x20>
 80159b8:	230c      	movs	r3, #12
 80159ba:	603b      	str	r3, [r7, #0]
 80159bc:	4604      	mov	r4, r0
 80159be:	4620      	mov	r0, r4
 80159c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159c2:	4b0b      	ldr	r3, [pc, #44]	; (80159f0 <__sfp+0x74>)
 80159c4:	6665      	str	r5, [r4, #100]	; 0x64
 80159c6:	e9c4 5500 	strd	r5, r5, [r4]
 80159ca:	60a5      	str	r5, [r4, #8]
 80159cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80159d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80159d4:	2208      	movs	r2, #8
 80159d6:	4629      	mov	r1, r5
 80159d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80159dc:	f7ff f911 	bl	8014c02 <memset>
 80159e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80159e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80159e8:	e7e9      	b.n	80159be <__sfp+0x42>
 80159ea:	bf00      	nop
 80159ec:	08017fb8 	.word	0x08017fb8
 80159f0:	ffff0001 	.word	0xffff0001

080159f4 <_fwalk_reent>:
 80159f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159f8:	4680      	mov	r8, r0
 80159fa:	4689      	mov	r9, r1
 80159fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a00:	2600      	movs	r6, #0
 8015a02:	b914      	cbnz	r4, 8015a0a <_fwalk_reent+0x16>
 8015a04:	4630      	mov	r0, r6
 8015a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015a0e:	3f01      	subs	r7, #1
 8015a10:	d501      	bpl.n	8015a16 <_fwalk_reent+0x22>
 8015a12:	6824      	ldr	r4, [r4, #0]
 8015a14:	e7f5      	b.n	8015a02 <_fwalk_reent+0xe>
 8015a16:	89ab      	ldrh	r3, [r5, #12]
 8015a18:	2b01      	cmp	r3, #1
 8015a1a:	d907      	bls.n	8015a2c <_fwalk_reent+0x38>
 8015a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a20:	3301      	adds	r3, #1
 8015a22:	d003      	beq.n	8015a2c <_fwalk_reent+0x38>
 8015a24:	4629      	mov	r1, r5
 8015a26:	4640      	mov	r0, r8
 8015a28:	47c8      	blx	r9
 8015a2a:	4306      	orrs	r6, r0
 8015a2c:	3568      	adds	r5, #104	; 0x68
 8015a2e:	e7ee      	b.n	8015a0e <_fwalk_reent+0x1a>

08015a30 <__locale_ctype_ptr_l>:
 8015a30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015a34:	4770      	bx	lr

08015a36 <__swhatbuf_r>:
 8015a36:	b570      	push	{r4, r5, r6, lr}
 8015a38:	460e      	mov	r6, r1
 8015a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a3e:	2900      	cmp	r1, #0
 8015a40:	b096      	sub	sp, #88	; 0x58
 8015a42:	4614      	mov	r4, r2
 8015a44:	461d      	mov	r5, r3
 8015a46:	da07      	bge.n	8015a58 <__swhatbuf_r+0x22>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	602b      	str	r3, [r5, #0]
 8015a4c:	89b3      	ldrh	r3, [r6, #12]
 8015a4e:	061a      	lsls	r2, r3, #24
 8015a50:	d410      	bmi.n	8015a74 <__swhatbuf_r+0x3e>
 8015a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a56:	e00e      	b.n	8015a76 <__swhatbuf_r+0x40>
 8015a58:	466a      	mov	r2, sp
 8015a5a:	f000 fae3 	bl	8016024 <_fstat_r>
 8015a5e:	2800      	cmp	r0, #0
 8015a60:	dbf2      	blt.n	8015a48 <__swhatbuf_r+0x12>
 8015a62:	9a01      	ldr	r2, [sp, #4]
 8015a64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a6c:	425a      	negs	r2, r3
 8015a6e:	415a      	adcs	r2, r3
 8015a70:	602a      	str	r2, [r5, #0]
 8015a72:	e7ee      	b.n	8015a52 <__swhatbuf_r+0x1c>
 8015a74:	2340      	movs	r3, #64	; 0x40
 8015a76:	2000      	movs	r0, #0
 8015a78:	6023      	str	r3, [r4, #0]
 8015a7a:	b016      	add	sp, #88	; 0x58
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a80 <__smakebuf_r>:
 8015a80:	898b      	ldrh	r3, [r1, #12]
 8015a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a84:	079d      	lsls	r5, r3, #30
 8015a86:	4606      	mov	r6, r0
 8015a88:	460c      	mov	r4, r1
 8015a8a:	d507      	bpl.n	8015a9c <__smakebuf_r+0x1c>
 8015a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a90:	6023      	str	r3, [r4, #0]
 8015a92:	6123      	str	r3, [r4, #16]
 8015a94:	2301      	movs	r3, #1
 8015a96:	6163      	str	r3, [r4, #20]
 8015a98:	b002      	add	sp, #8
 8015a9a:	bd70      	pop	{r4, r5, r6, pc}
 8015a9c:	ab01      	add	r3, sp, #4
 8015a9e:	466a      	mov	r2, sp
 8015aa0:	f7ff ffc9 	bl	8015a36 <__swhatbuf_r>
 8015aa4:	9900      	ldr	r1, [sp, #0]
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	4630      	mov	r0, r6
 8015aaa:	f7ff f901 	bl	8014cb0 <_malloc_r>
 8015aae:	b948      	cbnz	r0, 8015ac4 <__smakebuf_r+0x44>
 8015ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ab4:	059a      	lsls	r2, r3, #22
 8015ab6:	d4ef      	bmi.n	8015a98 <__smakebuf_r+0x18>
 8015ab8:	f023 0303 	bic.w	r3, r3, #3
 8015abc:	f043 0302 	orr.w	r3, r3, #2
 8015ac0:	81a3      	strh	r3, [r4, #12]
 8015ac2:	e7e3      	b.n	8015a8c <__smakebuf_r+0xc>
 8015ac4:	4b0d      	ldr	r3, [pc, #52]	; (8015afc <__smakebuf_r+0x7c>)
 8015ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ac8:	89a3      	ldrh	r3, [r4, #12]
 8015aca:	6020      	str	r0, [r4, #0]
 8015acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ad0:	81a3      	strh	r3, [r4, #12]
 8015ad2:	9b00      	ldr	r3, [sp, #0]
 8015ad4:	6163      	str	r3, [r4, #20]
 8015ad6:	9b01      	ldr	r3, [sp, #4]
 8015ad8:	6120      	str	r0, [r4, #16]
 8015ada:	b15b      	cbz	r3, 8015af4 <__smakebuf_r+0x74>
 8015adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f000 fab1 	bl	8016048 <_isatty_r>
 8015ae6:	b128      	cbz	r0, 8015af4 <__smakebuf_r+0x74>
 8015ae8:	89a3      	ldrh	r3, [r4, #12]
 8015aea:	f023 0303 	bic.w	r3, r3, #3
 8015aee:	f043 0301 	orr.w	r3, r3, #1
 8015af2:	81a3      	strh	r3, [r4, #12]
 8015af4:	89a3      	ldrh	r3, [r4, #12]
 8015af6:	431d      	orrs	r5, r3
 8015af8:	81a5      	strh	r5, [r4, #12]
 8015afa:	e7cd      	b.n	8015a98 <__smakebuf_r+0x18>
 8015afc:	080158e5 	.word	0x080158e5

08015b00 <__ascii_mbtowc>:
 8015b00:	b082      	sub	sp, #8
 8015b02:	b901      	cbnz	r1, 8015b06 <__ascii_mbtowc+0x6>
 8015b04:	a901      	add	r1, sp, #4
 8015b06:	b142      	cbz	r2, 8015b1a <__ascii_mbtowc+0x1a>
 8015b08:	b14b      	cbz	r3, 8015b1e <__ascii_mbtowc+0x1e>
 8015b0a:	7813      	ldrb	r3, [r2, #0]
 8015b0c:	600b      	str	r3, [r1, #0]
 8015b0e:	7812      	ldrb	r2, [r2, #0]
 8015b10:	1c10      	adds	r0, r2, #0
 8015b12:	bf18      	it	ne
 8015b14:	2001      	movne	r0, #1
 8015b16:	b002      	add	sp, #8
 8015b18:	4770      	bx	lr
 8015b1a:	4610      	mov	r0, r2
 8015b1c:	e7fb      	b.n	8015b16 <__ascii_mbtowc+0x16>
 8015b1e:	f06f 0001 	mvn.w	r0, #1
 8015b22:	e7f8      	b.n	8015b16 <__ascii_mbtowc+0x16>

08015b24 <memmove>:
 8015b24:	4288      	cmp	r0, r1
 8015b26:	b510      	push	{r4, lr}
 8015b28:	eb01 0302 	add.w	r3, r1, r2
 8015b2c:	d807      	bhi.n	8015b3e <memmove+0x1a>
 8015b2e:	1e42      	subs	r2, r0, #1
 8015b30:	4299      	cmp	r1, r3
 8015b32:	d00a      	beq.n	8015b4a <memmove+0x26>
 8015b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015b3c:	e7f8      	b.n	8015b30 <memmove+0xc>
 8015b3e:	4283      	cmp	r3, r0
 8015b40:	d9f5      	bls.n	8015b2e <memmove+0xa>
 8015b42:	1881      	adds	r1, r0, r2
 8015b44:	1ad2      	subs	r2, r2, r3
 8015b46:	42d3      	cmn	r3, r2
 8015b48:	d100      	bne.n	8015b4c <memmove+0x28>
 8015b4a:	bd10      	pop	{r4, pc}
 8015b4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015b54:	e7f7      	b.n	8015b46 <memmove+0x22>

08015b56 <__malloc_lock>:
 8015b56:	4770      	bx	lr

08015b58 <__malloc_unlock>:
 8015b58:	4770      	bx	lr

08015b5a <_realloc_r>:
 8015b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	4614      	mov	r4, r2
 8015b60:	460e      	mov	r6, r1
 8015b62:	b921      	cbnz	r1, 8015b6e <_realloc_r+0x14>
 8015b64:	4611      	mov	r1, r2
 8015b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015b6a:	f7ff b8a1 	b.w	8014cb0 <_malloc_r>
 8015b6e:	b922      	cbnz	r2, 8015b7a <_realloc_r+0x20>
 8015b70:	f7ff f850 	bl	8014c14 <_free_r>
 8015b74:	4625      	mov	r5, r4
 8015b76:	4628      	mov	r0, r5
 8015b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b7a:	f000 fa87 	bl	801608c <_malloc_usable_size_r>
 8015b7e:	42a0      	cmp	r0, r4
 8015b80:	d20f      	bcs.n	8015ba2 <_realloc_r+0x48>
 8015b82:	4621      	mov	r1, r4
 8015b84:	4638      	mov	r0, r7
 8015b86:	f7ff f893 	bl	8014cb0 <_malloc_r>
 8015b8a:	4605      	mov	r5, r0
 8015b8c:	2800      	cmp	r0, #0
 8015b8e:	d0f2      	beq.n	8015b76 <_realloc_r+0x1c>
 8015b90:	4631      	mov	r1, r6
 8015b92:	4622      	mov	r2, r4
 8015b94:	f7ff f82a 	bl	8014bec <memcpy>
 8015b98:	4631      	mov	r1, r6
 8015b9a:	4638      	mov	r0, r7
 8015b9c:	f7ff f83a 	bl	8014c14 <_free_r>
 8015ba0:	e7e9      	b.n	8015b76 <_realloc_r+0x1c>
 8015ba2:	4635      	mov	r5, r6
 8015ba4:	e7e7      	b.n	8015b76 <_realloc_r+0x1c>

08015ba6 <__ssputs_r>:
 8015ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015baa:	688e      	ldr	r6, [r1, #8]
 8015bac:	429e      	cmp	r6, r3
 8015bae:	4682      	mov	sl, r0
 8015bb0:	460c      	mov	r4, r1
 8015bb2:	4690      	mov	r8, r2
 8015bb4:	4699      	mov	r9, r3
 8015bb6:	d837      	bhi.n	8015c28 <__ssputs_r+0x82>
 8015bb8:	898a      	ldrh	r2, [r1, #12]
 8015bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015bbe:	d031      	beq.n	8015c24 <__ssputs_r+0x7e>
 8015bc0:	6825      	ldr	r5, [r4, #0]
 8015bc2:	6909      	ldr	r1, [r1, #16]
 8015bc4:	1a6f      	subs	r7, r5, r1
 8015bc6:	6965      	ldr	r5, [r4, #20]
 8015bc8:	2302      	movs	r3, #2
 8015bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015bce:	fb95 f5f3 	sdiv	r5, r5, r3
 8015bd2:	f109 0301 	add.w	r3, r9, #1
 8015bd6:	443b      	add	r3, r7
 8015bd8:	429d      	cmp	r5, r3
 8015bda:	bf38      	it	cc
 8015bdc:	461d      	movcc	r5, r3
 8015bde:	0553      	lsls	r3, r2, #21
 8015be0:	d530      	bpl.n	8015c44 <__ssputs_r+0x9e>
 8015be2:	4629      	mov	r1, r5
 8015be4:	f7ff f864 	bl	8014cb0 <_malloc_r>
 8015be8:	4606      	mov	r6, r0
 8015bea:	b950      	cbnz	r0, 8015c02 <__ssputs_r+0x5c>
 8015bec:	230c      	movs	r3, #12
 8015bee:	f8ca 3000 	str.w	r3, [sl]
 8015bf2:	89a3      	ldrh	r3, [r4, #12]
 8015bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf8:	81a3      	strh	r3, [r4, #12]
 8015bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c02:	463a      	mov	r2, r7
 8015c04:	6921      	ldr	r1, [r4, #16]
 8015c06:	f7fe fff1 	bl	8014bec <memcpy>
 8015c0a:	89a3      	ldrh	r3, [r4, #12]
 8015c0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c14:	81a3      	strh	r3, [r4, #12]
 8015c16:	6126      	str	r6, [r4, #16]
 8015c18:	6165      	str	r5, [r4, #20]
 8015c1a:	443e      	add	r6, r7
 8015c1c:	1bed      	subs	r5, r5, r7
 8015c1e:	6026      	str	r6, [r4, #0]
 8015c20:	60a5      	str	r5, [r4, #8]
 8015c22:	464e      	mov	r6, r9
 8015c24:	454e      	cmp	r6, r9
 8015c26:	d900      	bls.n	8015c2a <__ssputs_r+0x84>
 8015c28:	464e      	mov	r6, r9
 8015c2a:	4632      	mov	r2, r6
 8015c2c:	4641      	mov	r1, r8
 8015c2e:	6820      	ldr	r0, [r4, #0]
 8015c30:	f7ff ff78 	bl	8015b24 <memmove>
 8015c34:	68a3      	ldr	r3, [r4, #8]
 8015c36:	1b9b      	subs	r3, r3, r6
 8015c38:	60a3      	str	r3, [r4, #8]
 8015c3a:	6823      	ldr	r3, [r4, #0]
 8015c3c:	441e      	add	r6, r3
 8015c3e:	6026      	str	r6, [r4, #0]
 8015c40:	2000      	movs	r0, #0
 8015c42:	e7dc      	b.n	8015bfe <__ssputs_r+0x58>
 8015c44:	462a      	mov	r2, r5
 8015c46:	f7ff ff88 	bl	8015b5a <_realloc_r>
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	2800      	cmp	r0, #0
 8015c4e:	d1e2      	bne.n	8015c16 <__ssputs_r+0x70>
 8015c50:	6921      	ldr	r1, [r4, #16]
 8015c52:	4650      	mov	r0, sl
 8015c54:	f7fe ffde 	bl	8014c14 <_free_r>
 8015c58:	e7c8      	b.n	8015bec <__ssputs_r+0x46>
	...

08015c5c <_svfiprintf_r>:
 8015c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c60:	461d      	mov	r5, r3
 8015c62:	898b      	ldrh	r3, [r1, #12]
 8015c64:	061f      	lsls	r7, r3, #24
 8015c66:	b09d      	sub	sp, #116	; 0x74
 8015c68:	4680      	mov	r8, r0
 8015c6a:	460c      	mov	r4, r1
 8015c6c:	4616      	mov	r6, r2
 8015c6e:	d50f      	bpl.n	8015c90 <_svfiprintf_r+0x34>
 8015c70:	690b      	ldr	r3, [r1, #16]
 8015c72:	b96b      	cbnz	r3, 8015c90 <_svfiprintf_r+0x34>
 8015c74:	2140      	movs	r1, #64	; 0x40
 8015c76:	f7ff f81b 	bl	8014cb0 <_malloc_r>
 8015c7a:	6020      	str	r0, [r4, #0]
 8015c7c:	6120      	str	r0, [r4, #16]
 8015c7e:	b928      	cbnz	r0, 8015c8c <_svfiprintf_r+0x30>
 8015c80:	230c      	movs	r3, #12
 8015c82:	f8c8 3000 	str.w	r3, [r8]
 8015c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c8a:	e0c8      	b.n	8015e1e <_svfiprintf_r+0x1c2>
 8015c8c:	2340      	movs	r3, #64	; 0x40
 8015c8e:	6163      	str	r3, [r4, #20]
 8015c90:	2300      	movs	r3, #0
 8015c92:	9309      	str	r3, [sp, #36]	; 0x24
 8015c94:	2320      	movs	r3, #32
 8015c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c9a:	2330      	movs	r3, #48	; 0x30
 8015c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ca0:	9503      	str	r5, [sp, #12]
 8015ca2:	f04f 0b01 	mov.w	fp, #1
 8015ca6:	4637      	mov	r7, r6
 8015ca8:	463d      	mov	r5, r7
 8015caa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015cae:	b10b      	cbz	r3, 8015cb4 <_svfiprintf_r+0x58>
 8015cb0:	2b25      	cmp	r3, #37	; 0x25
 8015cb2:	d13e      	bne.n	8015d32 <_svfiprintf_r+0xd6>
 8015cb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8015cb8:	d00b      	beq.n	8015cd2 <_svfiprintf_r+0x76>
 8015cba:	4653      	mov	r3, sl
 8015cbc:	4632      	mov	r2, r6
 8015cbe:	4621      	mov	r1, r4
 8015cc0:	4640      	mov	r0, r8
 8015cc2:	f7ff ff70 	bl	8015ba6 <__ssputs_r>
 8015cc6:	3001      	adds	r0, #1
 8015cc8:	f000 80a4 	beq.w	8015e14 <_svfiprintf_r+0x1b8>
 8015ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cce:	4453      	add	r3, sl
 8015cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cd2:	783b      	ldrb	r3, [r7, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f000 809d 	beq.w	8015e14 <_svfiprintf_r+0x1b8>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ce4:	9304      	str	r3, [sp, #16]
 8015ce6:	9307      	str	r3, [sp, #28]
 8015ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cec:	931a      	str	r3, [sp, #104]	; 0x68
 8015cee:	462f      	mov	r7, r5
 8015cf0:	2205      	movs	r2, #5
 8015cf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015cf6:	4850      	ldr	r0, [pc, #320]	; (8015e38 <_svfiprintf_r+0x1dc>)
 8015cf8:	f7ea fa82 	bl	8000200 <memchr>
 8015cfc:	9b04      	ldr	r3, [sp, #16]
 8015cfe:	b9d0      	cbnz	r0, 8015d36 <_svfiprintf_r+0xda>
 8015d00:	06d9      	lsls	r1, r3, #27
 8015d02:	bf44      	itt	mi
 8015d04:	2220      	movmi	r2, #32
 8015d06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015d0a:	071a      	lsls	r2, r3, #28
 8015d0c:	bf44      	itt	mi
 8015d0e:	222b      	movmi	r2, #43	; 0x2b
 8015d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015d14:	782a      	ldrb	r2, [r5, #0]
 8015d16:	2a2a      	cmp	r2, #42	; 0x2a
 8015d18:	d015      	beq.n	8015d46 <_svfiprintf_r+0xea>
 8015d1a:	9a07      	ldr	r2, [sp, #28]
 8015d1c:	462f      	mov	r7, r5
 8015d1e:	2000      	movs	r0, #0
 8015d20:	250a      	movs	r5, #10
 8015d22:	4639      	mov	r1, r7
 8015d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d28:	3b30      	subs	r3, #48	; 0x30
 8015d2a:	2b09      	cmp	r3, #9
 8015d2c:	d94d      	bls.n	8015dca <_svfiprintf_r+0x16e>
 8015d2e:	b1b8      	cbz	r0, 8015d60 <_svfiprintf_r+0x104>
 8015d30:	e00f      	b.n	8015d52 <_svfiprintf_r+0xf6>
 8015d32:	462f      	mov	r7, r5
 8015d34:	e7b8      	b.n	8015ca8 <_svfiprintf_r+0x4c>
 8015d36:	4a40      	ldr	r2, [pc, #256]	; (8015e38 <_svfiprintf_r+0x1dc>)
 8015d38:	1a80      	subs	r0, r0, r2
 8015d3a:	fa0b f000 	lsl.w	r0, fp, r0
 8015d3e:	4318      	orrs	r0, r3
 8015d40:	9004      	str	r0, [sp, #16]
 8015d42:	463d      	mov	r5, r7
 8015d44:	e7d3      	b.n	8015cee <_svfiprintf_r+0x92>
 8015d46:	9a03      	ldr	r2, [sp, #12]
 8015d48:	1d11      	adds	r1, r2, #4
 8015d4a:	6812      	ldr	r2, [r2, #0]
 8015d4c:	9103      	str	r1, [sp, #12]
 8015d4e:	2a00      	cmp	r2, #0
 8015d50:	db01      	blt.n	8015d56 <_svfiprintf_r+0xfa>
 8015d52:	9207      	str	r2, [sp, #28]
 8015d54:	e004      	b.n	8015d60 <_svfiprintf_r+0x104>
 8015d56:	4252      	negs	r2, r2
 8015d58:	f043 0302 	orr.w	r3, r3, #2
 8015d5c:	9207      	str	r2, [sp, #28]
 8015d5e:	9304      	str	r3, [sp, #16]
 8015d60:	783b      	ldrb	r3, [r7, #0]
 8015d62:	2b2e      	cmp	r3, #46	; 0x2e
 8015d64:	d10c      	bne.n	8015d80 <_svfiprintf_r+0x124>
 8015d66:	787b      	ldrb	r3, [r7, #1]
 8015d68:	2b2a      	cmp	r3, #42	; 0x2a
 8015d6a:	d133      	bne.n	8015dd4 <_svfiprintf_r+0x178>
 8015d6c:	9b03      	ldr	r3, [sp, #12]
 8015d6e:	1d1a      	adds	r2, r3, #4
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	9203      	str	r2, [sp, #12]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	bfb8      	it	lt
 8015d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015d7c:	3702      	adds	r7, #2
 8015d7e:	9305      	str	r3, [sp, #20]
 8015d80:	4d2e      	ldr	r5, [pc, #184]	; (8015e3c <_svfiprintf_r+0x1e0>)
 8015d82:	7839      	ldrb	r1, [r7, #0]
 8015d84:	2203      	movs	r2, #3
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7ea fa3a 	bl	8000200 <memchr>
 8015d8c:	b138      	cbz	r0, 8015d9e <_svfiprintf_r+0x142>
 8015d8e:	2340      	movs	r3, #64	; 0x40
 8015d90:	1b40      	subs	r0, r0, r5
 8015d92:	fa03 f000 	lsl.w	r0, r3, r0
 8015d96:	9b04      	ldr	r3, [sp, #16]
 8015d98:	4303      	orrs	r3, r0
 8015d9a:	3701      	adds	r7, #1
 8015d9c:	9304      	str	r3, [sp, #16]
 8015d9e:	7839      	ldrb	r1, [r7, #0]
 8015da0:	4827      	ldr	r0, [pc, #156]	; (8015e40 <_svfiprintf_r+0x1e4>)
 8015da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015da6:	2206      	movs	r2, #6
 8015da8:	1c7e      	adds	r6, r7, #1
 8015daa:	f7ea fa29 	bl	8000200 <memchr>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	d038      	beq.n	8015e24 <_svfiprintf_r+0x1c8>
 8015db2:	4b24      	ldr	r3, [pc, #144]	; (8015e44 <_svfiprintf_r+0x1e8>)
 8015db4:	bb13      	cbnz	r3, 8015dfc <_svfiprintf_r+0x1a0>
 8015db6:	9b03      	ldr	r3, [sp, #12]
 8015db8:	3307      	adds	r3, #7
 8015dba:	f023 0307 	bic.w	r3, r3, #7
 8015dbe:	3308      	adds	r3, #8
 8015dc0:	9303      	str	r3, [sp, #12]
 8015dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc4:	444b      	add	r3, r9
 8015dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8015dc8:	e76d      	b.n	8015ca6 <_svfiprintf_r+0x4a>
 8015dca:	fb05 3202 	mla	r2, r5, r2, r3
 8015dce:	2001      	movs	r0, #1
 8015dd0:	460f      	mov	r7, r1
 8015dd2:	e7a6      	b.n	8015d22 <_svfiprintf_r+0xc6>
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	3701      	adds	r7, #1
 8015dd8:	9305      	str	r3, [sp, #20]
 8015dda:	4619      	mov	r1, r3
 8015ddc:	250a      	movs	r5, #10
 8015dde:	4638      	mov	r0, r7
 8015de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015de4:	3a30      	subs	r2, #48	; 0x30
 8015de6:	2a09      	cmp	r2, #9
 8015de8:	d903      	bls.n	8015df2 <_svfiprintf_r+0x196>
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d0c8      	beq.n	8015d80 <_svfiprintf_r+0x124>
 8015dee:	9105      	str	r1, [sp, #20]
 8015df0:	e7c6      	b.n	8015d80 <_svfiprintf_r+0x124>
 8015df2:	fb05 2101 	mla	r1, r5, r1, r2
 8015df6:	2301      	movs	r3, #1
 8015df8:	4607      	mov	r7, r0
 8015dfa:	e7f0      	b.n	8015dde <_svfiprintf_r+0x182>
 8015dfc:	ab03      	add	r3, sp, #12
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	4622      	mov	r2, r4
 8015e02:	4b11      	ldr	r3, [pc, #68]	; (8015e48 <_svfiprintf_r+0x1ec>)
 8015e04:	a904      	add	r1, sp, #16
 8015e06:	4640      	mov	r0, r8
 8015e08:	f3af 8000 	nop.w
 8015e0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015e10:	4681      	mov	r9, r0
 8015e12:	d1d6      	bne.n	8015dc2 <_svfiprintf_r+0x166>
 8015e14:	89a3      	ldrh	r3, [r4, #12]
 8015e16:	065b      	lsls	r3, r3, #25
 8015e18:	f53f af35 	bmi.w	8015c86 <_svfiprintf_r+0x2a>
 8015e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e1e:	b01d      	add	sp, #116	; 0x74
 8015e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e24:	ab03      	add	r3, sp, #12
 8015e26:	9300      	str	r3, [sp, #0]
 8015e28:	4622      	mov	r2, r4
 8015e2a:	4b07      	ldr	r3, [pc, #28]	; (8015e48 <_svfiprintf_r+0x1ec>)
 8015e2c:	a904      	add	r1, sp, #16
 8015e2e:	4640      	mov	r0, r8
 8015e30:	f7ff f94e 	bl	80150d0 <_printf_i>
 8015e34:	e7ea      	b.n	8015e0c <_svfiprintf_r+0x1b0>
 8015e36:	bf00      	nop
 8015e38:	08017fbc 	.word	0x08017fbc
 8015e3c:	08017fc2 	.word	0x08017fc2
 8015e40:	08017fc6 	.word	0x08017fc6
 8015e44:	00000000 	.word	0x00000000
 8015e48:	08015ba7 	.word	0x08015ba7

08015e4c <_putc_r>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	460d      	mov	r5, r1
 8015e50:	4614      	mov	r4, r2
 8015e52:	4606      	mov	r6, r0
 8015e54:	b118      	cbz	r0, 8015e5e <_putc_r+0x12>
 8015e56:	6983      	ldr	r3, [r0, #24]
 8015e58:	b90b      	cbnz	r3, 8015e5e <_putc_r+0x12>
 8015e5a:	f7ff fd5f 	bl	801591c <__sinit>
 8015e5e:	4b13      	ldr	r3, [pc, #76]	; (8015eac <_putc_r+0x60>)
 8015e60:	429c      	cmp	r4, r3
 8015e62:	d112      	bne.n	8015e8a <_putc_r+0x3e>
 8015e64:	6874      	ldr	r4, [r6, #4]
 8015e66:	68a3      	ldr	r3, [r4, #8]
 8015e68:	3b01      	subs	r3, #1
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	60a3      	str	r3, [r4, #8]
 8015e6e:	da16      	bge.n	8015e9e <_putc_r+0x52>
 8015e70:	69a2      	ldr	r2, [r4, #24]
 8015e72:	4293      	cmp	r3, r2
 8015e74:	db02      	blt.n	8015e7c <_putc_r+0x30>
 8015e76:	b2eb      	uxtb	r3, r5
 8015e78:	2b0a      	cmp	r3, #10
 8015e7a:	d110      	bne.n	8015e9e <_putc_r+0x52>
 8015e7c:	4622      	mov	r2, r4
 8015e7e:	4629      	mov	r1, r5
 8015e80:	4630      	mov	r0, r6
 8015e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e86:	f7ff bb91 	b.w	80155ac <__swbuf_r>
 8015e8a:	4b09      	ldr	r3, [pc, #36]	; (8015eb0 <_putc_r+0x64>)
 8015e8c:	429c      	cmp	r4, r3
 8015e8e:	d101      	bne.n	8015e94 <_putc_r+0x48>
 8015e90:	68b4      	ldr	r4, [r6, #8]
 8015e92:	e7e8      	b.n	8015e66 <_putc_r+0x1a>
 8015e94:	4b07      	ldr	r3, [pc, #28]	; (8015eb4 <_putc_r+0x68>)
 8015e96:	429c      	cmp	r4, r3
 8015e98:	bf08      	it	eq
 8015e9a:	68f4      	ldreq	r4, [r6, #12]
 8015e9c:	e7e3      	b.n	8015e66 <_putc_r+0x1a>
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	1c5a      	adds	r2, r3, #1
 8015ea2:	6022      	str	r2, [r4, #0]
 8015ea4:	701d      	strb	r5, [r3, #0]
 8015ea6:	b2e8      	uxtb	r0, r5
 8015ea8:	bd70      	pop	{r4, r5, r6, pc}
 8015eaa:	bf00      	nop
 8015eac:	08018010 	.word	0x08018010
 8015eb0:	08018030 	.word	0x08018030
 8015eb4:	08017ff0 	.word	0x08017ff0

08015eb8 <_raise_r>:
 8015eb8:	291f      	cmp	r1, #31
 8015eba:	b538      	push	{r3, r4, r5, lr}
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	460d      	mov	r5, r1
 8015ec0:	d904      	bls.n	8015ecc <_raise_r+0x14>
 8015ec2:	2316      	movs	r3, #22
 8015ec4:	6003      	str	r3, [r0, #0]
 8015ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eca:	bd38      	pop	{r3, r4, r5, pc}
 8015ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ece:	b112      	cbz	r2, 8015ed6 <_raise_r+0x1e>
 8015ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015ed4:	b94b      	cbnz	r3, 8015eea <_raise_r+0x32>
 8015ed6:	4620      	mov	r0, r4
 8015ed8:	f000 f830 	bl	8015f3c <_getpid_r>
 8015edc:	462a      	mov	r2, r5
 8015ede:	4601      	mov	r1, r0
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ee6:	f000 b817 	b.w	8015f18 <_kill_r>
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d00a      	beq.n	8015f04 <_raise_r+0x4c>
 8015eee:	1c59      	adds	r1, r3, #1
 8015ef0:	d103      	bne.n	8015efa <_raise_r+0x42>
 8015ef2:	2316      	movs	r3, #22
 8015ef4:	6003      	str	r3, [r0, #0]
 8015ef6:	2001      	movs	r0, #1
 8015ef8:	e7e7      	b.n	8015eca <_raise_r+0x12>
 8015efa:	2400      	movs	r4, #0
 8015efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015f00:	4628      	mov	r0, r5
 8015f02:	4798      	blx	r3
 8015f04:	2000      	movs	r0, #0
 8015f06:	e7e0      	b.n	8015eca <_raise_r+0x12>

08015f08 <raise>:
 8015f08:	4b02      	ldr	r3, [pc, #8]	; (8015f14 <raise+0xc>)
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	6818      	ldr	r0, [r3, #0]
 8015f0e:	f7ff bfd3 	b.w	8015eb8 <_raise_r>
 8015f12:	bf00      	nop
 8015f14:	200001e8 	.word	0x200001e8

08015f18 <_kill_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	4c07      	ldr	r4, [pc, #28]	; (8015f38 <_kill_r+0x20>)
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4605      	mov	r5, r0
 8015f20:	4608      	mov	r0, r1
 8015f22:	4611      	mov	r1, r2
 8015f24:	6023      	str	r3, [r4, #0]
 8015f26:	f7ef f8d9 	bl	80050dc <_kill>
 8015f2a:	1c43      	adds	r3, r0, #1
 8015f2c:	d102      	bne.n	8015f34 <_kill_r+0x1c>
 8015f2e:	6823      	ldr	r3, [r4, #0]
 8015f30:	b103      	cbz	r3, 8015f34 <_kill_r+0x1c>
 8015f32:	602b      	str	r3, [r5, #0]
 8015f34:	bd38      	pop	{r3, r4, r5, pc}
 8015f36:	bf00      	nop
 8015f38:	2001054c 	.word	0x2001054c

08015f3c <_getpid_r>:
 8015f3c:	f7ef b8c6 	b.w	80050cc <_getpid>

08015f40 <__sread>:
 8015f40:	b510      	push	{r4, lr}
 8015f42:	460c      	mov	r4, r1
 8015f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f48:	f000 f8a8 	bl	801609c <_read_r>
 8015f4c:	2800      	cmp	r0, #0
 8015f4e:	bfab      	itete	ge
 8015f50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015f52:	89a3      	ldrhlt	r3, [r4, #12]
 8015f54:	181b      	addge	r3, r3, r0
 8015f56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015f5a:	bfac      	ite	ge
 8015f5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015f5e:	81a3      	strhlt	r3, [r4, #12]
 8015f60:	bd10      	pop	{r4, pc}

08015f62 <__swrite>:
 8015f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f66:	461f      	mov	r7, r3
 8015f68:	898b      	ldrh	r3, [r1, #12]
 8015f6a:	05db      	lsls	r3, r3, #23
 8015f6c:	4605      	mov	r5, r0
 8015f6e:	460c      	mov	r4, r1
 8015f70:	4616      	mov	r6, r2
 8015f72:	d505      	bpl.n	8015f80 <__swrite+0x1e>
 8015f74:	2302      	movs	r3, #2
 8015f76:	2200      	movs	r2, #0
 8015f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f7c:	f000 f874 	bl	8016068 <_lseek_r>
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f8a:	81a3      	strh	r3, [r4, #12]
 8015f8c:	4632      	mov	r2, r6
 8015f8e:	463b      	mov	r3, r7
 8015f90:	4628      	mov	r0, r5
 8015f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f96:	f000 b823 	b.w	8015fe0 <_write_r>

08015f9a <__sseek>:
 8015f9a:	b510      	push	{r4, lr}
 8015f9c:	460c      	mov	r4, r1
 8015f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fa2:	f000 f861 	bl	8016068 <_lseek_r>
 8015fa6:	1c43      	adds	r3, r0, #1
 8015fa8:	89a3      	ldrh	r3, [r4, #12]
 8015faa:	bf15      	itete	ne
 8015fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8015fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015fb6:	81a3      	strheq	r3, [r4, #12]
 8015fb8:	bf18      	it	ne
 8015fba:	81a3      	strhne	r3, [r4, #12]
 8015fbc:	bd10      	pop	{r4, pc}

08015fbe <__sclose>:
 8015fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fc2:	f000 b81f 	b.w	8016004 <_close_r>

08015fc6 <__ascii_wctomb>:
 8015fc6:	b149      	cbz	r1, 8015fdc <__ascii_wctomb+0x16>
 8015fc8:	2aff      	cmp	r2, #255	; 0xff
 8015fca:	bf85      	ittet	hi
 8015fcc:	238a      	movhi	r3, #138	; 0x8a
 8015fce:	6003      	strhi	r3, [r0, #0]
 8015fd0:	700a      	strbls	r2, [r1, #0]
 8015fd2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015fd6:	bf98      	it	ls
 8015fd8:	2001      	movls	r0, #1
 8015fda:	4770      	bx	lr
 8015fdc:	4608      	mov	r0, r1
 8015fde:	4770      	bx	lr

08015fe0 <_write_r>:
 8015fe0:	b538      	push	{r3, r4, r5, lr}
 8015fe2:	4c07      	ldr	r4, [pc, #28]	; (8016000 <_write_r+0x20>)
 8015fe4:	4605      	mov	r5, r0
 8015fe6:	4608      	mov	r0, r1
 8015fe8:	4611      	mov	r1, r2
 8015fea:	2200      	movs	r2, #0
 8015fec:	6022      	str	r2, [r4, #0]
 8015fee:	461a      	mov	r2, r3
 8015ff0:	f7ec fde1 	bl	8002bb6 <_write>
 8015ff4:	1c43      	adds	r3, r0, #1
 8015ff6:	d102      	bne.n	8015ffe <_write_r+0x1e>
 8015ff8:	6823      	ldr	r3, [r4, #0]
 8015ffa:	b103      	cbz	r3, 8015ffe <_write_r+0x1e>
 8015ffc:	602b      	str	r3, [r5, #0]
 8015ffe:	bd38      	pop	{r3, r4, r5, pc}
 8016000:	2001054c 	.word	0x2001054c

08016004 <_close_r>:
 8016004:	b538      	push	{r3, r4, r5, lr}
 8016006:	4c06      	ldr	r4, [pc, #24]	; (8016020 <_close_r+0x1c>)
 8016008:	2300      	movs	r3, #0
 801600a:	4605      	mov	r5, r0
 801600c:	4608      	mov	r0, r1
 801600e:	6023      	str	r3, [r4, #0]
 8016010:	f7ef f89b 	bl	800514a <_close>
 8016014:	1c43      	adds	r3, r0, #1
 8016016:	d102      	bne.n	801601e <_close_r+0x1a>
 8016018:	6823      	ldr	r3, [r4, #0]
 801601a:	b103      	cbz	r3, 801601e <_close_r+0x1a>
 801601c:	602b      	str	r3, [r5, #0]
 801601e:	bd38      	pop	{r3, r4, r5, pc}
 8016020:	2001054c 	.word	0x2001054c

08016024 <_fstat_r>:
 8016024:	b538      	push	{r3, r4, r5, lr}
 8016026:	4c07      	ldr	r4, [pc, #28]	; (8016044 <_fstat_r+0x20>)
 8016028:	2300      	movs	r3, #0
 801602a:	4605      	mov	r5, r0
 801602c:	4608      	mov	r0, r1
 801602e:	4611      	mov	r1, r2
 8016030:	6023      	str	r3, [r4, #0]
 8016032:	f7ef f896 	bl	8005162 <_fstat>
 8016036:	1c43      	adds	r3, r0, #1
 8016038:	d102      	bne.n	8016040 <_fstat_r+0x1c>
 801603a:	6823      	ldr	r3, [r4, #0]
 801603c:	b103      	cbz	r3, 8016040 <_fstat_r+0x1c>
 801603e:	602b      	str	r3, [r5, #0]
 8016040:	bd38      	pop	{r3, r4, r5, pc}
 8016042:	bf00      	nop
 8016044:	2001054c 	.word	0x2001054c

08016048 <_isatty_r>:
 8016048:	b538      	push	{r3, r4, r5, lr}
 801604a:	4c06      	ldr	r4, [pc, #24]	; (8016064 <_isatty_r+0x1c>)
 801604c:	2300      	movs	r3, #0
 801604e:	4605      	mov	r5, r0
 8016050:	4608      	mov	r0, r1
 8016052:	6023      	str	r3, [r4, #0]
 8016054:	f7ef f895 	bl	8005182 <_isatty>
 8016058:	1c43      	adds	r3, r0, #1
 801605a:	d102      	bne.n	8016062 <_isatty_r+0x1a>
 801605c:	6823      	ldr	r3, [r4, #0]
 801605e:	b103      	cbz	r3, 8016062 <_isatty_r+0x1a>
 8016060:	602b      	str	r3, [r5, #0]
 8016062:	bd38      	pop	{r3, r4, r5, pc}
 8016064:	2001054c 	.word	0x2001054c

08016068 <_lseek_r>:
 8016068:	b538      	push	{r3, r4, r5, lr}
 801606a:	4c07      	ldr	r4, [pc, #28]	; (8016088 <_lseek_r+0x20>)
 801606c:	4605      	mov	r5, r0
 801606e:	4608      	mov	r0, r1
 8016070:	4611      	mov	r1, r2
 8016072:	2200      	movs	r2, #0
 8016074:	6022      	str	r2, [r4, #0]
 8016076:	461a      	mov	r2, r3
 8016078:	f7ef f88e 	bl	8005198 <_lseek>
 801607c:	1c43      	adds	r3, r0, #1
 801607e:	d102      	bne.n	8016086 <_lseek_r+0x1e>
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	b103      	cbz	r3, 8016086 <_lseek_r+0x1e>
 8016084:	602b      	str	r3, [r5, #0]
 8016086:	bd38      	pop	{r3, r4, r5, pc}
 8016088:	2001054c 	.word	0x2001054c

0801608c <_malloc_usable_size_r>:
 801608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016090:	1f18      	subs	r0, r3, #4
 8016092:	2b00      	cmp	r3, #0
 8016094:	bfbc      	itt	lt
 8016096:	580b      	ldrlt	r3, [r1, r0]
 8016098:	18c0      	addlt	r0, r0, r3
 801609a:	4770      	bx	lr

0801609c <_read_r>:
 801609c:	b538      	push	{r3, r4, r5, lr}
 801609e:	4c07      	ldr	r4, [pc, #28]	; (80160bc <_read_r+0x20>)
 80160a0:	4605      	mov	r5, r0
 80160a2:	4608      	mov	r0, r1
 80160a4:	4611      	mov	r1, r2
 80160a6:	2200      	movs	r2, #0
 80160a8:	6022      	str	r2, [r4, #0]
 80160aa:	461a      	mov	r2, r3
 80160ac:	f7ef f830 	bl	8005110 <_read>
 80160b0:	1c43      	adds	r3, r0, #1
 80160b2:	d102      	bne.n	80160ba <_read_r+0x1e>
 80160b4:	6823      	ldr	r3, [r4, #0]
 80160b6:	b103      	cbz	r3, 80160ba <_read_r+0x1e>
 80160b8:	602b      	str	r3, [r5, #0]
 80160ba:	bd38      	pop	{r3, r4, r5, pc}
 80160bc:	2001054c 	.word	0x2001054c

080160c0 <pow>:
 80160c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c4:	ed2d 8b04 	vpush	{d8-d9}
 80160c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801639c <pow+0x2dc>
 80160cc:	b08d      	sub	sp, #52	; 0x34
 80160ce:	ec57 6b10 	vmov	r6, r7, d0
 80160d2:	ec55 4b11 	vmov	r4, r5, d1
 80160d6:	f000 fac7 	bl	8016668 <__ieee754_pow>
 80160da:	f999 3000 	ldrsb.w	r3, [r9]
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	3301      	adds	r3, #1
 80160e2:	eeb0 8a40 	vmov.f32	s16, s0
 80160e6:	eef0 8a60 	vmov.f32	s17, s1
 80160ea:	46c8      	mov	r8, r9
 80160ec:	d05f      	beq.n	80161ae <pow+0xee>
 80160ee:	4622      	mov	r2, r4
 80160f0:	462b      	mov	r3, r5
 80160f2:	4620      	mov	r0, r4
 80160f4:	4629      	mov	r1, r5
 80160f6:	f7ea fd29 	bl	8000b4c <__aeabi_dcmpun>
 80160fa:	4683      	mov	fp, r0
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d156      	bne.n	80161ae <pow+0xee>
 8016100:	4632      	mov	r2, r6
 8016102:	463b      	mov	r3, r7
 8016104:	4630      	mov	r0, r6
 8016106:	4639      	mov	r1, r7
 8016108:	f7ea fd20 	bl	8000b4c <__aeabi_dcmpun>
 801610c:	9001      	str	r0, [sp, #4]
 801610e:	b1e8      	cbz	r0, 801614c <pow+0x8c>
 8016110:	2200      	movs	r2, #0
 8016112:	2300      	movs	r3, #0
 8016114:	4620      	mov	r0, r4
 8016116:	4629      	mov	r1, r5
 8016118:	f7ea fce6 	bl	8000ae8 <__aeabi_dcmpeq>
 801611c:	2800      	cmp	r0, #0
 801611e:	d046      	beq.n	80161ae <pow+0xee>
 8016120:	2301      	movs	r3, #1
 8016122:	9302      	str	r3, [sp, #8]
 8016124:	4b96      	ldr	r3, [pc, #600]	; (8016380 <pow+0x2c0>)
 8016126:	9303      	str	r3, [sp, #12]
 8016128:	4b96      	ldr	r3, [pc, #600]	; (8016384 <pow+0x2c4>)
 801612a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801612e:	2200      	movs	r2, #0
 8016130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016134:	9b00      	ldr	r3, [sp, #0]
 8016136:	2b02      	cmp	r3, #2
 8016138:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801613c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016140:	d033      	beq.n	80161aa <pow+0xea>
 8016142:	a802      	add	r0, sp, #8
 8016144:	f001 fb22 	bl	801778c <matherr>
 8016148:	bb48      	cbnz	r0, 801619e <pow+0xde>
 801614a:	e05d      	b.n	8016208 <pow+0x148>
 801614c:	f04f 0a00 	mov.w	sl, #0
 8016150:	f04f 0b00 	mov.w	fp, #0
 8016154:	4652      	mov	r2, sl
 8016156:	465b      	mov	r3, fp
 8016158:	4630      	mov	r0, r6
 801615a:	4639      	mov	r1, r7
 801615c:	f7ea fcc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8016160:	ec4b ab19 	vmov	d9, sl, fp
 8016164:	2800      	cmp	r0, #0
 8016166:	d054      	beq.n	8016212 <pow+0x152>
 8016168:	4652      	mov	r2, sl
 801616a:	465b      	mov	r3, fp
 801616c:	4620      	mov	r0, r4
 801616e:	4629      	mov	r1, r5
 8016170:	f7ea fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 8016174:	4680      	mov	r8, r0
 8016176:	b318      	cbz	r0, 80161c0 <pow+0x100>
 8016178:	2301      	movs	r3, #1
 801617a:	9302      	str	r3, [sp, #8]
 801617c:	4b80      	ldr	r3, [pc, #512]	; (8016380 <pow+0x2c0>)
 801617e:	9303      	str	r3, [sp, #12]
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	930a      	str	r3, [sp, #40]	; 0x28
 8016184:	9b00      	ldr	r3, [sp, #0]
 8016186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801618a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801618e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d0d5      	beq.n	8016142 <pow+0x82>
 8016196:	4b7b      	ldr	r3, [pc, #492]	; (8016384 <pow+0x2c4>)
 8016198:	2200      	movs	r2, #0
 801619a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161a0:	b11b      	cbz	r3, 80161aa <pow+0xea>
 80161a2:	f7fe fce7 	bl	8014b74 <__errno>
 80161a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161a8:	6003      	str	r3, [r0, #0]
 80161aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80161ae:	eeb0 0a48 	vmov.f32	s0, s16
 80161b2:	eef0 0a68 	vmov.f32	s1, s17
 80161b6:	b00d      	add	sp, #52	; 0x34
 80161b8:	ecbd 8b04 	vpop	{d8-d9}
 80161bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c0:	ec45 4b10 	vmov	d0, r4, r5
 80161c4:	f001 fada 	bl	801777c <finite>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d0f0      	beq.n	80161ae <pow+0xee>
 80161cc:	4652      	mov	r2, sl
 80161ce:	465b      	mov	r3, fp
 80161d0:	4620      	mov	r0, r4
 80161d2:	4629      	mov	r1, r5
 80161d4:	f7ea fc92 	bl	8000afc <__aeabi_dcmplt>
 80161d8:	2800      	cmp	r0, #0
 80161da:	d0e8      	beq.n	80161ae <pow+0xee>
 80161dc:	2301      	movs	r3, #1
 80161de:	9302      	str	r3, [sp, #8]
 80161e0:	4b67      	ldr	r3, [pc, #412]	; (8016380 <pow+0x2c0>)
 80161e2:	9303      	str	r3, [sp, #12]
 80161e4:	f999 3000 	ldrsb.w	r3, [r9]
 80161e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80161ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80161f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80161f4:	b913      	cbnz	r3, 80161fc <pow+0x13c>
 80161f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80161fa:	e7a2      	b.n	8016142 <pow+0x82>
 80161fc:	4962      	ldr	r1, [pc, #392]	; (8016388 <pow+0x2c8>)
 80161fe:	2000      	movs	r0, #0
 8016200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016204:	2b02      	cmp	r3, #2
 8016206:	d19c      	bne.n	8016142 <pow+0x82>
 8016208:	f7fe fcb4 	bl	8014b74 <__errno>
 801620c:	2321      	movs	r3, #33	; 0x21
 801620e:	6003      	str	r3, [r0, #0]
 8016210:	e7c5      	b.n	801619e <pow+0xde>
 8016212:	eeb0 0a48 	vmov.f32	s0, s16
 8016216:	eef0 0a68 	vmov.f32	s1, s17
 801621a:	f001 faaf 	bl	801777c <finite>
 801621e:	9000      	str	r0, [sp, #0]
 8016220:	2800      	cmp	r0, #0
 8016222:	f040 8081 	bne.w	8016328 <pow+0x268>
 8016226:	ec47 6b10 	vmov	d0, r6, r7
 801622a:	f001 faa7 	bl	801777c <finite>
 801622e:	2800      	cmp	r0, #0
 8016230:	d07a      	beq.n	8016328 <pow+0x268>
 8016232:	ec45 4b10 	vmov	d0, r4, r5
 8016236:	f001 faa1 	bl	801777c <finite>
 801623a:	2800      	cmp	r0, #0
 801623c:	d074      	beq.n	8016328 <pow+0x268>
 801623e:	ec53 2b18 	vmov	r2, r3, d8
 8016242:	ee18 0a10 	vmov	r0, s16
 8016246:	4619      	mov	r1, r3
 8016248:	f7ea fc80 	bl	8000b4c <__aeabi_dcmpun>
 801624c:	f999 9000 	ldrsb.w	r9, [r9]
 8016250:	4b4b      	ldr	r3, [pc, #300]	; (8016380 <pow+0x2c0>)
 8016252:	b1b0      	cbz	r0, 8016282 <pow+0x1c2>
 8016254:	2201      	movs	r2, #1
 8016256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801625a:	9b00      	ldr	r3, [sp, #0]
 801625c:	930a      	str	r3, [sp, #40]	; 0x28
 801625e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016262:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016266:	f1b9 0f00 	cmp.w	r9, #0
 801626a:	d0c4      	beq.n	80161f6 <pow+0x136>
 801626c:	4652      	mov	r2, sl
 801626e:	465b      	mov	r3, fp
 8016270:	4650      	mov	r0, sl
 8016272:	4659      	mov	r1, fp
 8016274:	f7ea fafa 	bl	800086c <__aeabi_ddiv>
 8016278:	f1b9 0f02 	cmp.w	r9, #2
 801627c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016280:	e7c1      	b.n	8016206 <pow+0x146>
 8016282:	2203      	movs	r2, #3
 8016284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016288:	900a      	str	r0, [sp, #40]	; 0x28
 801628a:	4629      	mov	r1, r5
 801628c:	4620      	mov	r0, r4
 801628e:	2200      	movs	r2, #0
 8016290:	4b3e      	ldr	r3, [pc, #248]	; (801638c <pow+0x2cc>)
 8016292:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801629a:	f7ea f9bd 	bl	8000618 <__aeabi_dmul>
 801629e:	4604      	mov	r4, r0
 80162a0:	460d      	mov	r5, r1
 80162a2:	f1b9 0f00 	cmp.w	r9, #0
 80162a6:	d124      	bne.n	80162f2 <pow+0x232>
 80162a8:	4b39      	ldr	r3, [pc, #228]	; (8016390 <pow+0x2d0>)
 80162aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80162ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162b2:	4630      	mov	r0, r6
 80162b4:	4652      	mov	r2, sl
 80162b6:	465b      	mov	r3, fp
 80162b8:	4639      	mov	r1, r7
 80162ba:	f7ea fc1f 	bl	8000afc <__aeabi_dcmplt>
 80162be:	2800      	cmp	r0, #0
 80162c0:	d056      	beq.n	8016370 <pow+0x2b0>
 80162c2:	ec45 4b10 	vmov	d0, r4, r5
 80162c6:	f001 fa6b 	bl	80177a0 <rint>
 80162ca:	4622      	mov	r2, r4
 80162cc:	462b      	mov	r3, r5
 80162ce:	ec51 0b10 	vmov	r0, r1, d0
 80162d2:	f7ea fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 80162d6:	b920      	cbnz	r0, 80162e2 <pow+0x222>
 80162d8:	4b2e      	ldr	r3, [pc, #184]	; (8016394 <pow+0x2d4>)
 80162da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80162de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162e2:	f998 3000 	ldrsb.w	r3, [r8]
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d142      	bne.n	8016370 <pow+0x2b0>
 80162ea:	f7fe fc43 	bl	8014b74 <__errno>
 80162ee:	2322      	movs	r3, #34	; 0x22
 80162f0:	e78d      	b.n	801620e <pow+0x14e>
 80162f2:	4b29      	ldr	r3, [pc, #164]	; (8016398 <pow+0x2d8>)
 80162f4:	2200      	movs	r2, #0
 80162f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162fa:	4630      	mov	r0, r6
 80162fc:	4652      	mov	r2, sl
 80162fe:	465b      	mov	r3, fp
 8016300:	4639      	mov	r1, r7
 8016302:	f7ea fbfb 	bl	8000afc <__aeabi_dcmplt>
 8016306:	2800      	cmp	r0, #0
 8016308:	d0eb      	beq.n	80162e2 <pow+0x222>
 801630a:	ec45 4b10 	vmov	d0, r4, r5
 801630e:	f001 fa47 	bl	80177a0 <rint>
 8016312:	4622      	mov	r2, r4
 8016314:	462b      	mov	r3, r5
 8016316:	ec51 0b10 	vmov	r0, r1, d0
 801631a:	f7ea fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 801631e:	2800      	cmp	r0, #0
 8016320:	d1df      	bne.n	80162e2 <pow+0x222>
 8016322:	2200      	movs	r2, #0
 8016324:	4b18      	ldr	r3, [pc, #96]	; (8016388 <pow+0x2c8>)
 8016326:	e7da      	b.n	80162de <pow+0x21e>
 8016328:	2200      	movs	r2, #0
 801632a:	2300      	movs	r3, #0
 801632c:	ec51 0b18 	vmov	r0, r1, d8
 8016330:	f7ea fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 8016334:	2800      	cmp	r0, #0
 8016336:	f43f af3a 	beq.w	80161ae <pow+0xee>
 801633a:	ec47 6b10 	vmov	d0, r6, r7
 801633e:	f001 fa1d 	bl	801777c <finite>
 8016342:	2800      	cmp	r0, #0
 8016344:	f43f af33 	beq.w	80161ae <pow+0xee>
 8016348:	ec45 4b10 	vmov	d0, r4, r5
 801634c:	f001 fa16 	bl	801777c <finite>
 8016350:	2800      	cmp	r0, #0
 8016352:	f43f af2c 	beq.w	80161ae <pow+0xee>
 8016356:	2304      	movs	r3, #4
 8016358:	9302      	str	r3, [sp, #8]
 801635a:	4b09      	ldr	r3, [pc, #36]	; (8016380 <pow+0x2c0>)
 801635c:	9303      	str	r3, [sp, #12]
 801635e:	2300      	movs	r3, #0
 8016360:	930a      	str	r3, [sp, #40]	; 0x28
 8016362:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801636a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801636e:	e7b8      	b.n	80162e2 <pow+0x222>
 8016370:	a802      	add	r0, sp, #8
 8016372:	f001 fa0b 	bl	801778c <matherr>
 8016376:	2800      	cmp	r0, #0
 8016378:	f47f af11 	bne.w	801619e <pow+0xde>
 801637c:	e7b5      	b.n	80162ea <pow+0x22a>
 801637e:	bf00      	nop
 8016380:	0801815b 	.word	0x0801815b
 8016384:	3ff00000 	.word	0x3ff00000
 8016388:	fff00000 	.word	0xfff00000
 801638c:	3fe00000 	.word	0x3fe00000
 8016390:	47efffff 	.word	0x47efffff
 8016394:	c7efffff 	.word	0xc7efffff
 8016398:	7ff00000 	.word	0x7ff00000
 801639c:	200003b8 	.word	0x200003b8

080163a0 <powf>:
 80163a0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80163a4:	ed2d 8b04 	vpush	{d8-d9}
 80163a8:	4ca7      	ldr	r4, [pc, #668]	; (8016648 <powf+0x2a8>)
 80163aa:	b08a      	sub	sp, #40	; 0x28
 80163ac:	eef0 8a40 	vmov.f32	s17, s0
 80163b0:	eeb0 8a60 	vmov.f32	s16, s1
 80163b4:	f000 ff16 	bl	80171e4 <__ieee754_powf>
 80163b8:	f994 5000 	ldrsb.w	r5, [r4]
 80163bc:	1c6b      	adds	r3, r5, #1
 80163be:	eeb0 9a40 	vmov.f32	s18, s0
 80163c2:	4626      	mov	r6, r4
 80163c4:	d05f      	beq.n	8016486 <powf+0xe6>
 80163c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80163ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ce:	d65a      	bvs.n	8016486 <powf+0xe6>
 80163d0:	eef4 8a68 	vcmp.f32	s17, s17
 80163d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163d8:	d721      	bvc.n	801641e <powf+0x7e>
 80163da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80163de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e2:	d150      	bne.n	8016486 <powf+0xe6>
 80163e4:	2301      	movs	r3, #1
 80163e6:	9300      	str	r3, [sp, #0]
 80163e8:	4b98      	ldr	r3, [pc, #608]	; (801664c <powf+0x2ac>)
 80163ea:	9301      	str	r3, [sp, #4]
 80163ec:	ee18 0a90 	vmov	r0, s17
 80163f0:	2300      	movs	r3, #0
 80163f2:	9308      	str	r3, [sp, #32]
 80163f4:	f7ea f8b8 	bl	8000568 <__aeabi_f2d>
 80163f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163fc:	ee18 0a10 	vmov	r0, s16
 8016400:	f7ea f8b2 	bl	8000568 <__aeabi_f2d>
 8016404:	4b92      	ldr	r3, [pc, #584]	; (8016650 <powf+0x2b0>)
 8016406:	2200      	movs	r2, #0
 8016408:	2d02      	cmp	r5, #2
 801640a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801640e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016412:	d032      	beq.n	801647a <powf+0xda>
 8016414:	4668      	mov	r0, sp
 8016416:	f001 f9b9 	bl	801778c <matherr>
 801641a:	bb40      	cbnz	r0, 801646e <powf+0xce>
 801641c:	e065      	b.n	80164ea <powf+0x14a>
 801641e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8016654 <powf+0x2b4>
 8016422:	eef4 8a69 	vcmp.f32	s17, s19
 8016426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801642a:	d163      	bne.n	80164f4 <powf+0x154>
 801642c:	eeb4 8a69 	vcmp.f32	s16, s19
 8016430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016434:	d12e      	bne.n	8016494 <powf+0xf4>
 8016436:	2301      	movs	r3, #1
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	4b84      	ldr	r3, [pc, #528]	; (801664c <powf+0x2ac>)
 801643c:	9301      	str	r3, [sp, #4]
 801643e:	ee18 0a90 	vmov	r0, s17
 8016442:	2300      	movs	r3, #0
 8016444:	9308      	str	r3, [sp, #32]
 8016446:	f7ea f88f 	bl	8000568 <__aeabi_f2d>
 801644a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801644e:	ee18 0a10 	vmov	r0, s16
 8016452:	f7ea f889 	bl	8000568 <__aeabi_f2d>
 8016456:	2200      	movs	r2, #0
 8016458:	2300      	movs	r3, #0
 801645a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801645e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016462:	2d00      	cmp	r5, #0
 8016464:	d0d6      	beq.n	8016414 <powf+0x74>
 8016466:	4b7a      	ldr	r3, [pc, #488]	; (8016650 <powf+0x2b0>)
 8016468:	2200      	movs	r2, #0
 801646a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801646e:	9b08      	ldr	r3, [sp, #32]
 8016470:	b11b      	cbz	r3, 801647a <powf+0xda>
 8016472:	f7fe fb7f 	bl	8014b74 <__errno>
 8016476:	9b08      	ldr	r3, [sp, #32]
 8016478:	6003      	str	r3, [r0, #0]
 801647a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801647e:	f7ea fba3 	bl	8000bc8 <__aeabi_d2f>
 8016482:	ee09 0a10 	vmov	s18, r0
 8016486:	eeb0 0a49 	vmov.f32	s0, s18
 801648a:	b00a      	add	sp, #40	; 0x28
 801648c:	ecbd 8b04 	vpop	{d8-d9}
 8016490:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8016494:	eeb0 0a48 	vmov.f32	s0, s16
 8016498:	f001 fa83 	bl	80179a2 <finitef>
 801649c:	2800      	cmp	r0, #0
 801649e:	d0f2      	beq.n	8016486 <powf+0xe6>
 80164a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80164a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a8:	d5ed      	bpl.n	8016486 <powf+0xe6>
 80164aa:	2301      	movs	r3, #1
 80164ac:	9300      	str	r3, [sp, #0]
 80164ae:	4b67      	ldr	r3, [pc, #412]	; (801664c <powf+0x2ac>)
 80164b0:	9301      	str	r3, [sp, #4]
 80164b2:	ee18 0a90 	vmov	r0, s17
 80164b6:	2300      	movs	r3, #0
 80164b8:	9308      	str	r3, [sp, #32]
 80164ba:	f7ea f855 	bl	8000568 <__aeabi_f2d>
 80164be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164c2:	ee18 0a10 	vmov	r0, s16
 80164c6:	f7ea f84f 	bl	8000568 <__aeabi_f2d>
 80164ca:	f994 3000 	ldrsb.w	r3, [r4]
 80164ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164d2:	b923      	cbnz	r3, 80164de <powf+0x13e>
 80164d4:	2200      	movs	r2, #0
 80164d6:	2300      	movs	r3, #0
 80164d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80164dc:	e79a      	b.n	8016414 <powf+0x74>
 80164de:	495e      	ldr	r1, [pc, #376]	; (8016658 <powf+0x2b8>)
 80164e0:	2000      	movs	r0, #0
 80164e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80164e6:	2b02      	cmp	r3, #2
 80164e8:	d194      	bne.n	8016414 <powf+0x74>
 80164ea:	f7fe fb43 	bl	8014b74 <__errno>
 80164ee:	2321      	movs	r3, #33	; 0x21
 80164f0:	6003      	str	r3, [r0, #0]
 80164f2:	e7bc      	b.n	801646e <powf+0xce>
 80164f4:	f001 fa55 	bl	80179a2 <finitef>
 80164f8:	4605      	mov	r5, r0
 80164fa:	2800      	cmp	r0, #0
 80164fc:	d173      	bne.n	80165e6 <powf+0x246>
 80164fe:	eeb0 0a68 	vmov.f32	s0, s17
 8016502:	f001 fa4e 	bl	80179a2 <finitef>
 8016506:	2800      	cmp	r0, #0
 8016508:	d06d      	beq.n	80165e6 <powf+0x246>
 801650a:	eeb0 0a48 	vmov.f32	s0, s16
 801650e:	f001 fa48 	bl	80179a2 <finitef>
 8016512:	2800      	cmp	r0, #0
 8016514:	d067      	beq.n	80165e6 <powf+0x246>
 8016516:	ee18 0a90 	vmov	r0, s17
 801651a:	f7ea f825 	bl	8000568 <__aeabi_f2d>
 801651e:	4680      	mov	r8, r0
 8016520:	ee18 0a10 	vmov	r0, s16
 8016524:	4689      	mov	r9, r1
 8016526:	f7ea f81f 	bl	8000568 <__aeabi_f2d>
 801652a:	eeb4 9a49 	vcmp.f32	s18, s18
 801652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016532:	f994 4000 	ldrsb.w	r4, [r4]
 8016536:	4b45      	ldr	r3, [pc, #276]	; (801664c <powf+0x2ac>)
 8016538:	d713      	bvc.n	8016562 <powf+0x1c2>
 801653a:	2201      	movs	r2, #1
 801653c:	e9cd 2300 	strd	r2, r3, [sp]
 8016540:	9508      	str	r5, [sp, #32]
 8016542:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801654a:	2c00      	cmp	r4, #0
 801654c:	d0c2      	beq.n	80164d4 <powf+0x134>
 801654e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8016552:	ee17 0a90 	vmov	r0, s15
 8016556:	f7ea f807 	bl	8000568 <__aeabi_f2d>
 801655a:	2c02      	cmp	r4, #2
 801655c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016560:	e7c2      	b.n	80164e8 <powf+0x148>
 8016562:	2203      	movs	r2, #3
 8016564:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016568:	e9cd 2300 	strd	r2, r3, [sp]
 801656c:	9508      	str	r5, [sp, #32]
 801656e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016576:	ee28 8a27 	vmul.f32	s16, s16, s15
 801657a:	b9fc      	cbnz	r4, 80165bc <powf+0x21c>
 801657c:	4b37      	ldr	r3, [pc, #220]	; (801665c <powf+0x2bc>)
 801657e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8016582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801658e:	d553      	bpl.n	8016638 <powf+0x298>
 8016590:	eeb0 0a48 	vmov.f32	s0, s16
 8016594:	f001 fa16 	bl	80179c4 <rintf>
 8016598:	eeb4 0a48 	vcmp.f32	s0, s16
 801659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a0:	d004      	beq.n	80165ac <powf+0x20c>
 80165a2:	4b2f      	ldr	r3, [pc, #188]	; (8016660 <powf+0x2c0>)
 80165a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80165a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80165ac:	f996 3000 	ldrsb.w	r3, [r6]
 80165b0:	2b02      	cmp	r3, #2
 80165b2:	d141      	bne.n	8016638 <powf+0x298>
 80165b4:	f7fe fade 	bl	8014b74 <__errno>
 80165b8:	2322      	movs	r3, #34	; 0x22
 80165ba:	e799      	b.n	80164f0 <powf+0x150>
 80165bc:	4b29      	ldr	r3, [pc, #164]	; (8016664 <powf+0x2c4>)
 80165be:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80165c2:	2200      	movs	r2, #0
 80165c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80165cc:	d5ee      	bpl.n	80165ac <powf+0x20c>
 80165ce:	eeb0 0a48 	vmov.f32	s0, s16
 80165d2:	f001 f9f7 	bl	80179c4 <rintf>
 80165d6:	eeb4 0a48 	vcmp.f32	s0, s16
 80165da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165de:	d0e5      	beq.n	80165ac <powf+0x20c>
 80165e0:	2200      	movs	r2, #0
 80165e2:	4b1d      	ldr	r3, [pc, #116]	; (8016658 <powf+0x2b8>)
 80165e4:	e7e0      	b.n	80165a8 <powf+0x208>
 80165e6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80165ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ee:	f47f af4a 	bne.w	8016486 <powf+0xe6>
 80165f2:	eeb0 0a68 	vmov.f32	s0, s17
 80165f6:	f001 f9d4 	bl	80179a2 <finitef>
 80165fa:	2800      	cmp	r0, #0
 80165fc:	f43f af43 	beq.w	8016486 <powf+0xe6>
 8016600:	eeb0 0a48 	vmov.f32	s0, s16
 8016604:	f001 f9cd 	bl	80179a2 <finitef>
 8016608:	2800      	cmp	r0, #0
 801660a:	f43f af3c 	beq.w	8016486 <powf+0xe6>
 801660e:	2304      	movs	r3, #4
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	4b0e      	ldr	r3, [pc, #56]	; (801664c <powf+0x2ac>)
 8016614:	9301      	str	r3, [sp, #4]
 8016616:	ee18 0a90 	vmov	r0, s17
 801661a:	2300      	movs	r3, #0
 801661c:	9308      	str	r3, [sp, #32]
 801661e:	f7e9 ffa3 	bl	8000568 <__aeabi_f2d>
 8016622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016626:	ee18 0a10 	vmov	r0, s16
 801662a:	f7e9 ff9d 	bl	8000568 <__aeabi_f2d>
 801662e:	2200      	movs	r2, #0
 8016630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016634:	2300      	movs	r3, #0
 8016636:	e7b7      	b.n	80165a8 <powf+0x208>
 8016638:	4668      	mov	r0, sp
 801663a:	f001 f8a7 	bl	801778c <matherr>
 801663e:	2800      	cmp	r0, #0
 8016640:	f47f af15 	bne.w	801646e <powf+0xce>
 8016644:	e7b6      	b.n	80165b4 <powf+0x214>
 8016646:	bf00      	nop
 8016648:	200003b8 	.word	0x200003b8
 801664c:	0801815f 	.word	0x0801815f
 8016650:	3ff00000 	.word	0x3ff00000
 8016654:	00000000 	.word	0x00000000
 8016658:	fff00000 	.word	0xfff00000
 801665c:	47efffff 	.word	0x47efffff
 8016660:	c7efffff 	.word	0xc7efffff
 8016664:	7ff00000 	.word	0x7ff00000

08016668 <__ieee754_pow>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	b091      	sub	sp, #68	; 0x44
 801666e:	ed8d 1b00 	vstr	d1, [sp]
 8016672:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016676:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801667a:	ea58 0302 	orrs.w	r3, r8, r2
 801667e:	ec57 6b10 	vmov	r6, r7, d0
 8016682:	f000 84be 	beq.w	8017002 <__ieee754_pow+0x99a>
 8016686:	4b7a      	ldr	r3, [pc, #488]	; (8016870 <__ieee754_pow+0x208>)
 8016688:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801668c:	429c      	cmp	r4, r3
 801668e:	463d      	mov	r5, r7
 8016690:	ee10 aa10 	vmov	sl, s0
 8016694:	dc09      	bgt.n	80166aa <__ieee754_pow+0x42>
 8016696:	d103      	bne.n	80166a0 <__ieee754_pow+0x38>
 8016698:	b93e      	cbnz	r6, 80166aa <__ieee754_pow+0x42>
 801669a:	45a0      	cmp	r8, r4
 801669c:	dc0d      	bgt.n	80166ba <__ieee754_pow+0x52>
 801669e:	e001      	b.n	80166a4 <__ieee754_pow+0x3c>
 80166a0:	4598      	cmp	r8, r3
 80166a2:	dc02      	bgt.n	80166aa <__ieee754_pow+0x42>
 80166a4:	4598      	cmp	r8, r3
 80166a6:	d10e      	bne.n	80166c6 <__ieee754_pow+0x5e>
 80166a8:	b16a      	cbz	r2, 80166c6 <__ieee754_pow+0x5e>
 80166aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80166ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80166b2:	ea54 030a 	orrs.w	r3, r4, sl
 80166b6:	f000 84a4 	beq.w	8017002 <__ieee754_pow+0x99a>
 80166ba:	486e      	ldr	r0, [pc, #440]	; (8016874 <__ieee754_pow+0x20c>)
 80166bc:	b011      	add	sp, #68	; 0x44
 80166be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c2:	f001 b865 	b.w	8017790 <nan>
 80166c6:	2d00      	cmp	r5, #0
 80166c8:	da53      	bge.n	8016772 <__ieee754_pow+0x10a>
 80166ca:	4b6b      	ldr	r3, [pc, #428]	; (8016878 <__ieee754_pow+0x210>)
 80166cc:	4598      	cmp	r8, r3
 80166ce:	dc4d      	bgt.n	801676c <__ieee754_pow+0x104>
 80166d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80166d4:	4598      	cmp	r8, r3
 80166d6:	dd4c      	ble.n	8016772 <__ieee754_pow+0x10a>
 80166d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80166dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80166e0:	2b14      	cmp	r3, #20
 80166e2:	dd26      	ble.n	8016732 <__ieee754_pow+0xca>
 80166e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80166e8:	fa22 f103 	lsr.w	r1, r2, r3
 80166ec:	fa01 f303 	lsl.w	r3, r1, r3
 80166f0:	4293      	cmp	r3, r2
 80166f2:	d13e      	bne.n	8016772 <__ieee754_pow+0x10a>
 80166f4:	f001 0101 	and.w	r1, r1, #1
 80166f8:	f1c1 0b02 	rsb	fp, r1, #2
 80166fc:	2a00      	cmp	r2, #0
 80166fe:	d15b      	bne.n	80167b8 <__ieee754_pow+0x150>
 8016700:	4b5b      	ldr	r3, [pc, #364]	; (8016870 <__ieee754_pow+0x208>)
 8016702:	4598      	cmp	r8, r3
 8016704:	d124      	bne.n	8016750 <__ieee754_pow+0xe8>
 8016706:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801670a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801670e:	ea53 030a 	orrs.w	r3, r3, sl
 8016712:	f000 8476 	beq.w	8017002 <__ieee754_pow+0x99a>
 8016716:	4b59      	ldr	r3, [pc, #356]	; (801687c <__ieee754_pow+0x214>)
 8016718:	429c      	cmp	r4, r3
 801671a:	dd2d      	ble.n	8016778 <__ieee754_pow+0x110>
 801671c:	f1b9 0f00 	cmp.w	r9, #0
 8016720:	f280 8473 	bge.w	801700a <__ieee754_pow+0x9a2>
 8016724:	2000      	movs	r0, #0
 8016726:	2100      	movs	r1, #0
 8016728:	ec41 0b10 	vmov	d0, r0, r1
 801672c:	b011      	add	sp, #68	; 0x44
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	2a00      	cmp	r2, #0
 8016734:	d13e      	bne.n	80167b4 <__ieee754_pow+0x14c>
 8016736:	f1c3 0314 	rsb	r3, r3, #20
 801673a:	fa48 f103 	asr.w	r1, r8, r3
 801673e:	fa01 f303 	lsl.w	r3, r1, r3
 8016742:	4543      	cmp	r3, r8
 8016744:	f040 8469 	bne.w	801701a <__ieee754_pow+0x9b2>
 8016748:	f001 0101 	and.w	r1, r1, #1
 801674c:	f1c1 0b02 	rsb	fp, r1, #2
 8016750:	4b4b      	ldr	r3, [pc, #300]	; (8016880 <__ieee754_pow+0x218>)
 8016752:	4598      	cmp	r8, r3
 8016754:	d118      	bne.n	8016788 <__ieee754_pow+0x120>
 8016756:	f1b9 0f00 	cmp.w	r9, #0
 801675a:	f280 845a 	bge.w	8017012 <__ieee754_pow+0x9aa>
 801675e:	4948      	ldr	r1, [pc, #288]	; (8016880 <__ieee754_pow+0x218>)
 8016760:	4632      	mov	r2, r6
 8016762:	463b      	mov	r3, r7
 8016764:	2000      	movs	r0, #0
 8016766:	f7ea f881 	bl	800086c <__aeabi_ddiv>
 801676a:	e7dd      	b.n	8016728 <__ieee754_pow+0xc0>
 801676c:	f04f 0b02 	mov.w	fp, #2
 8016770:	e7c4      	b.n	80166fc <__ieee754_pow+0x94>
 8016772:	f04f 0b00 	mov.w	fp, #0
 8016776:	e7c1      	b.n	80166fc <__ieee754_pow+0x94>
 8016778:	f1b9 0f00 	cmp.w	r9, #0
 801677c:	dad2      	bge.n	8016724 <__ieee754_pow+0xbc>
 801677e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016782:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016786:	e7cf      	b.n	8016728 <__ieee754_pow+0xc0>
 8016788:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801678c:	d106      	bne.n	801679c <__ieee754_pow+0x134>
 801678e:	4632      	mov	r2, r6
 8016790:	463b      	mov	r3, r7
 8016792:	4610      	mov	r0, r2
 8016794:	4619      	mov	r1, r3
 8016796:	f7e9 ff3f 	bl	8000618 <__aeabi_dmul>
 801679a:	e7c5      	b.n	8016728 <__ieee754_pow+0xc0>
 801679c:	4b39      	ldr	r3, [pc, #228]	; (8016884 <__ieee754_pow+0x21c>)
 801679e:	4599      	cmp	r9, r3
 80167a0:	d10a      	bne.n	80167b8 <__ieee754_pow+0x150>
 80167a2:	2d00      	cmp	r5, #0
 80167a4:	db08      	blt.n	80167b8 <__ieee754_pow+0x150>
 80167a6:	ec47 6b10 	vmov	d0, r6, r7
 80167aa:	b011      	add	sp, #68	; 0x44
 80167ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b0:	f000 bc68 	b.w	8017084 <__ieee754_sqrt>
 80167b4:	f04f 0b00 	mov.w	fp, #0
 80167b8:	ec47 6b10 	vmov	d0, r6, r7
 80167bc:	f000 ffd5 	bl	801776a <fabs>
 80167c0:	ec51 0b10 	vmov	r0, r1, d0
 80167c4:	f1ba 0f00 	cmp.w	sl, #0
 80167c8:	d127      	bne.n	801681a <__ieee754_pow+0x1b2>
 80167ca:	b124      	cbz	r4, 80167d6 <__ieee754_pow+0x16e>
 80167cc:	4b2c      	ldr	r3, [pc, #176]	; (8016880 <__ieee754_pow+0x218>)
 80167ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d121      	bne.n	801681a <__ieee754_pow+0x1b2>
 80167d6:	f1b9 0f00 	cmp.w	r9, #0
 80167da:	da05      	bge.n	80167e8 <__ieee754_pow+0x180>
 80167dc:	4602      	mov	r2, r0
 80167de:	460b      	mov	r3, r1
 80167e0:	2000      	movs	r0, #0
 80167e2:	4927      	ldr	r1, [pc, #156]	; (8016880 <__ieee754_pow+0x218>)
 80167e4:	f7ea f842 	bl	800086c <__aeabi_ddiv>
 80167e8:	2d00      	cmp	r5, #0
 80167ea:	da9d      	bge.n	8016728 <__ieee754_pow+0xc0>
 80167ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80167f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167f4:	ea54 030b 	orrs.w	r3, r4, fp
 80167f8:	d108      	bne.n	801680c <__ieee754_pow+0x1a4>
 80167fa:	4602      	mov	r2, r0
 80167fc:	460b      	mov	r3, r1
 80167fe:	4610      	mov	r0, r2
 8016800:	4619      	mov	r1, r3
 8016802:	f7e9 fd51 	bl	80002a8 <__aeabi_dsub>
 8016806:	4602      	mov	r2, r0
 8016808:	460b      	mov	r3, r1
 801680a:	e7ac      	b.n	8016766 <__ieee754_pow+0xfe>
 801680c:	f1bb 0f01 	cmp.w	fp, #1
 8016810:	d18a      	bne.n	8016728 <__ieee754_pow+0xc0>
 8016812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016816:	4619      	mov	r1, r3
 8016818:	e786      	b.n	8016728 <__ieee754_pow+0xc0>
 801681a:	0fed      	lsrs	r5, r5, #31
 801681c:	1e6b      	subs	r3, r5, #1
 801681e:	930d      	str	r3, [sp, #52]	; 0x34
 8016820:	ea5b 0303 	orrs.w	r3, fp, r3
 8016824:	d102      	bne.n	801682c <__ieee754_pow+0x1c4>
 8016826:	4632      	mov	r2, r6
 8016828:	463b      	mov	r3, r7
 801682a:	e7e8      	b.n	80167fe <__ieee754_pow+0x196>
 801682c:	4b16      	ldr	r3, [pc, #88]	; (8016888 <__ieee754_pow+0x220>)
 801682e:	4598      	cmp	r8, r3
 8016830:	f340 80fe 	ble.w	8016a30 <__ieee754_pow+0x3c8>
 8016834:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016838:	4598      	cmp	r8, r3
 801683a:	dd0a      	ble.n	8016852 <__ieee754_pow+0x1ea>
 801683c:	4b0f      	ldr	r3, [pc, #60]	; (801687c <__ieee754_pow+0x214>)
 801683e:	429c      	cmp	r4, r3
 8016840:	dc0d      	bgt.n	801685e <__ieee754_pow+0x1f6>
 8016842:	f1b9 0f00 	cmp.w	r9, #0
 8016846:	f6bf af6d 	bge.w	8016724 <__ieee754_pow+0xbc>
 801684a:	a307      	add	r3, pc, #28	; (adr r3, 8016868 <__ieee754_pow+0x200>)
 801684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016850:	e79f      	b.n	8016792 <__ieee754_pow+0x12a>
 8016852:	4b0e      	ldr	r3, [pc, #56]	; (801688c <__ieee754_pow+0x224>)
 8016854:	429c      	cmp	r4, r3
 8016856:	ddf4      	ble.n	8016842 <__ieee754_pow+0x1da>
 8016858:	4b09      	ldr	r3, [pc, #36]	; (8016880 <__ieee754_pow+0x218>)
 801685a:	429c      	cmp	r4, r3
 801685c:	dd18      	ble.n	8016890 <__ieee754_pow+0x228>
 801685e:	f1b9 0f00 	cmp.w	r9, #0
 8016862:	dcf2      	bgt.n	801684a <__ieee754_pow+0x1e2>
 8016864:	e75e      	b.n	8016724 <__ieee754_pow+0xbc>
 8016866:	bf00      	nop
 8016868:	8800759c 	.word	0x8800759c
 801686c:	7e37e43c 	.word	0x7e37e43c
 8016870:	7ff00000 	.word	0x7ff00000
 8016874:	08017fb7 	.word	0x08017fb7
 8016878:	433fffff 	.word	0x433fffff
 801687c:	3fefffff 	.word	0x3fefffff
 8016880:	3ff00000 	.word	0x3ff00000
 8016884:	3fe00000 	.word	0x3fe00000
 8016888:	41e00000 	.word	0x41e00000
 801688c:	3feffffe 	.word	0x3feffffe
 8016890:	2200      	movs	r2, #0
 8016892:	4b63      	ldr	r3, [pc, #396]	; (8016a20 <__ieee754_pow+0x3b8>)
 8016894:	f7e9 fd08 	bl	80002a8 <__aeabi_dsub>
 8016898:	a355      	add	r3, pc, #340	; (adr r3, 80169f0 <__ieee754_pow+0x388>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	4604      	mov	r4, r0
 80168a0:	460d      	mov	r5, r1
 80168a2:	f7e9 feb9 	bl	8000618 <__aeabi_dmul>
 80168a6:	a354      	add	r3, pc, #336	; (adr r3, 80169f8 <__ieee754_pow+0x390>)
 80168a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ac:	4606      	mov	r6, r0
 80168ae:	460f      	mov	r7, r1
 80168b0:	4620      	mov	r0, r4
 80168b2:	4629      	mov	r1, r5
 80168b4:	f7e9 feb0 	bl	8000618 <__aeabi_dmul>
 80168b8:	2200      	movs	r2, #0
 80168ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168be:	4b59      	ldr	r3, [pc, #356]	; (8016a24 <__ieee754_pow+0x3bc>)
 80168c0:	4620      	mov	r0, r4
 80168c2:	4629      	mov	r1, r5
 80168c4:	f7e9 fea8 	bl	8000618 <__aeabi_dmul>
 80168c8:	4602      	mov	r2, r0
 80168ca:	460b      	mov	r3, r1
 80168cc:	a14c      	add	r1, pc, #304	; (adr r1, 8016a00 <__ieee754_pow+0x398>)
 80168ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168d2:	f7e9 fce9 	bl	80002a8 <__aeabi_dsub>
 80168d6:	4622      	mov	r2, r4
 80168d8:	462b      	mov	r3, r5
 80168da:	f7e9 fe9d 	bl	8000618 <__aeabi_dmul>
 80168de:	4602      	mov	r2, r0
 80168e0:	460b      	mov	r3, r1
 80168e2:	2000      	movs	r0, #0
 80168e4:	4950      	ldr	r1, [pc, #320]	; (8016a28 <__ieee754_pow+0x3c0>)
 80168e6:	f7e9 fcdf 	bl	80002a8 <__aeabi_dsub>
 80168ea:	4622      	mov	r2, r4
 80168ec:	462b      	mov	r3, r5
 80168ee:	4680      	mov	r8, r0
 80168f0:	4689      	mov	r9, r1
 80168f2:	4620      	mov	r0, r4
 80168f4:	4629      	mov	r1, r5
 80168f6:	f7e9 fe8f 	bl	8000618 <__aeabi_dmul>
 80168fa:	4602      	mov	r2, r0
 80168fc:	460b      	mov	r3, r1
 80168fe:	4640      	mov	r0, r8
 8016900:	4649      	mov	r1, r9
 8016902:	f7e9 fe89 	bl	8000618 <__aeabi_dmul>
 8016906:	a340      	add	r3, pc, #256	; (adr r3, 8016a08 <__ieee754_pow+0x3a0>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	f7e9 fe84 	bl	8000618 <__aeabi_dmul>
 8016910:	4602      	mov	r2, r0
 8016912:	460b      	mov	r3, r1
 8016914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016918:	f7e9 fcc6 	bl	80002a8 <__aeabi_dsub>
 801691c:	4602      	mov	r2, r0
 801691e:	460b      	mov	r3, r1
 8016920:	4604      	mov	r4, r0
 8016922:	460d      	mov	r5, r1
 8016924:	4630      	mov	r0, r6
 8016926:	4639      	mov	r1, r7
 8016928:	f7e9 fcc0 	bl	80002ac <__adddf3>
 801692c:	2000      	movs	r0, #0
 801692e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016932:	4632      	mov	r2, r6
 8016934:	463b      	mov	r3, r7
 8016936:	f7e9 fcb7 	bl	80002a8 <__aeabi_dsub>
 801693a:	4602      	mov	r2, r0
 801693c:	460b      	mov	r3, r1
 801693e:	4620      	mov	r0, r4
 8016940:	4629      	mov	r1, r5
 8016942:	f7e9 fcb1 	bl	80002a8 <__aeabi_dsub>
 8016946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016948:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801694c:	4313      	orrs	r3, r2
 801694e:	4606      	mov	r6, r0
 8016950:	460f      	mov	r7, r1
 8016952:	f040 81eb 	bne.w	8016d2c <__ieee754_pow+0x6c4>
 8016956:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016a10 <__ieee754_pow+0x3a8>
 801695a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801695e:	2400      	movs	r4, #0
 8016960:	4622      	mov	r2, r4
 8016962:	462b      	mov	r3, r5
 8016964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016968:	ed8d 7b02 	vstr	d7, [sp, #8]
 801696c:	f7e9 fc9c 	bl	80002a8 <__aeabi_dsub>
 8016970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016974:	f7e9 fe50 	bl	8000618 <__aeabi_dmul>
 8016978:	e9dd 2300 	ldrd	r2, r3, [sp]
 801697c:	4680      	mov	r8, r0
 801697e:	4689      	mov	r9, r1
 8016980:	4630      	mov	r0, r6
 8016982:	4639      	mov	r1, r7
 8016984:	f7e9 fe48 	bl	8000618 <__aeabi_dmul>
 8016988:	4602      	mov	r2, r0
 801698a:	460b      	mov	r3, r1
 801698c:	4640      	mov	r0, r8
 801698e:	4649      	mov	r1, r9
 8016990:	f7e9 fc8c 	bl	80002ac <__adddf3>
 8016994:	4622      	mov	r2, r4
 8016996:	462b      	mov	r3, r5
 8016998:	4680      	mov	r8, r0
 801699a:	4689      	mov	r9, r1
 801699c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80169a0:	f7e9 fe3a 	bl	8000618 <__aeabi_dmul>
 80169a4:	460b      	mov	r3, r1
 80169a6:	4604      	mov	r4, r0
 80169a8:	460d      	mov	r5, r1
 80169aa:	4602      	mov	r2, r0
 80169ac:	4649      	mov	r1, r9
 80169ae:	4640      	mov	r0, r8
 80169b0:	e9cd 4500 	strd	r4, r5, [sp]
 80169b4:	f7e9 fc7a 	bl	80002ac <__adddf3>
 80169b8:	4b1c      	ldr	r3, [pc, #112]	; (8016a2c <__ieee754_pow+0x3c4>)
 80169ba:	4299      	cmp	r1, r3
 80169bc:	4606      	mov	r6, r0
 80169be:	460f      	mov	r7, r1
 80169c0:	468b      	mov	fp, r1
 80169c2:	f340 82f7 	ble.w	8016fb4 <__ieee754_pow+0x94c>
 80169c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80169ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80169ce:	4303      	orrs	r3, r0
 80169d0:	f000 81ea 	beq.w	8016da8 <__ieee754_pow+0x740>
 80169d4:	a310      	add	r3, pc, #64	; (adr r3, 8016a18 <__ieee754_pow+0x3b0>)
 80169d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169de:	f7e9 fe1b 	bl	8000618 <__aeabi_dmul>
 80169e2:	a30d      	add	r3, pc, #52	; (adr r3, 8016a18 <__ieee754_pow+0x3b0>)
 80169e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e8:	e6d5      	b.n	8016796 <__ieee754_pow+0x12e>
 80169ea:	bf00      	nop
 80169ec:	f3af 8000 	nop.w
 80169f0:	60000000 	.word	0x60000000
 80169f4:	3ff71547 	.word	0x3ff71547
 80169f8:	f85ddf44 	.word	0xf85ddf44
 80169fc:	3e54ae0b 	.word	0x3e54ae0b
 8016a00:	55555555 	.word	0x55555555
 8016a04:	3fd55555 	.word	0x3fd55555
 8016a08:	652b82fe 	.word	0x652b82fe
 8016a0c:	3ff71547 	.word	0x3ff71547
 8016a10:	00000000 	.word	0x00000000
 8016a14:	bff00000 	.word	0xbff00000
 8016a18:	8800759c 	.word	0x8800759c
 8016a1c:	7e37e43c 	.word	0x7e37e43c
 8016a20:	3ff00000 	.word	0x3ff00000
 8016a24:	3fd00000 	.word	0x3fd00000
 8016a28:	3fe00000 	.word	0x3fe00000
 8016a2c:	408fffff 	.word	0x408fffff
 8016a30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016a34:	f04f 0200 	mov.w	r2, #0
 8016a38:	da05      	bge.n	8016a46 <__ieee754_pow+0x3de>
 8016a3a:	4bd3      	ldr	r3, [pc, #844]	; (8016d88 <__ieee754_pow+0x720>)
 8016a3c:	f7e9 fdec 	bl	8000618 <__aeabi_dmul>
 8016a40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016a44:	460c      	mov	r4, r1
 8016a46:	1523      	asrs	r3, r4, #20
 8016a48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016a4c:	4413      	add	r3, r2
 8016a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a50:	4bce      	ldr	r3, [pc, #824]	; (8016d8c <__ieee754_pow+0x724>)
 8016a52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016a56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016a5a:	429c      	cmp	r4, r3
 8016a5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a60:	dd08      	ble.n	8016a74 <__ieee754_pow+0x40c>
 8016a62:	4bcb      	ldr	r3, [pc, #812]	; (8016d90 <__ieee754_pow+0x728>)
 8016a64:	429c      	cmp	r4, r3
 8016a66:	f340 815e 	ble.w	8016d26 <__ieee754_pow+0x6be>
 8016a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016a74:	f04f 0a00 	mov.w	sl, #0
 8016a78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a80:	4bc4      	ldr	r3, [pc, #784]	; (8016d94 <__ieee754_pow+0x72c>)
 8016a82:	4413      	add	r3, r2
 8016a84:	ed93 7b00 	vldr	d7, [r3]
 8016a88:	4629      	mov	r1, r5
 8016a8a:	ec53 2b17 	vmov	r2, r3, d7
 8016a8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016a92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a96:	f7e9 fc07 	bl	80002a8 <__aeabi_dsub>
 8016a9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a9e:	4606      	mov	r6, r0
 8016aa0:	460f      	mov	r7, r1
 8016aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016aa6:	f7e9 fc01 	bl	80002ac <__adddf3>
 8016aaa:	4602      	mov	r2, r0
 8016aac:	460b      	mov	r3, r1
 8016aae:	2000      	movs	r0, #0
 8016ab0:	49b9      	ldr	r1, [pc, #740]	; (8016d98 <__ieee754_pow+0x730>)
 8016ab2:	f7e9 fedb 	bl	800086c <__aeabi_ddiv>
 8016ab6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016aba:	4602      	mov	r2, r0
 8016abc:	460b      	mov	r3, r1
 8016abe:	4630      	mov	r0, r6
 8016ac0:	4639      	mov	r1, r7
 8016ac2:	f7e9 fda9 	bl	8000618 <__aeabi_dmul>
 8016ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016aca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	9302      	str	r3, [sp, #8]
 8016ad6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016ada:	106d      	asrs	r5, r5, #1
 8016adc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016ae0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016aea:	4640      	mov	r0, r8
 8016aec:	4649      	mov	r1, r9
 8016aee:	4614      	mov	r4, r2
 8016af0:	461d      	mov	r5, r3
 8016af2:	f7e9 fd91 	bl	8000618 <__aeabi_dmul>
 8016af6:	4602      	mov	r2, r0
 8016af8:	460b      	mov	r3, r1
 8016afa:	4630      	mov	r0, r6
 8016afc:	4639      	mov	r1, r7
 8016afe:	f7e9 fbd3 	bl	80002a8 <__aeabi_dsub>
 8016b02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016b06:	4606      	mov	r6, r0
 8016b08:	460f      	mov	r7, r1
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	4629      	mov	r1, r5
 8016b0e:	f7e9 fbcb 	bl	80002a8 <__aeabi_dsub>
 8016b12:	4602      	mov	r2, r0
 8016b14:	460b      	mov	r3, r1
 8016b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016b1a:	f7e9 fbc5 	bl	80002a8 <__aeabi_dsub>
 8016b1e:	4642      	mov	r2, r8
 8016b20:	464b      	mov	r3, r9
 8016b22:	f7e9 fd79 	bl	8000618 <__aeabi_dmul>
 8016b26:	4602      	mov	r2, r0
 8016b28:	460b      	mov	r3, r1
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	4639      	mov	r1, r7
 8016b2e:	f7e9 fbbb 	bl	80002a8 <__aeabi_dsub>
 8016b32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016b36:	f7e9 fd6f 	bl	8000618 <__aeabi_dmul>
 8016b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b42:	4610      	mov	r0, r2
 8016b44:	4619      	mov	r1, r3
 8016b46:	f7e9 fd67 	bl	8000618 <__aeabi_dmul>
 8016b4a:	a37b      	add	r3, pc, #492	; (adr r3, 8016d38 <__ieee754_pow+0x6d0>)
 8016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b50:	4604      	mov	r4, r0
 8016b52:	460d      	mov	r5, r1
 8016b54:	f7e9 fd60 	bl	8000618 <__aeabi_dmul>
 8016b58:	a379      	add	r3, pc, #484	; (adr r3, 8016d40 <__ieee754_pow+0x6d8>)
 8016b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b5e:	f7e9 fba5 	bl	80002ac <__adddf3>
 8016b62:	4622      	mov	r2, r4
 8016b64:	462b      	mov	r3, r5
 8016b66:	f7e9 fd57 	bl	8000618 <__aeabi_dmul>
 8016b6a:	a377      	add	r3, pc, #476	; (adr r3, 8016d48 <__ieee754_pow+0x6e0>)
 8016b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b70:	f7e9 fb9c 	bl	80002ac <__adddf3>
 8016b74:	4622      	mov	r2, r4
 8016b76:	462b      	mov	r3, r5
 8016b78:	f7e9 fd4e 	bl	8000618 <__aeabi_dmul>
 8016b7c:	a374      	add	r3, pc, #464	; (adr r3, 8016d50 <__ieee754_pow+0x6e8>)
 8016b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b82:	f7e9 fb93 	bl	80002ac <__adddf3>
 8016b86:	4622      	mov	r2, r4
 8016b88:	462b      	mov	r3, r5
 8016b8a:	f7e9 fd45 	bl	8000618 <__aeabi_dmul>
 8016b8e:	a372      	add	r3, pc, #456	; (adr r3, 8016d58 <__ieee754_pow+0x6f0>)
 8016b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b94:	f7e9 fb8a 	bl	80002ac <__adddf3>
 8016b98:	4622      	mov	r2, r4
 8016b9a:	462b      	mov	r3, r5
 8016b9c:	f7e9 fd3c 	bl	8000618 <__aeabi_dmul>
 8016ba0:	a36f      	add	r3, pc, #444	; (adr r3, 8016d60 <__ieee754_pow+0x6f8>)
 8016ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba6:	f7e9 fb81 	bl	80002ac <__adddf3>
 8016baa:	4622      	mov	r2, r4
 8016bac:	4606      	mov	r6, r0
 8016bae:	460f      	mov	r7, r1
 8016bb0:	462b      	mov	r3, r5
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	f7e9 fd2f 	bl	8000618 <__aeabi_dmul>
 8016bba:	4602      	mov	r2, r0
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	4639      	mov	r1, r7
 8016bc2:	f7e9 fd29 	bl	8000618 <__aeabi_dmul>
 8016bc6:	4642      	mov	r2, r8
 8016bc8:	4604      	mov	r4, r0
 8016bca:	460d      	mov	r5, r1
 8016bcc:	464b      	mov	r3, r9
 8016bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016bd2:	f7e9 fb6b 	bl	80002ac <__adddf3>
 8016bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016bda:	f7e9 fd1d 	bl	8000618 <__aeabi_dmul>
 8016bde:	4622      	mov	r2, r4
 8016be0:	462b      	mov	r3, r5
 8016be2:	f7e9 fb63 	bl	80002ac <__adddf3>
 8016be6:	4642      	mov	r2, r8
 8016be8:	4606      	mov	r6, r0
 8016bea:	460f      	mov	r7, r1
 8016bec:	464b      	mov	r3, r9
 8016bee:	4640      	mov	r0, r8
 8016bf0:	4649      	mov	r1, r9
 8016bf2:	f7e9 fd11 	bl	8000618 <__aeabi_dmul>
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	4b68      	ldr	r3, [pc, #416]	; (8016d9c <__ieee754_pow+0x734>)
 8016bfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016bfe:	f7e9 fb55 	bl	80002ac <__adddf3>
 8016c02:	4632      	mov	r2, r6
 8016c04:	463b      	mov	r3, r7
 8016c06:	f7e9 fb51 	bl	80002ac <__adddf3>
 8016c0a:	9802      	ldr	r0, [sp, #8]
 8016c0c:	460d      	mov	r5, r1
 8016c0e:	4604      	mov	r4, r0
 8016c10:	4602      	mov	r2, r0
 8016c12:	460b      	mov	r3, r1
 8016c14:	4640      	mov	r0, r8
 8016c16:	4649      	mov	r1, r9
 8016c18:	f7e9 fcfe 	bl	8000618 <__aeabi_dmul>
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	4680      	mov	r8, r0
 8016c20:	4689      	mov	r9, r1
 8016c22:	4b5e      	ldr	r3, [pc, #376]	; (8016d9c <__ieee754_pow+0x734>)
 8016c24:	4620      	mov	r0, r4
 8016c26:	4629      	mov	r1, r5
 8016c28:	f7e9 fb3e 	bl	80002a8 <__aeabi_dsub>
 8016c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c30:	f7e9 fb3a 	bl	80002a8 <__aeabi_dsub>
 8016c34:	4602      	mov	r2, r0
 8016c36:	460b      	mov	r3, r1
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7e9 fb34 	bl	80002a8 <__aeabi_dsub>
 8016c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c44:	f7e9 fce8 	bl	8000618 <__aeabi_dmul>
 8016c48:	4622      	mov	r2, r4
 8016c4a:	4606      	mov	r6, r0
 8016c4c:	460f      	mov	r7, r1
 8016c4e:	462b      	mov	r3, r5
 8016c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c54:	f7e9 fce0 	bl	8000618 <__aeabi_dmul>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	460b      	mov	r3, r1
 8016c5c:	4630      	mov	r0, r6
 8016c5e:	4639      	mov	r1, r7
 8016c60:	f7e9 fb24 	bl	80002ac <__adddf3>
 8016c64:	4606      	mov	r6, r0
 8016c66:	460f      	mov	r7, r1
 8016c68:	4602      	mov	r2, r0
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	4640      	mov	r0, r8
 8016c6e:	4649      	mov	r1, r9
 8016c70:	f7e9 fb1c 	bl	80002ac <__adddf3>
 8016c74:	9802      	ldr	r0, [sp, #8]
 8016c76:	a33c      	add	r3, pc, #240	; (adr r3, 8016d68 <__ieee754_pow+0x700>)
 8016c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c7c:	4604      	mov	r4, r0
 8016c7e:	460d      	mov	r5, r1
 8016c80:	f7e9 fcca 	bl	8000618 <__aeabi_dmul>
 8016c84:	4642      	mov	r2, r8
 8016c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016c8a:	464b      	mov	r3, r9
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	4629      	mov	r1, r5
 8016c90:	f7e9 fb0a 	bl	80002a8 <__aeabi_dsub>
 8016c94:	4602      	mov	r2, r0
 8016c96:	460b      	mov	r3, r1
 8016c98:	4630      	mov	r0, r6
 8016c9a:	4639      	mov	r1, r7
 8016c9c:	f7e9 fb04 	bl	80002a8 <__aeabi_dsub>
 8016ca0:	a333      	add	r3, pc, #204	; (adr r3, 8016d70 <__ieee754_pow+0x708>)
 8016ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca6:	f7e9 fcb7 	bl	8000618 <__aeabi_dmul>
 8016caa:	a333      	add	r3, pc, #204	; (adr r3, 8016d78 <__ieee754_pow+0x710>)
 8016cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb0:	4606      	mov	r6, r0
 8016cb2:	460f      	mov	r7, r1
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	4629      	mov	r1, r5
 8016cb8:	f7e9 fcae 	bl	8000618 <__aeabi_dmul>
 8016cbc:	4602      	mov	r2, r0
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	4639      	mov	r1, r7
 8016cc4:	f7e9 faf2 	bl	80002ac <__adddf3>
 8016cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016cca:	4b35      	ldr	r3, [pc, #212]	; (8016da0 <__ieee754_pow+0x738>)
 8016ccc:	4413      	add	r3, r2
 8016cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd2:	f7e9 faeb 	bl	80002ac <__adddf3>
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cda:	460d      	mov	r5, r1
 8016cdc:	f7e9 fc32 	bl	8000544 <__aeabi_i2d>
 8016ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ce2:	4b30      	ldr	r3, [pc, #192]	; (8016da4 <__ieee754_pow+0x73c>)
 8016ce4:	4413      	add	r3, r2
 8016ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016cea:	4606      	mov	r6, r0
 8016cec:	460f      	mov	r7, r1
 8016cee:	4622      	mov	r2, r4
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016cf6:	f7e9 fad9 	bl	80002ac <__adddf3>
 8016cfa:	4642      	mov	r2, r8
 8016cfc:	464b      	mov	r3, r9
 8016cfe:	f7e9 fad5 	bl	80002ac <__adddf3>
 8016d02:	4632      	mov	r2, r6
 8016d04:	463b      	mov	r3, r7
 8016d06:	f7e9 fad1 	bl	80002ac <__adddf3>
 8016d0a:	9802      	ldr	r0, [sp, #8]
 8016d0c:	4632      	mov	r2, r6
 8016d0e:	463b      	mov	r3, r7
 8016d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d14:	f7e9 fac8 	bl	80002a8 <__aeabi_dsub>
 8016d18:	4642      	mov	r2, r8
 8016d1a:	464b      	mov	r3, r9
 8016d1c:	f7e9 fac4 	bl	80002a8 <__aeabi_dsub>
 8016d20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016d24:	e607      	b.n	8016936 <__ieee754_pow+0x2ce>
 8016d26:	f04f 0a01 	mov.w	sl, #1
 8016d2a:	e6a5      	b.n	8016a78 <__ieee754_pow+0x410>
 8016d2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016d80 <__ieee754_pow+0x718>
 8016d30:	e613      	b.n	801695a <__ieee754_pow+0x2f2>
 8016d32:	bf00      	nop
 8016d34:	f3af 8000 	nop.w
 8016d38:	4a454eef 	.word	0x4a454eef
 8016d3c:	3fca7e28 	.word	0x3fca7e28
 8016d40:	93c9db65 	.word	0x93c9db65
 8016d44:	3fcd864a 	.word	0x3fcd864a
 8016d48:	a91d4101 	.word	0xa91d4101
 8016d4c:	3fd17460 	.word	0x3fd17460
 8016d50:	518f264d 	.word	0x518f264d
 8016d54:	3fd55555 	.word	0x3fd55555
 8016d58:	db6fabff 	.word	0xdb6fabff
 8016d5c:	3fdb6db6 	.word	0x3fdb6db6
 8016d60:	33333303 	.word	0x33333303
 8016d64:	3fe33333 	.word	0x3fe33333
 8016d68:	e0000000 	.word	0xe0000000
 8016d6c:	3feec709 	.word	0x3feec709
 8016d70:	dc3a03fd 	.word	0xdc3a03fd
 8016d74:	3feec709 	.word	0x3feec709
 8016d78:	145b01f5 	.word	0x145b01f5
 8016d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8016d80:	00000000 	.word	0x00000000
 8016d84:	3ff00000 	.word	0x3ff00000
 8016d88:	43400000 	.word	0x43400000
 8016d8c:	0003988e 	.word	0x0003988e
 8016d90:	000bb679 	.word	0x000bb679
 8016d94:	08018168 	.word	0x08018168
 8016d98:	3ff00000 	.word	0x3ff00000
 8016d9c:	40080000 	.word	0x40080000
 8016da0:	08018188 	.word	0x08018188
 8016da4:	08018178 	.word	0x08018178
 8016da8:	a3b4      	add	r3, pc, #720	; (adr r3, 801707c <__ieee754_pow+0xa14>)
 8016daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dae:	4640      	mov	r0, r8
 8016db0:	4649      	mov	r1, r9
 8016db2:	f7e9 fa7b 	bl	80002ac <__adddf3>
 8016db6:	4622      	mov	r2, r4
 8016db8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016dbc:	462b      	mov	r3, r5
 8016dbe:	4630      	mov	r0, r6
 8016dc0:	4639      	mov	r1, r7
 8016dc2:	f7e9 fa71 	bl	80002a8 <__aeabi_dsub>
 8016dc6:	4602      	mov	r2, r0
 8016dc8:	460b      	mov	r3, r1
 8016dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016dce:	f7e9 feb3 	bl	8000b38 <__aeabi_dcmpgt>
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	f47f adfe 	bne.w	80169d4 <__ieee754_pow+0x36c>
 8016dd8:	4aa3      	ldr	r2, [pc, #652]	; (8017068 <__ieee754_pow+0xa00>)
 8016dda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016dde:	4293      	cmp	r3, r2
 8016de0:	f340 810a 	ble.w	8016ff8 <__ieee754_pow+0x990>
 8016de4:	151b      	asrs	r3, r3, #20
 8016de6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016dea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016dee:	fa4a f303 	asr.w	r3, sl, r3
 8016df2:	445b      	add	r3, fp
 8016df4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016df8:	4e9c      	ldr	r6, [pc, #624]	; (801706c <__ieee754_pow+0xa04>)
 8016dfa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016dfe:	4116      	asrs	r6, r2
 8016e00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016e04:	2000      	movs	r0, #0
 8016e06:	ea23 0106 	bic.w	r1, r3, r6
 8016e0a:	f1c2 0214 	rsb	r2, r2, #20
 8016e0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016e12:	fa4a fa02 	asr.w	sl, sl, r2
 8016e16:	f1bb 0f00 	cmp.w	fp, #0
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	4620      	mov	r0, r4
 8016e20:	4629      	mov	r1, r5
 8016e22:	bfb8      	it	lt
 8016e24:	f1ca 0a00 	rsblt	sl, sl, #0
 8016e28:	f7e9 fa3e 	bl	80002a8 <__aeabi_dsub>
 8016e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8016e30:	4642      	mov	r2, r8
 8016e32:	464b      	mov	r3, r9
 8016e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e38:	f7e9 fa38 	bl	80002ac <__adddf3>
 8016e3c:	2000      	movs	r0, #0
 8016e3e:	a378      	add	r3, pc, #480	; (adr r3, 8017020 <__ieee754_pow+0x9b8>)
 8016e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e44:	4604      	mov	r4, r0
 8016e46:	460d      	mov	r5, r1
 8016e48:	f7e9 fbe6 	bl	8000618 <__aeabi_dmul>
 8016e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e50:	4606      	mov	r6, r0
 8016e52:	460f      	mov	r7, r1
 8016e54:	4620      	mov	r0, r4
 8016e56:	4629      	mov	r1, r5
 8016e58:	f7e9 fa26 	bl	80002a8 <__aeabi_dsub>
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	460b      	mov	r3, r1
 8016e60:	4640      	mov	r0, r8
 8016e62:	4649      	mov	r1, r9
 8016e64:	f7e9 fa20 	bl	80002a8 <__aeabi_dsub>
 8016e68:	a36f      	add	r3, pc, #444	; (adr r3, 8017028 <__ieee754_pow+0x9c0>)
 8016e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6e:	f7e9 fbd3 	bl	8000618 <__aeabi_dmul>
 8016e72:	a36f      	add	r3, pc, #444	; (adr r3, 8017030 <__ieee754_pow+0x9c8>)
 8016e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e78:	4680      	mov	r8, r0
 8016e7a:	4689      	mov	r9, r1
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	4629      	mov	r1, r5
 8016e80:	f7e9 fbca 	bl	8000618 <__aeabi_dmul>
 8016e84:	4602      	mov	r2, r0
 8016e86:	460b      	mov	r3, r1
 8016e88:	4640      	mov	r0, r8
 8016e8a:	4649      	mov	r1, r9
 8016e8c:	f7e9 fa0e 	bl	80002ac <__adddf3>
 8016e90:	4604      	mov	r4, r0
 8016e92:	460d      	mov	r5, r1
 8016e94:	4602      	mov	r2, r0
 8016e96:	460b      	mov	r3, r1
 8016e98:	4630      	mov	r0, r6
 8016e9a:	4639      	mov	r1, r7
 8016e9c:	f7e9 fa06 	bl	80002ac <__adddf3>
 8016ea0:	4632      	mov	r2, r6
 8016ea2:	463b      	mov	r3, r7
 8016ea4:	4680      	mov	r8, r0
 8016ea6:	4689      	mov	r9, r1
 8016ea8:	f7e9 f9fe 	bl	80002a8 <__aeabi_dsub>
 8016eac:	4602      	mov	r2, r0
 8016eae:	460b      	mov	r3, r1
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	4629      	mov	r1, r5
 8016eb4:	f7e9 f9f8 	bl	80002a8 <__aeabi_dsub>
 8016eb8:	4642      	mov	r2, r8
 8016eba:	4606      	mov	r6, r0
 8016ebc:	460f      	mov	r7, r1
 8016ebe:	464b      	mov	r3, r9
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	4649      	mov	r1, r9
 8016ec4:	f7e9 fba8 	bl	8000618 <__aeabi_dmul>
 8016ec8:	a35b      	add	r3, pc, #364	; (adr r3, 8017038 <__ieee754_pow+0x9d0>)
 8016eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ece:	4604      	mov	r4, r0
 8016ed0:	460d      	mov	r5, r1
 8016ed2:	f7e9 fba1 	bl	8000618 <__aeabi_dmul>
 8016ed6:	a35a      	add	r3, pc, #360	; (adr r3, 8017040 <__ieee754_pow+0x9d8>)
 8016ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016edc:	f7e9 f9e4 	bl	80002a8 <__aeabi_dsub>
 8016ee0:	4622      	mov	r2, r4
 8016ee2:	462b      	mov	r3, r5
 8016ee4:	f7e9 fb98 	bl	8000618 <__aeabi_dmul>
 8016ee8:	a357      	add	r3, pc, #348	; (adr r3, 8017048 <__ieee754_pow+0x9e0>)
 8016eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eee:	f7e9 f9dd 	bl	80002ac <__adddf3>
 8016ef2:	4622      	mov	r2, r4
 8016ef4:	462b      	mov	r3, r5
 8016ef6:	f7e9 fb8f 	bl	8000618 <__aeabi_dmul>
 8016efa:	a355      	add	r3, pc, #340	; (adr r3, 8017050 <__ieee754_pow+0x9e8>)
 8016efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f00:	f7e9 f9d2 	bl	80002a8 <__aeabi_dsub>
 8016f04:	4622      	mov	r2, r4
 8016f06:	462b      	mov	r3, r5
 8016f08:	f7e9 fb86 	bl	8000618 <__aeabi_dmul>
 8016f0c:	a352      	add	r3, pc, #328	; (adr r3, 8017058 <__ieee754_pow+0x9f0>)
 8016f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f12:	f7e9 f9cb 	bl	80002ac <__adddf3>
 8016f16:	4622      	mov	r2, r4
 8016f18:	462b      	mov	r3, r5
 8016f1a:	f7e9 fb7d 	bl	8000618 <__aeabi_dmul>
 8016f1e:	4602      	mov	r2, r0
 8016f20:	460b      	mov	r3, r1
 8016f22:	4640      	mov	r0, r8
 8016f24:	4649      	mov	r1, r9
 8016f26:	f7e9 f9bf 	bl	80002a8 <__aeabi_dsub>
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	460d      	mov	r5, r1
 8016f2e:	4602      	mov	r2, r0
 8016f30:	460b      	mov	r3, r1
 8016f32:	4640      	mov	r0, r8
 8016f34:	4649      	mov	r1, r9
 8016f36:	f7e9 fb6f 	bl	8000618 <__aeabi_dmul>
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8016f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f44:	4620      	mov	r0, r4
 8016f46:	4629      	mov	r1, r5
 8016f48:	f7e9 f9ae 	bl	80002a8 <__aeabi_dsub>
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	460b      	mov	r3, r1
 8016f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f54:	f7e9 fc8a 	bl	800086c <__aeabi_ddiv>
 8016f58:	4632      	mov	r2, r6
 8016f5a:	4604      	mov	r4, r0
 8016f5c:	460d      	mov	r5, r1
 8016f5e:	463b      	mov	r3, r7
 8016f60:	4640      	mov	r0, r8
 8016f62:	4649      	mov	r1, r9
 8016f64:	f7e9 fb58 	bl	8000618 <__aeabi_dmul>
 8016f68:	4632      	mov	r2, r6
 8016f6a:	463b      	mov	r3, r7
 8016f6c:	f7e9 f99e 	bl	80002ac <__adddf3>
 8016f70:	4602      	mov	r2, r0
 8016f72:	460b      	mov	r3, r1
 8016f74:	4620      	mov	r0, r4
 8016f76:	4629      	mov	r1, r5
 8016f78:	f7e9 f996 	bl	80002a8 <__aeabi_dsub>
 8016f7c:	4642      	mov	r2, r8
 8016f7e:	464b      	mov	r3, r9
 8016f80:	f7e9 f992 	bl	80002a8 <__aeabi_dsub>
 8016f84:	4602      	mov	r2, r0
 8016f86:	460b      	mov	r3, r1
 8016f88:	2000      	movs	r0, #0
 8016f8a:	4939      	ldr	r1, [pc, #228]	; (8017070 <__ieee754_pow+0xa08>)
 8016f8c:	f7e9 f98c 	bl	80002a8 <__aeabi_dsub>
 8016f90:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016f94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016f98:	4602      	mov	r2, r0
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	da2f      	bge.n	8016ffe <__ieee754_pow+0x996>
 8016f9e:	4650      	mov	r0, sl
 8016fa0:	ec43 2b10 	vmov	d0, r2, r3
 8016fa4:	f000 fc80 	bl	80178a8 <scalbn>
 8016fa8:	ec51 0b10 	vmov	r0, r1, d0
 8016fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fb0:	f7ff bbf1 	b.w	8016796 <__ieee754_pow+0x12e>
 8016fb4:	4b2f      	ldr	r3, [pc, #188]	; (8017074 <__ieee754_pow+0xa0c>)
 8016fb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016fba:	429e      	cmp	r6, r3
 8016fbc:	f77f af0c 	ble.w	8016dd8 <__ieee754_pow+0x770>
 8016fc0:	4b2d      	ldr	r3, [pc, #180]	; (8017078 <__ieee754_pow+0xa10>)
 8016fc2:	440b      	add	r3, r1
 8016fc4:	4303      	orrs	r3, r0
 8016fc6:	d00b      	beq.n	8016fe0 <__ieee754_pow+0x978>
 8016fc8:	a325      	add	r3, pc, #148	; (adr r3, 8017060 <__ieee754_pow+0x9f8>)
 8016fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fd2:	f7e9 fb21 	bl	8000618 <__aeabi_dmul>
 8016fd6:	a322      	add	r3, pc, #136	; (adr r3, 8017060 <__ieee754_pow+0x9f8>)
 8016fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fdc:	f7ff bbdb 	b.w	8016796 <__ieee754_pow+0x12e>
 8016fe0:	4622      	mov	r2, r4
 8016fe2:	462b      	mov	r3, r5
 8016fe4:	f7e9 f960 	bl	80002a8 <__aeabi_dsub>
 8016fe8:	4642      	mov	r2, r8
 8016fea:	464b      	mov	r3, r9
 8016fec:	f7e9 fd9a 	bl	8000b24 <__aeabi_dcmpge>
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	f43f aef1 	beq.w	8016dd8 <__ieee754_pow+0x770>
 8016ff6:	e7e7      	b.n	8016fc8 <__ieee754_pow+0x960>
 8016ff8:	f04f 0a00 	mov.w	sl, #0
 8016ffc:	e718      	b.n	8016e30 <__ieee754_pow+0x7c8>
 8016ffe:	4621      	mov	r1, r4
 8017000:	e7d4      	b.n	8016fac <__ieee754_pow+0x944>
 8017002:	2000      	movs	r0, #0
 8017004:	491a      	ldr	r1, [pc, #104]	; (8017070 <__ieee754_pow+0xa08>)
 8017006:	f7ff bb8f 	b.w	8016728 <__ieee754_pow+0xc0>
 801700a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801700e:	f7ff bb8b 	b.w	8016728 <__ieee754_pow+0xc0>
 8017012:	4630      	mov	r0, r6
 8017014:	4639      	mov	r1, r7
 8017016:	f7ff bb87 	b.w	8016728 <__ieee754_pow+0xc0>
 801701a:	4693      	mov	fp, r2
 801701c:	f7ff bb98 	b.w	8016750 <__ieee754_pow+0xe8>
 8017020:	00000000 	.word	0x00000000
 8017024:	3fe62e43 	.word	0x3fe62e43
 8017028:	fefa39ef 	.word	0xfefa39ef
 801702c:	3fe62e42 	.word	0x3fe62e42
 8017030:	0ca86c39 	.word	0x0ca86c39
 8017034:	be205c61 	.word	0xbe205c61
 8017038:	72bea4d0 	.word	0x72bea4d0
 801703c:	3e663769 	.word	0x3e663769
 8017040:	c5d26bf1 	.word	0xc5d26bf1
 8017044:	3ebbbd41 	.word	0x3ebbbd41
 8017048:	af25de2c 	.word	0xaf25de2c
 801704c:	3f11566a 	.word	0x3f11566a
 8017050:	16bebd93 	.word	0x16bebd93
 8017054:	3f66c16c 	.word	0x3f66c16c
 8017058:	5555553e 	.word	0x5555553e
 801705c:	3fc55555 	.word	0x3fc55555
 8017060:	c2f8f359 	.word	0xc2f8f359
 8017064:	01a56e1f 	.word	0x01a56e1f
 8017068:	3fe00000 	.word	0x3fe00000
 801706c:	000fffff 	.word	0x000fffff
 8017070:	3ff00000 	.word	0x3ff00000
 8017074:	4090cbff 	.word	0x4090cbff
 8017078:	3f6f3400 	.word	0x3f6f3400
 801707c:	652b82fe 	.word	0x652b82fe
 8017080:	3c971547 	.word	0x3c971547

08017084 <__ieee754_sqrt>:
 8017084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017088:	4955      	ldr	r1, [pc, #340]	; (80171e0 <__ieee754_sqrt+0x15c>)
 801708a:	ec55 4b10 	vmov	r4, r5, d0
 801708e:	43a9      	bics	r1, r5
 8017090:	462b      	mov	r3, r5
 8017092:	462a      	mov	r2, r5
 8017094:	d112      	bne.n	80170bc <__ieee754_sqrt+0x38>
 8017096:	ee10 2a10 	vmov	r2, s0
 801709a:	ee10 0a10 	vmov	r0, s0
 801709e:	4629      	mov	r1, r5
 80170a0:	f7e9 faba 	bl	8000618 <__aeabi_dmul>
 80170a4:	4602      	mov	r2, r0
 80170a6:	460b      	mov	r3, r1
 80170a8:	4620      	mov	r0, r4
 80170aa:	4629      	mov	r1, r5
 80170ac:	f7e9 f8fe 	bl	80002ac <__adddf3>
 80170b0:	4604      	mov	r4, r0
 80170b2:	460d      	mov	r5, r1
 80170b4:	ec45 4b10 	vmov	d0, r4, r5
 80170b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170bc:	2d00      	cmp	r5, #0
 80170be:	ee10 0a10 	vmov	r0, s0
 80170c2:	4621      	mov	r1, r4
 80170c4:	dc0f      	bgt.n	80170e6 <__ieee754_sqrt+0x62>
 80170c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80170ca:	4330      	orrs	r0, r6
 80170cc:	d0f2      	beq.n	80170b4 <__ieee754_sqrt+0x30>
 80170ce:	b155      	cbz	r5, 80170e6 <__ieee754_sqrt+0x62>
 80170d0:	ee10 2a10 	vmov	r2, s0
 80170d4:	4620      	mov	r0, r4
 80170d6:	4629      	mov	r1, r5
 80170d8:	f7e9 f8e6 	bl	80002a8 <__aeabi_dsub>
 80170dc:	4602      	mov	r2, r0
 80170de:	460b      	mov	r3, r1
 80170e0:	f7e9 fbc4 	bl	800086c <__aeabi_ddiv>
 80170e4:	e7e4      	b.n	80170b0 <__ieee754_sqrt+0x2c>
 80170e6:	151b      	asrs	r3, r3, #20
 80170e8:	d073      	beq.n	80171d2 <__ieee754_sqrt+0x14e>
 80170ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80170ee:	07dd      	lsls	r5, r3, #31
 80170f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80170f4:	bf48      	it	mi
 80170f6:	0fc8      	lsrmi	r0, r1, #31
 80170f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80170fc:	bf44      	itt	mi
 80170fe:	0049      	lslmi	r1, r1, #1
 8017100:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017104:	2500      	movs	r5, #0
 8017106:	1058      	asrs	r0, r3, #1
 8017108:	0fcb      	lsrs	r3, r1, #31
 801710a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801710e:	0049      	lsls	r1, r1, #1
 8017110:	2316      	movs	r3, #22
 8017112:	462c      	mov	r4, r5
 8017114:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017118:	19a7      	adds	r7, r4, r6
 801711a:	4297      	cmp	r7, r2
 801711c:	bfde      	ittt	le
 801711e:	19bc      	addle	r4, r7, r6
 8017120:	1bd2      	suble	r2, r2, r7
 8017122:	19ad      	addle	r5, r5, r6
 8017124:	0fcf      	lsrs	r7, r1, #31
 8017126:	3b01      	subs	r3, #1
 8017128:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801712c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017130:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017134:	d1f0      	bne.n	8017118 <__ieee754_sqrt+0x94>
 8017136:	f04f 0c20 	mov.w	ip, #32
 801713a:	469e      	mov	lr, r3
 801713c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017140:	42a2      	cmp	r2, r4
 8017142:	eb06 070e 	add.w	r7, r6, lr
 8017146:	dc02      	bgt.n	801714e <__ieee754_sqrt+0xca>
 8017148:	d112      	bne.n	8017170 <__ieee754_sqrt+0xec>
 801714a:	428f      	cmp	r7, r1
 801714c:	d810      	bhi.n	8017170 <__ieee754_sqrt+0xec>
 801714e:	2f00      	cmp	r7, #0
 8017150:	eb07 0e06 	add.w	lr, r7, r6
 8017154:	da42      	bge.n	80171dc <__ieee754_sqrt+0x158>
 8017156:	f1be 0f00 	cmp.w	lr, #0
 801715a:	db3f      	blt.n	80171dc <__ieee754_sqrt+0x158>
 801715c:	f104 0801 	add.w	r8, r4, #1
 8017160:	1b12      	subs	r2, r2, r4
 8017162:	428f      	cmp	r7, r1
 8017164:	bf88      	it	hi
 8017166:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801716a:	1bc9      	subs	r1, r1, r7
 801716c:	4433      	add	r3, r6
 801716e:	4644      	mov	r4, r8
 8017170:	0052      	lsls	r2, r2, #1
 8017172:	f1bc 0c01 	subs.w	ip, ip, #1
 8017176:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801717a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801717e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017182:	d1dd      	bne.n	8017140 <__ieee754_sqrt+0xbc>
 8017184:	430a      	orrs	r2, r1
 8017186:	d006      	beq.n	8017196 <__ieee754_sqrt+0x112>
 8017188:	1c5c      	adds	r4, r3, #1
 801718a:	bf13      	iteet	ne
 801718c:	3301      	addne	r3, #1
 801718e:	3501      	addeq	r5, #1
 8017190:	4663      	moveq	r3, ip
 8017192:	f023 0301 	bicne.w	r3, r3, #1
 8017196:	106a      	asrs	r2, r5, #1
 8017198:	085b      	lsrs	r3, r3, #1
 801719a:	07e9      	lsls	r1, r5, #31
 801719c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80171a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80171a4:	bf48      	it	mi
 80171a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80171aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80171ae:	461c      	mov	r4, r3
 80171b0:	e780      	b.n	80170b4 <__ieee754_sqrt+0x30>
 80171b2:	0aca      	lsrs	r2, r1, #11
 80171b4:	3815      	subs	r0, #21
 80171b6:	0549      	lsls	r1, r1, #21
 80171b8:	2a00      	cmp	r2, #0
 80171ba:	d0fa      	beq.n	80171b2 <__ieee754_sqrt+0x12e>
 80171bc:	02d6      	lsls	r6, r2, #11
 80171be:	d50a      	bpl.n	80171d6 <__ieee754_sqrt+0x152>
 80171c0:	f1c3 0420 	rsb	r4, r3, #32
 80171c4:	fa21 f404 	lsr.w	r4, r1, r4
 80171c8:	1e5d      	subs	r5, r3, #1
 80171ca:	4099      	lsls	r1, r3
 80171cc:	4322      	orrs	r2, r4
 80171ce:	1b43      	subs	r3, r0, r5
 80171d0:	e78b      	b.n	80170ea <__ieee754_sqrt+0x66>
 80171d2:	4618      	mov	r0, r3
 80171d4:	e7f0      	b.n	80171b8 <__ieee754_sqrt+0x134>
 80171d6:	0052      	lsls	r2, r2, #1
 80171d8:	3301      	adds	r3, #1
 80171da:	e7ef      	b.n	80171bc <__ieee754_sqrt+0x138>
 80171dc:	46a0      	mov	r8, r4
 80171de:	e7bf      	b.n	8017160 <__ieee754_sqrt+0xdc>
 80171e0:	7ff00000 	.word	0x7ff00000

080171e4 <__ieee754_powf>:
 80171e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e8:	ee10 5a90 	vmov	r5, s1
 80171ec:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80171f0:	ed2d 8b02 	vpush	{d8}
 80171f4:	eeb0 8a40 	vmov.f32	s16, s0
 80171f8:	eef0 8a60 	vmov.f32	s17, s1
 80171fc:	f000 8293 	beq.w	8017726 <__ieee754_powf+0x542>
 8017200:	ee10 8a10 	vmov	r8, s0
 8017204:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8017208:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801720c:	dc06      	bgt.n	801721c <__ieee754_powf+0x38>
 801720e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017212:	dd0a      	ble.n	801722a <__ieee754_powf+0x46>
 8017214:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017218:	f000 8285 	beq.w	8017726 <__ieee754_powf+0x542>
 801721c:	ecbd 8b02 	vpop	{d8}
 8017220:	48d9      	ldr	r0, [pc, #868]	; (8017588 <__ieee754_powf+0x3a4>)
 8017222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017226:	f000 bbc7 	b.w	80179b8 <nanf>
 801722a:	f1b8 0f00 	cmp.w	r8, #0
 801722e:	da1d      	bge.n	801726c <__ieee754_powf+0x88>
 8017230:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8017234:	da2c      	bge.n	8017290 <__ieee754_powf+0xac>
 8017236:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801723a:	db30      	blt.n	801729e <__ieee754_powf+0xba>
 801723c:	15fb      	asrs	r3, r7, #23
 801723e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017242:	fa47 f603 	asr.w	r6, r7, r3
 8017246:	fa06 f303 	lsl.w	r3, r6, r3
 801724a:	42bb      	cmp	r3, r7
 801724c:	d127      	bne.n	801729e <__ieee754_powf+0xba>
 801724e:	f006 0601 	and.w	r6, r6, #1
 8017252:	f1c6 0602 	rsb	r6, r6, #2
 8017256:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801725a:	d122      	bne.n	80172a2 <__ieee754_powf+0xbe>
 801725c:	2d00      	cmp	r5, #0
 801725e:	f280 8268 	bge.w	8017732 <__ieee754_powf+0x54e>
 8017262:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017266:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801726a:	e00d      	b.n	8017288 <__ieee754_powf+0xa4>
 801726c:	2600      	movs	r6, #0
 801726e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017272:	d1f0      	bne.n	8017256 <__ieee754_powf+0x72>
 8017274:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017278:	f000 8255 	beq.w	8017726 <__ieee754_powf+0x542>
 801727c:	dd0a      	ble.n	8017294 <__ieee754_powf+0xb0>
 801727e:	2d00      	cmp	r5, #0
 8017280:	f280 8254 	bge.w	801772c <__ieee754_powf+0x548>
 8017284:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801758c <__ieee754_powf+0x3a8>
 8017288:	ecbd 8b02 	vpop	{d8}
 801728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017290:	2602      	movs	r6, #2
 8017292:	e7ec      	b.n	801726e <__ieee754_powf+0x8a>
 8017294:	2d00      	cmp	r5, #0
 8017296:	daf5      	bge.n	8017284 <__ieee754_powf+0xa0>
 8017298:	eeb1 0a68 	vneg.f32	s0, s17
 801729c:	e7f4      	b.n	8017288 <__ieee754_powf+0xa4>
 801729e:	2600      	movs	r6, #0
 80172a0:	e7d9      	b.n	8017256 <__ieee754_powf+0x72>
 80172a2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80172a6:	d102      	bne.n	80172ae <__ieee754_powf+0xca>
 80172a8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80172ac:	e7ec      	b.n	8017288 <__ieee754_powf+0xa4>
 80172ae:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80172b2:	eeb0 0a48 	vmov.f32	s0, s16
 80172b6:	d108      	bne.n	80172ca <__ieee754_powf+0xe6>
 80172b8:	f1b8 0f00 	cmp.w	r8, #0
 80172bc:	db05      	blt.n	80172ca <__ieee754_powf+0xe6>
 80172be:	ecbd 8b02 	vpop	{d8}
 80172c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172c6:	f000 ba4d 	b.w	8017764 <__ieee754_sqrtf>
 80172ca:	f000 fb63 	bl	8017994 <fabsf>
 80172ce:	b124      	cbz	r4, 80172da <__ieee754_powf+0xf6>
 80172d0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80172d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80172d8:	d117      	bne.n	801730a <__ieee754_powf+0x126>
 80172da:	2d00      	cmp	r5, #0
 80172dc:	bfbc      	itt	lt
 80172de:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80172e2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80172e6:	f1b8 0f00 	cmp.w	r8, #0
 80172ea:	dacd      	bge.n	8017288 <__ieee754_powf+0xa4>
 80172ec:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80172f0:	ea54 0306 	orrs.w	r3, r4, r6
 80172f4:	d104      	bne.n	8017300 <__ieee754_powf+0x11c>
 80172f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80172fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80172fe:	e7c3      	b.n	8017288 <__ieee754_powf+0xa4>
 8017300:	2e01      	cmp	r6, #1
 8017302:	d1c1      	bne.n	8017288 <__ieee754_powf+0xa4>
 8017304:	eeb1 0a40 	vneg.f32	s0, s0
 8017308:	e7be      	b.n	8017288 <__ieee754_powf+0xa4>
 801730a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801730e:	3801      	subs	r0, #1
 8017310:	ea56 0300 	orrs.w	r3, r6, r0
 8017314:	d104      	bne.n	8017320 <__ieee754_powf+0x13c>
 8017316:	ee38 8a48 	vsub.f32	s16, s16, s16
 801731a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801731e:	e7b3      	b.n	8017288 <__ieee754_powf+0xa4>
 8017320:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8017324:	dd6d      	ble.n	8017402 <__ieee754_powf+0x21e>
 8017326:	4b9a      	ldr	r3, [pc, #616]	; (8017590 <__ieee754_powf+0x3ac>)
 8017328:	429c      	cmp	r4, r3
 801732a:	dc06      	bgt.n	801733a <__ieee754_powf+0x156>
 801732c:	2d00      	cmp	r5, #0
 801732e:	daa9      	bge.n	8017284 <__ieee754_powf+0xa0>
 8017330:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8017594 <__ieee754_powf+0x3b0>
 8017334:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017338:	e7a6      	b.n	8017288 <__ieee754_powf+0xa4>
 801733a:	4b97      	ldr	r3, [pc, #604]	; (8017598 <__ieee754_powf+0x3b4>)
 801733c:	429c      	cmp	r4, r3
 801733e:	dd02      	ble.n	8017346 <__ieee754_powf+0x162>
 8017340:	2d00      	cmp	r5, #0
 8017342:	dcf5      	bgt.n	8017330 <__ieee754_powf+0x14c>
 8017344:	e79e      	b.n	8017284 <__ieee754_powf+0xa0>
 8017346:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801734a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801734e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801759c <__ieee754_powf+0x3b8>
 8017352:	eef1 6a40 	vneg.f32	s13, s0
 8017356:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801735a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801735e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017362:	eee7 7a40 	vfms.f32	s15, s14, s0
 8017366:	ee60 0a00 	vmul.f32	s1, s0, s0
 801736a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80175a0 <__ieee754_powf+0x3bc>
 801736e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017372:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80175a4 <__ieee754_powf+0x3c0>
 8017376:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801737a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801737e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80175a8 <__ieee754_powf+0x3c4>
 8017382:	eeb0 6a67 	vmov.f32	s12, s15
 8017386:	eea0 6a07 	vfma.f32	s12, s0, s14
 801738a:	ee16 3a10 	vmov	r3, s12
 801738e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017392:	f023 030f 	bic.w	r3, r3, #15
 8017396:	ee00 3a90 	vmov	s1, r3
 801739a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801739e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80173a2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80173a6:	f025 050f 	bic.w	r5, r5, #15
 80173aa:	ee07 5a10 	vmov	s14, r5
 80173ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80173b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80173b6:	ee07 3a90 	vmov	s15, r3
 80173ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 80173be:	3e01      	subs	r6, #1
 80173c0:	ea56 0200 	orrs.w	r2, r6, r0
 80173c4:	ee07 5a10 	vmov	s14, r5
 80173c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80173d0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80173d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80173d8:	ee17 4a10 	vmov	r4, s14
 80173dc:	bf08      	it	eq
 80173de:	eeb0 8a40 	vmoveq.f32	s16, s0
 80173e2:	2c00      	cmp	r4, #0
 80173e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80173e8:	f340 8184 	ble.w	80176f4 <__ieee754_powf+0x510>
 80173ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80173f0:	f340 80fc 	ble.w	80175ec <__ieee754_powf+0x408>
 80173f4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8017594 <__ieee754_powf+0x3b0>
 80173f8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80173fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017400:	e742      	b.n	8017288 <__ieee754_powf+0xa4>
 8017402:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8017406:	bfbf      	itttt	lt
 8017408:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80175ac <__ieee754_powf+0x3c8>
 801740c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017410:	f06f 0217 	mvnlt.w	r2, #23
 8017414:	ee17 4a90 	vmovlt	r4, s15
 8017418:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801741c:	bfa8      	it	ge
 801741e:	2200      	movge	r2, #0
 8017420:	3b7f      	subs	r3, #127	; 0x7f
 8017422:	4413      	add	r3, r2
 8017424:	4a62      	ldr	r2, [pc, #392]	; (80175b0 <__ieee754_powf+0x3cc>)
 8017426:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801742a:	4294      	cmp	r4, r2
 801742c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8017430:	dd06      	ble.n	8017440 <__ieee754_powf+0x25c>
 8017432:	4a60      	ldr	r2, [pc, #384]	; (80175b4 <__ieee754_powf+0x3d0>)
 8017434:	4294      	cmp	r4, r2
 8017436:	f340 80a5 	ble.w	8017584 <__ieee754_powf+0x3a0>
 801743a:	3301      	adds	r3, #1
 801743c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8017440:	2400      	movs	r4, #0
 8017442:	4a5d      	ldr	r2, [pc, #372]	; (80175b8 <__ieee754_powf+0x3d4>)
 8017444:	00a7      	lsls	r7, r4, #2
 8017446:	443a      	add	r2, r7
 8017448:	ee07 1a90 	vmov	s15, r1
 801744c:	ed92 7a00 	vldr	s14, [r2]
 8017450:	4a5a      	ldr	r2, [pc, #360]	; (80175bc <__ieee754_powf+0x3d8>)
 8017452:	ee37 6a27 	vadd.f32	s12, s14, s15
 8017456:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801745a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801745e:	1049      	asrs	r1, r1, #1
 8017460:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8017464:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8017468:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801746c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8017470:	ee06 1a10 	vmov	s12, r1
 8017474:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8017478:	ee14 ca90 	vmov	ip, s9
 801747c:	ea02 0c0c 	and.w	ip, r2, ip
 8017480:	ee05 ca10 	vmov	s10, ip
 8017484:	eeb1 4a45 	vneg.f32	s8, s10
 8017488:	eee4 5a06 	vfma.f32	s11, s8, s12
 801748c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017490:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80175c0 <__ieee754_powf+0x3dc>
 8017494:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017498:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801749c:	eee4 5a06 	vfma.f32	s11, s8, s12
 80174a0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80174a4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80174a8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80175c4 <__ieee754_powf+0x3e0>
 80174ac:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80174b0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80175c8 <__ieee754_powf+0x3e4>
 80174b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80174b8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801759c <__ieee754_powf+0x3b8>
 80174bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80174c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80175cc <__ieee754_powf+0x3e8>
 80174c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80174c8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80175d0 <__ieee754_powf+0x3ec>
 80174cc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80174d0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80174d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80174d8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80174dc:	eef0 7a65 	vmov.f32	s15, s11
 80174e0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80174e4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80174e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80174ec:	ee17 1a90 	vmov	r1, s15
 80174f0:	4011      	ands	r1, r2
 80174f2:	ee07 1a90 	vmov	s15, r1
 80174f6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80174fa:	eddf 5a36 	vldr	s11, [pc, #216]	; 80175d4 <__ieee754_powf+0x3f0>
 80174fe:	eea4 7a05 	vfma.f32	s14, s8, s10
 8017502:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8017506:	ee27 7a24 	vmul.f32	s14, s14, s9
 801750a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801750e:	eeb0 6a47 	vmov.f32	s12, s14
 8017512:	eea5 6a27 	vfma.f32	s12, s10, s15
 8017516:	ee16 1a10 	vmov	r1, s12
 801751a:	4011      	ands	r1, r2
 801751c:	ee06 1a90 	vmov	s13, r1
 8017520:	eee4 6a27 	vfma.f32	s13, s8, s15
 8017524:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80175d8 <__ieee754_powf+0x3f4>
 8017528:	ee37 7a66 	vsub.f32	s14, s14, s13
 801752c:	ee06 1a10 	vmov	s12, r1
 8017530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017534:	eddf 7a29 	vldr	s15, [pc, #164]	; 80175dc <__ieee754_powf+0x3f8>
 8017538:	4929      	ldr	r1, [pc, #164]	; (80175e0 <__ieee754_powf+0x3fc>)
 801753a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801753e:	4439      	add	r1, r7
 8017540:	edd1 7a00 	vldr	s15, [r1]
 8017544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017548:	ee07 3a90 	vmov	s15, r3
 801754c:	eef0 0a47 	vmov.f32	s1, s14
 8017550:	4b24      	ldr	r3, [pc, #144]	; (80175e4 <__ieee754_powf+0x400>)
 8017552:	eee6 0a25 	vfma.f32	s1, s12, s11
 8017556:	443b      	add	r3, r7
 8017558:	ed93 5a00 	vldr	s10, [r3]
 801755c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017560:	ee70 0a85 	vadd.f32	s1, s1, s10
 8017564:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8017568:	ee17 3a90 	vmov	r3, s15
 801756c:	4013      	ands	r3, r2
 801756e:	ee07 3a90 	vmov	s15, r3
 8017572:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017576:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801757a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801757e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017582:	e70e      	b.n	80173a2 <__ieee754_powf+0x1be>
 8017584:	2401      	movs	r4, #1
 8017586:	e75c      	b.n	8017442 <__ieee754_powf+0x25e>
 8017588:	08017fb7 	.word	0x08017fb7
 801758c:	00000000 	.word	0x00000000
 8017590:	3f7ffff7 	.word	0x3f7ffff7
 8017594:	7149f2ca 	.word	0x7149f2ca
 8017598:	3f800007 	.word	0x3f800007
 801759c:	3eaaaaab 	.word	0x3eaaaaab
 80175a0:	36eca570 	.word	0x36eca570
 80175a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80175a8:	3fb8aa00 	.word	0x3fb8aa00
 80175ac:	4b800000 	.word	0x4b800000
 80175b0:	001cc471 	.word	0x001cc471
 80175b4:	005db3d6 	.word	0x005db3d6
 80175b8:	08018198 	.word	0x08018198
 80175bc:	fffff000 	.word	0xfffff000
 80175c0:	3e6c3255 	.word	0x3e6c3255
 80175c4:	3e53f142 	.word	0x3e53f142
 80175c8:	3e8ba305 	.word	0x3e8ba305
 80175cc:	3edb6db7 	.word	0x3edb6db7
 80175d0:	3f19999a 	.word	0x3f19999a
 80175d4:	3f763800 	.word	0x3f763800
 80175d8:	3f76384f 	.word	0x3f76384f
 80175dc:	369dc3a0 	.word	0x369dc3a0
 80175e0:	080181a8 	.word	0x080181a8
 80175e4:	080181a0 	.word	0x080181a0
 80175e8:	3338aa3c 	.word	0x3338aa3c
 80175ec:	f040 8092 	bne.w	8017714 <__ieee754_powf+0x530>
 80175f0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80175e8 <__ieee754_powf+0x404>
 80175f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175f8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80175fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017604:	f73f aef6 	bgt.w	80173f4 <__ieee754_powf+0x210>
 8017608:	15db      	asrs	r3, r3, #23
 801760a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801760e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8017612:	4103      	asrs	r3, r0
 8017614:	4423      	add	r3, r4
 8017616:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801761a:	4947      	ldr	r1, [pc, #284]	; (8017738 <__ieee754_powf+0x554>)
 801761c:	3a7f      	subs	r2, #127	; 0x7f
 801761e:	4111      	asrs	r1, r2
 8017620:	ea23 0101 	bic.w	r1, r3, r1
 8017624:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017628:	ee07 1a10 	vmov	s14, r1
 801762c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017630:	f1c2 0217 	rsb	r2, r2, #23
 8017634:	4110      	asrs	r0, r2
 8017636:	2c00      	cmp	r4, #0
 8017638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801763c:	bfb8      	it	lt
 801763e:	4240      	neglt	r0, r0
 8017640:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8017644:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801773c <__ieee754_powf+0x558>
 8017648:	ee17 3a10 	vmov	r3, s14
 801764c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017650:	f023 030f 	bic.w	r3, r3, #15
 8017654:	ee07 3a10 	vmov	s14, r3
 8017658:	ee77 7a67 	vsub.f32	s15, s14, s15
 801765c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017660:	eddf 7a37 	vldr	s15, [pc, #220]	; 8017740 <__ieee754_powf+0x55c>
 8017664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017668:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801766c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8017744 <__ieee754_powf+0x560>
 8017670:	eeb0 0a67 	vmov.f32	s0, s15
 8017674:	eea7 0a26 	vfma.f32	s0, s14, s13
 8017678:	eeb0 6a40 	vmov.f32	s12, s0
 801767c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8017680:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017684:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017688:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8017748 <__ieee754_powf+0x564>
 801768c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801774c <__ieee754_powf+0x568>
 8017690:	eea7 6a26 	vfma.f32	s12, s14, s13
 8017694:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8017750 <__ieee754_powf+0x56c>
 8017698:	eee6 6a07 	vfma.f32	s13, s12, s14
 801769c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8017754 <__ieee754_powf+0x570>
 80176a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80176a4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8017758 <__ieee754_powf+0x574>
 80176a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80176ac:	eeb0 6a40 	vmov.f32	s12, s0
 80176b0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80176b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80176b8:	eeb0 7a46 	vmov.f32	s14, s12
 80176bc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80176c0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80176c4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80176c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80176cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80176d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80176d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80176dc:	ee10 3a10 	vmov	r3, s0
 80176e0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80176e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80176e8:	da1a      	bge.n	8017720 <__ieee754_powf+0x53c>
 80176ea:	f000 f9c5 	bl	8017a78 <scalbnf>
 80176ee:	ee20 0a08 	vmul.f32	s0, s0, s16
 80176f2:	e5c9      	b.n	8017288 <__ieee754_powf+0xa4>
 80176f4:	4a19      	ldr	r2, [pc, #100]	; (801775c <__ieee754_powf+0x578>)
 80176f6:	4293      	cmp	r3, r2
 80176f8:	dd02      	ble.n	8017700 <__ieee754_powf+0x51c>
 80176fa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8017760 <__ieee754_powf+0x57c>
 80176fe:	e67b      	b.n	80173f8 <__ieee754_powf+0x214>
 8017700:	d108      	bne.n	8017714 <__ieee754_powf+0x530>
 8017702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017706:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770e:	f6ff af7b 	blt.w	8017608 <__ieee754_powf+0x424>
 8017712:	e7f2      	b.n	80176fa <__ieee754_powf+0x516>
 8017714:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8017718:	f73f af76 	bgt.w	8017608 <__ieee754_powf+0x424>
 801771c:	2000      	movs	r0, #0
 801771e:	e78f      	b.n	8017640 <__ieee754_powf+0x45c>
 8017720:	ee00 3a10 	vmov	s0, r3
 8017724:	e7e3      	b.n	80176ee <__ieee754_powf+0x50a>
 8017726:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801772a:	e5ad      	b.n	8017288 <__ieee754_powf+0xa4>
 801772c:	eeb0 0a68 	vmov.f32	s0, s17
 8017730:	e5aa      	b.n	8017288 <__ieee754_powf+0xa4>
 8017732:	eeb0 0a48 	vmov.f32	s0, s16
 8017736:	e5a7      	b.n	8017288 <__ieee754_powf+0xa4>
 8017738:	007fffff 	.word	0x007fffff
 801773c:	3f317218 	.word	0x3f317218
 8017740:	35bfbe8c 	.word	0x35bfbe8c
 8017744:	3f317200 	.word	0x3f317200
 8017748:	3331bb4c 	.word	0x3331bb4c
 801774c:	b5ddea0e 	.word	0xb5ddea0e
 8017750:	388ab355 	.word	0x388ab355
 8017754:	bb360b61 	.word	0xbb360b61
 8017758:	3e2aaaab 	.word	0x3e2aaaab
 801775c:	43160000 	.word	0x43160000
 8017760:	0da24260 	.word	0x0da24260

08017764 <__ieee754_sqrtf>:
 8017764:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017768:	4770      	bx	lr

0801776a <fabs>:
 801776a:	ec51 0b10 	vmov	r0, r1, d0
 801776e:	ee10 2a10 	vmov	r2, s0
 8017772:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017776:	ec43 2b10 	vmov	d0, r2, r3
 801777a:	4770      	bx	lr

0801777c <finite>:
 801777c:	ee10 3a90 	vmov	r3, s1
 8017780:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017784:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017788:	0fc0      	lsrs	r0, r0, #31
 801778a:	4770      	bx	lr

0801778c <matherr>:
 801778c:	2000      	movs	r0, #0
 801778e:	4770      	bx	lr

08017790 <nan>:
 8017790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017798 <nan+0x8>
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	00000000 	.word	0x00000000
 801779c:	7ff80000 	.word	0x7ff80000

080177a0 <rint>:
 80177a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177a2:	ec51 0b10 	vmov	r0, r1, d0
 80177a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80177aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80177ae:	2e13      	cmp	r6, #19
 80177b0:	460b      	mov	r3, r1
 80177b2:	ee10 4a10 	vmov	r4, s0
 80177b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80177ba:	dc56      	bgt.n	801786a <rint+0xca>
 80177bc:	2e00      	cmp	r6, #0
 80177be:	da2b      	bge.n	8017818 <rint+0x78>
 80177c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80177c4:	4302      	orrs	r2, r0
 80177c6:	d023      	beq.n	8017810 <rint+0x70>
 80177c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80177cc:	4302      	orrs	r2, r0
 80177ce:	4254      	negs	r4, r2
 80177d0:	4314      	orrs	r4, r2
 80177d2:	0c4b      	lsrs	r3, r1, #17
 80177d4:	0b24      	lsrs	r4, r4, #12
 80177d6:	045b      	lsls	r3, r3, #17
 80177d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80177dc:	ea44 0103 	orr.w	r1, r4, r3
 80177e0:	460b      	mov	r3, r1
 80177e2:	492f      	ldr	r1, [pc, #188]	; (80178a0 <rint+0x100>)
 80177e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80177e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80177ec:	4602      	mov	r2, r0
 80177ee:	4639      	mov	r1, r7
 80177f0:	4630      	mov	r0, r6
 80177f2:	f7e8 fd5b 	bl	80002ac <__adddf3>
 80177f6:	e9cd 0100 	strd	r0, r1, [sp]
 80177fa:	463b      	mov	r3, r7
 80177fc:	4632      	mov	r2, r6
 80177fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017802:	f7e8 fd51 	bl	80002a8 <__aeabi_dsub>
 8017806:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801780a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801780e:	4639      	mov	r1, r7
 8017810:	ec41 0b10 	vmov	d0, r0, r1
 8017814:	b003      	add	sp, #12
 8017816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017818:	4a22      	ldr	r2, [pc, #136]	; (80178a4 <rint+0x104>)
 801781a:	4132      	asrs	r2, r6
 801781c:	ea01 0702 	and.w	r7, r1, r2
 8017820:	4307      	orrs	r7, r0
 8017822:	d0f5      	beq.n	8017810 <rint+0x70>
 8017824:	0852      	lsrs	r2, r2, #1
 8017826:	4011      	ands	r1, r2
 8017828:	430c      	orrs	r4, r1
 801782a:	d00b      	beq.n	8017844 <rint+0xa4>
 801782c:	ea23 0202 	bic.w	r2, r3, r2
 8017830:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017834:	2e13      	cmp	r6, #19
 8017836:	fa43 f306 	asr.w	r3, r3, r6
 801783a:	bf0c      	ite	eq
 801783c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8017840:	2400      	movne	r4, #0
 8017842:	4313      	orrs	r3, r2
 8017844:	4916      	ldr	r1, [pc, #88]	; (80178a0 <rint+0x100>)
 8017846:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801784a:	4622      	mov	r2, r4
 801784c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017850:	4620      	mov	r0, r4
 8017852:	4629      	mov	r1, r5
 8017854:	f7e8 fd2a 	bl	80002ac <__adddf3>
 8017858:	e9cd 0100 	strd	r0, r1, [sp]
 801785c:	4622      	mov	r2, r4
 801785e:	462b      	mov	r3, r5
 8017860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017864:	f7e8 fd20 	bl	80002a8 <__aeabi_dsub>
 8017868:	e7d2      	b.n	8017810 <rint+0x70>
 801786a:	2e33      	cmp	r6, #51	; 0x33
 801786c:	dd07      	ble.n	801787e <rint+0xde>
 801786e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017872:	d1cd      	bne.n	8017810 <rint+0x70>
 8017874:	ee10 2a10 	vmov	r2, s0
 8017878:	f7e8 fd18 	bl	80002ac <__adddf3>
 801787c:	e7c8      	b.n	8017810 <rint+0x70>
 801787e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017886:	40f2      	lsrs	r2, r6
 8017888:	4210      	tst	r0, r2
 801788a:	d0c1      	beq.n	8017810 <rint+0x70>
 801788c:	0852      	lsrs	r2, r2, #1
 801788e:	4210      	tst	r0, r2
 8017890:	bf1f      	itttt	ne
 8017892:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017896:	ea20 0202 	bicne.w	r2, r0, r2
 801789a:	4134      	asrne	r4, r6
 801789c:	4314      	orrne	r4, r2
 801789e:	e7d1      	b.n	8017844 <rint+0xa4>
 80178a0:	080181b0 	.word	0x080181b0
 80178a4:	000fffff 	.word	0x000fffff

080178a8 <scalbn>:
 80178a8:	b570      	push	{r4, r5, r6, lr}
 80178aa:	ec55 4b10 	vmov	r4, r5, d0
 80178ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80178b2:	4606      	mov	r6, r0
 80178b4:	462b      	mov	r3, r5
 80178b6:	b9aa      	cbnz	r2, 80178e4 <scalbn+0x3c>
 80178b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80178bc:	4323      	orrs	r3, r4
 80178be:	d03b      	beq.n	8017938 <scalbn+0x90>
 80178c0:	4b31      	ldr	r3, [pc, #196]	; (8017988 <scalbn+0xe0>)
 80178c2:	4629      	mov	r1, r5
 80178c4:	2200      	movs	r2, #0
 80178c6:	ee10 0a10 	vmov	r0, s0
 80178ca:	f7e8 fea5 	bl	8000618 <__aeabi_dmul>
 80178ce:	4b2f      	ldr	r3, [pc, #188]	; (801798c <scalbn+0xe4>)
 80178d0:	429e      	cmp	r6, r3
 80178d2:	4604      	mov	r4, r0
 80178d4:	460d      	mov	r5, r1
 80178d6:	da12      	bge.n	80178fe <scalbn+0x56>
 80178d8:	a327      	add	r3, pc, #156	; (adr r3, 8017978 <scalbn+0xd0>)
 80178da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178de:	f7e8 fe9b 	bl	8000618 <__aeabi_dmul>
 80178e2:	e009      	b.n	80178f8 <scalbn+0x50>
 80178e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80178e8:	428a      	cmp	r2, r1
 80178ea:	d10c      	bne.n	8017906 <scalbn+0x5e>
 80178ec:	ee10 2a10 	vmov	r2, s0
 80178f0:	4620      	mov	r0, r4
 80178f2:	4629      	mov	r1, r5
 80178f4:	f7e8 fcda 	bl	80002ac <__adddf3>
 80178f8:	4604      	mov	r4, r0
 80178fa:	460d      	mov	r5, r1
 80178fc:	e01c      	b.n	8017938 <scalbn+0x90>
 80178fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017902:	460b      	mov	r3, r1
 8017904:	3a36      	subs	r2, #54	; 0x36
 8017906:	4432      	add	r2, r6
 8017908:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801790c:	428a      	cmp	r2, r1
 801790e:	dd0b      	ble.n	8017928 <scalbn+0x80>
 8017910:	ec45 4b11 	vmov	d1, r4, r5
 8017914:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017980 <scalbn+0xd8>
 8017918:	f000 f90e 	bl	8017b38 <copysign>
 801791c:	a318      	add	r3, pc, #96	; (adr r3, 8017980 <scalbn+0xd8>)
 801791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017922:	ec51 0b10 	vmov	r0, r1, d0
 8017926:	e7da      	b.n	80178de <scalbn+0x36>
 8017928:	2a00      	cmp	r2, #0
 801792a:	dd08      	ble.n	801793e <scalbn+0x96>
 801792c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017930:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017934:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017938:	ec45 4b10 	vmov	d0, r4, r5
 801793c:	bd70      	pop	{r4, r5, r6, pc}
 801793e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017942:	da0d      	bge.n	8017960 <scalbn+0xb8>
 8017944:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017948:	429e      	cmp	r6, r3
 801794a:	ec45 4b11 	vmov	d1, r4, r5
 801794e:	dce1      	bgt.n	8017914 <scalbn+0x6c>
 8017950:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017978 <scalbn+0xd0>
 8017954:	f000 f8f0 	bl	8017b38 <copysign>
 8017958:	a307      	add	r3, pc, #28	; (adr r3, 8017978 <scalbn+0xd0>)
 801795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795e:	e7e0      	b.n	8017922 <scalbn+0x7a>
 8017960:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017964:	3236      	adds	r2, #54	; 0x36
 8017966:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801796a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801796e:	4620      	mov	r0, r4
 8017970:	4629      	mov	r1, r5
 8017972:	2200      	movs	r2, #0
 8017974:	4b06      	ldr	r3, [pc, #24]	; (8017990 <scalbn+0xe8>)
 8017976:	e7b2      	b.n	80178de <scalbn+0x36>
 8017978:	c2f8f359 	.word	0xc2f8f359
 801797c:	01a56e1f 	.word	0x01a56e1f
 8017980:	8800759c 	.word	0x8800759c
 8017984:	7e37e43c 	.word	0x7e37e43c
 8017988:	43500000 	.word	0x43500000
 801798c:	ffff3cb0 	.word	0xffff3cb0
 8017990:	3c900000 	.word	0x3c900000

08017994 <fabsf>:
 8017994:	ee10 3a10 	vmov	r3, s0
 8017998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801799c:	ee00 3a10 	vmov	s0, r3
 80179a0:	4770      	bx	lr

080179a2 <finitef>:
 80179a2:	ee10 3a10 	vmov	r3, s0
 80179a6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80179aa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80179ae:	bfac      	ite	ge
 80179b0:	2000      	movge	r0, #0
 80179b2:	2001      	movlt	r0, #1
 80179b4:	4770      	bx	lr
	...

080179b8 <nanf>:
 80179b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80179c0 <nanf+0x8>
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop
 80179c0:	7fc00000 	.word	0x7fc00000

080179c4 <rintf>:
 80179c4:	b513      	push	{r0, r1, r4, lr}
 80179c6:	ee10 1a10 	vmov	r1, s0
 80179ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80179ce:	0ddc      	lsrs	r4, r3, #23
 80179d0:	3c7f      	subs	r4, #127	; 0x7f
 80179d2:	2c16      	cmp	r4, #22
 80179d4:	dc46      	bgt.n	8017a64 <rintf+0xa0>
 80179d6:	b32b      	cbz	r3, 8017a24 <rintf+0x60>
 80179d8:	2c00      	cmp	r4, #0
 80179da:	ee10 2a10 	vmov	r2, s0
 80179de:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80179e2:	da21      	bge.n	8017a28 <rintf+0x64>
 80179e4:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80179e8:	425b      	negs	r3, r3
 80179ea:	4a21      	ldr	r2, [pc, #132]	; (8017a70 <rintf+0xac>)
 80179ec:	0a5b      	lsrs	r3, r3, #9
 80179ee:	0d09      	lsrs	r1, r1, #20
 80179f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80179f4:	0509      	lsls	r1, r1, #20
 80179f6:	430b      	orrs	r3, r1
 80179f8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80179fc:	ee07 3a90 	vmov	s15, r3
 8017a00:	edd2 6a00 	vldr	s13, [r2]
 8017a04:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8017a08:	ed8d 7a01 	vstr	s14, [sp, #4]
 8017a0c:	eddd 7a01 	vldr	s15, [sp, #4]
 8017a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017a14:	ee17 3a90 	vmov	r3, s15
 8017a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a1c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8017a20:	ee00 3a10 	vmov	s0, r3
 8017a24:	b002      	add	sp, #8
 8017a26:	bd10      	pop	{r4, pc}
 8017a28:	4b12      	ldr	r3, [pc, #72]	; (8017a74 <rintf+0xb0>)
 8017a2a:	4123      	asrs	r3, r4
 8017a2c:	4219      	tst	r1, r3
 8017a2e:	d0f9      	beq.n	8017a24 <rintf+0x60>
 8017a30:	085b      	lsrs	r3, r3, #1
 8017a32:	4219      	tst	r1, r3
 8017a34:	d006      	beq.n	8017a44 <rintf+0x80>
 8017a36:	ea21 0203 	bic.w	r2, r1, r3
 8017a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017a3e:	fa43 f404 	asr.w	r4, r3, r4
 8017a42:	4322      	orrs	r2, r4
 8017a44:	4b0a      	ldr	r3, [pc, #40]	; (8017a70 <rintf+0xac>)
 8017a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017a4a:	ed90 7a00 	vldr	s14, [r0]
 8017a4e:	ee07 2a90 	vmov	s15, r2
 8017a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a56:	edcd 7a01 	vstr	s15, [sp, #4]
 8017a5a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017a5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017a62:	e7df      	b.n	8017a24 <rintf+0x60>
 8017a64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a68:	d3dc      	bcc.n	8017a24 <rintf+0x60>
 8017a6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a6e:	e7d9      	b.n	8017a24 <rintf+0x60>
 8017a70:	080181c0 	.word	0x080181c0
 8017a74:	007fffff 	.word	0x007fffff

08017a78 <scalbnf>:
 8017a78:	b508      	push	{r3, lr}
 8017a7a:	ee10 2a10 	vmov	r2, s0
 8017a7e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017a82:	ed2d 8b02 	vpush	{d8}
 8017a86:	eef0 0a40 	vmov.f32	s1, s0
 8017a8a:	d004      	beq.n	8017a96 <scalbnf+0x1e>
 8017a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a90:	d306      	bcc.n	8017aa0 <scalbnf+0x28>
 8017a92:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017a96:	ecbd 8b02 	vpop	{d8}
 8017a9a:	eeb0 0a60 	vmov.f32	s0, s1
 8017a9e:	bd08      	pop	{r3, pc}
 8017aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017aa4:	d21c      	bcs.n	8017ae0 <scalbnf+0x68>
 8017aa6:	4b1f      	ldr	r3, [pc, #124]	; (8017b24 <scalbnf+0xac>)
 8017aa8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017b28 <scalbnf+0xb0>
 8017aac:	4298      	cmp	r0, r3
 8017aae:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017ab2:	db10      	blt.n	8017ad6 <scalbnf+0x5e>
 8017ab4:	ee10 2a90 	vmov	r2, s1
 8017ab8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017abc:	3b19      	subs	r3, #25
 8017abe:	4403      	add	r3, r0
 8017ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8017ac2:	dd0f      	ble.n	8017ae4 <scalbnf+0x6c>
 8017ac4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017b2c <scalbnf+0xb4>
 8017ac8:	eeb0 0a48 	vmov.f32	s0, s16
 8017acc:	f000 f843 	bl	8017b56 <copysignf>
 8017ad0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017ad4:	e7df      	b.n	8017a96 <scalbnf+0x1e>
 8017ad6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017b30 <scalbnf+0xb8>
 8017ada:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017ade:	e7da      	b.n	8017a96 <scalbnf+0x1e>
 8017ae0:	0ddb      	lsrs	r3, r3, #23
 8017ae2:	e7ec      	b.n	8017abe <scalbnf+0x46>
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	dd06      	ble.n	8017af6 <scalbnf+0x7e>
 8017ae8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017aec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017af0:	ee00 3a90 	vmov	s1, r3
 8017af4:	e7cf      	b.n	8017a96 <scalbnf+0x1e>
 8017af6:	f113 0f16 	cmn.w	r3, #22
 8017afa:	da06      	bge.n	8017b0a <scalbnf+0x92>
 8017afc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017b00:	4298      	cmp	r0, r3
 8017b02:	dcdf      	bgt.n	8017ac4 <scalbnf+0x4c>
 8017b04:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017b30 <scalbnf+0xb8>
 8017b08:	e7de      	b.n	8017ac8 <scalbnf+0x50>
 8017b0a:	3319      	adds	r3, #25
 8017b0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017b10:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017b14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017b34 <scalbnf+0xbc>
 8017b18:	ee07 3a10 	vmov	s14, r3
 8017b1c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017b20:	e7b9      	b.n	8017a96 <scalbnf+0x1e>
 8017b22:	bf00      	nop
 8017b24:	ffff3cb0 	.word	0xffff3cb0
 8017b28:	4c000000 	.word	0x4c000000
 8017b2c:	7149f2ca 	.word	0x7149f2ca
 8017b30:	0da24260 	.word	0x0da24260
 8017b34:	33000000 	.word	0x33000000

08017b38 <copysign>:
 8017b38:	ec51 0b10 	vmov	r0, r1, d0
 8017b3c:	ee11 0a90 	vmov	r0, s3
 8017b40:	ee10 2a10 	vmov	r2, s0
 8017b44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017b48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017b4c:	ea41 0300 	orr.w	r3, r1, r0
 8017b50:	ec43 2b10 	vmov	d0, r2, r3
 8017b54:	4770      	bx	lr

08017b56 <copysignf>:
 8017b56:	ee10 3a10 	vmov	r3, s0
 8017b5a:	ee10 2a90 	vmov	r2, s1
 8017b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017b66:	4313      	orrs	r3, r2
 8017b68:	ee00 3a10 	vmov	s0, r3
 8017b6c:	4770      	bx	lr
	...

08017b70 <_init>:
 8017b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b72:	bf00      	nop
 8017b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b76:	bc08      	pop	{r3}
 8017b78:	469e      	mov	lr, r3
 8017b7a:	4770      	bx	lr

08017b7c <_fini>:
 8017b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b7e:	bf00      	nop
 8017b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b82:	bc08      	pop	{r3}
 8017b84:	469e      	mov	lr, r3
 8017b86:	4770      	bx	lr
