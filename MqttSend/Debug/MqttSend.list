
MqttSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013bdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08013d8c  08013d8c  00023d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014328  08014328  000303a0  2**0
                  CONTENTS
  4 .ARM          00000008  08014328  08014328  00024328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014330  08014330  000303a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014330  08014330  00024330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014334  08014334  00024334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  08014338  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010130  200003a0  080146d8  000303a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200104d0  080146d8  000304d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046621  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008207  00000000  00000000  000769f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003338  00000000  00000000  0007ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002fd8  00000000  00000000  00081f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038844  00000000  00000000  00084f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f3f2  00000000  00000000  000bd74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013769b  00000000  00000000  000ecb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002241d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e590  00000000  00000000  00224254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003a0 	.word	0x200003a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013d74 	.word	0x08013d74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003a4 	.word	0x200003a4
 80001ec:	08013d74 	.word	0x08013d74

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ESP_timeoutBegin>:
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength);

/*
 * @brief INTERNAL Timeout setup.
 */
static void ESP_timeoutBegin(void){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	// Get entry time.
	//ESP_t0 = HAL_GetTick();
	ESP_t0 = xTaskGetTickCount();
 80005a4:	f00f feee 	bl	8010384 <xTaskGetTickCount>
 80005a8:	4602      	mov	r2, r0
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <ESP_timeoutBegin+0x14>)
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003bc 	.word	0x200003bc

080005b8 <ESP_timeoutIsExpired>:
/*
 * @brief INTERNAL Timeout checker.
 * @param interval_ms Interval time in ms.
 * @return True if timeout expired.
 */
static bool ESP_timeoutIsExpired(const uint16_t interval_ms) {
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	// Check if the given interval is in the past.
	//return (interval_ms < (HAL_GetTick() - ESP_t0));
	return (interval_ms < (xTaskGetTickCount() - ESP_t0));
 80005c2:	88fc      	ldrh	r4, [r7, #6]
 80005c4:	f00f fede 	bl	8010384 <xTaskGetTickCount>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <ESP_timeoutIsExpired+0x2c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	429c      	cmp	r4, r3
 80005d2:	bf34      	ite	cc
 80005d4:	2301      	movcc	r3, #1
 80005d6:	2300      	movcs	r3, #0
 80005d8:	b2db      	uxtb	r3, r3

}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200003bc 	.word	0x200003bc

080005e8 <ESP_Delay>:
/*
 * @brief Creates non-blocking delay.
 * @param delay_ms Delay time in ms.
 * @return SUCCESS, INPROGRESS.
 */
ESP8266_StatusTypeDef ESP_Delay(const uint16_t delay_ms){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	// Function entry.
	if(!ESP82_inProgress){
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <ESP_Delay+0x58>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <ESP_Delay+0x1c>
		// Start timeout.
		ESP_timeoutBegin();
 8000600:	f7ff ffce 	bl	80005a0 <ESP_timeoutBegin>
	}

	ESP82_inProgress = !ESP_timeoutIsExpired(delay_ms);
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffd6 	bl	80005b8 <ESP_timeoutIsExpired>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <ESP_Delay+0x58>)
 8000626:	701a      	strb	r2, [r3, #0]

	if(ESP82_inProgress)
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <ESP_Delay+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <ESP_Delay+0x4c>
		return ESP8266_BUSY;
 8000630:	2302      	movs	r3, #2
 8000632:	e000      	b.n	8000636 <ESP_Delay+0x4e>
	else
		return ESP8266_OK;
 8000634:	2300      	movs	r3, #0

}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200003c0 	.word	0x200003c0

08000644 <ESP_ConnectWifi>:
 * @param resetToDefault If true, reset the module to default settings before connecting.
 * @param ssid AP name.
 * @param pass AP password.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_ConnectWifi(const bool resetToDefault, const char * ssid, const char * pass) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	73fb      	strb	r3, [r7, #15]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8000652:	4b49      	ldr	r3, [pc, #292]	; (8000778 <ESP_ConnectWifi+0x134>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <ESP_ConnectWifi+0x1c>
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <ESP_ConnectWifi+0x138>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	e000      	b.n	8000662 <ESP_ConnectWifi+0x1e>
 8000660:	2300      	movs	r3, #0
 8000662:	4a46      	ldr	r2, [pc, #280]	; (800077c <ESP_ConnectWifi+0x138>)
 8000664:	7013      	strb	r3, [r2, #0]
 8000666:	4b45      	ldr	r3, [pc, #276]	; (800077c <ESP_ConnectWifi+0x138>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d87c      	bhi.n	8000768 <ESP_ConnectWifi+0x124>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <ESP_ConnectWifi+0x30>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	0800068d 	.word	0x0800068d
 8000678:	080006ab 	.word	0x080006ab
 800067c:	080006d7 	.word	0x080006d7
 8000680:	08000701 	.word	0x08000701
 8000684:	08000727 	.word	0x08000727
 8000688:	08000753 	.word	0x08000753
	case ESP82_State0:
			// Wait for startup phase to finish.
			if(ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART))) {
 800068c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000690:	f7ff ffaa 	bl	80005e8 <ESP_Delay>
 8000694:	4603      	mov	r3, r0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <ESP_ConnectWifi+0x62>
				// To the next state.
				internalState = ESP82_State1;
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <ESP_ConnectWifi+0x138>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e001      	b.n	80006aa <ESP_ConnectWifi+0x66>
			} else {
				// INPROGRESS or SUCCESS if no reset is requested.
				return result;
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	e061      	b.n	800076e <ESP_ConnectWifi+0x12a>
			}
	//nobreak;
	case ESP82_State1:
		// AT+RESTORE (if requested).
		if(!resetToDefault || (ESP8266_OK == (result = runAtCmd((uint8_t*)"AT\r\n", 4, (uint8_t*) AT_OK_STRING)))) {
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <ESP_ConnectWifi+0x86>
 80006b6:	4a32      	ldr	r2, [pc, #200]	; (8000780 <ESP_ConnectWifi+0x13c>)
 80006b8:	2104      	movs	r1, #4
 80006ba:	4832      	ldr	r0, [pc, #200]	; (8000784 <ESP_ConnectWifi+0x140>)
 80006bc:	f000 f93e 	bl	800093c <runAtCmd>
 80006c0:	4603      	mov	r3, r0
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <ESP_ConnectWifi+0x8e>
			// To the next state.
			internalState = ESP82_State2;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <ESP_ConnectWifi+0x138>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e001      	b.n	80006d6 <ESP_ConnectWifi+0x92>
		} else {
			// Exit on ERROR or INPROGRESS.
			return result;
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	e04b      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State2:
		// If resetted, wait for restart to finish.
		if(!resetToDefault || (ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART)))){
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	f083 0301 	eor.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d108      	bne.n	80006f4 <ESP_ConnectWifi+0xb0>
 80006e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e6:	f7ff ff7f 	bl	80005e8 <ESP_Delay>
 80006ea:	4603      	mov	r3, r0
 80006ec:	75fb      	strb	r3, [r7, #23]
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <ESP_ConnectWifi+0xb8>
				// To the next state.
				internalState = ESP82_State3;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <ESP_ConnectWifi+0x138>)
 80006f6:	2203      	movs	r2, #3
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e001      	b.n	8000700 <ESP_ConnectWifi+0xbc>
		}else{
			// INPROGRESS or SUCCESS if no reset is requested.
			return result;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	e036      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State3:
		// AT+CWMODE (client mode)
		if((ESP8266_OK == (result = runAtCmd((uint8_t*)"AT+CWMODE=1\r\n", 13, (uint8_t*) AT_OK_STRING))) && (ssid != NULL)){
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <ESP_ConnectWifi+0x13c>)
 8000702:	210d      	movs	r1, #13
 8000704:	4820      	ldr	r0, [pc, #128]	; (8000788 <ESP_ConnectWifi+0x144>)
 8000706:	f000 f919 	bl	800093c <runAtCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	75fb      	strb	r3, [r7, #23]
 800070e:	7dfb      	ldrb	r3, [r7, #23]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d106      	bne.n	8000722 <ESP_ConnectWifi+0xde>
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <ESP_ConnectWifi+0xde>
			// To the next state.
			internalState = ESP82_State4;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <ESP_ConnectWifi+0x138>)
 800071c:	2204      	movs	r2, #4
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e001      	b.n	8000726 <ESP_ConnectWifi+0xe2>
		} else{
			// Exit on ERROR, INPROGRESS or SUCCESS (if no SSID is provided).
			return result;
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	e023      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		// nobreak;
	case ESP82_State4:
		// Size check.
		if ((strlen(ssid) + strlen(pass)) > (ESP_BUFFERSIZE_CMD - 17)) {
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f7ff fd62 	bl	80001f0 <strlen>
 800072c:	4604      	mov	r4, r0
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff fd5e 	bl	80001f0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	4423      	add	r3, r4
 8000738:	2b6f      	cmp	r3, #111	; 0x6f
 800073a:	d901      	bls.n	8000740 <ESP_ConnectWifi+0xfc>
			return false;
 800073c:	2300      	movs	r3, #0
 800073e:	e016      	b.n	800076e <ESP_ConnectWifi+0x12a>
		}

		// AT+CWJAP prepare.
		sprintf((char *)ESP82_cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4911      	ldr	r1, [pc, #68]	; (800078c <ESP_ConnectWifi+0x148>)
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000748:	f012 fce0 	bl	801310c <siprintf>

		// To the next state.
		internalState = ESP82_State5;
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <ESP_ConnectWifi+0x138>)
 800074e:	2205      	movs	r2, #5
 8000750:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State5:
		// AT+CWJAP
		return runAtCmd(ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000754:	f7ff fd4c 	bl	80001f0 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <ESP_ConnectWifi+0x13c>)
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <ESP_ConnectWifi+0x14c>)
 8000760:	f000 f8ec 	bl	800093c <runAtCmd>
 8000764:	4603      	mov	r3, r0
 8000766:	e002      	b.n	800076e <ESP_ConnectWifi+0x12a>

		//nobreak;
	default:
		// To the first state.
		internalState = ESP82_State0;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ESP_ConnectWifi+0x138>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	}
}
 800076e:	4618      	mov	r0, r3
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	200003c0 	.word	0x200003c0
 800077c:	20000444 	.word	0x20000444
 8000780:	08013da4 	.word	0x08013da4
 8000784:	08013db8 	.word	0x08013db8
 8000788:	08013dc0 	.word	0x08013dc0
 800078c:	08013dd0 	.word	0x08013dd0
 8000790:	200003c4 	.word	0x200003c4

08000794 <ESP_IsConnectedWifi>:

/*
 * @brief Connection test.
 * @return SUCCESS, INPROGRESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_IsConnectedWifi(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	return runAtCmd((uint8_t*)"AT+CIPSTATUS\r\n", 14, (uint8_t*) AT_OK_STRING);
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <ESP_IsConnectedWifi+0x14>)
 800079a:	210e      	movs	r1, #14
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <ESP_IsConnectedWifi+0x18>)
 800079e:	f000 f8cd 	bl	800093c <runAtCmd>
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08013da4 	.word	0x08013da4
 80007ac:	08013de8 	.word	0x08013de8

080007b0 <ESP_StartTCP>:
 * @param port Remote port.
 * @param keepalive Keep-alive time between 0 to 7200 seconds.
 * @param ssl Starts SSL connection.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_StartTCP(const char * host, const uint16_t port, const uint16_t keepalive, const bool ssl) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4603      	mov	r3, r0
 80007c0:	817b      	strh	r3, [r7, #10]
 80007c2:	460b      	mov	r3, r1
 80007c4:	813b      	strh	r3, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	71fb      	strb	r3, [r7, #7]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <ESP_StartTCP+0xc8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <ESP_StartTCP+0x28>
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <ESP_StartTCP+0xcc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	e000      	b.n	80007da <ESP_StartTCP+0x2a>
 80007d8:	2300      	movs	r3, #0
 80007da:	4a28      	ldr	r2, [pc, #160]	; (800087c <ESP_StartTCP+0xcc>)
 80007dc:	7013      	strb	r3, [r2, #0]
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <ESP_StartTCP+0xcc>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d021      	beq.n	800082a <ESP_StartTCP+0x7a>
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d037      	beq.n	800085a <ESP_StartTCP+0xaa>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d140      	bne.n	8000870 <ESP_StartTCP+0xc0>
	case ESP82_State0:
		// Size check.
		if(strlen(host) > (ESP_BUFFERSIZE_CMD - 34)){
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f7ff fcfe 	bl	80001f0 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b5e      	cmp	r3, #94	; 0x5e
 80007f8:	d901      	bls.n	80007fe <ESP_StartTCP+0x4e>
			return false;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e038      	b.n	8000870 <ESP_StartTCP+0xc0>
		}

		// Keepalive check.
		if(keepalive > 7200){
 80007fe:	893b      	ldrh	r3, [r7, #8]
 8000800:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000804:	d901      	bls.n	800080a <ESP_StartTCP+0x5a>
			return false;
 8000806:	2300      	movs	r3, #0
 8000808:	e032      	b.n	8000870 <ESP_StartTCP+0xc0>
		}

		// prepare AT+CIPSTART
		//sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i,%i\r\n", (ssl ? "SSL" : "TCP"), host, port, keepalive);
		sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i\r\n", (ssl ? "SSL" : "TCP"), host, port);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <ESP_StartTCP+0x64>
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <ESP_StartTCP+0xd0>)
 8000812:	e000      	b.n	8000816 <ESP_StartTCP+0x66>
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <ESP_StartTCP+0xd4>)
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	491a      	ldr	r1, [pc, #104]	; (8000888 <ESP_StartTCP+0xd8>)
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <ESP_StartTCP+0xdc>)
 8000820:	f012 fc74 	bl	801310c <siprintf>


		// To the next state.
		internalState = ESP82_State1;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <ESP_StartTCP+0xcc>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State1:
		// AT+CIPSSLSIZE (or skip)
		if(!ssl || (ESP8266_OK == (result = runAtCmd((uint8_t*)ESP_SSLSIZE_str, 20, (uint8_t*) AT_OK_STRING)))){
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10b      	bne.n	800084e <ESP_StartTCP+0x9e>
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <ESP_StartTCP+0xe0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <ESP_StartTCP+0xe4>)
 800083c:	2114      	movs	r1, #20
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f87c 	bl	800093c <runAtCmd>
 8000844:	4603      	mov	r3, r0
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <ESP_StartTCP+0xa6>
			// To the next state.
			internalState = ESP82_State2;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <ESP_StartTCP+0xcc>)
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e001      	b.n	800085a <ESP_StartTCP+0xaa>
		}else{
			// Exit on ERROR or INPROGRESS.
			return result;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
 8000858:	e00a      	b.n	8000870 <ESP_StartTCP+0xc0>
		}
		//nobreak;
	case ESP82_State2:
		// AT+CIPSTART
		return runAtCmd((uint8_t*)ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <ESP_StartTCP+0xdc>)
 800085c:	f7ff fcc8 	bl	80001f0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <ESP_StartTCP+0xe4>)
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <ESP_StartTCP+0xdc>)
 8000868:	f000 f868 	bl	800093c <runAtCmd>
 800086c:	4603      	mov	r3, r0
 800086e:	e7ff      	b.n	8000870 <ESP_StartTCP+0xc0>
	}
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200003c0 	.word	0x200003c0
 800087c:	20000445 	.word	0x20000445
 8000880:	08013df8 	.word	0x08013df8
 8000884:	08013dfc 	.word	0x08013dfc
 8000888:	08013e00 	.word	0x08013e00
 800088c:	200003c4 	.word	0x200003c4
 8000890:	20000000 	.word	0x20000000
 8000894:	08013da4 	.word	0x08013da4

08000898 <ESP_SendData>:
 * @brief  Send data over the wifi connection.
 * @param  Buffer: the buffer to send
 * @param  Length: the Buffer's data size.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef ESP_SendData(uint8_t* Buffer, uint32_t Length) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Ret = ESP8266_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]

	if (Buffer != NULL) {
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d027      	beq.n	80008fc <ESP_SendData+0x64>
		//uint32_t tickStart;
		//TickType_t tickStart;

		/* Construct the CIPSEND command */
		memset(ESP82_cmdBuffer, '\0', ESP_BUFFERSIZE_CMD);
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	2100      	movs	r1, #0
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <ESP_SendData+0x70>)
 80008b2:	f012 f826 	bl	8012902 <memset>
		sprintf((char *) ESP82_cmdBuffer, "AT+CIPSEND=%lu%c%c", Length  , '\r', '\n');
 80008b6:	230a      	movs	r3, #10
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	230d      	movs	r3, #13
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4913      	ldr	r1, [pc, #76]	; (800090c <ESP_SendData+0x74>)
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <ESP_SendData+0x70>)
 80008c2:	f012 fc23 	bl	801310c <siprintf>

		/* The CIPSEND command doesn't have a return command
		 until the data is actually sent. Thus we check here whether
		 we got the '>' prompt or not. */
		Ret = runAtCmd(ESP82_cmdBuffer, strlen((char *) ESP82_cmdBuffer),
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <ESP_SendData+0x70>)
 80008c8:	f7ff fc92 	bl	80001f0 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <ESP_SendData+0x78>)
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <ESP_SendData+0x70>)
 80008d4:	f000 f832 	bl	800093c <runAtCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	73fb      	strb	r3, [r7, #15]
				(uint8_t*) AT_SEND_PROMPT_STRING);

		/* Return Error */
		if (Ret != ESP8266_OK) {
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <ESP_SendData+0x4e>
			return ESP8266_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00b      	b.n	80008fe <ESP_SendData+0x66>
		//while (HAL_GetTick() - tickStart < 500)
		//while (xTaskGetTickCount() - tickStart < 1000)
		//{
		//}

		osDelay(1000); //delay no bloqueante
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f00e f979 	bl	800ebe0 <osDelay>

		/* Send the data */
		Ret = runAtCmd(Buffer, Length, (uint8_t*) AT_SEND_OK_STRING);//AT_IPD_STRING);//
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <ESP_SendData+0x7c>)
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f822 	bl	800093c <runAtCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
	}

	return Ret;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200003c4 	.word	0x200003c4
 800090c:	08013e1c 	.word	0x08013e1c
 8000910:	08013e30 	.word	0x08013e30
 8000914:	08013e38 	.word	0x08013e38

08000918 <ESP_ReceiveData>:
 * @param Length data buffer length.
 * @param RetLength data length received.
 * @return SUCCESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_ReceiveData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	ESP8266_StatusTypeDef Ret;

	/* Receive the data from the host */
	Ret = getData(Buffer, Length, RetLength);
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f000 f8b5 	bl	8000a98 <getData>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]

	return Ret;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <runAtCmd>:
 * @param  Length the maximum data size to receive.
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef runAtCmd(uint8_t* cmd, uint32_t Length,
		const uint8_t* Token) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	uint32_t idx = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
	uint8_t RxChar;
	uint8_t status_io = 0;//0 is ok
 800094c:	2300      	movs	r3, #0
 800094e:	76fb      	strb	r3, [r7, #27]

	/* Reset the Rx buffer to make sure no previous data exist */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000950:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000954:	2100      	movs	r1, #0
 8000956:	4824      	ldr	r0, [pc, #144]	; (80009e8 <runAtCmd+0xac>)
 8000958:	f011 ffd3 	bl	8012902 <memset>

	/* Send the command */
	if (HAL_UART_F_Send((char*)cmd, Length) < 0) {
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f003 f87e 	bl	8003a64 <HAL_UART_F_Send>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	da01      	bge.n	8000972 <runAtCmd+0x36>
		return ESP8266_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e035      	b.n	80009de <runAtCmd+0xa2>

	//DEBUGGING STYLE
	/*if(DEBUG == 1)
		printf((char*) cmd, Length);*/

	uint32_t currentTime = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
	/* Wait for reception */
	while(1) {
		/* Wait to recieve data */
		if (ESP_Receive(&RxChar, 1) != 0) {
 8000976:	f107 0313 	add.w	r3, r7, #19
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f837 	bl	80009f0 <ESP_Receive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00b      	beq.n	80009a0 <runAtCmd+0x64>
			RxBuffer[idx++] = RxChar;
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	61fa      	str	r2, [r7, #28]
 800098e:	7cf9      	ldrb	r1, [r7, #19]
 8000990:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <runAtCmd+0xac>)
 8000992:	54d1      	strb	r1, [r2, r3]
			status_io = 1;
			break;
		}

		/* Check that max buffer size has not been reached */
		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <runAtCmd+0x70>
 800099e:	e002      	b.n	80009a6 <runAtCmd+0x6a>
			status_io = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	76fb      	strb	r3, [r7, #27]
			break;
 80009a4:	e015      	b.n	80009d2 <runAtCmd+0x96>
			status_io = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	76fb      	strb	r3, [r7, #27]
			break;
 80009aa:	e012      	b.n	80009d2 <runAtCmd+0x96>
		}

		/* Extract the Token */
		if (strstr((char *) RxBuffer, (char *) Token) != NULL) {
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <runAtCmd+0xac>)
 80009b0:	f012 fbe1 	bl	8013176 <strstr>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <runAtCmd+0x84>
			status_io = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	76fb      	strb	r3, [r7, #27]
			break;
 80009be:	e008      	b.n	80009d2 <runAtCmd+0x96>
			//return ESP8266_OK;
		}

		/* Check if the message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80009c0:	490a      	ldr	r1, [pc, #40]	; (80009ec <runAtCmd+0xb0>)
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <runAtCmd+0xac>)
 80009c4:	f012 fbd7 	bl	8013176 <strstr>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0d3      	beq.n	8000976 <runAtCmd+0x3a>
			status_io = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	76fb      	strb	r3, [r7, #27]
		}
		//currentTime++;
		//osDelay(1);
	}//while(currentTime < ESP_LONG_TIME_OUT);

	if(status_io == 1)
 80009d2:	7efb      	ldrb	r3, [r7, #27]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d101      	bne.n	80009dc <runAtCmd+0xa0>
		return ESP8266_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <runAtCmd+0xa2>
	return ESP8266_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000d764 	.word	0x2000d764
 80009ec:	08013e44 	.word	0x08013e44

080009f0 <ESP_Receive>:


static int32_t ESP_Receive(uint8_t *Buffer, uint32_t Length) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	uint32_t ReadData = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
	/* Loop until data received */
	while (Length--) {
 80009fe:	e030      	b.n	8000a62 <ESP_Receive+0x72>
		//uint32_t tickStart = HAL_GetTick();
		TickType_t tickStart = xTaskGetTickCount();
 8000a00:	f00f fcc0 	bl	8010384 <xTaskGetTickCount>
 8000a04:	60b8      	str	r0, [r7, #8]
		//uint32_t currentTime = 0;
		do {
			if (WiFiRxBuffer.head != WiFiRxBuffer.tail) {
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <ESP_Receive+0xa4>)
 8000a08:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <ESP_Receive+0xa4>)
 8000a0e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d01c      	beq.n	8000a50 <ESP_Receive+0x60>
				//taskENTER_CRITICAL();
				printf((char * ) &WiFiRxBuffer.data[WiFiRxBuffer.head],1);
				//taskEXIT_CRITICAL();
#endif*/

				*Buffer++ = WiFiRxBuffer.data[WiFiRxBuffer.head++];
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <ESP_Receive+0xa4>)
 8000a18:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	b291      	uxth	r1, r2
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <ESP_Receive+0xa4>)
 8000a22:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 8000a26:	4619      	mov	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <ESP_Receive+0xa4>)
 8000a30:	5c52      	ldrb	r2, [r2, r1]
 8000a32:	701a      	strb	r2, [r3, #0]

				ReadData++;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]

				/* check for ring buffer wrap */
				if (WiFiRxBuffer.head >= ESP_BUFFERSIZE_CIRCULAR) {
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <ESP_Receive+0xa4>)
 8000a3c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a44:	d30d      	bcc.n	8000a62 <ESP_Receive+0x72>
					/* Ring buffer wrap, so reset head pointer to start of buffer */
					WiFiRxBuffer.head = 0;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <ESP_Receive+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
				}
				break;
 8000a4e:	e008      	b.n	8000a62 <ESP_Receive+0x72>
			}
		} while((xTaskGetTickCount() - tickStart) < ESP_DEFAULT_TIME_OUT);
 8000a50:	f00f fc98 	bl	8010384 <xTaskGetTickCount>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d9d1      	bls.n	8000a06 <ESP_Receive+0x16>
	while (Length--) {
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	603a      	str	r2, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1c9      	bne.n	8000a00 <ESP_Receive+0x10>
		//} while ((HAL_GetTick() - tickStart) < ESP_DEFAULT_TIME_OUT);
	}
#if DEBUG == 1

	if(ReadData > 0){
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <ESP_Receive+0x9a>
		//taskENTER_CRITICAL();
		printf((char * ) &WiFiRxBuffer.data[WiFiRxBuffer.head - ReadData],ReadData);
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <ESP_Receive+0xa4>)
 8000a74:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <ESP_Receive+0xa4>)
 8000a80:	4413      	add	r3, r2
 8000a82:	68f9      	ldr	r1, [r7, #12]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f012 fab5 	bl	8012ff4 <iprintf>
		//taskEXIT_CRITICAL();
	}
#endif
	return ReadData;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000dd40 	.word	0x2000dd40

08000a98 <getData>:
 * @param  Buffer The buffer where to fill the received data
 * @param  Length the maximum data size to receive.
 * @param  RetLength Length of received data
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	uint8_t RxChar;
	uint32_t idx = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t LengthString[4];
	uint32_t LengthValue;
	uint8_t i = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	77fb      	strb	r3, [r7, #31]
	ESP8266_Boolean newChunk = ESP8266_FALSE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	77bb      	strb	r3, [r7, #30]

	/* Reset the reception data length */
	*RetLength = 0;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]

	/* Reset the reception buffer */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000ab6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000aba:	2100      	movs	r1, #0
 8000abc:	484f      	ldr	r0, [pc, #316]	; (8000bfc <getData+0x164>)
 8000abe:	f011 ff20 	bl	8012902 <memset>
	 by the string "+IPD,<chunk_size>:". Thus to get the actual data we need to:
	 - Receive data until getting the "+IPD," token, a new chunk is marked.
	 - Extract the 'chunk_size' then read the next 'chunk_size' bytes as actual data
	 - Mark end of the chunk.
	 - Repeat steps above until no more data is available. */
	uint32_t currentTime = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
	do{
		if (ESP_Receive(&RxChar, 1) != 0) {
 8000ac6:	f107 0317 	add.w	r3, r7, #23
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff8f 	bl	80009f0 <ESP_Receive>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d028      	beq.n	8000b2a <getData+0x92>
			/* The data chunk starts with +IPD,<chunk length>: */
			if (newChunk == ESP8266_TRUE) {
 8000ad8:	7fbb      	ldrb	r3, [r7, #30]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d119      	bne.n	8000b12 <getData+0x7a>
				/* Read the next lendthValue bytes as part from the actual data. */
				if (LengthValue--) {
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	623a      	str	r2, [r7, #32]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00a      	beq.n	8000afe <getData+0x66>
					*Buffer++ = RxChar;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60fa      	str	r2, [r7, #12]
 8000aee:	7dfa      	ldrb	r2, [r7, #23]
 8000af0:	701a      	strb	r2, [r3, #0]
					(*RetLength)++;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e009      	b.n	8000b12 <getData+0x7a>
				} else {
					/* Clear the buffer as the new chunk has ended. */
					newChunk = ESP8266_FALSE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	77bb      	strb	r3, [r7, #30]
					memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8000b02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b06:	2100      	movs	r1, #0
 8000b08:	483c      	ldr	r0, [pc, #240]	; (8000bfc <getData+0x164>)
 8000b0a:	f011 fefa 	bl	8012902 <memset>
					idx = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			RxBuffer[idx++] = RxChar;
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	7df9      	ldrb	r1, [r7, #23]
 8000b1a:	4a38      	ldr	r2, [pc, #224]	; (8000bfc <getData+0x164>)
 8000b1c:	54d1      	strb	r1, [r2, r3]
			} else {
				break;
			}
		}

		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d110      	bne.n	8000b4a <getData+0xb2>
 8000b28:	e007      	b.n	8000b3a <getData+0xa2>
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8000b2a:	7fbb      	ldrb	r3, [r7, #30]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d158      	bne.n	8000be2 <getData+0x14a>
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d055      	beq.n	8000be2 <getData+0x14a>
				return ESP8266_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e05c      	b.n	8000bf4 <getData+0x15c>
			/* In case of Buffer overflow, return error */
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 8000b3a:	7fbb      	ldrb	r3, [r7, #30]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d150      	bne.n	8000be2 <getData+0x14a>
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d04d      	beq.n	8000be2 <getData+0x14a>
				return ESP8266_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e054      	b.n	8000bf4 <getData+0x15c>
				break;
			}
		}

		/* When a new chunk is met, extact its size */
		if ((strstr((char *) RxBuffer, AT_IPD_STRING) != NULL)
 8000b4a:	492d      	ldr	r1, [pc, #180]	; (8000c00 <getData+0x168>)
 8000b4c:	482b      	ldr	r0, [pc, #172]	; (8000bfc <getData+0x164>)
 8000b4e:	f012 fb12 	bl	8013176 <strstr>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d026      	beq.n	8000ba6 <getData+0x10e>
				&& (newChunk == ESP8266_FALSE)) {
 8000b58:	7fbb      	ldrb	r3, [r7, #30]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d123      	bne.n	8000ba6 <getData+0x10e>
			i = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	77fb      	strb	r3, [r7, #31]
			memset(LengthString, '\0', 4);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	2204      	movs	r2, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f011 fec9 	bl	8012902 <memset>
			do {
				ESP_Receive(&RxChar, 1);
 8000b70:	f107 0317 	add.w	r3, r7, #23
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff3a 	bl	80009f0 <ESP_Receive>
				LengthString[i++] = RxChar;
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	77fa      	strb	r2, [r7, #31]
 8000b82:	7dfa      	ldrb	r2, [r7, #23]
 8000b84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b88:	440b      	add	r3, r1
 8000b8a:	f803 2c18 	strb.w	r2, [r3, #-24]
			} while (RxChar != ':');
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
 8000b90:	2b3a      	cmp	r3, #58	; 0x3a
 8000b92:	d1ed      	bne.n	8000b70 <getData+0xd8>

			/* Get the buffer length */
			LengthValue = atoi((char *) LengthString);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f011 fe67 	bl	801286c <atoi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	623b      	str	r3, [r7, #32]

			newChunk = ESP8266_TRUE;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	77bb      	strb	r3, [r7, #30]
		}

		/* Check if message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 8000ba6:	4917      	ldr	r1, [pc, #92]	; (8000c04 <getData+0x16c>)
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <getData+0x164>)
 8000baa:	f012 fae4 	bl	8013176 <strstr>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <getData+0x120>
			return ESP8266_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e01d      	b.n	8000bf4 <getData+0x15c>
		}

		/* Check for the chunk end */
		if (strstr((char *) RxBuffer, AT_IPD_OK_STRING) != NULL) {
 8000bb8:	4913      	ldr	r1, [pc, #76]	; (8000c08 <getData+0x170>)
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <getData+0x164>)
 8000bbc:	f012 fadb 	bl	8013176 <strstr>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <getData+0x132>
			newChunk = ESP8266_FALSE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	77bb      	strb	r3, [r7, #30]
		}
		currentTime++;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
		osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f00e f805 	bl	800ebe0 <osDelay>
	}while(currentTime < ESP_LONG_TIME_OUT);
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	f67f af72 	bls.w	8000ac6 <getData+0x2e>

			//taskENTER_CRITICAL();
			printf((char * ) &RxBuffer,strlen((char*)RxBuffer));
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <getData+0x164>)
 8000be4:	f7ff fb04 	bl	80001f0 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4619      	mov	r1, r3
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <getData+0x164>)
 8000bee:	f012 fa01 	bl	8012ff4 <iprintf>
			//taskEXIT_CRITICAL();


	return ESP8266_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000d764 	.word	0x2000d764
 8000c00:	08013e4c 	.word	0x08013e4c
 8000c04:	08013e44 	.word	0x08013e44
 8000c08:	08013e54 	.word	0x08013e54

08000c0c <MQTTSerialize_connectLength>:
int MQTTSerialize_connectLength(MQTTPacket_connectData* options, MQTTProperties* connectProperties,
  MQTTProperties* willProperties)
#else
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
#endif
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d102      	bne.n	8000c26 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000c20:	230c      	movs	r3, #12
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e005      	b.n	8000c32 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion >= 4)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7a1b      	ldrb	r3, [r3, #8]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d901      	bls.n	8000c32 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000c2e:	230a      	movs	r3, #10
 8000c30:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	330c      	adds	r3, #12
 8000c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c3a:	f000 fa29 	bl	8001090 <MQTTstrlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	3302      	adds	r3, #2
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7edb      	ldrb	r3, [r3, #27]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d013      	beq.n	8000c78 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3324      	adds	r3, #36	; 0x24
 8000c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c58:	f000 fa1a 	bl	8001090 <MQTTstrlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	1c9c      	adds	r4, r3, #2
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3330      	adds	r3, #48	; 0x30
 8000c64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c68:	f000 fa12 	bl	8001090 <MQTTstrlen>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4423      	add	r3, r4
 8000c70:	3302      	adds	r3, #2
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d103      	bne.n	8000c88 <MQTTSerialize_connectLength+0x7c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00a      	beq.n	8000c9e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3340      	adds	r3, #64	; 0x40
 8000c8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c90:	f000 f9fe 	bl	8001090 <MQTTstrlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	3302      	adds	r3, #2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <MQTTSerialize_connectLength+0xa2>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00a      	beq.n	8000cc4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	334c      	adds	r3, #76	; 0x4c
 8000cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cb6:	f000 f9eb 	bl	8001090 <MQTTstrlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
		  len += MQTTProperties_len(willProperties);
	}
#endif

	FUNC_EXIT_RC(len);
	return len;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}
	...

08000cd0 <MQTTSerialize_connect>:
int MQTTV5Serialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options,
  MQTTProperties* connectProperties, MQTTProperties* willProperties)
#else
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
#endif
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
	FUNC_ENTRY;
	#if defined(MQTTV5)
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options,
		         connectProperties, willProperties)) > buflen)
	#else
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff8a 	bl	8000c0c <MQTTSerialize_connectLength>
 8000cf8:	6238      	str	r0, [r7, #32]
 8000cfa:	6a38      	ldr	r0, [r7, #32]
 8000cfc:	f000 f92e 	bl	8000f5c <MQTTPacket_len>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	4293      	cmp	r3, r2
 8000d06:	da03      	bge.n	8000d10 <MQTTSerialize_connect+0x40>
	#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d08:	f06f 0301 	mvn.w	r3, #1
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000d0e:	e0ca      	b.n	8000ea6 <MQTTSerialize_connect+0x1d6>
	}

	header.byte = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000d14:	7e3b      	ldrb	r3, [r7, #24]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f362 1307 	bfi	r3, r2, #4, #4
 8000d1c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000d1e:	7e3a      	ldrb	r2, [r7, #24]
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f927 	bl	8000f7a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	6a39      	ldr	r1, [r7, #32]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f8c1 	bl	8000eb8 <MQTTPacket_encode>
 8000d36:	4602      	mov	r2, r0
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 5 || options->MQTTVersion == 4)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7a1b      	ldrb	r3, [r3, #8]
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	d003      	beq.n	8000d4e <MQTTSerialize_connect+0x7e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7a1b      	ldrb	r3, [r3, #8]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d106      	bne.n	8000d5c <MQTTSerialize_connect+0x8c>
		writeCString(&ptr, "MQTT");
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4957      	ldr	r1, [pc, #348]	; (8000eb0 <MQTTSerialize_connect+0x1e0>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f94e 	bl	8000ff6 <writeCString>
 8000d5a:	e00a      	b.n	8000d72 <MQTTSerialize_connect+0xa2>
	else if (options->MQTTVersion == 3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7a1b      	ldrb	r3, [r3, #8]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	f040 809f 	bne.w	8000ea4 <MQTTSerialize_connect+0x1d4>
		writeCString(&ptr, "MQIsdp");
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4952      	ldr	r1, [pc, #328]	; (8000eb4 <MQTTSerialize_connect+0x1e4>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f942 	bl	8000ff6 <writeCString>
	else
	  goto exit;
	writeChar(&ptr, (char)options->MQTTVersion);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7a1a      	ldrb	r2, [r3, #8]
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f8fc 	bl	8000f7a <writeChar>

	flags.all = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7e9b      	ldrb	r3, [r3, #26]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	f362 0341 	bfi	r3, r2, #1, #1
 8000d96:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7edb      	ldrb	r3, [r3, #27]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	7d3b      	ldrb	r3, [r7, #20]
 8000da8:	f362 0382 	bfi	r3, r2, #2, #1
 8000dac:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d013      	beq.n	8000de2 <MQTTSerialize_connect+0x112>
	{
		flags.bits.willQoS = options->will.qos;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	7d3b      	ldrb	r3, [r7, #20]
 8000dc8:	f362 03c4 	bfi	r3, r2, #3, #2
 8000dcc:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	f362 1345 	bfi	r3, r2, #5, #1
 8000de0:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <MQTTSerialize_connect+0x122>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <MQTTSerialize_connect+0x12a>
		flags.bits.username = 1;
 8000df2:	7d3b      	ldrb	r3, [r7, #20]
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <MQTTSerialize_connect+0x13a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <MQTTSerialize_connect+0x142>
		flags.bits.password = 1;
 8000e0a:	7d3b      	ldrb	r3, [r7, #20]
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e10:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000e12:	7d3a      	ldrb	r2, [r7, #20]
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f8ad 	bl	8000f7a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	8b1b      	ldrh	r3, [r3, #24]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f8b9 	bl	8000fa4 <writeInt>
#if defined(MQTTV5)
	if (options->MQTTVersion == 5)
	  MQTTProperties_write(&ptr, connectProperties);
#endif
	writeMQTTString(&ptr, options->clientID);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f107 001c 	add.w	r0, r7, #28
 8000e38:	330c      	adds	r3, #12
 8000e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3c:	f000 f8fa 	bl	8001034 <writeMQTTString>
	if (options->willFlag)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7edb      	ldrb	r3, [r3, #27]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00d      	beq.n	8000e64 <MQTTSerialize_connect+0x194>
#if defined(MQTTV5)
		/* write will properties */
		if (options->MQTTVersion == 5 && willProperties)
		  MQTTProperties_write(&ptr, willProperties);
#endif
		writeMQTTString(&ptr, options->will.topicName);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f107 001c 	add.w	r0, r7, #28
 8000e4e:	3324      	adds	r3, #36	; 0x24
 8000e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e52:	f000 f8ef 	bl	8001034 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f107 001c 	add.w	r0, r7, #28
 8000e5c:	3330      	adds	r3, #48	; 0x30
 8000e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e60:	f000 f8e8 	bl	8001034 <writeMQTTString>
	}
	if (flags.bits.username)
 8000e64:	7d3b      	ldrb	r3, [r7, #20]
 8000e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <MQTTSerialize_connect+0x1ae>
		writeMQTTString(&ptr, options->username);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f107 001c 	add.w	r0, r7, #28
 8000e76:	3340      	adds	r3, #64	; 0x40
 8000e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7a:	f000 f8db 	bl	8001034 <writeMQTTString>
	if (flags.bits.password)
 8000e7e:	7d3b      	ldrb	r3, [r7, #20]
 8000e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <MQTTSerialize_connect+0x1c8>
		writeMQTTString(&ptr, options->password);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f107 001c 	add.w	r0, r7, #28
 8000e90:	334c      	adds	r3, #76	; 0x4c
 8000e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e94:	f000 f8ce 	bl	8001034 <writeMQTTString>

	rc = ptr - buf;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea2:	e000      	b.n	8000ea6 <MQTTSerialize_connect+0x1d6>
	  goto exit;
 8000ea4:	bf00      	nop

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08013e5c 	.word	0x08013e5c
 8000eb4:	08013e64 	.word	0x08013e64

08000eb8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	425a      	negs	r2, r3
 8000eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ed2:	bf58      	it	pl
 8000ed4:	4253      	negpl	r3, r2
 8000ed6:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da00      	bge.n	8000ee0 <MQTTPacket_encode+0x28>
 8000ede:	337f      	adds	r3, #127	; 0x7f
 8000ee0:	11db      	asrs	r3, r3, #7
 8000ee2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dd03      	ble.n	8000ef2 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000eea:	7afb      	ldrb	r3, [r7, #11]
 8000eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef0:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	7afa      	ldrb	r2, [r7, #11]
 8000f00:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dcde      	bgt.n	8000ec6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <MQTTPacket_VBIlen>:
	return len;
}


int MQTTPacket_VBIlen(int rem_len)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	int rc = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]

	if (rem_len < 128)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b7f      	cmp	r3, #127	; 0x7f
 8000f26:	dc02      	bgt.n	8000f2e <MQTTPacket_VBIlen+0x18>
		rc = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e00f      	b.n	8000f4e <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 16384)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f34:	da02      	bge.n	8000f3c <MQTTPacket_VBIlen+0x26>
		rc = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e008      	b.n	8000f4e <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 2097152)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000f42:	da02      	bge.n	8000f4a <MQTTPacket_VBIlen+0x34>
		rc = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e001      	b.n	8000f4e <MQTTPacket_VBIlen+0x38>
	else
		rc = 4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	60fb      	str	r3, [r7, #12]
  return rc;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* header byte + remaining length */
	return rem_len + 1  + MQTTPacket_VBIlen(rem_len);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1c5c      	adds	r4, r3, #1
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffd4 	bl	8000f16 <MQTTPacket_VBIlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4423      	add	r3, r4
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}

08000f7a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	da00      	bge.n	8000fb6 <writeInt+0x12>
 8000fb4:	33ff      	adds	r3, #255	; 0xff
 8000fb6:	121b      	asrs	r3, r3, #8
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	425a      	negs	r2, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	bf58      	it	pl
 8000fd6:	4253      	negpl	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f7ff f8f5 	bl	80001f0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffc9 	bl	8000fa4 <writeInt>
	memcpy(*pptr, string, len);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f011 fc66 	bl	80128ec <memcpy>
	*pptr += len;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	441a      	add	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4638      	mov	r0, r7
 800103e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	dd12      	ble.n	800106e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ffa9 	bl	8000fa4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f011 fc46 	bl	80128ec <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	441a      	add	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800106c:	e00c      	b.n	8001088 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff ffbc 	bl	8000ff6 <writeCString>
}
 800107e:	e003      	b.n	8001088 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001080:	2100      	movs	r1, #0
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff ff8e 	bl	8000fa4 <writeInt>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f8a1 	bl	80001f0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e001      	b.n	80010b8 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	617b      	str	r3, [r7, #20]
	return rc;
 80010b8:	697b      	ldr	r3, [r7, #20]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <MQTTSerialize_publishLength>:
#if defined(MQTTV5)
int MQTTV5Serialize_publishLength(int qos, MQTTString topicName, int payloadlen, MQTTProperties* properties)
#else
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
#endif
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	4638      	mov	r0, r7
 80010cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 80010d4:	463b      	mov	r3, r7
 80010d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010da:	f7ff ffd9 	bl	8001090 <MQTTstrlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	1c9a      	adds	r2, r3, #2
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	4413      	add	r3, r2
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd02      	ble.n	80010f8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3302      	adds	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 80010f8:	697b      	ldr	r3, [r7, #20]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MQTTSerialize_publish>:
		MQTTString topicName, MQTTProperties* properties, unsigned char* payload, int payloadlen)
#else
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
#endif
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b08a      	sub	sp, #40	; 0x28
 8001106:	af02      	add	r7, sp, #8
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTV5Serialize_publishLength(qos, topicName, payloadlen, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff ffc8 	bl	80010c2 <MQTTSerialize_publishLength>
 8001132:	61b8      	str	r0, [r7, #24]
 8001134:	69b8      	ldr	r0, [r7, #24]
 8001136:	f7ff ff11 	bl	8000f5c <MQTTPacket_len>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4293      	cmp	r3, r2
 8001140:	da03      	bge.n	800114a <MQTTSerialize_publish+0x48>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001142:	f06f 0301 	mvn.w	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001148:	e04d      	b.n	80011e6 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 800114a:	7c3b      	ldrb	r3, [r7, #16]
 800114c:	2203      	movs	r2, #3
 800114e:	f362 1307 	bfi	r3, r2, #4, #4
 8001152:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	7c3b      	ldrb	r3, [r7, #16]
 800115e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001162:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	b2da      	uxtb	r2, r3
 800116c:	7c3b      	ldrb	r3, [r7, #16]
 800116e:	f362 0342 	bfi	r3, r2, #1, #2
 8001172:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001174:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	f362 0300 	bfi	r3, r2, #0, #1
 8001184:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001186:	7c3a      	ldrb	r2, [r7, #16]
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fef3 	bl	8000f7a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	69b9      	ldr	r1, [r7, #24]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fe8d 	bl	8000eb8 <MQTTPacket_encode>
 800119e:	4602      	mov	r2, r0
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80011a6:	f107 0014 	add.w	r0, r7, #20
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b0:	f7ff ff40 	bl	8001034 <writeMQTTString>

	if (qos > 0)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	dd06      	ble.n	80011c8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80011ba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff feee 	bl	8000fa4 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
		goto exit;
#endif

	memcpy(ptr, payload, payloadlen);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011ce:	4618      	mov	r0, r3
 80011d0:	f011 fb8c 	bl	80128ec <memcpy>
	ptr += payloadlen;
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011d8:	4413      	add	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80011e6:	69fb      	ldr	r3, [r7, #28]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <MQTTSerialize_subscribeLength>:
#if defined(MQTTV5)
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[], MQTTProperties* properties)
#else
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
#endif
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e013      	b.n	800122c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	461a      	mov	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001218:	f7ff ff3a 	bl	8001090 <MQTTstrlen>
 800121c:	4603      	mov	r3, r0
 800121e:	3303      	adds	r3, #3
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	4413      	add	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbe7      	blt.n	8001204 <MQTTSerialize_subscribeLength+0x14>
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001234:	68bb      	ldr	r3, [r7, #8]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <MQTTSerialize_subscribe>:
		MQTTProperties* properties, int count, MQTTString topicFilters[], int requestedQoSs[], struct subscribeOptions options[])
#else
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
#endif
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b08a      	sub	sp, #40	; 0x28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	4611      	mov	r1, r2
 800124a:	461a      	mov	r2, r3
 800124c:	460b      	mov	r3, r1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800126a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800126c:	f7ff ffc0 	bl	80011f0 <MQTTSerialize_subscribeLength>
 8001270:	61f8      	str	r0, [r7, #28]
 8001272:	69f8      	ldr	r0, [r7, #28]
 8001274:	f7ff fe72 	bl	8000f5c <MQTTPacket_len>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4293      	cmp	r3, r2
 800127e:	da03      	bge.n	8001288 <MQTTSerialize_subscribe+0x4a>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001280:	f06f 0301 	mvn.w	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001286:	e053      	b.n	8001330 <MQTTSerialize_subscribe+0xf2>
	}

	header.byte = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	743b      	strb	r3, [r7, #16]
	header.bits.type = SUBSCRIBE;
 800128c:	7c3b      	ldrb	r3, [r7, #16]
 800128e:	2208      	movs	r2, #8
 8001290:	f362 1307 	bfi	r3, r2, #4, #4
 8001294:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7c3b      	ldrb	r3, [r7, #16]
 80012a0:	f362 03c3 	bfi	r3, r2, #3, #1
 80012a4:	743b      	strb	r3, [r7, #16]
	header.bits.qos = 1;
 80012a6:	7c3b      	ldrb	r3, [r7, #16]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f362 0342 	bfi	r3, r2, #1, #2
 80012ae:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 80012b0:	7c3a      	ldrb	r2, [r7, #16]
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe5e 	bl	8000f7a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	69f9      	ldr	r1, [r7, #28]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fdf8 	bl	8000eb8 <MQTTPacket_encode>
 80012c8:	4602      	mov	r2, r0
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	4413      	add	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]

	writeInt(&ptr, packetid);
 80012d0:	88ba      	ldrh	r2, [r7, #4]
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe63 	bl	8000fa4 <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
	  goto exit;
#endif

	for (i = 0; i < count; ++i)
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	e01c      	b.n	800131e <MQTTSerialize_subscribe+0xe0>
	{
		unsigned char opts = requestedQoSs[i];
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	76fb      	strb	r3, [r7, #27]
			opts |= (options[i].noLocal << 2); /* 1 bit */
			opts |= (options[i].retainAsPublished << 3); /* 1 bit */
			opts |= (options[i].retainHandling << 4); /* 2 bits */
		}
#endif
		writeMQTTString(&ptr, topicFilters[i]);
 80012f0:	6a3a      	ldr	r2, [r7, #32]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	461a      	mov	r2, r3
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	4413      	add	r3, r2
 8001300:	f107 0014 	add.w	r0, r7, #20
 8001304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001306:	f7ff fe95 	bl	8001034 <writeMQTTString>
		writeChar(&ptr, opts);
 800130a:	7efa      	ldrb	r2, [r7, #27]
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe31 	bl	8000f7a <writeChar>
	for (i = 0; i < count; ++i)
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	3301      	adds	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	429a      	cmp	r2, r3
 8001324:	dbde      	blt.n	80012e4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001332:	4618      	mov	r0, r3
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <vLedWrite>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
void vLedWrite(led_t led, GPIO_PinState ledON) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b06      	cmp	r3, #6
 8001350:	d905      	bls.n	800135e <vLedWrite+0x22>
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <vLedWrite+0xc0>)
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <vLedWrite+0xc4>)
 8001356:	2117      	movs	r1, #23
 8001358:	482a      	ldr	r0, [pc, #168]	; (8001404 <vLedWrite+0xc8>)
 800135a:	f011 fa69 	bl	8012830 <__assert_func>

	// Pick the LED.
	switch (led) {
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d847      	bhi.n	80013f4 <vLedWrite+0xb8>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <vLedWrite+0x30>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	08001389 	.word	0x08001389
 8001370:	08001399 	.word	0x08001399
 8001374:	080013a9 	.word	0x080013a9
 8001378:	080013b9 	.word	0x080013b9
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013d7 	.word	0x080013d7
 8001384:	080013e5 	.word	0x080013e5
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledON);
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	461a      	mov	r2, r3
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	481d      	ldr	r0, [pc, #116]	; (8001408 <vLedWrite+0xcc>)
 8001392:	f003 ffa9 	bl	80052e8 <HAL_GPIO_WritePin>
			break;
 8001396:	e02d      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledON);
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	461a      	mov	r2, r3
 800139c:	2120      	movs	r1, #32
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f003 ffa1 	bl	80052e8 <HAL_GPIO_WritePin>
			break;
 80013a6:	e025      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ledON);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	461a      	mov	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f003 ff99 	bl	80052e8 <HAL_GPIO_WritePin>
		break;
 80013b6:	e01d      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ledON);
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	461a      	mov	r2, r3
 80013bc:	2110      	movs	r1, #16
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f003 ff91 	bl	80052e8 <HAL_GPIO_WritePin>
		break;
 80013c6:	e015      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ledON);
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	461a      	mov	r2, r3
 80013cc:	2104      	movs	r1, #4
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <vLedWrite+0xcc>)
 80013d0:	f003 ff8a 	bl	80052e8 <HAL_GPIO_WritePin>
		break;
 80013d4:	e00e      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ledON);
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	461a      	mov	r2, r3
 80013da:	2104      	movs	r1, #4
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <vLedWrite+0xd0>)
 80013de:	f003 ff83 	bl	80052e8 <HAL_GPIO_WritePin>
		break;
 80013e2:	e007      	b.n	80013f4 <vLedWrite+0xb8>
	case LED_7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ledON);
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <vLedWrite+0xcc>)
 80013ee:	f003 ff7b 	bl	80052e8 <HAL_GPIO_WritePin>
		break;
 80013f2:	bf00      	nop
	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08013e6c 	.word	0x08013e6c
 8001400:	080140bc 	.word	0x080140bc
 8001404:	08013e7c 	.word	0x08013e7c
 8001408:	48000400 	.word	0x48000400
 800140c:	48001c00 	.word	0x48001c00

08001410 <vLedToggle>:

/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 */
void vLedToggle(led_t led) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b06      	cmp	r3, #6
 800141e:	d905      	bls.n	800142c <vLedToggle+0x1c>
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <vLedToggle+0x9c>)
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <vLedToggle+0xa0>)
 8001424:	2147      	movs	r1, #71	; 0x47
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <vLedToggle+0xa4>)
 8001428:	f011 fa02 	bl	8012830 <__assert_func>

	// Pick the LED.
	switch (led) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d838      	bhi.n	80014a4 <vLedToggle+0x94>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <vLedToggle+0x28>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001455 	.word	0x08001455
 800143c:	08001461 	.word	0x08001461
 8001440:	0800146d 	.word	0x0800146d
 8001444:	08001479 	.word	0x08001479
 8001448:	08001485 	.word	0x08001485
 800144c:	0800148f 	.word	0x0800148f
 8001450:	08001499 	.word	0x08001499
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LEDO_Port, LEDO_Pin);
		break;*/
	case LED_1:
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <vLedToggle+0xa8>)
 800145a:	f003 ff5d 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 800145e:	e021      	b.n	80014a4 <vLedToggle+0x94>
	case LED_2:
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001460:	2120      	movs	r1, #32
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f003 ff57 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 800146a:	e01b      	b.n	80014a4 <vLedToggle+0x94>
	case LED_3:
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800146c:	2101      	movs	r1, #1
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f003 ff51 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 8001476:	e015      	b.n	80014a4 <vLedToggle+0x94>
	case LED_4:
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001478:	2110      	movs	r1, #16
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f003 ff4b 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 8001482:	e00f      	b.n	80014a4 <vLedToggle+0x94>
	case LED_5:
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8001484:	2104      	movs	r1, #4
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <vLedToggle+0xa8>)
 8001488:	f003 ff46 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 800148c:	e00a      	b.n	80014a4 <vLedToggle+0x94>
	case LED_6:
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 800148e:	2104      	movs	r1, #4
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <vLedToggle+0xac>)
 8001492:	f003 ff41 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 8001496:	e005      	b.n	80014a4 <vLedToggle+0x94>
	case LED_7:
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <vLedToggle+0xa8>)
 800149e:	f003 ff3b 	bl	8005318 <HAL_GPIO_TogglePin>
		break;
 80014a2:	bf00      	nop
	}

}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08013e6c 	.word	0x08013e6c
 80014b0:	080140c8 	.word	0x080140c8
 80014b4:	08013e7c 	.word	0x08013e7c
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48001c00 	.word	0x48001c00

080014c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00b      	beq.n	8001500 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014e8:	e000      	b.n	80014ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f9      	beq.n	80014ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	int i = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ffc7 	bl	80014c0 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x16>
	return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001550:	f002 fad7 	bl	8003b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001554:	f000 f83c 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001558:	f000 fcfa 	bl	8001f50 <MX_GPIO_Init>
  MX_ADC1_Init();
 800155c:	f000 f8e6 	bl	800172c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001560:	f000 f95e 	bl	8001820 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001564:	f000 f9c2 	bl	80018ec <MX_DCMI_Init>
  MX_FMC_Init();
 8001568:	f000 fc44 	bl	8001df4 <MX_FMC_Init>
  MX_I2C1_Init();
 800156c:	f000 f9f2 	bl	8001954 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001570:	f000 fa30 	bl	80019d4 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001574:	f000 fa6e 	bl	8001a54 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001578:	f000 fa9a 	bl	8001ab0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800157c:	f000 fac8 	bl	8001b10 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001580:	f000 faf6 	bl	8001b70 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001584:	f000 fb20 	bl	8001bc8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001588:	f000 fbc6 	bl	8001d18 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 800158c:	f000 fbf4 	bl	8001d78 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001590:	f00d fa16 	bl	800e9c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <main+0x70>)
 8001596:	2100      	movs	r1, #0
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <main+0x74>)
 800159a:	f00d fa7b 	bl	800ea94 <osThreadNew>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <main+0x78>)
 80015a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initTasks();
 80015a4:	f001 f8ec 	bl	8002780 <initTasks>


  printf("Iniciando\r\n");//simepre tiene que estar un primer printf para que funcione bien
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <main+0x7c>)
 80015aa:	f011 fd97 	bl	80130dc <puts>
  printf("Espere...\r\n");
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <main+0x80>)
 80015b0:	f011 fd94 	bl	80130dc <puts>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015b4:	f00d fa38 	bl	800ea28 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <main+0x6c>
 80015ba:	bf00      	nop
 80015bc:	080140d4 	.word	0x080140d4
 80015c0:	08002311 	.word	0x08002311
 80015c4:	2000e544 	.word	0x2000e544
 80015c8:	08013e9c 	.word	0x08013e9c
 80015cc:	08013ea8 	.word	0x08013ea8

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ba      	sub	sp, #232	; 0xe8
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f011 f98f 	bl	8012902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	228c      	movs	r2, #140	; 0x8c
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f011 f981 	bl	8012902 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001600:	f005 f868 	bl	80066d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <SystemClock_Config+0x150>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	4a45      	ldr	r2, [pc, #276]	; (8001720 <SystemClock_Config+0x150>)
 800160c:	f023 0318 	bic.w	r3, r3, #24
 8001610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001614:	2314      	movs	r3, #20
 8001616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800161a:	2301      	movs	r3, #1
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001638:	2301      	movs	r3, #1
 800163a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001660:	4618      	mov	r0, r3
 8001662:	f005 f999 	bl	8006998 <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800166c:	f000 fe6c 	bl	8002348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001670:	230f      	movs	r3, #15
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2303      	movs	r3, #3
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800168e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001692:	2104      	movs	r1, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fda5 	bl	80071e4 <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016a0:	f000 fe52 	bl	8002348 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <SystemClock_Config+0x154>)
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80016bc:	2300      	movs	r3, #0
 80016be:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016cc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80016ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016d8:	2301      	movs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016dc:	2318      	movs	r3, #24
 80016de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <SystemClock_Config+0x158>)
 80016ee:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 ffac 	bl	8007650 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80016fe:	f000 fe23 	bl	8002348 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001706:	f005 f803 	bl	8006710 <HAL_PWREx_ControlVoltageScaling>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8001710:	f000 fe1a 	bl	8002348 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001714:	f006 ff5a 	bl	80085cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001718:	bf00      	nop
 800171a:	37e8      	adds	r7, #232	; 0xe8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	000868e3 	.word	0x000868e3
 8001728:	01110000 	.word	0x01110000

0800172c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001750:	4a31      	ldr	r2, [pc, #196]	; (8001818 <MX_ADC1_Init+0xec>)
 8001752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MX_ADC1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_ADC1_Init+0xe8>)
 800176e:	2204      	movs	r2, #4
 8001770:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_ADC1_Init+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001780:	2201      	movs	r2, #1
 8001782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_ADC1_Init+0xe8>)
 800178e:	2201      	movs	r2, #1
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_ADC1_Init+0xe8>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_ADC1_Init+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b4:	4817      	ldr	r0, [pc, #92]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017b6:	f002 fb8f 	bl	8003ed8 <HAL_ADC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80017c0:	f000 fdc2 	bl	8002348 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017d0:	f003 f880 	bl	80048d4 <HAL_ADCEx_MultiModeConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017da:	f000 fdb5 	bl	8002348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_ADC1_Init+0xf0>)
 80017e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e2:	2306      	movs	r3, #6
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ea:	237f      	movs	r3, #127	; 0x7f
 80017ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ee:	2304      	movs	r3, #4
 80017f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_ADC1_Init+0xe8>)
 80017fc:	f002 fcc4 	bl	8004188 <HAL_ADC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001806:	f000 fd9f 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000e81c 	.word	0x2000e81c
 8001818:	50040000 	.word	0x50040000
 800181c:	10c00010 	.word	0x10c00010

08001820 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001838:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <MX_ADC3_Init+0xc4>)
 800183a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001856:	2204      	movs	r2, #4
 8001858:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800185c:	2200      	movs	r2, #0
 800185e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001862:	2200      	movs	r2, #0
 8001864:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001868:	2201      	movs	r2, #1
 800186a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001876:	2201      	movs	r2, #1
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001890:	2200      	movs	r2, #0
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_ADC3_Init+0xc0>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <MX_ADC3_Init+0xc0>)
 800189e:	f002 fb1b 	bl	8003ed8 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80018a8:	f000 fd4e 	bl	8002348 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_ADC3_Init+0xc8>)
 80018ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b0:	2306      	movs	r3, #6
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b8:	237f      	movs	r3, #127	; 0x7f
 80018ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018bc:	2304      	movs	r3, #4
 80018be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_ADC3_Init+0xc0>)
 80018ca:	f002 fc5d 	bl	8004188 <HAL_ADC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80018d4:	f000 fd38 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000e884 	.word	0x2000e884
 80018e4:	50040200 	.word	0x50040200
 80018e8:	36902000 	.word	0x36902000

080018ec <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_DCMI_Init+0x60>)
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <MX_DCMI_Init+0x64>)
 80018f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_DCMI_Init+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_DCMI_Init+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_DCMI_Init+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_DCMI_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_DCMI_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <MX_DCMI_Init+0x60>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_DCMI_Init+0x60>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_DCMI_Init+0x60>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_DCMI_Init+0x60>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_DCMI_Init+0x60>)
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_DCMI_Init+0x60>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_DCMI_Init+0x60>)
 800193a:	f003 f989 	bl	8004c50 <HAL_DCMI_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001944:	f000 fd00 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000e8ec 	.word	0x2000e8ec
 8001950:	50050000 	.word	0x50050000

08001954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_I2C1_Init+0x74>)
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <MX_I2C1_Init+0x78>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <MX_I2C1_Init+0x7c>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_I2C1_Init+0x74>)
 800196c:	2201      	movs	r2, #1
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C1_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001990:	f003 fcdb 	bl	800534a <HAL_I2C_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800199a:	f000 fcd5 	bl	8002348 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019a2:	f003 fd61 	bl	8005468 <HAL_I2CEx_ConfigAnalogFilter>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 fccc 	bl	8002348 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019b4:	f003 fda3 	bl	80054fe <HAL_I2CEx_ConfigDigitalFilter>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019be:	f000 fcc3 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000e5ac 	.word	0x2000e5ac
 80019cc:	40005400 	.word	0x40005400
 80019d0:	10909cec 	.word	0x10909cec

080019d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_I2C2_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_I2C2_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C2_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a10:	f003 fc9b 	bl	800534a <HAL_I2C_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a1a:	f000 fc95 	bl	8002348 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a22:	f003 fd21 	bl	8005468 <HAL_I2CEx_ConfigAnalogFilter>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a2c:	f000 fc8c 	bl	8002348 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a30:	2100      	movs	r1, #0
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_I2C2_Init+0x74>)
 8001a34:	f003 fd63 	bl	80054fe <HAL_I2CEx_ConfigDigitalFilter>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 fc83 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000e5f8 	.word	0x2000e5f8
 8001a4c:	40005800 	.word	0x40005800
 8001a50:	10909cec 	.word	0x10909cec

08001a54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_LPUART1_UART_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_LPUART1_UART_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_LPUART1_UART_Init+0x50>)
 8001a92:	f008 fb01 	bl	800a098 <HAL_UART_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 fc54 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000e718 	.word	0x2000e718
 8001aa8:	40008000 	.word	0x40008000
 8001aac:	00033324 	.word	0x00033324

08001ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_USART1_UART_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001af4:	f008 fad0 	bl	800a098 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001afe:	f000 fc23 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000e944 	.word	0x2000e944
 8001b0c:	40013800 	.word	0x40013800

08001b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_USART2_UART_Init+0x5c>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_USART2_UART_Init+0x58>)
 8001b54:	f008 faa0 	bl	800a098 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b5e:	f000 fbf3 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000ea98 	.word	0x2000ea98
 8001b6c:	40004400 	.word	0x40004400

08001b70 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <MX_QUADSPI_Init+0x54>)
 8001b78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b7c:	22ff      	movs	r2, #255	; 0xff
 8001b7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_QUADSPI_Init+0x50>)
 8001bac:	f004 fe26 	bl	80067fc <HAL_QSPI_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001bb6:	f000 fbc7 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000eb18 	.word	0x2000eb18
 8001bc4:	a0001000 	.word	0xa0001000

08001bc8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001bcc:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bce:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <MX_SAI1_Init+0x140>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bd8:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001be0:	2240      	movs	r2, #64	; 0x40
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001be4:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bf0:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bfc:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c02:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c08:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c0a:	4a40      	ldr	r2, [pc, #256]	; (8001d0c <MX_SAI1_Init+0x144>)
 8001c0c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c28:	2208      	movs	r2, #8
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c32:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001c5c:	4829      	ldr	r0, [pc, #164]	; (8001d04 <MX_SAI1_Init+0x13c>)
 8001c5e:	f006 ff91 	bl	8008b84 <HAL_SAI_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001c68:	f000 fb6e 	bl	8002348 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c6e:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <MX_SAI1_Init+0x14c>)
 8001c70:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_SAI1_Init+0x148>)
 8001cf2:	f006 ff47 	bl	8008b84 <HAL_SAI_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001cfc:	f000 fb24 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000ea14 	.word	0x2000ea14
 8001d08:	40015404 	.word	0x40015404
 8001d0c:	0002ee00 	.word	0x0002ee00
 8001d10:	2000e798 	.word	0x2000e798
 8001d14:	40015424 	.word	0x40015424

08001d18 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_SDMMC1_SD_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001d46:	480a      	ldr	r0, [pc, #40]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d48:	f007 f8c0 	bl	8008ecc <HAL_SD_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001d52:	f000 faf9 	bl	8002348 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_SDMMC1_SD_Init+0x58>)
 8001d5c:	f007 fb18 	bl	8009390 <HAL_SD_ConfigWideBusOperation>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001d66:	f000 faef 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000e644 	.word	0x2000e644
 8001d74:	40012800 	.word	0x40012800

08001d78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MX_SPI2_Init+0x74>)
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <MX_SPI2_Init+0x78>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_SPI2_Init+0x74>)
 8001d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_SPI2_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_SPI2_Init+0x74>)
 8001d92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_SPI2_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_SPI2_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_SPI2_Init+0x74>)
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_SPI2_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_SPI2_Init+0x74>)
 8001dd8:	f007 fe2c 	bl	8009a34 <HAL_SPI_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001de2:	f000 fab1 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000e548 	.word	0x2000e548
 8001df0:	40003800 	.word	0x40003800

08001df4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f010 fd7e 	bl	8012902 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e08:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e0c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e10:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <MX_FMC_Init+0x154>)
 8001e12:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001e14:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001e20:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e28:	2210      	movs	r2, #16
 8001e2a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e32:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e50:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001e72:	230f      	movs	r3, #15
 8001e74:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001e76:	23ff      	movs	r3, #255	; 0xff
 8001e78:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001e7a:	230f      	movs	r3, #15
 8001e7c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e82:	2311      	movs	r3, #17
 8001e84:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	482c      	ldr	r0, [pc, #176]	; (8001f44 <MX_FMC_Init+0x150>)
 8001e92:	f007 fe59 	bl	8009b48 <HAL_SRAM_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001e9c:	f000 fa54 	bl	8002348 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ea2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ea6:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <MX_FMC_Init+0x158>)
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <MX_FMC_Init+0x154>)
 8001eac:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <MX_FMC_Init+0x158>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <MX_FMC_Init+0x158>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_FMC_Init+0x158>)
 8001eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_FMC_Init+0x158>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_FMC_Init+0x158>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_FMC_Init+0x158>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_FMC_Init+0x158>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_FMC_Init+0x158>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001f0e:	230f      	movs	r3, #15
 8001f10:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8001f12:	23ff      	movs	r3, #255	; 0xff
 8001f14:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001f16:	230f      	movs	r3, #15
 8001f18:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001f1e:	2311      	movs	r3, #17
 8001f20:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001f26:	463b      	mov	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <MX_FMC_Init+0x158>)
 8001f2e:	f007 fe0b 	bl	8009b48 <HAL_SRAM_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001f38:	f000 fa06 	bl	8002348 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001f3c:	bf00      	nop
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2000e6c8 	.word	0x2000e6c8
 8001f48:	a0000104 	.word	0xa0000104
 8001f4c:	2000e9c4 	.word	0x2000e9c4

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f66:	4bb3      	ldr	r3, [pc, #716]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4ab2      	ldr	r2, [pc, #712]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4bb0      	ldr	r3, [pc, #704]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	4bad      	ldr	r3, [pc, #692]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4aac      	ldr	r2, [pc, #688]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4baa      	ldr	r3, [pc, #680]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	4ba7      	ldr	r3, [pc, #668]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4aa6      	ldr	r2, [pc, #664]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4ba4      	ldr	r3, [pc, #656]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4ba1      	ldr	r3, [pc, #644]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4aa0      	ldr	r2, [pc, #640]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b9e      	ldr	r3, [pc, #632]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b9b      	ldr	r3, [pc, #620]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a9a      	ldr	r2, [pc, #616]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b98      	ldr	r3, [pc, #608]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fde:	4b95      	ldr	r3, [pc, #596]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a94      	ldr	r2, [pc, #592]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fea:	4b92      	ldr	r3, [pc, #584]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001ff6:	f004 fbf1 	bl	80067dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a8d      	ldr	r2, [pc, #564]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	4b88      	ldr	r3, [pc, #544]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a87      	ldr	r2, [pc, #540]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	4b82      	ldr	r3, [pc, #520]	; (8002234 <MX_GPIO_Init+0x2e4>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a81      	ldr	r2, [pc, #516]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002030:	f043 0320 	orr.w	r3, r3, #32
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <MX_GPIO_Init+0x2e4>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2104      	movs	r1, #4
 8002046:	487c      	ldr	r0, [pc, #496]	; (8002238 <MX_GPIO_Init+0x2e8>)
 8002048:	f003 f94e 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2101      	movs	r1, #1
 8002050:	487a      	ldr	r0, [pc, #488]	; (800223c <MX_GPIO_Init+0x2ec>)
 8002052:	f003 f949 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	2143      	movs	r1, #67	; 0x43
 800205a:	4877      	ldr	r0, [pc, #476]	; (8002238 <MX_GPIO_Init+0x2e8>)
 800205c:	f003 f944 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|LEDx_Pin, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	21c0      	movs	r1, #192	; 0xc0
 8002064:	4876      	ldr	r0, [pc, #472]	; (8002240 <MX_GPIO_Init+0x2f0>)
 8002066:	f003 f93f 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	2131      	movs	r1, #49	; 0x31
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f003 f939 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED7_Pin, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f241 0104 	movw	r1, #4100	; 0x1004
 800207c:	4871      	ldr	r0, [pc, #452]	; (8002244 <MX_GPIO_Init+0x2f4>)
 800207e:	f003 f933 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	486e      	ldr	r0, [pc, #440]	; (8002244 <MX_GPIO_Init+0x2f4>)
 800208a:	f003 f92d 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800208e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002098:	2302      	movs	r3, #2
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	4866      	ldr	r0, [pc, #408]	; (800223c <MX_GPIO_Init+0x2ec>)
 80020a4:	f002 fe9c 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80020a8:	2347      	movs	r3, #71	; 0x47
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	485e      	ldr	r0, [pc, #376]	; (8002238 <MX_GPIO_Init+0x2e8>)
 80020c0:	f002 fe8e 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80020c4:	2330      	movs	r3, #48	; 0x30
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020d4:	2305      	movs	r3, #5
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4859      	ldr	r0, [pc, #356]	; (8002244 <MX_GPIO_Init+0x2f4>)
 80020e0:	f002 fe7e 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80020e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f6:	2305      	movs	r3, #5
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f002 fe6c 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	4847      	ldr	r0, [pc, #284]	; (800223c <MX_GPIO_Init+0x2ec>)
 8002120:	f002 fe5e 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002134:	2303      	movs	r3, #3
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	483f      	ldr	r0, [pc, #252]	; (800223c <MX_GPIO_Init+0x2ec>)
 8002140:	f002 fe4e 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8002144:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002156:	2303      	movs	r3, #3
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	4835      	ldr	r0, [pc, #212]	; (8002238 <MX_GPIO_Init+0x2e8>)
 8002162:	f002 fe3d 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002178:	2302      	movs	r3, #2
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	4619      	mov	r1, r3
 8002182:	4830      	ldr	r0, [pc, #192]	; (8002244 <MX_GPIO_Init+0x2f4>)
 8002184:	f002 fe2c 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	4827      	ldr	r0, [pc, #156]	; (8002238 <MX_GPIO_Init+0x2e8>)
 800219c:	f002 fe20 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_RST_Pin LEDx_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin|LEDx_Pin;
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	4822      	ldr	r0, [pc, #136]	; (8002240 <MX_GPIO_Init+0x2f0>)
 80021b8:	f002 fe12 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80021bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <MX_GPIO_Init+0x2f8>)
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	481e      	ldr	r0, [pc, #120]	; (800224c <MX_GPIO_Init+0x2fc>)
 80021d2:	f002 fe05 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80021d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80021e8:	230e      	movs	r3, #14
 80021ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f6:	f002 fdf3 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin PC1 */
  GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80021fa:	2303      	movs	r3, #3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021fe:	230b      	movs	r3, #11
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_GPIO_Init+0x2f0>)
 800220e:	f002 fde7 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8002212:	2304      	movs	r3, #4
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002222:	2306      	movs	r3, #6
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_GPIO_Init+0x2f0>)
 800222e:	f002 fdd7 	bl	8004de0 <HAL_GPIO_Init>
 8002232:	e00d      	b.n	8002250 <MX_GPIO_Init+0x300>
 8002234:	40021000 	.word	0x40021000
 8002238:	48001c00 	.word	0x48001c00
 800223c:	48002000 	.word	0x48002000
 8002240:	48000800 	.word	0x48000800
 8002244:	48000400 	.word	0x48000400
 8002248:	10110000 	.word	0x10110000
 800224c:	48001800 	.word	0x48001800

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8002250:	2320      	movs	r3, #32
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <MX_GPIO_Init+0x3b0>)
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4828      	ldr	r0, [pc, #160]	; (8002304 <MX_GPIO_Init+0x3b4>)
 8002264:	f002 fdbc 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED4_Pin;
 8002268:	2331      	movs	r3, #49	; 0x31
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002282:	f002 fdad 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8002286:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002290:	2302      	movs	r3, #2
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	4619      	mov	r1, r3
 800229a:	481b      	ldr	r0, [pc, #108]	; (8002308 <MX_GPIO_Init+0x3b8>)
 800229c:	f002 fda0 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 80022a0:	2302      	movs	r3, #2
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022a4:	230b      	movs	r3, #11
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f002 fd93 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED7_Pin;
 80022ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	480e      	ldr	r0, [pc, #56]	; (800230c <MX_GPIO_Init+0x3bc>)
 80022d4:	f002 fd84 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80022de:	2311      	movs	r3, #17
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_GPIO_Init+0x3bc>)
 80022f2:	f002 fd75 	bl	8004de0 <HAL_GPIO_Init>

}
 80022f6:	bf00      	nop
 80022f8:	3738      	adds	r7, #56	; 0x38
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	10110000 	.word	0x10110000
 8002304:	48000800 	.word	0x48000800
 8002308:	48001400 	.word	0x48001400
 800230c:	48000400 	.word	0x48000400

08002310 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002318:	f00f fc90 	bl	8011c3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1 / portTICK_PERIOD_MS);
 800231c:	2001      	movs	r0, #1
 800231e:	f00c fc5f 	bl	800ebe0 <osDelay>
 8002322:	e7fb      	b.n	800231c <StartDefaultTask+0xc>

08002324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002336:	f001 fbfd 	bl	8003b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40001000 	.word	0x40001000

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <mqtt_Connect>:
static unsigned char buffer[128];
//int32_t transport_socket;
static int strpos(char *hay, char *needle, int offset);
static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght);

ESP8266_StatusTypeDef mqtt_Connect(void) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b09a      	sub	sp, #104	; 0x68
 800235c:	af00      	add	r7, sp, #0
	//unsigned char buffer[128];
	//MQTTTransport transporter;
	//int32_t result;
	int32_t length;

	ESP8266_StatusTypeDef Status = ESP8266_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	int32_t internalState = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	663b      	str	r3, [r7, #96]	; 0x60
	int32_t trial = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	65fb      	str	r3, [r7, #92]	; 0x5c
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <mqtt_Connect+0x98>)
 800236e:	463b      	mov	r3, r7
 8002370:	4611      	mov	r1, r2
 8002372:	2258      	movs	r2, #88	; 0x58
 8002374:	4618      	mov	r0, r3
 8002376:	f010 fab9 	bl	80128ec <memcpy>

	while (trial < TRIAL_CONNECTION_TIME) {
 800237a:	e02f      	b.n	80023dc <mqtt_Connect+0x84>
		switch (internalState) {
 800237c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800237e:	2b01      	cmp	r3, #1
 8002380:	d02c      	beq.n	80023dc <mqtt_Connect+0x84>
 8002382:	2b02      	cmp	r3, #2
 8002384:	d024      	beq.n	80023d0 <mqtt_Connect+0x78>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d000      	beq.n	800238c <mqtt_Connect+0x34>
 800238a:	e027      	b.n	80023dc <mqtt_Connect+0x84>
			//transporter.state = 0;

			// Populate the connect struct.


			connectData.MQTTVersion = 3; //4
 800238c:	2303      	movs	r3, #3
 800238e:	723b      	strb	r3, [r7, #8]
			connectData.clientID.cstring = "fede";
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <mqtt_Connect+0x9c>)
 8002392:	60fb      	str	r3, [r7, #12]
			connectData.keepAliveInterval = CONNECTION_KEEPALIVE_S * 2;
 8002394:	2378      	movs	r3, #120	; 0x78
 8002396:	833b      	strh	r3, [r7, #24]
			//connectData.willFlag = 1;
			//connectData.will.qos = 2;
			length = MQTTSerialize_connect(buffer, sizeof(buffer),
 8002398:	463b      	mov	r3, r7
 800239a:	461a      	mov	r2, r3
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	4816      	ldr	r0, [pc, #88]	; (80023f8 <mqtt_Connect+0xa0>)
 80023a0:	f7fe fc96 	bl	8000cd0 <MQTTSerialize_connect>
 80023a4:	65b8      	str	r0, [r7, #88]	; 0x58
					&connectData);

			// Send CONNECT to the mqtt broker.

			Status = ESP_SendData(buffer, length);
 80023a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a8:	4619      	mov	r1, r3
 80023aa:	4813      	ldr	r0, [pc, #76]	; (80023f8 <mqtt_Connect+0xa0>)
 80023ac:	f7fe fa74 	bl	8000898 <ESP_SendData>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			//if ((result = transport_sendPacketBuffer(transport_socket, buffer,length)) == length) {
			if (Status == ESP8266_OK) {
 80023b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <mqtt_Connect+0x6c>
				//Status = ESP8266_OK;
				internalState = 2;			//internalState++;
 80023be:	2302      	movs	r3, #2
 80023c0:	663b      	str	r3, [r7, #96]	; 0x60
 80023c2:	e00b      	b.n	80023dc <mqtt_Connect+0x84>
			} else {
				//Status = ESP8266_ERROR;
				internalState = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	663b      	str	r3, [r7, #96]	; 0x60
				trial++;
 80023c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ca:	3301      	adds	r3, #1
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			break;
 80023ce:	e005      	b.n	80023dc <mqtt_Connect+0x84>
					break;
				}
			}*/
			break;
		case 2:
			Status = ESP8266_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			trial = TRIAL_CONNECTION_TIME;
 80023d6:	2305      	movs	r3, #5
 80023d8:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 80023da:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 80023dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023de:	2b04      	cmp	r3, #4
 80023e0:	ddcc      	ble.n	800237c <mqtt_Connect+0x24>
		}
	}

	return Status;
 80023e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3768      	adds	r7, #104	; 0x68
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08013ebc 	.word	0x08013ebc
 80023f4:	08013eb4 	.word	0x08013eb4
 80023f8:	20000448 	.word	0x20000448

080023fc <mqtt_Publisher>:

ESP8266_StatusTypeDef mqtt_Publisher(char *topic, uint8_t data) {
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b095      	sub	sp, #84	; 0x54
 8002400:	af08      	add	r7, sp, #32
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
	//int32_t result;
	int32_t length;
	//uint32_t tickStart;// = HAL_GetTick();


	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Populate the publish message.
	MQTTString topicString = MQTTString_initializer;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
	topicString.cstring = topic;//"test/rgb";
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	61bb      	str	r3, [r7, #24]
	unsigned char payload[16];
	int qos = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
			topicString, payload,
			(length = sprintf((char *)payload, "%d%c%c", (int) data , '\r', '\n')));
 8002422:	78fa      	ldrb	r2, [r7, #3]
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
 8002424:	f107 0008 	add.w	r0, r7, #8
 8002428:	230a      	movs	r3, #10
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	230d      	movs	r3, #13
 800242e:	4914      	ldr	r1, [pc, #80]	; (8002480 <mqtt_Publisher+0x84>)
 8002430:	f010 fe6c 	bl	801310c <siprintf>
 8002434:	6278      	str	r0, [r7, #36]	; 0x24
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	9306      	str	r3, [sp, #24]
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	9305      	str	r3, [sp, #20]
 8002440:	ac02      	add	r4, sp, #8
 8002442:	f107 0318 	add.w	r3, r7, #24
 8002446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800244a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800244e:	2300      	movs	r3, #0
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	4809      	ldr	r0, [pc, #36]	; (8002484 <mqtt_Publisher+0x88>)
 800245e:	f7fe fe50 	bl	8001102 <MQTTSerialize_publish>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

	// Send PUBLISH to the mqtt broker.

	Status = ESP_SendData(buffer, length);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	4619      	mov	r1, r3
 8002468:	4806      	ldr	r0, [pc, #24]	; (8002484 <mqtt_Publisher+0x88>)
 800246a:	f7fe fa15 	bl	8000898 <ESP_SendData>
 800246e:	4603      	mov	r3, r0
 8002470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} else {
		// Start over.
		Status = ESP8266_ERROR;
	}*/

	return Status;
 8002474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002478:	4618      	mov	r0, r3
 800247a:	3734      	adds	r7, #52	; 0x34
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	08013f14 	.word	0x08013f14
 8002484:	20000448 	.word	0x20000448

08002488 <mqtt_SubscriberPacket>:

	}
	return Status;
}

ESP8266_StatusTypeDef mqtt_SubscriberPacket(char *topic) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af04      	add	r7, sp, #16
 800248e:	6078      	str	r0, [r7, #4]
	int length;

		ESP8266_StatusTypeDef Status = ESP8266_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]

		// Populate the subscribe message.
		MQTTString topicFilters[1] = { MQTTString_initializer };
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
		topicFilters[0].cstring = topic;//"test/rgb";
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
		int requestedQoSs[1] = { 0 };
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
		length = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1,
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2301      	movs	r3, #1
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	2200      	movs	r2, #0
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	4808      	ldr	r0, [pc, #32]	; (80024e0 <mqtt_SubscriberPacket+0x58>)
 80024c0:	f7fe febd 	bl	800123e <MQTTSerialize_subscribe>
 80024c4:	61b8      	str	r0, [r7, #24]
				topicFilters, requestedQoSs);

		// Send SUBSCRIBE to the mqtt broker.
		Status = ESP_SendData(buffer, length);
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <mqtt_SubscriberPacket+0x58>)
 80024cc:	f7fe f9e4 	bl	8000898 <ESP_SendData>
 80024d0:	4603      	mov	r3, r0
 80024d2:	77fb      	strb	r3, [r7, #31]
		return Status;
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000448 	.word	0x20000448

080024e4 <mqtt_SubscriberReceive>:

	return Status;
}*/


ESP8266_StatusTypeDef mqtt_SubscriberReceive(char topic[], int32_t* pData) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0a4      	sub	sp, #144	; 0x90
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint32_t RetLength;
	uint8_t dato[MQTT_BUFFERSIZE];

	//alocate memory for the receiving buffer
	//dato = (uint8_t*) malloc(MQTT_BUFFERSIZE * sizeof(uint8_t));
	memset(dato, '\0', MQTT_BUFFERSIZE);
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f010 fa00 	bl	8012902 <memset>
	ESP_ReceiveData(dato, MQTT_BUFFERSIZE, &RetLength);
 8002502:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fa03 	bl	8000918 <ESP_ReceiveData>
	*(pData) = findIntData(topic, dato, RetLength);
 8002512:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f85b 	bl	80025d8 <findIntData>
 8002522:	4602      	mov	r2, r0
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	601a      	str	r2, [r3, #0]
	//free(dato);

	return Status;
 8002528:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800252c:	4618      	mov	r0, r3
 800252e:	3790      	adds	r7, #144	; 0x90
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <strpos>:





static int strpos(char *hay, char *needle, int offset) {
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	466b      	mov	r3, sp
 8002542:	461e      	mov	r6, r3
	char haystack[strlen(hay)];
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7fd fe53 	bl	80001f0 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	3b01      	subs	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	4601      	mov	r1, r0
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	00d4      	lsls	r4, r2, #3
 8002560:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002564:	00cb      	lsls	r3, r1, #3
 8002566:	4601      	mov	r1, r0
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	00d4      	lsls	r4, r2, #3
 8002576:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800257a:	00cb      	lsls	r3, r1, #3
 800257c:	1dc3      	adds	r3, r0, #7
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	ebad 0d03 	sub.w	sp, sp, r3
 8002586:	466b      	mov	r3, sp
 8002588:	3300      	adds	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
	strncpy(haystack, hay + offset, strlen(hay) - offset);
 800258c:	69bc      	ldr	r4, [r7, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	18d5      	adds	r5, r2, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7fd fe2b 	bl	80001f0 <strlen>
 800259a:	4602      	mov	r2, r0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4629      	mov	r1, r5
 80025a4:	4620      	mov	r0, r4
 80025a6:	f010 fdd1 	bl	801314c <strncpy>
	char *p = strstr(haystack, needle);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f010 fde1 	bl	8013176 <strstr>
 80025b4:	6178      	str	r0, [r7, #20]
	if (p)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <strpos+0x94>
		return p - haystack + offset;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	1a9a      	subs	r2, r3, r2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	e001      	b.n	80025cc <strpos+0x98>
	return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025cc:	46b5      	mov	sp, r6
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025d8 <findIntData>:

static int32_t findIntData(char topic[], uint8_t *data, uint32_t lenght) {
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b091      	sub	sp, #68	; 0x44
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	466b      	mov	r3, sp
 80025e6:	461d      	mov	r5, r3
	uint8_t newdata[lenght];
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4603      	mov	r3, r0
 80025ec:	3b01      	subs	r3, #1
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
 80025f0:	4601      	mov	r1, r0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	00d4      	lsls	r4, r2, #3
 8002600:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002604:	00cb      	lsls	r3, r1, #3
 8002606:	4601      	mov	r1, r0
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	00d4      	lsls	r4, r2, #3
 8002616:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800261a:	00cb      	lsls	r3, r1, #3
 800261c:	1dc3      	adds	r3, r0, #7
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	ebad 0d03 	sub.w	sp, sp, r3
 8002626:	466b      	mov	r3, sp
 8002628:	3300      	adds	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t i = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t data_begin;
	int32_t data_end;

	/* remove \0 */
	memset((char*) newdata, '\0', lenght);
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f010 f961 	bl	8012902 <memset>
	for (i = 0; i < lenght; i++) {
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
 8002644:	e011      	b.n	800266a <findIntData+0x92>
		if (*(data + i) != '\0') {
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <findIntData+0x8c>
			newdata[j++] = *(data + i);
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	441a      	add	r2, r3
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	1c59      	adds	r1, r3, #1
 800265c:	63b9      	str	r1, [r7, #56]	; 0x38
 800265e:	7811      	ldrb	r1, [r2, #0]
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < lenght; i++) {
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	3301      	adds	r3, #1
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3e9      	bcc.n	8002646 <findIntData+0x6e>
		}
	}
	data_begin = strpos((char*)newdata, (char*)topic, 0);	//get index where string topic begins
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	2200      	movs	r2, #0
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff5b 	bl	8002534 <strpos>
 800267e:	62b8      	str	r0, [r7, #40]	; 0x28
	data_end = strpos((char*)newdata, (char*)END_STRING_R_N, 0);		//get index where \r\n ends
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2200      	movs	r2, #0
 8002684:	493c      	ldr	r1, [pc, #240]	; (8002778 <findIntData+0x1a0>)
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff54 	bl	8002534 <strpos>
 800268c:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(data_end == -1 && data_begin != -1){
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d10a      	bne.n	80026ac <findIntData+0xd4>
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d006      	beq.n	80026ac <findIntData+0xd4>
		data_end = strpos((char*)newdata, (char*)END_STRING_N, 0);		//get index where \n ends
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	2200      	movs	r2, #0
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <findIntData+0x1a4>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff45 	bl	8002534 <strpos>
 80026aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	}


	if (data_begin != -1 && data_end != -1) {
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d05a      	beq.n	800276a <findIntData+0x192>
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ba:	d056      	beq.n	800276a <findIntData+0x192>
 80026bc:	466b      	mov	r3, sp
 80026be:	461e      	mov	r6, r3
		i = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
		int value = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t index_start = data_begin + strlen(topic);
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7fd fd91 	bl	80001f0 <strlen>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	4413      	add	r3, r2
 80026d4:	623b      	str	r3, [r7, #32]
		int32_t st_lenght = data_end - index_start + 1; //sume uno porque el atoi me convertia mal si el st tenia un solo valor, es por eso que inicializo el primer elemtento del arreglo con el '0'
 80026d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
		uint8_t st[st_lenght];
 80026e0:	69f8      	ldr	r0, [r7, #28]
 80026e2:	1e43      	subs	r3, r0, #1
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	4603      	mov	r3, r0
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	00d4      	lsls	r4, r2, #3
 80026f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80026fc:	00cb      	lsls	r3, r1, #3
 80026fe:	4603      	mov	r3, r0
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	00d4      	lsls	r4, r2, #3
 8002710:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002714:	00cb      	lsls	r3, r1, #3
 8002716:	4603      	mov	r3, r0
 8002718:	3307      	adds	r3, #7
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	ebad 0d03 	sub.w	sp, sp, r3
 8002722:	466b      	mov	r3, sp
 8002724:	3300      	adds	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
		st[0] = '0';//inicializado en cero el primer elemento para que el atoi convierta los numero como el 1, 2 ....9 bien sino los convertia 10, 20 ..... 90
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2230      	movs	r2, #48	; 0x30
 800272c:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 800272e:	2301      	movs	r3, #1
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	e00e      	b.n	8002752 <findIntData+0x17a>
			st[i] = *(newdata + index_start + i - 1);
 8002734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002736:	6a39      	ldr	r1, [r7, #32]
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	440b      	add	r3, r1
 800273c:	3b01      	subs	r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	7819      	ldrb	r1, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	4413      	add	r3, r2
 8002748:	460a      	mov	r2, r1
 800274a:	701a      	strb	r2, [r3, #0]
		for (i = 1; i < st_lenght; i++) {
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	3301      	adds	r3, #1
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002756:	429a      	cmp	r2, r3
 8002758:	d3ec      	bcc.n	8002734 <findIntData+0x15c>
		}

		value = atoi((char*) st);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4618      	mov	r0, r3
 800275e:	f010 f885 	bl	801286c <atoi>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24

		return value;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	46b5      	mov	sp, r6
 8002768:	e001      	b.n	800276e <findIntData+0x196>

	}
	return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276e:	46ad      	mov	sp, r5

}
 8002770:	4618      	mov	r0, r3
 8002772:	3744      	adds	r7, #68	; 0x44
 8002774:	46bd      	mov	sp, r7
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	080140f8 	.word	0x080140f8
 800277c:	080140fc 	.word	0x080140fc

08002780 <initTasks>:
void ledTask(void *argument);
void pubTask(void *argument);
void subTask(void *argument);
void analizeTask(void *argument);

void initTasks(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8

	HAL_UART_F_Init();
 8002786:	f001 f951 	bl	8003a2c <HAL_UART_F_Init>

	/* Led initialize */
	int i;
	uint8_t flag_error_mem = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < LED_COUNT; i++){
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e008      	b.n	80027a6 <initTasks+0x26>
		vLedWrite(i, GPIO_PIN_RESET);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fdce 	bl	800133c <vLedWrite>
	for(i = 0; i < LED_COUNT; i++){
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	ddf3      	ble.n	8002794 <initTasks+0x14>
	}

	xSemaphoreMutexUart = xSemaphoreCreateMutex();
 80027ac:	2001      	movs	r0, #1
 80027ae:	f00c fc84 	bl	800f0ba <xQueueCreateMutex>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <initTasks+0xcc>)
 80027b6:	601a      	str	r2, [r3, #0]
	//xSemaphorePub = xSemaphoreCreateBinary();

	xQueueDataRx = xQueueCreate(5, sizeof(int32_t));
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	2005      	movs	r0, #5
 80027be:	f00c fc00 	bl	800efc2 <xQueueGenericCreate>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <initTasks+0xd0>)
 80027c6:	601a      	str	r2, [r3, #0]
	//xSemaphorePub != NULL && xSemaphoreSub != NULL &&
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <initTasks+0xcc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02b      	beq.n	8002828 <initTasks+0xa8>
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <initTasks+0xd0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d027      	beq.n	8002828 <initTasks+0xa8>
		BaseType_t res = xTaskCreate(wifiConnectTask, "wifi", STACK_SIZE, 0,
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <initTasks+0xd4>)
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2320      	movs	r3, #32
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e6:	491c      	ldr	r1, [pc, #112]	; (8002858 <initTasks+0xd8>)
 80027e8:	481c      	ldr	r0, [pc, #112]	; (800285c <initTasks+0xdc>)
 80027ea:	f00d fa59 	bl	800fca0 <xTaskCreate>
 80027ee:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, &wifiTask);
		if (res != pdPASS) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d004      	beq.n	8002800 <initTasks+0x80>
			printf("error creacion de tarea wifi\r\n");
 80027f6:	481a      	ldr	r0, [pc, #104]	; (8002860 <initTasks+0xe0>)
 80027f8:	f010 fc70 	bl	80130dc <puts>
			flag_error_mem = 1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(ledTask, "led", 128, 0,
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2318      	movs	r3, #24
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	4915      	ldr	r1, [pc, #84]	; (8002864 <initTasks+0xe4>)
 800280e:	4816      	ldr	r0, [pc, #88]	; (8002868 <initTasks+0xe8>)
 8002810:	f00d fa46 	bl	800fca0 <xTaskCreate>
 8002814:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityNormal, 0);
		if (res != pdPASS) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d00b      	beq.n	8002834 <initTasks+0xb4>
			printf("error creacion de tarea led\r\n");
 800281c:	4813      	ldr	r0, [pc, #76]	; (800286c <initTasks+0xec>)
 800281e:	f010 fc5d 	bl	80130dc <puts>
			flag_error_mem = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	72fb      	strb	r3, [r7, #11]
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 8002826:	e005      	b.n	8002834 <initTasks+0xb4>
			printf("error creacion de tarea analize\r\n");
			flag_error_mem = 1;

		}*/
	} else {
		printf("error creacion de semaforo\r\n");
 8002828:	4811      	ldr	r0, [pc, #68]	; (8002870 <initTasks+0xf0>)
 800282a:	f010 fc57 	bl	80130dc <puts>
		flag_error_mem = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	72fb      	strb	r3, [r7, #11]
 8002832:	e000      	b.n	8002836 <initTasks+0xb6>
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL) {
 8002834:	bf00      	nop
	}

	if(flag_error_mem == 1)
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d103      	bne.n	8002844 <initTasks+0xc4>
		vLedWrite(LED_4, GPIO_PIN_SET);
 800283c:	2101      	movs	r1, #1
 800283e:	2003      	movs	r0, #3
 8002840:	f7fe fd7c 	bl	800133c <vLedWrite>

}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000eb6c 	.word	0x2000eb6c
 8002850:	2000eb64 	.word	0x2000eb64
 8002854:	2000eb70 	.word	0x2000eb70
 8002858:	08013f28 	.word	0x08013f28
 800285c:	08002875 	.word	0x08002875
 8002860:	08013f30 	.word	0x08013f30
 8002864:	08013f50 	.word	0x08013f50
 8002868:	08002b21 	.word	0x08002b21
 800286c:	08013f54 	.word	0x08013f54
 8002870:	08013f74 	.word	0x08013f74

08002874 <wifiConnectTask>:

void wifiConnectTask(void *argument) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
	//uint8_t info[60] = "Conectando a wifi, Espere por favor.. \r\n";
	ESP8266_StatusTypeDef Status;
	//ESP8266_ConnectionInfoTypeDef connection_info;
	//esp_state state_esp = INIT;
	//esp8266_broker_setup(&connection_info);
	int internalState = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
	TickType_t t = xTaskGetTickCount();
 8002880:	f00d fd80 	bl	8010384 <xTaskGetTickCount>
 8002884:	4603      	mov	r3, r0
 8002886:	60bb      	str	r3, [r7, #8]
	printf("Conectando a wifi, Espere por favor.. \r\n");
 8002888:	4890      	ldr	r0, [pc, #576]	; (8002acc <wifiConnectTask+0x258>)
 800288a:	f010 fc27 	bl	80130dc <puts>
	for (;;) {
		switch (internalState) {
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b06      	cmp	r3, #6
 8002892:	f200 8117 	bhi.w	8002ac4 <wifiConnectTask+0x250>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <wifiConnectTask+0x28>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028b9 	.word	0x080028b9
 80028a0:	080028f7 	.word	0x080028f7
 80028a4:	0800292b 	.word	0x0800292b
 80028a8:	0800295b 	.word	0x0800295b
 80028ac:	080029a3 	.word	0x080029a3
 80028b0:	080029d1 	.word	0x080029d1
 80028b4:	08002aa7 	.word	0x08002aa7
		case 0:
			// Turn the LED off.
			vLedWrite(LED_2, GPIO_PIN_RESET);
 80028b8:	2100      	movs	r1, #0
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe fd3e 	bl	800133c <vLedWrite>
			// Connect to wifi (restore to default first).
			Status = ESP_ConnectWifi(true, WIFI_AP_SSID, WIFI_AP_PASS);
 80028c0:	4a83      	ldr	r2, [pc, #524]	; (8002ad0 <wifiConnectTask+0x25c>)
 80028c2:	4984      	ldr	r1, [pc, #528]	; (8002ad4 <wifiConnectTask+0x260>)
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7fd febd 	bl	8000644 <ESP_ConnectWifi>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
			if (Status == ESP8266_OK) {
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <wifiConnectTask+0x70>
				// To the next state.
				internalState++;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80028da:	2100      	movs	r1, #0
 80028dc:	2002      	movs	r0, #2
 80028de:	f7fe fd2d 	bl	800133c <vLedWrite>
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}

			break;
 80028e2:	e0e6      	b.n	8002ab2 <wifiConnectTask+0x23e>
				if (Status == ESP8266_ERROR)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 80e3 	bne.w	8002ab2 <wifiConnectTask+0x23e>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80028ec:	2101      	movs	r1, #1
 80028ee:	2002      	movs	r0, #2
 80028f0:	f7fe fd24 	bl	800133c <vLedWrite>
			break;
 80028f4:	e0dd      	b.n	8002ab2 <wifiConnectTask+0x23e>
		case 1:
			// Wait 1sec.
			Status = ESP_Delay(1000);
 80028f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028fa:	f7fd fe75 	bl	80005e8 <ESP_Delay>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
			if (Status == ESP8266_OK) {
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <wifiConnectTask+0xa4>
				// To the next state.
				internalState++;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 800290e:	2100      	movs	r1, #0
 8002910:	2002      	movs	r0, #2
 8002912:	f7fe fd13 	bl	800133c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8002916:	e0ce      	b.n	8002ab6 <wifiConnectTask+0x242>
				if (Status == ESP8266_ERROR)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f040 80cb 	bne.w	8002ab6 <wifiConnectTask+0x242>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002920:	2101      	movs	r1, #1
 8002922:	2002      	movs	r0, #2
 8002924:	f7fe fd0a 	bl	800133c <vLedWrite>
			break;
 8002928:	e0c5      	b.n	8002ab6 <wifiConnectTask+0x242>
		case 2:
			// Check the wifi connection status.
			Status = ESP_IsConnectedWifi();
 800292a:	f7fd ff33 	bl	8000794 <ESP_IsConnectedWifi>
 800292e:	4603      	mov	r3, r0
 8002930:	73fb      	strb	r3, [r7, #15]
			if (Status == ESP8266_OK) {
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <wifiConnectTask+0xd4>
				// To the next state.
				internalState++;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 800293e:	2100      	movs	r1, #0
 8002940:	2002      	movs	r0, #2
 8002942:	f7fe fcfb 	bl	800133c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8002946:	e0b8      	b.n	8002aba <wifiConnectTask+0x246>
				if (Status == ESP8266_ERROR)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 80b5 	bne.w	8002aba <wifiConnectTask+0x246>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002950:	2101      	movs	r1, #1
 8002952:	2002      	movs	r0, #2
 8002954:	f7fe fcf2 	bl	800133c <vLedWrite>
			break;
 8002958:	e0af      	b.n	8002aba <wifiConnectTask+0x246>
		case 3:
			// Start TCP connection.
			Status = ESP_StartTCP(network_host, network_port, network_keepalive,
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <wifiConnectTask+0x264>)
 800295c:	8819      	ldrh	r1, [r3, #0]
 800295e:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <wifiConnectTask+0x268>)
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <wifiConnectTask+0x26c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	485c      	ldr	r0, [pc, #368]	; (8002ae4 <wifiConnectTask+0x270>)
 8002972:	f7fd ff1d 	bl	80007b0 <ESP_StartTCP>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]
					network_ssl);
			if (Status == ESP8266_OK) {
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <wifiConnectTask+0x11c>
				// To the next state.
				internalState++;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8002986:	2100      	movs	r1, #0
 8002988:	2002      	movs	r0, #2
 800298a:	f7fe fcd7 	bl	800133c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 800298e:	e096      	b.n	8002abe <wifiConnectTask+0x24a>
				if (Status == ESP8266_ERROR)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f040 8093 	bne.w	8002abe <wifiConnectTask+0x24a>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8002998:	2101      	movs	r1, #1
 800299a:	2002      	movs	r0, #2
 800299c:	f7fe fcce 	bl	800133c <vLedWrite>
			break;
 80029a0:	e08d      	b.n	8002abe <wifiConnectTask+0x24a>
		case 4:
			// Send the mqtt data.
			//Status = ESP82_Send(address, bytes);
			Status = mqtt_Connect();
 80029a2:	f7ff fcd9 	bl	8002358 <mqtt_Connect>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]
			if (Status == ESP8266_OK) {
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <wifiConnectTask+0x14c>
				internalState++;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80029b6:	2100      	movs	r1, #0
 80029b8:	2002      	movs	r0, #2
 80029ba:	f7fe fcbf 	bl	800133c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80029be:	e080      	b.n	8002ac2 <wifiConnectTask+0x24e>
				if (Status == ESP8266_ERROR)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d17d      	bne.n	8002ac2 <wifiConnectTask+0x24e>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80029c6:	2101      	movs	r1, #1
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7fe fcb7 	bl	800133c <vLedWrite>
			break;
 80029ce:	e078      	b.n	8002ac2 <wifiConnectTask+0x24e>
		case 5:
			mqtt_SubscriberPacket(topic_sub);
 80029d0:	4845      	ldr	r0, [pc, #276]	; (8002ae8 <wifiConnectTask+0x274>)
 80029d2:	f7ff fd59 	bl	8002488 <mqtt_SubscriberPacket>
			//Status = mqtt_SubscriberPacket();
			//Status = mqtt_Publisher();
			vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	f241 3188 	movw	r1, #5000	; 0x1388
 80029de:	4618      	mov	r0, r3
 80029e0:	f00d fb14 	bl	801000c <vTaskDelayUntil>
			//Status = mqtt_Subscriber();
			//if (Status == ESP8266_OK) {
			vLedWrite(LED_2, GPIO_PIN_SET);
 80029e4:	2101      	movs	r1, #1
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7fe fca8 	bl	800133c <vLedWrite>
			//xSemaphoreGive(xSemaphorePub);
			//xSemaphoreGive(xSemaphoreSub);



			xSemaphoreSub = xSemaphoreCreateBinary();
 80029ec:	2203      	movs	r2, #3
 80029ee:	2100      	movs	r1, #0
 80029f0:	2001      	movs	r0, #1
 80029f2:	f00c fae6 	bl	800efc2 <xQueueGenericCreate>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <wifiConnectTask+0x278>)
 80029fa:	601a      	str	r2, [r3, #0]
			xSemaphorePub = xSemaphoreCreateBinary();
 80029fc:	2203      	movs	r2, #3
 80029fe:	2100      	movs	r1, #0
 8002a00:	2001      	movs	r0, #1
 8002a02:	f00c fade 	bl	800efc2 <xQueueGenericCreate>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <wifiConnectTask+0x27c>)
 8002a0a:	601a      	str	r2, [r3, #0]

			if(xSemaphoreSub != NULL && xSemaphorePub != NULL){
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <wifiConnectTask+0x278>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d041      	beq.n	8002a98 <wifiConnectTask+0x224>
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <wifiConnectTask+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03d      	beq.n	8002a98 <wifiConnectTask+0x224>
				BaseType_t res = xTaskCreate(subTask, "subscribe", STACK_SIZE, 0,
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2320      	movs	r3, #32
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2300      	movs	r3, #0
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	4932      	ldr	r1, [pc, #200]	; (8002af4 <wifiConnectTask+0x280>)
 8002a2c:	4832      	ldr	r0, [pc, #200]	; (8002af8 <wifiConnectTask+0x284>)
 8002a2e:	f00d f937 	bl	800fca0 <xTaskCreate>
 8002a32:	6138      	str	r0, [r7, #16]
					(osPriority_t) osPriorityAboveNormal, 0);
				if (res != pdPASS) {
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d002      	beq.n	8002a40 <wifiConnectTask+0x1cc>
					printf("error creacion de tarea sub\r\n");
 8002a3a:	4830      	ldr	r0, [pc, #192]	; (8002afc <wifiConnectTask+0x288>)
 8002a3c:	f010 fb4e 	bl	80130dc <puts>
				}
				res = xTaskCreate(analizeTask, "analize data", 256, 0,
 8002a40:	2300      	movs	r3, #0
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2318      	movs	r3, #24
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4e:	492c      	ldr	r1, [pc, #176]	; (8002b00 <wifiConnectTask+0x28c>)
 8002a50:	482c      	ldr	r0, [pc, #176]	; (8002b04 <wifiConnectTask+0x290>)
 8002a52:	f00d f925 	bl	800fca0 <xTaskCreate>
 8002a56:	6138      	str	r0, [r7, #16]
						(osPriority_t) osPriorityNormal, 0);
				if (res != pdPASS) {
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d002      	beq.n	8002a64 <wifiConnectTask+0x1f0>
					printf("error creacion de tarea analize\r\n");
 8002a5e:	482a      	ldr	r0, [pc, #168]	; (8002b08 <wifiConnectTask+0x294>)
 8002a60:	f010 fb3c 	bl	80130dc <puts>
				}
				res = xTaskCreate(pubTask, "publish", STACK_SIZE, 0,
 8002a64:	2300      	movs	r3, #0
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2318      	movs	r3, #24
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a72:	4926      	ldr	r1, [pc, #152]	; (8002b0c <wifiConnectTask+0x298>)
 8002a74:	4826      	ldr	r0, [pc, #152]	; (8002b10 <wifiConnectTask+0x29c>)
 8002a76:	f00d f913 	bl	800fca0 <xTaskCreate>
 8002a7a:	6138      	str	r0, [r7, #16]
							(osPriority_t) osPriorityNormal, 0);
				if (res != pdPASS) {
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <wifiConnectTask+0x214>
					printf("error creacion de tarea pub\r\n");
 8002a82:	4824      	ldr	r0, [pc, #144]	; (8002b14 <wifiConnectTask+0x2a0>)
 8002a84:	f010 fb2a 	bl	80130dc <puts>
				}
				xSemaphoreGive(xSemaphorePub);
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <wifiConnectTask+0x27c>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	f00c fb2b 	bl	800f0ec <xQueueGenericSend>
			if(xSemaphoreSub != NULL && xSemaphorePub != NULL){
 8002a96:	e002      	b.n	8002a9e <wifiConnectTask+0x22a>
			}
			else{
				printf("error creacion de semaforo\r\n");
 8002a98:	481f      	ldr	r0, [pc, #124]	; (8002b18 <wifiConnectTask+0x2a4>)
 8002a9a:	f010 fb1f 	bl	80130dc <puts>
			}


			internalState++;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]

			//}
			break;
 8002aa4:	e00e      	b.n	8002ac4 <wifiConnectTask+0x250>
		case 6:
			vTaskDelete(wifiTask);
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <wifiConnectTask+0x2a8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f00d fa3c 	bl	800ff28 <vTaskDelete>
			break;
 8002ab0:	e008      	b.n	8002ac4 <wifiConnectTask+0x250>
			break;
 8002ab2:	bf00      	nop
 8002ab4:	e006      	b.n	8002ac4 <wifiConnectTask+0x250>
			break;
 8002ab6:	bf00      	nop
 8002ab8:	e004      	b.n	8002ac4 <wifiConnectTask+0x250>
			break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <wifiConnectTask+0x250>
			break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <wifiConnectTask+0x250>
			break;
 8002ac2:	bf00      	nop
		}

		osDelay(1 / portTICK_PERIOD_MS);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f00c f88b 	bl	800ebe0 <osDelay>
		switch (internalState) {
 8002aca:	e6e0      	b.n	800288e <wifiConnectTask+0x1a>
 8002acc:	08013f90 	.word	0x08013f90
 8002ad0:	08013fb8 	.word	0x08013fb8
 8002ad4:	08013fc8 	.word	0x08013fc8
 8002ad8:	20000024 	.word	0x20000024
 8002adc:	20000026 	.word	0x20000026
 8002ae0:	200004c8 	.word	0x200004c8
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	20000028 	.word	0x20000028
 8002aec:	2000eb78 	.word	0x2000eb78
 8002af0:	2000eb74 	.word	0x2000eb74
 8002af4:	08013fd4 	.word	0x08013fd4
 8002af8:	08002bb5 	.word	0x08002bb5
 8002afc:	08013fe0 	.word	0x08013fe0
 8002b00:	08014000 	.word	0x08014000
 8002b04:	08002c2d 	.word	0x08002c2d
 8002b08:	08014010 	.word	0x08014010
 8002b0c:	08014034 	.word	0x08014034
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	0801403c 	.word	0x0801403c
 8002b18:	08013f74 	.word	0x08013f74
 8002b1c:	2000eb70 	.word	0x2000eb70

08002b20 <ledTask>:
	}
	vTaskDelete(wifiTask);
}

void ledTask(void *argument) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

	TickType_t t = xTaskGetTickCount();
 8002b28:	f00d fc2c 	bl	8010384 <xTaskGetTickCount>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		vLedToggle(LED_1);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe fc6d 	bl	8001410 <vLedToggle>
		vTaskDelayUntil(&t, pdMS_TO_TICKS(100));
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	2164      	movs	r1, #100	; 0x64
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00d fa65 	bl	801000c <vTaskDelayUntil>
		vLedToggle(LED_1);
 8002b42:	e7f5      	b.n	8002b30 <ledTask+0x10>

08002b44 <pubTask>:
	}
}

void pubTask(void *argument) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;
	uint8_t data = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
	TickType_t t = xTaskGetTickCount();
 8002b50:	f00d fc18 	bl	8010384 <xTaskGetTickCount>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60bb      	str	r3, [r7, #8]
	xSemaphoreTake(xSemaphorePub, portMAX_DELAY);
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <pubTask+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00c fdb7 	bl	800f6d4 <xQueueSemaphoreTake>
	for (;;) {
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <pubTask+0x68>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00c fdb0 	bl	800f6d4 <xQueueSemaphoreTake>
		Status = mqtt_Publisher(topic_pub, data);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4619      	mov	r1, r3
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <pubTask+0x6c>)
 8002b7a:	f7ff fc3f 	bl	80023fc <mqtt_Publisher>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73bb      	strb	r3, [r7, #14]
		xSemaphoreGive(xSemaphoreMutexUart);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <pubTask+0x68>)
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f00c faae 	bl	800f0ec <xQueueGenericSend>
		if (Status == ESP8266_OK) {
			//xSemaphoreGive(xSemaphoreSub);
		}
		data++;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]

		vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00d fa34 	bl	801000c <vTaskDelayUntil>
		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002ba4:	e7df      	b.n	8002b66 <pubTask+0x22>
 8002ba6:	bf00      	nop
 8002ba8:	2000eb74 	.word	0x2000eb74
 8002bac:	2000eb6c 	.word	0x2000eb6c
 8002bb0:	20000034 	.word	0x20000034

08002bb4 <subTask>:
	}
}

void subTask(void *argument) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;

	for (;;) {
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <subTask+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00c fd85 	bl	800f6d4 <xQueueSemaphoreTake>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <subTask+0x68>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00c fd7e 	bl	800f6d4 <xQueueSemaphoreTake>
		Status = mqtt_SubscriberReceive(topic_sub, &data_rx);
 8002bd8:	4911      	ldr	r1, [pc, #68]	; (8002c20 <subTask+0x6c>)
 8002bda:	4812      	ldr	r0, [pc, #72]	; (8002c24 <subTask+0x70>)
 8002bdc:	f7ff fc82 	bl	80024e4 <mqtt_SubscriberReceive>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xSemaphoreMutexUart);
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <subTask+0x68>)
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	2300      	movs	r3, #0
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	f00c fa7d 	bl	800f0ec <xQueueGenericSend>

		if (Status == ESP8266_OK) {
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <subTask+0x5c>
			if (data_rx != -1)
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <subTask+0x6c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d006      	beq.n	8002c10 <subTask+0x5c>
				xQueueSend(xQueueDataRx, &data_rx, 100);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <subTask+0x74>)
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	2300      	movs	r3, #0
 8002c08:	2264      	movs	r2, #100	; 0x64
 8002c0a:	4905      	ldr	r1, [pc, #20]	; (8002c20 <subTask+0x6c>)
 8002c0c:	f00c fa6e 	bl	800f0ec <xQueueGenericSend>
			//xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f00d fa75 	bl	8010100 <vTaskDelay>
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8002c16:	e7d1      	b.n	8002bbc <subTask+0x8>
 8002c18:	2000eb78 	.word	0x2000eb78
 8002c1c:	2000eb6c 	.word	0x2000eb6c
 8002c20:	2000eb68 	.word	0x2000eb68
 8002c24:	20000028 	.word	0x20000028
 8002c28:	2000eb64 	.word	0x2000eb64

08002c2c <analizeTask>:
	}
}

void analizeTask(void *argument) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	int32_t dataQueueRx;
	for (;;) {
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <analizeTask+0x4c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f107 010c 	add.w	r1, r7, #12
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00c fc6b 	bl	800f51c <xQueueReceive>
		if (dataQueueRx > 100) {
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	dd02      	ble.n	8002c52 <analizeTask+0x26>
			vLedToggle(LED_7);
 8002c4c:	2006      	movs	r0, #6
 8002c4e:	f7fe fbdf 	bl	8001410 <vLedToggle>
		}
		if (dataQueueRx % 2 == 0) {
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <analizeTask+0x3a>
			vLedWrite(LED_2, GPIO_PIN_SET);
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7fe fb6c 	bl	800133c <vLedWrite>
 8002c64:	e003      	b.n	8002c6e <analizeTask+0x42>
		} else {
			vLedWrite(LED_2, GPIO_PIN_RESET);
 8002c66:	2100      	movs	r1, #0
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7fe fb67 	bl	800133c <vLedWrite>
		}

		vTaskDelay(1 / portTICK_PERIOD_MS);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f00d fa46 	bl	8010100 <vTaskDelay>
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8002c74:	e7de      	b.n	8002c34 <analizeTask+0x8>
 8002c76:	bf00      	nop
 8002c78:	2000eb64 	.word	0x2000eb64

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c86:	4a10      	ldr	r2, [pc, #64]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_MspInit+0x4c>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	f06f 0001 	mvn.w	r0, #1
 8002cba:	f001 ff91 	bl	8004be0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_ADC_MspInit+0xec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12d      	bne.n	8002d4a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002cf6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002d00:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d18:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8002d30:	2318      	movs	r3, #24
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d34:	230b      	movs	r3, #11
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4820      	ldr	r0, [pc, #128]	; (8002dc4 <HAL_ADC_MspInit+0xf8>)
 8002d44:	f002 f84c 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d48:	e032      	b.n	8002db0 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_ADC_MspInit+0xfc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d12d      	bne.n	8002db0 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002d5c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_ADC_MspInit+0xf0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10b      	bne.n	8002d7e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d84:	f043 0320 	orr.w	r3, r3, #32
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_ADC_MspInit+0xf4>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8002d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d9c:	230b      	movs	r3, #11
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <HAL_ADC_MspInit+0x100>)
 8002dac:	f002 f818 	bl	8004de0 <HAL_GPIO_Init>
}
 8002db0:	bf00      	nop
 8002db2:	3730      	adds	r7, #48	; 0x30
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	50040000 	.word	0x50040000
 8002dbc:	200004cc 	.word	0x200004cc
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000800 	.word	0x48000800
 8002dc8:	50040200 	.word	0x50040200
 8002dcc:	48001400 	.word	0x48001400

08002dd0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a33      	ldr	r2, [pc, #204]	; (8002ebc <HAL_DCMI_MspInit+0xec>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d160      	bne.n	8002eb4 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4a32      	ldr	r2, [pc, #200]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e16:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	4a20      	ldr	r2, [pc, #128]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e40:	f043 0310 	orr.w	r3, r3, #16
 8002e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_DCMI_MspInit+0xf0>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 8002e52:	f645 7320 	movw	r3, #24352	; 0x5f20
 8002e56:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002e64:	230a      	movs	r3, #10
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <HAL_DCMI_MspInit+0xf4>)
 8002e70:	f001 ffb6 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8002e74:	23b0      	movs	r3, #176	; 0xb0
 8002e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002e84:	230a      	movs	r3, #10
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480e      	ldr	r0, [pc, #56]	; (8002ec8 <HAL_DCMI_MspInit+0xf8>)
 8002e90:	f001 ffa6 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8002e94:	2320      	movs	r3, #32
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002ea4:	230a      	movs	r3, #10
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	4619      	mov	r1, r3
 8002eae:	4807      	ldr	r0, [pc, #28]	; (8002ecc <HAL_DCMI_MspInit+0xfc>)
 8002eb0:	f001 ff96 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3730      	adds	r7, #48	; 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	50050000 	.word	0x50050000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	48001c00 	.word	0x48001c00
 8002ec8:	48002000 	.word	0x48002000
 8002ecc:	48001000 	.word	0x48001000

08002ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <HAL_I2C_MspInit+0x114>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d129      	bne.n	8002f46 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002f0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f10:	2312      	movs	r3, #18
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4831      	ldr	r0, [pc, #196]	; (8002fec <HAL_I2C_MspInit+0x11c>)
 8002f28:	f001 ff5a 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f44:	e049      	b.n	8002fda <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <HAL_I2C_MspInit+0x120>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d144      	bne.n	8002fda <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8002f80:	2310      	movs	r3, #16
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f84:	2312      	movs	r3, #18
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f90:	2304      	movs	r3, #4
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4816      	ldr	r0, [pc, #88]	; (8002ff4 <HAL_I2C_MspInit+0x124>)
 8002f9c:	f001 ff20 	bl	8004de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8002fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa6:	2312      	movs	r3, #18
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480b      	ldr	r0, [pc, #44]	; (8002fec <HAL_I2C_MspInit+0x11c>)
 8002fbe:	f001 ff0f 	bl	8004de0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_I2C_MspInit+0x118>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
}
 8002fda:	bf00      	nop
 8002fdc:	3730      	adds	r7, #48	; 0x30
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40005400 	.word	0x40005400
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	48000400 	.word	0x48000400
 8002ff0:	40005800 	.word	0x40005800
 8002ff4:	48001c00 	.word	0x48001c00

08002ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	; 0x40
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a68      	ldr	r2, [pc, #416]	; (80031b8 <HAL_UART_MspInit+0x1c0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12b      	bne.n	8003072 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800301a:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	4a67      	ldr	r2, [pc, #412]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003032:	4b62      	ldr	r3, [pc, #392]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4a61      	ldr	r2, [pc, #388]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 800304a:	f003 fbc7 	bl	80067dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800304e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003060:	2308      	movs	r3, #8
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003068:	4619      	mov	r1, r3
 800306a:	4855      	ldr	r0, [pc, #340]	; (80031c0 <HAL_UART_MspInit+0x1c8>)
 800306c:	f001 feb8 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003070:	e09e      	b.n	80031b0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a53      	ldr	r2, [pc, #332]	; (80031c4 <HAL_UART_MspInit+0x1cc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d14f      	bne.n	800311c <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 800307c:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	4a4e      	ldr	r2, [pc, #312]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6613      	str	r3, [r2, #96]	; 0x60
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	623b      	str	r3, [r7, #32]
 8003092:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003094:	4b49      	ldr	r3, [pc, #292]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 80030b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b8:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80030c4:	f003 fb8a 	bl	80067dc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030d8:	2307      	movs	r3, #7
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e0:	4619      	mov	r1, r3
 80030e2:	4839      	ldr	r0, [pc, #228]	; (80031c8 <HAL_UART_MspInit+0x1d0>)
 80030e4:	f001 fe7c 	bl	8004de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80030e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030fa:	2307      	movs	r3, #7
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003102:	4619      	mov	r1, r3
 8003104:	482e      	ldr	r0, [pc, #184]	; (80031c0 <HAL_UART_MspInit+0x1c8>)
 8003106:	f001 fe6b 	bl	8004de0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2105      	movs	r1, #5
 800310e:	2025      	movs	r0, #37	; 0x25
 8003110:	f001 fd66 	bl	8004be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003114:	2025      	movs	r0, #37	; 0x25
 8003116:	f001 fd7f 	bl	8004c18 <HAL_NVIC_EnableIRQ>
}
 800311a:	e049      	b.n	80031b0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_UART_MspInit+0x1d4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d144      	bne.n	80031b0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	6593      	str	r3, [r2, #88]	; 0x58
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800314a:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_UART_MspInit+0x1c4>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800316e:	2340      	movs	r3, #64	; 0x40
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800317e:	2307      	movs	r3, #7
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003186:	4619      	mov	r1, r3
 8003188:	4811      	ldr	r0, [pc, #68]	; (80031d0 <HAL_UART_MspInit+0x1d8>)
 800318a:	f001 fe29 	bl	8004de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800318e:	2304      	movs	r3, #4
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319e:	2307      	movs	r3, #7
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ac:	f001 fe18 	bl	8004de0 <HAL_GPIO_Init>
}
 80031b0:	bf00      	nop
 80031b2:	3740      	adds	r7, #64	; 0x40
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40008000 	.word	0x40008000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48001800 	.word	0x48001800
 80031c4:	40013800 	.word	0x40013800
 80031c8:	48000400 	.word	0x48000400
 80031cc:	40004400 	.word	0x40004400
 80031d0:	48000c00 	.word	0x48000c00

080031d4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_UART_MspDeInit+0x8c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10b      	bne.n	80031fe <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	65d3      	str	r3, [r2, #92]	; 0x5c
  
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOG, ARD_D0_Pin|ARD_D1_Pin);
 80031f2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80031f6:	481c      	ldr	r0, [pc, #112]	; (8003268 <HAL_UART_MspDeInit+0x94>)
 80031f8:	f001 ff84 	bl	8005104 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80031fc:	e02b      	b.n	8003256 <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_UART_MspDeInit+0x98>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d112      	bne.n	800322e <HAL_UART_MspDeInit+0x5a>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 800320e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003212:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(USART1_TX_GPIO_Port, USART1_TX_Pin);
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	4816      	ldr	r0, [pc, #88]	; (8003270 <HAL_UART_MspDeInit+0x9c>)
 8003218:	f001 ff74 	bl	8005104 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin);
 800321c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003220:	4811      	ldr	r0, [pc, #68]	; (8003268 <HAL_UART_MspDeInit+0x94>)
 8003222:	f001 ff6f 	bl	8005104 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003226:	2025      	movs	r0, #37	; 0x25
 8003228:	f001 fd04 	bl	8004c34 <HAL_NVIC_DisableIRQ>
}
 800322c:	e013      	b.n	8003256 <HAL_UART_MspDeInit+0x82>
  else if(huart->Instance==USART2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_UART_MspDeInit+0xa0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10e      	bne.n	8003256 <HAL_UART_MspDeInit+0x82>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_UART_MspDeInit+0x90>)
 800323e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(USART2_RX_GPIO_Port, USART2_RX_Pin);
 8003244:	2140      	movs	r1, #64	; 0x40
 8003246:	480c      	ldr	r0, [pc, #48]	; (8003278 <HAL_UART_MspDeInit+0xa4>)
 8003248:	f001 ff5c 	bl	8005104 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(USART2_TX_GPIO_Port, USART2_TX_Pin);
 800324c:	2104      	movs	r1, #4
 800324e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003252:	f001 ff57 	bl	8005104 <HAL_GPIO_DeInit>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40008000 	.word	0x40008000
 8003264:	40021000 	.word	0x40021000
 8003268:	48001800 	.word	0x48001800
 800326c:	40013800 	.word	0x40013800
 8003270:	48000400 	.word	0x48000400
 8003274:	40004400 	.word	0x40004400
 8003278:	48000c00 	.word	0x48000c00

0800327c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_QSPI_MspInit+0xb8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d145      	bne.n	800332a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800329e:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a8:	6513      	str	r3, [r2, #80]	; 0x50
 80032aa:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_QSPI_MspInit+0xbc>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80032e6:	f640 0303 	movw	r3, #2051	; 0x803
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032f8:	230a      	movs	r3, #10
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	480e      	ldr	r0, [pc, #56]	; (800333c <HAL_QSPI_MspInit+0xc0>)
 8003304:	f001 fd6c 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8003308:	23c8      	movs	r3, #200	; 0xc8
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003318:	230a      	movs	r3, #10
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003326:	f001 fd5b 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	a0001000 	.word	0xa0001000
 8003338:	40021000 	.word	0x40021000
 800333c:	48000400 	.word	0x48000400

08003340 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <HAL_SD_MspInit+0xb4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d144      	bne.n	80033ec <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003362:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336c:	6613      	str	r3, [r2, #96]	; 0x60
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_SD_MspInit+0xb8>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80033aa:	2304      	movs	r3, #4
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033ba:	230c      	movs	r3, #12
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_SD_MspInit+0xbc>)
 80033c6:	f001 fd0b 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 80033ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80033ce:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d8:	2303      	movs	r3, #3
 80033da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033dc:	230c      	movs	r3, #12
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <HAL_SD_MspInit+0xc0>)
 80033e8:	f001 fcfa 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012800 	.word	0x40012800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	48000800 	.word	0x48000800

08003404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <HAL_SPI_MspInit+0xb4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d144      	bne.n	80034b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a24      	ldr	r2, [pc, #144]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 800342c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800343e:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_SPI_MspInit+0xb8>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 800346e:	2306      	movs	r3, #6
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800347e:	2305      	movs	r3, #5
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	480d      	ldr	r0, [pc, #52]	; (80034c0 <HAL_SPI_MspInit+0xbc>)
 800348a:	f001 fca9 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800348e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034a0:	2305      	movs	r3, #5
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	4806      	ldr	r0, [pc, #24]	; (80034c4 <HAL_SPI_MspInit+0xc0>)
 80034ac:	f001 fc98 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034b0:	bf00      	nop
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40003800 	.word	0x40003800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	48002000 	.word	0x48002000
 80034c4:	48000400 	.word	0x48000400

080034c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_FMC_MspInit+0xc4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d14f      	bne.n	8003584 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_FMC_MspInit+0xc4>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_FMC_MspInit+0xc8>)
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_FMC_MspInit+0xc8>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6513      	str	r3, [r2, #80]	; 0x50
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_FMC_MspInit+0xc8>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 8003502:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003506:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003514:	230c      	movs	r3, #12
 8003516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	4619      	mov	r1, r3
 800351c:	481d      	ldr	r0, [pc, #116]	; (8003594 <HAL_FMC_MspInit+0xcc>)
 800351e:	f001 fc5f 	bl	8004de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 8003522:	f240 233f 	movw	r3, #575	; 0x23f
 8003526:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003534:	230c      	movs	r3, #12
 8003536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4816      	ldr	r0, [pc, #88]	; (8003598 <HAL_FMC_MspInit+0xd0>)
 800353e:	f001 fc4f 	bl	8004de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 8003542:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8003546:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003554:	230c      	movs	r3, #12
 8003556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	480f      	ldr	r0, [pc, #60]	; (800359c <HAL_FMC_MspInit+0xd4>)
 800355e:	f001 fc3f 	bl	8004de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 8003562:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003566:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003574:	230c      	movs	r3, #12
 8003576:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4808      	ldr	r0, [pc, #32]	; (80035a0 <HAL_FMC_MspInit+0xd8>)
 800357e:	f001 fc2f 	bl	8004de0 <HAL_GPIO_Init>
 8003582:	e000      	b.n	8003586 <HAL_FMC_MspInit+0xbe>
    return;
 8003584:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200004d0 	.word	0x200004d0
 8003590:	40021000 	.word	0x40021000
 8003594:	48001000 	.word	0x48001000
 8003598:	48001800 	.word	0x48001800
 800359c:	48000c00 	.word	0x48000c00
 80035a0:	48001400 	.word	0x48001400

080035a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80035ac:	f7ff ff8c 	bl	80034c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_SAI_MspInit+0xdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d135      	bne.n	8003636 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80035d2:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_SAI_MspInit+0xe4>)
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	4a31      	ldr	r2, [pc, #196]	; (800369c <HAL_SAI_MspInit+0xe4>)
 80035d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035dc:	6613      	str	r3, [r2, #96]	; 0x60
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <HAL_SAI_MspInit+0xe4>)
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80035ea:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 80035f2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80035f4:	2354      	movs	r3, #84	; 0x54
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003604:	230d      	movs	r3, #13
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	4824      	ldr	r0, [pc, #144]	; (80036a0 <HAL_SAI_MspInit+0xe8>)
 8003610:	f001 fbe6 	bl	8004de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003626:	230d      	movs	r3, #13
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	4619      	mov	r1, r3
 8003630:	481c      	ldr	r0, [pc, #112]	; (80036a4 <HAL_SAI_MspInit+0xec>)
 8003632:	f001 fbd5 	bl	8004de0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_SAI_MspInit+0xf0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d124      	bne.n	800368a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_SAI_MspInit+0xe4>)
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_SAI_MspInit+0xe4>)
 800364e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003652:	6613      	str	r3, [r2, #96]	; 0x60
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_SAI_MspInit+0xe4>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <HAL_SAI_MspInit+0xe0>)
 8003668:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800366a:	2308      	movs	r3, #8
 800366c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800367a:	230d      	movs	r3, #13
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800367e:	f107 0314 	add.w	r3, r7, #20
 8003682:	4619      	mov	r1, r3
 8003684:	4806      	ldr	r0, [pc, #24]	; (80036a0 <HAL_SAI_MspInit+0xe8>)
 8003686:	f001 fbab 	bl	8004de0 <HAL_GPIO_Init>

    }
}
 800368a:	bf00      	nop
 800368c:	3728      	adds	r7, #40	; 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40015404 	.word	0x40015404
 8003698:	200004d4 	.word	0x200004d4
 800369c:	40021000 	.word	0x40021000
 80036a0:	48001000 	.word	0x48001000
 80036a4:	48000400 	.word	0x48000400
 80036a8:	40015424 	.word	0x40015424

080036ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	2036      	movs	r0, #54	; 0x36
 80036c2:	f001 fa8d 	bl	8004be0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80036c6:	2036      	movs	r0, #54	; 0x36
 80036c8:	f001 faa6 	bl	8004c18 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_InitTick+0x9c>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_InitTick+0x9c>)
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	6593      	str	r3, [r2, #88]	; 0x58
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_InitTick+0x9c>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036e4:	f107 0210 	add.w	r2, r7, #16
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 ff1c 	bl	800752c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036f4:	f003 feee 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 80036f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_InitTick+0xa0>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9b      	lsrs	r3, r3, #18
 8003704:	3b01      	subs	r3, #1
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003708:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_InitTick+0xa4>)
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <HAL_InitTick+0xa8>)
 800370c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_InitTick+0xa4>)
 8003710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003714:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_InitTick+0xa4>)
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_InitTick+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_InitTick+0xa4>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003728:	4809      	ldr	r0, [pc, #36]	; (8003750 <HAL_InitTick+0xa4>)
 800372a:	f006 fa55 	bl	8009bd8 <HAL_TIM_Base_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003734:	4806      	ldr	r0, [pc, #24]	; (8003750 <HAL_InitTick+0xa4>)
 8003736:	f006 fa85 	bl	8009c44 <HAL_TIM_Base_Start_IT>
 800373a:	4603      	mov	r3, r0
 800373c:	e000      	b.n	8003740 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
}
 8003740:	4618      	mov	r0, r3
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40021000 	.word	0x40021000
 800374c:	431bde83 	.word	0x431bde83
 8003750:	2000eb7c 	.word	0x2000eb7c
 8003754:	40001000 	.word	0x40001000

08003758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	vLedWrite(LED_5, GPIO_PIN_SET);
 800376a:	2101      	movs	r1, #1
 800376c:	2004      	movs	r0, #4
 800376e:	f7fd fde5 	bl	800133c <vLedWrite>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003772:	e7fe      	b.n	8003772 <HardFault_Handler+0xc>

08003774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003778:	e7fe      	b.n	8003778 <MemManage_Handler+0x4>

0800377a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <BusFault_Handler+0x4>

08003780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <UsageFault_Handler+0x4>

08003786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <USART1_IRQHandler+0x10>)
 800379a:	f006 fdff 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000e944 	.word	0x2000e944

080037a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <TIM6_DAC_IRQHandler+0x10>)
 80037ae:	f006 fa73 	bl	8009c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000eb7c 	.word	0x2000eb7c

080037bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <OTG_FS_IRQHandler+0x10>)
 80037c2:	f002 f83b 	bl	800583c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200100c4 	.word	0x200100c4

080037d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
	return 1;
 80037d4:	2301      	movs	r3, #1
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_kill>:

int _kill(int pid, int sig)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ea:	f00f f843 	bl	8012874 <__errno>
 80037ee:	4602      	mov	r2, r0
 80037f0:	2316      	movs	r3, #22
 80037f2:	6013      	str	r3, [r2, #0]
	return -1;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_exit>:

void _exit (int status)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ffe7 	bl	80037e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003812:	e7fe      	b.n	8003812 <_exit+0x12>

08003814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003826:	f3af 8000 	nop.w
 800382a:	4601      	mov	r1, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60ba      	str	r2, [r7, #8]
 8003832:	b2ca      	uxtb	r2, r1
 8003834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	dbf0      	blt.n	8003826 <_read+0x12>
	}

return len;
 8003844:	687b      	ldr	r3, [r7, #4]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <_close>:
	}
	return len;
}

int _close(int file)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	return -1;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003876:	605a      	str	r2, [r3, #4]
	return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_isatty>:

int _isatty(int file)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
	return 1;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <_sbrk+0x50>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <_sbrk+0x16>
		heap_end = &end;
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <_sbrk+0x50>)
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <_sbrk+0x54>)
 80038cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <_sbrk+0x50>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <_sbrk+0x50>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	466a      	mov	r2, sp
 80038de:	4293      	cmp	r3, r2
 80038e0:	d907      	bls.n	80038f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80038e2:	f00e ffc7 	bl	8012874 <__errno>
 80038e6:	4602      	mov	r2, r0
 80038e8:	230c      	movs	r3, #12
 80038ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f0:	e006      	b.n	8003900 <_sbrk+0x48>
	}

	heap_end += incr;
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <_sbrk+0x50>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a03      	ldr	r2, [pc, #12]	; (8003908 <_sbrk+0x50>)
 80038fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200004d8 	.word	0x200004d8
 800390c:	200104d0 	.word	0x200104d0

08003910 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <SystemInit+0x64>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <SystemInit+0x64>)
 800391c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <SystemInit+0x68>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <SystemInit+0x68>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <SystemInit+0x68>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <SystemInit+0x68>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <SystemInit+0x68>)
 800393c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003940:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003944:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <SystemInit+0x68>)
 8003948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800394c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <SystemInit+0x68>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <SystemInit+0x68>)
 8003954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <SystemInit+0x68>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SystemInit+0x64>)
 8003962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003966:	609a      	str	r2, [r3, #8]
#endif
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Callback when new data is received on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	static BaseType_t xHigherPriorityTaskWoken;

	xHigherPriorityTaskWoken = pdFALSE;
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_UART_RxCpltCallback+0x88>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

	if (huart->Instance == USART1) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_UART_RxCpltCallback+0x8c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d126      	bne.n	80039e2 <HAL_UART_RxCpltCallback+0x66>

		if (++WiFiRxBuffer.tail >= ESP_BUFFERSIZE_CIRCULAR) {
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 8003996:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 800399a:	3301      	adds	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 80039a0:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 80039a6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80039aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ae:	d303      	bcc.n	80039b8 <HAL_UART_RxCpltCallback+0x3c>
			WiFiRxBuffer.tail = 0;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}
		// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(huart, (uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 80039ba:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80039be:	461a      	mov	r2, r3
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_UART_RxCpltCallback+0x90>)
 80039c2:	4413      	add	r3, r2
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f006 fc45 	bl	800a258 <HAL_UART_Receive_IT>

		if(xSemaphoreSub != NULL)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_UART_RxCpltCallback+0x94>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_RxCpltCallback+0x66>
			xSemaphoreGiveFromISR(xSemaphoreSub, &xHigherPriorityTaskWoken);
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <HAL_UART_RxCpltCallback+0x94>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HAL_UART_RxCpltCallback+0x88>)
 80039dc:	4618      	mov	r0, r3
 80039de:	f00b fd13 	bl	800f408 <xQueueGiveFromISR>

	}
	/* If xHigherPriorityTaskWoken was set to true you
	    we should yield.  The actual macro used here is
	    port specific. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_UART_RxCpltCallback+0x88>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_UART_RxCpltCallback+0x7e>
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_UART_RxCpltCallback+0x98>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200004dc 	.word	0x200004dc
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	2000dd40 	.word	0x2000dd40
 8003a10:	2000eb78 	.word	0x2000eb78
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <HAL_UART_ErrorCallback>:
/**
 * @brief  Function called when error happens on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	WIFI_Handler();
 8003a20:	f000 f83a 	bl	8003a98 <WIFI_Handler>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_F_Init>:

void HAL_UART_F_Init(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

	WiFiRxBuffer.head = 0;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_UART_F_Init+0x30>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	WiFiRxBuffer.tail = 0;
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_UART_F_Init+0x30>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

	HAL_UART_Receive_IT(&huart1,
			(uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_UART_F_Init+0x30>)
 8003a42:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8003a46:	461a      	mov	r2, r3
	HAL_UART_Receive_IT(&huart1,
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_UART_F_Init+0x30>)
 8003a4a:	4413      	add	r3, r2
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <HAL_UART_F_Init+0x34>)
 8003a52:	f006 fc01 	bl	800a258 <HAL_UART_Receive_IT>

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000dd40 	.word	0x2000dd40
 8003a60:	2000e944 	.word	0x2000e944

08003a64 <HAL_UART_F_Send>:
void HAL_UART_F_DeInit(void) {
	/* Reset USART configuration to default */
	HAL_UART_DeInit(&huart1);
}

int8_t HAL_UART_F_Send(const char* Buffer, const uint8_t Length) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
	/* It is using a blocking call to ensure that the AT commands were correctly sent. */
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) Buffer, Length) != HAL_OK){//, ESP_DEFAULT_TIME_OUT
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4806      	ldr	r0, [pc, #24]	; (8003a94 <HAL_UART_F_Send+0x30>)
 8003a7a:	f006 fb91 	bl	800a1a0 <HAL_UART_Transmit_IT>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_F_Send+0x26>
	//if (HAL_UART_Transmit(&huart1, (uint8_t*) Buffer, Length, ESP_DEFAULT_TIME_OUT) != HAL_OK){
		return -1;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a88:	e000      	b.n	8003a8c <HAL_UART_F_Send+0x28>
	}
	return 0;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	2000e944 	.word	0x2000e944

08003a98 <WIFI_Handler>:
/**
 * @brief  Handler to deinialize the ESP8266 UART interface in case of errors.
 * @param  None
 * @retval None.
 */
static void WIFI_Handler(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8003a9c:	4803      	ldr	r0, [pc, #12]	; (8003aac <WIFI_Handler+0x14>)
 8003a9e:	f006 fb49 	bl	800a134 <HAL_UART_DeInit>
	vLedWrite(LED_5, GPIO_PIN_SET);
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	2004      	movs	r0, #4
 8003aa6:	f7fd fc49 	bl	800133c <vLedWrite>
	while (1) {
 8003aaa:	e7fe      	b.n	8003aaa <WIFI_Handler+0x12>
 8003aac:	2000e944 	.word	0x2000e944

08003ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ab4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ab6:	e003      	b.n	8003ac0 <LoopCopyDataInit>

08003ab8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003aba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003abc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003abe:	3104      	adds	r1, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ac0:	480b      	ldr	r0, [pc, #44]	; (8003af0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ac4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ac6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ac8:	d3f6      	bcc.n	8003ab8 <CopyDataInit>
	ldr	r2, =_sbss
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003acc:	e002      	b.n	8003ad4 <LoopFillZerobss>

08003ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ace:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ad0:	f842 3b04 	str.w	r3, [r2], #4

08003ad4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <LoopForever+0x16>)
	cmp	r2, r3
 8003ad6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ad8:	d3f9      	bcc.n	8003ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ada:	f7ff ff19 	bl	8003910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ade:	f00e fee1 	bl	80128a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ae2:	f7fd fd33 	bl	800154c <main>

08003ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ae6:	e7fe      	b.n	8003ae6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ae8:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003aec:	08014338 	.word	0x08014338
	ldr	r0, =_sdata
 8003af0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003af4:	200003a0 	.word	0x200003a0
	ldr	r2, =_sbss
 8003af8:	200003a0 	.word	0x200003a0
	ldr	r3, = _ebss
 8003afc:	200104d0 	.word	0x200104d0

08003b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b00:	e7fe      	b.n	8003b00 <ADC1_2_IRQHandler>

08003b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f001 f85c 	bl	8004bca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7ff fdca 	bl	80036ac <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	e001      	b.n	8003b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b24:	f7ff f8aa 	bl	8002c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b28:	79fb      	ldrb	r3, [r7, #7]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_IncTick+0x1c>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_IncTick+0x20>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	4a03      	ldr	r2, [pc, #12]	; (8003b50 <HAL_IncTick+0x1c>)
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	2000ebbc 	.word	0x2000ebbc
 8003b54:	20000048 	.word	0x20000048

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000ebbc 	.word	0x2000ebbc

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d004      	beq.n	8003b94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_Delay+0x40>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b94:	bf00      	nop
 8003b96:	f7ff ffdf 	bl	8003b58 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d8f7      	bhi.n	8003b96 <HAL_Delay+0x26>
  {
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000048 	.word	0x20000048

08003bb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	609a      	str	r2, [r3, #8]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c1c:	b490      	push	{r4, r7}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <LL_ADC_SetOffset+0x40>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c4e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc90      	pop	{r4, r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	03fff000 	.word	0x03fff000

08003c60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c60:	b490      	push	{r4, r7}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3360      	adds	r3, #96	; 0x60
 8003c6e:	461a      	mov	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc90      	pop	{r4, r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c88:	b490      	push	{r4, r7}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3360      	adds	r3, #96	; 0x60
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc90      	pop	{r4, r7}
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	615a      	str	r2, [r3, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cde:	b490      	push	{r4, r7}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3330      	adds	r3, #48	; 0x30
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	4413      	add	r3, r2
 8003cfc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	211f      	movs	r1, #31
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	f003 011f 	and.w	r1, r3, #31
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc90      	pop	{r4, r7}
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d30:	b490      	push	{r4, r7}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	0e5b      	lsrs	r3, r3, #25
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	0d1b      	lsrs	r3, r3, #20
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2107      	movs	r1, #7
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	0d1b      	lsrs	r3, r3, #20
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc90      	pop	{r4, r7}
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0318 	and.w	r3, r3, #24
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003da4:	40d9      	lsrs	r1, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	400b      	ands	r3, r1
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	0007ffff 	.word	0x0007ffff

08003dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6093      	str	r3, [r2, #8]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e50:	d101      	bne.n	8003e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <LL_ADC_IsEnabled+0x18>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_ADC_IsEnabled+0x1a>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d101      	bne.n	8003ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d101      	bne.n	8003ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e137      	b.n	8004162 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fe fee3 	bl	8002ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff67 	bl	8003dec <LL_ADC_IsDeepPowerDownEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff4d 	bl	8003dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff82 	bl	8003e3c <LL_ADC_IsInternalRegulatorEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d113      	bne.n	8003f66 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff66 	bl	8003e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003f48:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_ADC_Init+0x294>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	4a88      	ldr	r2, [pc, #544]	; (8004170 <HAL_ADC_Init+0x298>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f58:	e002      	b.n	8003f60 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff66 	bl	8003e3c <LL_ADC_IsInternalRegulatorEnabled>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f043 0210 	orr.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff77 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 80d2 	bne.w	8004150 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 80ce 	bne.w	8004150 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff4b 	bl	8003e64 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd4:	4867      	ldr	r0, [pc, #412]	; (8004174 <HAL_ADC_Init+0x29c>)
 8003fd6:	f7ff ff45 	bl	8003e64 <LL_ADC_IsEnabled>
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4866      	ldr	r0, [pc, #408]	; (8004178 <HAL_ADC_Init+0x2a0>)
 8003fde:	f7ff ff41 	bl	8003e64 <LL_ADC_IsEnabled>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	431c      	orrs	r4, r3
 8003fe6:	4865      	ldr	r0, [pc, #404]	; (800417c <HAL_ADC_Init+0x2a4>)
 8003fe8:	f7ff ff3c 	bl	8003e64 <LL_ADC_IsEnabled>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4323      	orrs	r3, r4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4861      	ldr	r0, [pc, #388]	; (8004180 <HAL_ADC_Init+0x2a8>)
 8003ffc:	f7ff fdda 	bl	8003bb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7e5b      	ldrb	r3, [r3, #25]
 8004004:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800400a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004010:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004016:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d106      	bne.n	800403c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	3b01      	subs	r3, #1
 8004034:	045b      	lsls	r3, r3, #17
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	4b49      	ldr	r3, [pc, #292]	; (8004184 <HAL_ADC_Init+0x2ac>)
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	69b9      	ldr	r1, [r7, #24]
 8004068:	430b      	orrs	r3, r1
 800406a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff0a 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 8004076:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff17 	bl	8003eb0 <LL_ADC_INJ_IsConversionOngoing>
 8004082:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d140      	bne.n	800410c <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d13d      	bne.n	800410c <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7e1b      	ldrb	r3, [r3, #24]
 8004098:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800409a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b2:	f023 0306 	bic.w	r3, r3, #6
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	430b      	orrs	r3, r1
 80040be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d118      	bne.n	80040fc <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040e6:	4311      	orrs	r1, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ec:	430a      	orrs	r2, r1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	611a      	str	r2, [r3, #16]
 80040fa:	e007      	b.n	800410c <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10c      	bne.n	800412e <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f023 010f 	bic.w	r1, r3, #15
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
 800412c:	e007      	b.n	800413e <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 020f 	bic.w	r2, r2, #15
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	f043 0201 	orr.w	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	659a      	str	r2, [r3, #88]	; 0x58
 800414e:	e007      	b.n	8004160 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	f043 0210 	orr.w	r2, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004160:	7ffb      	ldrb	r3, [r7, #31]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd90      	pop	{r4, r7, pc}
 800416a:	bf00      	nop
 800416c:	20000040 	.word	0x20000040
 8004170:	053e2d63 	.word	0x053e2d63
 8004174:	50040000 	.word	0x50040000
 8004178:	50040100 	.word	0x50040100
 800417c:	50040200 	.word	0x50040200
 8004180:	50040300 	.word	0x50040300
 8004184:	fff0c007 	.word	0xfff0c007

08004188 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0a6      	sub	sp, #152	; 0x98
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x22>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e364      	b.n	8004874 <HAL_ADC_ConfigChannel+0x6ec>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fe67 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8345 	bne.w	800484e <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d824      	bhi.n	8004216 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	3b02      	subs	r3, #2
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d81b      	bhi.n	800420e <HAL_ADC_ConfigChannel+0x86>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <HAL_ADC_ConfigChannel+0x54>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f5 	.word	0x080041f5
 80041e4:	080041fd 	.word	0x080041fd
 80041e8:	08004205 	.word	0x08004205
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	220c      	movs	r2, #12
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	e011      	b.n	8004218 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2212      	movs	r2, #18
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e00d      	b.n	8004218 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2218      	movs	r2, #24
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e009      	b.n	8004218 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e004      	b.n	8004218 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2206      	movs	r2, #6
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	e000      	b.n	8004218 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004216:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	f7ff fd5a 	bl	8003cde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fe2b 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 8004234:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe37 	bl	8003eb0 <LL_ADC_INJ_IsConversionOngoing>
 8004242:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8163 	bne.w	8004516 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004254:	2b00      	cmp	r3, #0
 8004256:	f040 815e 	bne.w	8004516 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004262:	d10f      	bne.n	8004284 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	4619      	mov	r1, r3
 8004270:	f7ff fd5e 	bl	8003d30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fd1b 	bl	8003cb8 <LL_ADC_SetSamplingTimeCommonConfig>
 8004282:	e00e      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	461a      	mov	r2, r3
 8004292:	f7ff fd4d 	bl	8003d30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fd0b 	bl	8003cb8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00a      	beq.n	80042da <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6919      	ldr	r1, [r3, #16]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042d4:	f7ff fca2 	bl	8003c1c <LL_ADC_SetOffset>
 80042d8:	e11d      	b.n	8004516 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fcbd 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x17e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fcb2 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	0e9b      	lsrs	r3, r3, #26
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	e012      	b.n	800432c <HAL_ADC_ConfigChannel+0x1a4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fca7 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x1bc>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	e00a      	b.n	800435a <HAL_ADC_ConfigChannel+0x1d2>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8004352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	429a      	cmp	r2, r3
 800435c:	d106      	bne.n	800436c <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fc8e 	bl	8003c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fc74 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x210>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fc69 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 800438e:	4603      	mov	r3, r0
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	f003 021f 	and.w	r2, r3, #31
 8004396:	e010      	b.n	80043ba <HAL_ADC_ConfigChannel+0x232>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fc5e 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 80043a4:	4603      	mov	r3, r0
 80043a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x24a>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	e00a      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x260>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fc47 	bl	8003c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fc2d 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 8004406:	4603      	mov	r3, r0
 8004408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x29e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fc22 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 800441c:	4603      	mov	r3, r0
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	e010      	b.n	8004448 <HAL_ADC_ConfigChannel+0x2c0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fc17 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800443e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x2d8>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	e00a      	b.n	8004476 <HAL_ADC_ConfigChannel+0x2ee>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	429a      	cmp	r2, r3
 8004478:	d106      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fc00 	bl	8003c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2103      	movs	r1, #3
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fbe6 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x32c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2103      	movs	r1, #3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fbdb 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 80044aa:	4603      	mov	r3, r0
 80044ac:	0e9b      	lsrs	r3, r3, #26
 80044ae:	f003 021f 	and.w	r2, r3, #31
 80044b2:	e010      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x34e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2103      	movs	r1, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fbd0 	bl	8003c60 <LL_ADC_GetOffsetChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x366>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	e00a      	b.n	8004504 <HAL_ADC_ConfigChannel+0x37c>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	429a      	cmp	r2, r3
 8004506:	d106      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2200      	movs	r2, #0
 800450e:	2103      	movs	r1, #3
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fbb9 	bl	8003c88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fca2 	bl	8003e64 <LL_ADC_IsEnabled>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 810c 	bne.w	8004740 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	461a      	mov	r2, r3
 8004536:	f7ff fc23 	bl	8003d80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4aae      	ldr	r2, [pc, #696]	; (80047f8 <HAL_ADC_ConfigChannel+0x670>)
 8004540:	4293      	cmp	r3, r2
 8004542:	f040 80fd 	bne.w	8004740 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_ADC_ConfigChannel+0x3e6>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0e9b      	lsrs	r3, r3, #26
 800455c:	3301      	adds	r3, #1
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2b09      	cmp	r3, #9
 8004564:	bf94      	ite	ls
 8004566:	2301      	movls	r3, #1
 8004568:	2300      	movhi	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e012      	b.n	8004594 <HAL_ADC_ConfigChannel+0x40c>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2b09      	cmp	r3, #9
 800458c:	bf94      	ite	ls
 800458e:	2301      	movls	r3, #1
 8004590:	2300      	movhi	r3, #0
 8004592:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004594:	2b00      	cmp	r3, #0
 8004596:	d064      	beq.n	8004662 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x42c>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	069b      	lsls	r3, r3, #26
 80045ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b2:	e00e      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x44a>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	fab3 f383 	clz	r3, r3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	069b      	lsls	r3, r3, #26
 80045ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x46a>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	0e9b      	lsrs	r3, r3, #26
 80045e4:	3301      	adds	r3, #1
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2101      	movs	r1, #1
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	e010      	b.n	8004614 <HAL_ADC_ConfigChannel+0x48c>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2101      	movs	r1, #1
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	ea42 0103 	orr.w	r1, r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_ADC_ConfigChannel+0x4b2>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	3301      	adds	r3, #1
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	051b      	lsls	r3, r3, #20
 8004638:	e011      	b.n	800465e <HAL_ADC_ConfigChannel+0x4d6>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f003 021f 	and.w	r2, r3, #31
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800465e:	430b      	orrs	r3, r1
 8004660:	e069      	b.n	8004736 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_ADC_ConfigChannel+0x4f6>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	0e9b      	lsrs	r3, r3, #26
 8004674:	3301      	adds	r3, #1
 8004676:	069b      	lsls	r3, r3, #26
 8004678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467c:	e00e      	b.n	800469c <HAL_ADC_ConfigChannel+0x514>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	61fb      	str	r3, [r7, #28]
  return result;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	3301      	adds	r3, #1
 8004696:	069b      	lsls	r3, r3, #26
 8004698:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x534>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	3301      	adds	r3, #1
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	e010      	b.n	80046de <HAL_ADC_ConfigChannel+0x556>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	617b      	str	r3, [r7, #20]
  return result;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	ea42 0103 	orr.w	r1, r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_ADC_ConfigChannel+0x582>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0e9b      	lsrs	r3, r3, #26
 80046f4:	3301      	adds	r3, #1
 80046f6:	f003 021f 	and.w	r2, r3, #31
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	3b1e      	subs	r3, #30
 8004702:	051b      	lsls	r3, r3, #20
 8004704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004708:	e014      	b.n	8004734 <HAL_ADC_ConfigChannel+0x5ac>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	60fb      	str	r3, [r7, #12]
  return result;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f003 021f 	and.w	r2, r3, #31
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	3b1e      	subs	r3, #30
 800472e:	051b      	lsls	r3, r3, #20
 8004730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004734:	430b      	orrs	r3, r1
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	4619      	mov	r1, r3
 800473c:	f7ff faf8 	bl	8003d30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <HAL_ADC_ConfigChannel+0x674>)
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 808d 	beq.w	8004868 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800474e:	482c      	ldr	r0, [pc, #176]	; (8004800 <HAL_ADC_ConfigChannel+0x678>)
 8004750:	f7ff fa56 	bl	8003c00 <LL_ADC_GetCommonPathInternalCh>
 8004754:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a29      	ldr	r2, [pc, #164]	; (8004804 <HAL_ADC_ConfigChannel+0x67c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d12b      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x632>
 8004762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d125      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a25      	ldr	r2, [pc, #148]	; (8004808 <HAL_ADC_ConfigChannel+0x680>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_ADC_ConfigChannel+0x5fa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <HAL_ADC_ConfigChannel+0x684>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d16f      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004786:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800478a:	4619      	mov	r1, r3
 800478c:	481c      	ldr	r0, [pc, #112]	; (8004800 <HAL_ADC_ConfigChannel+0x678>)
 800478e:	f7ff fa24 	bl	8003bda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_ADC_ConfigChannel+0x688>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_ADC_ConfigChannel+0x68c>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	099a      	lsrs	r2, r3, #6
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047aa:	e002      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f9      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047b8:	e053      	b.n	8004862 <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a16      	ldr	r2, [pc, #88]	; (8004818 <HAL_ADC_ConfigChannel+0x690>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d12b      	bne.n	800481c <HAL_ADC_ConfigChannel+0x694>
 80047c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d125      	bne.n	800481c <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <HAL_ADC_ConfigChannel+0x680>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_ADC_ConfigChannel+0x65c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0b      	ldr	r2, [pc, #44]	; (800480c <HAL_ADC_ConfigChannel+0x684>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d140      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ec:	4619      	mov	r1, r3
 80047ee:	4804      	ldr	r0, [pc, #16]	; (8004800 <HAL_ADC_ConfigChannel+0x678>)
 80047f0:	f7ff f9f3 	bl	8003bda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047f4:	e037      	b.n	8004866 <HAL_ADC_ConfigChannel+0x6de>
 80047f6:	bf00      	nop
 80047f8:	407f0000 	.word	0x407f0000
 80047fc:	80080000 	.word	0x80080000
 8004800:	50040300 	.word	0x50040300
 8004804:	c7520000 	.word	0xc7520000
 8004808:	50040000 	.word	0x50040000
 800480c:	50040200 	.word	0x50040200
 8004810:	20000040 	.word	0x20000040
 8004814:	053e2d63 	.word	0x053e2d63
 8004818:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_ADC_ConfigChannel+0x6f4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d120      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11a      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <HAL_ADC_ConfigChannel+0x6f8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d115      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800483c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004844:	4619      	mov	r1, r3
 8004846:	480f      	ldr	r0, [pc, #60]	; (8004884 <HAL_ADC_ConfigChannel+0x6fc>)
 8004848:	f7ff f9c7 	bl	8003bda <LL_ADC_SetCommonPathInternalCh>
 800484c:	e00c      	b.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004860:	e002      	b.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004866:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004870:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004874:	4618      	mov	r0, r3
 8004876:	3798      	adds	r7, #152	; 0x98
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	80000001 	.word	0x80000001
 8004880:	50040000 	.word	0x50040000
 8004884:	50040300 	.word	0x50040300

08004888 <LL_ADC_IsEnabled>:
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <LL_ADC_IsEnabled+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_ADC_IsEnabled+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_ADC_REG_IsConversionOngoing>:
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d101      	bne.n	80048c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b0a1      	sub	sp, #132	; 0x84
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e08f      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d102      	bne.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e001      	b.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e072      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ffbd 	bl	80048ae <LL_ADC_REG_IsConversionOngoing>
 8004934:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ffb7 	bl	80048ae <LL_ADC_REG_IsConversionOngoing>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d154      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004948:	2b00      	cmp	r3, #0
 800494a:	d151      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800494c:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800494e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02c      	beq.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800496a:	035b      	lsls	r3, r3, #13
 800496c:	430b      	orrs	r3, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004972:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004974:	4829      	ldr	r0, [pc, #164]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004976:	f7ff ff87 	bl	8004888 <LL_ADC_IsEnabled>
 800497a:	4604      	mov	r4, r0
 800497c:	4828      	ldr	r0, [pc, #160]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800497e:	f7ff ff83 	bl	8004888 <LL_ADC_IsEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	431c      	orrs	r4, r3
 8004986:	4828      	ldr	r0, [pc, #160]	; (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004988:	f7ff ff7e 	bl	8004888 <LL_ADC_IsEnabled>
 800498c:	4603      	mov	r3, r0
 800498e:	4323      	orrs	r3, r4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d137      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	6811      	ldr	r1, [r2, #0]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b0:	e028      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049be:	4817      	ldr	r0, [pc, #92]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80049c0:	f7ff ff62 	bl	8004888 <LL_ADC_IsEnabled>
 80049c4:	4604      	mov	r4, r0
 80049c6:	4816      	ldr	r0, [pc, #88]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80049c8:	f7ff ff5e 	bl	8004888 <LL_ADC_IsEnabled>
 80049cc:	4603      	mov	r3, r0
 80049ce:	431c      	orrs	r4, r3
 80049d0:	4815      	ldr	r0, [pc, #84]	; (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049d2:	f7ff ff59 	bl	8004888 <LL_ADC_IsEnabled>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4323      	orrs	r3, r4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d112      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ee:	e009      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a02:	e000      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3784      	adds	r7, #132	; 0x84
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	50040000 	.word	0x50040000
 8004a20:	50040100 	.word	0x50040100
 8004a24:	50040300 	.word	0x50040300
 8004a28:	50040200 	.word	0x50040200

08004a2c <__NVIC_SetPriorityGrouping>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <__NVIC_SetPriorityGrouping+0x44>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <__NVIC_SetPriorityGrouping+0x44>)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	60d3      	str	r3, [r2, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_GetPriorityGrouping>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <__NVIC_GetPriorityGrouping+0x18>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0a1b      	lsrs	r3, r3, #8
 8004a7e:	f003 0307 	and.w	r3, r3, #7
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_EnableIRQ>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	db0b      	blt.n	8004aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	4907      	ldr	r1, [pc, #28]	; (8004ac8 <__NVIC_EnableIRQ+0x38>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <__NVIC_DisableIRQ>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	db10      	blt.n	8004b00 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4909      	ldr	r1, [pc, #36]	; (8004b0c <__NVIC_DisableIRQ+0x40>)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2001      	movs	r0, #1
 8004aee:	fa00 f202 	lsl.w	r2, r0, r2
 8004af2:	3320      	adds	r3, #32
 8004af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004afc:	f3bf 8f6f 	isb	sy
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e100 	.word	0xe000e100

08004b10 <__NVIC_SetPriority>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db0a      	blt.n	8004b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	490c      	ldr	r1, [pc, #48]	; (8004b5c <__NVIC_SetPriority+0x4c>)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	0112      	lsls	r2, r2, #4
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	440b      	add	r3, r1
 8004b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b38:	e00a      	b.n	8004b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4908      	ldr	r1, [pc, #32]	; (8004b60 <__NVIC_SetPriority+0x50>)
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	3b04      	subs	r3, #4
 8004b48:	0112      	lsls	r2, r2, #4
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	761a      	strb	r2, [r3, #24]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000e100 	.word	0xe000e100
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <NVIC_EncodePriority>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f1c3 0307 	rsb	r3, r3, #7
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	bf28      	it	cs
 8004b82:	2304      	movcs	r3, #4
 8004b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d902      	bls.n	8004b94 <NVIC_EncodePriority+0x30>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3b03      	subs	r3, #3
 8004b92:	e000      	b.n	8004b96 <NVIC_EncodePriority+0x32>
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	43d9      	mvns	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bbc:	4313      	orrs	r3, r2
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3724      	adds	r7, #36	; 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff2a 	bl	8004a2c <__NVIC_SetPriorityGrouping>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf2:	f7ff ff3f 	bl	8004a74 <__NVIC_GetPriorityGrouping>
 8004bf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f7ff ffb1 	bl	8004b64 <NVIC_EncodePriority>
 8004c02:	4602      	mov	r2, r0
 8004c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff80 	bl	8004b10 <__NVIC_SetPriority>
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff32 	bl	8004a90 <__NVIC_EnableIRQ>
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ff42 	bl	8004acc <__NVIC_DisableIRQ>
}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e075      	b.n	8004d4e <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fe f8aa 	bl	8002dd0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c92:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_DCMI_Init+0x108>)
 8004cae:	400b      	ands	r3, r1
 8004cb0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004cc6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004cd2:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004cde:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8004cea:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8004cf6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d112      	bne.n	8004d2e <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7f1b      	ldrb	r3, [r3, #28]
 8004d0c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7f5b      	ldrb	r3, [r3, #29]
 8004d12:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004d14:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	7f9b      	ldrb	r3, [r3, #30]
 8004d1a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7fdb      	ldrb	r3, [r3, #31]
 8004d24:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8004d2a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8004d2c:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 021f 	orr.w	r2, r2, #31
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	ffe0f007 	.word	0xffe0f007

08004d5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d005      	beq.n	8004d80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
 8004d7e:	e029      	b.n	8004dd4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 020e 	bic.w	r2, r2, #14
 8004d8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	f003 021c 	and.w	r2, r3, #28
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f202 	lsl.w	r2, r1, r2
 8004db2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
    }
  }
  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dee:	e166      	b.n	80050be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	2101      	movs	r1, #1
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8158 	beq.w	80050b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d00b      	beq.n	8004e28 <HAL_GPIO_Init+0x48>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d007      	beq.n	8004e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e1c:	2b11      	cmp	r3, #17
 8004e1e:	d003      	beq.n	8004e28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b12      	cmp	r3, #18
 8004e26:	d130      	bne.n	8004e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e5e:	2201      	movs	r2, #1
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 0201 	and.w	r2, r3, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0xea>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b12      	cmp	r3, #18
 8004ec8:	d123      	bne.n	8004f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	08da      	lsrs	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3208      	adds	r2, #8
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	6939      	ldr	r1, [r7, #16]
 8004f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0203 	and.w	r2, r3, #3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80b2 	beq.w	80050b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f54:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_GPIO_Init+0x2fc>)
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	4a60      	ldr	r2, [pc, #384]	; (80050dc <HAL_GPIO_Init+0x2fc>)
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f60:	4b5e      	ldr	r3, [pc, #376]	; (80050dc <HAL_GPIO_Init+0x2fc>)
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f6c:	4a5c      	ldr	r2, [pc, #368]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	3302      	adds	r3, #2
 8004f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	220f      	movs	r2, #15
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f96:	d02b      	beq.n	8004ff0 <HAL_GPIO_Init+0x210>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a52      	ldr	r2, [pc, #328]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d025      	beq.n	8004fec <HAL_GPIO_Init+0x20c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a51      	ldr	r2, [pc, #324]	; (80050e8 <HAL_GPIO_Init+0x308>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01f      	beq.n	8004fe8 <HAL_GPIO_Init+0x208>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a50      	ldr	r2, [pc, #320]	; (80050ec <HAL_GPIO_Init+0x30c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d019      	beq.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a4f      	ldr	r2, [pc, #316]	; (80050f0 <HAL_GPIO_Init+0x310>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_GPIO_Init+0x200>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <HAL_GPIO_Init+0x314>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00d      	beq.n	8004fdc <HAL_GPIO_Init+0x1fc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	; (80050f8 <HAL_GPIO_Init+0x318>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <HAL_GPIO_Init+0x1f8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a4c      	ldr	r2, [pc, #304]	; (80050fc <HAL_GPIO_Init+0x31c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_GPIO_Init+0x1f4>
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	e00e      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	e00c      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fd8:	2306      	movs	r3, #6
 8004fda:	e00a      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fdc:	2305      	movs	r3, #5
 8004fde:	e008      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	e006      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e004      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e002      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <HAL_GPIO_Init+0x212>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	f002 0203 	and.w	r2, r2, #3
 8004ff8:	0092      	lsls	r2, r2, #2
 8004ffa:	4093      	lsls	r3, r2
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005002:	4937      	ldr	r1, [pc, #220]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	3302      	adds	r3, #2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005010:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_GPIO_Init+0x320>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43db      	mvns	r3, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005034:	4a32      	ldr	r2, [pc, #200]	; (8005100 <HAL_GPIO_Init+0x320>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <HAL_GPIO_Init+0x320>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800505e:	4a28      	ldr	r2, [pc, #160]	; (8005100 <HAL_GPIO_Init+0x320>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005064:	4b26      	ldr	r3, [pc, #152]	; (8005100 <HAL_GPIO_Init+0x320>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	43db      	mvns	r3, r3
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4013      	ands	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <HAL_GPIO_Init+0x320>)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <HAL_GPIO_Init+0x320>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_GPIO_Init+0x320>)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	3301      	adds	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f47f ae91 	bne.w	8004df0 <HAL_GPIO_Init+0x10>
  }
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40010000 	.word	0x40010000
 80050e4:	48000400 	.word	0x48000400
 80050e8:	48000800 	.word	0x48000800
 80050ec:	48000c00 	.word	0x48000c00
 80050f0:	48001000 	.word	0x48001000
 80050f4:	48001400 	.word	0x48001400
 80050f8:	48001800 	.word	0x48001800
 80050fc:	48001c00 	.word	0x48001c00
 8005100:	40010400 	.word	0x40010400

08005104 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005112:	e0c9      	b.n	80052a8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005114:	2201      	movs	r2, #1
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4013      	ands	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80bc 	beq.w	80052a2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800512a:	4a66      	ldr	r2, [pc, #408]	; (80052c4 <HAL_GPIO_DeInit+0x1c0>)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005136:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005152:	d02b      	beq.n	80051ac <HAL_GPIO_DeInit+0xa8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a5c      	ldr	r2, [pc, #368]	; (80052c8 <HAL_GPIO_DeInit+0x1c4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d025      	beq.n	80051a8 <HAL_GPIO_DeInit+0xa4>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a5b      	ldr	r2, [pc, #364]	; (80052cc <HAL_GPIO_DeInit+0x1c8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01f      	beq.n	80051a4 <HAL_GPIO_DeInit+0xa0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_GPIO_DeInit+0x1cc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d019      	beq.n	80051a0 <HAL_GPIO_DeInit+0x9c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <HAL_GPIO_DeInit+0x1d0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <HAL_GPIO_DeInit+0x98>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <HAL_GPIO_DeInit+0x1d4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00d      	beq.n	8005198 <HAL_GPIO_DeInit+0x94>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a57      	ldr	r2, [pc, #348]	; (80052dc <HAL_GPIO_DeInit+0x1d8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <HAL_GPIO_DeInit+0x90>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a56      	ldr	r2, [pc, #344]	; (80052e0 <HAL_GPIO_DeInit+0x1dc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_GPIO_DeInit+0x8c>
 800518c:	2307      	movs	r3, #7
 800518e:	e00e      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 8005190:	2308      	movs	r3, #8
 8005192:	e00c      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 8005194:	2306      	movs	r3, #6
 8005196:	e00a      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 8005198:	2305      	movs	r3, #5
 800519a:	e008      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 800519c:	2304      	movs	r3, #4
 800519e:	e006      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e004      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e002      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_GPIO_DeInit+0xaa>
 80051ac:	2300      	movs	r3, #0
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	f002 0203 	and.w	r2, r2, #3
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	4093      	lsls	r3, r2
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d132      	bne.n	8005224 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80051be:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	4947      	ldr	r1, [pc, #284]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	4943      	ldr	r1, [pc, #268]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80051da:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	4940      	ldr	r1, [pc, #256]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	493c      	ldr	r1, [pc, #240]	; (80052e4 <HAL_GPIO_DeInit+0x1e0>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005206:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <HAL_GPIO_DeInit+0x1c0>)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	3302      	adds	r3, #2
 800520e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43da      	mvns	r2, r3
 8005216:	482b      	ldr	r0, [pc, #172]	; (80052c4 <HAL_GPIO_DeInit+0x1c0>)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	400a      	ands	r2, r1
 800521e:	3302      	adds	r3, #2
 8005220:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	2103      	movs	r1, #3
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	08da      	lsrs	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3208      	adds	r2, #8
 8005240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	08d2      	lsrs	r2, r2, #3
 8005258:	4019      	ands	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3208      	adds	r2, #8
 800525e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	2103      	movs	r1, #3
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	2101      	movs	r1, #1
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2103      	movs	r1, #3
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	401a      	ands	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3301      	adds	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af2f 	bne.w	8005114 <HAL_GPIO_DeInit+0x10>
  }
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	48000400 	.word	0x48000400
 80052cc:	48000800 	.word	0x48000800
 80052d0:	48000c00 	.word	0x48000c00
 80052d4:	48001000 	.word	0x48001000
 80052d8:	48001400 	.word	0x48001400
 80052dc:	48001800 	.word	0x48001800
 80052e0:	48001c00 	.word	0x48001c00
 80052e4:	40010400 	.word	0x40010400

080052e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005304:	e002      	b.n	800530c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	887b      	ldrh	r3, [r7, #2]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005336:	e002      	b.n	800533e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005338:	887a      	ldrh	r2, [r7, #2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	619a      	str	r2, [r3, #24]
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e081      	b.n	8005460 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fd fdad 	bl	8002ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2224      	movs	r2, #36	; 0x24
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800539a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	e006      	b.n	80053d2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d104      	bne.n	80053e4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005406:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	ea42 0103 	orr.w	r1, r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	021a      	lsls	r2, r3, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69d9      	ldr	r1, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d138      	bne.n	80054f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005488:	2302      	movs	r3, #2
 800548a:	e032      	b.n	80054f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b20      	cmp	r3, #32
 8005512:	d139      	bne.n	8005588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800551e:	2302      	movs	r3, #2
 8005520:	e033      	b.n	800558a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005598:	b08f      	sub	sp, #60	; 0x3c
 800559a:	af0a      	add	r7, sp, #40	; 0x28
 800559c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e116      	b.n	80057d6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f00c fd18 	bl	8011ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2203      	movs	r2, #3
 80055cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f006 fd19 	bl	800c01e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	687e      	ldr	r6, [r7, #4]
 80055f4:	466d      	mov	r5, sp
 80055f6:	f106 0410 	add.w	r4, r6, #16
 80055fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005606:	e885 0003 	stmia.w	r5, {r0, r1}
 800560a:	1d33      	adds	r3, r6, #4
 800560c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f006 fc06 	bl	800be20 <USB_CoreInit>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0d7      	b.n	80057d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f006 fd07 	bl	800c040 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	e04a      	b.n	80056ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	333d      	adds	r3, #61	; 0x3d
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800564c:	7bfa      	ldrb	r2, [r7, #15]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	333c      	adds	r3, #60	; 0x3c
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	b298      	uxth	r0, r3
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	3342      	adds	r3, #66	; 0x42
 8005674:	4602      	mov	r2, r0
 8005676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	333f      	adds	r3, #63	; 0x3f
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	3344      	adds	r3, #68	; 0x44
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3348      	adds	r3, #72	; 0x48
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	3350      	adds	r3, #80	; 0x50
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	3301      	adds	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d3af      	bcc.n	8005638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	e044      	b.n	8005768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056de:	7bfa      	ldrb	r2, [r7, #15]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800570a:	7bfa      	ldrb	r2, [r7, #15]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	3301      	adds	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d3b5      	bcc.n	80056de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	687e      	ldr	r6, [r7, #4]
 800577a:	466d      	mov	r5, sp
 800577c:	f106 0410 	add.w	r4, r6, #16
 8005780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800578c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005790:	1d33      	adds	r3, r6, #4
 8005792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005794:	6838      	ldr	r0, [r7, #0]
 8005796:	f006 fc7d 	bl	800c094 <USB_DevInit>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e014      	b.n	80057d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 ff61 	bl	800668c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f007 fbf6 	bl	800cfc0 <USB_DevDisconnect>

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_PCD_Start+0x1c>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e01c      	b.n	8005834 <HAL_PCD_Start+0x56>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	2b01      	cmp	r3, #1
 8005808:	d105      	bne.n	8005816 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f007 fbb8 	bl	800cf90 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f006 fbe9 	bl	800bffc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b08d      	sub	sp, #52	; 0x34
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f007 fc5f 	bl	800d116 <USB_GetMode>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 838f 	bne.w	8005f7e <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f007 fbc3 	bl	800cff0 <USB_ReadInterrupts>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8385 	beq.w	8005f7c <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f007 fbba 	bl	800cff0 <USB_ReadInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d107      	bne.n	8005896 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f002 0202 	and.w	r2, r2, #2
 8005894:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f007 fba8 	bl	800cff0 <USB_ReadInterrupts>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d161      	bne.n	800596e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0210 	bic.w	r2, r2, #16
 80058b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	3304      	adds	r3, #4
 80058d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	0c5b      	lsrs	r3, r3, #17
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d124      	bne.n	8005930 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d035      	beq.n	800595e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	6a38      	ldr	r0, [r7, #32]
 8005906:	f007 fa20 	bl	800cd4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005916:	441a      	add	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005928:	441a      	add	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	619a      	str	r2, [r3, #24]
 800592e:	e016      	b.n	800595e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	0c5b      	lsrs	r3, r3, #17
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2b06      	cmp	r3, #6
 800593a:	d110      	bne.n	800595e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005942:	2208      	movs	r2, #8
 8005944:	4619      	mov	r1, r3
 8005946:	6a38      	ldr	r0, [r7, #32]
 8005948:	f007 f9ff 	bl	800cd4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005958:	441a      	add	r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0210 	orr.w	r2, r2, #16
 800596c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f007 fb3c 	bl	800cff0 <USB_ReadInterrupts>
 8005978:	4603      	mov	r3, r0
 800597a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800597e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005982:	d16e      	bne.n	8005a62 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f007 fb42 	bl	800d016 <USB_ReadDevAllOutEpInterrupt>
 8005992:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005994:	e062      	b.n	8005a5c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d057      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f007 fb67 	bl	800d07e <USB_ReadDevOutEPInterrupt>
 80059b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00c      	beq.n	80059d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	461a      	mov	r2, r3
 80059ca:	2301      	movs	r3, #1
 80059cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fd81 	bl	80064d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	2308      	movs	r3, #8
 80059f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fdbd 	bl	8006574 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	2310      	movs	r3, #16
 8005a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2320      	movs	r3, #32
 8005a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d199      	bne.n	8005996 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f007 fac2 	bl	800cff0 <USB_ReadInterrupts>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a76:	f040 8087 	bne.w	8005b88 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f007 fae3 	bl	800d04a <USB_ReadDevAllInEpInterrupt>
 8005a84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a8a:	e07a      	b.n	8005b82 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d06f      	beq.n	8005b76 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f007 fb0a 	bl	800d0ba <USB_ReadDevInEPInterrupt>
 8005aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69f9      	ldr	r1, [r7, #28]
 8005ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f00c fb15 	bl	801211e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	461a      	mov	r2, r3
 8005b28:	2310      	movs	r3, #16
 8005b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2302      	movs	r3, #2
 8005b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fc29 	bl	80063c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	3301      	adds	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d181      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f007 fa2f 	bl	800cff0 <USB_ReadInterrupts>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9c:	d122      	bne.n	8005be4 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d108      	bne.n	8005bce <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f00c fdc6 	bl	8012758 <HAL_PCDEx_LPM_Callback>
 8005bcc:	e002      	b.n	8005bd4 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f00c fb12 	bl	80121f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f007 fa01 	bl	800cff0 <USB_ReadInterrupts>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf8:	d112      	bne.n	8005c20 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d102      	bne.n	8005c10 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f00c face 	bl	80121ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c1e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f007 f9e3 	bl	800cff0 <USB_ReadInterrupts>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c34:	d121      	bne.n	8005c7a <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005c44:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f00c fd73 	bl	8012758 <HAL_PCDEx_LPM_Callback>
 8005c72:	e002      	b.n	8005c7a <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f00c fa99 	bl	80121ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 f9b6 	bl	800cff0 <USB_ReadInterrupts>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8e:	f040 80c5 	bne.w	8005e1c <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2110      	movs	r1, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f006 fb3d 	bl	800c32c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb6:	e056      	b.n	8005d66 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	3301      	adds	r3, #1
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3a3      	bcc.n	8005cb8 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d016      	beq.n	8005dba <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9c:	f043 030b 	orr.w	r3, r3, #11
 8005da0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db2:	f043 030b 	orr.w	r3, r3, #11
 8005db6:	6453      	str	r3, [r2, #68]	; 0x44
 8005db8:	e015      	b.n	8005de6 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dcc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005dd0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005de0:	f043 030b 	orr.w	r3, r3, #11
 8005de4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005df8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f007 f9b6 	bl	800d178 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f007 f8e5 	bl	800cff0 <USB_ReadInterrupts>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e30:	d124      	bne.n	8005e7c <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f007 f97b 	bl	800d132 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f006 fad4 	bl	800c3ee <USB_GetDevSpeed>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681c      	ldr	r4, [r3, #0]
 8005e52:	f001 fb33 	bl	80074bc <HAL_RCC_GetHCLKFreq>
 8005e56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4620      	mov	r0, r4
 8005e62:	f006 f82f 	bl	800bec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f00c f981 	bl	801216e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f007 f8b5 	bl	800cff0 <USB_ReadInterrupts>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f00c f95e 	bl	8012152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f002 0208 	and.w	r2, r2, #8
 8005ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f007 f8a0 	bl	800cff0 <USB_ReadInterrupts>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eba:	d10f      	bne.n	8005edc <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f00c f9d0 	bl	801226c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f007 f885 	bl	800cff0 <USB_ReadInterrupts>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef0:	d10f      	bne.n	8005f12 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f00c f9a3 	bl	8012248 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f007 f86a 	bl	800cff0 <USB_ReadInterrupts>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d10a      	bne.n	8005f3e <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f00c f9b1 	bl	8012290 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f007 f854 	bl	800cff0 <USB_ReadInterrupts>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d115      	bne.n	8005f7e <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f00c f9a1 	bl	80122ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	e000      	b.n	8005f7e <HAL_PCD_IRQHandler+0x742>
      return;
 8005f7c:	bf00      	nop
    }
  }
}
 8005f7e:	3734      	adds	r7, #52	; 0x34
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_PCD_SetAddress+0x1a>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e013      	b.n	8005fc6 <HAL_PCD_SetAddress+0x42>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f006 ffc4 	bl	800cf44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	4608      	mov	r0, r1
 8005fd8:	4611      	mov	r1, r2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	70fb      	strb	r3, [r7, #3]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	803b      	strh	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da0f      	bge.n	8006014 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	f003 020f 	and.w	r2, r3, #15
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	3338      	adds	r3, #56	; 0x38
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3304      	adds	r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	705a      	strb	r2, [r3, #1]
 8006012:	e00f      	b.n	8006034 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	f003 020f 	and.w	r2, r3, #15
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006040:	883a      	ldrh	r2, [r7, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	78ba      	ldrb	r2, [r7, #2]
 800604a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800605e:	78bb      	ldrb	r3, [r7, #2]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d102      	bne.n	800606a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_PCD_EP_Open+0xaa>
 8006074:	2302      	movs	r3, #2
 8006076:	e00e      	b.n	8006096 <HAL_PCD_EP_Open+0xc8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	4618      	mov	r0, r3
 8006088:	f006 f9d0 	bl	800c42c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006094:	7afb      	ldrb	r3, [r7, #11]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da0f      	bge.n	80060d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	4613      	mov	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	3338      	adds	r3, #56	; 0x38
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	3304      	adds	r3, #4
 80060c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	705a      	strb	r2, [r3, #1]
 80060d0:	e00f      	b.n	80060f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_PCD_EP_Close+0x6e>
 8006108:	2302      	movs	r3, #2
 800610a:	e00e      	b.n	800612a <HAL_PCD_EP_Close+0x8c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	4618      	mov	r0, r3
 800611c:	f006 fa0e 	bl	800c53c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	460b      	mov	r3, r1
 8006140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	f003 020f 	and.w	r2, r3, #15
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	3304      	adds	r3, #4
 800615a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2200      	movs	r2, #0
 8006172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	b2da      	uxtb	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006180:	7afb      	ldrb	r3, [r7, #11]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	4618      	mov	r0, r3
 8006192:	f006 fc8b 	bl	800caac <USB_EP0StartXfer>
 8006196:	e005      	b.n	80061a4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6979      	ldr	r1, [r7, #20]
 800619e:	4618      	mov	r0, r3
 80061a0:	f006 faa8 	bl	800c6f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061d0:	681b      	ldr	r3, [r3, #0]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	460b      	mov	r3, r1
 80061ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	4613      	mov	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3338      	adds	r3, #56	; 0x38
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2200      	movs	r2, #0
 8006216:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2201      	movs	r2, #1
 800621c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	b2da      	uxtb	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	4618      	mov	r0, r3
 800623c:	f006 fc36 	bl	800caac <USB_EP0StartXfer>
 8006240:	e005      	b.n	800624e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6979      	ldr	r1, [r7, #20]
 8006248:	4618      	mov	r0, r3
 800624a:	f006 fa53 	bl	800c6f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d901      	bls.n	8006276 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e04e      	b.n	8006314 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	da0f      	bge.n	800629e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	3338      	adds	r3, #56	; 0x38
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	3304      	adds	r3, #4
 8006294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	705a      	strb	r2, [r3, #1]
 800629c:	e00d      	b.n	80062ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	3304      	adds	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_PCD_EP_SetStall+0x82>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e01c      	b.n	8006314 <HAL_PCD_EP_SetStall+0xbc>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f006 fd57 	bl	800cd9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f006 ff37 	bl	800d178 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d901      	bls.n	800633a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e042      	b.n	80063c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800633a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800633e:	2b00      	cmp	r3, #0
 8006340:	da0f      	bge.n	8006362 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	3338      	adds	r3, #56	; 0x38
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4413      	add	r3, r2
 8006356:	3304      	adds	r3, #4
 8006358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	705a      	strb	r2, [r3, #1]
 8006360:	e00f      	b.n	8006382 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	b2da      	uxtb	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_PCD_EP_ClrStall+0x86>
 800639e:	2302      	movs	r3, #2
 80063a0:	e00e      	b.n	80063c0 <HAL_PCD_EP_ClrStall+0xa4>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f006 fd61 	bl	800ce78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	3338      	adds	r3, #56	; 0x38
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	3304      	adds	r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d901      	bls.n	8006400 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e067      	b.n	80064d0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	429a      	cmp	r2, r3
 8006414:	d902      	bls.n	800641c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	3303      	adds	r3, #3
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006424:	e026      	b.n	8006474 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	d902      	bls.n	8006442 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3303      	adds	r3, #3
 8006446:	089b      	lsrs	r3, r3, #2
 8006448:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68d9      	ldr	r1, [r3, #12]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	b29b      	uxth	r3, r3
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f006 fc46 	bl	800cce8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	441a      	add	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	b29b      	uxth	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	429a      	cmp	r2, r3
 8006488:	d809      	bhi.n	800649e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006492:	429a      	cmp	r2, r3
 8006494:	d203      	bcs.n	800649e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1c3      	bne.n	8006426 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d811      	bhi.n	80064ce <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	2201      	movs	r2, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	43db      	mvns	r3, r3
 80064c4:	6939      	ldr	r1, [r7, #16]
 80064c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ca:	4013      	ands	r3, r2
 80064cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	333c      	adds	r3, #60	; 0x3c
 80064f0:	3304      	adds	r3, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a19      	ldr	r2, [pc, #100]	; (8006570 <PCD_EP_OutXfrComplete_int+0x98>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d124      	bne.n	8006558 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006524:	461a      	mov	r2, r3
 8006526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652a:	6093      	str	r3, [r2, #8]
 800652c:	e01a      	b.n	8006564 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	461a      	mov	r2, r3
 8006546:	2320      	movs	r3, #32
 8006548:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f00b fdc9 	bl	80120e8 <HAL_PCD_DataOutStageCallback>
 8006556:	e005      	b.n	8006564 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f00b fdc2 	bl	80120e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	4f54310a 	.word	0x4f54310a

08006574 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	333c      	adds	r3, #60	; 0x3c
 800658c:	3304      	adds	r3, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <PCD_EP_OutSetupPacket_int+0x64>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d90e      	bls.n	80065c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	461a      	mov	r2, r3
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f00b fd7b 	bl	80120c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	4f54300a 	.word	0x4f54300a

080065dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
 80065e8:	4613      	mov	r3, r2
 80065ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065fa:	883b      	ldrh	r3, [r7, #0]
 80065fc:	0419      	lsls	r1, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	430a      	orrs	r2, r1
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
 8006608:	e028      	b.n	800665c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4413      	add	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e00d      	b.n	800663a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	3340      	adds	r3, #64	; 0x40
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	3301      	adds	r3, #1
 8006638:	73fb      	strb	r3, [r7, #15]
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	3b01      	subs	r3, #1
 8006640:	429a      	cmp	r2, r3
 8006642:	d3ec      	bcc.n	800661e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006644:	883b      	ldrh	r3, [r7, #0]
 8006646:	0418      	lsls	r0, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	3b01      	subs	r3, #1
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	4302      	orrs	r2, r0
 8006654:	3340      	adds	r3, #64	; 0x40
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066be:	f043 0303 	orr.w	r3, r3, #3
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a04      	ldr	r2, [pc, #16]	; (80066f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e2:	6013      	str	r3, [r2, #0]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40007000 	.word	0x40007000

080066f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <HAL_PWREx_GetVoltageRange+0x18>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40007000 	.word	0x40007000

08006710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d130      	bne.n	8006782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006720:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672c:	d038      	beq.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006736:	4a1e      	ldr	r2, [pc, #120]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2232      	movs	r2, #50	; 0x32
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	0c9b      	lsrs	r3, r3, #18
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006754:	e002      	b.n	800675c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b01      	subs	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006768:	d102      	bne.n	8006770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f2      	bne.n	8006756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677c:	d110      	bne.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800678a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678e:	d007      	beq.n	80067a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006798:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800679a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800679e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40007000 	.word	0x40007000
 80067b4:	20000040 	.word	0x20000040
 80067b8:	431bde83 	.word	0x431bde83

080067bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80067c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067ca:	6053      	str	r3, [r2, #4]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40007000 	.word	0x40007000

080067dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80067e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ea:	6053      	str	r3, [r2, #4]
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40007000 	.word	0x40007000

080067fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af02      	add	r7, sp, #8
 8006802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006804:	f7fd f9a8 	bl	8003b58 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e075      	b.n	8006900 <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_QSPI_Init+0x28>
 8006820:	2302      	movs	r3, #2
 8006822:	e06d      	b.n	8006900 <HAL_QSPI_Init+0x104>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fc fd1b 	bl	800327c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006846:	f241 3188 	movw	r1, #5000	; 0x1388
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f85e 	bl	800690c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	021a      	lsls	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	2120      	movs	r1, #32
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f856 	bl	8006928 <QSPI_WaitFlagStateUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d137      	bne.n	80068f6 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006890:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6852      	ldr	r2, [r2, #4]
 8006898:	0611      	lsls	r1, r2, #24
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68d2      	ldr	r2, [r2, #12]
 800689e:	4311      	orrs	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	69d2      	ldr	r2, [r2, #28]
 80068a4:	4311      	orrs	r1, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a12      	ldr	r2, [r2, #32]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_QSPI_Init+0x10c>)
 80068bc:	4013      	ands	r3, r2
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6912      	ldr	r2, [r2, #16]
 80068c2:	0411      	lsls	r1, r2, #16
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6952      	ldr	r2, [r2, #20]
 80068c8:	4311      	orrs	r1, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6992      	ldr	r2, [r2, #24]
 80068ce:	4311      	orrs	r1, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80068fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	ffe0f8fe 	.word	0xffe0f8fe

0800690c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006938:	e01a      	b.n	8006970 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006940:	d016      	beq.n	8006970 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fd f909 	bl	8003b58 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2204      	movs	r2, #4
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006964:	f043 0201 	orr.w	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e00e      	b.n	800698e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	429a      	cmp	r2, r3
 800698a:	d1d6      	bne.n	800693a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f000 bc16 	b.w	80071d8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ac:	4ba0      	ldr	r3, [pc, #640]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 030c 	and.w	r3, r3, #12
 80069b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069b6:	4b9e      	ldr	r3, [pc, #632]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80e4 	beq.w	8006b96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <HAL_RCC_OscConfig+0x4c>
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	f040 808b 	bne.w	8006af2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f040 8087 	bne.w	8006af2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069e4:	4b92      	ldr	r3, [pc, #584]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_OscConfig+0x64>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e3ed      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	4b8b      	ldr	r3, [pc, #556]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <HAL_RCC_OscConfig+0x7e>
 8006a0c:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a14:	e005      	b.n	8006a22 <HAL_RCC_OscConfig+0x8a>
 8006a16:	4b86      	ldr	r3, [pc, #536]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d223      	bcs.n	8006a6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fdb0 	bl	8007590 <RCC_SetFlashLatencyFromMSIRange>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e3ce      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a3a:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a7c      	ldr	r2, [pc, #496]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a40:	f043 0308 	orr.w	r3, r3, #8
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b7a      	ldr	r3, [pc, #488]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	4977      	ldr	r1, [pc, #476]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a58:	4b75      	ldr	r3, [pc, #468]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	4972      	ldr	r1, [pc, #456]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	e025      	b.n	8006aba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a6e:	4b70      	ldr	r3, [pc, #448]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a6f      	ldr	r2, [pc, #444]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a74:	f043 0308 	orr.w	r3, r3, #8
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	4b6d      	ldr	r3, [pc, #436]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	496a      	ldr	r1, [pc, #424]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a8c:	4b68      	ldr	r3, [pc, #416]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	4965      	ldr	r1, [pc, #404]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fd70 	bl	8007590 <RCC_SetFlashLatencyFromMSIRange>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e38e      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006aba:	f000 fc75 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8006abe:	4601      	mov	r1, r0
 8006ac0:	4b5b      	ldr	r3, [pc, #364]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	4a5a      	ldr	r2, [pc, #360]	; (8006c34 <HAL_RCC_OscConfig+0x29c>)
 8006acc:	5cd3      	ldrb	r3, [r2, r3]
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ad6:	4a58      	ldr	r2, [pc, #352]	; (8006c38 <HAL_RCC_OscConfig+0x2a0>)
 8006ad8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ada:	4b58      	ldr	r3, [pc, #352]	; (8006c3c <HAL_RCC_OscConfig+0x2a4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fc fde4 	bl	80036ac <HAL_InitTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d052      	beq.n	8006b94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	e372      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d032      	beq.n	8006b60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006afa:	4b4d      	ldr	r3, [pc, #308]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4c      	ldr	r2, [pc, #304]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b06:	f7fd f827 	bl	8003b58 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b0e:	f7fd f823 	bl	8003b58 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e35b      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b20:	4b43      	ldr	r3, [pc, #268]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a3f      	ldr	r2, [pc, #252]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b32:	f043 0308 	orr.w	r3, r3, #8
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	4b3d      	ldr	r3, [pc, #244]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	493a      	ldr	r1, [pc, #232]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b4a:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	4935      	ldr	r1, [pc, #212]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	604b      	str	r3, [r1, #4]
 8006b5e:	e01a      	b.n	8006b96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b60:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a32      	ldr	r2, [pc, #200]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b6c:	f7fc fff4 	bl	8003b58 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b74:	f7fc fff0 	bl	8003b58 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e328      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b86:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f0      	bne.n	8006b74 <HAL_RCC_OscConfig+0x1dc>
 8006b92:	e000      	b.n	8006b96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d073      	beq.n	8006c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x21c>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b0c      	cmp	r3, #12
 8006bac:	d10e      	bne.n	8006bcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d10b      	bne.n	8006bcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d063      	beq.n	8006c88 <HAL_RCC_OscConfig+0x2f0>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d15f      	bne.n	8006c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e305      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCC_OscConfig+0x24c>
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e01d      	b.n	8006c20 <HAL_RCC_OscConfig+0x288>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x270>
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0f      	ldr	r2, [pc, #60]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e00b      	b.n	8006c20 <HAL_RCC_OscConfig+0x288>
 8006c08:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a05      	ldr	r2, [pc, #20]	; (8006c30 <HAL_RCC_OscConfig+0x298>)
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01b      	beq.n	8006c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fc ff96 	bl	8003b58 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c2e:	e010      	b.n	8006c52 <HAL_RCC_OscConfig+0x2ba>
 8006c30:	40021000 	.word	0x40021000
 8006c34:	08014100 	.word	0x08014100
 8006c38:	20000040 	.word	0x20000040
 8006c3c:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c40:	f7fc ff8a 	bl	8003b58 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	; 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e2c2      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c52:	4baf      	ldr	r3, [pc, #700]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0x2a8>
 8006c5e:	e014      	b.n	8006c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fc ff7a 	bl	8003b58 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fc ff76 	bl	8003b58 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	; 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e2ae      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c7a:	4ba5      	ldr	r3, [pc, #660]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x2d0>
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d060      	beq.n	8006d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x310>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b0c      	cmp	r3, #12
 8006ca0:	d119      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d116      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca8:	4b99      	ldr	r3, [pc, #612]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x328>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e28b      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc0:	4b93      	ldr	r3, [pc, #588]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	4990      	ldr	r1, [pc, #576]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd4:	e040      	b.n	8006d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d023      	beq.n	8006d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cde:	4b8c      	ldr	r3, [pc, #560]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a8b      	ldr	r2, [pc, #556]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cea:	f7fc ff35 	bl	8003b58 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf2:	f7fc ff31 	bl	8003b58 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e269      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d04:	4b82      	ldr	r3, [pc, #520]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d10:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	061b      	lsls	r3, r3, #24
 8006d1e:	497c      	ldr	r1, [pc, #496]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	604b      	str	r3, [r1, #4]
 8006d24:	e018      	b.n	8006d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d26:	4b7a      	ldr	r3, [pc, #488]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a79      	ldr	r2, [pc, #484]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d32:	f7fc ff11 	bl	8003b58 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d3a:	f7fc ff0d 	bl	8003b58 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e245      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d4c:	4b70      	ldr	r3, [pc, #448]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f0      	bne.n	8006d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0308 	and.w	r3, r3, #8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d03c      	beq.n	8006dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01c      	beq.n	8006da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d6c:	4b68      	ldr	r3, [pc, #416]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d72:	4a67      	ldr	r2, [pc, #412]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7c:	f7fc feec 	bl	8003b58 <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d82:	e008      	b.n	8006d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d84:	f7fc fee8 	bl	8003b58 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e220      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d96:	4b5e      	ldr	r3, [pc, #376]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0ef      	beq.n	8006d84 <HAL_RCC_OscConfig+0x3ec>
 8006da4:	e01b      	b.n	8006dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da6:	4b5a      	ldr	r3, [pc, #360]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dac:	4a58      	ldr	r2, [pc, #352]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fc fecf 	bl	8003b58 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fc fecb 	bl	8003b58 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e203      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dd0:	4b4f      	ldr	r3, [pc, #316]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ef      	bne.n	8006dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80a6 	beq.w	8006f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dec:	2300      	movs	r3, #0
 8006dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006df0:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10d      	bne.n	8006e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfc:	4b44      	ldr	r3, [pc, #272]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	4a43      	ldr	r2, [pc, #268]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e06:	6593      	str	r3, [r2, #88]	; 0x58
 8006e08:	4b41      	ldr	r3, [pc, #260]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e14:	2301      	movs	r3, #1
 8006e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e18:	4b3e      	ldr	r3, [pc, #248]	; (8006f14 <HAL_RCC_OscConfig+0x57c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d118      	bne.n	8006e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_RCC_OscConfig+0x57c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCC_OscConfig+0x57c>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e30:	f7fc fe92 	bl	8003b58 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fc fe8e 	bl	8003b58 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e1c6      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e4a:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <HAL_RCC_OscConfig+0x57c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d108      	bne.n	8006e70 <HAL_RCC_OscConfig+0x4d8>
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e66:	f043 0301 	orr.w	r3, r3, #1
 8006e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e6e:	e024      	b.n	8006eba <HAL_RCC_OscConfig+0x522>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d110      	bne.n	8006e9a <HAL_RCC_OscConfig+0x502>
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	4a24      	ldr	r2, [pc, #144]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e80:	f043 0304 	orr.w	r3, r3, #4
 8006e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e98:	e00f      	b.n	8006eba <HAL_RCC_OscConfig+0x522>
 8006e9a:	4b1d      	ldr	r3, [pc, #116]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006eaa:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006eb2:	f023 0304 	bic.w	r3, r3, #4
 8006eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d016      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec2:	f7fc fe49 	bl	8003b58 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc fe45 	bl	8003b58 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e17b      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <HAL_RCC_OscConfig+0x578>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ed      	beq.n	8006eca <HAL_RCC_OscConfig+0x532>
 8006eee:	e01a      	b.n	8006f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef0:	f7fc fe32 	bl	8003b58 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ef6:	e00f      	b.n	8006f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ef8:	f7fc fe2e 	bl	8003b58 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d906      	bls.n	8006f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e164      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
 8006f0e:	bf00      	nop
 8006f10:	40021000 	.word	0x40021000
 8006f14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f18:	4ba8      	ldr	r3, [pc, #672]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e8      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2c:	4ba3      	ldr	r3, [pc, #652]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	4aa2      	ldr	r2, [pc, #648]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d03c      	beq.n	8006fbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01c      	beq.n	8006f86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f4c:	4b9b      	ldr	r3, [pc, #620]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f52:	4a9a      	ldr	r2, [pc, #616]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5c:	f7fc fdfc 	bl	8003b58 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f64:	f7fc fdf8 	bl	8003b58 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e130      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f76:	4b91      	ldr	r3, [pc, #580]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0ef      	beq.n	8006f64 <HAL_RCC_OscConfig+0x5cc>
 8006f84:	e01b      	b.n	8006fbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f86:	4b8d      	ldr	r3, [pc, #564]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f8c:	4a8b      	ldr	r2, [pc, #556]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f96:	f7fc fddf 	bl	8003b58 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9e:	f7fc fddb 	bl	8003b58 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e113      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fb0:	4b82      	ldr	r3, [pc, #520]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1ef      	bne.n	8006f9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 8107 	beq.w	80071d6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f040 80cb 	bne.w	8007168 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fd2:	4b7a      	ldr	r3, [pc, #488]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f003 0203 	and.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d12c      	bne.n	8007040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d123      	bne.n	8007040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d11b      	bne.n	8007040 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d113      	bne.n	8007040 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	3b01      	subs	r3, #1
 8007026:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d109      	bne.n	8007040 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	3b01      	subs	r3, #1
 800703a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d06d      	beq.n	800711c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b0c      	cmp	r3, #12
 8007044:	d068      	beq.n	8007118 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007046:	4b5d      	ldr	r3, [pc, #372]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d105      	bne.n	800705e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007052:	4b5a      	ldr	r3, [pc, #360]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e0ba      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007062:	4b56      	ldr	r3, [pc, #344]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a55      	ldr	r2, [pc, #340]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800706c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800706e:	f7fc fd73 	bl	8003b58 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007074:	e008      	b.n	8007088 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007076:	f7fc fd6f 	bl	8003b58 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e0a7      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007088:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f0      	bne.n	8007076 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	4b49      	ldr	r3, [pc, #292]	; (80071c0 <HAL_RCC_OscConfig+0x828>)
 800709a:	4013      	ands	r3, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070a4:	3a01      	subs	r2, #1
 80070a6:	0112      	lsls	r2, r2, #4
 80070a8:	4311      	orrs	r1, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070ae:	0212      	lsls	r2, r2, #8
 80070b0:	4311      	orrs	r1, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070b6:	0852      	lsrs	r2, r2, #1
 80070b8:	3a01      	subs	r2, #1
 80070ba:	0552      	lsls	r2, r2, #21
 80070bc:	4311      	orrs	r1, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070c2:	0852      	lsrs	r2, r2, #1
 80070c4:	3a01      	subs	r2, #1
 80070c6:	0652      	lsls	r2, r2, #25
 80070c8:	4311      	orrs	r1, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070ce:	06d2      	lsls	r2, r2, #27
 80070d0:	430a      	orrs	r2, r1
 80070d2:	493a      	ldr	r1, [pc, #232]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070d8:	4b38      	ldr	r3, [pc, #224]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a37      	ldr	r2, [pc, #220]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 80070de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070e4:	4b35      	ldr	r3, [pc, #212]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4a34      	ldr	r2, [pc, #208]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 80070ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070f0:	f7fc fd32 	bl	8003b58 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fc fd2e 	bl	8003b58 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e066      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800710a:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f0      	beq.n	80070f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007116:	e05e      	b.n	80071d6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e05d      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800711c:	4b27      	ldr	r3, [pc, #156]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d156      	bne.n	80071d6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007128:	4b24      	ldr	r3, [pc, #144]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a23      	ldr	r2, [pc, #140]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800712e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007132:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007134:	4b21      	ldr	r3, [pc, #132]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4a20      	ldr	r2, [pc, #128]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800713a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800713e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007140:	f7fc fd0a 	bl	8003b58 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fc fd06 	bl	8003b58 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e03e      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800715a:	4b18      	ldr	r3, [pc, #96]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <HAL_RCC_OscConfig+0x7b0>
 8007166:	e036      	b.n	80071d6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d031      	beq.n	80071d2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007178:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007186:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 800718c:	f023 0303 	bic.w	r3, r3, #3
 8007190:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	4a09      	ldr	r2, [pc, #36]	; (80071bc <HAL_RCC_OscConfig+0x824>)
 8007198:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fc fcd9 	bl	8003b58 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a8:	e00c      	b.n	80071c4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071aa:	f7fc fcd5 	bl	8003b58 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d905      	bls.n	80071c4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e00d      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
 80071bc:	40021000 	.word	0x40021000
 80071c0:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCC_OscConfig+0x848>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1ec      	bne.n	80071aa <HAL_RCC_OscConfig+0x812>
 80071d0:	e001      	b.n	80071d6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3720      	adds	r7, #32
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40021000 	.word	0x40021000

080071e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e0c8      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071f8:	4b66      	ldr	r3, [pc, #408]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d910      	bls.n	8007228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007206:	4b63      	ldr	r3, [pc, #396]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f023 0207 	bic.w	r2, r3, #7
 800720e:	4961      	ldr	r1, [pc, #388]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	4313      	orrs	r3, r2
 8007214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007216:	4b5f      	ldr	r3, [pc, #380]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d001      	beq.n	8007228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e0b0      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d04c      	beq.n	80072ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d107      	bne.n	800724c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800723c:	4b56      	ldr	r3, [pc, #344]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d121      	bne.n	800728c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e09e      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d107      	bne.n	8007264 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007254:	4b50      	ldr	r3, [pc, #320]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d115      	bne.n	800728c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e092      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d107      	bne.n	800727c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800726c:	4b4a      	ldr	r3, [pc, #296]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e086      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727c:	4b46      	ldr	r3, [pc, #280]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e07e      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800728c:	4b42      	ldr	r3, [pc, #264]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f023 0203 	bic.w	r2, r3, #3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	493f      	ldr	r1, [pc, #252]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729e:	f7fc fc5b 	bl	8003b58 <HAL_GetTick>
 80072a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a6:	f7fc fc57 	bl	8003b58 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e066      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 020c 	and.w	r2, r3, #12
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d1eb      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072da:	4b2f      	ldr	r3, [pc, #188]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	492c      	ldr	r1, [pc, #176]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072ec:	4b29      	ldr	r3, [pc, #164]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d210      	bcs.n	800731c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fa:	4b26      	ldr	r3, [pc, #152]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f023 0207 	bic.w	r2, r3, #7
 8007302:	4924      	ldr	r1, [pc, #144]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <HAL_RCC_ClockConfig+0x1b0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e036      	b.n	800738a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007328:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	4918      	ldr	r1, [pc, #96]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 8007336:	4313      	orrs	r3, r2
 8007338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4910      	ldr	r1, [pc, #64]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 8007356:	4313      	orrs	r3, r2
 8007358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800735a:	f000 f825 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800735e:	4601      	mov	r1, r0
 8007360:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <HAL_RCC_ClockConfig+0x1b4>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	091b      	lsrs	r3, r3, #4
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	4a0c      	ldr	r2, [pc, #48]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	5cd3      	ldrb	r3, [r2, r3]
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	fa21 f303 	lsr.w	r3, r1, r3
 8007376:	4a0a      	ldr	r2, [pc, #40]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800737a:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <HAL_RCC_ClockConfig+0x1c0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fc f994 	bl	80036ac <HAL_InitTick>
 8007384:	4603      	mov	r3, r0
 8007386:	72fb      	strb	r3, [r7, #11]

  return status;
 8007388:	7afb      	ldrb	r3, [r7, #11]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40022000 	.word	0x40022000
 8007398:	40021000 	.word	0x40021000
 800739c:	08014100 	.word	0x08014100
 80073a0:	20000040 	.word	0x20000040
 80073a4:	20000044 	.word	0x20000044

080073a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073b6:	4b3d      	ldr	r3, [pc, #244]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073c0:	4b3a      	ldr	r3, [pc, #232]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x34>
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b0c      	cmp	r3, #12
 80073d4:	d121      	bne.n	800741a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d11e      	bne.n	800741a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80073dc:	4b33      	ldr	r3, [pc, #204]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80073e8:	4b30      	ldr	r3, [pc, #192]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 80073ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	e005      	b.n	8007404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007404:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007418:	e00a      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b04      	cmp	r3, #4
 800741e:	d102      	bne.n	8007426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007420:	4b24      	ldr	r3, [pc, #144]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	e004      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d101      	bne.n	8007430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800742c:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800742e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b0c      	cmp	r3, #12
 8007434:	d133      	bne.n	800749e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007436:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d002      	beq.n	800744c <HAL_RCC_GetSysClockFreq+0xa4>
 8007446:	2b03      	cmp	r3, #3
 8007448:	d003      	beq.n	8007452 <HAL_RCC_GetSysClockFreq+0xaa>
 800744a:	e005      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800744e:	617b      	str	r3, [r7, #20]
      break;
 8007450:	e005      	b.n	800745e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007452:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007454:	617b      	str	r3, [r7, #20]
      break;
 8007456:	e002      	b.n	800745e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	617b      	str	r3, [r7, #20]
      break;
 800745c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	3301      	adds	r3, #1
 800746a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800746c:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	fb02 f203 	mul.w	r2, r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <HAL_RCC_GetSysClockFreq+0x104>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	0e5b      	lsrs	r3, r3, #25
 800748a:	f003 0303 	and.w	r3, r3, #3
 800748e:	3301      	adds	r3, #1
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	fbb2 f3f3 	udiv	r3, r2, r3
 800749c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800749e:	69bb      	ldr	r3, [r7, #24]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3724      	adds	r7, #36	; 0x24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	40021000 	.word	0x40021000
 80074b0:	08014118 	.word	0x08014118
 80074b4:	00f42400 	.word	0x00f42400
 80074b8:	007a1200 	.word	0x007a1200

080074bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074c0:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80074c2:	681b      	ldr	r3, [r3, #0]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000040 	.word	0x20000040

080074d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074d8:	f7ff fff0 	bl	80074bc <HAL_RCC_GetHCLKFreq>
 80074dc:	4601      	mov	r1, r0
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	0a1b      	lsrs	r3, r3, #8
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	4a04      	ldr	r2, [pc, #16]	; (80074fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80074ea:	5cd3      	ldrb	r3, [r2, r3]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40021000 	.word	0x40021000
 80074fc:	08014110 	.word	0x08014110

08007500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007504:	f7ff ffda 	bl	80074bc <HAL_RCC_GetHCLKFreq>
 8007508:	4601      	mov	r1, r0
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	0adb      	lsrs	r3, r3, #11
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4a04      	ldr	r2, [pc, #16]	; (8007528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007516:	5cd3      	ldrb	r3, [r2, r3]
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40021000 	.word	0x40021000
 8007528:	08014110 	.word	0x08014110

0800752c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	220f      	movs	r2, #15
 800753a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <HAL_RCC_GetClockConfig+0x5c>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0203 	and.w	r2, r3, #3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007548:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <HAL_RCC_GetClockConfig+0x5c>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <HAL_RCC_GetClockConfig+0x5c>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007560:	4b09      	ldr	r3, [pc, #36]	; (8007588 <HAL_RCC_GetClockConfig+0x5c>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <HAL_RCC_GetClockConfig+0x60>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0207 	and.w	r2, r3, #7
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	601a      	str	r2, [r3, #0]
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40021000 	.word	0x40021000
 800758c:	40022000 	.word	0x40022000

08007590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800759c:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80075a8:	f7ff f8a4 	bl	80066f4 <HAL_PWREx_GetVoltageRange>
 80075ac:	6178      	str	r0, [r7, #20]
 80075ae:	e014      	b.n	80075da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80075b0:	4b25      	ldr	r3, [pc, #148]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	4a24      	ldr	r2, [pc, #144]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ba:	6593      	str	r3, [r2, #88]	; 0x58
 80075bc:	4b22      	ldr	r3, [pc, #136]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075c8:	f7ff f894 	bl	80066f4 <HAL_PWREx_GetVoltageRange>
 80075cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075ce:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d2:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e0:	d10b      	bne.n	80075fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b80      	cmp	r3, #128	; 0x80
 80075e6:	d919      	bls.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2ba0      	cmp	r3, #160	; 0xa0
 80075ec:	d902      	bls.n	80075f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80075ee:	2302      	movs	r3, #2
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	e013      	b.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80075f4:	2301      	movs	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	e010      	b.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b80      	cmp	r3, #128	; 0x80
 80075fe:	d902      	bls.n	8007606 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007600:	2303      	movs	r3, #3
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	e00a      	b.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b80      	cmp	r3, #128	; 0x80
 800760a:	d102      	bne.n	8007612 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800760c:	2302      	movs	r3, #2
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e004      	b.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b70      	cmp	r3, #112	; 0x70
 8007616:	d101      	bne.n	800761c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007618:	2301      	movs	r3, #1
 800761a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f023 0207 	bic.w	r2, r3, #7
 8007624:	4909      	ldr	r1, [pc, #36]	; (800764c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	429a      	cmp	r2, r3
 8007638:	d001      	beq.n	800763e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40021000 	.word	0x40021000
 800764c:	40022000 	.word	0x40022000

08007650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007658:	2300      	movs	r3, #0
 800765a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800765c:	2300      	movs	r3, #0
 800765e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d03f      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007674:	d01c      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767a:	d802      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00e      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007680:	e01f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007686:	d003      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800768c:	d01c      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800768e:	e018      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007690:	4b85      	ldr	r3, [pc, #532]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4a84      	ldr	r2, [pc, #528]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800769c:	e015      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 ffa1 	bl	80085ec <RCCEx_PLLSAI1_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076ae:	e00c      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3320      	adds	r3, #32
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f888 	bl	80087cc <RCCEx_PLLSAI2_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076c0:	e003      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	74fb      	strb	r3, [r7, #19]
      break;
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80076c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ca:	7cfb      	ldrb	r3, [r7, #19]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076d0:	4b75      	ldr	r3, [pc, #468]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076de:	4972      	ldr	r1, [pc, #456]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076e6:	e001      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d03f      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007700:	d01c      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007706:	d802      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00e      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800770c:	e01f      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800770e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007712:	d003      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007718:	d01c      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800771a:	e018      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800771c:	4b62      	ldr	r3, [pc, #392]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	4a61      	ldr	r2, [pc, #388]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007726:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007728:	e015      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3304      	adds	r3, #4
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f000 ff5b 	bl	80085ec <RCCEx_PLLSAI1_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800773a:	e00c      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3320      	adds	r3, #32
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f001 f842 	bl	80087cc <RCCEx_PLLSAI2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800774c:	e003      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	74fb      	strb	r3, [r7, #19]
      break;
 8007752:	e000      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007756:	7cfb      	ldrb	r3, [r7, #19]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800775c:	4b52      	ldr	r3, [pc, #328]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776a:	494f      	ldr	r1, [pc, #316]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007772:	e001      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80a0 	beq.w	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007786:	2300      	movs	r3, #0
 8007788:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800778a:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a0:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a4:	4a40      	ldr	r2, [pc, #256]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077aa:	6593      	str	r3, [r2, #88]	; 0x58
 80077ac:	4b3e      	ldr	r3, [pc, #248]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077b8:	2301      	movs	r3, #1
 80077ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077bc:	4b3b      	ldr	r3, [pc, #236]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a3a      	ldr	r2, [pc, #232]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077c8:	f7fc f9c6 	bl	8003b58 <HAL_GetTick>
 80077cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077ce:	e009      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d0:	f7fc f9c2 	bl	8003b58 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d902      	bls.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	74fb      	strb	r3, [r7, #19]
        break;
 80077e2:	e005      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077e4:	4b31      	ldr	r3, [pc, #196]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0ef      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80077f0:	7cfb      	ldrb	r3, [r7, #19]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d15c      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077f6:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007800:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01f      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	429a      	cmp	r2, r3
 8007812:	d019      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007814:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007820:	4b21      	ldr	r3, [pc, #132]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007826:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800782c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007840:	4a19      	ldr	r2, [pc, #100]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d016      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007852:	f7fc f981 	bl	8003b58 <HAL_GetTick>
 8007856:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007858:	e00b      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fc f97d 	bl	8003b58 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d902      	bls.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	74fb      	strb	r3, [r7, #19]
            break;
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007872:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ec      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10c      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	4904      	ldr	r1, [pc, #16]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800789e:	e009      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078a0:	7cfb      	ldrb	r3, [r7, #19]
 80078a2:	74bb      	strb	r3, [r7, #18]
 80078a4:	e006      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80078a6:	bf00      	nop
 80078a8:	40021000 	.word	0x40021000
 80078ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078b4:	7c7b      	ldrb	r3, [r7, #17]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d105      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078ba:	4ba6      	ldr	r3, [pc, #664]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	4aa5      	ldr	r2, [pc, #660]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078d2:	4ba0      	ldr	r3, [pc, #640]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d8:	f023 0203 	bic.w	r2, r3, #3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	499c      	ldr	r1, [pc, #624]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078f4:	4b97      	ldr	r3, [pc, #604]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	f023 020c 	bic.w	r2, r3, #12
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	4994      	ldr	r1, [pc, #592]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007916:	4b8f      	ldr	r3, [pc, #572]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	498b      	ldr	r1, [pc, #556]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007938:	4b86      	ldr	r3, [pc, #536]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	4983      	ldr	r1, [pc, #524]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800795a:	4b7e      	ldr	r3, [pc, #504]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	497a      	ldr	r1, [pc, #488]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800797c:	4b75      	ldr	r3, [pc, #468]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	4972      	ldr	r1, [pc, #456]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800798c:	4313      	orrs	r3, r2
 800798e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800799e:	4b6d      	ldr	r3, [pc, #436]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ac:	4969      	ldr	r1, [pc, #420]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079c0:	4b64      	ldr	r3, [pc, #400]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ce:	4961      	ldr	r1, [pc, #388]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079e2:	4b5c      	ldr	r3, [pc, #368]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	4958      	ldr	r1, [pc, #352]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a04:	4b53      	ldr	r3, [pc, #332]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a12:	4950      	ldr	r1, [pc, #320]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a26:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	4947      	ldr	r1, [pc, #284]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a4e:	f023 0203 	bic.w	r2, r3, #3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a56:	493f      	ldr	r1, [pc, #252]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d028      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a6a:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a78:	4936      	ldr	r1, [pc, #216]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a88:	d106      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a8a:	4b32      	ldr	r3, [pc, #200]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	4a31      	ldr	r2, [pc, #196]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a94:	60d3      	str	r3, [r2, #12]
 8007a96:	e011      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fd9f 	bl	80085ec <RCCEx_PLLSAI1_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007ab8:	7cfb      	ldrb	r3, [r7, #19]
 8007aba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d028      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ac8:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	491f      	ldr	r1, [pc, #124]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4a19      	ldr	r2, [pc, #100]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007af2:	60d3      	str	r3, [r2, #12]
 8007af4:	e011      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007afe:	d10c      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	2101      	movs	r1, #1
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 fd70 	bl	80085ec <RCCEx_PLLSAI1_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b10:	7cfb      	ldrb	r3, [r7, #19]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8007b16:	7cfb      	ldrb	r3, [r7, #19]
 8007b18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d02a      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b34:	4907      	ldr	r1, [pc, #28]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b44:	d108      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4a02      	ldr	r2, [pc, #8]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b50:	60d3      	str	r3, [r2, #12]
 8007b52:	e013      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007b54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b60:	d10c      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3304      	adds	r3, #4
 8007b66:	2101      	movs	r1, #1
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fd3f 	bl	80085ec <RCCEx_PLLSAI1_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b72:	7cfb      	ldrb	r3, [r7, #19]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8007b78:	7cfb      	ldrb	r3, [r7, #19]
 8007b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02f      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b88:	4b2c      	ldr	r3, [pc, #176]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b96:	4929      	ldr	r1, [pc, #164]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba6:	d10d      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fd1c 	bl	80085ec <RCCEx_PLLSAI1_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bb8:	7cfb      	ldrb	r3, [r7, #19]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d014      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	74bb      	strb	r3, [r7, #18]
 8007bc2:	e011      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d10c      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3320      	adds	r3, #32
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fdf9 	bl	80087cc <RCCEx_PLLSAI2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bde:	7cfb      	ldrb	r3, [r7, #19]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c04:	490d      	ldr	r1, [pc, #52]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c28:	4904      	ldr	r1, [pc, #16]	; (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007c30:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40021000 	.word	0x40021000

08007c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c52:	d137      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c54:	4ba9      	ldr	r3, [pc, #676]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c66:	d014      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6c:	d01e      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d001      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007c74:	f000 bca0 	b.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c78:	4ba0      	ldr	r3, [pc, #640]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	f040 8493 	bne.w	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 8007c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8c:	61fb      	str	r3, [r7, #28]
      break;
 8007c8e:	f000 bc8e 	b.w	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007c92:	4b9a      	ldr	r3, [pc, #616]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	f040 8488 	bne.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 8007ca2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ca6:	61fb      	str	r3, [r7, #28]
      break;
 8007ca8:	f000 bc83 	b.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007cac:	4b93      	ldr	r3, [pc, #588]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb8:	f040 847d 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8007cbc:	4b90      	ldr	r3, [pc, #576]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007cbe:	61fb      	str	r3, [r7, #28]
      break;
 8007cc0:	f000 bc79 	b.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cc4:	4b8d      	ldr	r3, [pc, #564]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d023      	beq.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d02e      	beq.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d139      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007cdc:	4b87      	ldr	r3, [pc, #540]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d116      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007ce8:	4b84      	ldr	r3, [pc, #528]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8007cf4:	4b81      	ldr	r3, [pc, #516]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	091b      	lsrs	r3, r3, #4
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	e005      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007d00:	4b7e      	ldr	r3, [pc, #504]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	4a7d      	ldr	r2, [pc, #500]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d12:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d14:	e01f      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61bb      	str	r3, [r7, #24]
      break;
 8007d1a:	e01c      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d1c:	4b77      	ldr	r3, [pc, #476]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d28:	d102      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8007d2a:	4b77      	ldr	r3, [pc, #476]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007d2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d2e:	e012      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61bb      	str	r3, [r7, #24]
      break;
 8007d34:	e00f      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d36:	4b71      	ldr	r3, [pc, #452]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d42:	d102      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8007d44:	4b71      	ldr	r3, [pc, #452]	; (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d46:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d48:	e005      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61bb      	str	r3, [r7, #24]
      break;
 8007d4e:	e002      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61bb      	str	r3, [r7, #24]
      break;
 8007d54:	bf00      	nop
    }

    switch(PeriphClk)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5c:	f000 8384 	beq.w	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d64:	d828      	bhi.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	f000 81fb 	beq.w	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d811      	bhi.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f000 8144 	beq.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d804      	bhi.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	f000 8107 	beq.w	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007d80:	f000 bc1a 	b.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	f000 8184 	beq.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	f000 81b5 	beq.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 8007d90:	f000 bc12 	b.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007d94:	2b40      	cmp	r3, #64	; 0x40
 8007d96:	f000 82dd 	beq.w	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	d804      	bhi.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	f000 821e 	beq.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 8007da4:	f000 bc08 	b.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007da8:	2b80      	cmp	r3, #128	; 0x80
 8007daa:	f000 82f6 	beq.w	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8007dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db2:	f000 8315 	beq.w	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 8007db6:	e3ff      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dbc:	f000 8248 	beq.w	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8007dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc4:	d811      	bhi.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dca:	d025      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd0:	d804      	bhi.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8007dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd6:	f000 838d 	beq.w	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 8007dda:	e3ed      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de0:	d021      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de6:	d025      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 8007de8:	e3e6      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dee:	d021      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df4:	d808      	bhi.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfa:	f000 83bc 	beq.w	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e02:	f000 8296 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 8007e06:	e3d7      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 8007e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e0c:	d012      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e12:	f000 8308 	beq.w	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 8007e16:	e3cf      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007e18:	69b9      	ldr	r1, [r7, #24]
 8007e1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e1e:	f000 fdaf 	bl	8008980 <RCCEx_GetSAIxPeriphCLKFreq>
 8007e22:	61f8      	str	r0, [r7, #28]
      break;
 8007e24:	e3c8      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007e26:	69b9      	ldr	r1, [r7, #24]
 8007e28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e2c:	f000 fda8 	bl	8008980 <RCCEx_GetSAIxPeriphCLKFreq>
 8007e30:	61f8      	str	r0, [r7, #28]
      break;
 8007e32:	e3c1      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007e34:	4b31      	ldr	r3, [pc, #196]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007e3e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e46:	d063      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e4c:	d803      	bhi.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 808b 	beq.w	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 8007e54:	e09a      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 8007e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e5a:	d021      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007e5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e60:	d000      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 8007e62:	e093      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e64:	4b25      	ldr	r3, [pc, #148]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	f040 8086 	bne.w	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	091b      	lsrs	r3, r3, #4
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	e005      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007e8a:	4b1c      	ldr	r3, [pc, #112]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9c:	61fb      	str	r3, [r7, #28]
          break;
 8007e9e:	e06e      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007ea0:	4b16      	ldr	r3, [pc, #88]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eac:	d169      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eba:	d162      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	fb02 f203 	mul.w	r2, r2, r3
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	3301      	adds	r3, #1
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	0d5b      	lsrs	r3, r3, #21
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	3301      	adds	r3, #1
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
          break;
 8007ef8:	e043      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000
 8007f00:	0003d090 	.word	0x0003d090
 8007f04:	08014118 	.word	0x08014118
 8007f08:	00f42400 	.word	0x00f42400
 8007f0c:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007f10:	4bb0      	ldr	r3, [pc, #704]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f1c:	d133      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007f1e:	4bad      	ldr	r3, [pc, #692]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2a:	d12c      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007f2c:	4ba9      	ldr	r3, [pc, #676]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	0a1b      	lsrs	r3, r3, #8
 8007f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f36:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	fb02 f203 	mul.w	r2, r2, r3
 8007f40:	4ba4      	ldr	r3, [pc, #656]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	091b      	lsrs	r3, r3, #4
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007f52:	4ba0      	ldr	r3, [pc, #640]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	0d5b      	lsrs	r3, r3, #21
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f66:	61fb      	str	r3, [r7, #28]
          break;
 8007f68:	e00d      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007f6a:	4b9a      	ldr	r3, [pc, #616]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d108      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 8007f78:	4b97      	ldr	r3, [pc, #604]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007f7a:	61fb      	str	r3, [r7, #28]
          break;
 8007f7c:	e005      	b.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 8007f7e:	bf00      	nop
 8007f80:	e31a      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f82:	bf00      	nop
 8007f84:	e318      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f86:	bf00      	nop
 8007f88:	e316      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007f8a:	bf00      	nop
        break;
 8007f8c:	e314      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007f8e:	4b91      	ldr	r3, [pc, #580]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f94:	f003 0303 	and.w	r3, r3, #3
 8007f98:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d828      	bhi.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fb9 	.word	0x08007fb9
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fc9 	.word	0x08007fc9
 8007fb4:	08007fdd 	.word	0x08007fdd
          frequency = HAL_RCC_GetPCLK2Freq();
 8007fb8:	f7ff faa2 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8007fbc:	61f8      	str	r0, [r7, #28]
          break;
 8007fbe:	e01d      	b.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 8007fc0:	f7ff f9f2 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8007fc4:	61f8      	str	r0, [r7, #28]
          break;
 8007fc6:	e019      	b.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fc8:	4b82      	ldr	r3, [pc, #520]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 8007fd6:	4b81      	ldr	r3, [pc, #516]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fd8:	61fb      	str	r3, [r7, #28]
          break;
 8007fda:	e00c      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fdc:	4b7d      	ldr	r3, [pc, #500]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d107      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	61fb      	str	r3, [r7, #28]
          break;
 8007ff0:	e003      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 8007ff2:	bf00      	nop
 8007ff4:	e2e0      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007ff6:	bf00      	nop
 8007ff8:	e2de      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8007ffa:	bf00      	nop
        break;
 8007ffc:	e2dc      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007ffe:	4b75      	ldr	r3, [pc, #468]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f003 030c 	and.w	r3, r3, #12
 8008008:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b0c      	cmp	r3, #12
 800800e:	d83a      	bhi.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008010:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	0800804d 	.word	0x0800804d
 800801c:	08008087 	.word	0x08008087
 8008020:	08008087 	.word	0x08008087
 8008024:	08008087 	.word	0x08008087
 8008028:	08008055 	.word	0x08008055
 800802c:	08008087 	.word	0x08008087
 8008030:	08008087 	.word	0x08008087
 8008034:	08008087 	.word	0x08008087
 8008038:	0800805d 	.word	0x0800805d
 800803c:	08008087 	.word	0x08008087
 8008040:	08008087 	.word	0x08008087
 8008044:	08008087 	.word	0x08008087
 8008048:	08008071 	.word	0x08008071
          frequency = HAL_RCC_GetPCLK1Freq();
 800804c:	f7ff fa42 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008050:	61f8      	str	r0, [r7, #28]
          break;
 8008052:	e01d      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 8008054:	f7ff f9a8 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8008058:	61f8      	str	r0, [r7, #28]
          break;
 800805a:	e019      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800805c:	4b5d      	ldr	r3, [pc, #372]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008068:	d10f      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 800806a:	4b5c      	ldr	r3, [pc, #368]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800806c:	61fb      	str	r3, [r7, #28]
          break;
 800806e:	e00c      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008070:	4b58      	ldr	r3, [pc, #352]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b02      	cmp	r3, #2
 800807c:	d107      	bne.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008082:	61fb      	str	r3, [r7, #28]
          break;
 8008084:	e003      	b.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 8008086:	bf00      	nop
 8008088:	e296      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800808a:	bf00      	nop
 800808c:	e294      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800808e:	bf00      	nop
        break;
 8008090:	e292      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008092:	4b50      	ldr	r3, [pc, #320]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800809c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d00d      	beq.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d802      	bhi.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 80080ac:	e024      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d00a      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 80080b2:	2b30      	cmp	r3, #48	; 0x30
 80080b4:	d012      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 80080b6:	e01f      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7ff fa0c 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 80080bc:	61f8      	str	r0, [r7, #28]
          break;
 80080be:	e01b      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 80080c0:	f7ff f972 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 80080c4:	61f8      	str	r0, [r7, #28]
          break;
 80080c6:	e017      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080c8:	4b42      	ldr	r3, [pc, #264]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d4:	d10d      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 80080d6:	4b41      	ldr	r3, [pc, #260]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80080d8:	61fb      	str	r3, [r7, #28]
          break;
 80080da:	e00a      	b.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080dc:	4b3d      	ldr	r3, [pc, #244]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d105      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	61fb      	str	r3, [r7, #28]
          break;
 80080f0:	e001      	b.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 80080f2:	bf00      	nop
 80080f4:	e260      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80080f6:	bf00      	nop
        break;
 80080f8:	e25e      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80080fa:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008104:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d00d      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	d802      	bhi.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 8008114:	e024      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 8008116:	2b80      	cmp	r3, #128	; 0x80
 8008118:	d00a      	beq.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800811a:	2bc0      	cmp	r3, #192	; 0xc0
 800811c:	d012      	beq.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 800811e:	e01f      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008120:	f7ff f9d8 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008124:	61f8      	str	r0, [r7, #28]
          break;
 8008126:	e01b      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8008128:	f7ff f93e 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800812c:	61f8      	str	r0, [r7, #28]
          break;
 800812e:	e017      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813c:	d10d      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800813e:	4b27      	ldr	r3, [pc, #156]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008140:	61fb      	str	r3, [r7, #28]
          break;
 8008142:	e00a      	b.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008144:	4b23      	ldr	r3, [pc, #140]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d105      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8008152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008156:	61fb      	str	r3, [r7, #28]
          break;
 8008158:	e001      	b.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800815a:	bf00      	nop
 800815c:	e22c      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800815e:	bf00      	nop
        break;
 8008160:	e22a      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008174:	d010      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d802      	bhi.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 8008180:	e026      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 8008182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008186:	d00b      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 8008188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800818c:	d012      	beq.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 800818e:	e01f      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008190:	f7ff f9a0 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008194:	61f8      	str	r0, [r7, #28]
          break;
 8008196:	e01b      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 8008198:	f7ff f906 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800819c:	61f8      	str	r0, [r7, #28]
          break;
 800819e:	e017      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081a0:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ac:	d10d      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 80081ae:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80081b0:	61fb      	str	r3, [r7, #28]
          break;
 80081b2:	e00a      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d105      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 80081c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081c6:	61fb      	str	r3, [r7, #28]
          break;
 80081c8:	e001      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 80081ca:	bf00      	nop
 80081cc:	e1f4      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80081ce:	bf00      	nop
        break;
 80081d0:	e1f2      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80081d2:	bf00      	nop
 80081d4:	40021000 	.word	0x40021000
 80081d8:	02dc6c00 	.word	0x02dc6c00
 80081dc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80081e0:	4bad      	ldr	r3, [pc, #692]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f2:	d010      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f8:	d802      	bhi.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 80081fe:	e026      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008204:	d00b      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 8008206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800820a:	d012      	beq.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800820c:	e01f      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800820e:	f7ff f961 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008212:	61f8      	str	r0, [r7, #28]
          break;
 8008214:	e01b      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 8008216:	f7ff f8c7 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800821a:	61f8      	str	r0, [r7, #28]
          break;
 800821c:	e017      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800821e:	4b9e      	ldr	r3, [pc, #632]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800822a:	d10d      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 800822c:	4b9b      	ldr	r3, [pc, #620]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800822e:	61fb      	str	r3, [r7, #28]
          break;
 8008230:	e00a      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008232:	4b99      	ldr	r3, [pc, #612]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b02      	cmp	r3, #2
 800823e:	d105      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 8008240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008244:	61fb      	str	r3, [r7, #28]
          break;
 8008246:	e001      	b.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 8008248:	bf00      	nop
 800824a:	e1b5      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800824c:	bf00      	nop
        break;
 800824e:	e1b3      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008250:	4b91      	ldr	r3, [pc, #580]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800825a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008262:	d036      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8008264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008268:	d003      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800826a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800826e:	d004      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 8008270:	e05e      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008272:	f7ff f899 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8008276:	61f8      	str	r0, [r7, #28]
          break;
 8008278:	e05a      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800827a:	4b87      	ldr	r3, [pc, #540]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008286:	d150      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8008288:	4b83      	ldr	r3, [pc, #524]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d04a      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008294:	4b80      	ldr	r3, [pc, #512]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	0a1b      	lsrs	r3, r3, #8
 800829a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	fb02 f203 	mul.w	r2, r2, r3
 80082a8:	4b7b      	ldr	r3, [pc, #492]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	091b      	lsrs	r3, r3, #4
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	3301      	adds	r3, #1
 80082b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80082ba:	4b77      	ldr	r3, [pc, #476]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	0e5b      	lsrs	r3, r3, #25
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	3301      	adds	r3, #1
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	61fb      	str	r3, [r7, #28]
          break;
 80082d0:	e02b      	b.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80082d2:	4b71      	ldr	r3, [pc, #452]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082de:	d126      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80082e0:	4b6d      	ldr	r3, [pc, #436]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80082ec:	4b6a      	ldr	r3, [pc, #424]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	0a1b      	lsrs	r3, r3, #8
 80082f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	fb02 f203 	mul.w	r2, r2, r3
 8008300:	4b65      	ldr	r3, [pc, #404]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	091b      	lsrs	r3, r3, #4
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	3301      	adds	r3, #1
 800830c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008310:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008312:	4b61      	ldr	r3, [pc, #388]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	0e5b      	lsrs	r3, r3, #25
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	3301      	adds	r3, #1
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	fbb2 f3f3 	udiv	r3, r2, r3
 8008326:	61fb      	str	r3, [r7, #28]
          break;
 8008328:	e001      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 800832a:	bf00      	nop
 800832c:	e144      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800832e:	bf00      	nop
        break;
 8008330:	e142      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008332:	4b59      	ldr	r3, [pc, #356]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800833c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d103      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008344:	f7ff f8dc 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8008348:	61f8      	str	r0, [r7, #28]
        break;
 800834a:	e135      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800834c:	f7ff f82c 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8008350:	61f8      	str	r0, [r7, #28]
        break;
 8008352:	e131      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008354:	4b50      	ldr	r3, [pc, #320]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800835e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d009      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800836c:	d00a      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d000      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 8008372:	e011      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008374:	f7ff f8ae 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008378:	61f8      	str	r0, [r7, #28]
          break;
 800837a:	e00d      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 800837c:	f7ff f814 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 8008380:	61f8      	str	r0, [r7, #28]
          break;
 8008382:	e009      	b.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008384:	4b44      	ldr	r3, [pc, #272]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008390:	d101      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 8008392:	4b42      	ldr	r3, [pc, #264]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008394:	61fb      	str	r3, [r7, #28]
          break;
 8008396:	bf00      	nop
        break;
 8008398:	e10e      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800839a:	4b3f      	ldr	r3, [pc, #252]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ac:	d009      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80083ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b2:	d00a      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d000      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 80083b8:	e011      	b.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083ba:	f7ff f88b 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 80083be:	61f8      	str	r0, [r7, #28]
          break;
 80083c0:	e00d      	b.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 80083c2:	f7fe fff1 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 80083c6:	61f8      	str	r0, [r7, #28]
          break;
 80083c8:	e009      	b.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083ca:	4b33      	ldr	r3, [pc, #204]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d6:	d101      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80083da:	61fb      	str	r3, [r7, #28]
          break;
 80083dc:	bf00      	nop
        break;
 80083de:	e0eb      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80083e0:	4b2d      	ldr	r3, [pc, #180]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	d009      	beq.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 80083f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f8:	d00a      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d000      	beq.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 80083fe:	e011      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008400:	f7ff f868 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008404:	61f8      	str	r0, [r7, #28]
          break;
 8008406:	e00d      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008408:	f7fe ffce 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800840c:	61f8      	str	r0, [r7, #28]
          break;
 800840e:	e009      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008410:	4b21      	ldr	r3, [pc, #132]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800841c:	d101      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008420:	61fb      	str	r3, [r7, #28]
          break;
 8008422:	bf00      	nop
        break;
 8008424:	e0c8      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008426:	4b1c      	ldr	r3, [pc, #112]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d008      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008438:	2b01      	cmp	r3, #1
 800843a:	d302      	bcc.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 800843c:	2b02      	cmp	r3, #2
 800843e:	d008      	beq.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8008440:	e011      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008442:	f7ff f847 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008446:	61f8      	str	r0, [r7, #28]
          break;
 8008448:	e00d      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 800844a:	f7fe ffad 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800844e:	61f8      	str	r0, [r7, #28]
          break;
 8008450:	e009      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800845e:	d101      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8008462:	61fb      	str	r3, [r7, #28]
          break;
 8008464:	bf00      	nop
        break;
 8008466:	e0a7      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008468:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800846a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008472:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800847a:	d015      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800847c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008480:	d802      	bhi.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00c      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8008486:	e034      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 8008488:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800848c:	d017      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800848e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008492:	d01e      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 8008494:	e02d      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008496:	bf00      	nop
 8008498:	40021000 	.word	0x40021000
 800849c:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7ff f818 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 80084a4:	61f8      	str	r0, [r7, #28]
          break;
 80084a6:	e024      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80084a8:	4b46      	ldr	r3, [pc, #280]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d118      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 80084b6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084ba:	61fb      	str	r3, [r7, #28]
          break;
 80084bc:	e014      	b.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084be:	4b41      	ldr	r3, [pc, #260]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ca:	d10f      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 80084cc:	4b3e      	ldr	r3, [pc, #248]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 80084ce:	61fb      	str	r3, [r7, #28]
          break;
 80084d0:	e00c      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084d2:	4b3c      	ldr	r3, [pc, #240]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d107      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 80084e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e4:	61fb      	str	r3, [r7, #28]
          break;
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 80084e8:	bf00      	nop
 80084ea:	e065      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80084ec:	bf00      	nop
 80084ee:	e063      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 80084f0:	bf00      	nop
        break;
 80084f2:	e061      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084f4:	4b33      	ldr	r3, [pc, #204]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 80084f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084fe:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008506:	d010      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800850c:	d802      	bhi.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 8008512:	e02f      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 8008514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008518:	d012      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 800851a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800851e:	d019      	beq.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 8008520:	e028      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008522:	f7fe ffd7 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008526:	61f8      	str	r0, [r7, #28]
          break;
 8008528:	e024      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800852a:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800852c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b02      	cmp	r3, #2
 8008536:	d118      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 8008538:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800853c:	61fb      	str	r3, [r7, #28]
          break;
 800853e:	e014      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008540:	4b20      	ldr	r3, [pc, #128]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854c:	d10f      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 800854e:	4b1e      	ldr	r3, [pc, #120]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 8008550:	61fb      	str	r3, [r7, #28]
          break;
 8008552:	e00c      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b02      	cmp	r3, #2
 8008560:	d107      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 8008562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008566:	61fb      	str	r3, [r7, #28]
          break;
 8008568:	e003      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800856a:	bf00      	nop
 800856c:	e024      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800856e:	bf00      	nop
 8008570:	e022      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 8008572:	bf00      	nop
        break;
 8008574:	e020      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 8008578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008580:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858c:	d004      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800858e:	e00d      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008590:	f7fe ffa0 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 8008594:	61f8      	str	r0, [r7, #28]
          break;
 8008596:	e009      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a4:	d101      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 80085a6:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 80085a8:	61fb      	str	r3, [r7, #28]
          break;
 80085aa:	bf00      	nop
        break;
 80085ac:	e004      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 80085ae:	bf00      	nop
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 80085b2:	bf00      	nop
 80085b4:	e000      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 80085b6:	bf00      	nop
    }
  }

  return(frequency);
 80085b8:	69fb      	ldr	r3, [r7, #28]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000
 80085c8:	00f42400 	.word	0x00f42400

080085cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80085d6:	f043 0304 	orr.w	r3, r3, #4
 80085da:	6013      	str	r3, [r2, #0]
}
 80085dc:	bf00      	nop
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40021000 	.word	0x40021000

080085ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085fa:	4b73      	ldr	r3, [pc, #460]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d018      	beq.n	8008638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008606:	4b70      	ldr	r3, [pc, #448]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f003 0203 	and.w	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d10d      	bne.n	8008632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
       ||
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800861e:	4b6a      	ldr	r3, [pc, #424]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	091b      	lsrs	r3, r3, #4
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
       ||
 800862e:	429a      	cmp	r2, r3
 8008630:	d044      	beq.n	80086bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
 8008636:	e041      	b.n	80086bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d00c      	beq.n	800865a <RCCEx_PLLSAI1_Config+0x6e>
 8008640:	2b03      	cmp	r3, #3
 8008642:	d013      	beq.n	800866c <RCCEx_PLLSAI1_Config+0x80>
 8008644:	2b01      	cmp	r3, #1
 8008646:	d120      	bne.n	800868a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008648:	4b5f      	ldr	r3, [pc, #380]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d11d      	bne.n	8008690 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008658:	e01a      	b.n	8008690 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800865a:	4b5b      	ldr	r3, [pc, #364]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008662:	2b00      	cmp	r3, #0
 8008664:	d116      	bne.n	8008694 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800866a:	e013      	b.n	8008694 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800866c:	4b56      	ldr	r3, [pc, #344]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10f      	bne.n	8008698 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008678:	4b53      	ldr	r3, [pc, #332]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008688:	e006      	b.n	8008698 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	73fb      	strb	r3, [r7, #15]
      break;
 800868e:	e004      	b.n	800869a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008698:	bf00      	nop
    }

    if(status == HAL_OK)
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10d      	bne.n	80086bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80086a0:	4b49      	ldr	r3, [pc, #292]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6819      	ldr	r1, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	430b      	orrs	r3, r1
 80086b6:	4944      	ldr	r1, [pc, #272]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d17c      	bne.n	80087bc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80086c2:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a40      	ldr	r2, [pc, #256]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ce:	f7fb fa43 	bl	8003b58 <HAL_GetTick>
 80086d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086d4:	e009      	b.n	80086ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086d6:	f7fb fa3f 	bl	8003b58 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d902      	bls.n	80086ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	73fb      	strb	r3, [r7, #15]
        break;
 80086e8:	e005      	b.n	80086f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086ea:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1ef      	bne.n	80086d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d15f      	bne.n	80087bc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d110      	bne.n	8008724 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008702:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800870a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6892      	ldr	r2, [r2, #8]
 8008712:	0211      	lsls	r1, r2, #8
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68d2      	ldr	r2, [r2, #12]
 8008718:	06d2      	lsls	r2, r2, #27
 800871a:	430a      	orrs	r2, r1
 800871c:	492a      	ldr	r1, [pc, #168]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800871e:	4313      	orrs	r3, r2
 8008720:	610b      	str	r3, [r1, #16]
 8008722:	e027      	b.n	8008774 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d112      	bne.n	8008750 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800872a:	4b27      	ldr	r3, [pc, #156]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6892      	ldr	r2, [r2, #8]
 800873a:	0211      	lsls	r1, r2, #8
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6912      	ldr	r2, [r2, #16]
 8008740:	0852      	lsrs	r2, r2, #1
 8008742:	3a01      	subs	r2, #1
 8008744:	0552      	lsls	r2, r2, #21
 8008746:	430a      	orrs	r2, r1
 8008748:	491f      	ldr	r1, [pc, #124]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800874a:	4313      	orrs	r3, r2
 800874c:	610b      	str	r3, [r1, #16]
 800874e:	e011      	b.n	8008774 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6892      	ldr	r2, [r2, #8]
 8008760:	0211      	lsls	r1, r2, #8
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6952      	ldr	r2, [r2, #20]
 8008766:	0852      	lsrs	r2, r2, #1
 8008768:	3a01      	subs	r2, #1
 800876a:	0652      	lsls	r2, r2, #25
 800876c:	430a      	orrs	r2, r1
 800876e:	4916      	ldr	r1, [pc, #88]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008770:	4313      	orrs	r3, r2
 8008772:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008774:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a13      	ldr	r2, [pc, #76]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800877a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800877e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008780:	f7fb f9ea 	bl	8003b58 <HAL_GetTick>
 8008784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008786:	e009      	b.n	800879c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008788:	f7fb f9e6 	bl	8003b58 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d902      	bls.n	800879c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	73fb      	strb	r3, [r7, #15]
          break;
 800879a:	e005      	b.n	80087a8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0ef      	beq.n	8008788 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80087b0:	691a      	ldr	r2, [r3, #16]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	4904      	ldr	r1, [pc, #16]	; (80087c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40021000 	.word	0x40021000

080087cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087da:	4b68      	ldr	r3, [pc, #416]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d018      	beq.n	8008818 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80087e6:	4b65      	ldr	r3, [pc, #404]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0203 	and.w	r2, r3, #3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d10d      	bne.n	8008812 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
       ||
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80087fe:	4b5f      	ldr	r3, [pc, #380]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
       ||
 800880e:	429a      	cmp	r2, r3
 8008810:	d044      	beq.n	800889c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
 8008816:	e041      	b.n	800889c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d00c      	beq.n	800883a <RCCEx_PLLSAI2_Config+0x6e>
 8008820:	2b03      	cmp	r3, #3
 8008822:	d013      	beq.n	800884c <RCCEx_PLLSAI2_Config+0x80>
 8008824:	2b01      	cmp	r3, #1
 8008826:	d120      	bne.n	800886a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008828:	4b54      	ldr	r3, [pc, #336]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11d      	bne.n	8008870 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008838:	e01a      	b.n	8008870 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800883a:	4b50      	ldr	r3, [pc, #320]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008842:	2b00      	cmp	r3, #0
 8008844:	d116      	bne.n	8008874 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800884a:	e013      	b.n	8008874 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800884c:	4b4b      	ldr	r3, [pc, #300]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10f      	bne.n	8008878 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008858:	4b48      	ldr	r3, [pc, #288]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008868:	e006      	b.n	8008878 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
      break;
 800886e:	e004      	b.n	800887a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008878:	bf00      	nop
    }

    if(status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10d      	bne.n	800889c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008880:	4b3e      	ldr	r3, [pc, #248]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	430b      	orrs	r3, r1
 8008896:	4939      	ldr	r1, [pc, #228]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008898:	4313      	orrs	r3, r2
 800889a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d166      	bne.n	8008970 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80088a2:	4b36      	ldr	r3, [pc, #216]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a35      	ldr	r2, [pc, #212]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80088a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ae:	f7fb f953 	bl	8003b58 <HAL_GetTick>
 80088b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088b4:	e009      	b.n	80088ca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80088b6:	f7fb f94f 	bl	8003b58 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d902      	bls.n	80088ca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	73fb      	strb	r3, [r7, #15]
        break;
 80088c8:	e005      	b.n	80088d6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088ca:	4b2c      	ldr	r3, [pc, #176]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1ef      	bne.n	80088b6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d149      	bne.n	8008970 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088e2:	4b26      	ldr	r3, [pc, #152]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80088ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6892      	ldr	r2, [r2, #8]
 80088f2:	0211      	lsls	r1, r2, #8
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	68d2      	ldr	r2, [r2, #12]
 80088f8:	06d2      	lsls	r2, r2, #27
 80088fa:	430a      	orrs	r2, r1
 80088fc:	491f      	ldr	r1, [pc, #124]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	614b      	str	r3, [r1, #20]
 8008902:	e011      	b.n	8008928 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008904:	4b1d      	ldr	r3, [pc, #116]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800890c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6892      	ldr	r2, [r2, #8]
 8008914:	0211      	lsls	r1, r2, #8
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6912      	ldr	r2, [r2, #16]
 800891a:	0852      	lsrs	r2, r2, #1
 800891c:	3a01      	subs	r2, #1
 800891e:	0652      	lsls	r2, r2, #25
 8008920:	430a      	orrs	r2, r1
 8008922:	4916      	ldr	r1, [pc, #88]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008924:	4313      	orrs	r3, r2
 8008926:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008928:	4b14      	ldr	r3, [pc, #80]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a13      	ldr	r2, [pc, #76]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800892e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7fb f910 	bl	8003b58 <HAL_GetTick>
 8008938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800893a:	e009      	b.n	8008950 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800893c:	f7fb f90c 	bl	8003b58 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d902      	bls.n	8008950 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
          break;
 800894e:	e005      	b.n	800895c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0ef      	beq.n	800893c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 8008964:	695a      	ldr	r2, [r3, #20]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4904      	ldr	r1, [pc, #16]	; (800897c <RCCEx_PLLSAI2_Config+0x1b0>)
 800896c:	4313      	orrs	r3, r2
 800896e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40021000 	.word	0x40021000

08008980 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008980:	b480      	push	{r7}
 8008982:	b089      	sub	sp, #36	; 0x24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899c:	d10c      	bne.n	80089b8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800899e:	4b77      	ldr	r3, [pc, #476]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80089a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80089b0:	d112      	bne.n	80089d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80089b2:	4b73      	ldr	r3, [pc, #460]	; (8008b80 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e00f      	b.n	80089d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089be:	d10b      	bne.n	80089d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80089c0:	4b6e      	ldr	r3, [pc, #440]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80089ca:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089d2:	d101      	bne.n	80089d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80089d4:	4b6a      	ldr	r3, [pc, #424]	; (8008b80 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80089d6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 80c6 	bne.w	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089ea:	d003      	beq.n	80089f4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089f2:	d13b      	bne.n	8008a6c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80089f4:	4b61      	ldr	r3, [pc, #388]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a00:	f040 80b3 	bne.w	8008b6a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8008a04:	4b5d      	ldr	r3, [pc, #372]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 80ac 	beq.w	8008b6a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a12:	4b5a      	ldr	r3, [pc, #360]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	091b      	lsrs	r3, r3, #4
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a24:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a26:	4b55      	ldr	r3, [pc, #340]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008a32:	4b52      	ldr	r3, [pc, #328]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	0edb      	lsrs	r3, r3, #27
 8008a38:	f003 031f 	and.w	r3, r3, #31
 8008a3c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008a44:	4b4d      	ldr	r3, [pc, #308]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8008a50:	2311      	movs	r3, #17
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e001      	b.n	8008a5a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8008a56:	2307      	movs	r3, #7
 8008a58:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	fb02 f203 	mul.w	r2, r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a68:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008a6a:	e07e      	b.n	8008b6a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d139      	bne.n	8008ae6 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008a72:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7e:	d175      	bne.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8008a80:	4b3e      	ldr	r3, [pc, #248]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d06f      	beq.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a8c:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	091b      	lsrs	r3, r3, #4
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	3301      	adds	r3, #1
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008aa0:	4b36      	ldr	r3, [pc, #216]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aaa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	0edb      	lsrs	r3, r3, #27
 8008ab2:	f003 031f 	and.w	r3, r3, #31
 8008ab6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008abe:	4b2f      	ldr	r3, [pc, #188]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8008aca:	2311      	movs	r3, #17
 8008acc:	617b      	str	r3, [r7, #20]
 8008ace:	e001      	b.n	8008ad4 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8008ad0:	2307      	movs	r3, #7
 8008ad2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	fb02 f203 	mul.w	r2, r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e042      	b.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aec:	d003      	beq.n	8008af6 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008af4:	d13a      	bne.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b02:	d133      	bne.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8008b04:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d02d      	beq.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b10:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	091b      	lsrs	r3, r3, #4
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008b24:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	0a1b      	lsrs	r3, r3, #8
 8008b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008b30:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	0edb      	lsrs	r3, r3, #27
 8008b36:	f003 031f 	and.w	r3, r3, #31
 8008b3a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008b42:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8008b4e:	2311      	movs	r3, #17
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e001      	b.n	8008b58 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8008b54:	2307      	movs	r3, #7
 8008b56:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	fb02 f203 	mul.w	r2, r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	e000      	b.n	8008b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b6a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3724      	adds	r7, #36	; 0x24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	001fff68 	.word	0x001fff68

08008b84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e153      	b.n	8008e3e <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d106      	bne.n	8008bb0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fa fd04 	bl	80035b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f957 	bl	8008e64 <SAI_Disable>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e13e      	b.n	8008e3e <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d007      	beq.n	8008be0 <HAL_SAI_Init+0x5c>
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d302      	bcc.n	8008bda <HAL_SAI_Init+0x56>
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d006      	beq.n	8008be6 <HAL_SAI_Init+0x62>
 8008bd8:	e008      	b.n	8008bec <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
      break;
 8008bde:	e008      	b.n	8008bf2 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008be0:	2310      	movs	r3, #16
 8008be2:	61fb      	str	r3, [r7, #28]
      break;
 8008be4:	e005      	b.n	8008bf2 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008be6:	2320      	movs	r3, #32
 8008be8:	61fb      	str	r3, [r7, #28]
      break;
 8008bea:	e002      	b.n	8008bf2 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61fb      	str	r3, [r7, #28]
      break;
 8008bf0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d81d      	bhi.n	8008c36 <HAL_SAI_Init+0xb2>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_SAI_Init+0x7c>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c17 	.word	0x08008c17
 8008c08:	08008c1f 	.word	0x08008c1f
 8008c0c:	08008c27 	.word	0x08008c27
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
      break;
 8008c14:	e012      	b.n	8008c3c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1a:	617b      	str	r3, [r7, #20]
      break;
 8008c1c:	e00e      	b.n	8008c3c <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c22:	617b      	str	r3, [r7, #20]
      break;
 8008c24:	e00a      	b.n	8008c3c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c2a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f043 0301 	orr.w	r3, r3, #1
 8008c32:	61fb      	str	r3, [r7, #28]
      break;
 8008c34:	e002      	b.n	8008c3c <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
      break;
 8008c3a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a81      	ldr	r2, [pc, #516]	; (8008e48 <HAL_SAI_Init+0x2c4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_SAI_Init+0xcc>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a80      	ldr	r2, [pc, #512]	; (8008e4c <HAL_SAI_Init+0x2c8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d103      	bne.n	8008c58 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008c50:	4a7f      	ldr	r2, [pc, #508]	; (8008e50 <HAL_SAI_Init+0x2cc>)
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e002      	b.n	8008c5e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008c58:	4a7e      	ldr	r2, [pc, #504]	; (8008e54 <HAL_SAI_Init+0x2d0>)
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d041      	beq.n	8008cea <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a77      	ldr	r2, [pc, #476]	; (8008e48 <HAL_SAI_Init+0x2c4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d004      	beq.n	8008c7a <HAL_SAI_Init+0xf6>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a75      	ldr	r2, [pc, #468]	; (8008e4c <HAL_SAI_Init+0x2c8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d105      	bne.n	8008c86 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008c7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c7e:	f7fe ffdf 	bl	8007c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c82:	6138      	str	r0, [r7, #16]
 8008c84:	e004      	b.n	8008c90 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008c86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008c8a:	f7fe ffd9 	bl	8007c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c8e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	025b      	lsls	r3, r3, #9
 8008ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a6b      	ldr	r2, [pc, #428]	; (8008e58 <HAL_SAI_Init+0x2d4>)
 8008cac:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb0:	08da      	lsrs	r2, r3, #3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	4b67      	ldr	r3, [pc, #412]	; (8008e58 <HAL_SAI_Init+0x2d4>)
 8008cba:	fba3 2301 	umull	r2, r3, r3, r1
 8008cbe:	08da      	lsrs	r2, r3, #3
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	1aca      	subs	r2, r1, r3
 8008cca:	2a08      	cmp	r2, #8
 8008ccc:	d904      	bls.n	8008cd8 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d104      	bne.n	8008cea <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	085a      	lsrs	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_SAI_Init+0x176>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d109      	bne.n	8008d0e <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d101      	bne.n	8008d06 <HAL_SAI_Init+0x182>
 8008d02:	2300      	movs	r3, #0
 8008d04:	e001      	b.n	8008d0a <HAL_SAI_Init+0x186>
 8008d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	e008      	b.n	8008d20 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d102      	bne.n	8008d1c <HAL_SAI_Init+0x198>
 8008d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d1a:	e000      	b.n	8008d1e <HAL_SAI_Init+0x19a>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b4c      	ldr	r3, [pc, #304]	; (8008e5c <HAL_SAI_Init+0x2d8>)
 8008d2c:	400b      	ands	r3, r1
 8008d2e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d44:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8008d58:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008d64:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	051b      	lsls	r3, r3, #20
 8008d6c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008d84:	f023 030f 	bic.w	r3, r3, #15
 8008d88:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6859      	ldr	r1, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6899      	ldr	r1, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b2b      	ldr	r3, [pc, #172]	; (8008e60 <HAL_SAI_Init+0x2dc>)
 8008db4:	400b      	ands	r3, r1
 8008db6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6899      	ldr	r1, [r3, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dc8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008dce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008dd4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008dde:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68d9      	ldr	r1, [r3, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008df6:	400b      	ands	r3, r1
 8008df8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68d9      	ldr	r1, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e08:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e10:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e16:	3b01      	subs	r3, #1
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3720      	adds	r7, #32
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	40015404 	.word	0x40015404
 8008e4c:	40015424 	.word	0x40015424
 8008e50:	40015400 	.word	0x40015400
 8008e54:	40015800 	.word	0x40015800
 8008e58:	cccccccd 	.word	0xcccccccd
 8008e5c:	ff05c010 	.word	0xff05c010
 8008e60:	fff88000 	.word	0xfff88000

08008e64 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008e64:	b490      	push	{r4, r7}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008e6c:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <SAI_Disable+0x60>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <SAI_Disable+0x64>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	0b1b      	lsrs	r3, r3, #12
 8008e78:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e8c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	d10a      	bne.n	8008ea8 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea6:	e007      	b.n	8008eb8 <SAI_Disable+0x54>
    }
    count--;
 8008ea8:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1ea      	bne.n	8008e8e <SAI_Disable+0x2a>

  return status;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc90      	pop	{r4, r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	20000040 	.word	0x20000040
 8008ec8:	95cbec1b 	.word	0x95cbec1b

08008ecc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e022      	b.n	8008f24 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fa fa25 	bl	8003340 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f814 	bl	8008f2c <HAL_SD_InitCard>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e00a      	b.n	8008f24 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b08e      	sub	sp, #56	; 0x38
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008f48:	2376      	movs	r3, #118	; 0x76
 8008f4a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681d      	ldr	r5, [r3, #0]
 8008f50:	466c      	mov	r4, sp
 8008f52:	f107 0314 	add.w	r3, r7, #20
 8008f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f64:	4628      	mov	r0, r5
 8008f66:	f002 fad1 	bl	800b50c <SDMMC_Init>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e05f      	b.n	800903c <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f8a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 faf5 	bl	800b580 <SDMMC_PowerState_ON>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e049      	b.n	800903c <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fb6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb4d 	bl	8009658 <SD_PowerON>
 8008fbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e02e      	b.n	800903c <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa6c 	bl	80094bc <SD_InitCard>
 8008fe4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e01b      	b.n	800903c <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800900c:	4618      	mov	r0, r3
 800900e:	f002 fb4a 	bl	800b6a6 <SDMMC_CmdBlockLength>
 8009012:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00f      	beq.n	800903a <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a09      	ldr	r2, [pc, #36]	; (8009044 <HAL_SD_InitCard+0x118>)
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	431a      	orrs	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bdb0      	pop	{r4, r5, r7, pc}
 8009044:	004005ff 	.word	0x004005ff

08009048 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009056:	0f9b      	lsrs	r3, r3, #30
 8009058:	b2da      	uxtb	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009062:	0e9b      	lsrs	r3, r3, #26
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009074:	0e1b      	lsrs	r3, r3, #24
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	b2da      	uxtb	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	b2da      	uxtb	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b2da      	uxtb	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a8:	0d1b      	lsrs	r3, r3, #20
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c6:	0bdb      	lsrs	r3, r3, #15
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d8:	0b9b      	lsrs	r3, r3, #14
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ea:	0b5b      	lsrs	r3, r3, #13
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090fc:	0b1b      	lsrs	r3, r3, #12
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009114:	2b00      	cmp	r3, #0
 8009116:	d163      	bne.n	80091e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911c:	009a      	lsls	r2, r3, #2
 800911e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009122:	4013      	ands	r3, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009128:	0f92      	lsrs	r2, r2, #30
 800912a:	431a      	orrs	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009134:	0edb      	lsrs	r3, r3, #27
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009146:	0e1b      	lsrs	r3, r3, #24
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009158:	0d5b      	lsrs	r3, r3, #21
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916a:	0c9b      	lsrs	r3, r3, #18
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917c:	0bdb      	lsrs	r3, r3, #15
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	7e1b      	ldrb	r3, [r3, #24]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	3302      	adds	r3, #2
 80091a0:	2201      	movs	r2, #1
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091aa:	fb02 f203 	mul.w	r2, r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	7a1b      	ldrb	r3, [r3, #8]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	2201      	movs	r2, #1
 80091be:	409a      	lsls	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80091cc:	0a52      	lsrs	r2, r2, #9
 80091ce:	fb02 f203 	mul.w	r2, r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091dc:	661a      	str	r2, [r3, #96]	; 0x60
 80091de:	e031      	b.n	8009244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11d      	bne.n	8009224 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ec:	041b      	lsls	r3, r3, #16
 80091ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	431a      	orrs	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	3301      	adds	r3, #1
 8009204:	029a      	lsls	r2, r3, #10
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009218:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	661a      	str	r2, [r3, #96]	; 0x60
 8009222:	e00f      	b.n	8009244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a58      	ldr	r2, [pc, #352]	; (800938c <HAL_SD_GetCardCSD+0x344>)
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e09d      	b.n	8009380 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009248:	0b9b      	lsrs	r3, r3, #14
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925a:	09db      	lsrs	r3, r3, #7
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	b2da      	uxtb	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927c:	0fdb      	lsrs	r3, r3, #31
 800927e:	b2da      	uxtb	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009288:	0f5b      	lsrs	r3, r3, #29
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	b2da      	uxtb	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	0e9b      	lsrs	r3, r3, #26
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ac:	0d9b      	lsrs	r3, r3, #22
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	0d5b      	lsrs	r3, r3, #21
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	0bdb      	lsrs	r3, r3, #15
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	0b9b      	lsrs	r3, r3, #14
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	0b5b      	lsrs	r3, r3, #13
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	0b1b      	lsrs	r3, r3, #12
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	0a9b      	lsrs	r3, r3, #10
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	004005ff 	.word	0x004005ff

08009390 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009390:	b5b0      	push	{r4, r5, r7, lr}
 8009392:	b08e      	sub	sp, #56	; 0x38
 8009394:	af04      	add	r7, sp, #16
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2203      	movs	r2, #3
 80093a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d02e      	beq.n	800940e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	d106      	bne.n	80093c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38
 80093c4:	e029      	b.n	800941a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093cc:	d10a      	bne.n	80093e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9d0 	bl	8009774 <SD_WideBus_Enable>
 80093d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38
 80093e2:	e01a      	b.n	800941a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10a      	bne.n	8009400 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa0d 	bl	800980a <SD_WideBus_Disable>
 80093f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
 80093fe:	e00c      	b.n	800941a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
 800940c:	e005      	b.n	800941a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a24      	ldr	r2, [pc, #144]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x128>)
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009430:	e01f      	b.n	8009472 <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681d      	ldr	r5, [r3, #0]
 8009458:	466c      	mov	r4, sp
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009466:	f107 0308 	add.w	r3, r7, #8
 800946a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800946c:	4628      	mov	r0, r5
 800946e:	f002 f84d 	bl	800b50c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800947a:	4618      	mov	r0, r3
 800947c:	f002 f913 	bl	800b6a6 <SDMMC_CmdBlockLength>
 8009480:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00c      	beq.n	80094a2 <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0a      	ldr	r2, [pc, #40]	; (80094b8 <HAL_SD_ConfigWideBusOperation+0x128>)
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80094aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3728      	adds	r7, #40	; 0x28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bdb0      	pop	{r4, r5, r7, pc}
 80094b6:	bf00      	nop
 80094b8:	004005ff 	.word	0x004005ff

080094bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094bc:	b5b0      	push	{r4, r5, r7, lr}
 80094be:	b094      	sub	sp, #80	; 0x50
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80094c4:	2301      	movs	r3, #1
 80094c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f002 f866 	bl	800b59e <SDMMC_GetPowerState>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094dc:	e0b7      	b.n	800964e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d02f      	beq.n	8009546 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f002 f9e5 	bl	800b8ba <SDMMC_CmdSendCID>
 80094f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <SD_InitCard+0x40>
    {
      return errorstate;
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	e0a8      	b.n	800964e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2100      	movs	r1, #0
 8009502:	4618      	mov	r0, r3
 8009504:	f002 f890 	bl	800b628 <SDMMC_GetResponse>
 8009508:	4602      	mov	r2, r0
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2104      	movs	r1, #4
 8009514:	4618      	mov	r0, r3
 8009516:	f002 f887 	bl	800b628 <SDMMC_GetResponse>
 800951a:	4602      	mov	r2, r0
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2108      	movs	r1, #8
 8009526:	4618      	mov	r0, r3
 8009528:	f002 f87e 	bl	800b628 <SDMMC_GetResponse>
 800952c:	4602      	mov	r2, r0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	210c      	movs	r1, #12
 8009538:	4618      	mov	r0, r3
 800953a:	f002 f875 	bl	800b628 <SDMMC_GetResponse>
 800953e:	4602      	mov	r2, r0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	2b03      	cmp	r3, #3
 800954c:	d00d      	beq.n	800956a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f107 020e 	add.w	r2, r7, #14
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f002 f9eb 	bl	800b934 <SDMMC_CmdSetRelAdd>
 800955e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <SD_InitCard+0xae>
    {
      return errorstate;
 8009566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009568:	e071      	b.n	800964e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	2b03      	cmp	r3, #3
 8009570:	d036      	beq.n	80095e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009572:	89fb      	ldrh	r3, [r7, #14]
 8009574:	461a      	mov	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f002 f9b5 	bl	800b8f6 <SDMMC_CmdSendCSD>
 800958c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800958e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	e05a      	b.n	800964e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f842 	bl	800b628 <SDMMC_GetResponse>
 80095a4:	4602      	mov	r2, r0
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2104      	movs	r1, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 f839 	bl	800b628 <SDMMC_GetResponse>
 80095b6:	4602      	mov	r2, r0
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2108      	movs	r1, #8
 80095c2:	4618      	mov	r0, r3
 80095c4:	f002 f830 	bl	800b628 <SDMMC_GetResponse>
 80095c8:	4602      	mov	r2, r0
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	210c      	movs	r1, #12
 80095d4:	4618      	mov	r0, r3
 80095d6:	f002 f827 	bl	800b628 <SDMMC_GetResponse>
 80095da:	4602      	mov	r2, r0
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2104      	movs	r1, #4
 80095e6:	4618      	mov	r0, r3
 80095e8:	f002 f81e 	bl	800b628 <SDMMC_GetResponse>
 80095ec:	4603      	mov	r3, r0
 80095ee:	0d1a      	lsrs	r2, r3, #20
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095f4:	f107 0310 	add.w	r3, r7, #16
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fd24 	bl	8009048 <HAL_SD_GetCardCSD>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800960a:	e020      	b.n	800964e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009614:	041b      	lsls	r3, r3, #16
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	461a      	mov	r2, r3
 800961c:	4623      	mov	r3, r4
 800961e:	4608      	mov	r0, r1
 8009620:	f002 f863 	bl	800b6ea <SDMMC_CmdSelDesel>
 8009624:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <SD_InitCard+0x174>
  {
    return errorstate;
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	e00e      	b.n	800964e <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681d      	ldr	r5, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	466c      	mov	r4, sp
 8009638:	f103 0210 	add.w	r2, r3, #16
 800963c:	ca07      	ldmia	r2, {r0, r1, r2}
 800963e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009642:	3304      	adds	r3, #4
 8009644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009646:	4628      	mov	r0, r5
 8009648:	f001 ff60 	bl	800b50c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3740      	adds	r7, #64	; 0x40
 8009652:	46bd      	mov	sp, r7
 8009654:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009658 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	2300      	movs	r3, #0
 800966a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f002 f85d 	bl	800b730 <SDMMC_CmdGoIdleState>
 8009676:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <SD_PowerON+0x2a>
  {
    return errorstate;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	e072      	b.n	8009768 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f002 f870 	bl	800b76c <SDMMC_CmdOperCond>
 800968c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00d      	beq.n	80096b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f002 f846 	bl	800b730 <SDMMC_CmdGoIdleState>
 80096a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	e05b      	b.n	8009768 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d137      	bne.n	800972e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f002 f870 	bl	800b7aa <SDMMC_CmdAppCommand>
 80096ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02d      	beq.n	800972e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096d6:	e047      	b.n	8009768 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2100      	movs	r1, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f002 f863 	bl	800b7aa <SDMMC_CmdAppCommand>
 80096e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	e03b      	b.n	8009768 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	491e      	ldr	r1, [pc, #120]	; (8009770 <SD_PowerON+0x118>)
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 f879 	bl	800b7ee <SDMMC_CmdAppOperCommand>
 80096fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009708:	e02e      	b.n	8009768 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f001 ff89 	bl	800b628 <SDMMC_GetResponse>
 8009716:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	0fdb      	lsrs	r3, r3, #31
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <SD_PowerON+0xcc>
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <SD_PowerON+0xce>
 8009724:	2300      	movs	r3, #0
 8009726:	613b      	str	r3, [r7, #16]

    count++;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	3301      	adds	r3, #1
 800972c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009734:	4293      	cmp	r3, r2
 8009736:	d802      	bhi.n	800973e <SD_PowerON+0xe6>
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0cc      	beq.n	80096d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009744:	4293      	cmp	r3, r2
 8009746:	d902      	bls.n	800974e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800974c:	e00c      	b.n	8009768 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	645a      	str	r2, [r3, #68]	; 0x44
 800975e:	e002      	b.n	8009766 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	c1100000 	.word	0xc1100000

08009774 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800977c:	2300      	movs	r3, #0
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	2300      	movs	r3, #0
 8009782:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2100      	movs	r1, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f001 ff4c 	bl	800b628 <SDMMC_GetResponse>
 8009790:	4603      	mov	r3, r0
 8009792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800979a:	d102      	bne.n	80097a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800979c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097a0:	e02f      	b.n	8009802 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f879 	bl	80098a0 <SD_FindSCR>
 80097ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	e023      	b.n	8009802 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01c      	beq.n	80097fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f001 ffea 	bl	800b7aa <SDMMC_CmdAppCommand>
 80097d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	e00f      	b.n	8009802 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f002 f823 	bl	800b834 <SDMMC_CmdBusWidth>
 80097ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	e003      	b.n	8009802 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e001      	b.n	8009802 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b086      	sub	sp, #24
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f001 ff01 	bl	800b628 <SDMMC_GetResponse>
 8009826:	4603      	mov	r3, r0
 8009828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800982c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009830:	d102      	bne.n	8009838 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009836:	e02f      	b.n	8009898 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009838:	f107 030c 	add.w	r3, r7, #12
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f82e 	bl	80098a0 <SD_FindSCR>
 8009844:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	e023      	b.n	8009898 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01c      	beq.n	8009894 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009862:	041b      	lsls	r3, r3, #16
 8009864:	4619      	mov	r1, r3
 8009866:	4610      	mov	r0, r2
 8009868:	f001 ff9f 	bl	800b7aa <SDMMC_CmdAppCommand>
 800986c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	e00f      	b.n	8009898 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f001 ffd8 	bl	800b834 <SDMMC_CmdBusWidth>
 8009884:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	e003      	b.n	8009898 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009890:	2300      	movs	r3, #0
 8009892:	e001      	b.n	8009898 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b08f      	sub	sp, #60	; 0x3c
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098aa:	f7fa f955 	bl	8003b58 <HAL_GetTick>
 80098ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80098b4:	2300      	movs	r3, #0
 80098b6:	60bb      	str	r3, [r7, #8]
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2108      	movs	r1, #8
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 feed 	bl	800b6a6 <SDMMC_CmdBlockLength>
 80098cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	e0a9      	b.n	8009a2c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e0:	041b      	lsls	r3, r3, #16
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f001 ff60 	bl	800b7aa <SDMMC_CmdAppCommand>
 80098ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	e09a      	b.n	8009a2c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80098fc:	2308      	movs	r3, #8
 80098fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009900:	2330      	movs	r3, #48	; 0x30
 8009902:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009904:	2302      	movs	r3, #2
 8009906:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009908:	2300      	movs	r3, #0
 800990a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800990c:	2301      	movs	r3, #1
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f107 0210 	add.w	r2, r7, #16
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fe97 	bl	800b64e <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f001 ffa7 	bl	800b878 <SDMMC_CmdSendSCR>
 800992a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d022      	beq.n	8009978 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	e07a      	b.n	8009a2c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00e      	beq.n	8009962 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6819      	ldr	r1, [r3, #0]
 8009948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	f107 0208 	add.w	r2, r7, #8
 8009950:	18d4      	adds	r4, r2, r3
 8009952:	4608      	mov	r0, r1
 8009954:	f001 fe07 	bl	800b566 <SDMMC_ReadFIFO>
 8009958:	4603      	mov	r3, r0
 800995a:	6023      	str	r3, [r4, #0]
      index++;
 800995c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995e:	3301      	adds	r3, #1
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009962:	f7fa f8f9 	bl	8003b58 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009970:	d102      	bne.n	8009978 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009972:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009976:	e059      	b.n	8009a2c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800997e:	f240 432a 	movw	r3, #1066	; 0x42a
 8009982:	4013      	ands	r3, r2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0d6      	beq.n	8009936 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	f003 0308 	and.w	r3, r3, #8
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2208      	movs	r2, #8
 800999c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800999e:	2308      	movs	r3, #8
 80099a0:	e044      	b.n	8009a2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2202      	movs	r2, #2
 80099b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	e037      	b.n	8009a2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2220      	movs	r2, #32
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80099d2:	2320      	movs	r3, #32
 80099d4:	e02a      	b.n	8009a2c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f240 523a 	movw	r2, #1338	; 0x53a
 80099de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	061a      	lsls	r2, r3, #24
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	021b      	lsls	r3, r3, #8
 80099e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	0e1b      	lsrs	r3, r3, #24
 80099fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	601a      	str	r2, [r3, #0]
    scr++;
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	3304      	adds	r3, #4
 8009a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	061a      	lsls	r2, r3, #24
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	021b      	lsls	r3, r3, #8
 8009a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	0a1b      	lsrs	r3, r3, #8
 8009a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	0e1b      	lsrs	r3, r3, #24
 8009a24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	373c      	adds	r7, #60	; 0x3c
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e07c      	b.n	8009b40 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7f9 fccf 	bl	8003404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a86:	d902      	bls.n	8009a8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e002      	b.n	8009a94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009a9c:	d007      	beq.n	8009aae <HAL_SPI_Init+0x7a>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009aa6:	d002      	beq.n	8009aae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009abe:	d903      	bls.n	8009ac8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ac6:	e002      	b.n	8009ace <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	ea42 0103 	orr.w	r1, r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	0c1b      	lsrs	r3, r3, #16
 8009b0e:	f003 0204 	and.w	r2, r3, #4
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	431a      	orrs	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	ea42 0103 	orr.w	r1, r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e038      	b.n	8009bd0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7f9 fd16 	bl	80035a4 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	4619      	mov	r1, r3
 8009b82:	4610      	mov	r0, r2
 8009b84:	f001 fbaa 	bl	800b2dc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	461a      	mov	r2, r3
 8009b92:	68b9      	ldr	r1, [r7, #8]
 8009b94:	f001 fc32 	bl	800b3fc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6858      	ldr	r0, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	f001 fc79 	bl	800b49c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	6892      	ldr	r2, [r2, #8]
 8009bb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	6892      	ldr	r2, [r2, #8]
 8009bbe:	f041 0101 	orr.w	r1, r1, #1
 8009bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e01d      	b.n	8009c26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f815 	bl	8009c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3304      	adds	r3, #4
 8009c14:	4619      	mov	r1, r3
 8009c16:	4610      	mov	r0, r2
 8009c18:	f000 f986 	bl	8009f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0201 	orr.w	r2, r2, #1
 8009c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <HAL_TIM_Base_Start_IT+0x50>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d00b      	beq.n	8009c86 <HAL_TIM_Base_Start_IT+0x42>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c74:	d007      	beq.n	8009c86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0201 	orr.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	00010007 	.word	0x00010007

08009c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d122      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d11b      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0202 	mvn.w	r2, #2
 8009cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f905 	bl	8009eea <HAL_TIM_IC_CaptureCallback>
 8009ce0:	e005      	b.n	8009cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8f7 	bl	8009ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f908 	bl	8009efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d122      	bne.n	8009d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d11b      	bne.n	8009d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0204 	mvn.w	r2, #4
 8009d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8db 	bl	8009eea <HAL_TIM_IC_CaptureCallback>
 8009d34:	e005      	b.n	8009d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f8cd 	bl	8009ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f8de 	bl	8009efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	f003 0308 	and.w	r3, r3, #8
 8009d52:	2b08      	cmp	r3, #8
 8009d54:	d122      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d11b      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f06f 0208 	mvn.w	r2, #8
 8009d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2204      	movs	r2, #4
 8009d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f8b1 	bl	8009eea <HAL_TIM_IC_CaptureCallback>
 8009d88:	e005      	b.n	8009d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f8a3 	bl	8009ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f8b4 	bl	8009efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d122      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b10      	cmp	r3, #16
 8009db6:	d11b      	bne.n	8009df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0210 	mvn.w	r2, #16
 8009dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f887 	bl	8009eea <HAL_TIM_IC_CaptureCallback>
 8009ddc:	e005      	b.n	8009dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f879 	bl	8009ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f88a 	bl	8009efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d10e      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d107      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f06f 0201 	mvn.w	r2, #1
 8009e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7f8 fa84 	bl	8002324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	2b80      	cmp	r3, #128	; 0x80
 8009e28:	d10e      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e34:	2b80      	cmp	r3, #128	; 0x80
 8009e36:	d107      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f914 	bl	800a070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e56:	d10e      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d107      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f907 	bl	800a084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e80:	2b40      	cmp	r3, #64	; 0x40
 8009e82:	d10e      	bne.n	8009ea2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d107      	bne.n	8009ea2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f838 	bl	8009f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	d10e      	bne.n	8009ece <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d107      	bne.n	8009ece <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f06f 0220 	mvn.w	r2, #32
 8009ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8c7 	bl	800a05c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
	...

08009f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a40      	ldr	r2, [pc, #256]	; (800a03c <TIM_Base_SetConfig+0x114>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d013      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f46:	d00f      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a3d      	ldr	r2, [pc, #244]	; (800a040 <TIM_Base_SetConfig+0x118>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00b      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a3c      	ldr	r2, [pc, #240]	; (800a044 <TIM_Base_SetConfig+0x11c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d007      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a3b      	ldr	r2, [pc, #236]	; (800a048 <TIM_Base_SetConfig+0x120>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a3a      	ldr	r2, [pc, #232]	; (800a04c <TIM_Base_SetConfig+0x124>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d108      	bne.n	8009f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a2f      	ldr	r2, [pc, #188]	; (800a03c <TIM_Base_SetConfig+0x114>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f88:	d01b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a2c      	ldr	r2, [pc, #176]	; (800a040 <TIM_Base_SetConfig+0x118>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d017      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2b      	ldr	r2, [pc, #172]	; (800a044 <TIM_Base_SetConfig+0x11c>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a2a      	ldr	r2, [pc, #168]	; (800a048 <TIM_Base_SetConfig+0x120>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a29      	ldr	r2, [pc, #164]	; (800a04c <TIM_Base_SetConfig+0x124>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a28      	ldr	r2, [pc, #160]	; (800a050 <TIM_Base_SetConfig+0x128>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a27      	ldr	r2, [pc, #156]	; (800a054 <TIM_Base_SetConfig+0x12c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a26      	ldr	r2, [pc, #152]	; (800a058 <TIM_Base_SetConfig+0x130>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a10      	ldr	r2, [pc, #64]	; (800a03c <TIM_Base_SetConfig+0x114>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a12      	ldr	r2, [pc, #72]	; (800a04c <TIM_Base_SetConfig+0x124>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a11      	ldr	r2, [pc, #68]	; (800a050 <TIM_Base_SetConfig+0x128>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a10      	ldr	r2, [pc, #64]	; (800a054 <TIM_Base_SetConfig+0x12c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a0f      	ldr	r2, [pc, #60]	; (800a058 <TIM_Base_SetConfig+0x130>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d103      	bne.n	800a028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691a      	ldr	r2, [r3, #16]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	615a      	str	r2, [r3, #20]
}
 800a02e:	bf00      	nop
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	40012c00 	.word	0x40012c00
 800a040:	40000400 	.word	0x40000400
 800a044:	40000800 	.word	0x40000800
 800a048:	40000c00 	.word	0x40000c00
 800a04c:	40013400 	.word	0x40013400
 800a050:	40014000 	.word	0x40014000
 800a054:	40014400 	.word	0x40014400
 800a058:	40014800 	.word	0x40014800

0800a05c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e040      	b.n	800a12c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7f8 ff9c 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2224      	movs	r2, #36	; 0x24
 800a0c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fab0 	bl	800a63c <UART_SetConfig>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e022      	b.n	800a12c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fe16 	bl	800ad20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fe9d 	bl	800ae64 <UART_CheckIdleState>
 800a12a:	4603      	mov	r3, r0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e027      	b.n	800a196 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2224      	movs	r2, #36	; 0x24
 800a14a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0201 	bic.w	r2, r2, #1
 800a15a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2200      	movs	r2, #0
 800a16a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2200      	movs	r2, #0
 800a172:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7f9 f82d 	bl	80031d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d144      	bne.n	800a240 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <HAL_UART_Transmit_IT+0x22>
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e03d      	b.n	800a242 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Transmit_IT+0x34>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e036      	b.n	800a242 <HAL_UART_Transmit_IT+0xa2>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	88fa      	ldrh	r2, [r7, #6]
 800a1e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2221      	movs	r2, #33	; 0x21
 800a202:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20c:	d107      	bne.n	800a21e <HAL_UART_Transmit_IT+0x7e>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a0d      	ldr	r2, [pc, #52]	; (800a250 <HAL_UART_Transmit_IT+0xb0>)
 800a21a:	665a      	str	r2, [r3, #100]	; 0x64
 800a21c:	e002      	b.n	800a224 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a0c      	ldr	r2, [pc, #48]	; (800a254 <HAL_UART_Transmit_IT+0xb4>)
 800a222:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a23a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	e000      	b.n	800a242 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	0800b0c5 	.word	0x0800b0c5
 800a254:	0800b051 	.word	0x0800b051

0800a258 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26a:	2b20      	cmp	r3, #32
 800a26c:	f040 808a 	bne.w	800a384 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <HAL_UART_Receive_IT+0x24>
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e082      	b.n	800a386 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a286:	2b01      	cmp	r3, #1
 800a288:	d101      	bne.n	800a28e <HAL_UART_Receive_IT+0x36>
 800a28a:	2302      	movs	r3, #2
 800a28c:	e07b      	b.n	800a386 <HAL_UART_Receive_IT+0x12e>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	88fa      	ldrh	r2, [r7, #6]
 800a2a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ba:	d10e      	bne.n	800a2da <HAL_UART_Receive_IT+0x82>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d105      	bne.n	800a2d0 <HAL_UART_Receive_IT+0x78>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a2ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2ce:	e02d      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	22ff      	movs	r2, #255	; 0xff
 800a2d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2d8:	e028      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <HAL_UART_Receive_IT+0xa6>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d104      	bne.n	800a2f4 <HAL_UART_Receive_IT+0x9c>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	22ff      	movs	r2, #255	; 0xff
 800a2ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2f2:	e01b      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	227f      	movs	r2, #127	; 0x7f
 800a2f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2fc:	e016      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a306:	d10d      	bne.n	800a324 <HAL_UART_Receive_IT+0xcc>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <HAL_UART_Receive_IT+0xc2>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	227f      	movs	r2, #127	; 0x7f
 800a314:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a318:	e008      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	223f      	movs	r2, #63	; 0x3f
 800a31e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a322:	e003      	b.n	800a32c <HAL_UART_Receive_IT+0xd4>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2222      	movs	r2, #34	; 0x22
 800a336:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f042 0201 	orr.w	r2, r2, #1
 800a346:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a350:	d107      	bne.n	800a362 <HAL_UART_Receive_IT+0x10a>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4a0d      	ldr	r2, [pc, #52]	; (800a394 <HAL_UART_Receive_IT+0x13c>)
 800a35e:	661a      	str	r2, [r3, #96]	; 0x60
 800a360:	e002      	b.n	800a368 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <HAL_UART_Receive_IT+0x140>)
 800a366:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a37e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	e000      	b.n	800a386 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a384:	2302      	movs	r3, #2
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	0800b21d 	.word	0x0800b21d
 800a398:	0800b173 	.word	0x0800b173

0800a39c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3bc:	69fa      	ldr	r2, [r7, #28]
 800a3be:	f640 030f 	movw	r3, #2063	; 0x80f
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d113      	bne.n	800a3f4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	f003 0320 	and.w	r3, r3, #32
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d009      	beq.n	800a3f4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8114 	beq.w	800a612 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
      }
      return;
 800a3f2:	e10e      	b.n	800a612 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 80d6 	beq.w	800a5a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 80cb 	beq.w	800a5a8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00e      	beq.n	800a43a <HAL_UART_IRQHandler+0x9e>
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	2b00      	cmp	r3, #0
 800a424:	d009      	beq.n	800a43a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2201      	movs	r2, #1
 800a42c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a432:	f043 0201 	orr.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00e      	beq.n	800a462 <HAL_UART_IRQHandler+0xc6>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2202      	movs	r2, #2
 800a454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45a:	f043 0204 	orr.w	r2, r3, #4
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00e      	beq.n	800a48a <HAL_UART_IRQHandler+0xee>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2204      	movs	r2, #4
 800a47c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d009      	beq.n	800a4bc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b4:	f043 0208 	orr.w	r2, r3, #8
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00f      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x14a>
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4de:	f043 0220 	orr.w	r2, r3, #32
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8093 	beq.w	800a616 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f003 0320 	and.w	r3, r3, #32
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	f003 0320 	and.w	r3, r3, #32
 800a500:	2b00      	cmp	r3, #0
 800a502:	d007      	beq.n	800a514 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a518:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	d004      	beq.n	800a532 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d031      	beq.n	800a596 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fd56 	bl	800afe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d123      	bne.n	800a58e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a554:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d013      	beq.n	800a586 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a562:	4a30      	ldr	r2, [pc, #192]	; (800a624 <HAL_UART_IRQHandler+0x288>)
 800a564:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fa fbf6 	bl	8004d5c <HAL_DMA_Abort_IT>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d016      	beq.n	800a5a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a580:	4610      	mov	r0, r2
 800a582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a584:	e00e      	b.n	800a5a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7f9 fa46 	bl	8003a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a58c:	e00a      	b.n	800a5a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f9 fa42 	bl	8003a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a594:	e006      	b.n	800a5a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7f9 fa3e 	bl	8003a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a5a2:	e038      	b.n	800a616 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a4:	bf00      	nop
    return;
 800a5a6:	e036      	b.n	800a616 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00d      	beq.n	800a5ce <HAL_UART_IRQHandler+0x232>
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d008      	beq.n	800a5ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a5c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fe7d 	bl	800b2c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5cc:	e026      	b.n	800a61c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00d      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
    }
    return;
 800a5f2:	e012      	b.n	800a61a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <HAL_UART_IRQHandler+0x280>
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	d009      	beq.n	800a61c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fd99 	bl	800b140 <UART_EndTransmit_IT>
    return;
 800a60e:	bf00      	nop
 800a610:	e004      	b.n	800a61c <HAL_UART_IRQHandler+0x280>
      return;
 800a612:	bf00      	nop
 800a614:	e002      	b.n	800a61c <HAL_UART_IRQHandler+0x280>
    return;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <HAL_UART_IRQHandler+0x280>
    return;
 800a61a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	0800b025 	.word	0x0800b025

0800a628 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a63c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a640:	b08a      	sub	sp, #40	; 0x28
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	4313      	orrs	r3, r2
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4bb8      	ldr	r3, [pc, #736]	; (800a954 <UART_SetConfig+0x318>)
 800a672:	4013      	ands	r3, r2
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a67a:	430b      	orrs	r3, r1
 800a67c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4aae      	ldr	r2, [pc, #696]	; (800a958 <UART_SetConfig+0x31c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d004      	beq.n	800a6ae <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4aa5      	ldr	r2, [pc, #660]	; (800a95c <UART_SetConfig+0x320>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d126      	bne.n	800a71a <UART_SetConfig+0xde>
 800a6cc:	4ba4      	ldr	r3, [pc, #656]	; (800a960 <UART_SetConfig+0x324>)
 800a6ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d81a      	bhi.n	800a710 <UART_SetConfig+0xd4>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <UART_SetConfig+0xa4>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a6f1 	.word	0x0800a6f1
 800a6e4:	0800a701 	.word	0x0800a701
 800a6e8:	0800a6f9 	.word	0x0800a6f9
 800a6ec:	0800a709 	.word	0x0800a709
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6f6:	e105      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6fe:	e101      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a700:	2304      	movs	r3, #4
 800a702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a706:	e0fd      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a708:	2308      	movs	r3, #8
 800a70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a70e:	e0f9      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a710:	2310      	movs	r3, #16
 800a712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a716:	bf00      	nop
 800a718:	e0f4      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a91      	ldr	r2, [pc, #580]	; (800a964 <UART_SetConfig+0x328>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d138      	bne.n	800a796 <UART_SetConfig+0x15a>
 800a724:	4b8e      	ldr	r3, [pc, #568]	; (800a960 <UART_SetConfig+0x324>)
 800a726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72a:	f003 030c 	and.w	r3, r3, #12
 800a72e:	2b0c      	cmp	r3, #12
 800a730:	d82c      	bhi.n	800a78c <UART_SetConfig+0x150>
 800a732:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <UART_SetConfig+0xfc>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a76d 	.word	0x0800a76d
 800a73c:	0800a78d 	.word	0x0800a78d
 800a740:	0800a78d 	.word	0x0800a78d
 800a744:	0800a78d 	.word	0x0800a78d
 800a748:	0800a77d 	.word	0x0800a77d
 800a74c:	0800a78d 	.word	0x0800a78d
 800a750:	0800a78d 	.word	0x0800a78d
 800a754:	0800a78d 	.word	0x0800a78d
 800a758:	0800a775 	.word	0x0800a775
 800a75c:	0800a78d 	.word	0x0800a78d
 800a760:	0800a78d 	.word	0x0800a78d
 800a764:	0800a78d 	.word	0x0800a78d
 800a768:	0800a785 	.word	0x0800a785
 800a76c:	2300      	movs	r3, #0
 800a76e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a772:	e0c7      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a774:	2302      	movs	r3, #2
 800a776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a77a:	e0c3      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a77c:	2304      	movs	r3, #4
 800a77e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a782:	e0bf      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a784:	2308      	movs	r3, #8
 800a786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a78a:	e0bb      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a78c:	2310      	movs	r3, #16
 800a78e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a792:	bf00      	nop
 800a794:	e0b6      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a73      	ldr	r2, [pc, #460]	; (800a968 <UART_SetConfig+0x32c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d125      	bne.n	800a7ec <UART_SetConfig+0x1b0>
 800a7a0:	4b6f      	ldr	r3, [pc, #444]	; (800a960 <UART_SetConfig+0x324>)
 800a7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a7aa:	2b10      	cmp	r3, #16
 800a7ac:	d011      	beq.n	800a7d2 <UART_SetConfig+0x196>
 800a7ae:	2b10      	cmp	r3, #16
 800a7b0:	d802      	bhi.n	800a7b8 <UART_SetConfig+0x17c>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <UART_SetConfig+0x186>
 800a7b6:	e014      	b.n	800a7e2 <UART_SetConfig+0x1a6>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d006      	beq.n	800a7ca <UART_SetConfig+0x18e>
 800a7bc:	2b30      	cmp	r3, #48	; 0x30
 800a7be:	d00c      	beq.n	800a7da <UART_SetConfig+0x19e>
 800a7c0:	e00f      	b.n	800a7e2 <UART_SetConfig+0x1a6>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7c8:	e09c      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7d0:	e098      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a7d2:	2304      	movs	r3, #4
 800a7d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7d8:	e094      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a7da:	2308      	movs	r3, #8
 800a7dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7e0:	e090      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a7e2:	2310      	movs	r3, #16
 800a7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7e8:	bf00      	nop
 800a7ea:	e08b      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a5e      	ldr	r2, [pc, #376]	; (800a96c <UART_SetConfig+0x330>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d125      	bne.n	800a842 <UART_SetConfig+0x206>
 800a7f6:	4b5a      	ldr	r3, [pc, #360]	; (800a960 <UART_SetConfig+0x324>)
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d011      	beq.n	800a828 <UART_SetConfig+0x1ec>
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d802      	bhi.n	800a80e <UART_SetConfig+0x1d2>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <UART_SetConfig+0x1dc>
 800a80c:	e014      	b.n	800a838 <UART_SetConfig+0x1fc>
 800a80e:	2b80      	cmp	r3, #128	; 0x80
 800a810:	d006      	beq.n	800a820 <UART_SetConfig+0x1e4>
 800a812:	2bc0      	cmp	r3, #192	; 0xc0
 800a814:	d00c      	beq.n	800a830 <UART_SetConfig+0x1f4>
 800a816:	e00f      	b.n	800a838 <UART_SetConfig+0x1fc>
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a81e:	e071      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a820:	2302      	movs	r3, #2
 800a822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a826:	e06d      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a828:	2304      	movs	r3, #4
 800a82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a82e:	e069      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a830:	2308      	movs	r3, #8
 800a832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a836:	e065      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a838:	2310      	movs	r3, #16
 800a83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a83e:	bf00      	nop
 800a840:	e060      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a4a      	ldr	r2, [pc, #296]	; (800a970 <UART_SetConfig+0x334>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d129      	bne.n	800a8a0 <UART_SetConfig+0x264>
 800a84c:	4b44      	ldr	r3, [pc, #272]	; (800a960 <UART_SetConfig+0x324>)
 800a84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a85a:	d014      	beq.n	800a886 <UART_SetConfig+0x24a>
 800a85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a860:	d802      	bhi.n	800a868 <UART_SetConfig+0x22c>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <UART_SetConfig+0x23a>
 800a866:	e016      	b.n	800a896 <UART_SetConfig+0x25a>
 800a868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a86c:	d007      	beq.n	800a87e <UART_SetConfig+0x242>
 800a86e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a872:	d00c      	beq.n	800a88e <UART_SetConfig+0x252>
 800a874:	e00f      	b.n	800a896 <UART_SetConfig+0x25a>
 800a876:	2300      	movs	r3, #0
 800a878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a87c:	e042      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a87e:	2302      	movs	r3, #2
 800a880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a884:	e03e      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a886:	2304      	movs	r3, #4
 800a888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a88c:	e03a      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a88e:	2308      	movs	r3, #8
 800a890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a894:	e036      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a896:	2310      	movs	r3, #16
 800a898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a89c:	bf00      	nop
 800a89e:	e031      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a2c      	ldr	r2, [pc, #176]	; (800a958 <UART_SetConfig+0x31c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d129      	bne.n	800a8fe <UART_SetConfig+0x2c2>
 800a8aa:	4b2d      	ldr	r3, [pc, #180]	; (800a960 <UART_SetConfig+0x324>)
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a8b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8b8:	d014      	beq.n	800a8e4 <UART_SetConfig+0x2a8>
 800a8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8be:	d802      	bhi.n	800a8c6 <UART_SetConfig+0x28a>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d007      	beq.n	800a8d4 <UART_SetConfig+0x298>
 800a8c4:	e016      	b.n	800a8f4 <UART_SetConfig+0x2b8>
 800a8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ca:	d007      	beq.n	800a8dc <UART_SetConfig+0x2a0>
 800a8cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8d0:	d00c      	beq.n	800a8ec <UART_SetConfig+0x2b0>
 800a8d2:	e00f      	b.n	800a8f4 <UART_SetConfig+0x2b8>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8da:	e013      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8e2:	e00f      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ea:	e00b      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8f2:	e007      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8fa:	bf00      	nop
 800a8fc:	e002      	b.n	800a904 <UART_SetConfig+0x2c8>
 800a8fe:	2310      	movs	r3, #16
 800a900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <UART_SetConfig+0x31c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f040 80fe 	bne.w	800ab0c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a914:	2b08      	cmp	r3, #8
 800a916:	d837      	bhi.n	800a988 <UART_SetConfig+0x34c>
 800a918:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <UART_SetConfig+0x2e4>)
 800a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91e:	bf00      	nop
 800a920:	0800a945 	.word	0x0800a945
 800a924:	0800a989 	.word	0x0800a989
 800a928:	0800a94d 	.word	0x0800a94d
 800a92c:	0800a989 	.word	0x0800a989
 800a930:	0800a979 	.word	0x0800a979
 800a934:	0800a989 	.word	0x0800a989
 800a938:	0800a989 	.word	0x0800a989
 800a93c:	0800a989 	.word	0x0800a989
 800a940:	0800a981 	.word	0x0800a981
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a944:	f7fc fdc6 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 800a948:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a94a:	e020      	b.n	800a98e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <UART_SetConfig+0x338>)
 800a94e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a950:	e01d      	b.n	800a98e <UART_SetConfig+0x352>
 800a952:	bf00      	nop
 800a954:	efff69f3 	.word	0xefff69f3
 800a958:	40008000 	.word	0x40008000
 800a95c:	40013800 	.word	0x40013800
 800a960:	40021000 	.word	0x40021000
 800a964:	40004400 	.word	0x40004400
 800a968:	40004800 	.word	0x40004800
 800a96c:	40004c00 	.word	0x40004c00
 800a970:	40005000 	.word	0x40005000
 800a974:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a978:	f7fc fd16 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800a97c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a97e:	e006      	b.n	800a98e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a984:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a986:	e002      	b.n	800a98e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	76fb      	strb	r3, [r7, #27]
        break;
 800a98c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 81b9 	beq.w	800ad08 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	4613      	mov	r3, r2
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	4413      	add	r3, r2
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d305      	bcc.n	800a9b2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d902      	bls.n	800a9b8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	76fb      	strb	r3, [r7, #27]
 800a9b6:	e1a7      	b.n	800ad08 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800a9b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	f200 8092 	bhi.w	800aae6 <UART_SetConfig+0x4aa>
 800a9c2:	a201      	add	r2, pc, #4	; (adr r2, 800a9c8 <UART_SetConfig+0x38c>)
 800a9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c8:	0800a9ed 	.word	0x0800a9ed
 800a9cc:	0800aae7 	.word	0x0800aae7
 800a9d0:	0800aa3b 	.word	0x0800aa3b
 800a9d4:	0800aae7 	.word	0x0800aae7
 800a9d8:	0800aa6f 	.word	0x0800aa6f
 800a9dc:	0800aae7 	.word	0x0800aae7
 800a9e0:	0800aae7 	.word	0x0800aae7
 800a9e4:	0800aae7 	.word	0x0800aae7
 800a9e8:	0800aabd 	.word	0x0800aabd
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a9ec:	f7fc fd72 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 800a9f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f04f 0200 	mov.w	r2, #0
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	0214      	lsls	r4, r2, #8
 800aa04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aa08:	020b      	lsls	r3, r1, #8
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6852      	ldr	r2, [r2, #4]
 800aa0e:	0852      	lsrs	r2, r2, #1
 800aa10:	4611      	mov	r1, r2
 800aa12:	f04f 0200 	mov.w	r2, #0
 800aa16:	eb13 0b01 	adds.w	fp, r3, r1
 800aa1a:	eb44 0c02 	adc.w	ip, r4, r2
 800aa1e:	4658      	mov	r0, fp
 800aa20:	4661      	mov	r1, ip
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	f7f5 fc37 	bl	80002a0 <__aeabi_uldivmod>
 800aa32:	4603      	mov	r3, r0
 800aa34:	460c      	mov	r4, r1
 800aa36:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa38:	e058      	b.n	800aaec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	f04f 0400 	mov.w	r4, #0
 800aa44:	49ae      	ldr	r1, [pc, #696]	; (800ad00 <UART_SetConfig+0x6c4>)
 800aa46:	f04f 0200 	mov.w	r2, #0
 800aa4a:	eb13 0b01 	adds.w	fp, r3, r1
 800aa4e:	eb44 0c02 	adc.w	ip, r4, r2
 800aa52:	4658      	mov	r0, fp
 800aa54:	4661      	mov	r1, ip
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f04f 0400 	mov.w	r4, #0
 800aa5e:	461a      	mov	r2, r3
 800aa60:	4623      	mov	r3, r4
 800aa62:	f7f5 fc1d 	bl	80002a0 <__aeabi_uldivmod>
 800aa66:	4603      	mov	r3, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aa6c:	e03e      	b.n	800aaec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800aa6e:	f7fc fc9b 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800aa72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	4619      	mov	r1, r3
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	f04f 0400 	mov.w	r4, #0
 800aa84:	0214      	lsls	r4, r2, #8
 800aa86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aa8a:	020b      	lsls	r3, r1, #8
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6852      	ldr	r2, [r2, #4]
 800aa90:	0852      	lsrs	r2, r2, #1
 800aa92:	4611      	mov	r1, r2
 800aa94:	f04f 0200 	mov.w	r2, #0
 800aa98:	eb13 0b01 	adds.w	fp, r3, r1
 800aa9c:	eb44 0c02 	adc.w	ip, r4, r2
 800aaa0:	4658      	mov	r0, fp
 800aaa2:	4661      	mov	r1, ip
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f04f 0400 	mov.w	r4, #0
 800aaac:	461a      	mov	r2, r3
 800aaae:	4623      	mov	r3, r4
 800aab0:	f7f5 fbf6 	bl	80002a0 <__aeabi_uldivmod>
 800aab4:	4603      	mov	r3, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aaba:	e017      	b.n	800aaec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	085b      	lsrs	r3, r3, #1
 800aac2:	f04f 0400 	mov.w	r4, #0
 800aac6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800aaca:	f144 0100 	adc.w	r1, r4, #0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f04f 0400 	mov.w	r4, #0
 800aad6:	461a      	mov	r2, r3
 800aad8:	4623      	mov	r3, r4
 800aada:	f7f5 fbe1 	bl	80002a0 <__aeabi_uldivmod>
 800aade:	4603      	mov	r3, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800aae4:	e002      	b.n	800aaec <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	76fb      	strb	r3, [r7, #27]
            break;
 800aaea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaf2:	d308      	bcc.n	800ab06 <UART_SetConfig+0x4ca>
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafa:	d204      	bcs.n	800ab06 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	60da      	str	r2, [r3, #12]
 800ab04:	e100      	b.n	800ad08 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	76fb      	strb	r3, [r7, #27]
 800ab0a:	e0fd      	b.n	800ad08 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab14:	f040 8084 	bne.w	800ac20 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800ab18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d85f      	bhi.n	800abe0 <UART_SetConfig+0x5a4>
 800ab20:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <UART_SetConfig+0x4ec>)
 800ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800ab4d 	.word	0x0800ab4d
 800ab2c:	0800ab6d 	.word	0x0800ab6d
 800ab30:	0800ab8d 	.word	0x0800ab8d
 800ab34:	0800abe1 	.word	0x0800abe1
 800ab38:	0800aba9 	.word	0x0800aba9
 800ab3c:	0800abe1 	.word	0x0800abe1
 800ab40:	0800abe1 	.word	0x0800abe1
 800ab44:	0800abe1 	.word	0x0800abe1
 800ab48:	0800abc9 	.word	0x0800abc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab4c:	f7fc fcc2 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 800ab50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	005a      	lsls	r2, r3, #1
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	085b      	lsrs	r3, r3, #1
 800ab5c:	441a      	add	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab6a:	e03c      	b.n	800abe6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab6c:	f7fc fcc8 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 800ab70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	005a      	lsls	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	085b      	lsrs	r3, r3, #1
 800ab7c:	441a      	add	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab8a:	e02c      	b.n	800abe6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800ab96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	6852      	ldr	r2, [r2, #4]
 800ab9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800aba6:	e01e      	b.n	800abe6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aba8:	f7fc fbfe 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800abac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	005a      	lsls	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	085b      	lsrs	r3, r3, #1
 800abb8:	441a      	add	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800abc6:	e00e      	b.n	800abe6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	085b      	lsrs	r3, r3, #1
 800abce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abda:	b29b      	uxth	r3, r3
 800abdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800abde:	e002      	b.n	800abe6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	76fb      	strb	r3, [r7, #27]
        break;
 800abe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	2b0f      	cmp	r3, #15
 800abea:	d916      	bls.n	800ac1a <UART_SetConfig+0x5de>
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf2:	d212      	bcs.n	800ac1a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	f023 030f 	bic.w	r3, r3, #15
 800abfc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	085b      	lsrs	r3, r3, #1
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f003 0307 	and.w	r3, r3, #7
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	89fb      	ldrh	r3, [r7, #14]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	89fa      	ldrh	r2, [r7, #14]
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	e076      	b.n	800ad08 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	76fb      	strb	r3, [r7, #27]
 800ac1e:	e073      	b.n	800ad08 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800ac20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac24:	2b08      	cmp	r3, #8
 800ac26:	d85c      	bhi.n	800ace2 <UART_SetConfig+0x6a6>
 800ac28:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x5f4>)
 800ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2e:	bf00      	nop
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac73 	.word	0x0800ac73
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800ace3 	.word	0x0800ace3
 800ac40:	0800acad 	.word	0x0800acad
 800ac44:	0800ace3 	.word	0x0800ace3
 800ac48:	0800ace3 	.word	0x0800ace3
 800ac4c:	0800ace3 	.word	0x0800ace3
 800ac50:	0800accb 	.word	0x0800accb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac54:	f7fc fc3e 	bl	80074d4 <HAL_RCC_GetPCLK1Freq>
 800ac58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	085a      	lsrs	r2, r3, #1
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	441a      	add	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac70:	e03a      	b.n	800ace8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac72:	f7fc fc45 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 800ac76:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	085a      	lsrs	r2, r3, #1
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ac8e:	e02b      	b.n	800ace8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800ac9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6852      	ldr	r2, [r2, #4]
 800aca2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800acaa:	e01d      	b.n	800ace8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acac:	f7fc fb7c 	bl	80073a8 <HAL_RCC_GetSysClockFreq>
 800acb0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	085a      	lsrs	r2, r3, #1
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	441a      	add	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800acc8:	e00e      	b.n	800ace8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	085b      	lsrs	r3, r3, #1
 800acd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acdc:	b29b      	uxth	r3, r3
 800acde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ace0:	e002      	b.n	800ace8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	76fb      	strb	r3, [r7, #27]
        break;
 800ace6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b0f      	cmp	r3, #15
 800acec:	d90a      	bls.n	800ad04 <UART_SetConfig+0x6c8>
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf4:	d206      	bcs.n	800ad04 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	60da      	str	r2, [r3, #12]
 800acfe:	e003      	b.n	800ad08 <UART_SetConfig+0x6cc>
 800ad00:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad14:	7efb      	ldrb	r3, [r7, #27]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3728      	adds	r7, #40	; 0x28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ad20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae1e:	d10a      	bne.n	800ae36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae72:	f7f8 fe71 	bl	8003b58 <HAL_GetTick>
 800ae76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b08      	cmp	r3, #8
 800ae84:	d10e      	bne.n	800aea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f82a 	bl	800aeee <UART_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e020      	b.n	800aee6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0304 	and.w	r3, r3, #4
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d10e      	bne.n	800aed0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f814 	bl	800aeee <UART_WaitOnFlagUntilTimeout>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e00a      	b.n	800aee6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2220      	movs	r2, #32
 800aeda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	603b      	str	r3, [r7, #0]
 800aefa:	4613      	mov	r3, r2
 800aefc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aefe:	e05d      	b.n	800afbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af06:	d059      	beq.n	800afbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af08:	f7f8 fe26 	bl	8003b58 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	429a      	cmp	r2, r3
 800af16:	d302      	bcc.n	800af1e <UART_WaitOnFlagUntilTimeout+0x30>
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d11b      	bne.n	800af56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0201 	bic.w	r2, r2, #1
 800af3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2220      	movs	r2, #32
 800af42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2220      	movs	r2, #32
 800af48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e042      	b.n	800afdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02b      	beq.n	800afbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af72:	d123      	bne.n	800afbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af8c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 0201 	bic.w	r2, r2, #1
 800af9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2220      	movs	r2, #32
 800afae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e00f      	b.n	800afdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	69da      	ldr	r2, [r3, #28]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	4013      	ands	r3, r2
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	429a      	cmp	r2, r3
 800afca:	bf0c      	ite	eq
 800afcc:	2301      	moveq	r3, #1
 800afce:	2300      	movne	r3, #0
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	461a      	mov	r2, r3
 800afd4:	79fb      	ldrb	r3, [r7, #7]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d092      	beq.n	800af00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800affa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0201 	bic.w	r2, r2, #1
 800b00a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7f8 fce8 	bl	8003a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b048:	bf00      	nop
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05c:	2b21      	cmp	r3, #33	; 0x21
 800b05e:	d12b      	bne.n	800b0b8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b066:	b29b      	uxth	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d110      	bne.n	800b08e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b07a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b08a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b08c:	e014      	b.n	800b0b8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	b292      	uxth	r2, r2
 800b09a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0d0:	2b21      	cmp	r3, #33	; 0x21
 800b0d2:	d12f      	bne.n	800b134 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d110      	bne.n	800b102 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0ee:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b100:	e018      	b.n	800b134 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b106:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	881a      	ldrh	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b114:	b292      	uxth	r2, r2
 800b116:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11c:	1c9a      	adds	r2, r3, #2
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b01      	subs	r3, #1
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b134:	bf00      	nop
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b156:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2220      	movs	r2, #32
 800b15c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fa5f 	bl	800a628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b180:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b186:	2b22      	cmp	r3, #34	; 0x22
 800b188:	d13a      	bne.n	800b200 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b190:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b192:	89bb      	ldrh	r3, [r7, #12]
 800b194:	b2d9      	uxtb	r1, r3
 800b196:	89fb      	ldrh	r3, [r7, #14]
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b19e:	400a      	ands	r2, r1
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d123      	bne.n	800b214 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1da:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0201 	bic.w	r2, r2, #1
 800b1ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7f8 fbbf 	bl	800397c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1fe:	e009      	b.n	800b214 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	8b1b      	ldrh	r3, [r3, #24]
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f042 0208 	orr.w	r2, r2, #8
 800b210:	b292      	uxth	r2, r2
 800b212:	831a      	strh	r2, [r3, #24]
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b22a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b230:	2b22      	cmp	r3, #34	; 0x22
 800b232:	d13a      	bne.n	800b2aa <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b23a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b240:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b242:	89ba      	ldrh	r2, [r7, #12]
 800b244:	89fb      	ldrh	r3, [r7, #14]
 800b246:	4013      	ands	r3, r2
 800b248:	b29a      	uxth	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	1c9a      	adds	r2, r3, #2
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b25e:	b29b      	uxth	r3, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	b29a      	uxth	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b270:	b29b      	uxth	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	d123      	bne.n	800b2be <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b284:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f022 0201 	bic.w	r2, r2, #1
 800b294:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7f8 fb6a 	bl	800397c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2a8:	e009      	b.n	800b2be <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	8b1b      	ldrh	r3, [r3, #24]
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0208 	orr.w	r2, r2, #8
 800b2ba:	b292      	uxth	r2, r2
 800b2bc:	831a      	strh	r2, [r3, #24]
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2ce:	bf00      	nop
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	6812      	ldr	r2, [r2, #0]
 800b2f4:	f023 0101 	bic.w	r1, r3, #1
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	2b08      	cmp	r3, #8
 800b304:	d102      	bne.n	800b30c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e001      	b.n	800b310 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b31c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b322:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b328:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b32e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800b334:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800b33a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800b340:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800b346:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800b34c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800b352:	4313      	orrs	r3, r2
 800b354:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4313      	orrs	r3, r2
 800b368:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800b374:	4b20      	ldr	r3, [pc, #128]	; (800b3f8 <FMC_NORSRAM_Init+0x11c>)
 800b376:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b37e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b386:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b38e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	43db      	mvns	r3, r3
 800b39e:	ea02 0103 	and.w	r1, r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	4319      	orrs	r1, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3b8:	d10c      	bne.n	800b3d4 <FMC_NORSRAM_Init+0xf8>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	0008fb7f 	.word	0x0008fb7f

0800b3fc <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	431a      	orrs	r2, r3
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	431a      	orrs	r2, r3
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	431a      	orrs	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	3b01      	subs	r3, #1
 800b438:	051b      	lsls	r3, r3, #20
 800b43a:	431a      	orrs	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	3b02      	subs	r3, #2
 800b442:	061b      	lsls	r3, r3, #24
 800b444:	431a      	orrs	r2, r3
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	3201      	adds	r2, #1
 800b450:	4319      	orrs	r1, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b464:	d113      	bne.n	800b48e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b46e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	3b01      	subs	r3, #1
 800b476:	051b      	lsls	r3, r3, #20
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	431a      	orrs	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	371c      	adds	r7, #28
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4b0:	d11d      	bne.n	800b4ee <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b4bc:	4013      	ands	r3, r2
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	6811      	ldr	r1, [r2, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	6852      	ldr	r2, [r2, #4]
 800b4c6:	0112      	lsls	r2, r2, #4
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	6892      	ldr	r2, [r2, #8]
 800b4ce:	0212      	lsls	r2, r2, #8
 800b4d0:	4311      	orrs	r1, r2
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	69d2      	ldr	r2, [r2, #28]
 800b4d6:	4311      	orrs	r1, r2
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	6912      	ldr	r2, [r2, #16]
 800b4dc:	0412      	lsls	r2, r2, #16
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	ea43 0102 	orr.w	r1, r3, r2
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b4ec:	e005      	b.n	800b4fa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b4f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	cff00000 	.word	0xcff00000

0800b50c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b50c:	b084      	sub	sp, #16
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	f107 001c 	add.w	r0, r7, #28
 800b51a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800b52a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800b52e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b532:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b536:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b53a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b54a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	b004      	add	sp, #16
 800b564:	4770      	bx	lr

0800b566 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b574:	4618      	mov	r0, r3
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2203      	movs	r2, #3
 800b58c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b58e:	2002      	movs	r0, #2
 800b590:	f7f8 faee 	bl	8003b70 <HAL_Delay>

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5d8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b5de:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b5e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b5f4:	f023 030f 	bic.w	r3, r3, #15
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	b2db      	uxtb	r3, r3
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3314      	adds	r3, #20
 800b636:	461a      	mov	r2, r3
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	4413      	add	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b674:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b67a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b680:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	431a      	orrs	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b698:	2300      	movs	r3, #0

}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b6b4:	2310      	movs	r3, #16
 800b6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff74 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b6d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d6:	2110      	movs	r1, #16
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f975 	bl	800b9c8 <SDMMC_GetCmdResp1>
 800b6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3720      	adds	r7, #32
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b08a      	sub	sp, #40	; 0x28
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6fa:	2307      	movs	r3, #7
 800b6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6fe:	2340      	movs	r3, #64	; 0x40
 800b700:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b70a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b70c:	f107 0310 	add.w	r3, r7, #16
 800b710:	4619      	mov	r1, r3
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff ff51 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b718:	f241 3288 	movw	r2, #5000	; 0x1388
 800b71c:	2107      	movs	r1, #7
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f952 	bl	800b9c8 <SDMMC_GetCmdResp1>
 800b724:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3728      	adds	r7, #40	; 0x28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b088      	sub	sp, #32
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b73c:	2300      	movs	r3, #0
 800b73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b740:	2300      	movs	r3, #0
 800b742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b74c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b74e:	f107 0308 	add.w	r3, r7, #8
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff30 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f90c 	bl	800b978 <SDMMC_GetCmdError>
 800b760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b762:	69fb      	ldr	r3, [r7, #28]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3720      	adds	r7, #32
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b774:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b77a:	2308      	movs	r3, #8
 800b77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b77e:	2340      	movs	r3, #64	; 0x40
 800b780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b78a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b78c:	f107 0308 	add.w	r3, r7, #8
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff ff11 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 faf5 	bl	800bd88 <SDMMC_GetCmdResp7>
 800b79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a0:	69fb      	ldr	r3, [r7, #28]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3720      	adds	r7, #32
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b088      	sub	sp, #32
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7b8:	2337      	movs	r3, #55	; 0x37
 800b7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7bc:	2340      	movs	r3, #64	; 0x40
 800b7be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ca:	f107 0308 	add.w	r3, r7, #8
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff fef2 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7da:	2137      	movs	r1, #55	; 0x37
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8f3 	bl	800b9c8 <SDMMC_GetCmdResp1>
 800b7e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b088      	sub	sp, #32
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b802:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b804:	2329      	movs	r3, #41	; 0x29
 800b806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fecc 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fa02 	bl	800bc2c <SDMMC_GetCmdResp3>
 800b828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b82a:	69fb      	ldr	r3, [r7, #28]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3720      	adds	r7, #32
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b842:	2306      	movs	r3, #6
 800b844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fead 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b860:	f241 3288 	movw	r2, #5000	; 0x1388
 800b864:	2106      	movs	r1, #6
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f8ae 	bl	800b9c8 <SDMMC_GetCmdResp1>
 800b86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b86e:	69fb      	ldr	r3, [r7, #28]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3720      	adds	r7, #32
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b884:	2333      	movs	r3, #51	; 0x33
 800b886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b888:	2340      	movs	r3, #64	; 0x40
 800b88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b88c:	2300      	movs	r3, #0
 800b88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b896:	f107 0308 	add.w	r3, r7, #8
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fe8c 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a6:	2133      	movs	r1, #51	; 0x33
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f88d 	bl	800b9c8 <SDMMC_GetCmdResp1>
 800b8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b088      	sub	sp, #32
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8ca:	23c0      	movs	r3, #192	; 0xc0
 800b8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fe6b 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f95b 	bl	800bba0 <SDMMC_GetCmdResp2>
 800b8ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b088      	sub	sp, #32
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b904:	2309      	movs	r3, #9
 800b906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b908:	23c0      	movs	r3, #192	; 0xc0
 800b90a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b90c:	2300      	movs	r3, #0
 800b90e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b916:	f107 0308 	add.w	r3, r7, #8
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff fe4c 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f93c 	bl	800bba0 <SDMMC_GetCmdResp2>
 800b928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b92a:	69fb      	ldr	r3, [r7, #28]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3720      	adds	r7, #32
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b942:	2303      	movs	r3, #3
 800b944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b946:	2340      	movs	r3, #64	; 0x40
 800b948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b94a:	2300      	movs	r3, #0
 800b94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b954:	f107 0308 	add.w	r3, r7, #8
 800b958:	4619      	mov	r1, r3
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7ff fe2d 	bl	800b5ba <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	2103      	movs	r1, #3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f99b 	bl	800bca0 <SDMMC_GetCmdResp6>
 800b96a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b96c:	69fb      	ldr	r3, [r7, #28]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b978:	b490      	push	{r4, r7}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b980:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <SDMMC_GetCmdError+0x48>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a0f      	ldr	r2, [pc, #60]	; (800b9c4 <SDMMC_GetCmdError+0x4c>)
 800b986:	fba2 2303 	umull	r2, r3, r2, r3
 800b98a:	0a5b      	lsrs	r3, r3, #9
 800b98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b990:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b994:	4623      	mov	r3, r4
 800b996:	1e5c      	subs	r4, r3, #1
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b99c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9a0:	e009      	b.n	800b9b6 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0f2      	beq.n	800b994 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	22c5      	movs	r2, #197	; 0xc5
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bc90      	pop	{r4, r7}
 800b9be:	4770      	bx	lr
 800b9c0:	20000040 	.word	0x20000040
 800b9c4:	10624dd3 	.word	0x10624dd3

0800b9c8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9c8:	b590      	push	{r4, r7, lr}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b9d6:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <SDMMC_GetCmdResp1+0x1cc>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a6f      	ldr	r2, [pc, #444]	; (800bb98 <SDMMC_GetCmdResp1+0x1d0>)
 800b9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e0:	0a5b      	lsrs	r3, r3, #9
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b9e8:	4623      	mov	r3, r4
 800b9ea:	1e5c      	subs	r4, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f4:	e0c9      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0f0      	beq.n	800b9e8 <SDMMC_GetCmdResp1+0x20>
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1eb      	bne.n	800b9e8 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba22:	2304      	movs	r3, #4
 800ba24:	e0b1      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d004      	beq.n	800ba3c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e0a6      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	22c5      	movs	r2, #197	; 0xc5
 800ba40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fde3 	bl	800b60e <SDMMC_GetCommandResponse>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d001      	beq.n	800ba56 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e099      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba56:	2100      	movs	r1, #0
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff fde5 	bl	800b628 <SDMMC_GetResponse>
 800ba5e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	4b4e      	ldr	r3, [pc, #312]	; (800bb9c <SDMMC_GetCmdResp1+0x1d4>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e08d      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	da02      	bge.n	800ba7a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba78:	e087      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	e080      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba92:	2380      	movs	r3, #128	; 0x80
 800ba94:	e079      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800baa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa4:	e071      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab4:	e069      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac4:	e061      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bad4:	e059      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bae4:	e051      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800baf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800baf4:	e049      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb04:	e041      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb14:	e039      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb24:	e031      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb34:	e029      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb44:	e021      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb54:	e019      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb64:	e011      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb74:	e009      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bb84:	e001      	b.n	800bb8a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd90      	pop	{r4, r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20000040 	.word	0x20000040
 800bb98:	10624dd3 	.word	0x10624dd3
 800bb9c:	fdffe008 	.word	0xfdffe008

0800bba0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bba0:	b490      	push	{r4, r7}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <SDMMC_GetCmdResp2+0x84>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1e      	ldr	r2, [pc, #120]	; (800bc28 <SDMMC_GetCmdResp2+0x88>)
 800bbae:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb2:	0a5b      	lsrs	r3, r3, #9
 800bbb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	1e5c      	subs	r4, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbc8:	e026      	b.n	800bc18 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0f0      	beq.n	800bbbc <SDMMC_GetCmdResp2+0x1c>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1eb      	bne.n	800bbbc <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2204      	movs	r2, #4
 800bbf4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbf6:	2304      	movs	r3, #4
 800bbf8:	e00e      	b.n	800bc18 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d004      	beq.n	800bc10 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e003      	b.n	800bc18 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	22c5      	movs	r2, #197	; 0xc5
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bc90      	pop	{r4, r7}
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20000040 	.word	0x20000040
 800bc28:	10624dd3 	.word	0x10624dd3

0800bc2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc2c:	b490      	push	{r4, r7}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc34:	4b18      	ldr	r3, [pc, #96]	; (800bc98 <SDMMC_GetCmdResp3+0x6c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a18      	ldr	r2, [pc, #96]	; (800bc9c <SDMMC_GetCmdResp3+0x70>)
 800bc3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3e:	0a5b      	lsrs	r3, r3, #9
 800bc40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc44:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bc48:	4623      	mov	r3, r4
 800bc4a:	1e5c      	subs	r4, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc54:	e01b      	b.n	800bc8e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0f0      	beq.n	800bc48 <SDMMC_GetCmdResp3+0x1c>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1eb      	bne.n	800bc48 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	f003 0304 	and.w	r3, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2204      	movs	r2, #4
 800bc80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc82:	2304      	movs	r3, #4
 800bc84:	e003      	b.n	800bc8e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	22c5      	movs	r2, #197	; 0xc5
 800bc8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc90      	pop	{r4, r7}
 800bc96:	4770      	bx	lr
 800bc98:	20000040 	.word	0x20000040
 800bc9c:	10624dd3 	.word	0x10624dd3

0800bca0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcae:	4b34      	ldr	r3, [pc, #208]	; (800bd80 <SDMMC_GetCmdResp6+0xe0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a34      	ldr	r2, [pc, #208]	; (800bd84 <SDMMC_GetCmdResp6+0xe4>)
 800bcb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb8:	0a5b      	lsrs	r3, r3, #9
 800bcba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcbe:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bcc2:	4623      	mov	r3, r4
 800bcc4:	1e5c      	subs	r4, r3, #1
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d102      	bne.n	800bcd0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcce:	e052      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0f0      	beq.n	800bcc2 <SDMMC_GetCmdResp6+0x22>
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1eb      	bne.n	800bcc2 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d004      	beq.n	800bd00 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	e03a      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d004      	beq.n	800bd16 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e02f      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff fc79 	bl	800b60e <SDMMC_GetCommandResponse>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461a      	mov	r2, r3
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d001      	beq.n	800bd2a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e025      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	22c5      	movs	r2, #197	; 0xc5
 800bd2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd30:	2100      	movs	r1, #0
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff fc78 	bl	800b628 <SDMMC_GetResponse>
 800bd38:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d106      	bne.n	800bd52 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e011      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd60:	e009      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd70:	e001      	b.n	800bd76 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	371c      	adds	r7, #28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd90      	pop	{r4, r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20000040 	.word	0x20000040
 800bd84:	10624dd3 	.word	0x10624dd3

0800bd88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bd88:	b490      	push	{r4, r7}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd90:	4b21      	ldr	r3, [pc, #132]	; (800be18 <SDMMC_GetCmdResp7+0x90>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a21      	ldr	r2, [pc, #132]	; (800be1c <SDMMC_GetCmdResp7+0x94>)
 800bd96:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9a:	0a5b      	lsrs	r3, r3, #9
 800bd9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bda4:	4623      	mov	r3, r4
 800bda6:	1e5c      	subs	r4, r3, #1
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdb0:	e02c      	b.n	800be0c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0f0      	beq.n	800bda4 <SDMMC_GetCmdResp7+0x1c>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1eb      	bne.n	800bda4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2204      	movs	r2, #4
 800bddc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdde:	2304      	movs	r3, #4
 800bde0:	e014      	b.n	800be0c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d004      	beq.n	800bdf8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e009      	b.n	800be0c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2240      	movs	r2, #64	; 0x40
 800be08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be0a:	2300      	movs	r3, #0

}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bc90      	pop	{r4, r7}
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	20000040 	.word	0x20000040
 800be1c:	10624dd3 	.word	0x10624dd3

0800be20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be20:	b084      	sub	sp, #16
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	f107 001c 	add.w	r0, r7, #28
 800be2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b01      	cmp	r3, #1
 800be36:	d122      	bne.n	800be7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800be4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be62:	2b01      	cmp	r3, #1
 800be64:	d105      	bne.n	800be72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f001 f9c8 	bl	800d208 <USB_CoreReset>
 800be78:	4603      	mov	r3, r0
 800be7a:	73fb      	strb	r3, [r7, #15]
 800be7c:	e01a      	b.n	800beb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 f9bc 	bl	800d208 <USB_CoreReset>
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	639a      	str	r2, [r3, #56]	; 0x38
 800bea6:	e005      	b.n	800beb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bec0:	b004      	add	sp, #16
 800bec2:	4770      	bx	lr

0800bec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	4613      	mov	r3, r2
 800bed0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d165      	bne.n	800bfa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4a3e      	ldr	r2, [pc, #248]	; (800bfd4 <USB_SetTurnaroundTime+0x110>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d906      	bls.n	800beee <USB_SetTurnaroundTime+0x2a>
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4a3d      	ldr	r2, [pc, #244]	; (800bfd8 <USB_SetTurnaroundTime+0x114>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d802      	bhi.n	800beee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bee8:	230f      	movs	r3, #15
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	e05c      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	4a39      	ldr	r2, [pc, #228]	; (800bfd8 <USB_SetTurnaroundTime+0x114>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d906      	bls.n	800bf04 <USB_SetTurnaroundTime+0x40>
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	4a38      	ldr	r2, [pc, #224]	; (800bfdc <USB_SetTurnaroundTime+0x118>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d802      	bhi.n	800bf04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800befe:	230e      	movs	r3, #14
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	e051      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	4a35      	ldr	r2, [pc, #212]	; (800bfdc <USB_SetTurnaroundTime+0x118>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d906      	bls.n	800bf1a <USB_SetTurnaroundTime+0x56>
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	4a34      	ldr	r2, [pc, #208]	; (800bfe0 <USB_SetTurnaroundTime+0x11c>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d802      	bhi.n	800bf1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bf14:	230d      	movs	r3, #13
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	e046      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	4a30      	ldr	r2, [pc, #192]	; (800bfe0 <USB_SetTurnaroundTime+0x11c>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d906      	bls.n	800bf30 <USB_SetTurnaroundTime+0x6c>
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	4a2f      	ldr	r2, [pc, #188]	; (800bfe4 <USB_SetTurnaroundTime+0x120>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d802      	bhi.n	800bf30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bf2a:	230c      	movs	r3, #12
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e03b      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	4a2c      	ldr	r2, [pc, #176]	; (800bfe4 <USB_SetTurnaroundTime+0x120>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d906      	bls.n	800bf46 <USB_SetTurnaroundTime+0x82>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	4a2b      	ldr	r2, [pc, #172]	; (800bfe8 <USB_SetTurnaroundTime+0x124>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d802      	bhi.n	800bf46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf40:	230b      	movs	r3, #11
 800bf42:	617b      	str	r3, [r7, #20]
 800bf44:	e030      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4a27      	ldr	r2, [pc, #156]	; (800bfe8 <USB_SetTurnaroundTime+0x124>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d906      	bls.n	800bf5c <USB_SetTurnaroundTime+0x98>
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	4a26      	ldr	r2, [pc, #152]	; (800bfec <USB_SetTurnaroundTime+0x128>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d802      	bhi.n	800bf5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bf56:	230a      	movs	r3, #10
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	e025      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4a23      	ldr	r2, [pc, #140]	; (800bfec <USB_SetTurnaroundTime+0x128>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d906      	bls.n	800bf72 <USB_SetTurnaroundTime+0xae>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4a22      	ldr	r2, [pc, #136]	; (800bff0 <USB_SetTurnaroundTime+0x12c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d802      	bhi.n	800bf72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf6c:	2309      	movs	r3, #9
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	e01a      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4a1e      	ldr	r2, [pc, #120]	; (800bff0 <USB_SetTurnaroundTime+0x12c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d906      	bls.n	800bf88 <USB_SetTurnaroundTime+0xc4>
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <USB_SetTurnaroundTime+0x130>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d802      	bhi.n	800bf88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf82:	2308      	movs	r3, #8
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	e00f      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4a1a      	ldr	r2, [pc, #104]	; (800bff4 <USB_SetTurnaroundTime+0x130>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d906      	bls.n	800bf9e <USB_SetTurnaroundTime+0xda>
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4a19      	ldr	r2, [pc, #100]	; (800bff8 <USB_SetTurnaroundTime+0x134>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d802      	bhi.n	800bf9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf98:	2307      	movs	r3, #7
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	e004      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf9e:	2306      	movs	r3, #6
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	e001      	b.n	800bfa8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bfa4:	2309      	movs	r3, #9
 800bfa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	029b      	lsls	r3, r3, #10
 800bfbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	00d8acbf 	.word	0x00d8acbf
 800bfd8:	00e4e1bf 	.word	0x00e4e1bf
 800bfdc:	00f423ff 	.word	0x00f423ff
 800bfe0:	0106737f 	.word	0x0106737f
 800bfe4:	011a499f 	.word	0x011a499f
 800bfe8:	01312cff 	.word	0x01312cff
 800bfec:	014ca43f 	.word	0x014ca43f
 800bff0:	016e35ff 	.word	0x016e35ff
 800bff4:	01a6ab1f 	.word	0x01a6ab1f
 800bff8:	01e847ff 	.word	0x01e847ff

0800bffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	f043 0201 	orr.w	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	f023 0201 	bic.w	r2, r3, #1
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d106      	bne.n	800c06c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60da      	str	r2, [r3, #12]
 800c06a:	e00b      	b.n	800c084 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c06c:	78fb      	ldrb	r3, [r7, #3]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60da      	str	r2, [r3, #12]
 800c07e:	e001      	b.n	800c084 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e003      	b.n	800c08c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c084:	2032      	movs	r0, #50	; 0x32
 800c086:	f7f7 fd73 	bl	8003b70 <HAL_Delay>

  return HAL_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c094:	b084      	sub	sp, #16
 800c096:	b580      	push	{r7, lr}
 800c098:	b086      	sub	sp, #24
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	e009      	b.n	800c0c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	3340      	adds	r3, #64	; 0x40
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b0e      	cmp	r3, #14
 800c0cc:	d9f2      	bls.n	800c0b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d11c      	bne.n	800c10e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0e2:	f043 0302 	orr.w	r3, r3, #2
 800c0e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	e005      	b.n	800c11a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c120:	461a      	mov	r2, r3
 800c122:	2300      	movs	r3, #0
 800c124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12c:	4619      	mov	r1, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c134:	461a      	mov	r2, r3
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c13a:	2103      	movs	r1, #3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f93d 	bl	800c3bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c142:	2110      	movs	r1, #16
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f8f1 	bl	800c32c <USB_FlushTxFifo>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f90f 	bl	800c378 <USB_FlushRxFifo>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16a:	461a      	mov	r2, r3
 800c16c:	2300      	movs	r3, #0
 800c16e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c176:	461a      	mov	r2, r3
 800c178:	2300      	movs	r3, #0
 800c17a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c182:	461a      	mov	r2, r3
 800c184:	2300      	movs	r3, #0
 800c186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c188:	2300      	movs	r3, #0
 800c18a:	613b      	str	r3, [r7, #16]
 800c18c:	e043      	b.n	800c216 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1a4:	d118      	bne.n	800c1d8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10a      	bne.n	800c1c2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e013      	b.n	800c1ea <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	e008      	b.n	800c1ea <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	015a      	lsls	r2, r3, #5
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	015a      	lsls	r2, r3, #5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4413      	add	r3, r2
 800c204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c208:	461a      	mov	r2, r3
 800c20a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c20e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	3301      	adds	r3, #1
 800c214:	613b      	str	r3, [r7, #16]
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d3b7      	bcc.n	800c18e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c21e:	2300      	movs	r3, #0
 800c220:	613b      	str	r3, [r7, #16]
 800c222:	e043      	b.n	800c2ac <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c23a:	d118      	bne.n	800c26e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24e:	461a      	mov	r2, r3
 800c250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	e013      	b.n	800c280 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c264:	461a      	mov	r2, r3
 800c266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	e008      	b.n	800c280 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27a:	461a      	mov	r2, r3
 800c27c:	2300      	movs	r3, #0
 800c27e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4413      	add	r3, r2
 800c288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c28c:	461a      	mov	r2, r3
 800c28e:	2300      	movs	r3, #0
 800c290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	015a      	lsls	r2, r3, #5
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4413      	add	r3, r2
 800c29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d3b7      	bcc.n	800c224 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c2d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	f043 0210 	orr.w	r2, r3, #16
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	4b10      	ldr	r3, [pc, #64]	; (800c328 <USB_DevInit+0x294>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	f043 0208 	orr.w	r2, r3, #8
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c302:	2b01      	cmp	r3, #1
 800c304:	d107      	bne.n	800c316 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c30e:	f043 0304 	orr.w	r3, r3, #4
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c316:	7dfb      	ldrb	r3, [r7, #23]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c322:	b004      	add	sp, #16
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	803c3800 	.word	0x803c3800

0800c32c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	019b      	lsls	r3, r3, #6
 800c33e:	f043 0220 	orr.w	r2, r3, #32
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a09      	ldr	r2, [pc, #36]	; (800c374 <USB_FlushTxFifo+0x48>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d901      	bls.n	800c358 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	e006      	b.n	800c366 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f003 0320 	and.w	r3, r3, #32
 800c360:	2b20      	cmp	r3, #32
 800c362:	d0f0      	beq.n	800c346 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	00030d40 	.word	0x00030d40

0800c378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2210      	movs	r2, #16
 800c388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	4a09      	ldr	r2, [pc, #36]	; (800c3b8 <USB_FlushRxFifo+0x40>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d901      	bls.n	800c39c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c398:	2303      	movs	r3, #3
 800c39a:	e006      	b.n	800c3aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	f003 0310 	and.w	r3, r3, #16
 800c3a4:	2b10      	cmp	r3, #16
 800c3a6:	d0f0      	beq.n	800c38a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	00030d40 	.word	0x00030d40

0800c3bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b087      	sub	sp, #28
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f003 0306 	and.w	r3, r3, #6
 800c406:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d002      	beq.n	800c414 <USB_GetDevSpeed+0x26>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b06      	cmp	r3, #6
 800c412:	d102      	bne.n	800c41a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c414:	2302      	movs	r3, #2
 800c416:	75fb      	strb	r3, [r7, #23]
 800c418:	e001      	b.n	800c41e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800c41a:	230f      	movs	r3, #15
 800c41c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c420:	4618      	mov	r0, r3
 800c422:	371c      	adds	r7, #28
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	785b      	ldrb	r3, [r3, #1]
 800c444:	2b01      	cmp	r3, #1
 800c446:	d13a      	bne.n	800c4be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c44e:	69da      	ldr	r2, [r3, #28]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	2101      	movs	r1, #1
 800c45a:	fa01 f303 	lsl.w	r3, r1, r3
 800c45e:	b29b      	uxth	r3, r3
 800c460:	68f9      	ldr	r1, [r7, #12]
 800c462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c466:	4313      	orrs	r3, r2
 800c468:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d155      	bne.n	800c52c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	78db      	ldrb	r3, [r3, #3]
 800c49a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c49c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	059b      	lsls	r3, r3, #22
 800c4a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	0151      	lsls	r1, r2, #5
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	440a      	add	r2, r1
 800c4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	e036      	b.n	800c52c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c4:	69da      	ldr	r2, [r3, #28]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	f003 030f 	and.w	r3, r3, #15
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4d4:	041b      	lsls	r3, r3, #16
 800c4d6:	68f9      	ldr	r1, [r7, #12]
 800c4d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d11a      	bne.n	800c52c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	78db      	ldrb	r3, [r3, #3]
 800c510:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c512:	430b      	orrs	r3, r1
 800c514:	4313      	orrs	r3, r2
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c52a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
	...

0800c53c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	785b      	ldrb	r3, [r3, #1]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d161      	bne.n	800c61c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c56a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c56e:	d11f      	bne.n	800c5b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	015a      	lsls	r2, r3, #5
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	0151      	lsls	r1, r2, #5
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	440a      	add	r2, r1
 800c586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c58a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c58e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	0151      	lsls	r1, r2, #5
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	440a      	add	r2, r1
 800c5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	f003 030f 	and.w	r3, r3, #15
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	43db      	mvns	r3, r3
 800c5ca:	68f9      	ldr	r1, [r7, #12]
 800c5cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	69da      	ldr	r2, [r3, #28]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	43db      	mvns	r3, r3
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	0159      	lsls	r1, r3, #5
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	440b      	add	r3, r1
 800c60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c612:	4619      	mov	r1, r3
 800c614:	4b35      	ldr	r3, [pc, #212]	; (800c6ec <USB_DeactivateEndpoint+0x1b0>)
 800c616:	4013      	ands	r3, r2
 800c618:	600b      	str	r3, [r1, #0]
 800c61a:	e060      	b.n	800c6de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c62e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c632:	d11f      	bne.n	800c674 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	0151      	lsls	r1, r2, #5
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	440a      	add	r2, r1
 800c64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c652:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	0151      	lsls	r1, r2, #5
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	440a      	add	r2, r1
 800c66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c66e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 030f 	and.w	r3, r3, #15
 800c684:	2101      	movs	r1, #1
 800c686:	fa01 f303 	lsl.w	r3, r1, r3
 800c68a:	041b      	lsls	r3, r3, #16
 800c68c:	43db      	mvns	r3, r3
 800c68e:	68f9      	ldr	r1, [r7, #12]
 800c690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c694:	4013      	ands	r3, r2
 800c696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69e:	69da      	ldr	r2, [r3, #28]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	f003 030f 	and.w	r3, r3, #15
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ae:	041b      	lsls	r3, r3, #16
 800c6b0:	43db      	mvns	r3, r3
 800c6b2:	68f9      	ldr	r1, [r7, #12]
 800c6b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	0159      	lsls	r1, r3, #5
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	440b      	add	r3, r1
 800c6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4b05      	ldr	r3, [pc, #20]	; (800c6f0 <USB_DeactivateEndpoint+0x1b4>)
 800c6da:	4013      	ands	r3, r2
 800c6dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	ec337800 	.word	0xec337800
 800c6f0:	eff37800 	.word	0xeff37800

0800c6f4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	785b      	ldrb	r3, [r3, #1]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	f040 810a 	bne.w	800c926 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d132      	bne.n	800c780 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	0151      	lsls	r1, r2, #5
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	440a      	add	r2, r1
 800c730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c734:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c738:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c73c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	015a      	lsls	r2, r3, #5
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	4413      	add	r3, r2
 800c746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	0151      	lsls	r1, r2, #5
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	440a      	add	r2, r1
 800c754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c75c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	015a      	lsls	r2, r3, #5
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	4413      	add	r3, r2
 800c766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	0151      	lsls	r1, r2, #5
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	440a      	add	r2, r1
 800c774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c778:	0cdb      	lsrs	r3, r3, #19
 800c77a:	04db      	lsls	r3, r3, #19
 800c77c:	6113      	str	r3, [r2, #16]
 800c77e:	e074      	b.n	800c86a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	0151      	lsls	r1, r2, #5
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	440a      	add	r2, r1
 800c796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c79a:	0cdb      	lsrs	r3, r3, #19
 800c79c:	04db      	lsls	r3, r3, #19
 800c79e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	693a      	ldr	r2, [r7, #16]
 800c7b0:	0151      	lsls	r1, r2, #5
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	440a      	add	r2, r1
 800c7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c7be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c7c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	691a      	ldr	r2, [r3, #16]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6959      	ldr	r1, [r3, #20]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	440b      	add	r3, r1
 800c7dc:	1e59      	subs	r1, r3, #1
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7e6:	04d9      	lsls	r1, r3, #19
 800c7e8:	4baf      	ldr	r3, [pc, #700]	; (800caa8 <USB_EPStartXfer+0x3b4>)
 800c7ea:	400b      	ands	r3, r1
 800c7ec:	6939      	ldr	r1, [r7, #16]
 800c7ee:	0148      	lsls	r0, r1, #5
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	4401      	add	r1, r0
 800c7f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	015a      	lsls	r2, r3, #5
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	4413      	add	r3, r2
 800c804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c808:	691a      	ldr	r2, [r3, #16]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c812:	6939      	ldr	r1, [r7, #16]
 800c814:	0148      	lsls	r0, r1, #5
 800c816:	6979      	ldr	r1, [r7, #20]
 800c818:	4401      	add	r1, r0
 800c81a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c81e:	4313      	orrs	r3, r2
 800c820:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	78db      	ldrb	r3, [r3, #3]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d11f      	bne.n	800c86a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	0151      	lsls	r1, r2, #5
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	440a      	add	r2, r1
 800c840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c844:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c848:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	0151      	lsls	r1, r2, #5
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	440a      	add	r2, r1
 800c860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c868:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	015a      	lsls	r2, r3, #5
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	4413      	add	r3, r2
 800c872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	0151      	lsls	r1, r2, #5
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	440a      	add	r2, r1
 800c880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c888:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	78db      	ldrb	r3, [r3, #3]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d015      	beq.n	800c8be <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 8100 	beq.w	800ca9c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f003 030f 	and.w	r3, r3, #15
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b2:	6979      	ldr	r1, [r7, #20]
 800c8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	634b      	str	r3, [r1, #52]	; 0x34
 800c8bc:	e0ee      	b.n	800ca9c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d110      	bne.n	800c8f0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	015a      	lsls	r2, r3, #5
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	0151      	lsls	r1, r2, #5
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	440a      	add	r2, r1
 800c8e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	e00f      	b.n	800c910 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	015a      	lsls	r2, r3, #5
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	0151      	lsls	r1, r2, #5
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	440a      	add	r2, r1
 800c906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c90a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c90e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	68d9      	ldr	r1, [r3, #12]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781a      	ldrb	r2, [r3, #0]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f9e2 	bl	800cce8 <USB_WritePacket>
 800c924:	e0ba      	b.n	800ca9c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	015a      	lsls	r2, r3, #5
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	4413      	add	r3, r2
 800c92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	693a      	ldr	r2, [r7, #16]
 800c936:	0151      	lsls	r1, r2, #5
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	440a      	add	r2, r1
 800c93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c940:	0cdb      	lsrs	r3, r3, #19
 800c942:	04db      	lsls	r3, r3, #19
 800c944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	015a      	lsls	r2, r3, #5
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	4413      	add	r3, r2
 800c94e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	0151      	lsls	r1, r2, #5
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	440a      	add	r2, r1
 800c95c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c968:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d123      	bne.n	800c9ba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97e:	691a      	ldr	r2, [r3, #16]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c988:	6939      	ldr	r1, [r7, #16]
 800c98a:	0148      	lsls	r0, r1, #5
 800c98c:	6979      	ldr	r1, [r7, #20]
 800c98e:	4401      	add	r1, r0
 800c990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c994:	4313      	orrs	r3, r2
 800c996:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	015a      	lsls	r2, r3, #5
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	0151      	lsls	r1, r2, #5
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	440a      	add	r2, r1
 800c9ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9b6:	6113      	str	r3, [r2, #16]
 800c9b8:	e033      	b.n	800ca22 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	695a      	ldr	r2, [r3, #20]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	1e5a      	subs	r2, r3, #1
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ce:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	015a      	lsls	r2, r3, #5
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9dc:	691a      	ldr	r2, [r3, #16]
 800c9de:	89fb      	ldrh	r3, [r7, #14]
 800c9e0:	04d9      	lsls	r1, r3, #19
 800c9e2:	4b31      	ldr	r3, [pc, #196]	; (800caa8 <USB_EPStartXfer+0x3b4>)
 800c9e4:	400b      	ands	r3, r1
 800c9e6:	6939      	ldr	r1, [r7, #16]
 800c9e8:	0148      	lsls	r0, r1, #5
 800c9ea:	6979      	ldr	r1, [r7, #20]
 800c9ec:	4401      	add	r1, r0
 800c9ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	89f9      	ldrh	r1, [r7, #14]
 800ca0a:	fb01 f303 	mul.w	r3, r1, r3
 800ca0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca12:	6939      	ldr	r1, [r7, #16]
 800ca14:	0148      	lsls	r0, r1, #5
 800ca16:	6979      	ldr	r1, [r7, #20]
 800ca18:	4401      	add	r1, r0
 800ca1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	78db      	ldrb	r3, [r3, #3]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d128      	bne.n	800ca7c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d110      	bne.n	800ca5c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	0151      	lsls	r1, r2, #5
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	440a      	add	r2, r1
 800ca50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	e00f      	b.n	800ca7c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	0151      	lsls	r1, r2, #5
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	440a      	add	r2, r1
 800ca72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	693a      	ldr	r2, [r7, #16]
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	1ff80000 	.word	0x1ff80000

0800caac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	785b      	ldrb	r3, [r3, #1]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	f040 80ab 	bne.w	800cc20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d132      	bne.n	800cb38 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	015a      	lsls	r2, r3, #5
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	0151      	lsls	r1, r2, #5
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	440a      	add	r2, r1
 800cae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800caf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800caf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	015a      	lsls	r2, r3, #5
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	4413      	add	r3, r2
 800cafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	0151      	lsls	r1, r2, #5
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	440a      	add	r2, r1
 800cb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	015a      	lsls	r2, r3, #5
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	0151      	lsls	r1, r2, #5
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	440a      	add	r2, r1
 800cb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb30:	0cdb      	lsrs	r3, r3, #19
 800cb32:	04db      	lsls	r3, r3, #19
 800cb34:	6113      	str	r3, [r2, #16]
 800cb36:	e04e      	b.n	800cbd6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	015a      	lsls	r2, r3, #5
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	4413      	add	r3, r2
 800cb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	0151      	lsls	r1, r2, #5
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	440a      	add	r2, r1
 800cb4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb52:	0cdb      	lsrs	r3, r3, #19
 800cb54:	04db      	lsls	r3, r3, #19
 800cb56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	0151      	lsls	r1, r2, #5
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	440a      	add	r2, r1
 800cb6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	695a      	ldr	r2, [r3, #20]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d903      	bls.n	800cb90 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	0151      	lsls	r1, r2, #5
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	440a      	add	r2, r1
 800cba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbbc:	691a      	ldr	r2, [r3, #16]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	0148      	lsls	r0, r1, #5
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	4401      	add	r1, r0
 800cbce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	015a      	lsls	r2, r3, #5
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4413      	add	r3, r2
 800cbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	0151      	lsls	r1, r2, #5
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	440a      	add	r2, r1
 800cbec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cbf4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d06d      	beq.n	800ccda <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	f003 030f 	and.w	r3, r3, #15
 800cc0e:	2101      	movs	r1, #1
 800cc10:	fa01 f303 	lsl.w	r3, r1, r3
 800cc14:	68f9      	ldr	r1, [r7, #12]
 800cc16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	634b      	str	r3, [r1, #52]	; 0x34
 800cc1e:	e05c      	b.n	800ccda <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	0151      	lsls	r1, r2, #5
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	440a      	add	r2, r1
 800cc36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc3a:	0cdb      	lsrs	r3, r3, #19
 800cc3c:	04db      	lsls	r3, r3, #19
 800cc3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	0151      	lsls	r1, r2, #5
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	440a      	add	r2, r1
 800cc56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cc5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cc62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	0151      	lsls	r1, r2, #5
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	440a      	add	r2, r1
 800cc8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca0:	691a      	ldr	r2, [r3, #16]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccaa:	68b9      	ldr	r1, [r7, #8]
 800ccac:	0148      	lsls	r0, r1, #5
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	4401      	add	r1, r0
 800ccb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	015a      	lsls	r2, r3, #5
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	0151      	lsls	r1, r2, #5
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	440a      	add	r2, r1
 800ccd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b089      	sub	sp, #36	; 0x24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	71fb      	strb	r3, [r7, #7]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800cd06:	88bb      	ldrh	r3, [r7, #4]
 800cd08:	3303      	adds	r3, #3
 800cd0a:	089b      	lsrs	r3, r3, #2
 800cd0c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800cd0e:	2300      	movs	r3, #0
 800cd10:	61bb      	str	r3, [r7, #24]
 800cd12:	e00f      	b.n	800cd34 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	031a      	lsls	r2, r3, #12
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd20:	461a      	mov	r2, r3
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6013      	str	r3, [r2, #0]
    pSrc++;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	3301      	adds	r3, #1
 800cd32:	61bb      	str	r3, [r7, #24]
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3eb      	bcc.n	800cd14 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3724      	adds	r7, #36	; 0x24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b089      	sub	sp, #36	; 0x24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	60b9      	str	r1, [r7, #8]
 800cd54:	4613      	mov	r3, r2
 800cd56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cd60:	88fb      	ldrh	r3, [r7, #6]
 800cd62:	3303      	adds	r3, #3
 800cd64:	089b      	lsrs	r3, r3, #2
 800cd66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	61bb      	str	r3, [r7, #24]
 800cd6c:	e00b      	b.n	800cd86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	3301      	adds	r3, #1
 800cd84:	61bb      	str	r3, [r7, #24]
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d3ef      	bcc.n	800cd6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cd8e:	69fb      	ldr	r3, [r7, #28]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3724      	adds	r7, #36	; 0x24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	785b      	ldrb	r3, [r3, #1]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d12c      	bne.n	800ce12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	015a      	lsls	r2, r3, #5
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	db12      	blt.n	800cdf0 <USB_EPSetStall+0x54>
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00f      	beq.n	800cdf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	0151      	lsls	r1, r2, #5
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	440a      	add	r2, r1
 800cde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	0151      	lsls	r1, r2, #5
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	440a      	add	r2, r1
 800ce06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	e02b      	b.n	800ce6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	015a      	lsls	r2, r3, #5
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	4413      	add	r3, r2
 800ce1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	db12      	blt.n	800ce4a <USB_EPSetStall+0xae>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00f      	beq.n	800ce4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	0151      	lsls	r1, r2, #5
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	440a      	add	r2, r1
 800ce40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	0151      	lsls	r1, r2, #5
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	440a      	add	r2, r1
 800ce60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	785b      	ldrb	r3, [r3, #1]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d128      	bne.n	800cee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	0151      	lsls	r1, r2, #5
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	440a      	add	r2, r1
 800ceaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ceb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	78db      	ldrb	r3, [r3, #3]
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	d003      	beq.n	800cec4 <USB_EPClearStall+0x4c>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	78db      	ldrb	r3, [r3, #3]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d138      	bne.n	800cf36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	0151      	lsls	r1, r2, #5
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	440a      	add	r2, r1
 800ceda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	e027      	b.n	800cf36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	0151      	lsls	r1, r2, #5
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	440a      	add	r2, r1
 800cefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	78db      	ldrb	r3, [r3, #3]
 800cf0a:	2b03      	cmp	r3, #3
 800cf0c:	d003      	beq.n	800cf16 <USB_EPClearStall+0x9e>
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	78db      	ldrb	r3, [r3, #3]
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d10f      	bne.n	800cf36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	0151      	lsls	r1, r2, #5
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	440a      	add	r2, r1
 800cf2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3714      	adds	r7, #20
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	78fb      	ldrb	r3, [r7, #3]
 800cf72:	011b      	lsls	r3, r3, #4
 800cf74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cf78:	68f9      	ldr	r1, [r7, #12]
 800cf7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfaa:	f023 0302 	bic.w	r3, r3, #2
 800cfae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cfb0:	2003      	movs	r0, #3
 800cfb2:	f7f6 fddd 	bl	8003b70 <HAL_Delay>

  return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfda:	f043 0302 	orr.w	r3, r3, #2
 800cfde:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cfe0:	2003      	movs	r0, #3
 800cfe2:	f7f6 fdc5 	bl	8003b70 <HAL_Delay>

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	4013      	ands	r3, r2
 800d006:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d008:	68fb      	ldr	r3, [r7, #12]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3714      	adds	r7, #20
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d016:	b480      	push	{r7}
 800d018:	b085      	sub	sp, #20
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d032:	69db      	ldr	r3, [r3, #28]
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	4013      	ands	r3, r2
 800d038:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	0c1b      	lsrs	r3, r3, #16
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b085      	sub	sp, #20
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d066:	69db      	ldr	r3, [r3, #28]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	4013      	ands	r3, r2
 800d06c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	b29b      	uxth	r3, r3
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d07e:	b480      	push	{r7}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	015a      	lsls	r2, r3, #5
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b087      	sub	sp, #28
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d0de:	78fb      	ldrb	r3, [r7, #3]
 800d0e0:	f003 030f 	and.w	r3, r3, #15
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	01db      	lsls	r3, r3, #7
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	693a      	ldr	r2, [r7, #16]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d0f4:	78fb      	ldrb	r3, [r7, #3]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	4013      	ands	r3, r2
 800d106:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d108:	68bb      	ldr	r3, [r7, #8]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	695b      	ldr	r3, [r3, #20]
 800d122:	f003 0301 	and.w	r3, r3, #1
}
 800d126:	4618      	mov	r0, r3
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d132:	b480      	push	{r7}
 800d134:	b085      	sub	sp, #20
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d14c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d150:	f023 0307 	bic.w	r3, r3, #7
 800d154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	333c      	adds	r3, #60	; 0x3c
 800d18a:	3304      	adds	r3, #4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	4a1c      	ldr	r2, [pc, #112]	; (800d204 <USB_EP0_OutStart+0x8c>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d90a      	bls.n	800d1ae <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1a8:	d101      	bne.n	800d1ae <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e024      	b.n	800d1f8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1dc:	f043 0318 	orr.w	r3, r3, #24
 800d1e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d1f4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	4f54300a 	.word	0x4f54300a

0800d208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	60fb      	str	r3, [r7, #12]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <USB_CoreReset+0x64>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d901      	bls.n	800d226 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e01b      	b.n	800d25e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	daf2      	bge.n	800d214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	f043 0201 	orr.w	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <USB_CoreReset+0x64>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d901      	bls.n	800d250 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e006      	b.n	800d25e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d0f0      	beq.n	800d23e <USB_CoreReset+0x36>

  return HAL_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3714      	adds	r7, #20
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	00030d40 	.word	0x00030d40

0800d270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7c1b      	ldrb	r3, [r3, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d115      	bne.n	800d2b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d28c:	2202      	movs	r2, #2
 800d28e:	2181      	movs	r1, #129	; 0x81
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f005 f897 	bl	80123c4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d29c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2a0:	2202      	movs	r2, #2
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f005 f88d 	bl	80123c4 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800d2b2:	e012      	b.n	800d2da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d2b4:	2340      	movs	r3, #64	; 0x40
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	2181      	movs	r1, #129	; 0x81
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f005 f882 	bl	80123c4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d2c6:	2340      	movs	r3, #64	; 0x40
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	2101      	movs	r1, #1
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f005 f879 	bl	80123c4 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d2da:	2308      	movs	r3, #8
 800d2dc:	2203      	movs	r2, #3
 800d2de:	2182      	movs	r1, #130	; 0x82
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f005 f86f 	bl	80123c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d2ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d2f0:	f005 fa80 	bl	80127f4 <USBD_static_malloc>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d302:	2b00      	cmp	r3, #0
 800d304:	d102      	bne.n	800d30c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d306:	2301      	movs	r3, #1
 800d308:	73fb      	strb	r3, [r7, #15]
 800d30a:	e026      	b.n	800d35a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d312:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2200      	movs	r2, #0
 800d322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2200      	movs	r2, #0
 800d32a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7c1b      	ldrb	r3, [r3, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d109      	bne.n	800d34a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d340:	2101      	movs	r1, #1
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f005 f9ba 	bl	80126bc <USBD_LL_PrepareReceive>
 800d348:	e007      	b.n	800d35a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d350:	2340      	movs	r3, #64	; 0x40
 800d352:	2101      	movs	r1, #1
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f005 f9b1 	bl	80126bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d370:	2300      	movs	r3, #0
 800d372:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d374:	2181      	movs	r1, #129	; 0x81
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f005 f862 	bl	8012440 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d382:	2101      	movs	r1, #1
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f005 f85b 	bl	8012440 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d392:	2182      	movs	r1, #130	; 0x82
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f005 f853 	bl	8012440 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00e      	beq.n	800d3c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f005 fa28 	bl	8012810 <USBD_static_free>
    pdev->pClassData = NULL;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b086      	sub	sp, #24
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d039      	beq.n	800d470 <USBD_CDC_Setup+0x9e>
 800d3fc:	2b20      	cmp	r3, #32
 800d3fe:	d17c      	bne.n	800d4fa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	88db      	ldrh	r3, [r3, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d029      	beq.n	800d45c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	b25b      	sxtb	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da11      	bge.n	800d436 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d41e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	88d2      	ldrh	r2, [r2, #6]
 800d424:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d426:	6939      	ldr	r1, [r7, #16]
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	88db      	ldrh	r3, [r3, #6]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 fa3a 	bl	800e8a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d434:	e068      	b.n	800d508 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	785a      	ldrb	r2, [r3, #1]
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	88db      	ldrh	r3, [r3, #6]
 800d444:	b2da      	uxtb	r2, r3
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d44c:	6939      	ldr	r1, [r7, #16]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	88db      	ldrh	r3, [r3, #6]
 800d452:	461a      	mov	r2, r3
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f001 fa55 	bl	800e904 <USBD_CtlPrepareRx>
      break;
 800d45a:	e055      	b.n	800d508 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	683a      	ldr	r2, [r7, #0]
 800d466:	7850      	ldrb	r0, [r2, #1]
 800d468:	2200      	movs	r2, #0
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	4798      	blx	r3
      break;
 800d46e:	e04b      	b.n	800d508 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	2b0a      	cmp	r3, #10
 800d476:	d017      	beq.n	800d4a8 <USBD_CDC_Setup+0xd6>
 800d478:	2b0b      	cmp	r3, #11
 800d47a:	d029      	beq.n	800d4d0 <USBD_CDC_Setup+0xfe>
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d133      	bne.n	800d4e8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d486:	2b03      	cmp	r3, #3
 800d488:	d107      	bne.n	800d49a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d48a:	f107 030c 	add.w	r3, r7, #12
 800d48e:	2202      	movs	r2, #2
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f001 fa08 	bl	800e8a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d498:	e02e      	b.n	800d4f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f001 f998 	bl	800e7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d4a6:	e027      	b.n	800d4f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d107      	bne.n	800d4c2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4b2:	f107 030f 	add.w	r3, r7, #15
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f001 f9f4 	bl	800e8a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4c0:	e01a      	b.n	800d4f8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f001 f984 	bl	800e7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d4ce:	e013      	b.n	800d4f8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d00d      	beq.n	800d4f6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800d4da:	6839      	ldr	r1, [r7, #0]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 f978 	bl	800e7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d4e6:	e006      	b.n	800d4f6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f001 f971 	bl	800e7d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	75fb      	strb	r3, [r7, #23]
          break;
 800d4f4:	e000      	b.n	800d4f8 <USBD_CDC_Setup+0x126>
          break;
 800d4f6:	bf00      	nop
      }
      break;
 800d4f8:	e006      	b.n	800d508 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 f968 	bl	800e7d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d502:	2302      	movs	r3, #2
 800d504:	75fb      	strb	r3, [r7, #23]
      break;
 800d506:	bf00      	nop
  }

  return ret;
 800d508:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b084      	sub	sp, #16
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
 800d51a:	460b      	mov	r3, r1
 800d51c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d524:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d52c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d534:	2b00      	cmp	r3, #0
 800d536:	d03a      	beq.n	800d5ae <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d538:	78fa      	ldrb	r2, [r7, #3]
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	440b      	add	r3, r1
 800d546:	331c      	adds	r3, #28
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d029      	beq.n	800d5a2 <USBD_CDC_DataIn+0x90>
 800d54e:	78fa      	ldrb	r2, [r7, #3]
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	4613      	mov	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	440b      	add	r3, r1
 800d55c:	331c      	adds	r3, #28
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	78f9      	ldrb	r1, [r7, #3]
 800d562:	68b8      	ldr	r0, [r7, #8]
 800d564:	460b      	mov	r3, r1
 800d566:	00db      	lsls	r3, r3, #3
 800d568:	1a5b      	subs	r3, r3, r1
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4403      	add	r3, r0
 800d56e:	3344      	adds	r3, #68	; 0x44
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	fbb2 f1f3 	udiv	r1, r2, r3
 800d576:	fb03 f301 	mul.w	r3, r3, r1
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d110      	bne.n	800d5a2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d580:	78fa      	ldrb	r2, [r7, #3]
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	440b      	add	r3, r1
 800d58e:	331c      	adds	r3, #28
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d594:	78f9      	ldrb	r1, [r7, #3]
 800d596:	2300      	movs	r3, #0
 800d598:	2200      	movs	r2, #0
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f005 f854 	bl	8012648 <USBD_LL_Transmit>
 800d5a0:	e003      	b.n	800d5aa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e000      	b.n	800d5b0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d5ae:	2302      	movs	r3, #2
  }
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d5cc:	78fb      	ldrb	r3, [r7, #3]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f005 f8ad 	bl	8012730 <USBD_LL_GetRxDataSize>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00d      	beq.n	800d604 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4798      	blx	r3

    return USBD_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	e000      	b.n	800d606 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d604:	2302      	movs	r3, #2
  }
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d61c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d624:	2b00      	cmp	r3, #0
 800d626:	d015      	beq.n	800d654 <USBD_CDC_EP0_RxReady+0x46>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d62e:	2bff      	cmp	r3, #255	; 0xff
 800d630:	d010      	beq.n	800d654 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d640:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d648:	b292      	uxth	r2, r2
 800d64a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	22ff      	movs	r2, #255	; 0xff
 800d650:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2243      	movs	r2, #67	; 0x43
 800d66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d66e:	4b03      	ldr	r3, [pc, #12]	; (800d67c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	200000d4 	.word	0x200000d4

0800d680 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2243      	movs	r2, #67	; 0x43
 800d68c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d68e:	4b03      	ldr	r3, [pc, #12]	; (800d69c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d690:	4618      	mov	r0, r3
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	20000090 	.word	0x20000090

0800d6a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2243      	movs	r2, #67	; 0x43
 800d6ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d6ae:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20000118 	.word	0x20000118

0800d6c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	220a      	movs	r2, #10
 800d6cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d6ce:	4b03      	ldr	r3, [pc, #12]	; (800d6dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	2000004c 	.word	0x2000004c

0800d6e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d700:	7bfb      	ldrb	r3, [r7, #15]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d70e:	b480      	push	{r7}
 800d710:	b087      	sub	sp, #28
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	4613      	mov	r3, r2
 800d71a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d722:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d72c:	88fa      	ldrh	r2, [r7, #6]
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d742:	b480      	push	{r7}
 800d744:	b085      	sub	sp, #20
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d752:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	683a      	ldr	r2, [r7, #0]
 800d758:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b084      	sub	sp, #16
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d778:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d780:	2b00      	cmp	r3, #0
 800d782:	d017      	beq.n	800d7b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7c1b      	ldrb	r3, [r3, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d109      	bne.n	800d7a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d792:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d796:	2101      	movs	r1, #1
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f004 ff8f 	bl	80126bc <USBD_LL_PrepareReceive>
 800d79e:	e007      	b.n	800d7b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7a6:	2340      	movs	r3, #64	; 0x40
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f004 ff86 	bl	80126bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	e000      	b.n	800d7b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d7b4:	2302      	movs	r3, #2
  }
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	60f8      	str	r0, [r7, #12]
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d7d2:	2302      	movs	r3, #2
 800d7d4:	e01a      	b.n	800d80c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	79fa      	ldrb	r2, [r7, #7]
 800d802:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f004 fd5f 	bl	80122c8 <USBD_LL_Init>

  return USBD_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d006      	beq.n	800d836 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
 800d834:	e001      	b.n	800d83a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d836:	2302      	movs	r3, #2
 800d838:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3714      	adds	r7, #20
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f004 fd85 	bl	8012360 <USBD_LL_Start>

  return USBD_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d882:	2302      	movs	r3, #2
 800d884:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00c      	beq.n	800d8aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	78fa      	ldrb	r2, [r7, #3]
 800d89a:	4611      	mov	r1, r2
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	4798      	blx	r3
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	78fa      	ldrb	r2, [r7, #3]
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	4798      	blx	r3

  return USBD_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 ff33 	bl	800e758 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d900:	461a      	mov	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d90e:	f003 031f 	and.w	r3, r3, #31
 800d912:	2b01      	cmp	r3, #1
 800d914:	d00c      	beq.n	800d930 <USBD_LL_SetupStage+0x56>
 800d916:	2b01      	cmp	r3, #1
 800d918:	d302      	bcc.n	800d920 <USBD_LL_SetupStage+0x46>
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d010      	beq.n	800d940 <USBD_LL_SetupStage+0x66>
 800d91e:	e017      	b.n	800d950 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fa09 	bl	800dd40 <USBD_StdDevReq>
      break;
 800d92e:	e01a      	b.n	800d966 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fa6b 	bl	800de14 <USBD_StdItfReq>
      break;
 800d93e:	e012      	b.n	800d966 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 faa9 	bl	800dea0 <USBD_StdEPReq>
      break;
 800d94e:	e00a      	b.n	800d966 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f004 fda4 	bl	80124ac <USBD_LL_StallEP>
      break;
 800d964:	bf00      	nop
  }

  return USBD_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b086      	sub	sp, #24
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	460b      	mov	r3, r1
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d97e:	7afb      	ldrb	r3, [r7, #11]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d14b      	bne.n	800da1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d98a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d992:	2b03      	cmp	r3, #3
 800d994:	d134      	bne.n	800da00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	68da      	ldr	r2, [r3, #12]
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d919      	bls.n	800d9d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	68da      	ldr	r2, [r3, #12]
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d203      	bcs.n	800d9c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	e002      	b.n	800d9ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	6879      	ldr	r1, [r7, #4]
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 ffb6 	bl	800e940 <USBD_CtlContinueRx>
 800d9d4:	e038      	b.n	800da48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d105      	bne.n	800d9f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f000 ffb3 	bl	800e964 <USBD_CtlSendStatus>
 800d9fe:	e023      	b.n	800da48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da06:	2b05      	cmp	r3, #5
 800da08:	d11e      	bne.n	800da48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800da12:	2100      	movs	r1, #0
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f004 fd49 	bl	80124ac <USBD_LL_StallEP>
 800da1a:	e015      	b.n	800da48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00d      	beq.n	800da44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800da2e:	2b03      	cmp	r3, #3
 800da30:	d108      	bne.n	800da44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	7afa      	ldrb	r2, [r7, #11]
 800da3c:	4611      	mov	r1, r2
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	4798      	blx	r3
 800da42:	e001      	b.n	800da48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da44:	2302      	movs	r3, #2
 800da46:	e000      	b.n	800da4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b086      	sub	sp, #24
 800da56:	af00      	add	r7, sp, #0
 800da58:	60f8      	str	r0, [r7, #12]
 800da5a:	460b      	mov	r3, r1
 800da5c:	607a      	str	r2, [r7, #4]
 800da5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800da60:	7afb      	ldrb	r3, [r7, #11]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d17f      	bne.n	800db66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	3314      	adds	r3, #20
 800da6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da72:	2b02      	cmp	r3, #2
 800da74:	d15c      	bne.n	800db30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d915      	bls.n	800daae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	68da      	ldr	r2, [r3, #12]
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	1ad2      	subs	r2, r2, r3
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	b29b      	uxth	r3, r3
 800da96:	461a      	mov	r2, r3
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f000 ff20 	bl	800e8e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daa0:	2300      	movs	r3, #0
 800daa2:	2200      	movs	r2, #0
 800daa4:	2100      	movs	r1, #0
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f004 fe08 	bl	80126bc <USBD_LL_PrepareReceive>
 800daac:	e04e      	b.n	800db4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	6912      	ldr	r2, [r2, #16]
 800dab6:	fbb3 f1f2 	udiv	r1, r3, r2
 800daba:	fb02 f201 	mul.w	r2, r2, r1
 800dabe:	1a9b      	subs	r3, r3, r2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d11c      	bne.n	800dafe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800dacc:	429a      	cmp	r2, r3
 800dace:	d316      	bcc.n	800dafe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	689a      	ldr	r2, [r3, #8]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dada:	429a      	cmp	r2, r3
 800dadc:	d20f      	bcs.n	800dafe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dade:	2200      	movs	r2, #0
 800dae0:	2100      	movs	r1, #0
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fefc 	bl	800e8e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daf0:	2300      	movs	r3, #0
 800daf2:	2200      	movs	r2, #0
 800daf4:	2100      	movs	r1, #0
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f004 fde0 	bl	80126bc <USBD_LL_PrepareReceive>
 800dafc:	e026      	b.n	800db4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00a      	beq.n	800db20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800db10:	2b03      	cmp	r3, #3
 800db12:	d105      	bne.n	800db20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800db20:	2180      	movs	r1, #128	; 0x80
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f004 fcc2 	bl	80124ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 ff2e 	bl	800e98a <USBD_CtlReceiveStatus>
 800db2e:	e00d      	b.n	800db4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db36:	2b04      	cmp	r3, #4
 800db38:	d004      	beq.n	800db44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800db40:	2b00      	cmp	r3, #0
 800db42:	d103      	bne.n	800db4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800db44:	2180      	movs	r1, #128	; 0x80
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f004 fcb0 	bl	80124ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db52:	2b01      	cmp	r3, #1
 800db54:	d11d      	bne.n	800db92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7ff fe82 	bl	800d860 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db64:	e015      	b.n	800db92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00d      	beq.n	800db8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d108      	bne.n	800db8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	7afa      	ldrb	r2, [r7, #11]
 800db86:	4611      	mov	r1, r2
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	4798      	blx	r3
 800db8c:	e001      	b.n	800db92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db8e:	2302      	movs	r3, #2
 800db90:	e000      	b.n	800db94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dba4:	2340      	movs	r3, #64	; 0x40
 800dba6:	2200      	movs	r2, #0
 800dba8:	2100      	movs	r1, #0
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f004 fc0a 	bl	80123c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2240      	movs	r2, #64	; 0x40
 800dbbc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbc0:	2340      	movs	r3, #64	; 0x40
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	2180      	movs	r1, #128	; 0x80
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f004 fbfc 	bl	80123c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2240      	movs	r2, #64	; 0x40
 800dbd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d009      	beq.n	800dc14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	6852      	ldr	r2, [r2, #4]
 800dc0c:	b2d2      	uxtb	r2, r2
 800dc0e:	4611      	mov	r1, r2
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	4798      	blx	r3
  }

  return USBD_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b083      	sub	sp, #12
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	460b      	mov	r3, r1
 800dc28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	78fa      	ldrb	r2, [r7, #3]
 800dc2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2204      	movs	r2, #4
 800dc56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc76:	2b04      	cmp	r3, #4
 800dc78:	d105      	bne.n	800dc86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d10b      	bne.n	800dcbe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d005      	beq.n	800dcbe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dce2:	b480      	push	{r7}
 800dce4:	b083      	sub	sp, #12
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
 800dcea:	460b      	mov	r3, r1
 800dcec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	6852      	ldr	r2, [r2, #4]
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	4611      	mov	r1, r2
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	4798      	blx	r3

  return USBD_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd56:	2b20      	cmp	r3, #32
 800dd58:	d004      	beq.n	800dd64 <USBD_StdDevReq+0x24>
 800dd5a:	2b40      	cmp	r3, #64	; 0x40
 800dd5c:	d002      	beq.n	800dd64 <USBD_StdDevReq+0x24>
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d008      	beq.n	800dd74 <USBD_StdDevReq+0x34>
 800dd62:	e04c      	b.n	800ddfe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
      break;
 800dd72:	e049      	b.n	800de08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	785b      	ldrb	r3, [r3, #1]
 800dd78:	2b09      	cmp	r3, #9
 800dd7a:	d83a      	bhi.n	800ddf2 <USBD_StdDevReq+0xb2>
 800dd7c:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <USBD_StdDevReq+0x44>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800ddd5 	.word	0x0800ddd5
 800dd88:	0800dde9 	.word	0x0800dde9
 800dd8c:	0800ddf3 	.word	0x0800ddf3
 800dd90:	0800dddf 	.word	0x0800dddf
 800dd94:	0800ddf3 	.word	0x0800ddf3
 800dd98:	0800ddb7 	.word	0x0800ddb7
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddf3 	.word	0x0800ddf3
 800dda4:	0800ddcb 	.word	0x0800ddcb
 800dda8:	0800ddc1 	.word	0x0800ddc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f9d4 	bl	800e15c <USBD_GetDescriptor>
          break;
 800ddb4:	e022      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ddb6:	6839      	ldr	r1, [r7, #0]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 fb61 	bl	800e480 <USBD_SetAddress>
          break;
 800ddbe:	e01d      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fb9e 	bl	800e504 <USBD_SetConfig>
          break;
 800ddc8:	e018      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fc27 	bl	800e620 <USBD_GetConfig>
          break;
 800ddd2:	e013      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ddd4:	6839      	ldr	r1, [r7, #0]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fc56 	bl	800e688 <USBD_GetStatus>
          break;
 800dddc:	e00e      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fc84 	bl	800e6ee <USBD_SetFeature>
          break;
 800dde6:	e009      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fc93 	bl	800e716 <USBD_ClrFeature>
          break;
 800ddf0:	e004      	b.n	800ddfc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 fcec 	bl	800e7d2 <USBD_CtlError>
          break;
 800ddfa:	bf00      	nop
      }
      break;
 800ddfc:	e004      	b.n	800de08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fce6 	bl	800e7d2 <USBD_CtlError>
      break;
 800de06:	bf00      	nop
  }

  return ret;
 800de08:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop

0800de14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de2a:	2b20      	cmp	r3, #32
 800de2c:	d003      	beq.n	800de36 <USBD_StdItfReq+0x22>
 800de2e:	2b40      	cmp	r3, #64	; 0x40
 800de30:	d001      	beq.n	800de36 <USBD_StdItfReq+0x22>
 800de32:	2b00      	cmp	r3, #0
 800de34:	d12a      	bne.n	800de8c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de3c:	3b01      	subs	r3, #1
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d81d      	bhi.n	800de7e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	889b      	ldrh	r3, [r3, #4]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d813      	bhi.n	800de74 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	4798      	blx	r3
 800de5a:	4603      	mov	r3, r0
 800de5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	88db      	ldrh	r3, [r3, #6]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d110      	bne.n	800de88 <USBD_StdItfReq+0x74>
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10d      	bne.n	800de88 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fd79 	bl	800e964 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800de72:	e009      	b.n	800de88 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fcab 	bl	800e7d2 <USBD_CtlError>
          break;
 800de7c:	e004      	b.n	800de88 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 fca6 	bl	800e7d2 <USBD_CtlError>
          break;
 800de86:	e000      	b.n	800de8a <USBD_StdItfReq+0x76>
          break;
 800de88:	bf00      	nop
      }
      break;
 800de8a:	e004      	b.n	800de96 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fc9f 	bl	800e7d2 <USBD_CtlError>
      break;
 800de94:	bf00      	nop
  }

  return USBD_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	889b      	ldrh	r3, [r3, #4]
 800deb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800debc:	2b20      	cmp	r3, #32
 800debe:	d004      	beq.n	800deca <USBD_StdEPReq+0x2a>
 800dec0:	2b40      	cmp	r3, #64	; 0x40
 800dec2:	d002      	beq.n	800deca <USBD_StdEPReq+0x2a>
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d008      	beq.n	800deda <USBD_StdEPReq+0x3a>
 800dec8:	e13d      	b.n	800e146 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	4798      	blx	r3
      break;
 800ded8:	e13a      	b.n	800e150 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dee2:	2b20      	cmp	r3, #32
 800dee4:	d10a      	bne.n	800defc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	4798      	blx	r3
 800def4:	4603      	mov	r3, r0
 800def6:	73fb      	strb	r3, [r7, #15]

        return ret;
 800def8:	7bfb      	ldrb	r3, [r7, #15]
 800defa:	e12a      	b.n	800e152 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	785b      	ldrb	r3, [r3, #1]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d03e      	beq.n	800df82 <USBD_StdEPReq+0xe2>
 800df04:	2b03      	cmp	r3, #3
 800df06:	d002      	beq.n	800df0e <USBD_StdEPReq+0x6e>
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d070      	beq.n	800dfee <USBD_StdEPReq+0x14e>
 800df0c:	e115      	b.n	800e13a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df14:	2b02      	cmp	r3, #2
 800df16:	d002      	beq.n	800df1e <USBD_StdEPReq+0x7e>
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d015      	beq.n	800df48 <USBD_StdEPReq+0xa8>
 800df1c:	e02b      	b.n	800df76 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00c      	beq.n	800df3e <USBD_StdEPReq+0x9e>
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	2b80      	cmp	r3, #128	; 0x80
 800df28:	d009      	beq.n	800df3e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f004 fabc 	bl	80124ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800df34:	2180      	movs	r1, #128	; 0x80
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f004 fab8 	bl	80124ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df3c:	e020      	b.n	800df80 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fc46 	bl	800e7d2 <USBD_CtlError>
              break;
 800df46:	e01b      	b.n	800df80 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	885b      	ldrh	r3, [r3, #2]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10e      	bne.n	800df6e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00b      	beq.n	800df6e <USBD_StdEPReq+0xce>
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b80      	cmp	r3, #128	; 0x80
 800df5a:	d008      	beq.n	800df6e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	88db      	ldrh	r3, [r3, #6]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f004 fa9f 	bl	80124ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fcf8 	bl	800e964 <USBD_CtlSendStatus>

              break;
 800df74:	e004      	b.n	800df80 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fc2a 	bl	800e7d2 <USBD_CtlError>
              break;
 800df7e:	bf00      	nop
          }
          break;
 800df80:	e0e0      	b.n	800e144 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d002      	beq.n	800df92 <USBD_StdEPReq+0xf2>
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d015      	beq.n	800dfbc <USBD_StdEPReq+0x11c>
 800df90:	e026      	b.n	800dfe0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00c      	beq.n	800dfb2 <USBD_StdEPReq+0x112>
 800df98:	7bbb      	ldrb	r3, [r7, #14]
 800df9a:	2b80      	cmp	r3, #128	; 0x80
 800df9c:	d009      	beq.n	800dfb2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800df9e:	7bbb      	ldrb	r3, [r7, #14]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f004 fa82 	bl	80124ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dfa8:	2180      	movs	r1, #128	; 0x80
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f004 fa7e 	bl	80124ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfb0:	e01c      	b.n	800dfec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fc0c 	bl	800e7d2 <USBD_CtlError>
              break;
 800dfba:	e017      	b.n	800dfec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	885b      	ldrh	r3, [r3, #2]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d112      	bne.n	800dfea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
 800dfc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d004      	beq.n	800dfd8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dfce:	7bbb      	ldrb	r3, [r7, #14]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f004 faa0 	bl	8012518 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fcc3 	bl	800e964 <USBD_CtlSendStatus>
              }
              break;
 800dfde:	e004      	b.n	800dfea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800dfe0:	6839      	ldr	r1, [r7, #0]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fbf5 	bl	800e7d2 <USBD_CtlError>
              break;
 800dfe8:	e000      	b.n	800dfec <USBD_StdEPReq+0x14c>
              break;
 800dfea:	bf00      	nop
          }
          break;
 800dfec:	e0aa      	b.n	800e144 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d002      	beq.n	800dffe <USBD_StdEPReq+0x15e>
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d032      	beq.n	800e062 <USBD_StdEPReq+0x1c2>
 800dffc:	e097      	b.n	800e12e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d007      	beq.n	800e014 <USBD_StdEPReq+0x174>
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b80      	cmp	r3, #128	; 0x80
 800e008:	d004      	beq.n	800e014 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fbe0 	bl	800e7d2 <USBD_CtlError>
                break;
 800e012:	e091      	b.n	800e138 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	da0b      	bge.n	800e034 <USBD_StdEPReq+0x194>
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
 800e01e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e022:	4613      	mov	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	3310      	adds	r3, #16
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	4413      	add	r3, r2
 800e030:	3304      	adds	r3, #4
 800e032:	e00b      	b.n	800e04c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e034:	7bbb      	ldrb	r3, [r7, #14]
 800e036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e03a:	4613      	mov	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	4413      	add	r3, r2
 800e04a:	3304      	adds	r3, #4
 800e04c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2202      	movs	r2, #2
 800e058:	4619      	mov	r1, r3
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fc24 	bl	800e8a8 <USBD_CtlSendData>
              break;
 800e060:	e06a      	b.n	800e138 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e066:	2b00      	cmp	r3, #0
 800e068:	da11      	bge.n	800e08e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e06a:	7bbb      	ldrb	r3, [r7, #14]
 800e06c:	f003 020f 	and.w	r2, r3, #15
 800e070:	6879      	ldr	r1, [r7, #4]
 800e072:	4613      	mov	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	440b      	add	r3, r1
 800e07c:	3318      	adds	r3, #24
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d117      	bne.n	800e0b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fba3 	bl	800e7d2 <USBD_CtlError>
                  break;
 800e08c:	e054      	b.n	800e138 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	f003 020f 	and.w	r2, r3, #15
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	440b      	add	r3, r1
 800e0a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d104      	bne.n	800e0b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fb90 	bl	800e7d2 <USBD_CtlError>
                  break;
 800e0b2:	e041      	b.n	800e138 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	da0b      	bge.n	800e0d4 <USBD_StdEPReq+0x234>
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4413      	add	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	3310      	adds	r3, #16
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	e00b      	b.n	800e0ec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0da:	4613      	mov	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0ee:	7bbb      	ldrb	r3, [r7, #14]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <USBD_StdEPReq+0x25a>
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	2b80      	cmp	r3, #128	; 0x80
 800e0f8:	d103      	bne.n	800e102 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
 800e100:	e00e      	b.n	800e120 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e102:	7bbb      	ldrb	r3, [r7, #14]
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f004 fa3c 	bl	8012584 <USBD_LL_IsStallEP>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d003      	beq.n	800e11a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	2201      	movs	r2, #1
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	e002      	b.n	800e120 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2200      	movs	r2, #0
 800e11e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2202      	movs	r2, #2
 800e124:	4619      	mov	r1, r3
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fbbe 	bl	800e8a8 <USBD_CtlSendData>
              break;
 800e12c:	e004      	b.n	800e138 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fb4e 	bl	800e7d2 <USBD_CtlError>
              break;
 800e136:	bf00      	nop
          }
          break;
 800e138:	e004      	b.n	800e144 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fb48 	bl	800e7d2 <USBD_CtlError>
          break;
 800e142:	bf00      	nop
      }
      break;
 800e144:	e004      	b.n	800e150 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fb42 	bl	800e7d2 <USBD_CtlError>
      break;
 800e14e:	bf00      	nop
  }

  return ret;
 800e150:	7bfb      	ldrb	r3, [r7, #15]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	885b      	ldrh	r3, [r3, #2]
 800e176:	0a1b      	lsrs	r3, r3, #8
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b01      	subs	r3, #1
 800e17c:	2b0e      	cmp	r3, #14
 800e17e:	f200 8152 	bhi.w	800e426 <USBD_GetDescriptor+0x2ca>
 800e182:	a201      	add	r2, pc, #4	; (adr r2, 800e188 <USBD_GetDescriptor+0x2c>)
 800e184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e188:	0800e1f9 	.word	0x0800e1f9
 800e18c:	0800e211 	.word	0x0800e211
 800e190:	0800e251 	.word	0x0800e251
 800e194:	0800e427 	.word	0x0800e427
 800e198:	0800e427 	.word	0x0800e427
 800e19c:	0800e3c7 	.word	0x0800e3c7
 800e1a0:	0800e3f3 	.word	0x0800e3f3
 800e1a4:	0800e427 	.word	0x0800e427
 800e1a8:	0800e427 	.word	0x0800e427
 800e1ac:	0800e427 	.word	0x0800e427
 800e1b0:	0800e427 	.word	0x0800e427
 800e1b4:	0800e427 	.word	0x0800e427
 800e1b8:	0800e427 	.word	0x0800e427
 800e1bc:	0800e427 	.word	0x0800e427
 800e1c0:	0800e1c5 	.word	0x0800e1c5
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1ca:	69db      	ldr	r3, [r3, #28]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00b      	beq.n	800e1e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	7c12      	ldrb	r2, [r2, #16]
 800e1dc:	f107 0108 	add.w	r1, r7, #8
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
 800e1e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1e6:	e126      	b.n	800e436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 faf1 	bl	800e7d2 <USBD_CtlError>
        err++;
 800e1f0:	7afb      	ldrb	r3, [r7, #11]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	72fb      	strb	r3, [r7, #11]
      break;
 800e1f6:	e11e      	b.n	800e436 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	7c12      	ldrb	r2, [r2, #16]
 800e204:	f107 0108 	add.w	r1, r7, #8
 800e208:	4610      	mov	r0, r2
 800e20a:	4798      	blx	r3
 800e20c:	60f8      	str	r0, [r7, #12]
      break;
 800e20e:	e112      	b.n	800e436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	7c1b      	ldrb	r3, [r3, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10d      	bne.n	800e234 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e220:	f107 0208 	add.w	r2, r7, #8
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
 800e228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3301      	adds	r3, #1
 800e22e:	2202      	movs	r2, #2
 800e230:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e232:	e100      	b.n	800e436 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23c:	f107 0208 	add.w	r2, r7, #8
 800e240:	4610      	mov	r0, r2
 800e242:	4798      	blx	r3
 800e244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	2202      	movs	r2, #2
 800e24c:	701a      	strb	r2, [r3, #0]
      break;
 800e24e:	e0f2      	b.n	800e436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	885b      	ldrh	r3, [r3, #2]
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b05      	cmp	r3, #5
 800e258:	f200 80ac 	bhi.w	800e3b4 <USBD_GetDescriptor+0x258>
 800e25c:	a201      	add	r2, pc, #4	; (adr r2, 800e264 <USBD_GetDescriptor+0x108>)
 800e25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e262:	bf00      	nop
 800e264:	0800e27d 	.word	0x0800e27d
 800e268:	0800e2b1 	.word	0x0800e2b1
 800e26c:	0800e2e5 	.word	0x0800e2e5
 800e270:	0800e319 	.word	0x0800e319
 800e274:	0800e34d 	.word	0x0800e34d
 800e278:	0800e381 	.word	0x0800e381
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	7c12      	ldrb	r2, [r2, #16]
 800e294:	f107 0108 	add.w	r1, r7, #8
 800e298:	4610      	mov	r0, r2
 800e29a:	4798      	blx	r3
 800e29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e29e:	e091      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2a0:	6839      	ldr	r1, [r7, #0]
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 fa95 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e2a8:	7afb      	ldrb	r3, [r7, #11]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ae:	e089      	b.n	800e3c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00b      	beq.n	800e2d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	7c12      	ldrb	r2, [r2, #16]
 800e2c8:	f107 0108 	add.w	r1, r7, #8
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
 800e2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2d2:	e077      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fa7b 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e2dc:	7afb      	ldrb	r3, [r7, #11]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2e2:	e06f      	b.n	800e3c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00b      	beq.n	800e308 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	7c12      	ldrb	r2, [r2, #16]
 800e2fc:	f107 0108 	add.w	r1, r7, #8
 800e300:	4610      	mov	r0, r2
 800e302:	4798      	blx	r3
 800e304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e306:	e05d      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa61 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e310:	7afb      	ldrb	r3, [r7, #11]
 800e312:	3301      	adds	r3, #1
 800e314:	72fb      	strb	r3, [r7, #11]
          break;
 800e316:	e055      	b.n	800e3c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	7c12      	ldrb	r2, [r2, #16]
 800e330:	f107 0108 	add.w	r1, r7, #8
 800e334:	4610      	mov	r0, r2
 800e336:	4798      	blx	r3
 800e338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e33a:	e043      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fa47 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e344:	7afb      	ldrb	r3, [r7, #11]
 800e346:	3301      	adds	r3, #1
 800e348:	72fb      	strb	r3, [r7, #11]
          break;
 800e34a:	e03b      	b.n	800e3c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00b      	beq.n	800e370 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e35e:	695b      	ldr	r3, [r3, #20]
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	7c12      	ldrb	r2, [r2, #16]
 800e364:	f107 0108 	add.w	r1, r7, #8
 800e368:	4610      	mov	r0, r2
 800e36a:	4798      	blx	r3
 800e36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e36e:	e029      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fa2d 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e378:	7afb      	ldrb	r3, [r7, #11]
 800e37a:	3301      	adds	r3, #1
 800e37c:	72fb      	strb	r3, [r7, #11]
          break;
 800e37e:	e021      	b.n	800e3c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e392:	699b      	ldr	r3, [r3, #24]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	7c12      	ldrb	r2, [r2, #16]
 800e398:	f107 0108 	add.w	r1, r7, #8
 800e39c:	4610      	mov	r0, r2
 800e39e:	4798      	blx	r3
 800e3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3a2:	e00f      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e3a4:	6839      	ldr	r1, [r7, #0]
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fa13 	bl	800e7d2 <USBD_CtlError>
            err++;
 800e3ac:	7afb      	ldrb	r3, [r7, #11]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e3b2:	e007      	b.n	800e3c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fa0b 	bl	800e7d2 <USBD_CtlError>
          err++;
 800e3bc:	7afb      	ldrb	r3, [r7, #11]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e3c2:	e038      	b.n	800e436 <USBD_GetDescriptor+0x2da>
 800e3c4:	e037      	b.n	800e436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7c1b      	ldrb	r3, [r3, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d109      	bne.n	800e3e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d6:	f107 0208 	add.w	r2, r7, #8
 800e3da:	4610      	mov	r0, r2
 800e3dc:	4798      	blx	r3
 800e3de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3e0:	e029      	b.n	800e436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f9f4 	bl	800e7d2 <USBD_CtlError>
        err++;
 800e3ea:	7afb      	ldrb	r3, [r7, #11]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e3f0:	e021      	b.n	800e436 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7c1b      	ldrb	r3, [r3, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10d      	bne.n	800e416 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e402:	f107 0208 	add.w	r2, r7, #8
 800e406:	4610      	mov	r0, r2
 800e408:	4798      	blx	r3
 800e40a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	3301      	adds	r3, #1
 800e410:	2207      	movs	r2, #7
 800e412:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e414:	e00f      	b.n	800e436 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f9da 	bl	800e7d2 <USBD_CtlError>
        err++;
 800e41e:	7afb      	ldrb	r3, [r7, #11]
 800e420:	3301      	adds	r3, #1
 800e422:	72fb      	strb	r3, [r7, #11]
      break;
 800e424:	e007      	b.n	800e436 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f9d2 	bl	800e7d2 <USBD_CtlError>
      err++;
 800e42e:	7afb      	ldrb	r3, [r7, #11]
 800e430:	3301      	adds	r3, #1
 800e432:	72fb      	strb	r3, [r7, #11]
      break;
 800e434:	bf00      	nop
  }

  if (err != 0U)
 800e436:	7afb      	ldrb	r3, [r7, #11]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d11c      	bne.n	800e476 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e43c:	893b      	ldrh	r3, [r7, #8]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d011      	beq.n	800e466 <USBD_GetDescriptor+0x30a>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	88db      	ldrh	r3, [r3, #6]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00d      	beq.n	800e466 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	88da      	ldrh	r2, [r3, #6]
 800e44e:	893b      	ldrh	r3, [r7, #8]
 800e450:	4293      	cmp	r3, r2
 800e452:	bf28      	it	cs
 800e454:	4613      	movcs	r3, r2
 800e456:	b29b      	uxth	r3, r3
 800e458:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e45a:	893b      	ldrh	r3, [r7, #8]
 800e45c:	461a      	mov	r2, r3
 800e45e:	68f9      	ldr	r1, [r7, #12]
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fa21 	bl	800e8a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	88db      	ldrh	r3, [r3, #6]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d104      	bne.n	800e478 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa78 	bl	800e964 <USBD_CtlSendStatus>
 800e474:	e000      	b.n	800e478 <USBD_GetDescriptor+0x31c>
    return;
 800e476:	bf00      	nop
    }
  }
}
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop

0800e480 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	889b      	ldrh	r3, [r3, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d130      	bne.n	800e4f4 <USBD_SetAddress+0x74>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	88db      	ldrh	r3, [r3, #6]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d12c      	bne.n	800e4f4 <USBD_SetAddress+0x74>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	885b      	ldrh	r3, [r3, #2]
 800e49e:	2b7f      	cmp	r3, #127	; 0x7f
 800e4a0:	d828      	bhi.n	800e4f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	885b      	ldrh	r3, [r3, #2]
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d104      	bne.n	800e4c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f989 	bl	800e7d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4c0:	e01c      	b.n	800e4fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7bfa      	ldrb	r2, [r7, #15]
 800e4c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4ca:	7bfb      	ldrb	r3, [r7, #15]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f004 f884 	bl	80125dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa45 	bl	800e964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4da:	7bfb      	ldrb	r3, [r7, #15]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d004      	beq.n	800e4ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e8:	e008      	b.n	800e4fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f2:	e003      	b.n	800e4fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f96b 	bl	800e7d2 <USBD_CtlError>
  }
}
 800e4fc:	bf00      	nop
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	885b      	ldrh	r3, [r3, #2]
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4b41      	ldr	r3, [pc, #260]	; (800e61c <USBD_SetConfig+0x118>)
 800e516:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e518:	4b40      	ldr	r3, [pc, #256]	; (800e61c <USBD_SetConfig+0x118>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d904      	bls.n	800e52a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f955 	bl	800e7d2 <USBD_CtlError>
 800e528:	e075      	b.n	800e616 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e530:	2b02      	cmp	r3, #2
 800e532:	d002      	beq.n	800e53a <USBD_SetConfig+0x36>
 800e534:	2b03      	cmp	r3, #3
 800e536:	d023      	beq.n	800e580 <USBD_SetConfig+0x7c>
 800e538:	e062      	b.n	800e600 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e53a:	4b38      	ldr	r3, [pc, #224]	; (800e61c <USBD_SetConfig+0x118>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d01a      	beq.n	800e578 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e542:	4b36      	ldr	r3, [pc, #216]	; (800e61c <USBD_SetConfig+0x118>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2203      	movs	r2, #3
 800e550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e554:	4b31      	ldr	r3, [pc, #196]	; (800e61c <USBD_SetConfig+0x118>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7ff f98b 	bl	800d876 <USBD_SetClassConfig>
 800e560:	4603      	mov	r3, r0
 800e562:	2b02      	cmp	r3, #2
 800e564:	d104      	bne.n	800e570 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f932 	bl	800e7d2 <USBD_CtlError>
            return;
 800e56e:	e052      	b.n	800e616 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f9f7 	bl	800e964 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e576:	e04e      	b.n	800e616 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f9f3 	bl	800e964 <USBD_CtlSendStatus>
        break;
 800e57e:	e04a      	b.n	800e616 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e580:	4b26      	ldr	r3, [pc, #152]	; (800e61c <USBD_SetConfig+0x118>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d112      	bne.n	800e5ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2202      	movs	r2, #2
 800e58c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e590:	4b22      	ldr	r3, [pc, #136]	; (800e61c <USBD_SetConfig+0x118>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e59a:	4b20      	ldr	r3, [pc, #128]	; (800e61c <USBD_SetConfig+0x118>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff f987 	bl	800d8b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f9dc 	bl	800e964 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e5ac:	e033      	b.n	800e616 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e5ae:	4b1b      	ldr	r3, [pc, #108]	; (800e61c <USBD_SetConfig+0x118>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d01d      	beq.n	800e5f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff f975 	bl	800d8b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e5ca:	4b14      	ldr	r3, [pc, #80]	; (800e61c <USBD_SetConfig+0x118>)
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e5d4:	4b11      	ldr	r3, [pc, #68]	; (800e61c <USBD_SetConfig+0x118>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7ff f94b 	bl	800d876 <USBD_SetClassConfig>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	d104      	bne.n	800e5f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e5e6:	6839      	ldr	r1, [r7, #0]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f8f2 	bl	800e7d2 <USBD_CtlError>
            return;
 800e5ee:	e012      	b.n	800e616 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 f9b7 	bl	800e964 <USBD_CtlSendStatus>
        break;
 800e5f6:	e00e      	b.n	800e616 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f9b3 	bl	800e964 <USBD_CtlSendStatus>
        break;
 800e5fe:	e00a      	b.n	800e616 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f8e5 	bl	800e7d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e608:	4b04      	ldr	r3, [pc, #16]	; (800e61c <USBD_SetConfig+0x118>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff f950 	bl	800d8b4 <USBD_ClrClassConfig>
        break;
 800e614:	bf00      	nop
    }
  }
}
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	200004e0 	.word	0x200004e0

0800e620 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	88db      	ldrh	r3, [r3, #6]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d004      	beq.n	800e63c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 f8cc 	bl	800e7d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e63a:	e021      	b.n	800e680 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e642:	2b01      	cmp	r3, #1
 800e644:	db17      	blt.n	800e676 <USBD_GetConfig+0x56>
 800e646:	2b02      	cmp	r3, #2
 800e648:	dd02      	ble.n	800e650 <USBD_GetConfig+0x30>
 800e64a:	2b03      	cmp	r3, #3
 800e64c:	d00b      	beq.n	800e666 <USBD_GetConfig+0x46>
 800e64e:	e012      	b.n	800e676 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3308      	adds	r3, #8
 800e65a:	2201      	movs	r2, #1
 800e65c:	4619      	mov	r1, r3
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 f922 	bl	800e8a8 <USBD_CtlSendData>
        break;
 800e664:	e00c      	b.n	800e680 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3304      	adds	r3, #4
 800e66a:	2201      	movs	r2, #1
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f91a 	bl	800e8a8 <USBD_CtlSendData>
        break;
 800e674:	e004      	b.n	800e680 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f8aa 	bl	800e7d2 <USBD_CtlError>
        break;
 800e67e:	bf00      	nop
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e698:	3b01      	subs	r3, #1
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d81e      	bhi.n	800e6dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	88db      	ldrh	r3, [r3, #6]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d004      	beq.n	800e6b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f892 	bl	800e7d2 <USBD_CtlError>
        break;
 800e6ae:	e01a      	b.n	800e6e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	f043 0202 	orr.w	r2, r3, #2
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	330c      	adds	r3, #12
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f8e7 	bl	800e8a8 <USBD_CtlSendData>
      break;
 800e6da:	e004      	b.n	800e6e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e6dc:	6839      	ldr	r1, [r7, #0]
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f877 	bl	800e7d2 <USBD_CtlError>
      break;
 800e6e4:	bf00      	nop
  }
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	885b      	ldrh	r3, [r3, #2]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d106      	bne.n	800e70e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2201      	movs	r2, #1
 800e704:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f92b 	bl	800e964 <USBD_CtlSendStatus>
  }
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e726:	3b01      	subs	r3, #1
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d80b      	bhi.n	800e744 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	885b      	ldrh	r3, [r3, #2]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d10c      	bne.n	800e74e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2200      	movs	r2, #0
 800e738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f911 	bl	800e964 <USBD_CtlSendStatus>
      }
      break;
 800e742:	e004      	b.n	800e74e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f843 	bl	800e7d2 <USBD_CtlError>
      break;
 800e74c:	e000      	b.n	800e750 <USBD_ClrFeature+0x3a>
      break;
 800e74e:	bf00      	nop
  }
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781a      	ldrb	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	785a      	ldrb	r2, [r3, #1]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	3302      	adds	r3, #2
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	b29a      	uxth	r2, r3
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	3303      	adds	r3, #3
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	b29b      	uxth	r3, r3
 800e782:	021b      	lsls	r3, r3, #8
 800e784:	b29b      	uxth	r3, r3
 800e786:	4413      	add	r3, r2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	3304      	adds	r3, #4
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	b29a      	uxth	r2, r3
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	3305      	adds	r3, #5
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	021b      	lsls	r3, r3, #8
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	4413      	add	r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	3306      	adds	r3, #6
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	3307      	adds	r3, #7
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	021b      	lsls	r3, r3, #8
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	4413      	add	r3, r2
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	80da      	strh	r2, [r3, #6]

}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b082      	sub	sp, #8
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e7dc:	2180      	movs	r1, #128	; 0x80
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f003 fe64 	bl	80124ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f003 fe60 	bl	80124ac <USBD_LL_StallEP>
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e800:	2300      	movs	r3, #0
 800e802:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d032      	beq.n	800e870 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f000 f834 	bl	800e878 <USBD_GetLen>
 800e810:	4603      	mov	r3, r0
 800e812:	3301      	adds	r3, #1
 800e814:	b29b      	uxth	r3, r3
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	b29a      	uxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	75fa      	strb	r2, [r7, #23]
 800e824:	461a      	mov	r2, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	4413      	add	r3, r2
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	7812      	ldrb	r2, [r2, #0]
 800e82e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	75fa      	strb	r2, [r7, #23]
 800e836:	461a      	mov	r2, r3
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4413      	add	r3, r2
 800e83c:	2203      	movs	r2, #3
 800e83e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e840:	e012      	b.n	800e868 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	60fa      	str	r2, [r7, #12]
 800e848:	7dfa      	ldrb	r2, [r7, #23]
 800e84a:	1c51      	adds	r1, r2, #1
 800e84c:	75f9      	strb	r1, [r7, #23]
 800e84e:	4611      	mov	r1, r2
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	440a      	add	r2, r1
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e858:	7dfb      	ldrb	r3, [r7, #23]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	75fa      	strb	r2, [r7, #23]
 800e85e:	461a      	mov	r2, r3
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	4413      	add	r3, r2
 800e864:	2200      	movs	r2, #0
 800e866:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1e8      	bne.n	800e842 <USBD_GetString+0x4e>
    }
  }
}
 800e870:	bf00      	nop
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e880:	2300      	movs	r3, #0
 800e882:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e884:	e005      	b.n	800e892 <USBD_GetLen+0x1a>
  {
    len++;
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	3301      	adds	r3, #1
 800e88a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3301      	adds	r3, #1
 800e890:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1f5      	bne.n	800e886 <USBD_GetLen+0xe>
  }

  return len;
 800e89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2202      	movs	r2, #2
 800e8ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e8be:	88fa      	ldrh	r2, [r7, #6]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e8c4:	88fa      	ldrh	r2, [r7, #6]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8ca:	88fb      	ldrh	r3, [r7, #6]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f003 feb9 	bl	8012648 <USBD_LL_Transmit>

  return USBD_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8ee:	88fb      	ldrh	r3, [r7, #6]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f003 fea7 	bl	8012648 <USBD_LL_Transmit>

  return USBD_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	4613      	mov	r3, r2
 800e910:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2203      	movs	r2, #3
 800e916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e91a:	88fa      	ldrh	r2, [r7, #6]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e922:	88fa      	ldrh	r2, [r7, #6]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e92a:	88fb      	ldrh	r3, [r7, #6]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	2100      	movs	r1, #0
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f003 fec3 	bl	80126bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e94e:	88fb      	ldrh	r3, [r7, #6]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	2100      	movs	r1, #0
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f003 feb1 	bl	80126bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2204      	movs	r2, #4
 800e970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e974:	2300      	movs	r3, #0
 800e976:	2200      	movs	r2, #0
 800e978:	2100      	movs	r1, #0
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f003 fe64 	bl	8012648 <USBD_LL_Transmit>

  return USBD_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2205      	movs	r2, #5
 800e996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e99a:	2300      	movs	r3, #0
 800e99c:	2200      	movs	r2, #0
 800e99e:	2100      	movs	r1, #0
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f003 fe8b 	bl	80126bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e9b0:	b480      	push	{r7}
 800e9b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e9b4:	bf00      	nop
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9c6:	f3ef 8305 	mrs	r3, IPSR
 800e9ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800e9cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10f      	bne.n	800e9f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e9d6:	607b      	str	r3, [r7, #4]
  return(result);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d105      	bne.n	800e9ea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9de:	f3ef 8311 	mrs	r3, BASEPRI
 800e9e2:	603b      	str	r3, [r7, #0]
  return(result);
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d007      	beq.n	800e9fa <osKernelInitialize+0x3a>
 800e9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ea24 <osKernelInitialize+0x64>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d103      	bne.n	800e9fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e9f2:	f06f 0305 	mvn.w	r3, #5
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	e00c      	b.n	800ea14 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <osKernelInitialize+0x64>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <osKernelInitialize+0x64>)
 800ea04:	2201      	movs	r2, #1
 800ea06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	e002      	b.n	800ea14 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ea0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ea14:	68fb      	ldr	r3, [r7, #12]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3714      	adds	r7, #20
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	200004e4 	.word	0x200004e4

0800ea28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea2e:	f3ef 8305 	mrs	r3, IPSR
 800ea32:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10f      	bne.n	800ea5a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ea3e:	607b      	str	r3, [r7, #4]
  return(result);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d105      	bne.n	800ea52 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea46:	f3ef 8311 	mrs	r3, BASEPRI
 800ea4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d007      	beq.n	800ea62 <osKernelStart+0x3a>
 800ea52:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <osKernelStart+0x68>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d103      	bne.n	800ea62 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ea5a:	f06f 0305 	mvn.w	r3, #5
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	e010      	b.n	800ea84 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea62:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <osKernelStart+0x68>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d109      	bne.n	800ea7e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea6a:	f7ff ffa1 	bl	800e9b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea6e:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <osKernelStart+0x68>)
 800ea70:	2202      	movs	r2, #2
 800ea72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea74:	f001 fb78 	bl	8010168 <vTaskStartScheduler>
      stat = osOK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	60fb      	str	r3, [r7, #12]
 800ea7c:	e002      	b.n	800ea84 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ea7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ea84:	68fb      	ldr	r3, [r7, #12]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	200004e4 	.word	0x200004e4

0800ea94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b090      	sub	sp, #64	; 0x40
 800ea98:	af04      	add	r7, sp, #16
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaa4:	f3ef 8305 	mrs	r3, IPSR
 800eaa8:	61fb      	str	r3, [r7, #28]
  return(result);
 800eaaa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f040 808f 	bne.w	800ebd0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eab2:	f3ef 8310 	mrs	r3, PRIMASK
 800eab6:	61bb      	str	r3, [r7, #24]
  return(result);
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eabe:	f3ef 8311 	mrs	r3, BASEPRI
 800eac2:	617b      	str	r3, [r7, #20]
  return(result);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <osThreadNew+0x3e>
 800eaca:	4b44      	ldr	r3, [pc, #272]	; (800ebdc <osThreadNew+0x148>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d07e      	beq.n	800ebd0 <osThreadNew+0x13c>
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d07b      	beq.n	800ebd0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ead8:	2380      	movs	r3, #128	; 0x80
 800eada:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800eadc:	2318      	movs	r3, #24
 800eade:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800eae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eae8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d045      	beq.n	800eb7c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <osThreadNew+0x6a>
        name = attr->name;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d008      	beq.n	800eb24 <osThreadNew+0x90>
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	2b38      	cmp	r3, #56	; 0x38
 800eb16:	d805      	bhi.n	800eb24 <osThreadNew+0x90>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	f003 0301 	and.w	r3, r3, #1
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <osThreadNew+0x94>
        return (NULL);
 800eb24:	2300      	movs	r3, #0
 800eb26:	e054      	b.n	800ebd2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d003      	beq.n	800eb38 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	089b      	lsrs	r3, r3, #2
 800eb36:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00e      	beq.n	800eb5e <osThreadNew+0xca>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	2b5b      	cmp	r3, #91	; 0x5b
 800eb46:	d90a      	bls.n	800eb5e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d006      	beq.n	800eb5e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	695b      	ldr	r3, [r3, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <osThreadNew+0xca>
        mem = 1;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	623b      	str	r3, [r7, #32]
 800eb5c:	e010      	b.n	800eb80 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10c      	bne.n	800eb80 <osThreadNew+0xec>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d108      	bne.n	800eb80 <osThreadNew+0xec>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d104      	bne.n	800eb80 <osThreadNew+0xec>
          mem = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	623b      	str	r3, [r7, #32]
 800eb7a:	e001      	b.n	800eb80 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d110      	bne.n	800eba8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb8e:	9202      	str	r2, [sp, #8]
 800eb90:	9301      	str	r3, [sp, #4]
 800eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f001 f825 	bl	800fbec <xTaskCreateStatic>
 800eba2:	4603      	mov	r3, r0
 800eba4:	613b      	str	r3, [r7, #16]
 800eba6:	e013      	b.n	800ebd0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d110      	bne.n	800ebd0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	f107 0310 	add.w	r3, r7, #16
 800ebb6:	9301      	str	r3, [sp, #4]
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f001 f86d 	bl	800fca0 <xTaskCreate>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d001      	beq.n	800ebd0 <osThreadNew+0x13c>
          hTask = NULL;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ebd0:	693b      	ldr	r3, [r7, #16]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3730      	adds	r7, #48	; 0x30
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	200004e4 	.word	0x200004e4

0800ebe0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebe8:	f3ef 8305 	mrs	r3, IPSR
 800ebec:	613b      	str	r3, [r7, #16]
  return(result);
 800ebee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10f      	bne.n	800ec14 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebf4:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec00:	f3ef 8311 	mrs	r3, BASEPRI
 800ec04:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d007      	beq.n	800ec1c <osDelay+0x3c>
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <osDelay+0x58>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d103      	bne.n	800ec1c <osDelay+0x3c>
    stat = osErrorISR;
 800ec14:	f06f 0305 	mvn.w	r3, #5
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	e007      	b.n	800ec2c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d002      	beq.n	800ec2c <osDelay+0x4c>
      vTaskDelay(ticks);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f001 fa6a 	bl	8010100 <vTaskDelay>
    }
  }

  return (stat);
 800ec2c:	697b      	ldr	r3, [r7, #20]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3718      	adds	r7, #24
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	200004e4 	.word	0x200004e4

0800ec3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4a07      	ldr	r2, [pc, #28]	; (800ec68 <vApplicationGetIdleTaskMemory+0x2c>)
 800ec4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	4a06      	ldr	r2, [pc, #24]	; (800ec6c <vApplicationGetIdleTaskMemory+0x30>)
 800ec52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2280      	movs	r2, #128	; 0x80
 800ec58:	601a      	str	r2, [r3, #0]
}
 800ec5a:	bf00      	nop
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	200004e8 	.word	0x200004e8
 800ec6c:	20000544 	.word	0x20000544

0800ec70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4a07      	ldr	r2, [pc, #28]	; (800ec9c <vApplicationGetTimerTaskMemory+0x2c>)
 800ec80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	4a06      	ldr	r2, [pc, #24]	; (800eca0 <vApplicationGetTimerTaskMemory+0x30>)
 800ec86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec8e:	601a      	str	r2, [r3, #0]
}
 800ec90:	bf00      	nop
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20000744 	.word	0x20000744
 800eca0:	200007a0 	.word	0x200007a0

0800eca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f103 0208 	add.w	r2, r3, #8
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f103 0208 	add.w	r2, r3, #8
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f103 0208 	add.w	r2, r3, #8
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ecf2:	bf00      	nop
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	601a      	str	r2, [r3, #0]
}
 800ed3a:	bf00      	nop
 800ed3c:	3714      	adds	r7, #20
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed46:	b480      	push	{r7}
 800ed48:	b085      	sub	sp, #20
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed5c:	d103      	bne.n	800ed66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	60fb      	str	r3, [r7, #12]
 800ed64:	e00c      	b.n	800ed80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	3308      	adds	r3, #8
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	e002      	b.n	800ed74 <vListInsert+0x2e>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d2f6      	bcs.n	800ed6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	1c5a      	adds	r2, r3, #1
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	601a      	str	r2, [r3, #0]
}
 800edac:	bf00      	nop
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	6892      	ldr	r2, [r2, #8]
 800edce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	6852      	ldr	r2, [r2, #4]
 800edd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d103      	bne.n	800edec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	1e5a      	subs	r2, r3, #1
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d109      	bne.n	800ee34 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60bb      	str	r3, [r7, #8]
 800ee32:	e7fe      	b.n	800ee32 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ee34:	f002 fc12 	bl	801165c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee40:	68f9      	ldr	r1, [r7, #12]
 800ee42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee44:	fb01 f303 	mul.w	r3, r1, r3
 800ee48:	441a      	add	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee64:	3b01      	subs	r3, #1
 800ee66:	68f9      	ldr	r1, [r7, #12]
 800ee68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee6a:	fb01 f303 	mul.w	r3, r1, r3
 800ee6e:	441a      	add	r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	22ff      	movs	r2, #255	; 0xff
 800ee78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	22ff      	movs	r2, #255	; 0xff
 800ee80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d114      	bne.n	800eeb4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d01a      	beq.n	800eec8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	3310      	adds	r3, #16
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 fbe6 	bl	8010668 <xTaskRemoveFromEventList>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d012      	beq.n	800eec8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eea2:	4b0d      	ldr	r3, [pc, #52]	; (800eed8 <xQueueGenericReset+0xcc>)
 800eea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	e009      	b.n	800eec8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	3310      	adds	r3, #16
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fef3 	bl	800eca4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3324      	adds	r3, #36	; 0x24
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff feee 	bl	800eca4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eec8:	f002 fbf6 	bl	80116b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eecc:	2301      	movs	r3, #1
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	e000ed04 	.word	0xe000ed04

0800eedc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08e      	sub	sp, #56	; 0x38
 800eee0:	af02      	add	r7, sp, #8
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d109      	bne.n	800ef04 <xQueueGenericCreateStatic+0x28>
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef02:	e7fe      	b.n	800ef02 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d109      	bne.n	800ef1e <xQueueGenericCreateStatic+0x42>
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef1c:	e7fe      	b.n	800ef1c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <xQueueGenericCreateStatic+0x4e>
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <xQueueGenericCreateStatic+0x52>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	e000      	b.n	800ef30 <xQueueGenericCreateStatic+0x54>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d109      	bne.n	800ef48 <xQueueGenericCreateStatic+0x6c>
 800ef34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	623b      	str	r3, [r7, #32]
 800ef46:	e7fe      	b.n	800ef46 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d102      	bne.n	800ef54 <xQueueGenericCreateStatic+0x78>
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <xQueueGenericCreateStatic+0x7c>
 800ef54:	2301      	movs	r3, #1
 800ef56:	e000      	b.n	800ef5a <xQueueGenericCreateStatic+0x7e>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d109      	bne.n	800ef72 <xQueueGenericCreateStatic+0x96>
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	e7fe      	b.n	800ef70 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef72:	2350      	movs	r3, #80	; 0x50
 800ef74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b50      	cmp	r3, #80	; 0x50
 800ef7a:	d009      	beq.n	800ef90 <xQueueGenericCreateStatic+0xb4>
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	f383 8811 	msr	BASEPRI, r3
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	f3bf 8f4f 	dsb	sy
 800ef8c:	61bb      	str	r3, [r7, #24]
 800ef8e:	e7fe      	b.n	800ef8e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00d      	beq.n	800efb8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800efa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	4613      	mov	r3, r2
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	68b9      	ldr	r1, [r7, #8]
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f000 f844 	bl	800f040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800efba:	4618      	mov	r0, r3
 800efbc:	3730      	adds	r7, #48	; 0x30
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b08a      	sub	sp, #40	; 0x28
 800efc6:	af02      	add	r7, sp, #8
 800efc8:	60f8      	str	r0, [r7, #12]
 800efca:	60b9      	str	r1, [r7, #8]
 800efcc:	4613      	mov	r3, r2
 800efce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d109      	bne.n	800efea <xQueueGenericCreate+0x28>
 800efd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	613b      	str	r3, [r7, #16]
 800efe8:	e7fe      	b.n	800efe8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d102      	bne.n	800eff6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	61fb      	str	r3, [r7, #28]
 800eff4:	e004      	b.n	800f000 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	fb02 f303 	mul.w	r3, r2, r3
 800effe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	3350      	adds	r3, #80	; 0x50
 800f004:	4618      	mov	r0, r3
 800f006:	f002 fc43 	bl	8011890 <pvPortMalloc>
 800f00a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d011      	beq.n	800f036 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	3350      	adds	r3, #80	; 0x50
 800f01a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	2200      	movs	r2, #0
 800f020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f024:	79fa      	ldrb	r2, [r7, #7]
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	4613      	mov	r3, r2
 800f02c:	697a      	ldr	r2, [r7, #20]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f000 f805 	bl	800f040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f036:	69bb      	ldr	r3, [r7, #24]
	}
 800f038:	4618      	mov	r0, r3
 800f03a:	3720      	adds	r7, #32
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d103      	bne.n	800f05c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	69ba      	ldr	r2, [r7, #24]
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	e002      	b.n	800f062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f06e:	2101      	movs	r1, #1
 800f070:	69b8      	ldr	r0, [r7, #24]
 800f072:	f7ff fecb 	bl	800ee0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	78fa      	ldrb	r2, [r7, #3]
 800f07a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00e      	beq.n	800f0b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f81d 	bl	800f0ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f0b2:	bf00      	nop
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b086      	sub	sp, #24
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	617b      	str	r3, [r7, #20]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	6939      	ldr	r1, [r7, #16]
 800f0d2:	6978      	ldr	r0, [r7, #20]
 800f0d4:	f7ff ff75 	bl	800efc2 <xQueueGenericCreate>
 800f0d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f7ff ffd3 	bl	800f086 <prvInitialiseMutex>

		return xNewQueue;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
	}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b08e      	sub	sp, #56	; 0x38
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <xQueueGenericSend+0x30>
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	62bb      	str	r3, [r7, #40]	; 0x28
 800f11a:	e7fe      	b.n	800f11a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d103      	bne.n	800f12a <xQueueGenericSend+0x3e>
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <xQueueGenericSend+0x42>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <xQueueGenericSend+0x44>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d109      	bne.n	800f148 <xQueueGenericSend+0x5c>
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	627b      	str	r3, [r7, #36]	; 0x24
 800f146:	e7fe      	b.n	800f146 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d103      	bne.n	800f156 <xQueueGenericSend+0x6a>
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f152:	2b01      	cmp	r3, #1
 800f154:	d101      	bne.n	800f15a <xQueueGenericSend+0x6e>
 800f156:	2301      	movs	r3, #1
 800f158:	e000      	b.n	800f15c <xQueueGenericSend+0x70>
 800f15a:	2300      	movs	r3, #0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d109      	bne.n	800f174 <xQueueGenericSend+0x88>
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	623b      	str	r3, [r7, #32]
 800f172:	e7fe      	b.n	800f172 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f174:	f001 fc2e 	bl	80109d4 <xTaskGetSchedulerState>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d102      	bne.n	800f184 <xQueueGenericSend+0x98>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d101      	bne.n	800f188 <xQueueGenericSend+0x9c>
 800f184:	2301      	movs	r3, #1
 800f186:	e000      	b.n	800f18a <xQueueGenericSend+0x9e>
 800f188:	2300      	movs	r3, #0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d109      	bne.n	800f1a2 <xQueueGenericSend+0xb6>
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	e7fe      	b.n	800f1a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1a2:	f002 fa5b 	bl	801165c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d302      	bcc.n	800f1b8 <xQueueGenericSend+0xcc>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	d129      	bne.n	800f20c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1be:	f000 fba9 	bl	800f914 <prvCopyDataToQueue>
 800f1c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d010      	beq.n	800f1ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ce:	3324      	adds	r3, #36	; 0x24
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f001 fa49 	bl	8010668 <xTaskRemoveFromEventList>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d013      	beq.n	800f204 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f1dc:	4b3f      	ldr	r3, [pc, #252]	; (800f2dc <xQueueGenericSend+0x1f0>)
 800f1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	f3bf 8f6f 	isb	sy
 800f1ec:	e00a      	b.n	800f204 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f1f4:	4b39      	ldr	r3, [pc, #228]	; (800f2dc <xQueueGenericSend+0x1f0>)
 800f1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fa:	601a      	str	r2, [r3, #0]
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f204:	f002 fa58 	bl	80116b8 <vPortExitCritical>
				return pdPASS;
 800f208:	2301      	movs	r3, #1
 800f20a:	e063      	b.n	800f2d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d103      	bne.n	800f21a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f212:	f002 fa51 	bl	80116b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f216:	2300      	movs	r3, #0
 800f218:	e05c      	b.n	800f2d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d106      	bne.n	800f22e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f220:	f107 0314 	add.w	r3, r7, #20
 800f224:	4618      	mov	r0, r3
 800f226:	f001 fa81 	bl	801072c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f22a:	2301      	movs	r3, #1
 800f22c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f22e:	f002 fa43 	bl	80116b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f232:	f000 fffd 	bl	8010230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f236:	f002 fa11 	bl	801165c <vPortEnterCritical>
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f240:	b25b      	sxtb	r3, r3
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f246:	d103      	bne.n	800f250 <xQueueGenericSend+0x164>
 800f248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f256:	b25b      	sxtb	r3, r3
 800f258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f25c:	d103      	bne.n	800f266 <xQueueGenericSend+0x17a>
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	2200      	movs	r2, #0
 800f262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f266:	f002 fa27 	bl	80116b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f26a:	1d3a      	adds	r2, r7, #4
 800f26c:	f107 0314 	add.w	r3, r7, #20
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f001 fa70 	bl	8010758 <xTaskCheckForTimeOut>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d124      	bne.n	800f2c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f280:	f000 fc40 	bl	800fb04 <prvIsQueueFull>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d018      	beq.n	800f2bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	3310      	adds	r3, #16
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f001 f99a 	bl	80105cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f29a:	f000 fbcb 	bl	800fa34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f29e:	f000 ffd5 	bl	801024c <xTaskResumeAll>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f47f af7c 	bne.w	800f1a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f2aa:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <xQueueGenericSend+0x1f0>)
 800f2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	e772      	b.n	800f1a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2be:	f000 fbb9 	bl	800fa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2c2:	f000 ffc3 	bl	801024c <xTaskResumeAll>
 800f2c6:	e76c      	b.n	800f1a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2ca:	f000 fbb3 	bl	800fa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ce:	f000 ffbd 	bl	801024c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3738      	adds	r7, #56	; 0x38
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	e000ed04 	.word	0xe000ed04

0800f2e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b08e      	sub	sp, #56	; 0x38
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
 800f2ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d109      	bne.n	800f30c <xQueueGenericSendFromISR+0x2c>
 800f2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	627b      	str	r3, [r7, #36]	; 0x24
 800f30a:	e7fe      	b.n	800f30a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d103      	bne.n	800f31a <xQueueGenericSendFromISR+0x3a>
 800f312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <xQueueGenericSendFromISR+0x3e>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <xQueueGenericSendFromISR+0x40>
 800f31e:	2300      	movs	r3, #0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d109      	bne.n	800f338 <xQueueGenericSendFromISR+0x58>
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	623b      	str	r3, [r7, #32]
 800f336:	e7fe      	b.n	800f336 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	d103      	bne.n	800f346 <xQueueGenericSendFromISR+0x66>
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f342:	2b01      	cmp	r3, #1
 800f344:	d101      	bne.n	800f34a <xQueueGenericSendFromISR+0x6a>
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <xQueueGenericSendFromISR+0x6c>
 800f34a:	2300      	movs	r3, #0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d109      	bne.n	800f364 <xQueueGenericSendFromISR+0x84>
 800f350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	61fb      	str	r3, [r7, #28]
 800f362:	e7fe      	b.n	800f362 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f364:	f002 fa56 	bl	8011814 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f368:	f3ef 8211 	mrs	r2, BASEPRI
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	61ba      	str	r2, [r7, #24]
 800f37e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f380:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f382:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d302      	bcc.n	800f396 <xQueueGenericSendFromISR+0xb6>
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2b02      	cmp	r3, #2
 800f394:	d12c      	bne.n	800f3f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f39c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	68b9      	ldr	r1, [r7, #8]
 800f3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3a6:	f000 fab5 	bl	800f914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f3aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3b2:	d112      	bne.n	800f3da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d016      	beq.n	800f3ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3be:	3324      	adds	r3, #36	; 0x24
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f001 f951 	bl	8010668 <xTaskRemoveFromEventList>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00e      	beq.n	800f3ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00b      	beq.n	800f3ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	601a      	str	r2, [r3, #0]
 800f3d8:	e007      	b.n	800f3ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3de:	3301      	adds	r3, #1
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	b25a      	sxtb	r2, r3
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f3ee:	e001      	b.n	800f3f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f400:	4618      	mov	r0, r3
 800f402:	3738      	adds	r7, #56	; 0x38
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08e      	sub	sp, #56	; 0x38
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d109      	bne.n	800f430 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	623b      	str	r3, [r7, #32]
 800f42e:	e7fe      	b.n	800f42e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f434:	2b00      	cmp	r3, #0
 800f436:	d009      	beq.n	800f44c <xQueueGiveFromISR+0x44>
 800f438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	61fb      	str	r3, [r7, #28]
 800f44a:	e7fe      	b.n	800f44a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d103      	bne.n	800f45c <xQueueGiveFromISR+0x54>
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d101      	bne.n	800f460 <xQueueGiveFromISR+0x58>
 800f45c:	2301      	movs	r3, #1
 800f45e:	e000      	b.n	800f462 <xQueueGiveFromISR+0x5a>
 800f460:	2300      	movs	r3, #0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <xQueueGiveFromISR+0x72>
 800f466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	61bb      	str	r3, [r7, #24]
 800f478:	e7fe      	b.n	800f478 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f47a:	f002 f9cb 	bl	8011814 <vPortValidateInterruptPriority>
	__asm volatile
 800f47e:	f3ef 8211 	mrs	r2, BASEPRI
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	617a      	str	r2, [r7, #20]
 800f494:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f496:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d22b      	bcs.n	800f502 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4c4:	d112      	bne.n	800f4ec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d016      	beq.n	800f4fc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	3324      	adds	r3, #36	; 0x24
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f001 f8c8 	bl	8010668 <xTaskRemoveFromEventList>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00e      	beq.n	800f4fc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00b      	beq.n	800f4fc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	e007      	b.n	800f4fc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	b25a      	sxtb	r2, r3
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f500:	e001      	b.n	800f506 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f502:	2300      	movs	r3, #0
 800f504:	637b      	str	r3, [r7, #52]	; 0x34
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f512:	4618      	mov	r0, r3
 800f514:	3738      	adds	r7, #56	; 0x38
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
	...

0800f51c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08c      	sub	sp, #48	; 0x30
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f528:	2300      	movs	r3, #0
 800f52a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	2b00      	cmp	r3, #0
 800f534:	d109      	bne.n	800f54a <xQueueReceive+0x2e>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	623b      	str	r3, [r7, #32]
 800f548:	e7fe      	b.n	800f548 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d103      	bne.n	800f558 <xQueueReceive+0x3c>
 800f550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <xQueueReceive+0x40>
 800f558:	2301      	movs	r3, #1
 800f55a:	e000      	b.n	800f55e <xQueueReceive+0x42>
 800f55c:	2300      	movs	r3, #0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <xQueueReceive+0x5a>
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	61fb      	str	r3, [r7, #28]
 800f574:	e7fe      	b.n	800f574 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f576:	f001 fa2d 	bl	80109d4 <xTaskGetSchedulerState>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <xQueueReceive+0x6a>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <xQueueReceive+0x6e>
 800f586:	2301      	movs	r3, #1
 800f588:	e000      	b.n	800f58c <xQueueReceive+0x70>
 800f58a:	2300      	movs	r3, #0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d109      	bne.n	800f5a4 <xQueueReceive+0x88>
 800f590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	61bb      	str	r3, [r7, #24]
 800f5a2:	e7fe      	b.n	800f5a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5a4:	f002 f85a 	bl	801165c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d01f      	beq.n	800f5f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b8:	f000 fa16 	bl	800f9e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	1e5a      	subs	r2, r3, #1
 800f5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c6:	691b      	ldr	r3, [r3, #16]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00f      	beq.n	800f5ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	3310      	adds	r3, #16
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f001 f849 	bl	8010668 <xTaskRemoveFromEventList>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d007      	beq.n	800f5ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f5dc:	4b3c      	ldr	r3, [pc, #240]	; (800f6d0 <xQueueReceive+0x1b4>)
 800f5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f5ec:	f002 f864 	bl	80116b8 <vPortExitCritical>
				return pdPASS;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	e069      	b.n	800f6c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d103      	bne.n	800f602 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f5fa:	f002 f85d 	bl	80116b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f5fe:	2300      	movs	r3, #0
 800f600:	e062      	b.n	800f6c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f608:	f107 0310 	add.w	r3, r7, #16
 800f60c:	4618      	mov	r0, r3
 800f60e:	f001 f88d 	bl	801072c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f612:	2301      	movs	r3, #1
 800f614:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f616:	f002 f84f 	bl	80116b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f61a:	f000 fe09 	bl	8010230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f61e:	f002 f81d 	bl	801165c <vPortEnterCritical>
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f628:	b25b      	sxtb	r3, r3
 800f62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f62e:	d103      	bne.n	800f638 <xQueueReceive+0x11c>
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	2200      	movs	r2, #0
 800f634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f63e:	b25b      	sxtb	r3, r3
 800f640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f644:	d103      	bne.n	800f64e <xQueueReceive+0x132>
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f64e:	f002 f833 	bl	80116b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f652:	1d3a      	adds	r2, r7, #4
 800f654:	f107 0310 	add.w	r3, r7, #16
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f001 f87c 	bl	8010758 <xTaskCheckForTimeOut>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d123      	bne.n	800f6ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f668:	f000 fa36 	bl	800fad8 <prvIsQueueEmpty>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d017      	beq.n	800f6a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	3324      	adds	r3, #36	; 0x24
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 ffa6 	bl	80105cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f682:	f000 f9d7 	bl	800fa34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f686:	f000 fde1 	bl	801024c <xTaskResumeAll>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d189      	bne.n	800f5a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f690:	4b0f      	ldr	r3, [pc, #60]	; (800f6d0 <xQueueReceive+0x1b4>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	e780      	b.n	800f5a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6a4:	f000 f9c6 	bl	800fa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6a8:	f000 fdd0 	bl	801024c <xTaskResumeAll>
 800f6ac:	e77a      	b.n	800f5a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6b0:	f000 f9c0 	bl	800fa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6b4:	f000 fdca 	bl	801024c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6ba:	f000 fa0d 	bl	800fad8 <prvIsQueueEmpty>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f43f af6f 	beq.w	800f5a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f6c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3730      	adds	r7, #48	; 0x30
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	e000ed04 	.word	0xe000ed04

0800f6d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08e      	sub	sp, #56	; 0x38
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d109      	bne.n	800f704 <xQueueSemaphoreTake+0x30>
 800f6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	623b      	str	r3, [r7, #32]
 800f702:	e7fe      	b.n	800f702 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d009      	beq.n	800f720 <xQueueSemaphoreTake+0x4c>
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	61fb      	str	r3, [r7, #28]
 800f71e:	e7fe      	b.n	800f71e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f720:	f001 f958 	bl	80109d4 <xTaskGetSchedulerState>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d102      	bne.n	800f730 <xQueueSemaphoreTake+0x5c>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d101      	bne.n	800f734 <xQueueSemaphoreTake+0x60>
 800f730:	2301      	movs	r3, #1
 800f732:	e000      	b.n	800f736 <xQueueSemaphoreTake+0x62>
 800f734:	2300      	movs	r3, #0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d109      	bne.n	800f74e <xQueueSemaphoreTake+0x7a>
 800f73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	61bb      	str	r3, [r7, #24]
 800f74c:	e7fe      	b.n	800f74c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f74e:	f001 ff85 	bl	801165c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f756:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d024      	beq.n	800f7a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f760:	1e5a      	subs	r2, r3, #1
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d104      	bne.n	800f778 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f76e:	f001 faa3 	bl	8010cb8 <pvTaskIncrementMutexHeldCount>
 800f772:	4602      	mov	r2, r0
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00f      	beq.n	800f7a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f782:	3310      	adds	r3, #16
 800f784:	4618      	mov	r0, r3
 800f786:	f000 ff6f 	bl	8010668 <xTaskRemoveFromEventList>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d007      	beq.n	800f7a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f790:	4b53      	ldr	r3, [pc, #332]	; (800f8e0 <xQueueSemaphoreTake+0x20c>)
 800f792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f796:	601a      	str	r2, [r3, #0]
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f7a0:	f001 ff8a 	bl	80116b8 <vPortExitCritical>
				return pdPASS;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e096      	b.n	800f8d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d110      	bne.n	800f7d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d009      	beq.n	800f7c8 <xQueueSemaphoreTake+0xf4>
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	617b      	str	r3, [r7, #20]
 800f7c6:	e7fe      	b.n	800f7c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f7c8:	f001 ff76 	bl	80116b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e082      	b.n	800f8d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d106      	bne.n	800f7e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f7d6:	f107 030c 	add.w	r3, r7, #12
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 ffa6 	bl	801072c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7e4:	f001 ff68 	bl	80116b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7e8:	f000 fd22 	bl	8010230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7ec:	f001 ff36 	bl	801165c <vPortEnterCritical>
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7f6:	b25b      	sxtb	r3, r3
 800f7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7fc:	d103      	bne.n	800f806 <xQueueSemaphoreTake+0x132>
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f80c:	b25b      	sxtb	r3, r3
 800f80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f812:	d103      	bne.n	800f81c <xQueueSemaphoreTake+0x148>
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	2200      	movs	r2, #0
 800f818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f81c:	f001 ff4c 	bl	80116b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f820:	463a      	mov	r2, r7
 800f822:	f107 030c 	add.w	r3, r7, #12
 800f826:	4611      	mov	r1, r2
 800f828:	4618      	mov	r0, r3
 800f82a:	f000 ff95 	bl	8010758 <xTaskCheckForTimeOut>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d132      	bne.n	800f89a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f836:	f000 f94f 	bl	800fad8 <prvIsQueueEmpty>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d026      	beq.n	800f88e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d109      	bne.n	800f85c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f848:	f001 ff08 	bl	801165c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	4618      	mov	r0, r3
 800f852:	f001 f8dd 	bl	8010a10 <xTaskPriorityInherit>
 800f856:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f858:	f001 ff2e 	bl	80116b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	3324      	adds	r3, #36	; 0x24
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	4611      	mov	r1, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f000 feb1 	bl	80105cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f86c:	f000 f8e2 	bl	800fa34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f870:	f000 fcec 	bl	801024c <xTaskResumeAll>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	f47f af69 	bne.w	800f74e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f87c:	4b18      	ldr	r3, [pc, #96]	; (800f8e0 <xQueueSemaphoreTake+0x20c>)
 800f87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f882:	601a      	str	r2, [r3, #0]
 800f884:	f3bf 8f4f 	dsb	sy
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	e75f      	b.n	800f74e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f88e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f890:	f000 f8d0 	bl	800fa34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f894:	f000 fcda 	bl	801024c <xTaskResumeAll>
 800f898:	e759      	b.n	800f74e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f89c:	f000 f8ca 	bl	800fa34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8a0:	f000 fcd4 	bl	801024c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8a6:	f000 f917 	bl	800fad8 <prvIsQueueEmpty>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f43f af4e 	beq.w	800f74e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00d      	beq.n	800f8d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f8b8:	f001 fed0 	bl	801165c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f8bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8be:	f000 f811 	bl	800f8e4 <prvGetDisinheritPriorityAfterTimeout>
 800f8c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f001 f974 	bl	8010bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f8d0:	f001 fef2 	bl	80116b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f8d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3738      	adds	r7, #56	; 0x38
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d006      	beq.n	800f902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	e001      	b.n	800f906 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f902:	2300      	movs	r3, #0
 800f904:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f906:	68fb      	ldr	r3, [r7, #12]
	}
 800f908:	4618      	mov	r0, r3
 800f90a:	3714      	adds	r7, #20
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b086      	sub	sp, #24
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f920:	2300      	movs	r3, #0
 800f922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10d      	bne.n	800f94e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d14d      	bne.n	800f9d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	4618      	mov	r0, r3
 800f940:	f001 f8ce 	bl	8010ae0 <xTaskPriorityDisinherit>
 800f944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	609a      	str	r2, [r3, #8]
 800f94c:	e043      	b.n	800f9d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d119      	bne.n	800f988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6858      	ldr	r0, [r3, #4]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f95c:	461a      	mov	r2, r3
 800f95e:	68b9      	ldr	r1, [r7, #8]
 800f960:	f002 ffc4 	bl	80128ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96c:	441a      	add	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	689b      	ldr	r3, [r3, #8]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d32b      	bcc.n	800f9d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	605a      	str	r2, [r3, #4]
 800f986:	e026      	b.n	800f9d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68d8      	ldr	r0, [r3, #12]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f990:	461a      	mov	r2, r3
 800f992:	68b9      	ldr	r1, [r7, #8]
 800f994:	f002 ffaa 	bl	80128ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	68da      	ldr	r2, [r3, #12]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a0:	425b      	negs	r3, r3
 800f9a2:	441a      	add	r2, r3
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	68da      	ldr	r2, [r3, #12]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d207      	bcs.n	800f9c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	689a      	ldr	r2, [r3, #8]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9bc:	425b      	negs	r3, r3
 800f9be:	441a      	add	r2, r3
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d105      	bne.n	800f9d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f9de:	697b      	ldr	r3, [r7, #20]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3718      	adds	r7, #24
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d018      	beq.n	800fa2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	68da      	ldr	r2, [r3, #12]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa02:	441a      	add	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d303      	bcc.n	800fa1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	68d9      	ldr	r1, [r3, #12]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa24:	461a      	mov	r2, r3
 800fa26:	6838      	ldr	r0, [r7, #0]
 800fa28:	f002 ff60 	bl	80128ec <memcpy>
	}
}
 800fa2c:	bf00      	nop
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fa3c:	f001 fe0e 	bl	801165c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa48:	e011      	b.n	800fa6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d012      	beq.n	800fa78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3324      	adds	r3, #36	; 0x24
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 fe06 	bl	8010668 <xTaskRemoveFromEventList>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d001      	beq.n	800fa66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fa62:	f000 fed9 	bl	8010818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fa66:	7bfb      	ldrb	r3, [r7, #15]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	dce9      	bgt.n	800fa4a <prvUnlockQueue+0x16>
 800fa76:	e000      	b.n	800fa7a <prvUnlockQueue+0x46>
					break;
 800fa78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	22ff      	movs	r2, #255	; 0xff
 800fa7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fa82:	f001 fe19 	bl	80116b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fa86:	f001 fde9 	bl	801165c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa92:	e011      	b.n	800fab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	691b      	ldr	r3, [r3, #16]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d012      	beq.n	800fac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3310      	adds	r3, #16
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 fde1 	bl	8010668 <xTaskRemoveFromEventList>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800faac:	f000 feb4 	bl	8010818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fab0:	7bbb      	ldrb	r3, [r7, #14]
 800fab2:	3b01      	subs	r3, #1
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	dce9      	bgt.n	800fa94 <prvUnlockQueue+0x60>
 800fac0:	e000      	b.n	800fac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	22ff      	movs	r2, #255	; 0xff
 800fac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800facc:	f001 fdf4 	bl	80116b8 <vPortExitCritical>
}
 800fad0:	bf00      	nop
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fae0:	f001 fdbc 	bl	801165c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800faec:	2301      	movs	r3, #1
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	e001      	b.n	800faf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800faf2:	2300      	movs	r3, #0
 800faf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800faf6:	f001 fddf 	bl	80116b8 <vPortExitCritical>

	return xReturn;
 800fafa:	68fb      	ldr	r3, [r7, #12]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb0c:	f001 fda6 	bl	801165c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d102      	bne.n	800fb22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	60fb      	str	r3, [r7, #12]
 800fb20:	e001      	b.n	800fb26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fb26:	f001 fdc7 	bl	80116b8 <vPortExitCritical>

	return xReturn;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb3e:	2300      	movs	r3, #0
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	e014      	b.n	800fb6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fb44:	4a0e      	ldr	r2, [pc, #56]	; (800fb80 <vQueueAddToRegistry+0x4c>)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10b      	bne.n	800fb68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fb50:	490b      	ldr	r1, [pc, #44]	; (800fb80 <vQueueAddToRegistry+0x4c>)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fb5a:	4a09      	ldr	r2, [pc, #36]	; (800fb80 <vQueueAddToRegistry+0x4c>)
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	4413      	add	r3, r2
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fb66:	e005      	b.n	800fb74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	60fb      	str	r3, [r7, #12]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b07      	cmp	r3, #7
 800fb72:	d9e7      	bls.n	800fb44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fb74:	bf00      	nop
 800fb76:	3714      	adds	r7, #20
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	2000ebc0 	.word	0x2000ebc0

0800fb84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fb94:	f001 fd62 	bl	801165c <vPortEnterCritical>
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb9e:	b25b      	sxtb	r3, r3
 800fba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fba4:	d103      	bne.n	800fbae <vQueueWaitForMessageRestricted+0x2a>
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbba:	d103      	bne.n	800fbc4 <vQueueWaitForMessageRestricted+0x40>
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbc4:	f001 fd78 	bl	80116b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d106      	bne.n	800fbde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	3324      	adds	r3, #36	; 0x24
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	68b9      	ldr	r1, [r7, #8]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 fd1b 	bl	8010614 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fbde:	6978      	ldr	r0, [r7, #20]
 800fbe0:	f7ff ff28 	bl	800fa34 <prvUnlockQueue>
	}
 800fbe4:	bf00      	nop
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08e      	sub	sp, #56	; 0x38
 800fbf0:	af04      	add	r7, sp, #16
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d109      	bne.n	800fc14 <xTaskCreateStatic+0x28>
 800fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	623b      	str	r3, [r7, #32]
 800fc12:	e7fe      	b.n	800fc12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d109      	bne.n	800fc2e <xTaskCreateStatic+0x42>
 800fc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	61fb      	str	r3, [r7, #28]
 800fc2c:	e7fe      	b.n	800fc2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fc2e:	235c      	movs	r3, #92	; 0x5c
 800fc30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	2b5c      	cmp	r3, #92	; 0x5c
 800fc36:	d009      	beq.n	800fc4c <xTaskCreateStatic+0x60>
 800fc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	61bb      	str	r3, [r7, #24]
 800fc4a:	e7fe      	b.n	800fc4a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fc4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d01e      	beq.n	800fc92 <xTaskCreateStatic+0xa6>
 800fc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d01b      	beq.n	800fc92 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc66:	2202      	movs	r2, #2
 800fc68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	9303      	str	r3, [sp, #12]
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	9302      	str	r3, [sp, #8]
 800fc74:	f107 0314 	add.w	r3, r7, #20
 800fc78:	9301      	str	r3, [sp, #4]
 800fc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	68b9      	ldr	r1, [r7, #8]
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f000 f850 	bl	800fd2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc8c:	f000 f8dc 	bl	800fe48 <prvAddNewTaskToReadyList>
 800fc90:	e001      	b.n	800fc96 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fc92:	2300      	movs	r3, #0
 800fc94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fc96:	697b      	ldr	r3, [r7, #20]
	}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3728      	adds	r7, #40	; 0x28
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08c      	sub	sp, #48	; 0x30
 800fca4:	af04      	add	r7, sp, #16
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	603b      	str	r3, [r7, #0]
 800fcac:	4613      	mov	r3, r2
 800fcae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fcb0:	88fb      	ldrh	r3, [r7, #6]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f001 fdeb 	bl	8011890 <pvPortMalloc>
 800fcba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00e      	beq.n	800fce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fcc2:	205c      	movs	r0, #92	; 0x5c
 800fcc4:	f001 fde4 	bl	8011890 <pvPortMalloc>
 800fcc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d003      	beq.n	800fcd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	697a      	ldr	r2, [r7, #20]
 800fcd4:	631a      	str	r2, [r3, #48]	; 0x30
 800fcd6:	e005      	b.n	800fce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fcd8:	6978      	ldr	r0, [r7, #20]
 800fcda:	f001 fe9b 	bl	8011a14 <vPortFree>
 800fcde:	e001      	b.n	800fce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fce0:	2300      	movs	r3, #0
 800fce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d017      	beq.n	800fd1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	2200      	movs	r2, #0
 800fcee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fcf2:	88fa      	ldrh	r2, [r7, #6]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9303      	str	r3, [sp, #12]
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	9302      	str	r3, [sp, #8]
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	9301      	str	r3, [sp, #4]
 800fd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	68b9      	ldr	r1, [r7, #8]
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f000 f80e 	bl	800fd2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd0e:	69f8      	ldr	r0, [r7, #28]
 800fd10:	f000 f89a 	bl	800fe48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fd14:	2301      	movs	r3, #1
 800fd16:	61bb      	str	r3, [r7, #24]
 800fd18:	e002      	b.n	800fd20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fd20:	69bb      	ldr	r3, [r7, #24]
	}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b088      	sub	sp, #32
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	60f8      	str	r0, [r7, #12]
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	607a      	str	r2, [r7, #4]
 800fd36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	461a      	mov	r2, r3
 800fd42:	21a5      	movs	r1, #165	; 0xa5
 800fd44:	f002 fddd 	bl	8012902 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fd52:	3b01      	subs	r3, #1
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	f023 0307 	bic.w	r3, r3, #7
 800fd60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	f003 0307 	and.w	r3, r3, #7
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d009      	beq.n	800fd80 <prvInitialiseNewTask+0x56>
 800fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	e7fe      	b.n	800fd7e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d01f      	beq.n	800fdc6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd86:	2300      	movs	r3, #0
 800fd88:	61fb      	str	r3, [r7, #28]
 800fd8a:	e012      	b.n	800fdb2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	4413      	add	r3, r2
 800fd92:	7819      	ldrb	r1, [r3, #0]
 800fd94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	4413      	add	r3, r2
 800fd9a:	3334      	adds	r3, #52	; 0x34
 800fd9c:	460a      	mov	r2, r1
 800fd9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	4413      	add	r3, r2
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d006      	beq.n	800fdba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	61fb      	str	r3, [r7, #28]
 800fdb2:	69fb      	ldr	r3, [r7, #28]
 800fdb4:	2b0f      	cmp	r3, #15
 800fdb6:	d9e9      	bls.n	800fd8c <prvInitialiseNewTask+0x62>
 800fdb8:	e000      	b.n	800fdbc <prvInitialiseNewTask+0x92>
			{
				break;
 800fdba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fdc4:	e003      	b.n	800fdce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd0:	2b37      	cmp	r3, #55	; 0x37
 800fdd2:	d901      	bls.n	800fdd8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fdd4:	2337      	movs	r3, #55	; 0x37
 800fdd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fde2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	2200      	movs	r2, #0
 800fde8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	3304      	adds	r3, #4
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe ff78 	bl	800ece4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf6:	3318      	adds	r3, #24
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fe ff73 	bl	800ece4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fe0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	2200      	movs	r2, #0
 800fe18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	68f9      	ldr	r1, [r7, #12]
 800fe26:	69b8      	ldr	r0, [r7, #24]
 800fe28:	f001 faf4 	bl	8011414 <pxPortInitialiseStack>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fe32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe3e:	bf00      	nop
 800fe40:	3720      	adds	r7, #32
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
	...

0800fe48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fe50:	f001 fc04 	bl	801165c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fe54:	4b2d      	ldr	r3, [pc, #180]	; (800ff0c <prvAddNewTaskToReadyList+0xc4>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	4a2c      	ldr	r2, [pc, #176]	; (800ff0c <prvAddNewTaskToReadyList+0xc4>)
 800fe5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fe5e:	4b2c      	ldr	r3, [pc, #176]	; (800ff10 <prvAddNewTaskToReadyList+0xc8>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d109      	bne.n	800fe7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fe66:	4a2a      	ldr	r2, [pc, #168]	; (800ff10 <prvAddNewTaskToReadyList+0xc8>)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fe6c:	4b27      	ldr	r3, [pc, #156]	; (800ff0c <prvAddNewTaskToReadyList+0xc4>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d110      	bne.n	800fe96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe74:	f000 fcf4 	bl	8010860 <prvInitialiseTaskLists>
 800fe78:	e00d      	b.n	800fe96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe7a:	4b26      	ldr	r3, [pc, #152]	; (800ff14 <prvAddNewTaskToReadyList+0xcc>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d109      	bne.n	800fe96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe82:	4b23      	ldr	r3, [pc, #140]	; (800ff10 <prvAddNewTaskToReadyList+0xc8>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d802      	bhi.n	800fe96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe90:	4a1f      	ldr	r2, [pc, #124]	; (800ff10 <prvAddNewTaskToReadyList+0xc8>)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe96:	4b20      	ldr	r3, [pc, #128]	; (800ff18 <prvAddNewTaskToReadyList+0xd0>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	4a1e      	ldr	r2, [pc, #120]	; (800ff18 <prvAddNewTaskToReadyList+0xd0>)
 800fe9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fea0:	4b1d      	ldr	r3, [pc, #116]	; (800ff18 <prvAddNewTaskToReadyList+0xd0>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feac:	4b1b      	ldr	r3, [pc, #108]	; (800ff1c <prvAddNewTaskToReadyList+0xd4>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d903      	bls.n	800febc <prvAddNewTaskToReadyList+0x74>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb8:	4a18      	ldr	r2, [pc, #96]	; (800ff1c <prvAddNewTaskToReadyList+0xd4>)
 800feba:	6013      	str	r3, [r2, #0]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	4613      	mov	r3, r2
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	4413      	add	r3, r2
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4a15      	ldr	r2, [pc, #84]	; (800ff20 <prvAddNewTaskToReadyList+0xd8>)
 800feca:	441a      	add	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3304      	adds	r3, #4
 800fed0:	4619      	mov	r1, r3
 800fed2:	4610      	mov	r0, r2
 800fed4:	f7fe ff13 	bl	800ecfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fed8:	f001 fbee 	bl	80116b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fedc:	4b0d      	ldr	r3, [pc, #52]	; (800ff14 <prvAddNewTaskToReadyList+0xcc>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00e      	beq.n	800ff02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fee4:	4b0a      	ldr	r3, [pc, #40]	; (800ff10 <prvAddNewTaskToReadyList+0xc8>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feee:	429a      	cmp	r2, r3
 800fef0:	d207      	bcs.n	800ff02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fef2:	4b0c      	ldr	r3, [pc, #48]	; (800ff24 <prvAddNewTaskToReadyList+0xdc>)
 800fef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff02:	bf00      	nop
 800ff04:	3708      	adds	r7, #8
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20001074 	.word	0x20001074
 800ff10:	20000ba0 	.word	0x20000ba0
 800ff14:	20001080 	.word	0x20001080
 800ff18:	20001090 	.word	0x20001090
 800ff1c:	2000107c 	.word	0x2000107c
 800ff20:	20000ba4 	.word	0x20000ba4
 800ff24:	e000ed04 	.word	0xe000ed04

0800ff28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ff30:	f001 fb94 	bl	801165c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d102      	bne.n	800ff40 <vTaskDelete+0x18>
 800ff3a:	4b2c      	ldr	r3, [pc, #176]	; (800ffec <vTaskDelete+0xc4>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	e000      	b.n	800ff42 <vTaskDelete+0x1a>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe ff35 	bl	800edb8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d004      	beq.n	800ff60 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	3318      	adds	r3, #24
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe ff2c 	bl	800edb8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ff60:	4b23      	ldr	r3, [pc, #140]	; (800fff0 <vTaskDelete+0xc8>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3301      	adds	r3, #1
 800ff66:	4a22      	ldr	r2, [pc, #136]	; (800fff0 <vTaskDelete+0xc8>)
 800ff68:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ff6a:	4b20      	ldr	r3, [pc, #128]	; (800ffec <vTaskDelete+0xc4>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d10b      	bne.n	800ff8c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	3304      	adds	r3, #4
 800ff78:	4619      	mov	r1, r3
 800ff7a:	481e      	ldr	r0, [pc, #120]	; (800fff4 <vTaskDelete+0xcc>)
 800ff7c:	f7fe febf 	bl	800ecfe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ff80:	4b1d      	ldr	r3, [pc, #116]	; (800fff8 <vTaskDelete+0xd0>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3301      	adds	r3, #1
 800ff86:	4a1c      	ldr	r2, [pc, #112]	; (800fff8 <vTaskDelete+0xd0>)
 800ff88:	6013      	str	r3, [r2, #0]
 800ff8a:	e009      	b.n	800ffa0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ff8c:	4b1b      	ldr	r3, [pc, #108]	; (800fffc <vTaskDelete+0xd4>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3b01      	subs	r3, #1
 800ff92:	4a1a      	ldr	r2, [pc, #104]	; (800fffc <vTaskDelete+0xd4>)
 800ff94:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f000 fcce 	bl	8010938 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ff9c:	f000 fcfa 	bl	8010994 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ffa0:	f001 fb8a 	bl	80116b8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ffa4:	4b16      	ldr	r3, [pc, #88]	; (8010000 <vTaskDelete+0xd8>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01a      	beq.n	800ffe2 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800ffac:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <vTaskDelete+0xc4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d115      	bne.n	800ffe2 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ffb6:	4b13      	ldr	r3, [pc, #76]	; (8010004 <vTaskDelete+0xdc>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d009      	beq.n	800ffd2 <vTaskDelete+0xaa>
 800ffbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	60bb      	str	r3, [r7, #8]
 800ffd0:	e7fe      	b.n	800ffd0 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800ffd2:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <vTaskDelete+0xe0>)
 800ffd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ffe2:	bf00      	nop
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	20000ba0 	.word	0x20000ba0
 800fff0:	20001090 	.word	0x20001090
 800fff4:	20001048 	.word	0x20001048
 800fff8:	2000105c 	.word	0x2000105c
 800fffc:	20001074 	.word	0x20001074
 8010000:	20001080 	.word	0x20001080
 8010004:	2000109c 	.word	0x2000109c
 8010008:	e000ed04 	.word	0xe000ed04

0801000c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08a      	sub	sp, #40	; 0x28
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010016:	2300      	movs	r3, #0
 8010018:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d109      	bne.n	8010034 <vTaskDelayUntil+0x28>
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	617b      	str	r3, [r7, #20]
 8010032:	e7fe      	b.n	8010032 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d109      	bne.n	801004e <vTaskDelayUntil+0x42>
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	613b      	str	r3, [r7, #16]
 801004c:	e7fe      	b.n	801004c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 801004e:	4b29      	ldr	r3, [pc, #164]	; (80100f4 <vTaskDelayUntil+0xe8>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d009      	beq.n	801006a <vTaskDelayUntil+0x5e>
 8010056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	60fb      	str	r3, [r7, #12]
 8010068:	e7fe      	b.n	8010068 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 801006a:	f000 f8e1 	bl	8010230 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801006e:	4b22      	ldr	r3, [pc, #136]	; (80100f8 <vTaskDelayUntil+0xec>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	4413      	add	r3, r2
 801007c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6a3a      	ldr	r2, [r7, #32]
 8010084:	429a      	cmp	r2, r3
 8010086:	d20b      	bcs.n	80100a0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	69fa      	ldr	r2, [r7, #28]
 801008e:	429a      	cmp	r2, r3
 8010090:	d211      	bcs.n	80100b6 <vTaskDelayUntil+0xaa>
 8010092:	69fa      	ldr	r2, [r7, #28]
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	429a      	cmp	r2, r3
 8010098:	d90d      	bls.n	80100b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 801009a:	2301      	movs	r3, #1
 801009c:	627b      	str	r3, [r7, #36]	; 0x24
 801009e:	e00a      	b.n	80100b6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d303      	bcc.n	80100b2 <vTaskDelayUntil+0xa6>
 80100aa:	69fa      	ldr	r2, [r7, #28]
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d901      	bls.n	80100b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80100b2:	2301      	movs	r3, #1
 80100b4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	69fa      	ldr	r2, [r7, #28]
 80100ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d006      	beq.n	80100d0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80100c2:	69fa      	ldr	r2, [r7, #28]
 80100c4:	6a3b      	ldr	r3, [r7, #32]
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	2100      	movs	r1, #0
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fe08 	bl	8010ce0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80100d0:	f000 f8bc 	bl	801024c <xTaskResumeAll>
 80100d4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d107      	bne.n	80100ec <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80100dc:	4b07      	ldr	r3, [pc, #28]	; (80100fc <vTaskDelayUntil+0xf0>)
 80100de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80100ec:	bf00      	nop
 80100ee:	3728      	adds	r7, #40	; 0x28
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	2000109c 	.word	0x2000109c
 80100f8:	20001078 	.word	0x20001078
 80100fc:	e000ed04 	.word	0xe000ed04

08010100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010108:	2300      	movs	r3, #0
 801010a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d016      	beq.n	8010140 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010112:	4b13      	ldr	r3, [pc, #76]	; (8010160 <vTaskDelay+0x60>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d009      	beq.n	801012e <vTaskDelay+0x2e>
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	60bb      	str	r3, [r7, #8]
 801012c:	e7fe      	b.n	801012c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801012e:	f000 f87f 	bl	8010230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010132:	2100      	movs	r1, #0
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 fdd3 	bl	8010ce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801013a:	f000 f887 	bl	801024c <xTaskResumeAll>
 801013e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d107      	bne.n	8010156 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010146:	4b07      	ldr	r3, [pc, #28]	; (8010164 <vTaskDelay+0x64>)
 8010148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010156:	bf00      	nop
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	2000109c 	.word	0x2000109c
 8010164:	e000ed04 	.word	0xe000ed04

08010168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08a      	sub	sp, #40	; 0x28
 801016c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010172:	2300      	movs	r3, #0
 8010174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010176:	463a      	mov	r2, r7
 8010178:	1d39      	adds	r1, r7, #4
 801017a:	f107 0308 	add.w	r3, r7, #8
 801017e:	4618      	mov	r0, r3
 8010180:	f7fe fd5c 	bl	800ec3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010184:	6839      	ldr	r1, [r7, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	9202      	str	r2, [sp, #8]
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	2300      	movs	r3, #0
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	2300      	movs	r3, #0
 8010194:	460a      	mov	r2, r1
 8010196:	4920      	ldr	r1, [pc, #128]	; (8010218 <vTaskStartScheduler+0xb0>)
 8010198:	4820      	ldr	r0, [pc, #128]	; (801021c <vTaskStartScheduler+0xb4>)
 801019a:	f7ff fd27 	bl	800fbec <xTaskCreateStatic>
 801019e:	4602      	mov	r2, r0
 80101a0:	4b1f      	ldr	r3, [pc, #124]	; (8010220 <vTaskStartScheduler+0xb8>)
 80101a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80101a4:	4b1e      	ldr	r3, [pc, #120]	; (8010220 <vTaskStartScheduler+0xb8>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80101ac:	2301      	movs	r3, #1
 80101ae:	617b      	str	r3, [r7, #20]
 80101b0:	e001      	b.n	80101b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d102      	bne.n	80101c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80101bc:	f000 fde4 	bl	8010d88 <xTimerCreateTimerTask>
 80101c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d115      	bne.n	80101f4 <vTaskStartScheduler+0x8c>
 80101c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101cc:	f383 8811 	msr	BASEPRI, r3
 80101d0:	f3bf 8f6f 	isb	sy
 80101d4:	f3bf 8f4f 	dsb	sy
 80101d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80101da:	4b12      	ldr	r3, [pc, #72]	; (8010224 <vTaskStartScheduler+0xbc>)
 80101dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80101e2:	4b11      	ldr	r3, [pc, #68]	; (8010228 <vTaskStartScheduler+0xc0>)
 80101e4:	2201      	movs	r2, #1
 80101e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80101e8:	4b10      	ldr	r3, [pc, #64]	; (801022c <vTaskStartScheduler+0xc4>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80101ee:	f001 f997 	bl	8011520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80101f2:	e00d      	b.n	8010210 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101fa:	d109      	bne.n	8010210 <vTaskStartScheduler+0xa8>
 80101fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010200:	f383 8811 	msr	BASEPRI, r3
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	60fb      	str	r3, [r7, #12]
 801020e:	e7fe      	b.n	801020e <vTaskStartScheduler+0xa6>
}
 8010210:	bf00      	nop
 8010212:	3718      	adds	r7, #24
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	0801405c 	.word	0x0801405c
 801021c:	08010831 	.word	0x08010831
 8010220:	20001098 	.word	0x20001098
 8010224:	20001094 	.word	0x20001094
 8010228:	20001080 	.word	0x20001080
 801022c:	20001078 	.word	0x20001078

08010230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010230:	b480      	push	{r7}
 8010232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010234:	4b04      	ldr	r3, [pc, #16]	; (8010248 <vTaskSuspendAll+0x18>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	4a03      	ldr	r2, [pc, #12]	; (8010248 <vTaskSuspendAll+0x18>)
 801023c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801023e:	bf00      	nop
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	2000109c 	.word	0x2000109c

0801024c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010252:	2300      	movs	r3, #0
 8010254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010256:	2300      	movs	r3, #0
 8010258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801025a:	4b41      	ldr	r3, [pc, #260]	; (8010360 <xTaskResumeAll+0x114>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d109      	bne.n	8010276 <xTaskResumeAll+0x2a>
 8010262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010266:	f383 8811 	msr	BASEPRI, r3
 801026a:	f3bf 8f6f 	isb	sy
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	603b      	str	r3, [r7, #0]
 8010274:	e7fe      	b.n	8010274 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010276:	f001 f9f1 	bl	801165c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801027a:	4b39      	ldr	r3, [pc, #228]	; (8010360 <xTaskResumeAll+0x114>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	3b01      	subs	r3, #1
 8010280:	4a37      	ldr	r2, [pc, #220]	; (8010360 <xTaskResumeAll+0x114>)
 8010282:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010284:	4b36      	ldr	r3, [pc, #216]	; (8010360 <xTaskResumeAll+0x114>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d162      	bne.n	8010352 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801028c:	4b35      	ldr	r3, [pc, #212]	; (8010364 <xTaskResumeAll+0x118>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d05e      	beq.n	8010352 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010294:	e02f      	b.n	80102f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010296:	4b34      	ldr	r3, [pc, #208]	; (8010368 <xTaskResumeAll+0x11c>)
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	3318      	adds	r3, #24
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fd88 	bl	800edb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	3304      	adds	r3, #4
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fe fd83 	bl	800edb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b6:	4b2d      	ldr	r3, [pc, #180]	; (801036c <xTaskResumeAll+0x120>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d903      	bls.n	80102c6 <xTaskResumeAll+0x7a>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	4a2a      	ldr	r2, [pc, #168]	; (801036c <xTaskResumeAll+0x120>)
 80102c4:	6013      	str	r3, [r2, #0]
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ca:	4613      	mov	r3, r2
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4413      	add	r3, r2
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	4a27      	ldr	r2, [pc, #156]	; (8010370 <xTaskResumeAll+0x124>)
 80102d4:	441a      	add	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	3304      	adds	r3, #4
 80102da:	4619      	mov	r1, r3
 80102dc:	4610      	mov	r0, r2
 80102de:	f7fe fd0e 	bl	800ecfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e6:	4b23      	ldr	r3, [pc, #140]	; (8010374 <xTaskResumeAll+0x128>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d302      	bcc.n	80102f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80102f0:	4b21      	ldr	r3, [pc, #132]	; (8010378 <xTaskResumeAll+0x12c>)
 80102f2:	2201      	movs	r2, #1
 80102f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80102f6:	4b1c      	ldr	r3, [pc, #112]	; (8010368 <xTaskResumeAll+0x11c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1cb      	bne.n	8010296 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010304:	f000 fb46 	bl	8010994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010308:	4b1c      	ldr	r3, [pc, #112]	; (801037c <xTaskResumeAll+0x130>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d010      	beq.n	8010336 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010314:	f000 f846 	bl	80103a4 <xTaskIncrementTick>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d002      	beq.n	8010324 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801031e:	4b16      	ldr	r3, [pc, #88]	; (8010378 <xTaskResumeAll+0x12c>)
 8010320:	2201      	movs	r2, #1
 8010322:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	3b01      	subs	r3, #1
 8010328:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1f1      	bne.n	8010314 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010330:	4b12      	ldr	r3, [pc, #72]	; (801037c <xTaskResumeAll+0x130>)
 8010332:	2200      	movs	r2, #0
 8010334:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010336:	4b10      	ldr	r3, [pc, #64]	; (8010378 <xTaskResumeAll+0x12c>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d009      	beq.n	8010352 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801033e:	2301      	movs	r3, #1
 8010340:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010342:	4b0f      	ldr	r3, [pc, #60]	; (8010380 <xTaskResumeAll+0x134>)
 8010344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010352:	f001 f9b1 	bl	80116b8 <vPortExitCritical>

	return xAlreadyYielded;
 8010356:	68bb      	ldr	r3, [r7, #8]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	2000109c 	.word	0x2000109c
 8010364:	20001074 	.word	0x20001074
 8010368:	20001034 	.word	0x20001034
 801036c:	2000107c 	.word	0x2000107c
 8010370:	20000ba4 	.word	0x20000ba4
 8010374:	20000ba0 	.word	0x20000ba0
 8010378:	20001088 	.word	0x20001088
 801037c:	20001084 	.word	0x20001084
 8010380:	e000ed04 	.word	0xe000ed04

08010384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801038a:	4b05      	ldr	r3, [pc, #20]	; (80103a0 <xTaskGetTickCount+0x1c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010390:	687b      	ldr	r3, [r7, #4]
}
 8010392:	4618      	mov	r0, r3
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	20001078 	.word	0x20001078

080103a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b086      	sub	sp, #24
 80103a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80103aa:	2300      	movs	r3, #0
 80103ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103ae:	4b4e      	ldr	r3, [pc, #312]	; (80104e8 <xTaskIncrementTick+0x144>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f040 8088 	bne.w	80104c8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80103b8:	4b4c      	ldr	r3, [pc, #304]	; (80104ec <xTaskIncrementTick+0x148>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	3301      	adds	r3, #1
 80103be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80103c0:	4a4a      	ldr	r2, [pc, #296]	; (80104ec <xTaskIncrementTick+0x148>)
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d11f      	bne.n	801040c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80103cc:	4b48      	ldr	r3, [pc, #288]	; (80104f0 <xTaskIncrementTick+0x14c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d009      	beq.n	80103ea <xTaskIncrementTick+0x46>
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	603b      	str	r3, [r7, #0]
 80103e8:	e7fe      	b.n	80103e8 <xTaskIncrementTick+0x44>
 80103ea:	4b41      	ldr	r3, [pc, #260]	; (80104f0 <xTaskIncrementTick+0x14c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	60fb      	str	r3, [r7, #12]
 80103f0:	4b40      	ldr	r3, [pc, #256]	; (80104f4 <xTaskIncrementTick+0x150>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4a3e      	ldr	r2, [pc, #248]	; (80104f0 <xTaskIncrementTick+0x14c>)
 80103f6:	6013      	str	r3, [r2, #0]
 80103f8:	4a3e      	ldr	r2, [pc, #248]	; (80104f4 <xTaskIncrementTick+0x150>)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	4b3e      	ldr	r3, [pc, #248]	; (80104f8 <xTaskIncrementTick+0x154>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3301      	adds	r3, #1
 8010404:	4a3c      	ldr	r2, [pc, #240]	; (80104f8 <xTaskIncrementTick+0x154>)
 8010406:	6013      	str	r3, [r2, #0]
 8010408:	f000 fac4 	bl	8010994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801040c:	4b3b      	ldr	r3, [pc, #236]	; (80104fc <xTaskIncrementTick+0x158>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	693a      	ldr	r2, [r7, #16]
 8010412:	429a      	cmp	r2, r3
 8010414:	d349      	bcc.n	80104aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010416:	4b36      	ldr	r3, [pc, #216]	; (80104f0 <xTaskIncrementTick+0x14c>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010420:	4b36      	ldr	r3, [pc, #216]	; (80104fc <xTaskIncrementTick+0x158>)
 8010422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010426:	601a      	str	r2, [r3, #0]
					break;
 8010428:	e03f      	b.n	80104aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801042a:	4b31      	ldr	r3, [pc, #196]	; (80104f0 <xTaskIncrementTick+0x14c>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	429a      	cmp	r2, r3
 8010440:	d203      	bcs.n	801044a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010442:	4a2e      	ldr	r2, [pc, #184]	; (80104fc <xTaskIncrementTick+0x158>)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010448:	e02f      	b.n	80104aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	3304      	adds	r3, #4
 801044e:	4618      	mov	r0, r3
 8010450:	f7fe fcb2 	bl	800edb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010458:	2b00      	cmp	r3, #0
 801045a:	d004      	beq.n	8010466 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	3318      	adds	r3, #24
 8010460:	4618      	mov	r0, r3
 8010462:	f7fe fca9 	bl	800edb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046a:	4b25      	ldr	r3, [pc, #148]	; (8010500 <xTaskIncrementTick+0x15c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	429a      	cmp	r2, r3
 8010470:	d903      	bls.n	801047a <xTaskIncrementTick+0xd6>
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010476:	4a22      	ldr	r2, [pc, #136]	; (8010500 <xTaskIncrementTick+0x15c>)
 8010478:	6013      	str	r3, [r2, #0]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	4a1f      	ldr	r2, [pc, #124]	; (8010504 <xTaskIncrementTick+0x160>)
 8010488:	441a      	add	r2, r3
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3304      	adds	r3, #4
 801048e:	4619      	mov	r1, r3
 8010490:	4610      	mov	r0, r2
 8010492:	f7fe fc34 	bl	800ecfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049a:	4b1b      	ldr	r3, [pc, #108]	; (8010508 <xTaskIncrementTick+0x164>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d3b8      	bcc.n	8010416 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104a8:	e7b5      	b.n	8010416 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80104aa:	4b17      	ldr	r3, [pc, #92]	; (8010508 <xTaskIncrementTick+0x164>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b0:	4914      	ldr	r1, [pc, #80]	; (8010504 <xTaskIncrementTick+0x160>)
 80104b2:	4613      	mov	r3, r2
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4413      	add	r3, r2
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	440b      	add	r3, r1
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d907      	bls.n	80104d2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80104c2:	2301      	movs	r3, #1
 80104c4:	617b      	str	r3, [r7, #20]
 80104c6:	e004      	b.n	80104d2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80104c8:	4b10      	ldr	r3, [pc, #64]	; (801050c <xTaskIncrementTick+0x168>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3301      	adds	r3, #1
 80104ce:	4a0f      	ldr	r2, [pc, #60]	; (801050c <xTaskIncrementTick+0x168>)
 80104d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80104d2:	4b0f      	ldr	r3, [pc, #60]	; (8010510 <xTaskIncrementTick+0x16c>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d001      	beq.n	80104de <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80104da:	2301      	movs	r3, #1
 80104dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80104de:	697b      	ldr	r3, [r7, #20]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	2000109c 	.word	0x2000109c
 80104ec:	20001078 	.word	0x20001078
 80104f0:	2000102c 	.word	0x2000102c
 80104f4:	20001030 	.word	0x20001030
 80104f8:	2000108c 	.word	0x2000108c
 80104fc:	20001094 	.word	0x20001094
 8010500:	2000107c 	.word	0x2000107c
 8010504:	20000ba4 	.word	0x20000ba4
 8010508:	20000ba0 	.word	0x20000ba0
 801050c:	20001084 	.word	0x20001084
 8010510:	20001088 	.word	0x20001088

08010514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010514:	b480      	push	{r7}
 8010516:	b085      	sub	sp, #20
 8010518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801051a:	4b27      	ldr	r3, [pc, #156]	; (80105b8 <vTaskSwitchContext+0xa4>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d003      	beq.n	801052a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010522:	4b26      	ldr	r3, [pc, #152]	; (80105bc <vTaskSwitchContext+0xa8>)
 8010524:	2201      	movs	r2, #1
 8010526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010528:	e040      	b.n	80105ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801052a:	4b24      	ldr	r3, [pc, #144]	; (80105bc <vTaskSwitchContext+0xa8>)
 801052c:	2200      	movs	r2, #0
 801052e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010530:	4b23      	ldr	r3, [pc, #140]	; (80105c0 <vTaskSwitchContext+0xac>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	e00f      	b.n	8010558 <vTaskSwitchContext+0x44>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d109      	bne.n	8010552 <vTaskSwitchContext+0x3e>
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	607b      	str	r3, [r7, #4]
 8010550:	e7fe      	b.n	8010550 <vTaskSwitchContext+0x3c>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3b01      	subs	r3, #1
 8010556:	60fb      	str	r3, [r7, #12]
 8010558:	491a      	ldr	r1, [pc, #104]	; (80105c4 <vTaskSwitchContext+0xb0>)
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	440b      	add	r3, r1
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d0e5      	beq.n	8010538 <vTaskSwitchContext+0x24>
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4613      	mov	r3, r2
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	4413      	add	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4a13      	ldr	r2, [pc, #76]	; (80105c4 <vTaskSwitchContext+0xb0>)
 8010578:	4413      	add	r3, r2
 801057a:	60bb      	str	r3, [r7, #8]
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	685a      	ldr	r2, [r3, #4]
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	605a      	str	r2, [r3, #4]
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	685a      	ldr	r2, [r3, #4]
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	3308      	adds	r3, #8
 801058e:	429a      	cmp	r2, r3
 8010590:	d104      	bne.n	801059c <vTaskSwitchContext+0x88>
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	685a      	ldr	r2, [r3, #4]
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	605a      	str	r2, [r3, #4]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	4a09      	ldr	r2, [pc, #36]	; (80105c8 <vTaskSwitchContext+0xb4>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	4a06      	ldr	r2, [pc, #24]	; (80105c0 <vTaskSwitchContext+0xac>)
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6013      	str	r3, [r2, #0]
}
 80105ac:	bf00      	nop
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	2000109c 	.word	0x2000109c
 80105bc:	20001088 	.word	0x20001088
 80105c0:	2000107c 	.word	0x2000107c
 80105c4:	20000ba4 	.word	0x20000ba4
 80105c8:	20000ba0 	.word	0x20000ba0

080105cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d109      	bne.n	80105f0 <vTaskPlaceOnEventList+0x24>
 80105dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	60fb      	str	r3, [r7, #12]
 80105ee:	e7fe      	b.n	80105ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80105f0:	4b07      	ldr	r3, [pc, #28]	; (8010610 <vTaskPlaceOnEventList+0x44>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3318      	adds	r3, #24
 80105f6:	4619      	mov	r1, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7fe fba4 	bl	800ed46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80105fe:	2101      	movs	r1, #1
 8010600:	6838      	ldr	r0, [r7, #0]
 8010602:	f000 fb6d 	bl	8010ce0 <prvAddCurrentTaskToDelayedList>
}
 8010606:	bf00      	nop
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	20000ba0 	.word	0x20000ba0

08010614 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d109      	bne.n	801063a <vTaskPlaceOnEventListRestricted+0x26>
 8010626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062a:	f383 8811 	msr	BASEPRI, r3
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e7fe      	b.n	8010638 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801063a:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <vTaskPlaceOnEventListRestricted+0x50>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3318      	adds	r3, #24
 8010640:	4619      	mov	r1, r3
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f7fe fb5b 	bl	800ecfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d002      	beq.n	8010654 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801064e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010652:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010654:	6879      	ldr	r1, [r7, #4]
 8010656:	68b8      	ldr	r0, [r7, #8]
 8010658:	f000 fb42 	bl	8010ce0 <prvAddCurrentTaskToDelayedList>
	}
 801065c:	bf00      	nop
 801065e:	3718      	adds	r7, #24
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	20000ba0 	.word	0x20000ba0

08010668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d109      	bne.n	8010692 <xTaskRemoveFromEventList+0x2a>
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	e7fe      	b.n	8010690 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	3318      	adds	r3, #24
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fb8e 	bl	800edb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801069c:	4b1d      	ldr	r3, [pc, #116]	; (8010714 <xTaskRemoveFromEventList+0xac>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d11d      	bne.n	80106e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	3304      	adds	r3, #4
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fe fb85 	bl	800edb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b2:	4b19      	ldr	r3, [pc, #100]	; (8010718 <xTaskRemoveFromEventList+0xb0>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d903      	bls.n	80106c2 <xTaskRemoveFromEventList+0x5a>
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106be:	4a16      	ldr	r2, [pc, #88]	; (8010718 <xTaskRemoveFromEventList+0xb0>)
 80106c0:	6013      	str	r3, [r2, #0]
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106c6:	4613      	mov	r3, r2
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	4413      	add	r3, r2
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	4a13      	ldr	r2, [pc, #76]	; (801071c <xTaskRemoveFromEventList+0xb4>)
 80106d0:	441a      	add	r2, r3
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	3304      	adds	r3, #4
 80106d6:	4619      	mov	r1, r3
 80106d8:	4610      	mov	r0, r2
 80106da:	f7fe fb10 	bl	800ecfe <vListInsertEnd>
 80106de:	e005      	b.n	80106ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	3318      	adds	r3, #24
 80106e4:	4619      	mov	r1, r3
 80106e6:	480e      	ldr	r0, [pc, #56]	; (8010720 <xTaskRemoveFromEventList+0xb8>)
 80106e8:	f7fe fb09 	bl	800ecfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f0:	4b0c      	ldr	r3, [pc, #48]	; (8010724 <xTaskRemoveFromEventList+0xbc>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d905      	bls.n	8010706 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80106fa:	2301      	movs	r3, #1
 80106fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80106fe:	4b0a      	ldr	r3, [pc, #40]	; (8010728 <xTaskRemoveFromEventList+0xc0>)
 8010700:	2201      	movs	r2, #1
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	e001      	b.n	801070a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010706:	2300      	movs	r3, #0
 8010708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801070a:	697b      	ldr	r3, [r7, #20]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	2000109c 	.word	0x2000109c
 8010718:	2000107c 	.word	0x2000107c
 801071c:	20000ba4 	.word	0x20000ba4
 8010720:	20001034 	.word	0x20001034
 8010724:	20000ba0 	.word	0x20000ba0
 8010728:	20001088 	.word	0x20001088

0801072c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010734:	4b06      	ldr	r3, [pc, #24]	; (8010750 <vTaskInternalSetTimeOutState+0x24>)
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801073c:	4b05      	ldr	r3, [pc, #20]	; (8010754 <vTaskInternalSetTimeOutState+0x28>)
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	605a      	str	r2, [r3, #4]
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	2000108c 	.word	0x2000108c
 8010754:	20001078 	.word	0x20001078

08010758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d109      	bne.n	801077c <xTaskCheckForTimeOut+0x24>
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	e7fe      	b.n	801077a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d109      	bne.n	8010796 <xTaskCheckForTimeOut+0x3e>
 8010782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	e7fe      	b.n	8010794 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010796:	f000 ff61 	bl	801165c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801079a:	4b1d      	ldr	r3, [pc, #116]	; (8010810 <xTaskCheckForTimeOut+0xb8>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	69ba      	ldr	r2, [r7, #24]
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107b2:	d102      	bne.n	80107ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61fb      	str	r3, [r7, #28]
 80107b8:	e023      	b.n	8010802 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	4b15      	ldr	r3, [pc, #84]	; (8010814 <xTaskCheckForTimeOut+0xbc>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d007      	beq.n	80107d6 <xTaskCheckForTimeOut+0x7e>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	69ba      	ldr	r2, [r7, #24]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d302      	bcc.n	80107d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80107d0:	2301      	movs	r3, #1
 80107d2:	61fb      	str	r3, [r7, #28]
 80107d4:	e015      	b.n	8010802 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d20b      	bcs.n	80107f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	1ad2      	subs	r2, r2, r3
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff ff9d 	bl	801072c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80107f2:	2300      	movs	r3, #0
 80107f4:	61fb      	str	r3, [r7, #28]
 80107f6:	e004      	b.n	8010802 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80107fe:	2301      	movs	r3, #1
 8010800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010802:	f000 ff59 	bl	80116b8 <vPortExitCritical>

	return xReturn;
 8010806:	69fb      	ldr	r3, [r7, #28]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3720      	adds	r7, #32
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	20001078 	.word	0x20001078
 8010814:	2000108c 	.word	0x2000108c

08010818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010818:	b480      	push	{r7}
 801081a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801081c:	4b03      	ldr	r3, [pc, #12]	; (801082c <vTaskMissedYield+0x14>)
 801081e:	2201      	movs	r2, #1
 8010820:	601a      	str	r2, [r3, #0]
}
 8010822:	bf00      	nop
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr
 801082c:	20001088 	.word	0x20001088

08010830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010838:	f000 f852 	bl	80108e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801083c:	4b06      	ldr	r3, [pc, #24]	; (8010858 <prvIdleTask+0x28>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d9f9      	bls.n	8010838 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <prvIdleTask+0x2c>)
 8010846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	f3bf 8f4f 	dsb	sy
 8010850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010854:	e7f0      	b.n	8010838 <prvIdleTask+0x8>
 8010856:	bf00      	nop
 8010858:	20000ba4 	.word	0x20000ba4
 801085c:	e000ed04 	.word	0xe000ed04

08010860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010866:	2300      	movs	r3, #0
 8010868:	607b      	str	r3, [r7, #4]
 801086a:	e00c      	b.n	8010886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	4613      	mov	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4413      	add	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4a12      	ldr	r2, [pc, #72]	; (80108c0 <prvInitialiseTaskLists+0x60>)
 8010878:	4413      	add	r3, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f7fe fa12 	bl	800eca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	3301      	adds	r3, #1
 8010884:	607b      	str	r3, [r7, #4]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b37      	cmp	r3, #55	; 0x37
 801088a:	d9ef      	bls.n	801086c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801088c:	480d      	ldr	r0, [pc, #52]	; (80108c4 <prvInitialiseTaskLists+0x64>)
 801088e:	f7fe fa09 	bl	800eca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010892:	480d      	ldr	r0, [pc, #52]	; (80108c8 <prvInitialiseTaskLists+0x68>)
 8010894:	f7fe fa06 	bl	800eca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010898:	480c      	ldr	r0, [pc, #48]	; (80108cc <prvInitialiseTaskLists+0x6c>)
 801089a:	f7fe fa03 	bl	800eca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801089e:	480c      	ldr	r0, [pc, #48]	; (80108d0 <prvInitialiseTaskLists+0x70>)
 80108a0:	f7fe fa00 	bl	800eca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80108a4:	480b      	ldr	r0, [pc, #44]	; (80108d4 <prvInitialiseTaskLists+0x74>)
 80108a6:	f7fe f9fd 	bl	800eca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80108aa:	4b0b      	ldr	r3, [pc, #44]	; (80108d8 <prvInitialiseTaskLists+0x78>)
 80108ac:	4a05      	ldr	r2, [pc, #20]	; (80108c4 <prvInitialiseTaskLists+0x64>)
 80108ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80108b0:	4b0a      	ldr	r3, [pc, #40]	; (80108dc <prvInitialiseTaskLists+0x7c>)
 80108b2:	4a05      	ldr	r2, [pc, #20]	; (80108c8 <prvInitialiseTaskLists+0x68>)
 80108b4:	601a      	str	r2, [r3, #0]
}
 80108b6:	bf00      	nop
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	20000ba4 	.word	0x20000ba4
 80108c4:	20001004 	.word	0x20001004
 80108c8:	20001018 	.word	0x20001018
 80108cc:	20001034 	.word	0x20001034
 80108d0:	20001048 	.word	0x20001048
 80108d4:	20001060 	.word	0x20001060
 80108d8:	2000102c 	.word	0x2000102c
 80108dc:	20001030 	.word	0x20001030

080108e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80108e6:	e019      	b.n	801091c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80108e8:	f000 feb8 	bl	801165c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108ec:	4b0f      	ldr	r3, [pc, #60]	; (801092c <prvCheckTasksWaitingTermination+0x4c>)
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3304      	adds	r3, #4
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fe fa5d 	bl	800edb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80108fe:	4b0c      	ldr	r3, [pc, #48]	; (8010930 <prvCheckTasksWaitingTermination+0x50>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3b01      	subs	r3, #1
 8010904:	4a0a      	ldr	r2, [pc, #40]	; (8010930 <prvCheckTasksWaitingTermination+0x50>)
 8010906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010908:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <prvCheckTasksWaitingTermination+0x54>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	3b01      	subs	r3, #1
 801090e:	4a09      	ldr	r2, [pc, #36]	; (8010934 <prvCheckTasksWaitingTermination+0x54>)
 8010910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010912:	f000 fed1 	bl	80116b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 f80e 	bl	8010938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801091c:	4b05      	ldr	r3, [pc, #20]	; (8010934 <prvCheckTasksWaitingTermination+0x54>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1e1      	bne.n	80108e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010924:	bf00      	nop
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20001048 	.word	0x20001048
 8010930:	20001074 	.word	0x20001074
 8010934:	2000105c 	.word	0x2000105c

08010938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010946:	2b00      	cmp	r3, #0
 8010948:	d108      	bne.n	801095c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801094e:	4618      	mov	r0, r3
 8010950:	f001 f860 	bl	8011a14 <vPortFree>
				vPortFree( pxTCB );
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f001 f85d 	bl	8011a14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801095a:	e017      	b.n	801098c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010962:	2b01      	cmp	r3, #1
 8010964:	d103      	bne.n	801096e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f001 f854 	bl	8011a14 <vPortFree>
	}
 801096c:	e00e      	b.n	801098c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010974:	2b02      	cmp	r3, #2
 8010976:	d009      	beq.n	801098c <prvDeleteTCB+0x54>
 8010978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097c:	f383 8811 	msr	BASEPRI, r3
 8010980:	f3bf 8f6f 	isb	sy
 8010984:	f3bf 8f4f 	dsb	sy
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	e7fe      	b.n	801098a <prvDeleteTCB+0x52>
	}
 801098c:	bf00      	nop
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801099a:	4b0c      	ldr	r3, [pc, #48]	; (80109cc <prvResetNextTaskUnblockTime+0x38>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d104      	bne.n	80109ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80109a4:	4b0a      	ldr	r3, [pc, #40]	; (80109d0 <prvResetNextTaskUnblockTime+0x3c>)
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80109ac:	e008      	b.n	80109c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ae:	4b07      	ldr	r3, [pc, #28]	; (80109cc <prvResetNextTaskUnblockTime+0x38>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	68db      	ldr	r3, [r3, #12]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	4a04      	ldr	r2, [pc, #16]	; (80109d0 <prvResetNextTaskUnblockTime+0x3c>)
 80109be:	6013      	str	r3, [r2, #0]
}
 80109c0:	bf00      	nop
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	2000102c 	.word	0x2000102c
 80109d0:	20001094 	.word	0x20001094

080109d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80109da:	4b0b      	ldr	r3, [pc, #44]	; (8010a08 <xTaskGetSchedulerState+0x34>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d102      	bne.n	80109e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80109e2:	2301      	movs	r3, #1
 80109e4:	607b      	str	r3, [r7, #4]
 80109e6:	e008      	b.n	80109fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109e8:	4b08      	ldr	r3, [pc, #32]	; (8010a0c <xTaskGetSchedulerState+0x38>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d102      	bne.n	80109f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80109f0:	2302      	movs	r3, #2
 80109f2:	607b      	str	r3, [r7, #4]
 80109f4:	e001      	b.n	80109fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80109f6:	2300      	movs	r3, #0
 80109f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80109fa:	687b      	ldr	r3, [r7, #4]
	}
 80109fc:	4618      	mov	r0, r3
 80109fe:	370c      	adds	r7, #12
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	20001080 	.word	0x20001080
 8010a0c:	2000109c 	.word	0x2000109c

08010a10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d051      	beq.n	8010aca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2a:	4b2a      	ldr	r3, [pc, #168]	; (8010ad4 <xTaskPriorityInherit+0xc4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d241      	bcs.n	8010ab8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	699b      	ldr	r3, [r3, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	db06      	blt.n	8010a4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a3c:	4b25      	ldr	r3, [pc, #148]	; (8010ad4 <xTaskPriorityInherit+0xc4>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	6959      	ldr	r1, [r3, #20]
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	4a1f      	ldr	r2, [pc, #124]	; (8010ad8 <xTaskPriorityInherit+0xc8>)
 8010a5c:	4413      	add	r3, r2
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	d122      	bne.n	8010aa8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	3304      	adds	r3, #4
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fe f9a6 	bl	800edb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a6c:	4b19      	ldr	r3, [pc, #100]	; (8010ad4 <xTaskPriorityInherit+0xc4>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a7a:	4b18      	ldr	r3, [pc, #96]	; (8010adc <xTaskPriorityInherit+0xcc>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d903      	bls.n	8010a8a <xTaskPriorityInherit+0x7a>
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a86:	4a15      	ldr	r2, [pc, #84]	; (8010adc <xTaskPriorityInherit+0xcc>)
 8010a88:	6013      	str	r3, [r2, #0]
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a8e:	4613      	mov	r3, r2
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4413      	add	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4a10      	ldr	r2, [pc, #64]	; (8010ad8 <xTaskPriorityInherit+0xc8>)
 8010a98:	441a      	add	r2, r3
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	f7fe f92c 	bl	800ecfe <vListInsertEnd>
 8010aa6:	e004      	b.n	8010ab2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <xTaskPriorityInherit+0xc4>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	60fb      	str	r3, [r7, #12]
 8010ab6:	e008      	b.n	8010aca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010abc:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <xTaskPriorityInherit+0xc4>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d201      	bcs.n	8010aca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010aca:	68fb      	ldr	r3, [r7, #12]
	}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	20000ba0 	.word	0x20000ba0
 8010ad8:	20000ba4 	.word	0x20000ba4
 8010adc:	2000107c 	.word	0x2000107c

08010ae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010aec:	2300      	movs	r3, #0
 8010aee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d054      	beq.n	8010ba0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010af6:	4b2d      	ldr	r3, [pc, #180]	; (8010bac <xTaskPriorityDisinherit+0xcc>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	693a      	ldr	r2, [r7, #16]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d009      	beq.n	8010b14 <xTaskPriorityDisinherit+0x34>
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	60fb      	str	r3, [r7, #12]
 8010b12:	e7fe      	b.n	8010b12 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d109      	bne.n	8010b30 <xTaskPriorityDisinherit+0x50>
 8010b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	60bb      	str	r3, [r7, #8]
 8010b2e:	e7fe      	b.n	8010b2e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b34:	1e5a      	subs	r2, r3, #1
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d02c      	beq.n	8010ba0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d128      	bne.n	8010ba0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	3304      	adds	r3, #4
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe f930 	bl	800edb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b70:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <xTaskPriorityDisinherit+0xd0>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d903      	bls.n	8010b80 <xTaskPriorityDisinherit+0xa0>
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b7c:	4a0c      	ldr	r2, [pc, #48]	; (8010bb0 <xTaskPriorityDisinherit+0xd0>)
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b84:	4613      	mov	r3, r2
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	4413      	add	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4a09      	ldr	r2, [pc, #36]	; (8010bb4 <xTaskPriorityDisinherit+0xd4>)
 8010b8e:	441a      	add	r2, r3
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	3304      	adds	r3, #4
 8010b94:	4619      	mov	r1, r3
 8010b96:	4610      	mov	r0, r2
 8010b98:	f7fe f8b1 	bl	800ecfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ba0:	697b      	ldr	r3, [r7, #20]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3718      	adds	r7, #24
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	20000ba0 	.word	0x20000ba0
 8010bb0:	2000107c 	.word	0x2000107c
 8010bb4:	20000ba4 	.word	0x20000ba4

08010bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b088      	sub	sp, #32
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d068      	beq.n	8010ca2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d109      	bne.n	8010bec <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	60fb      	str	r3, [r7, #12]
 8010bea:	e7fe      	b.n	8010bea <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bf0:	683a      	ldr	r2, [r7, #0]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d902      	bls.n	8010bfc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	61fb      	str	r3, [r7, #28]
 8010bfa:	e002      	b.n	8010c02 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c06:	69fa      	ldr	r2, [r7, #28]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d04a      	beq.n	8010ca2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d145      	bne.n	8010ca2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010c16:	4b25      	ldr	r3, [pc, #148]	; (8010cac <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	69ba      	ldr	r2, [r7, #24]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d109      	bne.n	8010c34 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8010c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	60bb      	str	r3, [r7, #8]
 8010c32:	e7fe      	b.n	8010c32 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	69fa      	ldr	r2, [r7, #28]
 8010c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	db04      	blt.n	8010c52 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c4e:	69bb      	ldr	r3, [r7, #24]
 8010c50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	6959      	ldr	r1, [r3, #20]
 8010c56:	693a      	ldr	r2, [r7, #16]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4a13      	ldr	r2, [pc, #76]	; (8010cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010c62:	4413      	add	r3, r2
 8010c64:	4299      	cmp	r1, r3
 8010c66:	d11c      	bne.n	8010ca2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fe f8a3 	bl	800edb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c76:	4b0f      	ldr	r3, [pc, #60]	; (8010cb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d903      	bls.n	8010c86 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c82:	4a0c      	ldr	r2, [pc, #48]	; (8010cb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	4413      	add	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4a07      	ldr	r2, [pc, #28]	; (8010cb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010c94:	441a      	add	r2, r3
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	3304      	adds	r3, #4
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	f7fe f82e 	bl	800ecfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ca2:	bf00      	nop
 8010ca4:	3720      	adds	r7, #32
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	20000ba0 	.word	0x20000ba0
 8010cb0:	20000ba4 	.word	0x20000ba4
 8010cb4:	2000107c 	.word	0x2000107c

08010cb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010cb8:	b480      	push	{r7}
 8010cba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010cbc:	4b07      	ldr	r3, [pc, #28]	; (8010cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010cc4:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cca:	3201      	adds	r2, #1
 8010ccc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010cce:	4b03      	ldr	r3, [pc, #12]	; (8010cdc <pvTaskIncrementMutexHeldCount+0x24>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
	}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20000ba0 	.word	0x20000ba0

08010ce0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010cea:	4b21      	ldr	r3, [pc, #132]	; (8010d70 <prvAddCurrentTaskToDelayedList+0x90>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cf0:	4b20      	ldr	r3, [pc, #128]	; (8010d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe f85e 	bl	800edb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d02:	d10a      	bne.n	8010d1a <prvAddCurrentTaskToDelayedList+0x3a>
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d007      	beq.n	8010d1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d0a:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3304      	adds	r3, #4
 8010d10:	4619      	mov	r1, r3
 8010d12:	4819      	ldr	r0, [pc, #100]	; (8010d78 <prvAddCurrentTaskToDelayedList+0x98>)
 8010d14:	f7fd fff3 	bl	800ecfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010d18:	e026      	b.n	8010d68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010d1a:	68fa      	ldr	r2, [r7, #12]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4413      	add	r3, r2
 8010d20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010d22:	4b14      	ldr	r3, [pc, #80]	; (8010d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d209      	bcs.n	8010d46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d32:	4b12      	ldr	r3, [pc, #72]	; (8010d7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	4b0f      	ldr	r3, [pc, #60]	; (8010d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	3304      	adds	r3, #4
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	4610      	mov	r0, r2
 8010d40:	f7fe f801 	bl	800ed46 <vListInsert>
}
 8010d44:	e010      	b.n	8010d68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010d46:	4b0e      	ldr	r3, [pc, #56]	; (8010d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f7fd fff7 	bl	800ed46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	68ba      	ldr	r2, [r7, #8]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d202      	bcs.n	8010d68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010d62:	4a08      	ldr	r2, [pc, #32]	; (8010d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	6013      	str	r3, [r2, #0]
}
 8010d68:	bf00      	nop
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	20001078 	.word	0x20001078
 8010d74:	20000ba0 	.word	0x20000ba0
 8010d78:	20001060 	.word	0x20001060
 8010d7c:	20001030 	.word	0x20001030
 8010d80:	2000102c 	.word	0x2000102c
 8010d84:	20001094 	.word	0x20001094

08010d88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b08a      	sub	sp, #40	; 0x28
 8010d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010d92:	f000 faff 	bl	8011394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010d96:	4b1c      	ldr	r3, [pc, #112]	; (8010e08 <xTimerCreateTimerTask+0x80>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d021      	beq.n	8010de2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010da2:	2300      	movs	r3, #0
 8010da4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010da6:	1d3a      	adds	r2, r7, #4
 8010da8:	f107 0108 	add.w	r1, r7, #8
 8010dac:	f107 030c 	add.w	r3, r7, #12
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fd ff5d 	bl	800ec70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010db6:	6879      	ldr	r1, [r7, #4]
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	9202      	str	r2, [sp, #8]
 8010dbe:	9301      	str	r3, [sp, #4]
 8010dc0:	2302      	movs	r3, #2
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	460a      	mov	r2, r1
 8010dc8:	4910      	ldr	r1, [pc, #64]	; (8010e0c <xTimerCreateTimerTask+0x84>)
 8010dca:	4811      	ldr	r0, [pc, #68]	; (8010e10 <xTimerCreateTimerTask+0x88>)
 8010dcc:	f7fe ff0e 	bl	800fbec <xTaskCreateStatic>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	4b10      	ldr	r3, [pc, #64]	; (8010e14 <xTimerCreateTimerTask+0x8c>)
 8010dd4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010dd6:	4b0f      	ldr	r3, [pc, #60]	; (8010e14 <xTimerCreateTimerTask+0x8c>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010dde:	2301      	movs	r3, #1
 8010de0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d109      	bne.n	8010dfc <xTimerCreateTimerTask+0x74>
 8010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	613b      	str	r3, [r7, #16]
 8010dfa:	e7fe      	b.n	8010dfa <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010dfc:	697b      	ldr	r3, [r7, #20]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	200010d0 	.word	0x200010d0
 8010e0c:	08014064 	.word	0x08014064
 8010e10:	08010f49 	.word	0x08010f49
 8010e14:	200010d4 	.word	0x200010d4

08010e18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b08a      	sub	sp, #40	; 0x28
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d109      	bne.n	8010e44 <xTimerGenericCommand+0x2c>
 8010e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e34:	f383 8811 	msr	BASEPRI, r3
 8010e38:	f3bf 8f6f 	isb	sy
 8010e3c:	f3bf 8f4f 	dsb	sy
 8010e40:	623b      	str	r3, [r7, #32]
 8010e42:	e7fe      	b.n	8010e42 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010e44:	4b19      	ldr	r3, [pc, #100]	; (8010eac <xTimerGenericCommand+0x94>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d02a      	beq.n	8010ea2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b05      	cmp	r3, #5
 8010e5c:	dc18      	bgt.n	8010e90 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010e5e:	f7ff fdb9 	bl	80109d4 <xTaskGetSchedulerState>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	d109      	bne.n	8010e7c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010e68:	4b10      	ldr	r3, [pc, #64]	; (8010eac <xTimerGenericCommand+0x94>)
 8010e6a:	6818      	ldr	r0, [r3, #0]
 8010e6c:	f107 0110 	add.w	r1, r7, #16
 8010e70:	2300      	movs	r3, #0
 8010e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e74:	f7fe f93a 	bl	800f0ec <xQueueGenericSend>
 8010e78:	6278      	str	r0, [r7, #36]	; 0x24
 8010e7a:	e012      	b.n	8010ea2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <xTimerGenericCommand+0x94>)
 8010e7e:	6818      	ldr	r0, [r3, #0]
 8010e80:	f107 0110 	add.w	r1, r7, #16
 8010e84:	2300      	movs	r3, #0
 8010e86:	2200      	movs	r2, #0
 8010e88:	f7fe f930 	bl	800f0ec <xQueueGenericSend>
 8010e8c:	6278      	str	r0, [r7, #36]	; 0x24
 8010e8e:	e008      	b.n	8010ea2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010e90:	4b06      	ldr	r3, [pc, #24]	; (8010eac <xTimerGenericCommand+0x94>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	f107 0110 	add.w	r1, r7, #16
 8010e98:	2300      	movs	r3, #0
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	f7fe fa20 	bl	800f2e0 <xQueueGenericSendFromISR>
 8010ea0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3728      	adds	r7, #40	; 0x28
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	200010d0 	.word	0x200010d0

08010eb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af02      	add	r7, sp, #8
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eba:	4b22      	ldr	r3, [pc, #136]	; (8010f44 <prvProcessExpiredTimer+0x94>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fd ff75 	bl	800edb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ed4:	f003 0304 	and.w	r3, r3, #4
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d021      	beq.n	8010f20 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	699a      	ldr	r2, [r3, #24]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	18d1      	adds	r1, r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	6978      	ldr	r0, [r7, #20]
 8010eea:	f000 f8d1 	bl	8011090 <prvInsertTimerInActiveList>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d01e      	beq.n	8010f32 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	2300      	movs	r3, #0
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	2100      	movs	r1, #0
 8010efe:	6978      	ldr	r0, [r7, #20]
 8010f00:	f7ff ff8a 	bl	8010e18 <xTimerGenericCommand>
 8010f04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d112      	bne.n	8010f32 <prvProcessExpiredTimer+0x82>
 8010f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f10:	f383 8811 	msr	BASEPRI, r3
 8010f14:	f3bf 8f6f 	isb	sy
 8010f18:	f3bf 8f4f 	dsb	sy
 8010f1c:	60fb      	str	r3, [r7, #12]
 8010f1e:	e7fe      	b.n	8010f1e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f26:	f023 0301 	bic.w	r3, r3, #1
 8010f2a:	b2da      	uxtb	r2, r3
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	6a1b      	ldr	r3, [r3, #32]
 8010f36:	6978      	ldr	r0, [r7, #20]
 8010f38:	4798      	blx	r3
}
 8010f3a:	bf00      	nop
 8010f3c:	3718      	adds	r7, #24
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	200010c8 	.word	0x200010c8

08010f48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f50:	f107 0308 	add.w	r3, r7, #8
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f857 	bl	8011008 <prvGetNextExpireTime>
 8010f5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f000 f803 	bl	8010f6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010f66:	f000 f8d5 	bl	8011114 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010f6a:	e7f1      	b.n	8010f50 <prvTimerTask+0x8>

08010f6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010f76:	f7ff f95b 	bl	8010230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f7a:	f107 0308 	add.w	r3, r7, #8
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f000 f866 	bl	8011050 <prvSampleTimeNow>
 8010f84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d130      	bne.n	8010fee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d10a      	bne.n	8010fa8 <prvProcessTimerOrBlockTask+0x3c>
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d806      	bhi.n	8010fa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010f9a:	f7ff f957 	bl	801024c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010f9e:	68f9      	ldr	r1, [r7, #12]
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7ff ff85 	bl	8010eb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010fa6:	e024      	b.n	8010ff2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d008      	beq.n	8010fc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010fae:	4b13      	ldr	r3, [pc, #76]	; (8010ffc <prvProcessTimerOrBlockTask+0x90>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <prvProcessTimerOrBlockTask+0x50>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e000      	b.n	8010fbe <prvProcessTimerOrBlockTask+0x52>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010fc0:	4b0f      	ldr	r3, [pc, #60]	; (8011000 <prvProcessTimerOrBlockTask+0x94>)
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	1ad3      	subs	r3, r2, r3
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	f7fe fdd9 	bl	800fb84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010fd2:	f7ff f93b 	bl	801024c <xTaskResumeAll>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010fdc:	4b09      	ldr	r3, [pc, #36]	; (8011004 <prvProcessTimerOrBlockTask+0x98>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
}
 8010fec:	e001      	b.n	8010ff2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010fee:	f7ff f92d 	bl	801024c <xTaskResumeAll>
}
 8010ff2:	bf00      	nop
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	200010cc 	.word	0x200010cc
 8011000:	200010d0 	.word	0x200010d0
 8011004:	e000ed04 	.word	0xe000ed04

08011008 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011010:	4b0e      	ldr	r3, [pc, #56]	; (801104c <prvGetNextExpireTime+0x44>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d101      	bne.n	801101e <prvGetNextExpireTime+0x16>
 801101a:	2201      	movs	r2, #1
 801101c:	e000      	b.n	8011020 <prvGetNextExpireTime+0x18>
 801101e:	2200      	movs	r2, #0
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d105      	bne.n	8011038 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801102c:	4b07      	ldr	r3, [pc, #28]	; (801104c <prvGetNextExpireTime+0x44>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	60fb      	str	r3, [r7, #12]
 8011036:	e001      	b.n	801103c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011038:	2300      	movs	r3, #0
 801103a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801103c:	68fb      	ldr	r3, [r7, #12]
}
 801103e:	4618      	mov	r0, r3
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop
 801104c:	200010c8 	.word	0x200010c8

08011050 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011058:	f7ff f994 	bl	8010384 <xTaskGetTickCount>
 801105c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801105e:	4b0b      	ldr	r3, [pc, #44]	; (801108c <prvSampleTimeNow+0x3c>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	429a      	cmp	r2, r3
 8011066:	d205      	bcs.n	8011074 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011068:	f000 f930 	bl	80112cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2201      	movs	r2, #1
 8011070:	601a      	str	r2, [r3, #0]
 8011072:	e002      	b.n	801107a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801107a:	4a04      	ldr	r2, [pc, #16]	; (801108c <prvSampleTimeNow+0x3c>)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011080:	68fb      	ldr	r3, [r7, #12]
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	200010d8 	.word	0x200010d8

08011090 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b086      	sub	sp, #24
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	607a      	str	r2, [r7, #4]
 801109c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801109e:	2300      	movs	r3, #0
 80110a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	68ba      	ldr	r2, [r7, #8]
 80110a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	68fa      	ldr	r2, [r7, #12]
 80110ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d812      	bhi.n	80110dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	1ad2      	subs	r2, r2, r3
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d302      	bcc.n	80110ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80110c4:	2301      	movs	r3, #1
 80110c6:	617b      	str	r3, [r7, #20]
 80110c8:	e01b      	b.n	8011102 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80110ca:	4b10      	ldr	r3, [pc, #64]	; (801110c <prvInsertTimerInActiveList+0x7c>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	3304      	adds	r3, #4
 80110d2:	4619      	mov	r1, r3
 80110d4:	4610      	mov	r0, r2
 80110d6:	f7fd fe36 	bl	800ed46 <vListInsert>
 80110da:	e012      	b.n	8011102 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d206      	bcs.n	80110f2 <prvInsertTimerInActiveList+0x62>
 80110e4:	68ba      	ldr	r2, [r7, #8]
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d302      	bcc.n	80110f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80110ec:	2301      	movs	r3, #1
 80110ee:	617b      	str	r3, [r7, #20]
 80110f0:	e007      	b.n	8011102 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110f2:	4b07      	ldr	r3, [pc, #28]	; (8011110 <prvInsertTimerInActiveList+0x80>)
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	3304      	adds	r3, #4
 80110fa:	4619      	mov	r1, r3
 80110fc:	4610      	mov	r0, r2
 80110fe:	f7fd fe22 	bl	800ed46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011102:	697b      	ldr	r3, [r7, #20]
}
 8011104:	4618      	mov	r0, r3
 8011106:	3718      	adds	r7, #24
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	200010cc 	.word	0x200010cc
 8011110:	200010c8 	.word	0x200010c8

08011114 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08e      	sub	sp, #56	; 0x38
 8011118:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801111a:	e0c6      	b.n	80112aa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	da17      	bge.n	8011152 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011122:	1d3b      	adds	r3, r7, #4
 8011124:	3304      	adds	r3, #4
 8011126:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112a:	2b00      	cmp	r3, #0
 801112c:	d109      	bne.n	8011142 <prvProcessReceivedCommands+0x2e>
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	61fb      	str	r3, [r7, #28]
 8011140:	e7fe      	b.n	8011140 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011148:	6850      	ldr	r0, [r2, #4]
 801114a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801114c:	6892      	ldr	r2, [r2, #8]
 801114e:	4611      	mov	r1, r2
 8011150:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	f2c0 80a7 	blt.w	80112a8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011160:	695b      	ldr	r3, [r3, #20]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d004      	beq.n	8011170 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	3304      	adds	r3, #4
 801116a:	4618      	mov	r0, r3
 801116c:	f7fd fe24 	bl	800edb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011170:	463b      	mov	r3, r7
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff ff6c 	bl	8011050 <prvSampleTimeNow>
 8011178:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2b09      	cmp	r3, #9
 801117e:	f200 8094 	bhi.w	80112aa <prvProcessReceivedCommands+0x196>
 8011182:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <prvProcessReceivedCommands+0x74>)
 8011184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011188:	080111b1 	.word	0x080111b1
 801118c:	080111b1 	.word	0x080111b1
 8011190:	080111b1 	.word	0x080111b1
 8011194:	08011223 	.word	0x08011223
 8011198:	08011237 	.word	0x08011237
 801119c:	0801127f 	.word	0x0801127f
 80111a0:	080111b1 	.word	0x080111b1
 80111a4:	080111b1 	.word	0x080111b1
 80111a8:	08011223 	.word	0x08011223
 80111ac:	08011237 	.word	0x08011237
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111b6:	f043 0301 	orr.w	r3, r3, #1
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80111c2:	68ba      	ldr	r2, [r7, #8]
 80111c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c6:	699b      	ldr	r3, [r3, #24]
 80111c8:	18d1      	adds	r1, r2, r3
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111d0:	f7ff ff5e 	bl	8011090 <prvInsertTimerInActiveList>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d067      	beq.n	80112aa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	6a1b      	ldr	r3, [r3, #32]
 80111de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111e8:	f003 0304 	and.w	r3, r3, #4
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d05c      	beq.n	80112aa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f4:	699b      	ldr	r3, [r3, #24]
 80111f6:	441a      	add	r2, r3
 80111f8:	2300      	movs	r3, #0
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	2300      	movs	r3, #0
 80111fe:	2100      	movs	r1, #0
 8011200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011202:	f7ff fe09 	bl	8010e18 <xTimerGenericCommand>
 8011206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d14d      	bne.n	80112aa <prvProcessReceivedCommands+0x196>
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	61bb      	str	r3, [r7, #24]
 8011220:	e7fe      	b.n	8011220 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011228:	f023 0301 	bic.w	r3, r3, #1
 801122c:	b2da      	uxtb	r2, r3
 801122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011234:	e039      	b.n	80112aa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801123c:	f043 0301 	orr.w	r3, r3, #1
 8011240:	b2da      	uxtb	r2, r3
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011248:	68ba      	ldr	r2, [r7, #8]
 801124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d109      	bne.n	801126a <prvProcessReceivedCommands+0x156>
 8011256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	617b      	str	r3, [r7, #20]
 8011268:	e7fe      	b.n	8011268 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801126c:	699a      	ldr	r2, [r3, #24]
 801126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011270:	18d1      	adds	r1, r2, r3
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011278:	f7ff ff0a 	bl	8011090 <prvInsertTimerInActiveList>
					break;
 801127c:	e015      	b.n	80112aa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011284:	f003 0302 	and.w	r3, r3, #2
 8011288:	2b00      	cmp	r3, #0
 801128a:	d103      	bne.n	8011294 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801128c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801128e:	f000 fbc1 	bl	8011a14 <vPortFree>
 8011292:	e00a      	b.n	80112aa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801129a:	f023 0301 	bic.w	r3, r3, #1
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80112a6:	e000      	b.n	80112aa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80112a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80112aa:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <prvProcessReceivedCommands+0x1b4>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	1d39      	adds	r1, r7, #4
 80112b0:	2200      	movs	r2, #0
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe f932 	bl	800f51c <xQueueReceive>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	f47f af2e 	bne.w	801111c <prvProcessReceivedCommands+0x8>
	}
}
 80112c0:	bf00      	nop
 80112c2:	3730      	adds	r7, #48	; 0x30
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	200010d0 	.word	0x200010d0

080112cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80112d2:	e047      	b.n	8011364 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112d4:	4b2d      	ldr	r3, [pc, #180]	; (801138c <prvSwitchTimerLists+0xc0>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112de:	4b2b      	ldr	r3, [pc, #172]	; (801138c <prvSwitchTimerLists+0xc0>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	3304      	adds	r3, #4
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fd fd63 	bl	800edb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6a1b      	ldr	r3, [r3, #32]
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d02d      	beq.n	8011364 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	699b      	ldr	r3, [r3, #24]
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	4413      	add	r3, r2
 8011310:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	429a      	cmp	r2, r3
 8011318:	d90e      	bls.n	8011338 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011326:	4b19      	ldr	r3, [pc, #100]	; (801138c <prvSwitchTimerLists+0xc0>)
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	3304      	adds	r3, #4
 801132e:	4619      	mov	r1, r3
 8011330:	4610      	mov	r0, r2
 8011332:	f7fd fd08 	bl	800ed46 <vListInsert>
 8011336:	e015      	b.n	8011364 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011338:	2300      	movs	r3, #0
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	2300      	movs	r3, #0
 801133e:	693a      	ldr	r2, [r7, #16]
 8011340:	2100      	movs	r1, #0
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f7ff fd68 	bl	8010e18 <xTimerGenericCommand>
 8011348:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d109      	bne.n	8011364 <prvSwitchTimerLists+0x98>
 8011350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011354:	f383 8811 	msr	BASEPRI, r3
 8011358:	f3bf 8f6f 	isb	sy
 801135c:	f3bf 8f4f 	dsb	sy
 8011360:	603b      	str	r3, [r7, #0]
 8011362:	e7fe      	b.n	8011362 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011364:	4b09      	ldr	r3, [pc, #36]	; (801138c <prvSwitchTimerLists+0xc0>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1b2      	bne.n	80112d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801136e:	4b07      	ldr	r3, [pc, #28]	; (801138c <prvSwitchTimerLists+0xc0>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011374:	4b06      	ldr	r3, [pc, #24]	; (8011390 <prvSwitchTimerLists+0xc4>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4a04      	ldr	r2, [pc, #16]	; (801138c <prvSwitchTimerLists+0xc0>)
 801137a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801137c:	4a04      	ldr	r2, [pc, #16]	; (8011390 <prvSwitchTimerLists+0xc4>)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	6013      	str	r3, [r2, #0]
}
 8011382:	bf00      	nop
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	200010c8 	.word	0x200010c8
 8011390:	200010cc 	.word	0x200010cc

08011394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801139a:	f000 f95f 	bl	801165c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801139e:	4b15      	ldr	r3, [pc, #84]	; (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d120      	bne.n	80113e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80113a6:	4814      	ldr	r0, [pc, #80]	; (80113f8 <prvCheckForValidListAndQueue+0x64>)
 80113a8:	f7fd fc7c 	bl	800eca4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80113ac:	4813      	ldr	r0, [pc, #76]	; (80113fc <prvCheckForValidListAndQueue+0x68>)
 80113ae:	f7fd fc79 	bl	800eca4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80113b2:	4b13      	ldr	r3, [pc, #76]	; (8011400 <prvCheckForValidListAndQueue+0x6c>)
 80113b4:	4a10      	ldr	r2, [pc, #64]	; (80113f8 <prvCheckForValidListAndQueue+0x64>)
 80113b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80113b8:	4b12      	ldr	r3, [pc, #72]	; (8011404 <prvCheckForValidListAndQueue+0x70>)
 80113ba:	4a10      	ldr	r2, [pc, #64]	; (80113fc <prvCheckForValidListAndQueue+0x68>)
 80113bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80113be:	2300      	movs	r3, #0
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	4b11      	ldr	r3, [pc, #68]	; (8011408 <prvCheckForValidListAndQueue+0x74>)
 80113c4:	4a11      	ldr	r2, [pc, #68]	; (801140c <prvCheckForValidListAndQueue+0x78>)
 80113c6:	2110      	movs	r1, #16
 80113c8:	200a      	movs	r0, #10
 80113ca:	f7fd fd87 	bl	800eedc <xQueueGenericCreateStatic>
 80113ce:	4602      	mov	r2, r0
 80113d0:	4b08      	ldr	r3, [pc, #32]	; (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80113d4:	4b07      	ldr	r3, [pc, #28]	; (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d005      	beq.n	80113e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80113dc:	4b05      	ldr	r3, [pc, #20]	; (80113f4 <prvCheckForValidListAndQueue+0x60>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	490b      	ldr	r1, [pc, #44]	; (8011410 <prvCheckForValidListAndQueue+0x7c>)
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fe fba6 	bl	800fb34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113e8:	f000 f966 	bl	80116b8 <vPortExitCritical>
}
 80113ec:	bf00      	nop
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	200010d0 	.word	0x200010d0
 80113f8:	200010a0 	.word	0x200010a0
 80113fc:	200010b4 	.word	0x200010b4
 8011400:	200010c8 	.word	0x200010c8
 8011404:	200010cc 	.word	0x200010cc
 8011408:	2000117c 	.word	0x2000117c
 801140c:	200010dc 	.word	0x200010dc
 8011410:	0801406c 	.word	0x0801406c

08011414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011414:	b480      	push	{r7}
 8011416:	b085      	sub	sp, #20
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	3b04      	subs	r3, #4
 8011424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801142c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	3b04      	subs	r3, #4
 8011432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	f023 0201 	bic.w	r2, r3, #1
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3b04      	subs	r3, #4
 8011442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011444:	4a0c      	ldr	r2, [pc, #48]	; (8011478 <pxPortInitialiseStack+0x64>)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	3b14      	subs	r3, #20
 801144e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	3b04      	subs	r3, #4
 801145a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f06f 0202 	mvn.w	r2, #2
 8011462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	3b20      	subs	r3, #32
 8011468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801146a:	68fb      	ldr	r3, [r7, #12]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3714      	adds	r7, #20
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr
 8011478:	0801147d 	.word	0x0801147d

0801147c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011486:	4b11      	ldr	r3, [pc, #68]	; (80114cc <prvTaskExitError+0x50>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801148e:	d009      	beq.n	80114a4 <prvTaskExitError+0x28>
 8011490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	60fb      	str	r3, [r7, #12]
 80114a2:	e7fe      	b.n	80114a2 <prvTaskExitError+0x26>
 80114a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a8:	f383 8811 	msr	BASEPRI, r3
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80114b6:	bf00      	nop
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d0fc      	beq.n	80114b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80114be:	bf00      	nop
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	2000015c 	.word	0x2000015c

080114d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80114d0:	4b07      	ldr	r3, [pc, #28]	; (80114f0 <pxCurrentTCBConst2>)
 80114d2:	6819      	ldr	r1, [r3, #0]
 80114d4:	6808      	ldr	r0, [r1, #0]
 80114d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114da:	f380 8809 	msr	PSP, r0
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f04f 0000 	mov.w	r0, #0
 80114e6:	f380 8811 	msr	BASEPRI, r0
 80114ea:	4770      	bx	lr
 80114ec:	f3af 8000 	nop.w

080114f0 <pxCurrentTCBConst2>:
 80114f0:	20000ba0 	.word	0x20000ba0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80114f4:	bf00      	nop
 80114f6:	bf00      	nop

080114f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80114f8:	4808      	ldr	r0, [pc, #32]	; (801151c <prvPortStartFirstTask+0x24>)
 80114fa:	6800      	ldr	r0, [r0, #0]
 80114fc:	6800      	ldr	r0, [r0, #0]
 80114fe:	f380 8808 	msr	MSP, r0
 8011502:	f04f 0000 	mov.w	r0, #0
 8011506:	f380 8814 	msr	CONTROL, r0
 801150a:	b662      	cpsie	i
 801150c:	b661      	cpsie	f
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	f3bf 8f6f 	isb	sy
 8011516:	df00      	svc	0
 8011518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801151a:	bf00      	nop
 801151c:	e000ed08 	.word	0xe000ed08

08011520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b086      	sub	sp, #24
 8011524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011526:	4b44      	ldr	r3, [pc, #272]	; (8011638 <xPortStartScheduler+0x118>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a44      	ldr	r2, [pc, #272]	; (801163c <xPortStartScheduler+0x11c>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d109      	bne.n	8011544 <xPortStartScheduler+0x24>
 8011530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011534:	f383 8811 	msr	BASEPRI, r3
 8011538:	f3bf 8f6f 	isb	sy
 801153c:	f3bf 8f4f 	dsb	sy
 8011540:	613b      	str	r3, [r7, #16]
 8011542:	e7fe      	b.n	8011542 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011544:	4b3c      	ldr	r3, [pc, #240]	; (8011638 <xPortStartScheduler+0x118>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a3d      	ldr	r2, [pc, #244]	; (8011640 <xPortStartScheduler+0x120>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d109      	bne.n	8011562 <xPortStartScheduler+0x42>
 801154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	e7fe      	b.n	8011560 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011562:	4b38      	ldr	r3, [pc, #224]	; (8011644 <xPortStartScheduler+0x124>)
 8011564:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	b2db      	uxtb	r3, r3
 801156c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	22ff      	movs	r2, #255	; 0xff
 8011572:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	b2db      	uxtb	r3, r3
 801157a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801157c:	78fb      	ldrb	r3, [r7, #3]
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011584:	b2da      	uxtb	r2, r3
 8011586:	4b30      	ldr	r3, [pc, #192]	; (8011648 <xPortStartScheduler+0x128>)
 8011588:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801158a:	4b30      	ldr	r3, [pc, #192]	; (801164c <xPortStartScheduler+0x12c>)
 801158c:	2207      	movs	r2, #7
 801158e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011590:	e009      	b.n	80115a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011592:	4b2e      	ldr	r3, [pc, #184]	; (801164c <xPortStartScheduler+0x12c>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	3b01      	subs	r3, #1
 8011598:	4a2c      	ldr	r2, [pc, #176]	; (801164c <xPortStartScheduler+0x12c>)
 801159a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801159c:	78fb      	ldrb	r3, [r7, #3]
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80115a6:	78fb      	ldrb	r3, [r7, #3]
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ae:	2b80      	cmp	r3, #128	; 0x80
 80115b0:	d0ef      	beq.n	8011592 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80115b2:	4b26      	ldr	r3, [pc, #152]	; (801164c <xPortStartScheduler+0x12c>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f1c3 0307 	rsb	r3, r3, #7
 80115ba:	2b04      	cmp	r3, #4
 80115bc:	d009      	beq.n	80115d2 <xPortStartScheduler+0xb2>
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	60bb      	str	r3, [r7, #8]
 80115d0:	e7fe      	b.n	80115d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80115d2:	4b1e      	ldr	r3, [pc, #120]	; (801164c <xPortStartScheduler+0x12c>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	021b      	lsls	r3, r3, #8
 80115d8:	4a1c      	ldr	r2, [pc, #112]	; (801164c <xPortStartScheduler+0x12c>)
 80115da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80115dc:	4b1b      	ldr	r3, [pc, #108]	; (801164c <xPortStartScheduler+0x12c>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80115e4:	4a19      	ldr	r2, [pc, #100]	; (801164c <xPortStartScheduler+0x12c>)
 80115e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	b2da      	uxtb	r2, r3
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80115f0:	4b17      	ldr	r3, [pc, #92]	; (8011650 <xPortStartScheduler+0x130>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a16      	ldr	r2, [pc, #88]	; (8011650 <xPortStartScheduler+0x130>)
 80115f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80115fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80115fc:	4b14      	ldr	r3, [pc, #80]	; (8011650 <xPortStartScheduler+0x130>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	4a13      	ldr	r2, [pc, #76]	; (8011650 <xPortStartScheduler+0x130>)
 8011602:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011606:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011608:	f000 f8d6 	bl	80117b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801160c:	4b11      	ldr	r3, [pc, #68]	; (8011654 <xPortStartScheduler+0x134>)
 801160e:	2200      	movs	r2, #0
 8011610:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011612:	f000 f8f5 	bl	8011800 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011616:	4b10      	ldr	r3, [pc, #64]	; (8011658 <xPortStartScheduler+0x138>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a0f      	ldr	r2, [pc, #60]	; (8011658 <xPortStartScheduler+0x138>)
 801161c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011620:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011622:	f7ff ff69 	bl	80114f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011626:	f7fe ff75 	bl	8010514 <vTaskSwitchContext>
	prvTaskExitError();
 801162a:	f7ff ff27 	bl	801147c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3718      	adds	r7, #24
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	e000ed00 	.word	0xe000ed00
 801163c:	410fc271 	.word	0x410fc271
 8011640:	410fc270 	.word	0x410fc270
 8011644:	e000e400 	.word	0xe000e400
 8011648:	200011cc 	.word	0x200011cc
 801164c:	200011d0 	.word	0x200011d0
 8011650:	e000ed20 	.word	0xe000ed20
 8011654:	2000015c 	.word	0x2000015c
 8011658:	e000ef34 	.word	0xe000ef34

0801165c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
 8011672:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011674:	4b0e      	ldr	r3, [pc, #56]	; (80116b0 <vPortEnterCritical+0x54>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	3301      	adds	r3, #1
 801167a:	4a0d      	ldr	r2, [pc, #52]	; (80116b0 <vPortEnterCritical+0x54>)
 801167c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801167e:	4b0c      	ldr	r3, [pc, #48]	; (80116b0 <vPortEnterCritical+0x54>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b01      	cmp	r3, #1
 8011684:	d10e      	bne.n	80116a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011686:	4b0b      	ldr	r3, [pc, #44]	; (80116b4 <vPortEnterCritical+0x58>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d009      	beq.n	80116a4 <vPortEnterCritical+0x48>
 8011690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011694:	f383 8811 	msr	BASEPRI, r3
 8011698:	f3bf 8f6f 	isb	sy
 801169c:	f3bf 8f4f 	dsb	sy
 80116a0:	603b      	str	r3, [r7, #0]
 80116a2:	e7fe      	b.n	80116a2 <vPortEnterCritical+0x46>
	}
}
 80116a4:	bf00      	nop
 80116a6:	370c      	adds	r7, #12
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	2000015c 	.word	0x2000015c
 80116b4:	e000ed04 	.word	0xe000ed04

080116b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80116be:	4b11      	ldr	r3, [pc, #68]	; (8011704 <vPortExitCritical+0x4c>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d109      	bne.n	80116da <vPortExitCritical+0x22>
 80116c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ca:	f383 8811 	msr	BASEPRI, r3
 80116ce:	f3bf 8f6f 	isb	sy
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	607b      	str	r3, [r7, #4]
 80116d8:	e7fe      	b.n	80116d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80116da:	4b0a      	ldr	r3, [pc, #40]	; (8011704 <vPortExitCritical+0x4c>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	3b01      	subs	r3, #1
 80116e0:	4a08      	ldr	r2, [pc, #32]	; (8011704 <vPortExitCritical+0x4c>)
 80116e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80116e4:	4b07      	ldr	r3, [pc, #28]	; (8011704 <vPortExitCritical+0x4c>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d104      	bne.n	80116f6 <vPortExitCritical+0x3e>
 80116ec:	2300      	movs	r3, #0
 80116ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80116f6:	bf00      	nop
 80116f8:	370c      	adds	r7, #12
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	2000015c 	.word	0x2000015c
	...

08011710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011710:	f3ef 8009 	mrs	r0, PSP
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	4b15      	ldr	r3, [pc, #84]	; (8011770 <pxCurrentTCBConst>)
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	f01e 0f10 	tst.w	lr, #16
 8011720:	bf08      	it	eq
 8011722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172a:	6010      	str	r0, [r2, #0]
 801172c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011734:	f380 8811 	msr	BASEPRI, r0
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f7fe fee8 	bl	8010514 <vTaskSwitchContext>
 8011744:	f04f 0000 	mov.w	r0, #0
 8011748:	f380 8811 	msr	BASEPRI, r0
 801174c:	bc09      	pop	{r0, r3}
 801174e:	6819      	ldr	r1, [r3, #0]
 8011750:	6808      	ldr	r0, [r1, #0]
 8011752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011756:	f01e 0f10 	tst.w	lr, #16
 801175a:	bf08      	it	eq
 801175c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011760:	f380 8809 	msr	PSP, r0
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	f3af 8000 	nop.w

08011770 <pxCurrentTCBConst>:
 8011770:	20000ba0 	.word	0x20000ba0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011774:	bf00      	nop
 8011776:	bf00      	nop

08011778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011790:	f7fe fe08 	bl	80103a4 <xTaskIncrementTick>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d003      	beq.n	80117a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801179a:	4b06      	ldr	r3, [pc, #24]	; (80117b4 <SysTick_Handler+0x3c>)
 801179c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	2300      	movs	r3, #0
 80117a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80117ac:	bf00      	nop
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	e000ed04 	.word	0xe000ed04

080117b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80117b8:	b480      	push	{r7}
 80117ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80117bc:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <vPortSetupTimerInterrupt+0x34>)
 80117be:	2200      	movs	r2, #0
 80117c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80117c2:	4b0b      	ldr	r3, [pc, #44]	; (80117f0 <vPortSetupTimerInterrupt+0x38>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80117c8:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <vPortSetupTimerInterrupt+0x3c>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4a0a      	ldr	r2, [pc, #40]	; (80117f8 <vPortSetupTimerInterrupt+0x40>)
 80117ce:	fba2 2303 	umull	r2, r3, r2, r3
 80117d2:	099b      	lsrs	r3, r3, #6
 80117d4:	4a09      	ldr	r2, [pc, #36]	; (80117fc <vPortSetupTimerInterrupt+0x44>)
 80117d6:	3b01      	subs	r3, #1
 80117d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80117da:	4b04      	ldr	r3, [pc, #16]	; (80117ec <vPortSetupTimerInterrupt+0x34>)
 80117dc:	2207      	movs	r2, #7
 80117de:	601a      	str	r2, [r3, #0]
}
 80117e0:	bf00      	nop
 80117e2:	46bd      	mov	sp, r7
 80117e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	e000e010 	.word	0xe000e010
 80117f0:	e000e018 	.word	0xe000e018
 80117f4:	20000040 	.word	0x20000040
 80117f8:	10624dd3 	.word	0x10624dd3
 80117fc:	e000e014 	.word	0xe000e014

08011800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011810 <vPortEnableVFP+0x10>
 8011804:	6801      	ldr	r1, [r0, #0]
 8011806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801180a:	6001      	str	r1, [r0, #0]
 801180c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801180e:	bf00      	nop
 8011810:	e000ed88 	.word	0xe000ed88

08011814 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801181a:	f3ef 8305 	mrs	r3, IPSR
 801181e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2b0f      	cmp	r3, #15
 8011824:	d913      	bls.n	801184e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011826:	4a16      	ldr	r2, [pc, #88]	; (8011880 <vPortValidateInterruptPriority+0x6c>)
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	4413      	add	r3, r2
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011830:	4b14      	ldr	r3, [pc, #80]	; (8011884 <vPortValidateInterruptPriority+0x70>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	7afa      	ldrb	r2, [r7, #11]
 8011836:	429a      	cmp	r2, r3
 8011838:	d209      	bcs.n	801184e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	607b      	str	r3, [r7, #4]
 801184c:	e7fe      	b.n	801184c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801184e:	4b0e      	ldr	r3, [pc, #56]	; (8011888 <vPortValidateInterruptPriority+0x74>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011856:	4b0d      	ldr	r3, [pc, #52]	; (801188c <vPortValidateInterruptPriority+0x78>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	429a      	cmp	r2, r3
 801185c:	d909      	bls.n	8011872 <vPortValidateInterruptPriority+0x5e>
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	603b      	str	r3, [r7, #0]
 8011870:	e7fe      	b.n	8011870 <vPortValidateInterruptPriority+0x5c>
	}
 8011872:	bf00      	nop
 8011874:	3714      	adds	r7, #20
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	e000e3f0 	.word	0xe000e3f0
 8011884:	200011cc 	.word	0x200011cc
 8011888:	e000ed0c 	.word	0xe000ed0c
 801188c:	200011d0 	.word	0x200011d0

08011890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b08a      	sub	sp, #40	; 0x28
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011898:	2300      	movs	r3, #0
 801189a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801189c:	f7fe fcc8 	bl	8010230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80118a0:	4b57      	ldr	r3, [pc, #348]	; (8011a00 <pvPortMalloc+0x170>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d101      	bne.n	80118ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80118a8:	f000 f90c 	bl	8011ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80118ac:	4b55      	ldr	r3, [pc, #340]	; (8011a04 <pvPortMalloc+0x174>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	4013      	ands	r3, r2
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f040 808c 	bne.w	80119d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d01c      	beq.n	80118fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80118c0:	2208      	movs	r2, #8
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4413      	add	r3, r2
 80118c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f003 0307 	and.w	r3, r3, #7
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d013      	beq.n	80118fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f023 0307 	bic.w	r3, r3, #7
 80118d8:	3308      	adds	r3, #8
 80118da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f003 0307 	and.w	r3, r3, #7
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d009      	beq.n	80118fa <pvPortMalloc+0x6a>
 80118e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	617b      	str	r3, [r7, #20]
 80118f8:	e7fe      	b.n	80118f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d068      	beq.n	80119d2 <pvPortMalloc+0x142>
 8011900:	4b41      	ldr	r3, [pc, #260]	; (8011a08 <pvPortMalloc+0x178>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	429a      	cmp	r2, r3
 8011908:	d863      	bhi.n	80119d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801190a:	4b40      	ldr	r3, [pc, #256]	; (8011a0c <pvPortMalloc+0x17c>)
 801190c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801190e:	4b3f      	ldr	r3, [pc, #252]	; (8011a0c <pvPortMalloc+0x17c>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011914:	e004      	b.n	8011920 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	429a      	cmp	r2, r3
 8011928:	d903      	bls.n	8011932 <pvPortMalloc+0xa2>
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1f1      	bne.n	8011916 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011932:	4b33      	ldr	r3, [pc, #204]	; (8011a00 <pvPortMalloc+0x170>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011938:	429a      	cmp	r2, r3
 801193a:	d04a      	beq.n	80119d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801193c:	6a3b      	ldr	r3, [r7, #32]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2208      	movs	r2, #8
 8011942:	4413      	add	r3, r2
 8011944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	6a3b      	ldr	r3, [r7, #32]
 801194c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011950:	685a      	ldr	r2, [r3, #4]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	1ad2      	subs	r2, r2, r3
 8011956:	2308      	movs	r3, #8
 8011958:	005b      	lsls	r3, r3, #1
 801195a:	429a      	cmp	r2, r3
 801195c:	d91e      	bls.n	801199c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4413      	add	r3, r2
 8011964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	f003 0307 	and.w	r3, r3, #7
 801196c:	2b00      	cmp	r3, #0
 801196e:	d009      	beq.n	8011984 <pvPortMalloc+0xf4>
 8011970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	613b      	str	r3, [r7, #16]
 8011982:	e7fe      	b.n	8011982 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	1ad2      	subs	r2, r2, r3
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011996:	69b8      	ldr	r0, [r7, #24]
 8011998:	f000 f8f6 	bl	8011b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801199c:	4b1a      	ldr	r3, [pc, #104]	; (8011a08 <pvPortMalloc+0x178>)
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	4a18      	ldr	r2, [pc, #96]	; (8011a08 <pvPortMalloc+0x178>)
 80119a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80119aa:	4b17      	ldr	r3, [pc, #92]	; (8011a08 <pvPortMalloc+0x178>)
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	4b18      	ldr	r3, [pc, #96]	; (8011a10 <pvPortMalloc+0x180>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d203      	bcs.n	80119be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80119b6:	4b14      	ldr	r3, [pc, #80]	; (8011a08 <pvPortMalloc+0x178>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a15      	ldr	r2, [pc, #84]	; (8011a10 <pvPortMalloc+0x180>)
 80119bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80119be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	4b10      	ldr	r3, [pc, #64]	; (8011a04 <pvPortMalloc+0x174>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	431a      	orrs	r2, r3
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80119cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ce:	2200      	movs	r2, #0
 80119d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80119d2:	f7fe fc3b 	bl	801024c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	f003 0307 	and.w	r3, r3, #7
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d009      	beq.n	80119f4 <pvPortMalloc+0x164>
 80119e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e4:	f383 8811 	msr	BASEPRI, r3
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	f3bf 8f4f 	dsb	sy
 80119f0:	60fb      	str	r3, [r7, #12]
 80119f2:	e7fe      	b.n	80119f2 <pvPortMalloc+0x162>
	return pvReturn;
 80119f4:	69fb      	ldr	r3, [r7, #28]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3728      	adds	r7, #40	; 0x28
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	2000d52c 	.word	0x2000d52c
 8011a04:	2000d538 	.word	0x2000d538
 8011a08:	2000d530 	.word	0x2000d530
 8011a0c:	2000d524 	.word	0x2000d524
 8011a10:	2000d534 	.word	0x2000d534

08011a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d046      	beq.n	8011ab4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011a26:	2308      	movs	r3, #8
 8011a28:	425b      	negs	r3, r3
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	685a      	ldr	r2, [r3, #4]
 8011a38:	4b20      	ldr	r3, [pc, #128]	; (8011abc <vPortFree+0xa8>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d109      	bne.n	8011a56 <vPortFree+0x42>
 8011a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	60fb      	str	r3, [r7, #12]
 8011a54:	e7fe      	b.n	8011a54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d009      	beq.n	8011a72 <vPortFree+0x5e>
 8011a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	60bb      	str	r3, [r7, #8]
 8011a70:	e7fe      	b.n	8011a70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	4b11      	ldr	r3, [pc, #68]	; (8011abc <vPortFree+0xa8>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d019      	beq.n	8011ab4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d115      	bne.n	8011ab4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	4b0b      	ldr	r3, [pc, #44]	; (8011abc <vPortFree+0xa8>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	43db      	mvns	r3, r3
 8011a92:	401a      	ands	r2, r3
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011a98:	f7fe fbca 	bl	8010230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	4b07      	ldr	r3, [pc, #28]	; (8011ac0 <vPortFree+0xac>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4413      	add	r3, r2
 8011aa6:	4a06      	ldr	r2, [pc, #24]	; (8011ac0 <vPortFree+0xac>)
 8011aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011aaa:	6938      	ldr	r0, [r7, #16]
 8011aac:	f000 f86c 	bl	8011b88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011ab0:	f7fe fbcc 	bl	801024c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011ab4:	bf00      	nop
 8011ab6:	3718      	adds	r7, #24
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	2000d538 	.word	0x2000d538
 8011ac0:	2000d530 	.word	0x2000d530

08011ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011aca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ad0:	4b27      	ldr	r3, [pc, #156]	; (8011b70 <prvHeapInit+0xac>)
 8011ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f003 0307 	and.w	r3, r3, #7
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00c      	beq.n	8011af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	3307      	adds	r3, #7
 8011ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f023 0307 	bic.w	r3, r3, #7
 8011aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	1ad3      	subs	r3, r2, r3
 8011af2:	4a1f      	ldr	r2, [pc, #124]	; (8011b70 <prvHeapInit+0xac>)
 8011af4:	4413      	add	r3, r2
 8011af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011afc:	4a1d      	ldr	r2, [pc, #116]	; (8011b74 <prvHeapInit+0xb0>)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011b02:	4b1c      	ldr	r3, [pc, #112]	; (8011b74 <prvHeapInit+0xb0>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	68ba      	ldr	r2, [r7, #8]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011b10:	2208      	movs	r2, #8
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	1a9b      	subs	r3, r3, r2
 8011b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f023 0307 	bic.w	r3, r3, #7
 8011b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	4a15      	ldr	r2, [pc, #84]	; (8011b78 <prvHeapInit+0xb4>)
 8011b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <prvHeapInit+0xb4>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011b2e:	4b12      	ldr	r3, [pc, #72]	; (8011b78 <prvHeapInit+0xb4>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2200      	movs	r2, #0
 8011b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	1ad2      	subs	r2, r2, r3
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011b44:	4b0c      	ldr	r3, [pc, #48]	; (8011b78 <prvHeapInit+0xb4>)
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	4a0a      	ldr	r2, [pc, #40]	; (8011b7c <prvHeapInit+0xb8>)
 8011b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	4a09      	ldr	r2, [pc, #36]	; (8011b80 <prvHeapInit+0xbc>)
 8011b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011b5c:	4b09      	ldr	r3, [pc, #36]	; (8011b84 <prvHeapInit+0xc0>)
 8011b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011b62:	601a      	str	r2, [r3, #0]
}
 8011b64:	bf00      	nop
 8011b66:	3714      	adds	r7, #20
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr
 8011b70:	200011d4 	.word	0x200011d4
 8011b74:	2000d524 	.word	0x2000d524
 8011b78:	2000d52c 	.word	0x2000d52c
 8011b7c:	2000d534 	.word	0x2000d534
 8011b80:	2000d530 	.word	0x2000d530
 8011b84:	2000d538 	.word	0x2000d538

08011b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b085      	sub	sp, #20
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011b90:	4b28      	ldr	r3, [pc, #160]	; (8011c34 <prvInsertBlockIntoFreeList+0xac>)
 8011b92:	60fb      	str	r3, [r7, #12]
 8011b94:	e002      	b.n	8011b9c <prvInsertBlockIntoFreeList+0x14>
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	60fb      	str	r3, [r7, #12]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d8f7      	bhi.n	8011b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d108      	bne.n	8011bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	685a      	ldr	r2, [r3, #4]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	441a      	add	r2, r3
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	441a      	add	r2, r3
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d118      	bne.n	8011c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	4b15      	ldr	r3, [pc, #84]	; (8011c38 <prvInsertBlockIntoFreeList+0xb0>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d00d      	beq.n	8011c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	685a      	ldr	r2, [r3, #4]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	441a      	add	r2, r3
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	e008      	b.n	8011c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011c06:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <prvInsertBlockIntoFreeList+0xb0>)
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	e003      	b.n	8011c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011c18:	68fa      	ldr	r2, [r7, #12]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d002      	beq.n	8011c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c26:	bf00      	nop
 8011c28:	3714      	adds	r7, #20
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	2000d524 	.word	0x2000d524
 8011c38:	2000d52c 	.word	0x2000d52c

08011c3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011c40:	2200      	movs	r2, #0
 8011c42:	4912      	ldr	r1, [pc, #72]	; (8011c8c <MX_USB_DEVICE_Init+0x50>)
 8011c44:	4812      	ldr	r0, [pc, #72]	; (8011c90 <MX_USB_DEVICE_Init+0x54>)
 8011c46:	f7fb fdba 	bl	800d7be <USBD_Init>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011c50:	f7f0 fb7a 	bl	8002348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011c54:	490f      	ldr	r1, [pc, #60]	; (8011c94 <MX_USB_DEVICE_Init+0x58>)
 8011c56:	480e      	ldr	r0, [pc, #56]	; (8011c90 <MX_USB_DEVICE_Init+0x54>)
 8011c58:	f7fb fddc 	bl	800d814 <USBD_RegisterClass>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011c62:	f7f0 fb71 	bl	8002348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011c66:	490c      	ldr	r1, [pc, #48]	; (8011c98 <MX_USB_DEVICE_Init+0x5c>)
 8011c68:	4809      	ldr	r0, [pc, #36]	; (8011c90 <MX_USB_DEVICE_Init+0x54>)
 8011c6a:	f7fb fd39 	bl	800d6e0 <USBD_CDC_RegisterInterface>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011c74:	f7f0 fb68 	bl	8002348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011c78:	4805      	ldr	r0, [pc, #20]	; (8011c90 <MX_USB_DEVICE_Init+0x54>)
 8011c7a:	f7fb fde5 	bl	800d848 <USBD_Start>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011c84:	f7f0 fb60 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011c88:	bf00      	nop
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	20000170 	.word	0x20000170
 8011c90:	2000ec00 	.word	0x2000ec00
 8011c94:	20000058 	.word	0x20000058
 8011c98:	20000160 	.word	0x20000160

08011c9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	4905      	ldr	r1, [pc, #20]	; (8011cb8 <CDC_Init_FS+0x1c>)
 8011ca4:	4805      	ldr	r0, [pc, #20]	; (8011cbc <CDC_Init_FS+0x20>)
 8011ca6:	f7fb fd32 	bl	800d70e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011caa:	4905      	ldr	r1, [pc, #20]	; (8011cc0 <CDC_Init_FS+0x24>)
 8011cac:	4803      	ldr	r0, [pc, #12]	; (8011cbc <CDC_Init_FS+0x20>)
 8011cae:	f7fb fd48 	bl	800d742 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011cb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	2000f6c4 	.word	0x2000f6c4
 8011cbc:	2000ec00 	.word	0x2000ec00
 8011cc0:	2000eec4 	.word	0x2000eec4

08011cc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011cc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	6039      	str	r1, [r7, #0]
 8011cde:	71fb      	strb	r3, [r7, #7]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011ce4:	79fb      	ldrb	r3, [r7, #7]
 8011ce6:	2b23      	cmp	r3, #35	; 0x23
 8011ce8:	d84a      	bhi.n	8011d80 <CDC_Control_FS+0xac>
 8011cea:	a201      	add	r2, pc, #4	; (adr r2, 8011cf0 <CDC_Control_FS+0x1c>)
 8011cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf0:	08011d81 	.word	0x08011d81
 8011cf4:	08011d81 	.word	0x08011d81
 8011cf8:	08011d81 	.word	0x08011d81
 8011cfc:	08011d81 	.word	0x08011d81
 8011d00:	08011d81 	.word	0x08011d81
 8011d04:	08011d81 	.word	0x08011d81
 8011d08:	08011d81 	.word	0x08011d81
 8011d0c:	08011d81 	.word	0x08011d81
 8011d10:	08011d81 	.word	0x08011d81
 8011d14:	08011d81 	.word	0x08011d81
 8011d18:	08011d81 	.word	0x08011d81
 8011d1c:	08011d81 	.word	0x08011d81
 8011d20:	08011d81 	.word	0x08011d81
 8011d24:	08011d81 	.word	0x08011d81
 8011d28:	08011d81 	.word	0x08011d81
 8011d2c:	08011d81 	.word	0x08011d81
 8011d30:	08011d81 	.word	0x08011d81
 8011d34:	08011d81 	.word	0x08011d81
 8011d38:	08011d81 	.word	0x08011d81
 8011d3c:	08011d81 	.word	0x08011d81
 8011d40:	08011d81 	.word	0x08011d81
 8011d44:	08011d81 	.word	0x08011d81
 8011d48:	08011d81 	.word	0x08011d81
 8011d4c:	08011d81 	.word	0x08011d81
 8011d50:	08011d81 	.word	0x08011d81
 8011d54:	08011d81 	.word	0x08011d81
 8011d58:	08011d81 	.word	0x08011d81
 8011d5c:	08011d81 	.word	0x08011d81
 8011d60:	08011d81 	.word	0x08011d81
 8011d64:	08011d81 	.word	0x08011d81
 8011d68:	08011d81 	.word	0x08011d81
 8011d6c:	08011d81 	.word	0x08011d81
 8011d70:	08011d81 	.word	0x08011d81
 8011d74:	08011d81 	.word	0x08011d81
 8011d78:	08011d81 	.word	0x08011d81
 8011d7c:	08011d81 	.word	0x08011d81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011d80:	bf00      	nop
  }

  return (USBD_OK);
 8011d82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	370c      	adds	r7, #12
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011d9a:	6879      	ldr	r1, [r7, #4]
 8011d9c:	4805      	ldr	r0, [pc, #20]	; (8011db4 <CDC_Receive_FS+0x24>)
 8011d9e:	f7fb fcd0 	bl	800d742 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011da2:	4804      	ldr	r0, [pc, #16]	; (8011db4 <CDC_Receive_FS+0x24>)
 8011da4:	f7fb fce1 	bl	800d76a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011da8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2000ec00 	.word	0x2000ec00

08011db8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	6039      	str	r1, [r7, #0]
 8011dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2212      	movs	r2, #18
 8011dc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011dca:	4b03      	ldr	r3, [pc, #12]	; (8011dd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr
 8011dd8:	20000190 	.word	0x20000190

08011ddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	4603      	mov	r3, r0
 8011de4:	6039      	str	r1, [r7, #0]
 8011de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2204      	movs	r2, #4
 8011dec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011dee:	4b03      	ldr	r3, [pc, #12]	; (8011dfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	200001b0 	.word	0x200001b0

08011e00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	4603      	mov	r3, r0
 8011e08:	6039      	str	r1, [r7, #0]
 8011e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e0c:	79fb      	ldrb	r3, [r7, #7]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d105      	bne.n	8011e1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e12:	683a      	ldr	r2, [r7, #0]
 8011e14:	4907      	ldr	r1, [pc, #28]	; (8011e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e16:	4808      	ldr	r0, [pc, #32]	; (8011e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e18:	f7fc fcec 	bl	800e7f4 <USBD_GetString>
 8011e1c:	e004      	b.n	8011e28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e1e:	683a      	ldr	r2, [r7, #0]
 8011e20:	4904      	ldr	r1, [pc, #16]	; (8011e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e22:	4805      	ldr	r0, [pc, #20]	; (8011e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e24:	f7fc fce6 	bl	800e7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e28:	4b02      	ldr	r3, [pc, #8]	; (8011e34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	2000fec4 	.word	0x2000fec4
 8011e38:	08014074 	.word	0x08014074

08011e3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	4603      	mov	r3, r0
 8011e44:	6039      	str	r1, [r7, #0]
 8011e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	4904      	ldr	r1, [pc, #16]	; (8011e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011e4c:	4804      	ldr	r0, [pc, #16]	; (8011e60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011e4e:	f7fc fcd1 	bl	800e7f4 <USBD_GetString>
  return USBD_StrDesc;
 8011e52:	4b02      	ldr	r3, [pc, #8]	; (8011e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3708      	adds	r7, #8
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	2000fec4 	.word	0x2000fec4
 8011e60:	0801408c 	.word	0x0801408c

08011e64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	6039      	str	r1, [r7, #0]
 8011e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	221a      	movs	r2, #26
 8011e74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011e76:	f000 f855 	bl	8011f24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011e7a:	4b02      	ldr	r3, [pc, #8]	; (8011e84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	200001b4 	.word	0x200001b4

08011e88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	4603      	mov	r3, r0
 8011e90:	6039      	str	r1, [r7, #0]
 8011e92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e94:	79fb      	ldrb	r3, [r7, #7]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d105      	bne.n	8011ea6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	4907      	ldr	r1, [pc, #28]	; (8011ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e9e:	4808      	ldr	r0, [pc, #32]	; (8011ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011ea0:	f7fc fca8 	bl	800e7f4 <USBD_GetString>
 8011ea4:	e004      	b.n	8011eb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011ea6:	683a      	ldr	r2, [r7, #0]
 8011ea8:	4904      	ldr	r1, [pc, #16]	; (8011ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8011eaa:	4805      	ldr	r0, [pc, #20]	; (8011ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011eac:	f7fc fca2 	bl	800e7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011eb0:	4b02      	ldr	r3, [pc, #8]	; (8011ebc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	2000fec4 	.word	0x2000fec4
 8011ec0:	080140a0 	.word	0x080140a0

08011ec4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	6039      	str	r1, [r7, #0]
 8011ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ed0:	79fb      	ldrb	r3, [r7, #7]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d105      	bne.n	8011ee2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ed6:	683a      	ldr	r2, [r7, #0]
 8011ed8:	4907      	ldr	r1, [pc, #28]	; (8011ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011eda:	4808      	ldr	r0, [pc, #32]	; (8011efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011edc:	f7fc fc8a 	bl	800e7f4 <USBD_GetString>
 8011ee0:	e004      	b.n	8011eec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ee2:	683a      	ldr	r2, [r7, #0]
 8011ee4:	4904      	ldr	r1, [pc, #16]	; (8011ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ee6:	4805      	ldr	r0, [pc, #20]	; (8011efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ee8:	f7fc fc84 	bl	800e7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011eec:	4b02      	ldr	r3, [pc, #8]	; (8011ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	2000fec4 	.word	0x2000fec4
 8011efc:	080140ac 	.word	0x080140ac

08011f00 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	4603      	mov	r3, r0
 8011f08:	6039      	str	r1, [r7, #0]
 8011f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	220c      	movs	r2, #12
 8011f10:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011f12:	4b03      	ldr	r3, [pc, #12]	; (8011f20 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr
 8011f20:	200001a4 	.word	0x200001a4

08011f24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011f2a:	4b0f      	ldr	r3, [pc, #60]	; (8011f68 <Get_SerialNum+0x44>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011f30:	4b0e      	ldr	r3, [pc, #56]	; (8011f6c <Get_SerialNum+0x48>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011f36:	4b0e      	ldr	r3, [pc, #56]	; (8011f70 <Get_SerialNum+0x4c>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4413      	add	r3, r2
 8011f42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d009      	beq.n	8011f5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f4a:	2208      	movs	r2, #8
 8011f4c:	4909      	ldr	r1, [pc, #36]	; (8011f74 <Get_SerialNum+0x50>)
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 f814 	bl	8011f7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f54:	2204      	movs	r2, #4
 8011f56:	4908      	ldr	r1, [pc, #32]	; (8011f78 <Get_SerialNum+0x54>)
 8011f58:	68b8      	ldr	r0, [r7, #8]
 8011f5a:	f000 f80f 	bl	8011f7c <IntToUnicode>
  }
}
 8011f5e:	bf00      	nop
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	1fff7590 	.word	0x1fff7590
 8011f6c:	1fff7594 	.word	0x1fff7594
 8011f70:	1fff7598 	.word	0x1fff7598
 8011f74:	200001b6 	.word	0x200001b6
 8011f78:	200001c6 	.word	0x200001c6

08011f7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b087      	sub	sp, #28
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	4613      	mov	r3, r2
 8011f88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011f8e:	2300      	movs	r3, #0
 8011f90:	75fb      	strb	r3, [r7, #23]
 8011f92:	e027      	b.n	8011fe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	0f1b      	lsrs	r3, r3, #28
 8011f98:	2b09      	cmp	r3, #9
 8011f9a:	d80b      	bhi.n	8011fb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	0f1b      	lsrs	r3, r3, #28
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	7dfb      	ldrb	r3, [r7, #23]
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	440b      	add	r3, r1
 8011fac:	3230      	adds	r2, #48	; 0x30
 8011fae:	b2d2      	uxtb	r2, r2
 8011fb0:	701a      	strb	r2, [r3, #0]
 8011fb2:	e00a      	b.n	8011fca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	0f1b      	lsrs	r3, r3, #28
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	7dfb      	ldrb	r3, [r7, #23]
 8011fbc:	005b      	lsls	r3, r3, #1
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	440b      	add	r3, r1
 8011fc4:	3237      	adds	r2, #55	; 0x37
 8011fc6:	b2d2      	uxtb	r2, r2
 8011fc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	011b      	lsls	r3, r3, #4
 8011fce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011fd0:	7dfb      	ldrb	r3, [r7, #23]
 8011fd2:	005b      	lsls	r3, r3, #1
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	4413      	add	r3, r2
 8011fda:	2200      	movs	r2, #0
 8011fdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011fde:	7dfb      	ldrb	r3, [r7, #23]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	75fb      	strb	r3, [r7, #23]
 8011fe4:	7dfa      	ldrb	r2, [r7, #23]
 8011fe6:	79fb      	ldrb	r3, [r7, #7]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d3d3      	bcc.n	8011f94 <IntToUnicode+0x18>
  }
}
 8011fec:	bf00      	nop
 8011fee:	371c      	adds	r7, #28
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b08a      	sub	sp, #40	; 0x28
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012000:	f107 0314 	add.w	r3, r7, #20
 8012004:	2200      	movs	r2, #0
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	605a      	str	r2, [r3, #4]
 801200a:	609a      	str	r2, [r3, #8]
 801200c:	60da      	str	r2, [r3, #12]
 801200e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012018:	d14e      	bne.n	80120b8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801201a:	4b29      	ldr	r3, [pc, #164]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 801201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801201e:	4a28      	ldr	r2, [pc, #160]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012020:	f043 0301 	orr.w	r3, r3, #1
 8012024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012026:	4b26      	ldr	r3, [pc, #152]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801202a:	f003 0301 	and.w	r3, r3, #1
 801202e:	613b      	str	r3, [r7, #16]
 8012030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8012032:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012038:	2302      	movs	r3, #2
 801203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801203c:	2300      	movs	r3, #0
 801203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012040:	2303      	movs	r3, #3
 8012042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012044:	230a      	movs	r3, #10
 8012046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012048:	f107 0314 	add.w	r3, r7, #20
 801204c:	4619      	mov	r1, r3
 801204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012052:	f7f2 fec5 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012056:	4b1a      	ldr	r3, [pc, #104]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801205a:	4a19      	ldr	r2, [pc, #100]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 801205c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012062:	4b17      	ldr	r3, [pc, #92]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801206a:	60fb      	str	r3, [r7, #12]
 801206c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801206e:	4b14      	ldr	r3, [pc, #80]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012076:	2b00      	cmp	r3, #0
 8012078:	d114      	bne.n	80120a4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801207a:	4b11      	ldr	r3, [pc, #68]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 801207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801207e:	4a10      	ldr	r2, [pc, #64]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012084:	6593      	str	r3, [r2, #88]	; 0x58
 8012086:	4b0e      	ldr	r3, [pc, #56]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801208e:	60bb      	str	r3, [r7, #8]
 8012090:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012092:	f7f4 fb93 	bl	80067bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012096:	4b0a      	ldr	r3, [pc, #40]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 8012098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801209a:	4a09      	ldr	r2, [pc, #36]	; (80120c0 <HAL_PCD_MspInit+0xc8>)
 801209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120a0:	6593      	str	r3, [r2, #88]	; 0x58
 80120a2:	e001      	b.n	80120a8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80120a4:	f7f4 fb8a 	bl	80067bc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80120a8:	2200      	movs	r2, #0
 80120aa:	2105      	movs	r1, #5
 80120ac:	2043      	movs	r0, #67	; 0x43
 80120ae:	f7f2 fd97 	bl	8004be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80120b2:	2043      	movs	r0, #67	; 0x43
 80120b4:	f7f2 fdb0 	bl	8004c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80120b8:	bf00      	nop
 80120ba:	3728      	adds	r7, #40	; 0x28
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	40021000 	.word	0x40021000

080120c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80120d8:	4619      	mov	r1, r3
 80120da:	4610      	mov	r0, r2
 80120dc:	f7fb fbfd 	bl	800d8da <USBD_LL_SetupStage>
}
 80120e0:	bf00      	nop
 80120e2:	3708      	adds	r7, #8
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}

080120e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	460b      	mov	r3, r1
 80120f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80120fa:	78fa      	ldrb	r2, [r7, #3]
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	4613      	mov	r3, r2
 8012100:	00db      	lsls	r3, r3, #3
 8012102:	1a9b      	subs	r3, r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	440b      	add	r3, r1
 8012108:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	78fb      	ldrb	r3, [r7, #3]
 8012110:	4619      	mov	r1, r3
 8012112:	f7fb fc2d 	bl	800d970 <USBD_LL_DataOutStage>
}
 8012116:	bf00      	nop
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801211e:	b580      	push	{r7, lr}
 8012120:	b082      	sub	sp, #8
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	460b      	mov	r3, r1
 8012128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012130:	78fa      	ldrb	r2, [r7, #3]
 8012132:	6879      	ldr	r1, [r7, #4]
 8012134:	4613      	mov	r3, r2
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	1a9b      	subs	r3, r3, r2
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	440b      	add	r3, r1
 801213e:	3348      	adds	r3, #72	; 0x48
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	78fb      	ldrb	r3, [r7, #3]
 8012144:	4619      	mov	r1, r3
 8012146:	f7fb fc84 	bl	800da52 <USBD_LL_DataInStage>
}
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b082      	sub	sp, #8
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012160:	4618      	mov	r0, r3
 8012162:	f7fb fd97 	bl	800dc94 <USBD_LL_SOF>
}
 8012166:	bf00      	nop
 8012168:	3708      	adds	r7, #8
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801216e:	b580      	push	{r7, lr}
 8012170:	b084      	sub	sp, #16
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012176:	2301      	movs	r3, #1
 8012178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	2b02      	cmp	r3, #2
 8012180:	d001      	beq.n	8012186 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012182:	f7f0 f8e1 	bl	8002348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801218c:	7bfa      	ldrb	r2, [r7, #15]
 801218e:	4611      	mov	r1, r2
 8012190:	4618      	mov	r0, r3
 8012192:	f7fb fd44 	bl	800dc1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801219c:	4618      	mov	r0, r3
 801219e:	f7fb fcfd 	bl	800db9c <USBD_LL_Reset>
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	6812      	ldr	r2, [r2, #0]
 80121c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80121c6:	f043 0301 	orr.w	r3, r3, #1
 80121ca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fb fd33 	bl	800dc3e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6a1b      	ldr	r3, [r3, #32]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d005      	beq.n	80121ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80121e0:	4b04      	ldr	r3, [pc, #16]	; (80121f4 <HAL_PCD_SuspendCallback+0x48>)
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	4a03      	ldr	r2, [pc, #12]	; (80121f4 <HAL_PCD_SuspendCallback+0x48>)
 80121e6:	f043 0306 	orr.w	r3, r3, #6
 80121ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80121ec:	bf00      	nop
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	e000ed00 	.word	0xe000ed00

080121f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	6812      	ldr	r2, [r2, #0]
 801220e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012212:	f023 0301 	bic.w	r3, r3, #1
 8012216:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6a1b      	ldr	r3, [r3, #32]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d007      	beq.n	8012230 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012220:	4b08      	ldr	r3, [pc, #32]	; (8012244 <HAL_PCD_ResumeCallback+0x4c>)
 8012222:	691b      	ldr	r3, [r3, #16]
 8012224:	4a07      	ldr	r2, [pc, #28]	; (8012244 <HAL_PCD_ResumeCallback+0x4c>)
 8012226:	f023 0306 	bic.w	r3, r3, #6
 801222a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801222c:	f000 fafa 	bl	8012824 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012236:	4618      	mov	r0, r3
 8012238:	f7fb fd16 	bl	800dc68 <USBD_LL_Resume>
}
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	e000ed00 	.word	0xe000ed00

08012248 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	460b      	mov	r3, r1
 8012252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801225a:	78fa      	ldrb	r2, [r7, #3]
 801225c:	4611      	mov	r1, r2
 801225e:	4618      	mov	r0, r3
 8012260:	f7fb fd3f 	bl	800dce2 <USBD_LL_IsoOUTIncomplete>
}
 8012264:	bf00      	nop
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	460b      	mov	r3, r1
 8012276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801227e:	78fa      	ldrb	r2, [r7, #3]
 8012280:	4611      	mov	r1, r2
 8012282:	4618      	mov	r0, r3
 8012284:	f7fb fd20 	bl	800dcc8 <USBD_LL_IsoINIncomplete>
}
 8012288:	bf00      	nop
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b082      	sub	sp, #8
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fb fd2c 	bl	800dcfc <USBD_LL_DevConnected>
}
 80122a4:	bf00      	nop
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fb fd29 	bl	800dd12 <USBD_LL_DevDisconnected>
}
 80122c0:	bf00      	nop
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d13c      	bne.n	8012352 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80122d8:	4a20      	ldr	r2, [pc, #128]	; (801235c <USBD_LL_Init+0x94>)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4a1e      	ldr	r2, [pc, #120]	; (801235c <USBD_LL_Init+0x94>)
 80122e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80122e8:	4b1c      	ldr	r3, [pc, #112]	; (801235c <USBD_LL_Init+0x94>)
 80122ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80122ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80122f0:	4b1a      	ldr	r3, [pc, #104]	; (801235c <USBD_LL_Init+0x94>)
 80122f2:	2206      	movs	r2, #6
 80122f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80122f6:	4b19      	ldr	r3, [pc, #100]	; (801235c <USBD_LL_Init+0x94>)
 80122f8:	2202      	movs	r2, #2
 80122fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80122fc:	4b17      	ldr	r3, [pc, #92]	; (801235c <USBD_LL_Init+0x94>)
 80122fe:	2202      	movs	r2, #2
 8012300:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012302:	4b16      	ldr	r3, [pc, #88]	; (801235c <USBD_LL_Init+0x94>)
 8012304:	2200      	movs	r2, #0
 8012306:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012308:	4b14      	ldr	r3, [pc, #80]	; (801235c <USBD_LL_Init+0x94>)
 801230a:	2200      	movs	r2, #0
 801230c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801230e:	4b13      	ldr	r3, [pc, #76]	; (801235c <USBD_LL_Init+0x94>)
 8012310:	2200      	movs	r2, #0
 8012312:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012314:	4b11      	ldr	r3, [pc, #68]	; (801235c <USBD_LL_Init+0x94>)
 8012316:	2200      	movs	r2, #0
 8012318:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801231a:	4b10      	ldr	r3, [pc, #64]	; (801235c <USBD_LL_Init+0x94>)
 801231c:	2200      	movs	r2, #0
 801231e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012320:	4b0e      	ldr	r3, [pc, #56]	; (801235c <USBD_LL_Init+0x94>)
 8012322:	2200      	movs	r2, #0
 8012324:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012326:	480d      	ldr	r0, [pc, #52]	; (801235c <USBD_LL_Init+0x94>)
 8012328:	f7f3 f935 	bl	8005596 <HAL_PCD_Init>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012332:	f7f0 f809 	bl	8002348 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012336:	2180      	movs	r1, #128	; 0x80
 8012338:	4808      	ldr	r0, [pc, #32]	; (801235c <USBD_LL_Init+0x94>)
 801233a:	f7f4 f996 	bl	800666a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801233e:	2240      	movs	r2, #64	; 0x40
 8012340:	2100      	movs	r1, #0
 8012342:	4806      	ldr	r0, [pc, #24]	; (801235c <USBD_LL_Init+0x94>)
 8012344:	f7f4 f94a 	bl	80065dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012348:	2280      	movs	r2, #128	; 0x80
 801234a:	2101      	movs	r1, #1
 801234c:	4803      	ldr	r0, [pc, #12]	; (801235c <USBD_LL_Init+0x94>)
 801234e:	f7f4 f945 	bl	80065dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3708      	adds	r7, #8
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}
 801235c:	200100c4 	.word	0x200100c4

08012360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012376:	4618      	mov	r0, r3
 8012378:	f7f3 fa31 	bl	80057de <HAL_PCD_Start>
 801237c:	4603      	mov	r3, r0
 801237e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8012380:	7bbb      	ldrb	r3, [r7, #14]
 8012382:	2b03      	cmp	r3, #3
 8012384:	d816      	bhi.n	80123b4 <USBD_LL_Start+0x54>
 8012386:	a201      	add	r2, pc, #4	; (adr r2, 801238c <USBD_LL_Start+0x2c>)
 8012388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238c:	0801239d 	.word	0x0801239d
 8012390:	080123a3 	.word	0x080123a3
 8012394:	080123a9 	.word	0x080123a9
 8012398:	080123af 	.word	0x080123af
    case HAL_OK :
      usb_status = USBD_OK;
 801239c:	2300      	movs	r3, #0
 801239e:	73fb      	strb	r3, [r7, #15]
    break;
 80123a0:	e00b      	b.n	80123ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80123a2:	2302      	movs	r3, #2
 80123a4:	73fb      	strb	r3, [r7, #15]
    break;
 80123a6:	e008      	b.n	80123ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80123a8:	2301      	movs	r3, #1
 80123aa:	73fb      	strb	r3, [r7, #15]
    break;
 80123ac:	e005      	b.n	80123ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80123ae:	2302      	movs	r3, #2
 80123b0:	73fb      	strb	r3, [r7, #15]
    break;
 80123b2:	e002      	b.n	80123ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80123b4:	2302      	movs	r3, #2
 80123b6:	73fb      	strb	r3, [r7, #15]
    break;
 80123b8:	bf00      	nop
  }
  return usb_status;
 80123ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	4608      	mov	r0, r1
 80123ce:	4611      	mov	r1, r2
 80123d0:	461a      	mov	r2, r3
 80123d2:	4603      	mov	r3, r0
 80123d4:	70fb      	strb	r3, [r7, #3]
 80123d6:	460b      	mov	r3, r1
 80123d8:	70bb      	strb	r3, [r7, #2]
 80123da:	4613      	mov	r3, r2
 80123dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123ec:	78bb      	ldrb	r3, [r7, #2]
 80123ee:	883a      	ldrh	r2, [r7, #0]
 80123f0:	78f9      	ldrb	r1, [r7, #3]
 80123f2:	f7f3 fdec 	bl	8005fce <HAL_PCD_EP_Open>
 80123f6:	4603      	mov	r3, r0
 80123f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80123fa:	7bbb      	ldrb	r3, [r7, #14]
 80123fc:	2b03      	cmp	r3, #3
 80123fe:	d817      	bhi.n	8012430 <USBD_LL_OpenEP+0x6c>
 8012400:	a201      	add	r2, pc, #4	; (adr r2, 8012408 <USBD_LL_OpenEP+0x44>)
 8012402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012406:	bf00      	nop
 8012408:	08012419 	.word	0x08012419
 801240c:	0801241f 	.word	0x0801241f
 8012410:	08012425 	.word	0x08012425
 8012414:	0801242b 	.word	0x0801242b
    case HAL_OK :
      usb_status = USBD_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	73fb      	strb	r3, [r7, #15]
    break;
 801241c:	e00b      	b.n	8012436 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801241e:	2302      	movs	r3, #2
 8012420:	73fb      	strb	r3, [r7, #15]
    break;
 8012422:	e008      	b.n	8012436 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012424:	2301      	movs	r3, #1
 8012426:	73fb      	strb	r3, [r7, #15]
    break;
 8012428:	e005      	b.n	8012436 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801242a:	2302      	movs	r3, #2
 801242c:	73fb      	strb	r3, [r7, #15]
    break;
 801242e:	e002      	b.n	8012436 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012430:	2302      	movs	r3, #2
 8012432:	73fb      	strb	r3, [r7, #15]
    break;
 8012434:	bf00      	nop
  }
  return usb_status;
 8012436:	7bfb      	ldrb	r3, [r7, #15]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801244c:	2300      	movs	r3, #0
 801244e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012450:	2300      	movs	r3, #0
 8012452:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801245a:	78fa      	ldrb	r2, [r7, #3]
 801245c:	4611      	mov	r1, r2
 801245e:	4618      	mov	r0, r3
 8012460:	f7f3 fe1d 	bl	800609e <HAL_PCD_EP_Close>
 8012464:	4603      	mov	r3, r0
 8012466:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8012468:	7bbb      	ldrb	r3, [r7, #14]
 801246a:	2b03      	cmp	r3, #3
 801246c:	d816      	bhi.n	801249c <USBD_LL_CloseEP+0x5c>
 801246e:	a201      	add	r2, pc, #4	; (adr r2, 8012474 <USBD_LL_CloseEP+0x34>)
 8012470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012474:	08012485 	.word	0x08012485
 8012478:	0801248b 	.word	0x0801248b
 801247c:	08012491 	.word	0x08012491
 8012480:	08012497 	.word	0x08012497
    case HAL_OK :
      usb_status = USBD_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	73fb      	strb	r3, [r7, #15]
    break;
 8012488:	e00b      	b.n	80124a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801248a:	2302      	movs	r3, #2
 801248c:	73fb      	strb	r3, [r7, #15]
    break;
 801248e:	e008      	b.n	80124a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012490:	2301      	movs	r3, #1
 8012492:	73fb      	strb	r3, [r7, #15]
    break;
 8012494:	e005      	b.n	80124a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012496:	2302      	movs	r3, #2
 8012498:	73fb      	strb	r3, [r7, #15]
    break;
 801249a:	e002      	b.n	80124a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801249c:	2302      	movs	r3, #2
 801249e:	73fb      	strb	r3, [r7, #15]
    break;
 80124a0:	bf00      	nop
  }
  return usb_status;  
 80124a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3710      	adds	r7, #16
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	460b      	mov	r3, r1
 80124b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124b8:	2300      	movs	r3, #0
 80124ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124bc:	2300      	movs	r3, #0
 80124be:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124c6:	78fa      	ldrb	r2, [r7, #3]
 80124c8:	4611      	mov	r1, r2
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7f3 fec4 	bl	8006258 <HAL_PCD_EP_SetStall>
 80124d0:	4603      	mov	r3, r0
 80124d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80124d4:	7bbb      	ldrb	r3, [r7, #14]
 80124d6:	2b03      	cmp	r3, #3
 80124d8:	d816      	bhi.n	8012508 <USBD_LL_StallEP+0x5c>
 80124da:	a201      	add	r2, pc, #4	; (adr r2, 80124e0 <USBD_LL_StallEP+0x34>)
 80124dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e0:	080124f1 	.word	0x080124f1
 80124e4:	080124f7 	.word	0x080124f7
 80124e8:	080124fd 	.word	0x080124fd
 80124ec:	08012503 	.word	0x08012503
    case HAL_OK :
      usb_status = USBD_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	73fb      	strb	r3, [r7, #15]
    break;
 80124f4:	e00b      	b.n	801250e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80124f6:	2302      	movs	r3, #2
 80124f8:	73fb      	strb	r3, [r7, #15]
    break;
 80124fa:	e008      	b.n	801250e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80124fc:	2301      	movs	r3, #1
 80124fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012500:	e005      	b.n	801250e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012502:	2302      	movs	r3, #2
 8012504:	73fb      	strb	r3, [r7, #15]
    break;
 8012506:	e002      	b.n	801250e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012508:	2302      	movs	r3, #2
 801250a:	73fb      	strb	r3, [r7, #15]
    break;
 801250c:	bf00      	nop
  }
  return usb_status;  
 801250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	460b      	mov	r3, r1
 8012522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012524:	2300      	movs	r3, #0
 8012526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012532:	78fa      	ldrb	r2, [r7, #3]
 8012534:	4611      	mov	r1, r2
 8012536:	4618      	mov	r0, r3
 8012538:	f7f3 fef0 	bl	800631c <HAL_PCD_EP_ClrStall>
 801253c:	4603      	mov	r3, r0
 801253e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8012540:	7bbb      	ldrb	r3, [r7, #14]
 8012542:	2b03      	cmp	r3, #3
 8012544:	d816      	bhi.n	8012574 <USBD_LL_ClearStallEP+0x5c>
 8012546:	a201      	add	r2, pc, #4	; (adr r2, 801254c <USBD_LL_ClearStallEP+0x34>)
 8012548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801254c:	0801255d 	.word	0x0801255d
 8012550:	08012563 	.word	0x08012563
 8012554:	08012569 	.word	0x08012569
 8012558:	0801256f 	.word	0x0801256f
    case HAL_OK :
      usb_status = USBD_OK;
 801255c:	2300      	movs	r3, #0
 801255e:	73fb      	strb	r3, [r7, #15]
    break;
 8012560:	e00b      	b.n	801257a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012562:	2302      	movs	r3, #2
 8012564:	73fb      	strb	r3, [r7, #15]
    break;
 8012566:	e008      	b.n	801257a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012568:	2301      	movs	r3, #1
 801256a:	73fb      	strb	r3, [r7, #15]
    break;
 801256c:	e005      	b.n	801257a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801256e:	2302      	movs	r3, #2
 8012570:	73fb      	strb	r3, [r7, #15]
    break;
 8012572:	e002      	b.n	801257a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012574:	2302      	movs	r3, #2
 8012576:	73fb      	strb	r3, [r7, #15]
    break;
 8012578:	bf00      	nop
  }
  return usb_status; 
 801257a:	7bfb      	ldrb	r3, [r7, #15]
}
 801257c:	4618      	mov	r0, r3
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	460b      	mov	r3, r1
 801258e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012596:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8012598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801259c:	2b00      	cmp	r3, #0
 801259e:	da0b      	bge.n	80125b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80125a0:	78fb      	ldrb	r3, [r7, #3]
 80125a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125a6:	68f9      	ldr	r1, [r7, #12]
 80125a8:	4613      	mov	r3, r2
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	1a9b      	subs	r3, r3, r2
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	440b      	add	r3, r1
 80125b2:	333e      	adds	r3, #62	; 0x3e
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	e00b      	b.n	80125d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80125b8:	78fb      	ldrb	r3, [r7, #3]
 80125ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125be:	68f9      	ldr	r1, [r7, #12]
 80125c0:	4613      	mov	r3, r2
 80125c2:	00db      	lsls	r3, r3, #3
 80125c4:	1a9b      	subs	r3, r3, r2
 80125c6:	009b      	lsls	r3, r3, #2
 80125c8:	440b      	add	r3, r1
 80125ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80125ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3714      	adds	r7, #20
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	460b      	mov	r3, r1
 80125e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125e8:	2300      	movs	r3, #0
 80125ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125ec:	2300      	movs	r3, #0
 80125ee:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125f6:	78fa      	ldrb	r2, [r7, #3]
 80125f8:	4611      	mov	r1, r2
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7f3 fcc2 	bl	8005f84 <HAL_PCD_SetAddress>
 8012600:	4603      	mov	r3, r0
 8012602:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8012604:	7bbb      	ldrb	r3, [r7, #14]
 8012606:	2b03      	cmp	r3, #3
 8012608:	d816      	bhi.n	8012638 <USBD_LL_SetUSBAddress+0x5c>
 801260a:	a201      	add	r2, pc, #4	; (adr r2, 8012610 <USBD_LL_SetUSBAddress+0x34>)
 801260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012610:	08012621 	.word	0x08012621
 8012614:	08012627 	.word	0x08012627
 8012618:	0801262d 	.word	0x0801262d
 801261c:	08012633 	.word	0x08012633
    case HAL_OK :
      usb_status = USBD_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	73fb      	strb	r3, [r7, #15]
    break;
 8012624:	e00b      	b.n	801263e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012626:	2302      	movs	r3, #2
 8012628:	73fb      	strb	r3, [r7, #15]
    break;
 801262a:	e008      	b.n	801263e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801262c:	2301      	movs	r3, #1
 801262e:	73fb      	strb	r3, [r7, #15]
    break;
 8012630:	e005      	b.n	801263e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012632:	2302      	movs	r3, #2
 8012634:	73fb      	strb	r3, [r7, #15]
    break;
 8012636:	e002      	b.n	801263e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012638:	2302      	movs	r3, #2
 801263a:	73fb      	strb	r3, [r7, #15]
    break;
 801263c:	bf00      	nop
  }
  return usb_status;  
 801263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	607a      	str	r2, [r7, #4]
 8012652:	461a      	mov	r2, r3
 8012654:	460b      	mov	r3, r1
 8012656:	72fb      	strb	r3, [r7, #11]
 8012658:	4613      	mov	r3, r2
 801265a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801265c:	2300      	movs	r3, #0
 801265e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012660:	2300      	movs	r3, #0
 8012662:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801266a:	893b      	ldrh	r3, [r7, #8]
 801266c:	7af9      	ldrb	r1, [r7, #11]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	f7f3 fdb5 	bl	80061de <HAL_PCD_EP_Transmit>
 8012674:	4603      	mov	r3, r0
 8012676:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8012678:	7dbb      	ldrb	r3, [r7, #22]
 801267a:	2b03      	cmp	r3, #3
 801267c:	d816      	bhi.n	80126ac <USBD_LL_Transmit+0x64>
 801267e:	a201      	add	r2, pc, #4	; (adr r2, 8012684 <USBD_LL_Transmit+0x3c>)
 8012680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012684:	08012695 	.word	0x08012695
 8012688:	0801269b 	.word	0x0801269b
 801268c:	080126a1 	.word	0x080126a1
 8012690:	080126a7 	.word	0x080126a7
    case HAL_OK :
      usb_status = USBD_OK;
 8012694:	2300      	movs	r3, #0
 8012696:	75fb      	strb	r3, [r7, #23]
    break;
 8012698:	e00b      	b.n	80126b2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801269a:	2302      	movs	r3, #2
 801269c:	75fb      	strb	r3, [r7, #23]
    break;
 801269e:	e008      	b.n	80126b2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80126a0:	2301      	movs	r3, #1
 80126a2:	75fb      	strb	r3, [r7, #23]
    break;
 80126a4:	e005      	b.n	80126b2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80126a6:	2302      	movs	r3, #2
 80126a8:	75fb      	strb	r3, [r7, #23]
    break;
 80126aa:	e002      	b.n	80126b2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80126ac:	2302      	movs	r3, #2
 80126ae:	75fb      	strb	r3, [r7, #23]
    break;
 80126b0:	bf00      	nop
  }
  return usb_status;    
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3718      	adds	r7, #24
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b086      	sub	sp, #24
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	607a      	str	r2, [r7, #4]
 80126c6:	461a      	mov	r2, r3
 80126c8:	460b      	mov	r3, r1
 80126ca:	72fb      	strb	r3, [r7, #11]
 80126cc:	4613      	mov	r3, r2
 80126ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80126de:	893b      	ldrh	r3, [r7, #8]
 80126e0:	7af9      	ldrb	r1, [r7, #11]
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	f7f3 fd25 	bl	8006132 <HAL_PCD_EP_Receive>
 80126e8:	4603      	mov	r3, r0
 80126ea:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80126ec:	7dbb      	ldrb	r3, [r7, #22]
 80126ee:	2b03      	cmp	r3, #3
 80126f0:	d816      	bhi.n	8012720 <USBD_LL_PrepareReceive+0x64>
 80126f2:	a201      	add	r2, pc, #4	; (adr r2, 80126f8 <USBD_LL_PrepareReceive+0x3c>)
 80126f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f8:	08012709 	.word	0x08012709
 80126fc:	0801270f 	.word	0x0801270f
 8012700:	08012715 	.word	0x08012715
 8012704:	0801271b 	.word	0x0801271b
    case HAL_OK :
      usb_status = USBD_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	75fb      	strb	r3, [r7, #23]
    break;
 801270c:	e00b      	b.n	8012726 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801270e:	2302      	movs	r3, #2
 8012710:	75fb      	strb	r3, [r7, #23]
    break;
 8012712:	e008      	b.n	8012726 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012714:	2301      	movs	r3, #1
 8012716:	75fb      	strb	r3, [r7, #23]
    break;
 8012718:	e005      	b.n	8012726 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801271a:	2302      	movs	r3, #2
 801271c:	75fb      	strb	r3, [r7, #23]
    break;
 801271e:	e002      	b.n	8012726 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8012720:	2302      	movs	r3, #2
 8012722:	75fb      	strb	r3, [r7, #23]
    break;
 8012724:	bf00      	nop
  }
  return usb_status; 
 8012726:	7dfb      	ldrb	r3, [r7, #23]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	460b      	mov	r3, r1
 801273a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012742:	78fa      	ldrb	r2, [r7, #3]
 8012744:	4611      	mov	r1, r2
 8012746:	4618      	mov	r0, r3
 8012748:	f7f3 fd31 	bl	80061ae <HAL_PCD_EP_GetRxCount>
 801274c:	4603      	mov	r3, r0
}
 801274e:	4618      	mov	r0, r3
 8012750:	3708      	adds	r7, #8
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
	...

08012758 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d002      	beq.n	8012770 <HAL_PCDEx_LPM_Callback+0x18>
 801276a:	2b01      	cmp	r3, #1
 801276c:	d01f      	beq.n	80127ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801276e:	e03b      	b.n	80127e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d007      	beq.n	8012788 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012778:	f000 f854 	bl	8012824 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801277c:	4b1c      	ldr	r3, [pc, #112]	; (80127f0 <HAL_PCDEx_LPM_Callback+0x98>)
 801277e:	691b      	ldr	r3, [r3, #16]
 8012780:	4a1b      	ldr	r2, [pc, #108]	; (80127f0 <HAL_PCDEx_LPM_Callback+0x98>)
 8012782:	f023 0306 	bic.w	r3, r3, #6
 8012786:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	6812      	ldr	r2, [r2, #0]
 8012796:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801279a:	f023 0301 	bic.w	r3, r3, #1
 801279e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fb fa5e 	bl	800dc68 <USBD_LL_Resume>
    break;
 80127ac:	e01c      	b.n	80127e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	6812      	ldr	r2, [r2, #0]
 80127bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80127c0:	f043 0301 	orr.w	r3, r3, #1
 80127c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fb fa36 	bl	800dc3e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6a1b      	ldr	r3, [r3, #32]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d005      	beq.n	80127e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80127dc:	691b      	ldr	r3, [r3, #16]
 80127de:	4a04      	ldr	r2, [pc, #16]	; (80127f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80127e0:	f043 0306 	orr.w	r3, r3, #6
 80127e4:	6113      	str	r3, [r2, #16]
    break;   
 80127e6:	bf00      	nop
}
 80127e8:	bf00      	nop
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	e000ed00 	.word	0xe000ed00

080127f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80127fc:	4b03      	ldr	r3, [pc, #12]	; (801280c <USBD_static_malloc+0x18>)
}
 80127fe:	4618      	mov	r0, r3
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr
 801280a:	bf00      	nop
 801280c:	2000d53c 	.word	0x2000d53c

08012810 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]

}
 8012818:	bf00      	nop
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012828:	f7ee fed2 	bl	80015d0 <SystemClock_Config>
}
 801282c:	bf00      	nop
 801282e:	bd80      	pop	{r7, pc}

08012830 <__assert_func>:
 8012830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012832:	461c      	mov	r4, r3
 8012834:	4b09      	ldr	r3, [pc, #36]	; (801285c <__assert_func+0x2c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4605      	mov	r5, r0
 801283a:	68d8      	ldr	r0, [r3, #12]
 801283c:	b152      	cbz	r2, 8012854 <__assert_func+0x24>
 801283e:	4b08      	ldr	r3, [pc, #32]	; (8012860 <__assert_func+0x30>)
 8012840:	9100      	str	r1, [sp, #0]
 8012842:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012846:	4907      	ldr	r1, [pc, #28]	; (8012864 <__assert_func+0x34>)
 8012848:	462b      	mov	r3, r5
 801284a:	4622      	mov	r2, r4
 801284c:	f000 f818 	bl	8012880 <fiprintf>
 8012850:	f000 fdfc 	bl	801344c <abort>
 8012854:	4b04      	ldr	r3, [pc, #16]	; (8012868 <__assert_func+0x38>)
 8012856:	461a      	mov	r2, r3
 8012858:	e7f2      	b.n	8012840 <__assert_func+0x10>
 801285a:	bf00      	nop
 801285c:	200001d0 	.word	0x200001d0
 8012860:	08014148 	.word	0x08014148
 8012864:	08014155 	.word	0x08014155
 8012868:	08014183 	.word	0x08014183

0801286c <atoi>:
 801286c:	220a      	movs	r2, #10
 801286e:	2100      	movs	r1, #0
 8012870:	f000 bd16 	b.w	80132a0 <strtol>

08012874 <__errno>:
 8012874:	4b01      	ldr	r3, [pc, #4]	; (801287c <__errno+0x8>)
 8012876:	6818      	ldr	r0, [r3, #0]
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop
 801287c:	200001d0 	.word	0x200001d0

08012880 <fiprintf>:
 8012880:	b40e      	push	{r1, r2, r3}
 8012882:	b503      	push	{r0, r1, lr}
 8012884:	4601      	mov	r1, r0
 8012886:	ab03      	add	r3, sp, #12
 8012888:	4805      	ldr	r0, [pc, #20]	; (80128a0 <fiprintf+0x20>)
 801288a:	f853 2b04 	ldr.w	r2, [r3], #4
 801288e:	6800      	ldr	r0, [r0, #0]
 8012890:	9301      	str	r3, [sp, #4]
 8012892:	f000 f911 	bl	8012ab8 <_vfiprintf_r>
 8012896:	b002      	add	sp, #8
 8012898:	f85d eb04 	ldr.w	lr, [sp], #4
 801289c:	b003      	add	sp, #12
 801289e:	4770      	bx	lr
 80128a0:	200001d0 	.word	0x200001d0

080128a4 <__libc_init_array>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	4e0d      	ldr	r6, [pc, #52]	; (80128dc <__libc_init_array+0x38>)
 80128a8:	4c0d      	ldr	r4, [pc, #52]	; (80128e0 <__libc_init_array+0x3c>)
 80128aa:	1ba4      	subs	r4, r4, r6
 80128ac:	10a4      	asrs	r4, r4, #2
 80128ae:	2500      	movs	r5, #0
 80128b0:	42a5      	cmp	r5, r4
 80128b2:	d109      	bne.n	80128c8 <__libc_init_array+0x24>
 80128b4:	4e0b      	ldr	r6, [pc, #44]	; (80128e4 <__libc_init_array+0x40>)
 80128b6:	4c0c      	ldr	r4, [pc, #48]	; (80128e8 <__libc_init_array+0x44>)
 80128b8:	f001 fa5c 	bl	8013d74 <_init>
 80128bc:	1ba4      	subs	r4, r4, r6
 80128be:	10a4      	asrs	r4, r4, #2
 80128c0:	2500      	movs	r5, #0
 80128c2:	42a5      	cmp	r5, r4
 80128c4:	d105      	bne.n	80128d2 <__libc_init_array+0x2e>
 80128c6:	bd70      	pop	{r4, r5, r6, pc}
 80128c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80128cc:	4798      	blx	r3
 80128ce:	3501      	adds	r5, #1
 80128d0:	e7ee      	b.n	80128b0 <__libc_init_array+0xc>
 80128d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80128d6:	4798      	blx	r3
 80128d8:	3501      	adds	r5, #1
 80128da:	e7f2      	b.n	80128c2 <__libc_init_array+0x1e>
 80128dc:	08014330 	.word	0x08014330
 80128e0:	08014330 	.word	0x08014330
 80128e4:	08014330 	.word	0x08014330
 80128e8:	08014334 	.word	0x08014334

080128ec <memcpy>:
 80128ec:	b510      	push	{r4, lr}
 80128ee:	1e43      	subs	r3, r0, #1
 80128f0:	440a      	add	r2, r1
 80128f2:	4291      	cmp	r1, r2
 80128f4:	d100      	bne.n	80128f8 <memcpy+0xc>
 80128f6:	bd10      	pop	{r4, pc}
 80128f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012900:	e7f7      	b.n	80128f2 <memcpy+0x6>

08012902 <memset>:
 8012902:	4402      	add	r2, r0
 8012904:	4603      	mov	r3, r0
 8012906:	4293      	cmp	r3, r2
 8012908:	d100      	bne.n	801290c <memset+0xa>
 801290a:	4770      	bx	lr
 801290c:	f803 1b01 	strb.w	r1, [r3], #1
 8012910:	e7f9      	b.n	8012906 <memset+0x4>
	...

08012914 <_free_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	4605      	mov	r5, r0
 8012918:	2900      	cmp	r1, #0
 801291a:	d045      	beq.n	80129a8 <_free_r+0x94>
 801291c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012920:	1f0c      	subs	r4, r1, #4
 8012922:	2b00      	cmp	r3, #0
 8012924:	bfb8      	it	lt
 8012926:	18e4      	addlt	r4, r4, r3
 8012928:	f000 ffa5 	bl	8013876 <__malloc_lock>
 801292c:	4a1f      	ldr	r2, [pc, #124]	; (80129ac <_free_r+0x98>)
 801292e:	6813      	ldr	r3, [r2, #0]
 8012930:	4610      	mov	r0, r2
 8012932:	b933      	cbnz	r3, 8012942 <_free_r+0x2e>
 8012934:	6063      	str	r3, [r4, #4]
 8012936:	6014      	str	r4, [r2, #0]
 8012938:	4628      	mov	r0, r5
 801293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801293e:	f000 bf9b 	b.w	8013878 <__malloc_unlock>
 8012942:	42a3      	cmp	r3, r4
 8012944:	d90c      	bls.n	8012960 <_free_r+0x4c>
 8012946:	6821      	ldr	r1, [r4, #0]
 8012948:	1862      	adds	r2, r4, r1
 801294a:	4293      	cmp	r3, r2
 801294c:	bf04      	itt	eq
 801294e:	681a      	ldreq	r2, [r3, #0]
 8012950:	685b      	ldreq	r3, [r3, #4]
 8012952:	6063      	str	r3, [r4, #4]
 8012954:	bf04      	itt	eq
 8012956:	1852      	addeq	r2, r2, r1
 8012958:	6022      	streq	r2, [r4, #0]
 801295a:	6004      	str	r4, [r0, #0]
 801295c:	e7ec      	b.n	8012938 <_free_r+0x24>
 801295e:	4613      	mov	r3, r2
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	b10a      	cbz	r2, 8012968 <_free_r+0x54>
 8012964:	42a2      	cmp	r2, r4
 8012966:	d9fa      	bls.n	801295e <_free_r+0x4a>
 8012968:	6819      	ldr	r1, [r3, #0]
 801296a:	1858      	adds	r0, r3, r1
 801296c:	42a0      	cmp	r0, r4
 801296e:	d10b      	bne.n	8012988 <_free_r+0x74>
 8012970:	6820      	ldr	r0, [r4, #0]
 8012972:	4401      	add	r1, r0
 8012974:	1858      	adds	r0, r3, r1
 8012976:	4282      	cmp	r2, r0
 8012978:	6019      	str	r1, [r3, #0]
 801297a:	d1dd      	bne.n	8012938 <_free_r+0x24>
 801297c:	6810      	ldr	r0, [r2, #0]
 801297e:	6852      	ldr	r2, [r2, #4]
 8012980:	605a      	str	r2, [r3, #4]
 8012982:	4401      	add	r1, r0
 8012984:	6019      	str	r1, [r3, #0]
 8012986:	e7d7      	b.n	8012938 <_free_r+0x24>
 8012988:	d902      	bls.n	8012990 <_free_r+0x7c>
 801298a:	230c      	movs	r3, #12
 801298c:	602b      	str	r3, [r5, #0]
 801298e:	e7d3      	b.n	8012938 <_free_r+0x24>
 8012990:	6820      	ldr	r0, [r4, #0]
 8012992:	1821      	adds	r1, r4, r0
 8012994:	428a      	cmp	r2, r1
 8012996:	bf04      	itt	eq
 8012998:	6811      	ldreq	r1, [r2, #0]
 801299a:	6852      	ldreq	r2, [r2, #4]
 801299c:	6062      	str	r2, [r4, #4]
 801299e:	bf04      	itt	eq
 80129a0:	1809      	addeq	r1, r1, r0
 80129a2:	6021      	streq	r1, [r4, #0]
 80129a4:	605c      	str	r4, [r3, #4]
 80129a6:	e7c7      	b.n	8012938 <_free_r+0x24>
 80129a8:	bd38      	pop	{r3, r4, r5, pc}
 80129aa:	bf00      	nop
 80129ac:	2000d75c 	.word	0x2000d75c

080129b0 <_malloc_r>:
 80129b0:	b570      	push	{r4, r5, r6, lr}
 80129b2:	1ccd      	adds	r5, r1, #3
 80129b4:	f025 0503 	bic.w	r5, r5, #3
 80129b8:	3508      	adds	r5, #8
 80129ba:	2d0c      	cmp	r5, #12
 80129bc:	bf38      	it	cc
 80129be:	250c      	movcc	r5, #12
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	4606      	mov	r6, r0
 80129c4:	db01      	blt.n	80129ca <_malloc_r+0x1a>
 80129c6:	42a9      	cmp	r1, r5
 80129c8:	d903      	bls.n	80129d2 <_malloc_r+0x22>
 80129ca:	230c      	movs	r3, #12
 80129cc:	6033      	str	r3, [r6, #0]
 80129ce:	2000      	movs	r0, #0
 80129d0:	bd70      	pop	{r4, r5, r6, pc}
 80129d2:	f000 ff50 	bl	8013876 <__malloc_lock>
 80129d6:	4a21      	ldr	r2, [pc, #132]	; (8012a5c <_malloc_r+0xac>)
 80129d8:	6814      	ldr	r4, [r2, #0]
 80129da:	4621      	mov	r1, r4
 80129dc:	b991      	cbnz	r1, 8012a04 <_malloc_r+0x54>
 80129de:	4c20      	ldr	r4, [pc, #128]	; (8012a60 <_malloc_r+0xb0>)
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	b91b      	cbnz	r3, 80129ec <_malloc_r+0x3c>
 80129e4:	4630      	mov	r0, r6
 80129e6:	f000 fb81 	bl	80130ec <_sbrk_r>
 80129ea:	6020      	str	r0, [r4, #0]
 80129ec:	4629      	mov	r1, r5
 80129ee:	4630      	mov	r0, r6
 80129f0:	f000 fb7c 	bl	80130ec <_sbrk_r>
 80129f4:	1c43      	adds	r3, r0, #1
 80129f6:	d124      	bne.n	8012a42 <_malloc_r+0x92>
 80129f8:	230c      	movs	r3, #12
 80129fa:	6033      	str	r3, [r6, #0]
 80129fc:	4630      	mov	r0, r6
 80129fe:	f000 ff3b 	bl	8013878 <__malloc_unlock>
 8012a02:	e7e4      	b.n	80129ce <_malloc_r+0x1e>
 8012a04:	680b      	ldr	r3, [r1, #0]
 8012a06:	1b5b      	subs	r3, r3, r5
 8012a08:	d418      	bmi.n	8012a3c <_malloc_r+0x8c>
 8012a0a:	2b0b      	cmp	r3, #11
 8012a0c:	d90f      	bls.n	8012a2e <_malloc_r+0x7e>
 8012a0e:	600b      	str	r3, [r1, #0]
 8012a10:	50cd      	str	r5, [r1, r3]
 8012a12:	18cc      	adds	r4, r1, r3
 8012a14:	4630      	mov	r0, r6
 8012a16:	f000 ff2f 	bl	8013878 <__malloc_unlock>
 8012a1a:	f104 000b 	add.w	r0, r4, #11
 8012a1e:	1d23      	adds	r3, r4, #4
 8012a20:	f020 0007 	bic.w	r0, r0, #7
 8012a24:	1ac3      	subs	r3, r0, r3
 8012a26:	d0d3      	beq.n	80129d0 <_malloc_r+0x20>
 8012a28:	425a      	negs	r2, r3
 8012a2a:	50e2      	str	r2, [r4, r3]
 8012a2c:	e7d0      	b.n	80129d0 <_malloc_r+0x20>
 8012a2e:	428c      	cmp	r4, r1
 8012a30:	684b      	ldr	r3, [r1, #4]
 8012a32:	bf16      	itet	ne
 8012a34:	6063      	strne	r3, [r4, #4]
 8012a36:	6013      	streq	r3, [r2, #0]
 8012a38:	460c      	movne	r4, r1
 8012a3a:	e7eb      	b.n	8012a14 <_malloc_r+0x64>
 8012a3c:	460c      	mov	r4, r1
 8012a3e:	6849      	ldr	r1, [r1, #4]
 8012a40:	e7cc      	b.n	80129dc <_malloc_r+0x2c>
 8012a42:	1cc4      	adds	r4, r0, #3
 8012a44:	f024 0403 	bic.w	r4, r4, #3
 8012a48:	42a0      	cmp	r0, r4
 8012a4a:	d005      	beq.n	8012a58 <_malloc_r+0xa8>
 8012a4c:	1a21      	subs	r1, r4, r0
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f000 fb4c 	bl	80130ec <_sbrk_r>
 8012a54:	3001      	adds	r0, #1
 8012a56:	d0cf      	beq.n	80129f8 <_malloc_r+0x48>
 8012a58:	6025      	str	r5, [r4, #0]
 8012a5a:	e7db      	b.n	8012a14 <_malloc_r+0x64>
 8012a5c:	2000d75c 	.word	0x2000d75c
 8012a60:	2000d760 	.word	0x2000d760

08012a64 <__sfputc_r>:
 8012a64:	6893      	ldr	r3, [r2, #8]
 8012a66:	3b01      	subs	r3, #1
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	b410      	push	{r4}
 8012a6c:	6093      	str	r3, [r2, #8]
 8012a6e:	da08      	bge.n	8012a82 <__sfputc_r+0x1e>
 8012a70:	6994      	ldr	r4, [r2, #24]
 8012a72:	42a3      	cmp	r3, r4
 8012a74:	db01      	blt.n	8012a7a <__sfputc_r+0x16>
 8012a76:	290a      	cmp	r1, #10
 8012a78:	d103      	bne.n	8012a82 <__sfputc_r+0x1e>
 8012a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a7e:	f000 bc25 	b.w	80132cc <__swbuf_r>
 8012a82:	6813      	ldr	r3, [r2, #0]
 8012a84:	1c58      	adds	r0, r3, #1
 8012a86:	6010      	str	r0, [r2, #0]
 8012a88:	7019      	strb	r1, [r3, #0]
 8012a8a:	4608      	mov	r0, r1
 8012a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a90:	4770      	bx	lr

08012a92 <__sfputs_r>:
 8012a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a94:	4606      	mov	r6, r0
 8012a96:	460f      	mov	r7, r1
 8012a98:	4614      	mov	r4, r2
 8012a9a:	18d5      	adds	r5, r2, r3
 8012a9c:	42ac      	cmp	r4, r5
 8012a9e:	d101      	bne.n	8012aa4 <__sfputs_r+0x12>
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	e007      	b.n	8012ab4 <__sfputs_r+0x22>
 8012aa4:	463a      	mov	r2, r7
 8012aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aaa:	4630      	mov	r0, r6
 8012aac:	f7ff ffda 	bl	8012a64 <__sfputc_r>
 8012ab0:	1c43      	adds	r3, r0, #1
 8012ab2:	d1f3      	bne.n	8012a9c <__sfputs_r+0xa>
 8012ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ab8 <_vfiprintf_r>:
 8012ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012abc:	460c      	mov	r4, r1
 8012abe:	b09d      	sub	sp, #116	; 0x74
 8012ac0:	4617      	mov	r7, r2
 8012ac2:	461d      	mov	r5, r3
 8012ac4:	4606      	mov	r6, r0
 8012ac6:	b118      	cbz	r0, 8012ad0 <_vfiprintf_r+0x18>
 8012ac8:	6983      	ldr	r3, [r0, #24]
 8012aca:	b90b      	cbnz	r3, 8012ad0 <_vfiprintf_r+0x18>
 8012acc:	f000 fdb6 	bl	801363c <__sinit>
 8012ad0:	4b7c      	ldr	r3, [pc, #496]	; (8012cc4 <_vfiprintf_r+0x20c>)
 8012ad2:	429c      	cmp	r4, r3
 8012ad4:	d158      	bne.n	8012b88 <_vfiprintf_r+0xd0>
 8012ad6:	6874      	ldr	r4, [r6, #4]
 8012ad8:	89a3      	ldrh	r3, [r4, #12]
 8012ada:	0718      	lsls	r0, r3, #28
 8012adc:	d55e      	bpl.n	8012b9c <_vfiprintf_r+0xe4>
 8012ade:	6923      	ldr	r3, [r4, #16]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d05b      	beq.n	8012b9c <_vfiprintf_r+0xe4>
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae8:	2320      	movs	r3, #32
 8012aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012aee:	2330      	movs	r3, #48	; 0x30
 8012af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012af4:	9503      	str	r5, [sp, #12]
 8012af6:	f04f 0b01 	mov.w	fp, #1
 8012afa:	46b8      	mov	r8, r7
 8012afc:	4645      	mov	r5, r8
 8012afe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b02:	b10b      	cbz	r3, 8012b08 <_vfiprintf_r+0x50>
 8012b04:	2b25      	cmp	r3, #37	; 0x25
 8012b06:	d154      	bne.n	8012bb2 <_vfiprintf_r+0xfa>
 8012b08:	ebb8 0a07 	subs.w	sl, r8, r7
 8012b0c:	d00b      	beq.n	8012b26 <_vfiprintf_r+0x6e>
 8012b0e:	4653      	mov	r3, sl
 8012b10:	463a      	mov	r2, r7
 8012b12:	4621      	mov	r1, r4
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7ff ffbc 	bl	8012a92 <__sfputs_r>
 8012b1a:	3001      	adds	r0, #1
 8012b1c:	f000 80c2 	beq.w	8012ca4 <_vfiprintf_r+0x1ec>
 8012b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b22:	4453      	add	r3, sl
 8012b24:	9309      	str	r3, [sp, #36]	; 0x24
 8012b26:	f898 3000 	ldrb.w	r3, [r8]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	f000 80ba 	beq.w	8012ca4 <_vfiprintf_r+0x1ec>
 8012b30:	2300      	movs	r3, #0
 8012b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b3a:	9304      	str	r3, [sp, #16]
 8012b3c:	9307      	str	r3, [sp, #28]
 8012b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b42:	931a      	str	r3, [sp, #104]	; 0x68
 8012b44:	46a8      	mov	r8, r5
 8012b46:	2205      	movs	r2, #5
 8012b48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012b4c:	485e      	ldr	r0, [pc, #376]	; (8012cc8 <_vfiprintf_r+0x210>)
 8012b4e:	f7ed fb57 	bl	8000200 <memchr>
 8012b52:	9b04      	ldr	r3, [sp, #16]
 8012b54:	bb78      	cbnz	r0, 8012bb6 <_vfiprintf_r+0xfe>
 8012b56:	06d9      	lsls	r1, r3, #27
 8012b58:	bf44      	itt	mi
 8012b5a:	2220      	movmi	r2, #32
 8012b5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b60:	071a      	lsls	r2, r3, #28
 8012b62:	bf44      	itt	mi
 8012b64:	222b      	movmi	r2, #43	; 0x2b
 8012b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b6a:	782a      	ldrb	r2, [r5, #0]
 8012b6c:	2a2a      	cmp	r2, #42	; 0x2a
 8012b6e:	d02a      	beq.n	8012bc6 <_vfiprintf_r+0x10e>
 8012b70:	9a07      	ldr	r2, [sp, #28]
 8012b72:	46a8      	mov	r8, r5
 8012b74:	2000      	movs	r0, #0
 8012b76:	250a      	movs	r5, #10
 8012b78:	4641      	mov	r1, r8
 8012b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b7e:	3b30      	subs	r3, #48	; 0x30
 8012b80:	2b09      	cmp	r3, #9
 8012b82:	d969      	bls.n	8012c58 <_vfiprintf_r+0x1a0>
 8012b84:	b360      	cbz	r0, 8012be0 <_vfiprintf_r+0x128>
 8012b86:	e024      	b.n	8012bd2 <_vfiprintf_r+0x11a>
 8012b88:	4b50      	ldr	r3, [pc, #320]	; (8012ccc <_vfiprintf_r+0x214>)
 8012b8a:	429c      	cmp	r4, r3
 8012b8c:	d101      	bne.n	8012b92 <_vfiprintf_r+0xda>
 8012b8e:	68b4      	ldr	r4, [r6, #8]
 8012b90:	e7a2      	b.n	8012ad8 <_vfiprintf_r+0x20>
 8012b92:	4b4f      	ldr	r3, [pc, #316]	; (8012cd0 <_vfiprintf_r+0x218>)
 8012b94:	429c      	cmp	r4, r3
 8012b96:	bf08      	it	eq
 8012b98:	68f4      	ldreq	r4, [r6, #12]
 8012b9a:	e79d      	b.n	8012ad8 <_vfiprintf_r+0x20>
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	f000 fbe6 	bl	8013370 <__swsetup_r>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d09d      	beq.n	8012ae4 <_vfiprintf_r+0x2c>
 8012ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bac:	b01d      	add	sp, #116	; 0x74
 8012bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb2:	46a8      	mov	r8, r5
 8012bb4:	e7a2      	b.n	8012afc <_vfiprintf_r+0x44>
 8012bb6:	4a44      	ldr	r2, [pc, #272]	; (8012cc8 <_vfiprintf_r+0x210>)
 8012bb8:	1a80      	subs	r0, r0, r2
 8012bba:	fa0b f000 	lsl.w	r0, fp, r0
 8012bbe:	4318      	orrs	r0, r3
 8012bc0:	9004      	str	r0, [sp, #16]
 8012bc2:	4645      	mov	r5, r8
 8012bc4:	e7be      	b.n	8012b44 <_vfiprintf_r+0x8c>
 8012bc6:	9a03      	ldr	r2, [sp, #12]
 8012bc8:	1d11      	adds	r1, r2, #4
 8012bca:	6812      	ldr	r2, [r2, #0]
 8012bcc:	9103      	str	r1, [sp, #12]
 8012bce:	2a00      	cmp	r2, #0
 8012bd0:	db01      	blt.n	8012bd6 <_vfiprintf_r+0x11e>
 8012bd2:	9207      	str	r2, [sp, #28]
 8012bd4:	e004      	b.n	8012be0 <_vfiprintf_r+0x128>
 8012bd6:	4252      	negs	r2, r2
 8012bd8:	f043 0302 	orr.w	r3, r3, #2
 8012bdc:	9207      	str	r2, [sp, #28]
 8012bde:	9304      	str	r3, [sp, #16]
 8012be0:	f898 3000 	ldrb.w	r3, [r8]
 8012be4:	2b2e      	cmp	r3, #46	; 0x2e
 8012be6:	d10e      	bne.n	8012c06 <_vfiprintf_r+0x14e>
 8012be8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012bec:	2b2a      	cmp	r3, #42	; 0x2a
 8012bee:	d138      	bne.n	8012c62 <_vfiprintf_r+0x1aa>
 8012bf0:	9b03      	ldr	r3, [sp, #12]
 8012bf2:	1d1a      	adds	r2, r3, #4
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	9203      	str	r2, [sp, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	bfb8      	it	lt
 8012bfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012c00:	f108 0802 	add.w	r8, r8, #2
 8012c04:	9305      	str	r3, [sp, #20]
 8012c06:	4d33      	ldr	r5, [pc, #204]	; (8012cd4 <_vfiprintf_r+0x21c>)
 8012c08:	f898 1000 	ldrb.w	r1, [r8]
 8012c0c:	2203      	movs	r2, #3
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f7ed faf6 	bl	8000200 <memchr>
 8012c14:	b140      	cbz	r0, 8012c28 <_vfiprintf_r+0x170>
 8012c16:	2340      	movs	r3, #64	; 0x40
 8012c18:	1b40      	subs	r0, r0, r5
 8012c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8012c1e:	9b04      	ldr	r3, [sp, #16]
 8012c20:	4303      	orrs	r3, r0
 8012c22:	f108 0801 	add.w	r8, r8, #1
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	f898 1000 	ldrb.w	r1, [r8]
 8012c2c:	482a      	ldr	r0, [pc, #168]	; (8012cd8 <_vfiprintf_r+0x220>)
 8012c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c32:	2206      	movs	r2, #6
 8012c34:	f108 0701 	add.w	r7, r8, #1
 8012c38:	f7ed fae2 	bl	8000200 <memchr>
 8012c3c:	2800      	cmp	r0, #0
 8012c3e:	d037      	beq.n	8012cb0 <_vfiprintf_r+0x1f8>
 8012c40:	4b26      	ldr	r3, [pc, #152]	; (8012cdc <_vfiprintf_r+0x224>)
 8012c42:	bb1b      	cbnz	r3, 8012c8c <_vfiprintf_r+0x1d4>
 8012c44:	9b03      	ldr	r3, [sp, #12]
 8012c46:	3307      	adds	r3, #7
 8012c48:	f023 0307 	bic.w	r3, r3, #7
 8012c4c:	3308      	adds	r3, #8
 8012c4e:	9303      	str	r3, [sp, #12]
 8012c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c52:	444b      	add	r3, r9
 8012c54:	9309      	str	r3, [sp, #36]	; 0x24
 8012c56:	e750      	b.n	8012afa <_vfiprintf_r+0x42>
 8012c58:	fb05 3202 	mla	r2, r5, r2, r3
 8012c5c:	2001      	movs	r0, #1
 8012c5e:	4688      	mov	r8, r1
 8012c60:	e78a      	b.n	8012b78 <_vfiprintf_r+0xc0>
 8012c62:	2300      	movs	r3, #0
 8012c64:	f108 0801 	add.w	r8, r8, #1
 8012c68:	9305      	str	r3, [sp, #20]
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	250a      	movs	r5, #10
 8012c6e:	4640      	mov	r0, r8
 8012c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c74:	3a30      	subs	r2, #48	; 0x30
 8012c76:	2a09      	cmp	r2, #9
 8012c78:	d903      	bls.n	8012c82 <_vfiprintf_r+0x1ca>
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d0c3      	beq.n	8012c06 <_vfiprintf_r+0x14e>
 8012c7e:	9105      	str	r1, [sp, #20]
 8012c80:	e7c1      	b.n	8012c06 <_vfiprintf_r+0x14e>
 8012c82:	fb05 2101 	mla	r1, r5, r1, r2
 8012c86:	2301      	movs	r3, #1
 8012c88:	4680      	mov	r8, r0
 8012c8a:	e7f0      	b.n	8012c6e <_vfiprintf_r+0x1b6>
 8012c8c:	ab03      	add	r3, sp, #12
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	4622      	mov	r2, r4
 8012c92:	4b13      	ldr	r3, [pc, #76]	; (8012ce0 <_vfiprintf_r+0x228>)
 8012c94:	a904      	add	r1, sp, #16
 8012c96:	4630      	mov	r0, r6
 8012c98:	f3af 8000 	nop.w
 8012c9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012ca0:	4681      	mov	r9, r0
 8012ca2:	d1d5      	bne.n	8012c50 <_vfiprintf_r+0x198>
 8012ca4:	89a3      	ldrh	r3, [r4, #12]
 8012ca6:	065b      	lsls	r3, r3, #25
 8012ca8:	f53f af7e 	bmi.w	8012ba8 <_vfiprintf_r+0xf0>
 8012cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cae:	e77d      	b.n	8012bac <_vfiprintf_r+0xf4>
 8012cb0:	ab03      	add	r3, sp, #12
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	4622      	mov	r2, r4
 8012cb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ce0 <_vfiprintf_r+0x228>)
 8012cb8:	a904      	add	r1, sp, #16
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f000 f888 	bl	8012dd0 <_printf_i>
 8012cc0:	e7ec      	b.n	8012c9c <_vfiprintf_r+0x1e4>
 8012cc2:	bf00      	nop
 8012cc4:	080141dc 	.word	0x080141dc
 8012cc8:	08014188 	.word	0x08014188
 8012ccc:	080141fc 	.word	0x080141fc
 8012cd0:	080141bc 	.word	0x080141bc
 8012cd4:	0801418e 	.word	0x0801418e
 8012cd8:	08014192 	.word	0x08014192
 8012cdc:	00000000 	.word	0x00000000
 8012ce0:	08012a93 	.word	0x08012a93

08012ce4 <_printf_common>:
 8012ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	4691      	mov	r9, r2
 8012cea:	461f      	mov	r7, r3
 8012cec:	688a      	ldr	r2, [r1, #8]
 8012cee:	690b      	ldr	r3, [r1, #16]
 8012cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	bfb8      	it	lt
 8012cf8:	4613      	movlt	r3, r2
 8012cfa:	f8c9 3000 	str.w	r3, [r9]
 8012cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d02:	4606      	mov	r6, r0
 8012d04:	460c      	mov	r4, r1
 8012d06:	b112      	cbz	r2, 8012d0e <_printf_common+0x2a>
 8012d08:	3301      	adds	r3, #1
 8012d0a:	f8c9 3000 	str.w	r3, [r9]
 8012d0e:	6823      	ldr	r3, [r4, #0]
 8012d10:	0699      	lsls	r1, r3, #26
 8012d12:	bf42      	ittt	mi
 8012d14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012d18:	3302      	addmi	r3, #2
 8012d1a:	f8c9 3000 	strmi.w	r3, [r9]
 8012d1e:	6825      	ldr	r5, [r4, #0]
 8012d20:	f015 0506 	ands.w	r5, r5, #6
 8012d24:	d107      	bne.n	8012d36 <_printf_common+0x52>
 8012d26:	f104 0a19 	add.w	sl, r4, #25
 8012d2a:	68e3      	ldr	r3, [r4, #12]
 8012d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8012d30:	1a9b      	subs	r3, r3, r2
 8012d32:	42ab      	cmp	r3, r5
 8012d34:	dc28      	bgt.n	8012d88 <_printf_common+0xa4>
 8012d36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012d3a:	6822      	ldr	r2, [r4, #0]
 8012d3c:	3300      	adds	r3, #0
 8012d3e:	bf18      	it	ne
 8012d40:	2301      	movne	r3, #1
 8012d42:	0692      	lsls	r2, r2, #26
 8012d44:	d42d      	bmi.n	8012da2 <_printf_common+0xbe>
 8012d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d4a:	4639      	mov	r1, r7
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	47c0      	blx	r8
 8012d50:	3001      	adds	r0, #1
 8012d52:	d020      	beq.n	8012d96 <_printf_common+0xb2>
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	68e5      	ldr	r5, [r4, #12]
 8012d58:	f8d9 2000 	ldr.w	r2, [r9]
 8012d5c:	f003 0306 	and.w	r3, r3, #6
 8012d60:	2b04      	cmp	r3, #4
 8012d62:	bf08      	it	eq
 8012d64:	1aad      	subeq	r5, r5, r2
 8012d66:	68a3      	ldr	r3, [r4, #8]
 8012d68:	6922      	ldr	r2, [r4, #16]
 8012d6a:	bf0c      	ite	eq
 8012d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d70:	2500      	movne	r5, #0
 8012d72:	4293      	cmp	r3, r2
 8012d74:	bfc4      	itt	gt
 8012d76:	1a9b      	subgt	r3, r3, r2
 8012d78:	18ed      	addgt	r5, r5, r3
 8012d7a:	f04f 0900 	mov.w	r9, #0
 8012d7e:	341a      	adds	r4, #26
 8012d80:	454d      	cmp	r5, r9
 8012d82:	d11a      	bne.n	8012dba <_printf_common+0xd6>
 8012d84:	2000      	movs	r0, #0
 8012d86:	e008      	b.n	8012d9a <_printf_common+0xb6>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	4652      	mov	r2, sl
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	4630      	mov	r0, r6
 8012d90:	47c0      	blx	r8
 8012d92:	3001      	adds	r0, #1
 8012d94:	d103      	bne.n	8012d9e <_printf_common+0xba>
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d9e:	3501      	adds	r5, #1
 8012da0:	e7c3      	b.n	8012d2a <_printf_common+0x46>
 8012da2:	18e1      	adds	r1, r4, r3
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	2030      	movs	r0, #48	; 0x30
 8012da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012dac:	4422      	add	r2, r4
 8012dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012db2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012db6:	3302      	adds	r3, #2
 8012db8:	e7c5      	b.n	8012d46 <_printf_common+0x62>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	4622      	mov	r2, r4
 8012dbe:	4639      	mov	r1, r7
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	47c0      	blx	r8
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	d0e6      	beq.n	8012d96 <_printf_common+0xb2>
 8012dc8:	f109 0901 	add.w	r9, r9, #1
 8012dcc:	e7d8      	b.n	8012d80 <_printf_common+0x9c>
	...

08012dd0 <_printf_i>:
 8012dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012dd8:	460c      	mov	r4, r1
 8012dda:	7e09      	ldrb	r1, [r1, #24]
 8012ddc:	b085      	sub	sp, #20
 8012dde:	296e      	cmp	r1, #110	; 0x6e
 8012de0:	4617      	mov	r7, r2
 8012de2:	4606      	mov	r6, r0
 8012de4:	4698      	mov	r8, r3
 8012de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012de8:	f000 80b3 	beq.w	8012f52 <_printf_i+0x182>
 8012dec:	d822      	bhi.n	8012e34 <_printf_i+0x64>
 8012dee:	2963      	cmp	r1, #99	; 0x63
 8012df0:	d036      	beq.n	8012e60 <_printf_i+0x90>
 8012df2:	d80a      	bhi.n	8012e0a <_printf_i+0x3a>
 8012df4:	2900      	cmp	r1, #0
 8012df6:	f000 80b9 	beq.w	8012f6c <_printf_i+0x19c>
 8012dfa:	2958      	cmp	r1, #88	; 0x58
 8012dfc:	f000 8083 	beq.w	8012f06 <_printf_i+0x136>
 8012e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012e08:	e032      	b.n	8012e70 <_printf_i+0xa0>
 8012e0a:	2964      	cmp	r1, #100	; 0x64
 8012e0c:	d001      	beq.n	8012e12 <_printf_i+0x42>
 8012e0e:	2969      	cmp	r1, #105	; 0x69
 8012e10:	d1f6      	bne.n	8012e00 <_printf_i+0x30>
 8012e12:	6820      	ldr	r0, [r4, #0]
 8012e14:	6813      	ldr	r3, [r2, #0]
 8012e16:	0605      	lsls	r5, r0, #24
 8012e18:	f103 0104 	add.w	r1, r3, #4
 8012e1c:	d52a      	bpl.n	8012e74 <_printf_i+0xa4>
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	6011      	str	r1, [r2, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	da03      	bge.n	8012e2e <_printf_i+0x5e>
 8012e26:	222d      	movs	r2, #45	; 0x2d
 8012e28:	425b      	negs	r3, r3
 8012e2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012e2e:	486f      	ldr	r0, [pc, #444]	; (8012fec <_printf_i+0x21c>)
 8012e30:	220a      	movs	r2, #10
 8012e32:	e039      	b.n	8012ea8 <_printf_i+0xd8>
 8012e34:	2973      	cmp	r1, #115	; 0x73
 8012e36:	f000 809d 	beq.w	8012f74 <_printf_i+0x1a4>
 8012e3a:	d808      	bhi.n	8012e4e <_printf_i+0x7e>
 8012e3c:	296f      	cmp	r1, #111	; 0x6f
 8012e3e:	d020      	beq.n	8012e82 <_printf_i+0xb2>
 8012e40:	2970      	cmp	r1, #112	; 0x70
 8012e42:	d1dd      	bne.n	8012e00 <_printf_i+0x30>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	f043 0320 	orr.w	r3, r3, #32
 8012e4a:	6023      	str	r3, [r4, #0]
 8012e4c:	e003      	b.n	8012e56 <_printf_i+0x86>
 8012e4e:	2975      	cmp	r1, #117	; 0x75
 8012e50:	d017      	beq.n	8012e82 <_printf_i+0xb2>
 8012e52:	2978      	cmp	r1, #120	; 0x78
 8012e54:	d1d4      	bne.n	8012e00 <_printf_i+0x30>
 8012e56:	2378      	movs	r3, #120	; 0x78
 8012e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012e5c:	4864      	ldr	r0, [pc, #400]	; (8012ff0 <_printf_i+0x220>)
 8012e5e:	e055      	b.n	8012f0c <_printf_i+0x13c>
 8012e60:	6813      	ldr	r3, [r2, #0]
 8012e62:	1d19      	adds	r1, r3, #4
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6011      	str	r1, [r2, #0]
 8012e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e70:	2301      	movs	r3, #1
 8012e72:	e08c      	b.n	8012f8e <_printf_i+0x1be>
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	6011      	str	r1, [r2, #0]
 8012e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e7c:	bf18      	it	ne
 8012e7e:	b21b      	sxthne	r3, r3
 8012e80:	e7cf      	b.n	8012e22 <_printf_i+0x52>
 8012e82:	6813      	ldr	r3, [r2, #0]
 8012e84:	6825      	ldr	r5, [r4, #0]
 8012e86:	1d18      	adds	r0, r3, #4
 8012e88:	6010      	str	r0, [r2, #0]
 8012e8a:	0628      	lsls	r0, r5, #24
 8012e8c:	d501      	bpl.n	8012e92 <_printf_i+0xc2>
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	e002      	b.n	8012e98 <_printf_i+0xc8>
 8012e92:	0668      	lsls	r0, r5, #25
 8012e94:	d5fb      	bpl.n	8012e8e <_printf_i+0xbe>
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	4854      	ldr	r0, [pc, #336]	; (8012fec <_printf_i+0x21c>)
 8012e9a:	296f      	cmp	r1, #111	; 0x6f
 8012e9c:	bf14      	ite	ne
 8012e9e:	220a      	movne	r2, #10
 8012ea0:	2208      	moveq	r2, #8
 8012ea2:	2100      	movs	r1, #0
 8012ea4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ea8:	6865      	ldr	r5, [r4, #4]
 8012eaa:	60a5      	str	r5, [r4, #8]
 8012eac:	2d00      	cmp	r5, #0
 8012eae:	f2c0 8095 	blt.w	8012fdc <_printf_i+0x20c>
 8012eb2:	6821      	ldr	r1, [r4, #0]
 8012eb4:	f021 0104 	bic.w	r1, r1, #4
 8012eb8:	6021      	str	r1, [r4, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d13d      	bne.n	8012f3a <_printf_i+0x16a>
 8012ebe:	2d00      	cmp	r5, #0
 8012ec0:	f040 808e 	bne.w	8012fe0 <_printf_i+0x210>
 8012ec4:	4665      	mov	r5, ip
 8012ec6:	2a08      	cmp	r2, #8
 8012ec8:	d10b      	bne.n	8012ee2 <_printf_i+0x112>
 8012eca:	6823      	ldr	r3, [r4, #0]
 8012ecc:	07db      	lsls	r3, r3, #31
 8012ece:	d508      	bpl.n	8012ee2 <_printf_i+0x112>
 8012ed0:	6923      	ldr	r3, [r4, #16]
 8012ed2:	6862      	ldr	r2, [r4, #4]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	bfde      	ittt	le
 8012ed8:	2330      	movle	r3, #48	; 0x30
 8012eda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ede:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012ee2:	ebac 0305 	sub.w	r3, ip, r5
 8012ee6:	6123      	str	r3, [r4, #16]
 8012ee8:	f8cd 8000 	str.w	r8, [sp]
 8012eec:	463b      	mov	r3, r7
 8012eee:	aa03      	add	r2, sp, #12
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	f7ff fef6 	bl	8012ce4 <_printf_common>
 8012ef8:	3001      	adds	r0, #1
 8012efa:	d14d      	bne.n	8012f98 <_printf_i+0x1c8>
 8012efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f00:	b005      	add	sp, #20
 8012f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f06:	4839      	ldr	r0, [pc, #228]	; (8012fec <_printf_i+0x21c>)
 8012f08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012f0c:	6813      	ldr	r3, [r2, #0]
 8012f0e:	6821      	ldr	r1, [r4, #0]
 8012f10:	1d1d      	adds	r5, r3, #4
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6015      	str	r5, [r2, #0]
 8012f16:	060a      	lsls	r2, r1, #24
 8012f18:	d50b      	bpl.n	8012f32 <_printf_i+0x162>
 8012f1a:	07ca      	lsls	r2, r1, #31
 8012f1c:	bf44      	itt	mi
 8012f1e:	f041 0120 	orrmi.w	r1, r1, #32
 8012f22:	6021      	strmi	r1, [r4, #0]
 8012f24:	b91b      	cbnz	r3, 8012f2e <_printf_i+0x15e>
 8012f26:	6822      	ldr	r2, [r4, #0]
 8012f28:	f022 0220 	bic.w	r2, r2, #32
 8012f2c:	6022      	str	r2, [r4, #0]
 8012f2e:	2210      	movs	r2, #16
 8012f30:	e7b7      	b.n	8012ea2 <_printf_i+0xd2>
 8012f32:	064d      	lsls	r5, r1, #25
 8012f34:	bf48      	it	mi
 8012f36:	b29b      	uxthmi	r3, r3
 8012f38:	e7ef      	b.n	8012f1a <_printf_i+0x14a>
 8012f3a:	4665      	mov	r5, ip
 8012f3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f40:	fb02 3311 	mls	r3, r2, r1, r3
 8012f44:	5cc3      	ldrb	r3, [r0, r3]
 8012f46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	d1f5      	bne.n	8012f3c <_printf_i+0x16c>
 8012f50:	e7b9      	b.n	8012ec6 <_printf_i+0xf6>
 8012f52:	6813      	ldr	r3, [r2, #0]
 8012f54:	6825      	ldr	r5, [r4, #0]
 8012f56:	6961      	ldr	r1, [r4, #20]
 8012f58:	1d18      	adds	r0, r3, #4
 8012f5a:	6010      	str	r0, [r2, #0]
 8012f5c:	0628      	lsls	r0, r5, #24
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	d501      	bpl.n	8012f66 <_printf_i+0x196>
 8012f62:	6019      	str	r1, [r3, #0]
 8012f64:	e002      	b.n	8012f6c <_printf_i+0x19c>
 8012f66:	066a      	lsls	r2, r5, #25
 8012f68:	d5fb      	bpl.n	8012f62 <_printf_i+0x192>
 8012f6a:	8019      	strh	r1, [r3, #0]
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	6123      	str	r3, [r4, #16]
 8012f70:	4665      	mov	r5, ip
 8012f72:	e7b9      	b.n	8012ee8 <_printf_i+0x118>
 8012f74:	6813      	ldr	r3, [r2, #0]
 8012f76:	1d19      	adds	r1, r3, #4
 8012f78:	6011      	str	r1, [r2, #0]
 8012f7a:	681d      	ldr	r5, [r3, #0]
 8012f7c:	6862      	ldr	r2, [r4, #4]
 8012f7e:	2100      	movs	r1, #0
 8012f80:	4628      	mov	r0, r5
 8012f82:	f7ed f93d 	bl	8000200 <memchr>
 8012f86:	b108      	cbz	r0, 8012f8c <_printf_i+0x1bc>
 8012f88:	1b40      	subs	r0, r0, r5
 8012f8a:	6060      	str	r0, [r4, #4]
 8012f8c:	6863      	ldr	r3, [r4, #4]
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	2300      	movs	r3, #0
 8012f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f96:	e7a7      	b.n	8012ee8 <_printf_i+0x118>
 8012f98:	6923      	ldr	r3, [r4, #16]
 8012f9a:	462a      	mov	r2, r5
 8012f9c:	4639      	mov	r1, r7
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	47c0      	blx	r8
 8012fa2:	3001      	adds	r0, #1
 8012fa4:	d0aa      	beq.n	8012efc <_printf_i+0x12c>
 8012fa6:	6823      	ldr	r3, [r4, #0]
 8012fa8:	079b      	lsls	r3, r3, #30
 8012faa:	d413      	bmi.n	8012fd4 <_printf_i+0x204>
 8012fac:	68e0      	ldr	r0, [r4, #12]
 8012fae:	9b03      	ldr	r3, [sp, #12]
 8012fb0:	4298      	cmp	r0, r3
 8012fb2:	bfb8      	it	lt
 8012fb4:	4618      	movlt	r0, r3
 8012fb6:	e7a3      	b.n	8012f00 <_printf_i+0x130>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	464a      	mov	r2, r9
 8012fbc:	4639      	mov	r1, r7
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	47c0      	blx	r8
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	d09a      	beq.n	8012efc <_printf_i+0x12c>
 8012fc6:	3501      	adds	r5, #1
 8012fc8:	68e3      	ldr	r3, [r4, #12]
 8012fca:	9a03      	ldr	r2, [sp, #12]
 8012fcc:	1a9b      	subs	r3, r3, r2
 8012fce:	42ab      	cmp	r3, r5
 8012fd0:	dcf2      	bgt.n	8012fb8 <_printf_i+0x1e8>
 8012fd2:	e7eb      	b.n	8012fac <_printf_i+0x1dc>
 8012fd4:	2500      	movs	r5, #0
 8012fd6:	f104 0919 	add.w	r9, r4, #25
 8012fda:	e7f5      	b.n	8012fc8 <_printf_i+0x1f8>
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d1ac      	bne.n	8012f3a <_printf_i+0x16a>
 8012fe0:	7803      	ldrb	r3, [r0, #0]
 8012fe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fea:	e76c      	b.n	8012ec6 <_printf_i+0xf6>
 8012fec:	08014199 	.word	0x08014199
 8012ff0:	080141aa 	.word	0x080141aa

08012ff4 <iprintf>:
 8012ff4:	b40f      	push	{r0, r1, r2, r3}
 8012ff6:	4b0a      	ldr	r3, [pc, #40]	; (8013020 <iprintf+0x2c>)
 8012ff8:	b513      	push	{r0, r1, r4, lr}
 8012ffa:	681c      	ldr	r4, [r3, #0]
 8012ffc:	b124      	cbz	r4, 8013008 <iprintf+0x14>
 8012ffe:	69a3      	ldr	r3, [r4, #24]
 8013000:	b913      	cbnz	r3, 8013008 <iprintf+0x14>
 8013002:	4620      	mov	r0, r4
 8013004:	f000 fb1a 	bl	801363c <__sinit>
 8013008:	ab05      	add	r3, sp, #20
 801300a:	9a04      	ldr	r2, [sp, #16]
 801300c:	68a1      	ldr	r1, [r4, #8]
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	4620      	mov	r0, r4
 8013012:	f7ff fd51 	bl	8012ab8 <_vfiprintf_r>
 8013016:	b002      	add	sp, #8
 8013018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801301c:	b004      	add	sp, #16
 801301e:	4770      	bx	lr
 8013020:	200001d0 	.word	0x200001d0

08013024 <_puts_r>:
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	460e      	mov	r6, r1
 8013028:	4605      	mov	r5, r0
 801302a:	b118      	cbz	r0, 8013034 <_puts_r+0x10>
 801302c:	6983      	ldr	r3, [r0, #24]
 801302e:	b90b      	cbnz	r3, 8013034 <_puts_r+0x10>
 8013030:	f000 fb04 	bl	801363c <__sinit>
 8013034:	69ab      	ldr	r3, [r5, #24]
 8013036:	68ac      	ldr	r4, [r5, #8]
 8013038:	b913      	cbnz	r3, 8013040 <_puts_r+0x1c>
 801303a:	4628      	mov	r0, r5
 801303c:	f000 fafe 	bl	801363c <__sinit>
 8013040:	4b23      	ldr	r3, [pc, #140]	; (80130d0 <_puts_r+0xac>)
 8013042:	429c      	cmp	r4, r3
 8013044:	d117      	bne.n	8013076 <_puts_r+0x52>
 8013046:	686c      	ldr	r4, [r5, #4]
 8013048:	89a3      	ldrh	r3, [r4, #12]
 801304a:	071b      	lsls	r3, r3, #28
 801304c:	d51d      	bpl.n	801308a <_puts_r+0x66>
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	b1db      	cbz	r3, 801308a <_puts_r+0x66>
 8013052:	3e01      	subs	r6, #1
 8013054:	68a3      	ldr	r3, [r4, #8]
 8013056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801305a:	3b01      	subs	r3, #1
 801305c:	60a3      	str	r3, [r4, #8]
 801305e:	b9e9      	cbnz	r1, 801309c <_puts_r+0x78>
 8013060:	2b00      	cmp	r3, #0
 8013062:	da2e      	bge.n	80130c2 <_puts_r+0x9e>
 8013064:	4622      	mov	r2, r4
 8013066:	210a      	movs	r1, #10
 8013068:	4628      	mov	r0, r5
 801306a:	f000 f92f 	bl	80132cc <__swbuf_r>
 801306e:	3001      	adds	r0, #1
 8013070:	d011      	beq.n	8013096 <_puts_r+0x72>
 8013072:	200a      	movs	r0, #10
 8013074:	e011      	b.n	801309a <_puts_r+0x76>
 8013076:	4b17      	ldr	r3, [pc, #92]	; (80130d4 <_puts_r+0xb0>)
 8013078:	429c      	cmp	r4, r3
 801307a:	d101      	bne.n	8013080 <_puts_r+0x5c>
 801307c:	68ac      	ldr	r4, [r5, #8]
 801307e:	e7e3      	b.n	8013048 <_puts_r+0x24>
 8013080:	4b15      	ldr	r3, [pc, #84]	; (80130d8 <_puts_r+0xb4>)
 8013082:	429c      	cmp	r4, r3
 8013084:	bf08      	it	eq
 8013086:	68ec      	ldreq	r4, [r5, #12]
 8013088:	e7de      	b.n	8013048 <_puts_r+0x24>
 801308a:	4621      	mov	r1, r4
 801308c:	4628      	mov	r0, r5
 801308e:	f000 f96f 	bl	8013370 <__swsetup_r>
 8013092:	2800      	cmp	r0, #0
 8013094:	d0dd      	beq.n	8013052 <_puts_r+0x2e>
 8013096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801309a:	bd70      	pop	{r4, r5, r6, pc}
 801309c:	2b00      	cmp	r3, #0
 801309e:	da04      	bge.n	80130aa <_puts_r+0x86>
 80130a0:	69a2      	ldr	r2, [r4, #24]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	dc06      	bgt.n	80130b4 <_puts_r+0x90>
 80130a6:	290a      	cmp	r1, #10
 80130a8:	d004      	beq.n	80130b4 <_puts_r+0x90>
 80130aa:	6823      	ldr	r3, [r4, #0]
 80130ac:	1c5a      	adds	r2, r3, #1
 80130ae:	6022      	str	r2, [r4, #0]
 80130b0:	7019      	strb	r1, [r3, #0]
 80130b2:	e7cf      	b.n	8013054 <_puts_r+0x30>
 80130b4:	4622      	mov	r2, r4
 80130b6:	4628      	mov	r0, r5
 80130b8:	f000 f908 	bl	80132cc <__swbuf_r>
 80130bc:	3001      	adds	r0, #1
 80130be:	d1c9      	bne.n	8013054 <_puts_r+0x30>
 80130c0:	e7e9      	b.n	8013096 <_puts_r+0x72>
 80130c2:	6823      	ldr	r3, [r4, #0]
 80130c4:	200a      	movs	r0, #10
 80130c6:	1c5a      	adds	r2, r3, #1
 80130c8:	6022      	str	r2, [r4, #0]
 80130ca:	7018      	strb	r0, [r3, #0]
 80130cc:	e7e5      	b.n	801309a <_puts_r+0x76>
 80130ce:	bf00      	nop
 80130d0:	080141dc 	.word	0x080141dc
 80130d4:	080141fc 	.word	0x080141fc
 80130d8:	080141bc 	.word	0x080141bc

080130dc <puts>:
 80130dc:	4b02      	ldr	r3, [pc, #8]	; (80130e8 <puts+0xc>)
 80130de:	4601      	mov	r1, r0
 80130e0:	6818      	ldr	r0, [r3, #0]
 80130e2:	f7ff bf9f 	b.w	8013024 <_puts_r>
 80130e6:	bf00      	nop
 80130e8:	200001d0 	.word	0x200001d0

080130ec <_sbrk_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4c06      	ldr	r4, [pc, #24]	; (8013108 <_sbrk_r+0x1c>)
 80130f0:	2300      	movs	r3, #0
 80130f2:	4605      	mov	r5, r0
 80130f4:	4608      	mov	r0, r1
 80130f6:	6023      	str	r3, [r4, #0]
 80130f8:	f7f0 fbde 	bl	80038b8 <_sbrk>
 80130fc:	1c43      	adds	r3, r0, #1
 80130fe:	d102      	bne.n	8013106 <_sbrk_r+0x1a>
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	b103      	cbz	r3, 8013106 <_sbrk_r+0x1a>
 8013104:	602b      	str	r3, [r5, #0]
 8013106:	bd38      	pop	{r3, r4, r5, pc}
 8013108:	200104cc 	.word	0x200104cc

0801310c <siprintf>:
 801310c:	b40e      	push	{r1, r2, r3}
 801310e:	b500      	push	{lr}
 8013110:	b09c      	sub	sp, #112	; 0x70
 8013112:	ab1d      	add	r3, sp, #116	; 0x74
 8013114:	9002      	str	r0, [sp, #8]
 8013116:	9006      	str	r0, [sp, #24]
 8013118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801311c:	4809      	ldr	r0, [pc, #36]	; (8013144 <siprintf+0x38>)
 801311e:	9107      	str	r1, [sp, #28]
 8013120:	9104      	str	r1, [sp, #16]
 8013122:	4909      	ldr	r1, [pc, #36]	; (8013148 <siprintf+0x3c>)
 8013124:	f853 2b04 	ldr.w	r2, [r3], #4
 8013128:	9105      	str	r1, [sp, #20]
 801312a:	6800      	ldr	r0, [r0, #0]
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	a902      	add	r1, sp, #8
 8013130:	f000 fc24 	bl	801397c <_svfiprintf_r>
 8013134:	9b02      	ldr	r3, [sp, #8]
 8013136:	2200      	movs	r2, #0
 8013138:	701a      	strb	r2, [r3, #0]
 801313a:	b01c      	add	sp, #112	; 0x70
 801313c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013140:	b003      	add	sp, #12
 8013142:	4770      	bx	lr
 8013144:	200001d0 	.word	0x200001d0
 8013148:	ffff0208 	.word	0xffff0208

0801314c <strncpy>:
 801314c:	b570      	push	{r4, r5, r6, lr}
 801314e:	3901      	subs	r1, #1
 8013150:	4604      	mov	r4, r0
 8013152:	b902      	cbnz	r2, 8013156 <strncpy+0xa>
 8013154:	bd70      	pop	{r4, r5, r6, pc}
 8013156:	4623      	mov	r3, r4
 8013158:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801315c:	f803 5b01 	strb.w	r5, [r3], #1
 8013160:	1e56      	subs	r6, r2, #1
 8013162:	b92d      	cbnz	r5, 8013170 <strncpy+0x24>
 8013164:	4414      	add	r4, r2
 8013166:	42a3      	cmp	r3, r4
 8013168:	d0f4      	beq.n	8013154 <strncpy+0x8>
 801316a:	f803 5b01 	strb.w	r5, [r3], #1
 801316e:	e7fa      	b.n	8013166 <strncpy+0x1a>
 8013170:	461c      	mov	r4, r3
 8013172:	4632      	mov	r2, r6
 8013174:	e7ed      	b.n	8013152 <strncpy+0x6>

08013176 <strstr>:
 8013176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013178:	7803      	ldrb	r3, [r0, #0]
 801317a:	b17b      	cbz	r3, 801319c <strstr+0x26>
 801317c:	4604      	mov	r4, r0
 801317e:	7823      	ldrb	r3, [r4, #0]
 8013180:	4620      	mov	r0, r4
 8013182:	1c66      	adds	r6, r4, #1
 8013184:	b17b      	cbz	r3, 80131a6 <strstr+0x30>
 8013186:	1e4a      	subs	r2, r1, #1
 8013188:	1e63      	subs	r3, r4, #1
 801318a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801318e:	b14d      	cbz	r5, 80131a4 <strstr+0x2e>
 8013190:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013194:	42af      	cmp	r7, r5
 8013196:	4634      	mov	r4, r6
 8013198:	d0f7      	beq.n	801318a <strstr+0x14>
 801319a:	e7f0      	b.n	801317e <strstr+0x8>
 801319c:	780b      	ldrb	r3, [r1, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	bf18      	it	ne
 80131a2:	2000      	movne	r0, #0
 80131a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a6:	4618      	mov	r0, r3
 80131a8:	e7fc      	b.n	80131a4 <strstr+0x2e>

080131aa <_strtol_l.isra.0>:
 80131aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ae:	4680      	mov	r8, r0
 80131b0:	4689      	mov	r9, r1
 80131b2:	4692      	mov	sl, r2
 80131b4:	461e      	mov	r6, r3
 80131b6:	460f      	mov	r7, r1
 80131b8:	463d      	mov	r5, r7
 80131ba:	9808      	ldr	r0, [sp, #32]
 80131bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80131c0:	f000 fac6 	bl	8013750 <__locale_ctype_ptr_l>
 80131c4:	4420      	add	r0, r4
 80131c6:	7843      	ldrb	r3, [r0, #1]
 80131c8:	f013 0308 	ands.w	r3, r3, #8
 80131cc:	d132      	bne.n	8013234 <_strtol_l.isra.0+0x8a>
 80131ce:	2c2d      	cmp	r4, #45	; 0x2d
 80131d0:	d132      	bne.n	8013238 <_strtol_l.isra.0+0x8e>
 80131d2:	787c      	ldrb	r4, [r7, #1]
 80131d4:	1cbd      	adds	r5, r7, #2
 80131d6:	2201      	movs	r2, #1
 80131d8:	2e00      	cmp	r6, #0
 80131da:	d05d      	beq.n	8013298 <_strtol_l.isra.0+0xee>
 80131dc:	2e10      	cmp	r6, #16
 80131de:	d109      	bne.n	80131f4 <_strtol_l.isra.0+0x4a>
 80131e0:	2c30      	cmp	r4, #48	; 0x30
 80131e2:	d107      	bne.n	80131f4 <_strtol_l.isra.0+0x4a>
 80131e4:	782b      	ldrb	r3, [r5, #0]
 80131e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80131ea:	2b58      	cmp	r3, #88	; 0x58
 80131ec:	d14f      	bne.n	801328e <_strtol_l.isra.0+0xe4>
 80131ee:	786c      	ldrb	r4, [r5, #1]
 80131f0:	2610      	movs	r6, #16
 80131f2:	3502      	adds	r5, #2
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	bf14      	ite	ne
 80131f8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80131fc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013200:	2700      	movs	r7, #0
 8013202:	fbb1 fcf6 	udiv	ip, r1, r6
 8013206:	4638      	mov	r0, r7
 8013208:	fb06 1e1c 	mls	lr, r6, ip, r1
 801320c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013210:	2b09      	cmp	r3, #9
 8013212:	d817      	bhi.n	8013244 <_strtol_l.isra.0+0x9a>
 8013214:	461c      	mov	r4, r3
 8013216:	42a6      	cmp	r6, r4
 8013218:	dd23      	ble.n	8013262 <_strtol_l.isra.0+0xb8>
 801321a:	1c7b      	adds	r3, r7, #1
 801321c:	d007      	beq.n	801322e <_strtol_l.isra.0+0x84>
 801321e:	4584      	cmp	ip, r0
 8013220:	d31c      	bcc.n	801325c <_strtol_l.isra.0+0xb2>
 8013222:	d101      	bne.n	8013228 <_strtol_l.isra.0+0x7e>
 8013224:	45a6      	cmp	lr, r4
 8013226:	db19      	blt.n	801325c <_strtol_l.isra.0+0xb2>
 8013228:	fb00 4006 	mla	r0, r0, r6, r4
 801322c:	2701      	movs	r7, #1
 801322e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013232:	e7eb      	b.n	801320c <_strtol_l.isra.0+0x62>
 8013234:	462f      	mov	r7, r5
 8013236:	e7bf      	b.n	80131b8 <_strtol_l.isra.0+0xe>
 8013238:	2c2b      	cmp	r4, #43	; 0x2b
 801323a:	bf04      	itt	eq
 801323c:	1cbd      	addeq	r5, r7, #2
 801323e:	787c      	ldrbeq	r4, [r7, #1]
 8013240:	461a      	mov	r2, r3
 8013242:	e7c9      	b.n	80131d8 <_strtol_l.isra.0+0x2e>
 8013244:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013248:	2b19      	cmp	r3, #25
 801324a:	d801      	bhi.n	8013250 <_strtol_l.isra.0+0xa6>
 801324c:	3c37      	subs	r4, #55	; 0x37
 801324e:	e7e2      	b.n	8013216 <_strtol_l.isra.0+0x6c>
 8013250:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013254:	2b19      	cmp	r3, #25
 8013256:	d804      	bhi.n	8013262 <_strtol_l.isra.0+0xb8>
 8013258:	3c57      	subs	r4, #87	; 0x57
 801325a:	e7dc      	b.n	8013216 <_strtol_l.isra.0+0x6c>
 801325c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013260:	e7e5      	b.n	801322e <_strtol_l.isra.0+0x84>
 8013262:	1c7b      	adds	r3, r7, #1
 8013264:	d108      	bne.n	8013278 <_strtol_l.isra.0+0xce>
 8013266:	2322      	movs	r3, #34	; 0x22
 8013268:	f8c8 3000 	str.w	r3, [r8]
 801326c:	4608      	mov	r0, r1
 801326e:	f1ba 0f00 	cmp.w	sl, #0
 8013272:	d107      	bne.n	8013284 <_strtol_l.isra.0+0xda>
 8013274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013278:	b102      	cbz	r2, 801327c <_strtol_l.isra.0+0xd2>
 801327a:	4240      	negs	r0, r0
 801327c:	f1ba 0f00 	cmp.w	sl, #0
 8013280:	d0f8      	beq.n	8013274 <_strtol_l.isra.0+0xca>
 8013282:	b10f      	cbz	r7, 8013288 <_strtol_l.isra.0+0xde>
 8013284:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8013288:	f8ca 9000 	str.w	r9, [sl]
 801328c:	e7f2      	b.n	8013274 <_strtol_l.isra.0+0xca>
 801328e:	2430      	movs	r4, #48	; 0x30
 8013290:	2e00      	cmp	r6, #0
 8013292:	d1af      	bne.n	80131f4 <_strtol_l.isra.0+0x4a>
 8013294:	2608      	movs	r6, #8
 8013296:	e7ad      	b.n	80131f4 <_strtol_l.isra.0+0x4a>
 8013298:	2c30      	cmp	r4, #48	; 0x30
 801329a:	d0a3      	beq.n	80131e4 <_strtol_l.isra.0+0x3a>
 801329c:	260a      	movs	r6, #10
 801329e:	e7a9      	b.n	80131f4 <_strtol_l.isra.0+0x4a>

080132a0 <strtol>:
 80132a0:	4b08      	ldr	r3, [pc, #32]	; (80132c4 <strtol+0x24>)
 80132a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132a4:	681c      	ldr	r4, [r3, #0]
 80132a6:	4d08      	ldr	r5, [pc, #32]	; (80132c8 <strtol+0x28>)
 80132a8:	6a23      	ldr	r3, [r4, #32]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	bf08      	it	eq
 80132ae:	462b      	moveq	r3, r5
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	4613      	mov	r3, r2
 80132b4:	460a      	mov	r2, r1
 80132b6:	4601      	mov	r1, r0
 80132b8:	4620      	mov	r0, r4
 80132ba:	f7ff ff76 	bl	80131aa <_strtol_l.isra.0>
 80132be:	b003      	add	sp, #12
 80132c0:	bd30      	pop	{r4, r5, pc}
 80132c2:	bf00      	nop
 80132c4:	200001d0 	.word	0x200001d0
 80132c8:	20000234 	.word	0x20000234

080132cc <__swbuf_r>:
 80132cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ce:	460e      	mov	r6, r1
 80132d0:	4614      	mov	r4, r2
 80132d2:	4605      	mov	r5, r0
 80132d4:	b118      	cbz	r0, 80132de <__swbuf_r+0x12>
 80132d6:	6983      	ldr	r3, [r0, #24]
 80132d8:	b90b      	cbnz	r3, 80132de <__swbuf_r+0x12>
 80132da:	f000 f9af 	bl	801363c <__sinit>
 80132de:	4b21      	ldr	r3, [pc, #132]	; (8013364 <__swbuf_r+0x98>)
 80132e0:	429c      	cmp	r4, r3
 80132e2:	d12a      	bne.n	801333a <__swbuf_r+0x6e>
 80132e4:	686c      	ldr	r4, [r5, #4]
 80132e6:	69a3      	ldr	r3, [r4, #24]
 80132e8:	60a3      	str	r3, [r4, #8]
 80132ea:	89a3      	ldrh	r3, [r4, #12]
 80132ec:	071a      	lsls	r2, r3, #28
 80132ee:	d52e      	bpl.n	801334e <__swbuf_r+0x82>
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	b363      	cbz	r3, 801334e <__swbuf_r+0x82>
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	6820      	ldr	r0, [r4, #0]
 80132f8:	1ac0      	subs	r0, r0, r3
 80132fa:	6963      	ldr	r3, [r4, #20]
 80132fc:	b2f6      	uxtb	r6, r6
 80132fe:	4283      	cmp	r3, r0
 8013300:	4637      	mov	r7, r6
 8013302:	dc04      	bgt.n	801330e <__swbuf_r+0x42>
 8013304:	4621      	mov	r1, r4
 8013306:	4628      	mov	r0, r5
 8013308:	f000 f92e 	bl	8013568 <_fflush_r>
 801330c:	bb28      	cbnz	r0, 801335a <__swbuf_r+0x8e>
 801330e:	68a3      	ldr	r3, [r4, #8]
 8013310:	3b01      	subs	r3, #1
 8013312:	60a3      	str	r3, [r4, #8]
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	1c5a      	adds	r2, r3, #1
 8013318:	6022      	str	r2, [r4, #0]
 801331a:	701e      	strb	r6, [r3, #0]
 801331c:	6963      	ldr	r3, [r4, #20]
 801331e:	3001      	adds	r0, #1
 8013320:	4283      	cmp	r3, r0
 8013322:	d004      	beq.n	801332e <__swbuf_r+0x62>
 8013324:	89a3      	ldrh	r3, [r4, #12]
 8013326:	07db      	lsls	r3, r3, #31
 8013328:	d519      	bpl.n	801335e <__swbuf_r+0x92>
 801332a:	2e0a      	cmp	r6, #10
 801332c:	d117      	bne.n	801335e <__swbuf_r+0x92>
 801332e:	4621      	mov	r1, r4
 8013330:	4628      	mov	r0, r5
 8013332:	f000 f919 	bl	8013568 <_fflush_r>
 8013336:	b190      	cbz	r0, 801335e <__swbuf_r+0x92>
 8013338:	e00f      	b.n	801335a <__swbuf_r+0x8e>
 801333a:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <__swbuf_r+0x9c>)
 801333c:	429c      	cmp	r4, r3
 801333e:	d101      	bne.n	8013344 <__swbuf_r+0x78>
 8013340:	68ac      	ldr	r4, [r5, #8]
 8013342:	e7d0      	b.n	80132e6 <__swbuf_r+0x1a>
 8013344:	4b09      	ldr	r3, [pc, #36]	; (801336c <__swbuf_r+0xa0>)
 8013346:	429c      	cmp	r4, r3
 8013348:	bf08      	it	eq
 801334a:	68ec      	ldreq	r4, [r5, #12]
 801334c:	e7cb      	b.n	80132e6 <__swbuf_r+0x1a>
 801334e:	4621      	mov	r1, r4
 8013350:	4628      	mov	r0, r5
 8013352:	f000 f80d 	bl	8013370 <__swsetup_r>
 8013356:	2800      	cmp	r0, #0
 8013358:	d0cc      	beq.n	80132f4 <__swbuf_r+0x28>
 801335a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801335e:	4638      	mov	r0, r7
 8013360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013362:	bf00      	nop
 8013364:	080141dc 	.word	0x080141dc
 8013368:	080141fc 	.word	0x080141fc
 801336c:	080141bc 	.word	0x080141bc

08013370 <__swsetup_r>:
 8013370:	4b32      	ldr	r3, [pc, #200]	; (801343c <__swsetup_r+0xcc>)
 8013372:	b570      	push	{r4, r5, r6, lr}
 8013374:	681d      	ldr	r5, [r3, #0]
 8013376:	4606      	mov	r6, r0
 8013378:	460c      	mov	r4, r1
 801337a:	b125      	cbz	r5, 8013386 <__swsetup_r+0x16>
 801337c:	69ab      	ldr	r3, [r5, #24]
 801337e:	b913      	cbnz	r3, 8013386 <__swsetup_r+0x16>
 8013380:	4628      	mov	r0, r5
 8013382:	f000 f95b 	bl	801363c <__sinit>
 8013386:	4b2e      	ldr	r3, [pc, #184]	; (8013440 <__swsetup_r+0xd0>)
 8013388:	429c      	cmp	r4, r3
 801338a:	d10f      	bne.n	80133ac <__swsetup_r+0x3c>
 801338c:	686c      	ldr	r4, [r5, #4]
 801338e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013392:	b29a      	uxth	r2, r3
 8013394:	0715      	lsls	r5, r2, #28
 8013396:	d42c      	bmi.n	80133f2 <__swsetup_r+0x82>
 8013398:	06d0      	lsls	r0, r2, #27
 801339a:	d411      	bmi.n	80133c0 <__swsetup_r+0x50>
 801339c:	2209      	movs	r2, #9
 801339e:	6032      	str	r2, [r6, #0]
 80133a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133a4:	81a3      	strh	r3, [r4, #12]
 80133a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133aa:	e03e      	b.n	801342a <__swsetup_r+0xba>
 80133ac:	4b25      	ldr	r3, [pc, #148]	; (8013444 <__swsetup_r+0xd4>)
 80133ae:	429c      	cmp	r4, r3
 80133b0:	d101      	bne.n	80133b6 <__swsetup_r+0x46>
 80133b2:	68ac      	ldr	r4, [r5, #8]
 80133b4:	e7eb      	b.n	801338e <__swsetup_r+0x1e>
 80133b6:	4b24      	ldr	r3, [pc, #144]	; (8013448 <__swsetup_r+0xd8>)
 80133b8:	429c      	cmp	r4, r3
 80133ba:	bf08      	it	eq
 80133bc:	68ec      	ldreq	r4, [r5, #12]
 80133be:	e7e6      	b.n	801338e <__swsetup_r+0x1e>
 80133c0:	0751      	lsls	r1, r2, #29
 80133c2:	d512      	bpl.n	80133ea <__swsetup_r+0x7a>
 80133c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133c6:	b141      	cbz	r1, 80133da <__swsetup_r+0x6a>
 80133c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133cc:	4299      	cmp	r1, r3
 80133ce:	d002      	beq.n	80133d6 <__swsetup_r+0x66>
 80133d0:	4630      	mov	r0, r6
 80133d2:	f7ff fa9f 	bl	8012914 <_free_r>
 80133d6:	2300      	movs	r3, #0
 80133d8:	6363      	str	r3, [r4, #52]	; 0x34
 80133da:	89a3      	ldrh	r3, [r4, #12]
 80133dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133e0:	81a3      	strh	r3, [r4, #12]
 80133e2:	2300      	movs	r3, #0
 80133e4:	6063      	str	r3, [r4, #4]
 80133e6:	6923      	ldr	r3, [r4, #16]
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	89a3      	ldrh	r3, [r4, #12]
 80133ec:	f043 0308 	orr.w	r3, r3, #8
 80133f0:	81a3      	strh	r3, [r4, #12]
 80133f2:	6923      	ldr	r3, [r4, #16]
 80133f4:	b94b      	cbnz	r3, 801340a <__swsetup_r+0x9a>
 80133f6:	89a3      	ldrh	r3, [r4, #12]
 80133f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013400:	d003      	beq.n	801340a <__swsetup_r+0x9a>
 8013402:	4621      	mov	r1, r4
 8013404:	4630      	mov	r0, r6
 8013406:	f000 f9cb 	bl	80137a0 <__smakebuf_r>
 801340a:	89a2      	ldrh	r2, [r4, #12]
 801340c:	f012 0301 	ands.w	r3, r2, #1
 8013410:	d00c      	beq.n	801342c <__swsetup_r+0xbc>
 8013412:	2300      	movs	r3, #0
 8013414:	60a3      	str	r3, [r4, #8]
 8013416:	6963      	ldr	r3, [r4, #20]
 8013418:	425b      	negs	r3, r3
 801341a:	61a3      	str	r3, [r4, #24]
 801341c:	6923      	ldr	r3, [r4, #16]
 801341e:	b953      	cbnz	r3, 8013436 <__swsetup_r+0xc6>
 8013420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013424:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013428:	d1ba      	bne.n	80133a0 <__swsetup_r+0x30>
 801342a:	bd70      	pop	{r4, r5, r6, pc}
 801342c:	0792      	lsls	r2, r2, #30
 801342e:	bf58      	it	pl
 8013430:	6963      	ldrpl	r3, [r4, #20]
 8013432:	60a3      	str	r3, [r4, #8]
 8013434:	e7f2      	b.n	801341c <__swsetup_r+0xac>
 8013436:	2000      	movs	r0, #0
 8013438:	e7f7      	b.n	801342a <__swsetup_r+0xba>
 801343a:	bf00      	nop
 801343c:	200001d0 	.word	0x200001d0
 8013440:	080141dc 	.word	0x080141dc
 8013444:	080141fc 	.word	0x080141fc
 8013448:	080141bc 	.word	0x080141bc

0801344c <abort>:
 801344c:	b508      	push	{r3, lr}
 801344e:	2006      	movs	r0, #6
 8013450:	f000 fbb4 	bl	8013bbc <raise>
 8013454:	2001      	movs	r0, #1
 8013456:	f7f0 f9d3 	bl	8003800 <_exit>
	...

0801345c <__sflush_r>:
 801345c:	898a      	ldrh	r2, [r1, #12]
 801345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013462:	4605      	mov	r5, r0
 8013464:	0710      	lsls	r0, r2, #28
 8013466:	460c      	mov	r4, r1
 8013468:	d458      	bmi.n	801351c <__sflush_r+0xc0>
 801346a:	684b      	ldr	r3, [r1, #4]
 801346c:	2b00      	cmp	r3, #0
 801346e:	dc05      	bgt.n	801347c <__sflush_r+0x20>
 8013470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013472:	2b00      	cmp	r3, #0
 8013474:	dc02      	bgt.n	801347c <__sflush_r+0x20>
 8013476:	2000      	movs	r0, #0
 8013478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801347c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801347e:	2e00      	cmp	r6, #0
 8013480:	d0f9      	beq.n	8013476 <__sflush_r+0x1a>
 8013482:	2300      	movs	r3, #0
 8013484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013488:	682f      	ldr	r7, [r5, #0]
 801348a:	6a21      	ldr	r1, [r4, #32]
 801348c:	602b      	str	r3, [r5, #0]
 801348e:	d032      	beq.n	80134f6 <__sflush_r+0x9a>
 8013490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013492:	89a3      	ldrh	r3, [r4, #12]
 8013494:	075a      	lsls	r2, r3, #29
 8013496:	d505      	bpl.n	80134a4 <__sflush_r+0x48>
 8013498:	6863      	ldr	r3, [r4, #4]
 801349a:	1ac0      	subs	r0, r0, r3
 801349c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801349e:	b10b      	cbz	r3, 80134a4 <__sflush_r+0x48>
 80134a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134a2:	1ac0      	subs	r0, r0, r3
 80134a4:	2300      	movs	r3, #0
 80134a6:	4602      	mov	r2, r0
 80134a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134aa:	6a21      	ldr	r1, [r4, #32]
 80134ac:	4628      	mov	r0, r5
 80134ae:	47b0      	blx	r6
 80134b0:	1c43      	adds	r3, r0, #1
 80134b2:	89a3      	ldrh	r3, [r4, #12]
 80134b4:	d106      	bne.n	80134c4 <__sflush_r+0x68>
 80134b6:	6829      	ldr	r1, [r5, #0]
 80134b8:	291d      	cmp	r1, #29
 80134ba:	d848      	bhi.n	801354e <__sflush_r+0xf2>
 80134bc:	4a29      	ldr	r2, [pc, #164]	; (8013564 <__sflush_r+0x108>)
 80134be:	40ca      	lsrs	r2, r1
 80134c0:	07d6      	lsls	r6, r2, #31
 80134c2:	d544      	bpl.n	801354e <__sflush_r+0xf2>
 80134c4:	2200      	movs	r2, #0
 80134c6:	6062      	str	r2, [r4, #4]
 80134c8:	04d9      	lsls	r1, r3, #19
 80134ca:	6922      	ldr	r2, [r4, #16]
 80134cc:	6022      	str	r2, [r4, #0]
 80134ce:	d504      	bpl.n	80134da <__sflush_r+0x7e>
 80134d0:	1c42      	adds	r2, r0, #1
 80134d2:	d101      	bne.n	80134d8 <__sflush_r+0x7c>
 80134d4:	682b      	ldr	r3, [r5, #0]
 80134d6:	b903      	cbnz	r3, 80134da <__sflush_r+0x7e>
 80134d8:	6560      	str	r0, [r4, #84]	; 0x54
 80134da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134dc:	602f      	str	r7, [r5, #0]
 80134de:	2900      	cmp	r1, #0
 80134e0:	d0c9      	beq.n	8013476 <__sflush_r+0x1a>
 80134e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134e6:	4299      	cmp	r1, r3
 80134e8:	d002      	beq.n	80134f0 <__sflush_r+0x94>
 80134ea:	4628      	mov	r0, r5
 80134ec:	f7ff fa12 	bl	8012914 <_free_r>
 80134f0:	2000      	movs	r0, #0
 80134f2:	6360      	str	r0, [r4, #52]	; 0x34
 80134f4:	e7c0      	b.n	8013478 <__sflush_r+0x1c>
 80134f6:	2301      	movs	r3, #1
 80134f8:	4628      	mov	r0, r5
 80134fa:	47b0      	blx	r6
 80134fc:	1c41      	adds	r1, r0, #1
 80134fe:	d1c8      	bne.n	8013492 <__sflush_r+0x36>
 8013500:	682b      	ldr	r3, [r5, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d0c5      	beq.n	8013492 <__sflush_r+0x36>
 8013506:	2b1d      	cmp	r3, #29
 8013508:	d001      	beq.n	801350e <__sflush_r+0xb2>
 801350a:	2b16      	cmp	r3, #22
 801350c:	d101      	bne.n	8013512 <__sflush_r+0xb6>
 801350e:	602f      	str	r7, [r5, #0]
 8013510:	e7b1      	b.n	8013476 <__sflush_r+0x1a>
 8013512:	89a3      	ldrh	r3, [r4, #12]
 8013514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013518:	81a3      	strh	r3, [r4, #12]
 801351a:	e7ad      	b.n	8013478 <__sflush_r+0x1c>
 801351c:	690f      	ldr	r7, [r1, #16]
 801351e:	2f00      	cmp	r7, #0
 8013520:	d0a9      	beq.n	8013476 <__sflush_r+0x1a>
 8013522:	0793      	lsls	r3, r2, #30
 8013524:	680e      	ldr	r6, [r1, #0]
 8013526:	bf08      	it	eq
 8013528:	694b      	ldreq	r3, [r1, #20]
 801352a:	600f      	str	r7, [r1, #0]
 801352c:	bf18      	it	ne
 801352e:	2300      	movne	r3, #0
 8013530:	eba6 0807 	sub.w	r8, r6, r7
 8013534:	608b      	str	r3, [r1, #8]
 8013536:	f1b8 0f00 	cmp.w	r8, #0
 801353a:	dd9c      	ble.n	8013476 <__sflush_r+0x1a>
 801353c:	4643      	mov	r3, r8
 801353e:	463a      	mov	r2, r7
 8013540:	6a21      	ldr	r1, [r4, #32]
 8013542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013544:	4628      	mov	r0, r5
 8013546:	47b0      	blx	r6
 8013548:	2800      	cmp	r0, #0
 801354a:	dc06      	bgt.n	801355a <__sflush_r+0xfe>
 801354c:	89a3      	ldrh	r3, [r4, #12]
 801354e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013552:	81a3      	strh	r3, [r4, #12]
 8013554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013558:	e78e      	b.n	8013478 <__sflush_r+0x1c>
 801355a:	4407      	add	r7, r0
 801355c:	eba8 0800 	sub.w	r8, r8, r0
 8013560:	e7e9      	b.n	8013536 <__sflush_r+0xda>
 8013562:	bf00      	nop
 8013564:	20400001 	.word	0x20400001

08013568 <_fflush_r>:
 8013568:	b538      	push	{r3, r4, r5, lr}
 801356a:	690b      	ldr	r3, [r1, #16]
 801356c:	4605      	mov	r5, r0
 801356e:	460c      	mov	r4, r1
 8013570:	b1db      	cbz	r3, 80135aa <_fflush_r+0x42>
 8013572:	b118      	cbz	r0, 801357c <_fflush_r+0x14>
 8013574:	6983      	ldr	r3, [r0, #24]
 8013576:	b90b      	cbnz	r3, 801357c <_fflush_r+0x14>
 8013578:	f000 f860 	bl	801363c <__sinit>
 801357c:	4b0c      	ldr	r3, [pc, #48]	; (80135b0 <_fflush_r+0x48>)
 801357e:	429c      	cmp	r4, r3
 8013580:	d109      	bne.n	8013596 <_fflush_r+0x2e>
 8013582:	686c      	ldr	r4, [r5, #4]
 8013584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013588:	b17b      	cbz	r3, 80135aa <_fflush_r+0x42>
 801358a:	4621      	mov	r1, r4
 801358c:	4628      	mov	r0, r5
 801358e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013592:	f7ff bf63 	b.w	801345c <__sflush_r>
 8013596:	4b07      	ldr	r3, [pc, #28]	; (80135b4 <_fflush_r+0x4c>)
 8013598:	429c      	cmp	r4, r3
 801359a:	d101      	bne.n	80135a0 <_fflush_r+0x38>
 801359c:	68ac      	ldr	r4, [r5, #8]
 801359e:	e7f1      	b.n	8013584 <_fflush_r+0x1c>
 80135a0:	4b05      	ldr	r3, [pc, #20]	; (80135b8 <_fflush_r+0x50>)
 80135a2:	429c      	cmp	r4, r3
 80135a4:	bf08      	it	eq
 80135a6:	68ec      	ldreq	r4, [r5, #12]
 80135a8:	e7ec      	b.n	8013584 <_fflush_r+0x1c>
 80135aa:	2000      	movs	r0, #0
 80135ac:	bd38      	pop	{r3, r4, r5, pc}
 80135ae:	bf00      	nop
 80135b0:	080141dc 	.word	0x080141dc
 80135b4:	080141fc 	.word	0x080141fc
 80135b8:	080141bc 	.word	0x080141bc

080135bc <std>:
 80135bc:	2300      	movs	r3, #0
 80135be:	b510      	push	{r4, lr}
 80135c0:	4604      	mov	r4, r0
 80135c2:	e9c0 3300 	strd	r3, r3, [r0]
 80135c6:	6083      	str	r3, [r0, #8]
 80135c8:	8181      	strh	r1, [r0, #12]
 80135ca:	6643      	str	r3, [r0, #100]	; 0x64
 80135cc:	81c2      	strh	r2, [r0, #14]
 80135ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135d2:	6183      	str	r3, [r0, #24]
 80135d4:	4619      	mov	r1, r3
 80135d6:	2208      	movs	r2, #8
 80135d8:	305c      	adds	r0, #92	; 0x5c
 80135da:	f7ff f992 	bl	8012902 <memset>
 80135de:	4b05      	ldr	r3, [pc, #20]	; (80135f4 <std+0x38>)
 80135e0:	6263      	str	r3, [r4, #36]	; 0x24
 80135e2:	4b05      	ldr	r3, [pc, #20]	; (80135f8 <std+0x3c>)
 80135e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80135e6:	4b05      	ldr	r3, [pc, #20]	; (80135fc <std+0x40>)
 80135e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135ea:	4b05      	ldr	r3, [pc, #20]	; (8013600 <std+0x44>)
 80135ec:	6224      	str	r4, [r4, #32]
 80135ee:	6323      	str	r3, [r4, #48]	; 0x30
 80135f0:	bd10      	pop	{r4, pc}
 80135f2:	bf00      	nop
 80135f4:	08013bf5 	.word	0x08013bf5
 80135f8:	08013c17 	.word	0x08013c17
 80135fc:	08013c4f 	.word	0x08013c4f
 8013600:	08013c73 	.word	0x08013c73

08013604 <_cleanup_r>:
 8013604:	4901      	ldr	r1, [pc, #4]	; (801360c <_cleanup_r+0x8>)
 8013606:	f000 b885 	b.w	8013714 <_fwalk_reent>
 801360a:	bf00      	nop
 801360c:	08013569 	.word	0x08013569

08013610 <__sfmoreglue>:
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	1e4a      	subs	r2, r1, #1
 8013614:	2568      	movs	r5, #104	; 0x68
 8013616:	4355      	muls	r5, r2
 8013618:	460e      	mov	r6, r1
 801361a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801361e:	f7ff f9c7 	bl	80129b0 <_malloc_r>
 8013622:	4604      	mov	r4, r0
 8013624:	b140      	cbz	r0, 8013638 <__sfmoreglue+0x28>
 8013626:	2100      	movs	r1, #0
 8013628:	e9c0 1600 	strd	r1, r6, [r0]
 801362c:	300c      	adds	r0, #12
 801362e:	60a0      	str	r0, [r4, #8]
 8013630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013634:	f7ff f965 	bl	8012902 <memset>
 8013638:	4620      	mov	r0, r4
 801363a:	bd70      	pop	{r4, r5, r6, pc}

0801363c <__sinit>:
 801363c:	6983      	ldr	r3, [r0, #24]
 801363e:	b510      	push	{r4, lr}
 8013640:	4604      	mov	r4, r0
 8013642:	bb33      	cbnz	r3, 8013692 <__sinit+0x56>
 8013644:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013648:	6503      	str	r3, [r0, #80]	; 0x50
 801364a:	4b12      	ldr	r3, [pc, #72]	; (8013694 <__sinit+0x58>)
 801364c:	4a12      	ldr	r2, [pc, #72]	; (8013698 <__sinit+0x5c>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	6282      	str	r2, [r0, #40]	; 0x28
 8013652:	4298      	cmp	r0, r3
 8013654:	bf04      	itt	eq
 8013656:	2301      	moveq	r3, #1
 8013658:	6183      	streq	r3, [r0, #24]
 801365a:	f000 f81f 	bl	801369c <__sfp>
 801365e:	6060      	str	r0, [r4, #4]
 8013660:	4620      	mov	r0, r4
 8013662:	f000 f81b 	bl	801369c <__sfp>
 8013666:	60a0      	str	r0, [r4, #8]
 8013668:	4620      	mov	r0, r4
 801366a:	f000 f817 	bl	801369c <__sfp>
 801366e:	2200      	movs	r2, #0
 8013670:	60e0      	str	r0, [r4, #12]
 8013672:	2104      	movs	r1, #4
 8013674:	6860      	ldr	r0, [r4, #4]
 8013676:	f7ff ffa1 	bl	80135bc <std>
 801367a:	2201      	movs	r2, #1
 801367c:	2109      	movs	r1, #9
 801367e:	68a0      	ldr	r0, [r4, #8]
 8013680:	f7ff ff9c 	bl	80135bc <std>
 8013684:	2202      	movs	r2, #2
 8013686:	2112      	movs	r1, #18
 8013688:	68e0      	ldr	r0, [r4, #12]
 801368a:	f7ff ff97 	bl	80135bc <std>
 801368e:	2301      	movs	r3, #1
 8013690:	61a3      	str	r3, [r4, #24]
 8013692:	bd10      	pop	{r4, pc}
 8013694:	08014184 	.word	0x08014184
 8013698:	08013605 	.word	0x08013605

0801369c <__sfp>:
 801369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801369e:	4b1b      	ldr	r3, [pc, #108]	; (801370c <__sfp+0x70>)
 80136a0:	681e      	ldr	r6, [r3, #0]
 80136a2:	69b3      	ldr	r3, [r6, #24]
 80136a4:	4607      	mov	r7, r0
 80136a6:	b913      	cbnz	r3, 80136ae <__sfp+0x12>
 80136a8:	4630      	mov	r0, r6
 80136aa:	f7ff ffc7 	bl	801363c <__sinit>
 80136ae:	3648      	adds	r6, #72	; 0x48
 80136b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136b4:	3b01      	subs	r3, #1
 80136b6:	d503      	bpl.n	80136c0 <__sfp+0x24>
 80136b8:	6833      	ldr	r3, [r6, #0]
 80136ba:	b133      	cbz	r3, 80136ca <__sfp+0x2e>
 80136bc:	6836      	ldr	r6, [r6, #0]
 80136be:	e7f7      	b.n	80136b0 <__sfp+0x14>
 80136c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80136c4:	b16d      	cbz	r5, 80136e2 <__sfp+0x46>
 80136c6:	3468      	adds	r4, #104	; 0x68
 80136c8:	e7f4      	b.n	80136b4 <__sfp+0x18>
 80136ca:	2104      	movs	r1, #4
 80136cc:	4638      	mov	r0, r7
 80136ce:	f7ff ff9f 	bl	8013610 <__sfmoreglue>
 80136d2:	6030      	str	r0, [r6, #0]
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d1f1      	bne.n	80136bc <__sfp+0x20>
 80136d8:	230c      	movs	r3, #12
 80136da:	603b      	str	r3, [r7, #0]
 80136dc:	4604      	mov	r4, r0
 80136de:	4620      	mov	r0, r4
 80136e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136e2:	4b0b      	ldr	r3, [pc, #44]	; (8013710 <__sfp+0x74>)
 80136e4:	6665      	str	r5, [r4, #100]	; 0x64
 80136e6:	e9c4 5500 	strd	r5, r5, [r4]
 80136ea:	60a5      	str	r5, [r4, #8]
 80136ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80136f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80136f4:	2208      	movs	r2, #8
 80136f6:	4629      	mov	r1, r5
 80136f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80136fc:	f7ff f901 	bl	8012902 <memset>
 8013700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013708:	e7e9      	b.n	80136de <__sfp+0x42>
 801370a:	bf00      	nop
 801370c:	08014184 	.word	0x08014184
 8013710:	ffff0001 	.word	0xffff0001

08013714 <_fwalk_reent>:
 8013714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013718:	4680      	mov	r8, r0
 801371a:	4689      	mov	r9, r1
 801371c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013720:	2600      	movs	r6, #0
 8013722:	b914      	cbnz	r4, 801372a <_fwalk_reent+0x16>
 8013724:	4630      	mov	r0, r6
 8013726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801372a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801372e:	3f01      	subs	r7, #1
 8013730:	d501      	bpl.n	8013736 <_fwalk_reent+0x22>
 8013732:	6824      	ldr	r4, [r4, #0]
 8013734:	e7f5      	b.n	8013722 <_fwalk_reent+0xe>
 8013736:	89ab      	ldrh	r3, [r5, #12]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d907      	bls.n	801374c <_fwalk_reent+0x38>
 801373c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013740:	3301      	adds	r3, #1
 8013742:	d003      	beq.n	801374c <_fwalk_reent+0x38>
 8013744:	4629      	mov	r1, r5
 8013746:	4640      	mov	r0, r8
 8013748:	47c8      	blx	r9
 801374a:	4306      	orrs	r6, r0
 801374c:	3568      	adds	r5, #104	; 0x68
 801374e:	e7ee      	b.n	801372e <_fwalk_reent+0x1a>

08013750 <__locale_ctype_ptr_l>:
 8013750:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013754:	4770      	bx	lr

08013756 <__swhatbuf_r>:
 8013756:	b570      	push	{r4, r5, r6, lr}
 8013758:	460e      	mov	r6, r1
 801375a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801375e:	2900      	cmp	r1, #0
 8013760:	b096      	sub	sp, #88	; 0x58
 8013762:	4614      	mov	r4, r2
 8013764:	461d      	mov	r5, r3
 8013766:	da07      	bge.n	8013778 <__swhatbuf_r+0x22>
 8013768:	2300      	movs	r3, #0
 801376a:	602b      	str	r3, [r5, #0]
 801376c:	89b3      	ldrh	r3, [r6, #12]
 801376e:	061a      	lsls	r2, r3, #24
 8013770:	d410      	bmi.n	8013794 <__swhatbuf_r+0x3e>
 8013772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013776:	e00e      	b.n	8013796 <__swhatbuf_r+0x40>
 8013778:	466a      	mov	r2, sp
 801377a:	f000 faad 	bl	8013cd8 <_fstat_r>
 801377e:	2800      	cmp	r0, #0
 8013780:	dbf2      	blt.n	8013768 <__swhatbuf_r+0x12>
 8013782:	9a01      	ldr	r2, [sp, #4]
 8013784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801378c:	425a      	negs	r2, r3
 801378e:	415a      	adcs	r2, r3
 8013790:	602a      	str	r2, [r5, #0]
 8013792:	e7ee      	b.n	8013772 <__swhatbuf_r+0x1c>
 8013794:	2340      	movs	r3, #64	; 0x40
 8013796:	2000      	movs	r0, #0
 8013798:	6023      	str	r3, [r4, #0]
 801379a:	b016      	add	sp, #88	; 0x58
 801379c:	bd70      	pop	{r4, r5, r6, pc}
	...

080137a0 <__smakebuf_r>:
 80137a0:	898b      	ldrh	r3, [r1, #12]
 80137a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137a4:	079d      	lsls	r5, r3, #30
 80137a6:	4606      	mov	r6, r0
 80137a8:	460c      	mov	r4, r1
 80137aa:	d507      	bpl.n	80137bc <__smakebuf_r+0x1c>
 80137ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	6123      	str	r3, [r4, #16]
 80137b4:	2301      	movs	r3, #1
 80137b6:	6163      	str	r3, [r4, #20]
 80137b8:	b002      	add	sp, #8
 80137ba:	bd70      	pop	{r4, r5, r6, pc}
 80137bc:	ab01      	add	r3, sp, #4
 80137be:	466a      	mov	r2, sp
 80137c0:	f7ff ffc9 	bl	8013756 <__swhatbuf_r>
 80137c4:	9900      	ldr	r1, [sp, #0]
 80137c6:	4605      	mov	r5, r0
 80137c8:	4630      	mov	r0, r6
 80137ca:	f7ff f8f1 	bl	80129b0 <_malloc_r>
 80137ce:	b948      	cbnz	r0, 80137e4 <__smakebuf_r+0x44>
 80137d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137d4:	059a      	lsls	r2, r3, #22
 80137d6:	d4ef      	bmi.n	80137b8 <__smakebuf_r+0x18>
 80137d8:	f023 0303 	bic.w	r3, r3, #3
 80137dc:	f043 0302 	orr.w	r3, r3, #2
 80137e0:	81a3      	strh	r3, [r4, #12]
 80137e2:	e7e3      	b.n	80137ac <__smakebuf_r+0xc>
 80137e4:	4b0d      	ldr	r3, [pc, #52]	; (801381c <__smakebuf_r+0x7c>)
 80137e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80137e8:	89a3      	ldrh	r3, [r4, #12]
 80137ea:	6020      	str	r0, [r4, #0]
 80137ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	9b00      	ldr	r3, [sp, #0]
 80137f4:	6163      	str	r3, [r4, #20]
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	6120      	str	r0, [r4, #16]
 80137fa:	b15b      	cbz	r3, 8013814 <__smakebuf_r+0x74>
 80137fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013800:	4630      	mov	r0, r6
 8013802:	f000 fa7b 	bl	8013cfc <_isatty_r>
 8013806:	b128      	cbz	r0, 8013814 <__smakebuf_r+0x74>
 8013808:	89a3      	ldrh	r3, [r4, #12]
 801380a:	f023 0303 	bic.w	r3, r3, #3
 801380e:	f043 0301 	orr.w	r3, r3, #1
 8013812:	81a3      	strh	r3, [r4, #12]
 8013814:	89a3      	ldrh	r3, [r4, #12]
 8013816:	431d      	orrs	r5, r3
 8013818:	81a5      	strh	r5, [r4, #12]
 801381a:	e7cd      	b.n	80137b8 <__smakebuf_r+0x18>
 801381c:	08013605 	.word	0x08013605

08013820 <__ascii_mbtowc>:
 8013820:	b082      	sub	sp, #8
 8013822:	b901      	cbnz	r1, 8013826 <__ascii_mbtowc+0x6>
 8013824:	a901      	add	r1, sp, #4
 8013826:	b142      	cbz	r2, 801383a <__ascii_mbtowc+0x1a>
 8013828:	b14b      	cbz	r3, 801383e <__ascii_mbtowc+0x1e>
 801382a:	7813      	ldrb	r3, [r2, #0]
 801382c:	600b      	str	r3, [r1, #0]
 801382e:	7812      	ldrb	r2, [r2, #0]
 8013830:	1c10      	adds	r0, r2, #0
 8013832:	bf18      	it	ne
 8013834:	2001      	movne	r0, #1
 8013836:	b002      	add	sp, #8
 8013838:	4770      	bx	lr
 801383a:	4610      	mov	r0, r2
 801383c:	e7fb      	b.n	8013836 <__ascii_mbtowc+0x16>
 801383e:	f06f 0001 	mvn.w	r0, #1
 8013842:	e7f8      	b.n	8013836 <__ascii_mbtowc+0x16>

08013844 <memmove>:
 8013844:	4288      	cmp	r0, r1
 8013846:	b510      	push	{r4, lr}
 8013848:	eb01 0302 	add.w	r3, r1, r2
 801384c:	d807      	bhi.n	801385e <memmove+0x1a>
 801384e:	1e42      	subs	r2, r0, #1
 8013850:	4299      	cmp	r1, r3
 8013852:	d00a      	beq.n	801386a <memmove+0x26>
 8013854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013858:	f802 4f01 	strb.w	r4, [r2, #1]!
 801385c:	e7f8      	b.n	8013850 <memmove+0xc>
 801385e:	4283      	cmp	r3, r0
 8013860:	d9f5      	bls.n	801384e <memmove+0xa>
 8013862:	1881      	adds	r1, r0, r2
 8013864:	1ad2      	subs	r2, r2, r3
 8013866:	42d3      	cmn	r3, r2
 8013868:	d100      	bne.n	801386c <memmove+0x28>
 801386a:	bd10      	pop	{r4, pc}
 801386c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013870:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013874:	e7f7      	b.n	8013866 <memmove+0x22>

08013876 <__malloc_lock>:
 8013876:	4770      	bx	lr

08013878 <__malloc_unlock>:
 8013878:	4770      	bx	lr

0801387a <_realloc_r>:
 801387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387c:	4607      	mov	r7, r0
 801387e:	4614      	mov	r4, r2
 8013880:	460e      	mov	r6, r1
 8013882:	b921      	cbnz	r1, 801388e <_realloc_r+0x14>
 8013884:	4611      	mov	r1, r2
 8013886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801388a:	f7ff b891 	b.w	80129b0 <_malloc_r>
 801388e:	b922      	cbnz	r2, 801389a <_realloc_r+0x20>
 8013890:	f7ff f840 	bl	8012914 <_free_r>
 8013894:	4625      	mov	r5, r4
 8013896:	4628      	mov	r0, r5
 8013898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801389a:	f000 fa51 	bl	8013d40 <_malloc_usable_size_r>
 801389e:	42a0      	cmp	r0, r4
 80138a0:	d20f      	bcs.n	80138c2 <_realloc_r+0x48>
 80138a2:	4621      	mov	r1, r4
 80138a4:	4638      	mov	r0, r7
 80138a6:	f7ff f883 	bl	80129b0 <_malloc_r>
 80138aa:	4605      	mov	r5, r0
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d0f2      	beq.n	8013896 <_realloc_r+0x1c>
 80138b0:	4631      	mov	r1, r6
 80138b2:	4622      	mov	r2, r4
 80138b4:	f7ff f81a 	bl	80128ec <memcpy>
 80138b8:	4631      	mov	r1, r6
 80138ba:	4638      	mov	r0, r7
 80138bc:	f7ff f82a 	bl	8012914 <_free_r>
 80138c0:	e7e9      	b.n	8013896 <_realloc_r+0x1c>
 80138c2:	4635      	mov	r5, r6
 80138c4:	e7e7      	b.n	8013896 <_realloc_r+0x1c>

080138c6 <__ssputs_r>:
 80138c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ca:	688e      	ldr	r6, [r1, #8]
 80138cc:	429e      	cmp	r6, r3
 80138ce:	4682      	mov	sl, r0
 80138d0:	460c      	mov	r4, r1
 80138d2:	4690      	mov	r8, r2
 80138d4:	4699      	mov	r9, r3
 80138d6:	d837      	bhi.n	8013948 <__ssputs_r+0x82>
 80138d8:	898a      	ldrh	r2, [r1, #12]
 80138da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138de:	d031      	beq.n	8013944 <__ssputs_r+0x7e>
 80138e0:	6825      	ldr	r5, [r4, #0]
 80138e2:	6909      	ldr	r1, [r1, #16]
 80138e4:	1a6f      	subs	r7, r5, r1
 80138e6:	6965      	ldr	r5, [r4, #20]
 80138e8:	2302      	movs	r3, #2
 80138ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138ee:	fb95 f5f3 	sdiv	r5, r5, r3
 80138f2:	f109 0301 	add.w	r3, r9, #1
 80138f6:	443b      	add	r3, r7
 80138f8:	429d      	cmp	r5, r3
 80138fa:	bf38      	it	cc
 80138fc:	461d      	movcc	r5, r3
 80138fe:	0553      	lsls	r3, r2, #21
 8013900:	d530      	bpl.n	8013964 <__ssputs_r+0x9e>
 8013902:	4629      	mov	r1, r5
 8013904:	f7ff f854 	bl	80129b0 <_malloc_r>
 8013908:	4606      	mov	r6, r0
 801390a:	b950      	cbnz	r0, 8013922 <__ssputs_r+0x5c>
 801390c:	230c      	movs	r3, #12
 801390e:	f8ca 3000 	str.w	r3, [sl]
 8013912:	89a3      	ldrh	r3, [r4, #12]
 8013914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013918:	81a3      	strh	r3, [r4, #12]
 801391a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801391e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013922:	463a      	mov	r2, r7
 8013924:	6921      	ldr	r1, [r4, #16]
 8013926:	f7fe ffe1 	bl	80128ec <memcpy>
 801392a:	89a3      	ldrh	r3, [r4, #12]
 801392c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013934:	81a3      	strh	r3, [r4, #12]
 8013936:	6126      	str	r6, [r4, #16]
 8013938:	6165      	str	r5, [r4, #20]
 801393a:	443e      	add	r6, r7
 801393c:	1bed      	subs	r5, r5, r7
 801393e:	6026      	str	r6, [r4, #0]
 8013940:	60a5      	str	r5, [r4, #8]
 8013942:	464e      	mov	r6, r9
 8013944:	454e      	cmp	r6, r9
 8013946:	d900      	bls.n	801394a <__ssputs_r+0x84>
 8013948:	464e      	mov	r6, r9
 801394a:	4632      	mov	r2, r6
 801394c:	4641      	mov	r1, r8
 801394e:	6820      	ldr	r0, [r4, #0]
 8013950:	f7ff ff78 	bl	8013844 <memmove>
 8013954:	68a3      	ldr	r3, [r4, #8]
 8013956:	1b9b      	subs	r3, r3, r6
 8013958:	60a3      	str	r3, [r4, #8]
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	441e      	add	r6, r3
 801395e:	6026      	str	r6, [r4, #0]
 8013960:	2000      	movs	r0, #0
 8013962:	e7dc      	b.n	801391e <__ssputs_r+0x58>
 8013964:	462a      	mov	r2, r5
 8013966:	f7ff ff88 	bl	801387a <_realloc_r>
 801396a:	4606      	mov	r6, r0
 801396c:	2800      	cmp	r0, #0
 801396e:	d1e2      	bne.n	8013936 <__ssputs_r+0x70>
 8013970:	6921      	ldr	r1, [r4, #16]
 8013972:	4650      	mov	r0, sl
 8013974:	f7fe ffce 	bl	8012914 <_free_r>
 8013978:	e7c8      	b.n	801390c <__ssputs_r+0x46>
	...

0801397c <_svfiprintf_r>:
 801397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013980:	461d      	mov	r5, r3
 8013982:	898b      	ldrh	r3, [r1, #12]
 8013984:	061f      	lsls	r7, r3, #24
 8013986:	b09d      	sub	sp, #116	; 0x74
 8013988:	4680      	mov	r8, r0
 801398a:	460c      	mov	r4, r1
 801398c:	4616      	mov	r6, r2
 801398e:	d50f      	bpl.n	80139b0 <_svfiprintf_r+0x34>
 8013990:	690b      	ldr	r3, [r1, #16]
 8013992:	b96b      	cbnz	r3, 80139b0 <_svfiprintf_r+0x34>
 8013994:	2140      	movs	r1, #64	; 0x40
 8013996:	f7ff f80b 	bl	80129b0 <_malloc_r>
 801399a:	6020      	str	r0, [r4, #0]
 801399c:	6120      	str	r0, [r4, #16]
 801399e:	b928      	cbnz	r0, 80139ac <_svfiprintf_r+0x30>
 80139a0:	230c      	movs	r3, #12
 80139a2:	f8c8 3000 	str.w	r3, [r8]
 80139a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139aa:	e0c8      	b.n	8013b3e <_svfiprintf_r+0x1c2>
 80139ac:	2340      	movs	r3, #64	; 0x40
 80139ae:	6163      	str	r3, [r4, #20]
 80139b0:	2300      	movs	r3, #0
 80139b2:	9309      	str	r3, [sp, #36]	; 0x24
 80139b4:	2320      	movs	r3, #32
 80139b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139ba:	2330      	movs	r3, #48	; 0x30
 80139bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139c0:	9503      	str	r5, [sp, #12]
 80139c2:	f04f 0b01 	mov.w	fp, #1
 80139c6:	4637      	mov	r7, r6
 80139c8:	463d      	mov	r5, r7
 80139ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139ce:	b10b      	cbz	r3, 80139d4 <_svfiprintf_r+0x58>
 80139d0:	2b25      	cmp	r3, #37	; 0x25
 80139d2:	d13e      	bne.n	8013a52 <_svfiprintf_r+0xd6>
 80139d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80139d8:	d00b      	beq.n	80139f2 <_svfiprintf_r+0x76>
 80139da:	4653      	mov	r3, sl
 80139dc:	4632      	mov	r2, r6
 80139de:	4621      	mov	r1, r4
 80139e0:	4640      	mov	r0, r8
 80139e2:	f7ff ff70 	bl	80138c6 <__ssputs_r>
 80139e6:	3001      	adds	r0, #1
 80139e8:	f000 80a4 	beq.w	8013b34 <_svfiprintf_r+0x1b8>
 80139ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139ee:	4453      	add	r3, sl
 80139f0:	9309      	str	r3, [sp, #36]	; 0x24
 80139f2:	783b      	ldrb	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f000 809d 	beq.w	8013b34 <_svfiprintf_r+0x1b8>
 80139fa:	2300      	movs	r3, #0
 80139fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a04:	9304      	str	r3, [sp, #16]
 8013a06:	9307      	str	r3, [sp, #28]
 8013a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8013a0e:	462f      	mov	r7, r5
 8013a10:	2205      	movs	r2, #5
 8013a12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013a16:	4850      	ldr	r0, [pc, #320]	; (8013b58 <_svfiprintf_r+0x1dc>)
 8013a18:	f7ec fbf2 	bl	8000200 <memchr>
 8013a1c:	9b04      	ldr	r3, [sp, #16]
 8013a1e:	b9d0      	cbnz	r0, 8013a56 <_svfiprintf_r+0xda>
 8013a20:	06d9      	lsls	r1, r3, #27
 8013a22:	bf44      	itt	mi
 8013a24:	2220      	movmi	r2, #32
 8013a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a2a:	071a      	lsls	r2, r3, #28
 8013a2c:	bf44      	itt	mi
 8013a2e:	222b      	movmi	r2, #43	; 0x2b
 8013a30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a34:	782a      	ldrb	r2, [r5, #0]
 8013a36:	2a2a      	cmp	r2, #42	; 0x2a
 8013a38:	d015      	beq.n	8013a66 <_svfiprintf_r+0xea>
 8013a3a:	9a07      	ldr	r2, [sp, #28]
 8013a3c:	462f      	mov	r7, r5
 8013a3e:	2000      	movs	r0, #0
 8013a40:	250a      	movs	r5, #10
 8013a42:	4639      	mov	r1, r7
 8013a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a48:	3b30      	subs	r3, #48	; 0x30
 8013a4a:	2b09      	cmp	r3, #9
 8013a4c:	d94d      	bls.n	8013aea <_svfiprintf_r+0x16e>
 8013a4e:	b1b8      	cbz	r0, 8013a80 <_svfiprintf_r+0x104>
 8013a50:	e00f      	b.n	8013a72 <_svfiprintf_r+0xf6>
 8013a52:	462f      	mov	r7, r5
 8013a54:	e7b8      	b.n	80139c8 <_svfiprintf_r+0x4c>
 8013a56:	4a40      	ldr	r2, [pc, #256]	; (8013b58 <_svfiprintf_r+0x1dc>)
 8013a58:	1a80      	subs	r0, r0, r2
 8013a5a:	fa0b f000 	lsl.w	r0, fp, r0
 8013a5e:	4318      	orrs	r0, r3
 8013a60:	9004      	str	r0, [sp, #16]
 8013a62:	463d      	mov	r5, r7
 8013a64:	e7d3      	b.n	8013a0e <_svfiprintf_r+0x92>
 8013a66:	9a03      	ldr	r2, [sp, #12]
 8013a68:	1d11      	adds	r1, r2, #4
 8013a6a:	6812      	ldr	r2, [r2, #0]
 8013a6c:	9103      	str	r1, [sp, #12]
 8013a6e:	2a00      	cmp	r2, #0
 8013a70:	db01      	blt.n	8013a76 <_svfiprintf_r+0xfa>
 8013a72:	9207      	str	r2, [sp, #28]
 8013a74:	e004      	b.n	8013a80 <_svfiprintf_r+0x104>
 8013a76:	4252      	negs	r2, r2
 8013a78:	f043 0302 	orr.w	r3, r3, #2
 8013a7c:	9207      	str	r2, [sp, #28]
 8013a7e:	9304      	str	r3, [sp, #16]
 8013a80:	783b      	ldrb	r3, [r7, #0]
 8013a82:	2b2e      	cmp	r3, #46	; 0x2e
 8013a84:	d10c      	bne.n	8013aa0 <_svfiprintf_r+0x124>
 8013a86:	787b      	ldrb	r3, [r7, #1]
 8013a88:	2b2a      	cmp	r3, #42	; 0x2a
 8013a8a:	d133      	bne.n	8013af4 <_svfiprintf_r+0x178>
 8013a8c:	9b03      	ldr	r3, [sp, #12]
 8013a8e:	1d1a      	adds	r2, r3, #4
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	9203      	str	r2, [sp, #12]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	bfb8      	it	lt
 8013a98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a9c:	3702      	adds	r7, #2
 8013a9e:	9305      	str	r3, [sp, #20]
 8013aa0:	4d2e      	ldr	r5, [pc, #184]	; (8013b5c <_svfiprintf_r+0x1e0>)
 8013aa2:	7839      	ldrb	r1, [r7, #0]
 8013aa4:	2203      	movs	r2, #3
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f7ec fbaa 	bl	8000200 <memchr>
 8013aac:	b138      	cbz	r0, 8013abe <_svfiprintf_r+0x142>
 8013aae:	2340      	movs	r3, #64	; 0x40
 8013ab0:	1b40      	subs	r0, r0, r5
 8013ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8013ab6:	9b04      	ldr	r3, [sp, #16]
 8013ab8:	4303      	orrs	r3, r0
 8013aba:	3701      	adds	r7, #1
 8013abc:	9304      	str	r3, [sp, #16]
 8013abe:	7839      	ldrb	r1, [r7, #0]
 8013ac0:	4827      	ldr	r0, [pc, #156]	; (8013b60 <_svfiprintf_r+0x1e4>)
 8013ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ac6:	2206      	movs	r2, #6
 8013ac8:	1c7e      	adds	r6, r7, #1
 8013aca:	f7ec fb99 	bl	8000200 <memchr>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d038      	beq.n	8013b44 <_svfiprintf_r+0x1c8>
 8013ad2:	4b24      	ldr	r3, [pc, #144]	; (8013b64 <_svfiprintf_r+0x1e8>)
 8013ad4:	bb13      	cbnz	r3, 8013b1c <_svfiprintf_r+0x1a0>
 8013ad6:	9b03      	ldr	r3, [sp, #12]
 8013ad8:	3307      	adds	r3, #7
 8013ada:	f023 0307 	bic.w	r3, r3, #7
 8013ade:	3308      	adds	r3, #8
 8013ae0:	9303      	str	r3, [sp, #12]
 8013ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ae4:	444b      	add	r3, r9
 8013ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ae8:	e76d      	b.n	80139c6 <_svfiprintf_r+0x4a>
 8013aea:	fb05 3202 	mla	r2, r5, r2, r3
 8013aee:	2001      	movs	r0, #1
 8013af0:	460f      	mov	r7, r1
 8013af2:	e7a6      	b.n	8013a42 <_svfiprintf_r+0xc6>
 8013af4:	2300      	movs	r3, #0
 8013af6:	3701      	adds	r7, #1
 8013af8:	9305      	str	r3, [sp, #20]
 8013afa:	4619      	mov	r1, r3
 8013afc:	250a      	movs	r5, #10
 8013afe:	4638      	mov	r0, r7
 8013b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b04:	3a30      	subs	r2, #48	; 0x30
 8013b06:	2a09      	cmp	r2, #9
 8013b08:	d903      	bls.n	8013b12 <_svfiprintf_r+0x196>
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d0c8      	beq.n	8013aa0 <_svfiprintf_r+0x124>
 8013b0e:	9105      	str	r1, [sp, #20]
 8013b10:	e7c6      	b.n	8013aa0 <_svfiprintf_r+0x124>
 8013b12:	fb05 2101 	mla	r1, r5, r1, r2
 8013b16:	2301      	movs	r3, #1
 8013b18:	4607      	mov	r7, r0
 8013b1a:	e7f0      	b.n	8013afe <_svfiprintf_r+0x182>
 8013b1c:	ab03      	add	r3, sp, #12
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	4622      	mov	r2, r4
 8013b22:	4b11      	ldr	r3, [pc, #68]	; (8013b68 <_svfiprintf_r+0x1ec>)
 8013b24:	a904      	add	r1, sp, #16
 8013b26:	4640      	mov	r0, r8
 8013b28:	f3af 8000 	nop.w
 8013b2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013b30:	4681      	mov	r9, r0
 8013b32:	d1d6      	bne.n	8013ae2 <_svfiprintf_r+0x166>
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	065b      	lsls	r3, r3, #25
 8013b38:	f53f af35 	bmi.w	80139a6 <_svfiprintf_r+0x2a>
 8013b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b3e:	b01d      	add	sp, #116	; 0x74
 8013b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b44:	ab03      	add	r3, sp, #12
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	4622      	mov	r2, r4
 8013b4a:	4b07      	ldr	r3, [pc, #28]	; (8013b68 <_svfiprintf_r+0x1ec>)
 8013b4c:	a904      	add	r1, sp, #16
 8013b4e:	4640      	mov	r0, r8
 8013b50:	f7ff f93e 	bl	8012dd0 <_printf_i>
 8013b54:	e7ea      	b.n	8013b2c <_svfiprintf_r+0x1b0>
 8013b56:	bf00      	nop
 8013b58:	08014188 	.word	0x08014188
 8013b5c:	0801418e 	.word	0x0801418e
 8013b60:	08014192 	.word	0x08014192
 8013b64:	00000000 	.word	0x00000000
 8013b68:	080138c7 	.word	0x080138c7

08013b6c <_raise_r>:
 8013b6c:	291f      	cmp	r1, #31
 8013b6e:	b538      	push	{r3, r4, r5, lr}
 8013b70:	4604      	mov	r4, r0
 8013b72:	460d      	mov	r5, r1
 8013b74:	d904      	bls.n	8013b80 <_raise_r+0x14>
 8013b76:	2316      	movs	r3, #22
 8013b78:	6003      	str	r3, [r0, #0]
 8013b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b7e:	bd38      	pop	{r3, r4, r5, pc}
 8013b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b82:	b112      	cbz	r2, 8013b8a <_raise_r+0x1e>
 8013b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b88:	b94b      	cbnz	r3, 8013b9e <_raise_r+0x32>
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f000 f830 	bl	8013bf0 <_getpid_r>
 8013b90:	462a      	mov	r2, r5
 8013b92:	4601      	mov	r1, r0
 8013b94:	4620      	mov	r0, r4
 8013b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b9a:	f000 b817 	b.w	8013bcc <_kill_r>
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d00a      	beq.n	8013bb8 <_raise_r+0x4c>
 8013ba2:	1c59      	adds	r1, r3, #1
 8013ba4:	d103      	bne.n	8013bae <_raise_r+0x42>
 8013ba6:	2316      	movs	r3, #22
 8013ba8:	6003      	str	r3, [r0, #0]
 8013baa:	2001      	movs	r0, #1
 8013bac:	e7e7      	b.n	8013b7e <_raise_r+0x12>
 8013bae:	2400      	movs	r4, #0
 8013bb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	4798      	blx	r3
 8013bb8:	2000      	movs	r0, #0
 8013bba:	e7e0      	b.n	8013b7e <_raise_r+0x12>

08013bbc <raise>:
 8013bbc:	4b02      	ldr	r3, [pc, #8]	; (8013bc8 <raise+0xc>)
 8013bbe:	4601      	mov	r1, r0
 8013bc0:	6818      	ldr	r0, [r3, #0]
 8013bc2:	f7ff bfd3 	b.w	8013b6c <_raise_r>
 8013bc6:	bf00      	nop
 8013bc8:	200001d0 	.word	0x200001d0

08013bcc <_kill_r>:
 8013bcc:	b538      	push	{r3, r4, r5, lr}
 8013bce:	4c07      	ldr	r4, [pc, #28]	; (8013bec <_kill_r+0x20>)
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	4608      	mov	r0, r1
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	6023      	str	r3, [r4, #0]
 8013bda:	f7ef fe01 	bl	80037e0 <_kill>
 8013bde:	1c43      	adds	r3, r0, #1
 8013be0:	d102      	bne.n	8013be8 <_kill_r+0x1c>
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	b103      	cbz	r3, 8013be8 <_kill_r+0x1c>
 8013be6:	602b      	str	r3, [r5, #0]
 8013be8:	bd38      	pop	{r3, r4, r5, pc}
 8013bea:	bf00      	nop
 8013bec:	200104cc 	.word	0x200104cc

08013bf0 <_getpid_r>:
 8013bf0:	f7ef bdee 	b.w	80037d0 <_getpid>

08013bf4 <__sread>:
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bfc:	f000 f8a8 	bl	8013d50 <_read_r>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	bfab      	itete	ge
 8013c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c06:	89a3      	ldrhlt	r3, [r4, #12]
 8013c08:	181b      	addge	r3, r3, r0
 8013c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c0e:	bfac      	ite	ge
 8013c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c12:	81a3      	strhlt	r3, [r4, #12]
 8013c14:	bd10      	pop	{r4, pc}

08013c16 <__swrite>:
 8013c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1a:	461f      	mov	r7, r3
 8013c1c:	898b      	ldrh	r3, [r1, #12]
 8013c1e:	05db      	lsls	r3, r3, #23
 8013c20:	4605      	mov	r5, r0
 8013c22:	460c      	mov	r4, r1
 8013c24:	4616      	mov	r6, r2
 8013c26:	d505      	bpl.n	8013c34 <__swrite+0x1e>
 8013c28:	2302      	movs	r3, #2
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c30:	f000 f874 	bl	8013d1c <_lseek_r>
 8013c34:	89a3      	ldrh	r3, [r4, #12]
 8013c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c3e:	81a3      	strh	r3, [r4, #12]
 8013c40:	4632      	mov	r2, r6
 8013c42:	463b      	mov	r3, r7
 8013c44:	4628      	mov	r0, r5
 8013c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4a:	f000 b823 	b.w	8013c94 <_write_r>

08013c4e <__sseek>:
 8013c4e:	b510      	push	{r4, lr}
 8013c50:	460c      	mov	r4, r1
 8013c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c56:	f000 f861 	bl	8013d1c <_lseek_r>
 8013c5a:	1c43      	adds	r3, r0, #1
 8013c5c:	89a3      	ldrh	r3, [r4, #12]
 8013c5e:	bf15      	itete	ne
 8013c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c6a:	81a3      	strheq	r3, [r4, #12]
 8013c6c:	bf18      	it	ne
 8013c6e:	81a3      	strhne	r3, [r4, #12]
 8013c70:	bd10      	pop	{r4, pc}

08013c72 <__sclose>:
 8013c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c76:	f000 b81f 	b.w	8013cb8 <_close_r>

08013c7a <__ascii_wctomb>:
 8013c7a:	b149      	cbz	r1, 8013c90 <__ascii_wctomb+0x16>
 8013c7c:	2aff      	cmp	r2, #255	; 0xff
 8013c7e:	bf85      	ittet	hi
 8013c80:	238a      	movhi	r3, #138	; 0x8a
 8013c82:	6003      	strhi	r3, [r0, #0]
 8013c84:	700a      	strbls	r2, [r1, #0]
 8013c86:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013c8a:	bf98      	it	ls
 8013c8c:	2001      	movls	r0, #1
 8013c8e:	4770      	bx	lr
 8013c90:	4608      	mov	r0, r1
 8013c92:	4770      	bx	lr

08013c94 <_write_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4c07      	ldr	r4, [pc, #28]	; (8013cb4 <_write_r+0x20>)
 8013c98:	4605      	mov	r5, r0
 8013c9a:	4608      	mov	r0, r1
 8013c9c:	4611      	mov	r1, r2
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	6022      	str	r2, [r4, #0]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	f7ed fc33 	bl	800150e <_write>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d102      	bne.n	8013cb2 <_write_r+0x1e>
 8013cac:	6823      	ldr	r3, [r4, #0]
 8013cae:	b103      	cbz	r3, 8013cb2 <_write_r+0x1e>
 8013cb0:	602b      	str	r3, [r5, #0]
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	200104cc 	.word	0x200104cc

08013cb8 <_close_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4c06      	ldr	r4, [pc, #24]	; (8013cd4 <_close_r+0x1c>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4605      	mov	r5, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	6023      	str	r3, [r4, #0]
 8013cc4:	f7ef fdc3 	bl	800384e <_close>
 8013cc8:	1c43      	adds	r3, r0, #1
 8013cca:	d102      	bne.n	8013cd2 <_close_r+0x1a>
 8013ccc:	6823      	ldr	r3, [r4, #0]
 8013cce:	b103      	cbz	r3, 8013cd2 <_close_r+0x1a>
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	bd38      	pop	{r3, r4, r5, pc}
 8013cd4:	200104cc 	.word	0x200104cc

08013cd8 <_fstat_r>:
 8013cd8:	b538      	push	{r3, r4, r5, lr}
 8013cda:	4c07      	ldr	r4, [pc, #28]	; (8013cf8 <_fstat_r+0x20>)
 8013cdc:	2300      	movs	r3, #0
 8013cde:	4605      	mov	r5, r0
 8013ce0:	4608      	mov	r0, r1
 8013ce2:	4611      	mov	r1, r2
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	f7ef fdbe 	bl	8003866 <_fstat>
 8013cea:	1c43      	adds	r3, r0, #1
 8013cec:	d102      	bne.n	8013cf4 <_fstat_r+0x1c>
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	b103      	cbz	r3, 8013cf4 <_fstat_r+0x1c>
 8013cf2:	602b      	str	r3, [r5, #0]
 8013cf4:	bd38      	pop	{r3, r4, r5, pc}
 8013cf6:	bf00      	nop
 8013cf8:	200104cc 	.word	0x200104cc

08013cfc <_isatty_r>:
 8013cfc:	b538      	push	{r3, r4, r5, lr}
 8013cfe:	4c06      	ldr	r4, [pc, #24]	; (8013d18 <_isatty_r+0x1c>)
 8013d00:	2300      	movs	r3, #0
 8013d02:	4605      	mov	r5, r0
 8013d04:	4608      	mov	r0, r1
 8013d06:	6023      	str	r3, [r4, #0]
 8013d08:	f7ef fdbd 	bl	8003886 <_isatty>
 8013d0c:	1c43      	adds	r3, r0, #1
 8013d0e:	d102      	bne.n	8013d16 <_isatty_r+0x1a>
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	b103      	cbz	r3, 8013d16 <_isatty_r+0x1a>
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	bd38      	pop	{r3, r4, r5, pc}
 8013d18:	200104cc 	.word	0x200104cc

08013d1c <_lseek_r>:
 8013d1c:	b538      	push	{r3, r4, r5, lr}
 8013d1e:	4c07      	ldr	r4, [pc, #28]	; (8013d3c <_lseek_r+0x20>)
 8013d20:	4605      	mov	r5, r0
 8013d22:	4608      	mov	r0, r1
 8013d24:	4611      	mov	r1, r2
 8013d26:	2200      	movs	r2, #0
 8013d28:	6022      	str	r2, [r4, #0]
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	f7ef fdb6 	bl	800389c <_lseek>
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	d102      	bne.n	8013d3a <_lseek_r+0x1e>
 8013d34:	6823      	ldr	r3, [r4, #0]
 8013d36:	b103      	cbz	r3, 8013d3a <_lseek_r+0x1e>
 8013d38:	602b      	str	r3, [r5, #0]
 8013d3a:	bd38      	pop	{r3, r4, r5, pc}
 8013d3c:	200104cc 	.word	0x200104cc

08013d40 <_malloc_usable_size_r>:
 8013d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d44:	1f18      	subs	r0, r3, #4
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	bfbc      	itt	lt
 8013d4a:	580b      	ldrlt	r3, [r1, r0]
 8013d4c:	18c0      	addlt	r0, r0, r3
 8013d4e:	4770      	bx	lr

08013d50 <_read_r>:
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	4c07      	ldr	r4, [pc, #28]	; (8013d70 <_read_r+0x20>)
 8013d54:	4605      	mov	r5, r0
 8013d56:	4608      	mov	r0, r1
 8013d58:	4611      	mov	r1, r2
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	6022      	str	r2, [r4, #0]
 8013d5e:	461a      	mov	r2, r3
 8013d60:	f7ef fd58 	bl	8003814 <_read>
 8013d64:	1c43      	adds	r3, r0, #1
 8013d66:	d102      	bne.n	8013d6e <_read_r+0x1e>
 8013d68:	6823      	ldr	r3, [r4, #0]
 8013d6a:	b103      	cbz	r3, 8013d6e <_read_r+0x1e>
 8013d6c:	602b      	str	r3, [r5, #0]
 8013d6e:	bd38      	pop	{r3, r4, r5, pc}
 8013d70:	200104cc 	.word	0x200104cc

08013d74 <_init>:
 8013d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d76:	bf00      	nop
 8013d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d7a:	bc08      	pop	{r3}
 8013d7c:	469e      	mov	lr, r3
 8013d7e:	4770      	bx	lr

08013d80 <_fini>:
 8013d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d82:	bf00      	nop
 8013d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d86:	bc08      	pop	{r3}
 8013d88:	469e      	mov	lr, r3
 8013d8a:	4770      	bx	lr
