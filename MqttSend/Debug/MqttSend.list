
MqttSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08017b38  08017b38  00027b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018188  08018188  000303bc  2**0
                  CONTENTS
  4 .ARM          00000008  08018188  08018188  00028188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018190  08018190  000303bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018190  08018190  00028190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018194  08018194  00028194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  08018198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010198  200003bc  08018554  000303bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010554  08018554  00030554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004949f  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008809  00000000  00000000  0007988b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003428  00000000  00000000  00082098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003098  00000000  00000000  000854c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003978b  00000000  00000000  00088558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031030  00000000  00000000  000c1ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013894e  00000000  00000000  000f2d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0022b661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eedc  00000000  00000000  0022b6dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003bc 	.word	0x200003bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017b20 	.word	0x08017b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003c0 	.word	0x200003c0
 80001ec:	08017b20 	.word	0x08017b20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <ESP_timeoutBegin>:
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength);

/*
 * @brief INTERNAL Timeout setup.
 */
static void ESP_timeoutBegin(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	// Get entry time.
	//ESP_t0 = HAL_GetTick();
	ESP_t0 = xTaskGetTickCount();
 8000f6c:	f011 fb62 	bl	8012634 <xTaskGetTickCount>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <ESP_timeoutBegin+0x14>)
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003d8 	.word	0x200003d8

08000f80 <ESP_timeoutIsExpired>:
/*
 * @brief INTERNAL Timeout checker.
 * @param interval_ms Interval time in ms.
 * @return True if timeout expired.
 */
static bool ESP_timeoutIsExpired(const uint16_t interval_ms) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	// Check if the given interval is in the past.
	//return (interval_ms < (HAL_GetTick() - ESP_t0));
	return (interval_ms < (xTaskGetTickCount() - ESP_t0));
 8000f8a:	88fc      	ldrh	r4, [r7, #6]
 8000f8c:	f011 fb52 	bl	8012634 <xTaskGetTickCount>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ESP_timeoutIsExpired+0x2c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	bf34      	ite	cc
 8000f9c:	2301      	movcc	r3, #1
 8000f9e:	2300      	movcs	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3

}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200003d8 	.word	0x200003d8

08000fb0 <ESP_Delay>:
/*
 * @brief Creates non-blocking delay.
 * @param delay_ms Delay time in ms.
 * @return SUCCESS, INPROGRESS.
 */
ESP8266_StatusTypeDef ESP_Delay(const uint16_t delay_ms){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	// Function entry.
	if(!ESP82_inProgress){
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <ESP_Delay+0x58>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <ESP_Delay+0x1c>
		// Start timeout.
		ESP_timeoutBegin();
 8000fc8:	f7ff ffce 	bl	8000f68 <ESP_timeoutBegin>
	}

	ESP82_inProgress = !ESP_timeoutIsExpired(delay_ms);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffd6 	bl	8000f80 <ESP_timeoutIsExpired>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf14      	ite	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	2300      	moveq	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <ESP_Delay+0x58>)
 8000fee:	701a      	strb	r2, [r3, #0]

	if(ESP82_inProgress)
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <ESP_Delay+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <ESP_Delay+0x4c>
		return ESP8266_BUSY;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <ESP_Delay+0x4e>
	else
		return ESP8266_OK;
 8000ffc:	2300      	movs	r3, #0

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003dc 	.word	0x200003dc

0800100c <ESP8266_ConnectionClose>:
	ESP8266_StatusTypeDef result = ESP8266_OK;
	//result = runAtCmd((uint8_t*)"AT+RST\r\n", 8, (uint8_t*) AT_OK_STRING);
	return result;
}

ESP8266_StatusTypeDef ESP8266_ConnectionClose(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	return atCommand((uint8_t*) "AT+CIPCLOSE\r\n", 13, (uint8_t*) AT_OK_STRING);
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <ESP8266_ConnectionClose+0x14>)
 8001012:	210d      	movs	r1, #13
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <ESP8266_ConnectionClose+0x18>)
 8001016:	f000 f983 	bl	8001320 <atCommand>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08017b50 	.word	0x08017b50
 8001024:	08017b58 	.word	0x08017b58

08001028 <ESP_ConnectWifi>:
 * @param resetToDefault If true, reset the module to default settings before connecting.
 * @param ssid AP name.
 * @param pass AP password.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_ConnectWifi(const bool resetToDefault, const char * ssid, const char * pass) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 8001036:	4b49      	ldr	r3, [pc, #292]	; (800115c <ESP_ConnectWifi+0x134>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <ESP_ConnectWifi+0x1c>
 800103e:	4b48      	ldr	r3, [pc, #288]	; (8001160 <ESP_ConnectWifi+0x138>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	e000      	b.n	8001046 <ESP_ConnectWifi+0x1e>
 8001044:	2300      	movs	r3, #0
 8001046:	4a46      	ldr	r2, [pc, #280]	; (8001160 <ESP_ConnectWifi+0x138>)
 8001048:	7013      	strb	r3, [r2, #0]
 800104a:	4b45      	ldr	r3, [pc, #276]	; (8001160 <ESP_ConnectWifi+0x138>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b05      	cmp	r3, #5
 8001050:	d87c      	bhi.n	800114c <ESP_ConnectWifi+0x124>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <ESP_ConnectWifi+0x30>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001071 	.word	0x08001071
 800105c:	0800108f 	.word	0x0800108f
 8001060:	080010bb 	.word	0x080010bb
 8001064:	080010e5 	.word	0x080010e5
 8001068:	0800110b 	.word	0x0800110b
 800106c:	08001137 	.word	0x08001137
	case ESP82_State0:
			// Wait for startup phase to finish.
			if(ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART))) {
 8001070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001074:	f7ff ff9c 	bl	8000fb0 <ESP_Delay>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <ESP_ConnectWifi+0x62>
				// To the next state.
				internalState = ESP82_State1;
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <ESP_ConnectWifi+0x138>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e001      	b.n	800108e <ESP_ConnectWifi+0x66>
			} else {
				// INPROGRESS or SUCCESS if no reset is requested.
				return result;
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	e061      	b.n	8001152 <ESP_ConnectWifi+0x12a>
			}
	//nobreak;
	case ESP82_State1:
		// AT+RESTORE (if requested).
		if(!resetToDefault || (ESP8266_OK == (result = atCommand((uint8_t*)"AT\r\n", 4, (uint8_t*) AT_OK_STRING)))) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	f083 0301 	eor.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <ESP_ConnectWifi+0x86>
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <ESP_ConnectWifi+0x13c>)
 800109c:	2104      	movs	r1, #4
 800109e:	4832      	ldr	r0, [pc, #200]	; (8001168 <ESP_ConnectWifi+0x140>)
 80010a0:	f000 f93e 	bl	8001320 <atCommand>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <ESP_ConnectWifi+0x8e>
			// To the next state.
			internalState = ESP82_State2;
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <ESP_ConnectWifi+0x138>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e001      	b.n	80010ba <ESP_ConnectWifi+0x92>
		} else {
			// Exit on ERROR or INPROGRESS.
			return result;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	e04b      	b.n	8001152 <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State2:
		// If resetted, wait for restart to finish.
		if(!resetToDefault || (ESP8266_OK == (result = ESP_Delay(ESP_TIMEOUT_MS_RESTART)))){
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <ESP_ConnectWifi+0xb0>
 80010c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ca:	f7ff ff71 	bl	8000fb0 <ESP_Delay>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d103      	bne.n	80010e0 <ESP_ConnectWifi+0xb8>
				// To the next state.
				internalState = ESP82_State3;
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <ESP_ConnectWifi+0x138>)
 80010da:	2203      	movs	r2, #3
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e001      	b.n	80010e4 <ESP_ConnectWifi+0xbc>
		}else{
			// INPROGRESS or SUCCESS if no reset is requested.
			return result;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	e036      	b.n	8001152 <ESP_ConnectWifi+0x12a>
		}

		//nobreak;
	case ESP82_State3:
		// AT+CWMODE (client mode)
		if((ESP8266_OK == (result = atCommand((uint8_t*)"AT+CWMODE=1\r\n", 13, (uint8_t*) AT_OK_STRING))) && (ssid != NULL)){
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <ESP_ConnectWifi+0x13c>)
 80010e6:	210d      	movs	r1, #13
 80010e8:	4820      	ldr	r0, [pc, #128]	; (800116c <ESP_ConnectWifi+0x144>)
 80010ea:	f000 f919 	bl	8001320 <atCommand>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d106      	bne.n	8001106 <ESP_ConnectWifi+0xde>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <ESP_ConnectWifi+0xde>
			// To the next state.
			internalState = ESP82_State4;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <ESP_ConnectWifi+0x138>)
 8001100:	2204      	movs	r2, #4
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e001      	b.n	800110a <ESP_ConnectWifi+0xe2>
		} else{
			// Exit on ERROR, INPROGRESS or SUCCESS (if no SSID is provided).
			return result;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	e023      	b.n	8001152 <ESP_ConnectWifi+0x12a>
		}

		// nobreak;
	case ESP82_State4:
		// Size check.
		if ((strlen(ssid) + strlen(pass)) > (ESP_BUFFERSIZE_CMD - 17)) {
 800110a:	68b8      	ldr	r0, [r7, #8]
 800110c:	f7ff f870 	bl	80001f0 <strlen>
 8001110:	4604      	mov	r4, r0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff f86c 	bl	80001f0 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	4423      	add	r3, r4
 800111c:	2b6f      	cmp	r3, #111	; 0x6f
 800111e:	d901      	bls.n	8001124 <ESP_ConnectWifi+0xfc>
			return false;
 8001120:	2300      	movs	r3, #0
 8001122:	e016      	b.n	8001152 <ESP_ConnectWifi+0x12a>
		}

		// AT+CWJAP prepare.
		sprintf((char *)ESP82_cmdBuffer, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pass);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4911      	ldr	r1, [pc, #68]	; (8001170 <ESP_ConnectWifi+0x148>)
 800112a:	4812      	ldr	r0, [pc, #72]	; (8001174 <ESP_ConnectWifi+0x14c>)
 800112c:	f014 f942 	bl	80153b4 <siprintf>

		// To the next state.
		internalState = ESP82_State5;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <ESP_ConnectWifi+0x138>)
 8001132:	2205      	movs	r2, #5
 8001134:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State5:
		// AT+CWJAP
		return atCommand(ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <ESP_ConnectWifi+0x14c>)
 8001138:	f7ff f85a 	bl	80001f0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <ESP_ConnectWifi+0x13c>)
 8001140:	4619      	mov	r1, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <ESP_ConnectWifi+0x14c>)
 8001144:	f000 f8ec 	bl	8001320 <atCommand>
 8001148:	4603      	mov	r3, r0
 800114a:	e002      	b.n	8001152 <ESP_ConnectWifi+0x12a>

		//nobreak;
	default:
		// To the first state.
		internalState = ESP82_State0;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <ESP_ConnectWifi+0x138>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
	}
}
 8001152:	4618      	mov	r0, r3
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	200003dc 	.word	0x200003dc
 8001160:	20000460 	.word	0x20000460
 8001164:	08017b50 	.word	0x08017b50
 8001168:	08017b68 	.word	0x08017b68
 800116c:	08017b70 	.word	0x08017b70
 8001170:	08017b80 	.word	0x08017b80
 8001174:	200003e0 	.word	0x200003e0

08001178 <ESP_IsConnectedWifi>:

/*
 * @brief Connection test.
 * @return SUCCESS, INPROGRESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_IsConnectedWifi(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	return atCommand((uint8_t*)"AT+CIPSTATUS\r\n", 14, (uint8_t*) AT_OK_STRING);
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <ESP_IsConnectedWifi+0x14>)
 800117e:	210e      	movs	r1, #14
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <ESP_IsConnectedWifi+0x18>)
 8001182:	f000 f8cd 	bl	8001320 <atCommand>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	bd80      	pop	{r7, pc}
 800118c:	08017b50 	.word	0x08017b50
 8001190:	08017b98 	.word	0x08017b98

08001194 <ESP_StartTCP>:
 * @param port Remote port.
 * @param keepalive Keep-alive time between 0 to 7200 seconds.
 * @param ssl Starts SSL connection.
 * @return SUCCESS, BUSY or ERROR.
 */
ESP8266_StatusTypeDef ESP_StartTCP(const char * host, const uint16_t port, const uint16_t keepalive, const bool ssl) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	817b      	strh	r3, [r7, #10]
 80011a6:	460b      	mov	r3, r1
 80011a8:	813b      	strh	r3, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71fb      	strb	r3, [r7, #7]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <ESP_StartTCP+0xc8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <ESP_StartTCP+0x28>
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <ESP_StartTCP+0xcc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	e000      	b.n	80011be <ESP_StartTCP+0x2a>
 80011bc:	2300      	movs	r3, #0
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <ESP_StartTCP+0xcc>)
 80011c0:	7013      	strb	r3, [r2, #0]
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <ESP_StartTCP+0xcc>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d021      	beq.n	800120e <ESP_StartTCP+0x7a>
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d037      	beq.n	800123e <ESP_StartTCP+0xaa>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d140      	bne.n	8001254 <ESP_StartTCP+0xc0>
	case ESP82_State0:
		// Size check.
		if(strlen(host) > (ESP_BUFFERSIZE_CMD - 34)){
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f80c 	bl	80001f0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b5e      	cmp	r3, #94	; 0x5e
 80011dc:	d901      	bls.n	80011e2 <ESP_StartTCP+0x4e>
			return false;
 80011de:	2300      	movs	r3, #0
 80011e0:	e038      	b.n	8001254 <ESP_StartTCP+0xc0>
		}

		// Keepalive check.
		if(keepalive > 7200){
 80011e2:	893b      	ldrh	r3, [r7, #8]
 80011e4:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011e8:	d901      	bls.n	80011ee <ESP_StartTCP+0x5a>
			return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e032      	b.n	8001254 <ESP_StartTCP+0xc0>
		}

		// prepare AT+CIPSTART
		//sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i,%i\r\n", (ssl ? "SSL" : "TCP"), host, port, keepalive);
		sprintf((char *)ESP82_cmdBuffer, "AT+CIPSTART=\"%s\",\"%s\",%i\r\n", (ssl ? "SSL" : "TCP"), host, port);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <ESP_StartTCP+0x64>
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <ESP_StartTCP+0xd0>)
 80011f6:	e000      	b.n	80011fa <ESP_StartTCP+0x66>
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <ESP_StartTCP+0xd4>)
 80011fa:	897b      	ldrh	r3, [r7, #10]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	491a      	ldr	r1, [pc, #104]	; (800126c <ESP_StartTCP+0xd8>)
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <ESP_StartTCP+0xdc>)
 8001204:	f014 f8d6 	bl	80153b4 <siprintf>


		// To the next state.
		internalState = ESP82_State1;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <ESP_StartTCP+0xcc>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]

		//nobreak;
	case ESP82_State1:
		// AT+CIPSSLSIZE (or skip)
		if(!ssl || (ESP8266_OK == (result = atCommand((uint8_t*)ESP_SSLSIZE_str, 20, (uint8_t*) AT_OK_STRING)))){
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f083 0301 	eor.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <ESP_StartTCP+0x9e>
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <ESP_StartTCP+0xe0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <ESP_StartTCP+0xe4>)
 8001220:	2114      	movs	r1, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f87c 	bl	8001320 <atCommand>
 8001228:	4603      	mov	r3, r0
 800122a:	75fb      	strb	r3, [r7, #23]
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <ESP_StartTCP+0xa6>
			// To the next state.
			internalState = ESP82_State2;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <ESP_StartTCP+0xcc>)
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e001      	b.n	800123e <ESP_StartTCP+0xaa>
		}else{
			// Exit on ERROR or INPROGRESS.
			return result;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	e00a      	b.n	8001254 <ESP_StartTCP+0xc0>
		}
		//nobreak;
	case ESP82_State2:
		// AT+CIPSTART
		return atCommand((uint8_t*)ESP82_cmdBuffer, strlen((char*)ESP82_cmdBuffer), (uint8_t*) AT_OK_STRING);
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <ESP_StartTCP+0xdc>)
 8001240:	f7fe ffd6 	bl	80001f0 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <ESP_StartTCP+0xe4>)
 8001248:	4619      	mov	r1, r3
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <ESP_StartTCP+0xdc>)
 800124c:	f000 f868 	bl	8001320 <atCommand>
 8001250:	4603      	mov	r3, r0
 8001252:	e7ff      	b.n	8001254 <ESP_StartTCP+0xc0>
	}
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200003dc 	.word	0x200003dc
 8001260:	20000461 	.word	0x20000461
 8001264:	08017ba8 	.word	0x08017ba8
 8001268:	08017bac 	.word	0x08017bac
 800126c:	08017bb0 	.word	0x08017bb0
 8001270:	200003e0 	.word	0x200003e0
 8001274:	20000000 	.word	0x20000000
 8001278:	08017b50 	.word	0x08017b50

0800127c <ESP_SendData>:
 * @brief  Send data over the wifi connection.
 * @param  Buffer: the buffer to send
 * @param  Length: the Buffer's data size.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef ESP_SendData(uint8_t* Buffer, uint32_t Length) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	ESP8266_StatusTypeDef Ret = ESP8266_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]

	if (Buffer != NULL) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d027      	beq.n	80012e0 <ESP_SendData+0x64>
		//uint32_t tickStart;
		//TickType_t tickStart;

		/* Construct the CIPSEND command */
		memset(ESP82_cmdBuffer, '\0', ESP_BUFFERSIZE_CMD);
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	2100      	movs	r1, #0
 8001294:	4815      	ldr	r0, [pc, #84]	; (80012ec <ESP_SendData+0x70>)
 8001296:	f013 fc8c 	bl	8014bb2 <memset>
		sprintf((char *) ESP82_cmdBuffer, "AT+CIPSEND=%lu%c%c", Length  , '\r', '\n');
 800129a:	230a      	movs	r3, #10
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	230d      	movs	r3, #13
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4913      	ldr	r1, [pc, #76]	; (80012f0 <ESP_SendData+0x74>)
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <ESP_SendData+0x70>)
 80012a6:	f014 f885 	bl	80153b4 <siprintf>

		/* The CIPSEND command doesn't have a return command
		 until the data is actually sent. Thus we check here whether
		 we got the '>' prompt or not. */
		Ret = atCommand(ESP82_cmdBuffer, strlen((char *) ESP82_cmdBuffer),
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <ESP_SendData+0x70>)
 80012ac:	f7fe ffa0 	bl	80001f0 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <ESP_SendData+0x78>)
 80012b4:	4619      	mov	r1, r3
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <ESP_SendData+0x70>)
 80012b8:	f000 f832 	bl	8001320 <atCommand>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
				(uint8_t*) AT_SEND_PROMPT_STRING);

		/* Return Error */
		if (Ret != ESP8266_OK) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <ESP_SendData+0x4e>
			return ESP8266_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00b      	b.n	80012e2 <ESP_SendData+0x66>
		}

		/* Wait before sending data. */
		osDelay(1000); //not blocking delay
 80012ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ce:	f00f fddf 	bl	8010e90 <osDelay>

		/* Send the data */
		Ret = atCommand(Buffer, Length, (uint8_t*) AT_SEND_OK_STRING);//AT_IPD_STRING);//
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <ESP_SendData+0x7c>)
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f822 	bl	8001320 <atCommand>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
	}

	return Ret;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200003e0 	.word	0x200003e0
 80012f0:	08017bcc 	.word	0x08017bcc
 80012f4:	08017be0 	.word	0x08017be0
 80012f8:	08017be8 	.word	0x08017be8

080012fc <ESP_ReceiveData>:
 * @param Length data buffer length.
 * @param RetLength data length received.
 * @return SUCCESS or ERROR.
 */
ESP8266_StatusTypeDef ESP_ReceiveData(uint8_t* Buffer, uint32_t Length,
		uint32_t* RetLength) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	ESP8266_StatusTypeDef Ret;

	/* Receive the data from the host */
	Ret = getData(Buffer, Length, RetLength);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f8dd 	bl	80014cc <getData>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]

	return Ret;
 8001316:	7dfb      	ldrb	r3, [r7, #23]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <atCommand>:
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
ESP8266_StatusTypeDef atCommand(uint8_t* cmd, uint32_t Length, const uint8_t* Token) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	static uint8_t internalState;
	ESP8266_StatusTypeDef result;

	// State machine.
	switch (internalState = (ESP82_inProgress ? internalState : ESP82_State0)) {
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <atCommand+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <atCommand+0x1a>
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <atCommand+0x5c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	e000      	b.n	800133c <atCommand+0x1c>
 800133a:	2300      	movs	r3, #0
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <atCommand+0x5c>)
 800133e:	7013      	strb	r3, [r2, #0]
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <atCommand+0x5c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <atCommand+0x2e>
 8001348:	2b01      	cmp	r3, #1
 800134a:	d00c      	beq.n	8001366 <atCommand+0x46>
 800134c:	e010      	b.n	8001370 <atCommand+0x50>
	case ESP82_State0:

		result = executeAtCmd(cmd, Length);
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f815 	bl	8001380 <executeAtCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	75fb      	strb	r3, [r7, #23]

		// To the next state.
		if(result == ESP8266_OK)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <atCommand+0x46>
			internalState = ESP82_State1;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <atCommand+0x5c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	case ESP82_State1:
		return responseAtCmd(Token);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f820 	bl	80013ac <responseAtCmd>
 800136c:	4603      	mov	r3, r0
 800136e:	e7ff      	b.n	8001370 <atCommand+0x50>

	}
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200003dc 	.word	0x200003dc
 800137c:	20000462 	.word	0x20000462

08001380 <executeAtCmd>:
 * @brief  Run the AT command
 * @param  cmd the buffer to fill will the received data.
 * @param  Length the maximum data size to receive.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef executeAtCmd(uint8_t* cmd, uint32_t Length) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]

	/* Send the command */
	if (HAL_UART_F_Send((char*)cmd, Length) < 0) {
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 f939 	bl	8005608 <HAL_UART_F_Send>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	da01      	bge.n	80013a0 <executeAtCmd+0x20>
		return ESP8266_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <executeAtCmd+0x22>
	}
	return ESP8266_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <responseAtCmd>:
/**
 * @brief  Wait response to the AT command
 * @param  Token the expected output if command runs successfully
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef responseAtCmd(const uint8_t* Token) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	uint32_t idx = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
	uint8_t RxChar;
	uint8_t status_io = 0;//0 is ok
 80013b8:	2300      	movs	r3, #0
 80013ba:	72fb      	strb	r3, [r7, #11]

	/* Reset the Rx buffer to make sure no previous data exist */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 80013bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013c0:	2100      	movs	r1, #0
 80013c2:	481d      	ldr	r0, [pc, #116]	; (8001438 <responseAtCmd+0x8c>)
 80013c4:	f013 fbf5 	bl	8014bb2 <memset>
	//uint32_t currentTime = 0;
	/* Wait for reception */
	//do {
	while(1){
		/* Wait to recieve data */
		if (ESP_Receive(&RxChar, 1) != 0) {
 80013c8:	f107 030a 	add.w	r3, r7, #10
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f836 	bl	8001440 <ESP_Receive>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <responseAtCmd+0x46>
			RxBuffer[idx++] = RxChar;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60fa      	str	r2, [r7, #12]
 80013e0:	7ab9      	ldrb	r1, [r7, #10]
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <responseAtCmd+0x8c>)
 80013e4:	54d1      	strb	r1, [r2, r3]
			status_io = 1;
			break;
		}

		/* Check that max buffer size has not been reached */
		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d106      	bne.n	80013fe <responseAtCmd+0x52>
 80013f0:	e002      	b.n	80013f8 <responseAtCmd+0x4c>
			status_io = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	72fb      	strb	r3, [r7, #11]
			break;
 80013f6:	e015      	b.n	8001424 <responseAtCmd+0x78>
			status_io = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	72fb      	strb	r3, [r7, #11]
			break;
 80013fc:	e012      	b.n	8001424 <responseAtCmd+0x78>
		}

		/* Extract the Token */
		if (strstr((char *) RxBuffer, (char *) Token) != NULL) {
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <responseAtCmd+0x8c>)
 8001402:	f013 ffff 	bl	8015404 <strstr>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <responseAtCmd+0x66>
			status_io = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	72fb      	strb	r3, [r7, #11]
			break;
 8001410:	e008      	b.n	8001424 <responseAtCmd+0x78>
			//return ESP8266_OK;
		}

		/* Check if the message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 8001412:	490a      	ldr	r1, [pc, #40]	; (800143c <responseAtCmd+0x90>)
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <responseAtCmd+0x8c>)
 8001416:	f013 fff5 	bl	8015404 <strstr>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0d3      	beq.n	80013c8 <responseAtCmd+0x1c>
			status_io = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	72fb      	strb	r3, [r7, #11]
		}
		//currentTime++;
		//osDelay(1);
	}//while(currentTime < ESP_LONG_TIME_OUT);

	if(status_io == 1)
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <responseAtCmd+0x82>
		return ESP8266_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <responseAtCmd+0x84>
	return ESP8266_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000d704 	.word	0x2000d704
 800143c:	08017bf4 	.word	0x08017bf4

08001440 <ESP_Receive>:
 * @brief  Extract info to the circular bufer
 * @param  Buffer The buffer where to fill the received data
 * @param  Length the maximum data size to receive.
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static int32_t ESP_Receive(uint8_t *Buffer, uint32_t Length) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	uint32_t ReadData = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
	/* Loop until data received */
	while (Length--) {
 800144e:	e030      	b.n	80014b2 <ESP_Receive+0x72>
		//uint32_t tickStart = HAL_GetTick();
		TickType_t tickStart = xTaskGetTickCount();
 8001450:	f011 f8f0 	bl	8012634 <xTaskGetTickCount>
 8001454:	60b8      	str	r0, [r7, #8]
		//uint32_t currentTime = 0;
		do {
			if (WiFiRxBuffer.head != WiFiRxBuffer.tail) {
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <ESP_Receive+0x88>)
 8001458:	f8b3 2802 	ldrh.w	r2, [r3, #2050]	; 0x802
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <ESP_Receive+0x88>)
 800145e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8001462:	429a      	cmp	r2, r3
 8001464:	d01c      	beq.n	80014a0 <ESP_Receive+0x60>
				/* serial data available, so return data to user */
				*Buffer++ = WiFiRxBuffer.data[WiFiRxBuffer.head++];
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <ESP_Receive+0x88>)
 8001468:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	b291      	uxth	r1, r2
 8001470:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <ESP_Receive+0x88>)
 8001472:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
 8001476:	4619      	mov	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <ESP_Receive+0x88>)
 8001480:	5c52      	ldrb	r2, [r2, r1]
 8001482:	701a      	strb	r2, [r3, #0]

				ReadData++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]

				/* check for ring buffer wrap */
				if (WiFiRxBuffer.head >= ESP_BUFFERSIZE_CIRCULAR) {
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <ESP_Receive+0x88>)
 800148c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
 8001490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001494:	d30d      	bcc.n	80014b2 <ESP_Receive+0x72>
					/* Ring buffer wrap, so reset head pointer to start of buffer */
					WiFiRxBuffer.head = 0;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <ESP_Receive+0x88>)
 8001498:	2200      	movs	r2, #0
 800149a:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
				}
				break;
 800149e:	e008      	b.n	80014b2 <ESP_Receive+0x72>
			}
		} while((xTaskGetTickCount() - tickStart) < ESP_DEFAULT_TIME_OUT);
 80014a0:	f011 f8c8 	bl	8012634 <xTaskGetTickCount>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d9d1      	bls.n	8001456 <ESP_Receive+0x16>
	while (Length--) {
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	1e5a      	subs	r2, r3, #1
 80014b6:	603a      	str	r2, [r7, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1c9      	bne.n	8001450 <ESP_Receive+0x10>
	}

	return ReadData;
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000dce0 	.word	0x2000dce0

080014cc <getData>:
 * @param  Buffer The buffer where to fill the received data
 * @param  Length the maximum data size to receive.
 * @param  RetLength Length of received data
 * @retval Returns ESP8266_OK on success and ESP8266_ERROR otherwise.
 */
static ESP8266_StatusTypeDef getData(uint8_t* Buffer, uint32_t Length, uint32_t* RetLength) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	uint8_t RxChar;
	uint32_t idx = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t LengthString[4];
	uint32_t LengthValue;
	uint8_t i = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
	ESP8266_Boolean newChunk = ESP8266_FALSE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	77bb      	strb	r3, [r7, #30]

	/* Reset the reception data length */
	*RetLength = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

	/* Reset the reception buffer */
	memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 80014ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014ee:	2100      	movs	r1, #0
 80014f0:	484f      	ldr	r0, [pc, #316]	; (8001630 <getData+0x164>)
 80014f2:	f013 fb5e 	bl	8014bb2 <memset>
	 by the string "+IPD,<chunk_size>:". Thus to get the actual data we need to:
	 - Receive data until getting the "+IPD," token, a new chunk is marked.
	 - Extract the 'chunk_size' then read the next 'chunk_size' bytes as actual data
	 - Mark end of the chunk.
	 - Repeat steps above until no more data is available. */
	uint32_t currentTime = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
	do{
	//while(1){
		if (ESP_Receive(&RxChar, 1) != 0) {
 80014fa:	f107 0317 	add.w	r3, r7, #23
 80014fe:	2101      	movs	r1, #1
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff9d 	bl	8001440 <ESP_Receive>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d028      	beq.n	800155e <getData+0x92>
			/* The data chunk starts with +IPD,<chunk length>: */
			if (newChunk == ESP8266_TRUE) {
 800150c:	7fbb      	ldrb	r3, [r7, #30]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d119      	bne.n	8001546 <getData+0x7a>
				/* Read the next lendthValue bytes as part from the actual data. */
				if (LengthValue--) {
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	623a      	str	r2, [r7, #32]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00a      	beq.n	8001532 <getData+0x66>
					*Buffer++ = RxChar;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60fa      	str	r2, [r7, #12]
 8001522:	7dfa      	ldrb	r2, [r7, #23]
 8001524:	701a      	strb	r2, [r3, #0]
					(*RetLength)++;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e009      	b.n	8001546 <getData+0x7a>
				} else {
					/* Clear the buffer as the new chunk has ended. */
					newChunk = ESP8266_FALSE;
 8001532:	2300      	movs	r3, #0
 8001534:	77bb      	strb	r3, [r7, #30]
					memset(RxBuffer, '\0', ESP_BUFFERSIZE_RESPONSE);
 8001536:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800153a:	2100      	movs	r1, #0
 800153c:	483c      	ldr	r0, [pc, #240]	; (8001630 <getData+0x164>)
 800153e:	f013 fb38 	bl	8014bb2 <memset>
					idx = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			RxBuffer[idx++] = RxChar;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	627a      	str	r2, [r7, #36]	; 0x24
 800154c:	7df9      	ldrb	r1, [r7, #23]
 800154e:	4a38      	ldr	r2, [pc, #224]	; (8001630 <getData+0x164>)
 8001550:	54d1      	strb	r1, [r2, r3]
			} else {
				break;
			}
		}

		if (idx == ESP_BUFFERSIZE_RESPONSE) {
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001558:	4293      	cmp	r3, r2
 800155a:	d110      	bne.n	800157e <getData+0xb2>
 800155c:	e007      	b.n	800156e <getData+0xa2>
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 800155e:	7fbb      	ldrb	r3, [r7, #30]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d158      	bne.n	8001616 <getData+0x14a>
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d055      	beq.n	8001616 <getData+0x14a>
				return ESP8266_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e05b      	b.n	8001626 <getData+0x15a>
			/* In case of Buffer overflow, return error */
			if ((newChunk == ESP8266_TRUE) && (LengthValue != 0)) {
 800156e:	7fbb      	ldrb	r3, [r7, #30]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d150      	bne.n	8001616 <getData+0x14a>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d04d      	beq.n	8001616 <getData+0x14a>
				return ESP8266_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e053      	b.n	8001626 <getData+0x15a>
				break;
			}
		}

		/* When a new chunk is met, extact its size */
		if ((strstr((char *) RxBuffer, AT_IPD_STRING) != NULL)
 800157e:	492d      	ldr	r1, [pc, #180]	; (8001634 <getData+0x168>)
 8001580:	482b      	ldr	r0, [pc, #172]	; (8001630 <getData+0x164>)
 8001582:	f013 ff3f 	bl	8015404 <strstr>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d026      	beq.n	80015da <getData+0x10e>
				&& (newChunk == ESP8266_FALSE)) {
 800158c:	7fbb      	ldrb	r3, [r7, #30]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d123      	bne.n	80015da <getData+0x10e>
			i = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	77fb      	strb	r3, [r7, #31]
			memset(LengthString, '\0', 4);
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	2204      	movs	r2, #4
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f013 fb07 	bl	8014bb2 <memset>
			do {
				ESP_Receive(&RxChar, 1);
 80015a4:	f107 0317 	add.w	r3, r7, #23
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff48 	bl	8001440 <ESP_Receive>
				LengthString[i++] = RxChar;
 80015b0:	7ffb      	ldrb	r3, [r7, #31]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	77fa      	strb	r2, [r7, #31]
 80015b6:	7dfa      	ldrb	r2, [r7, #23]
 80015b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015bc:	440b      	add	r3, r1
 80015be:	f803 2c18 	strb.w	r2, [r3, #-24]
			} while (RxChar != ':');
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b3a      	cmp	r3, #58	; 0x3a
 80015c6:	d1ed      	bne.n	80015a4 <getData+0xd8>

			/* Get the buffer length */
			LengthValue = atoi((char *) LengthString);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4618      	mov	r0, r3
 80015ce:	f013 faa5 	bl	8014b1c <atoi>
 80015d2:	4603      	mov	r3, r0
 80015d4:	623b      	str	r3, [r7, #32]

			newChunk = ESP8266_TRUE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77bb      	strb	r3, [r7, #30]
		}

		/* Check if message contains error code */
		if (strstr((char *) RxBuffer, AT_ERROR_STRING) != NULL) {
 80015da:	4917      	ldr	r1, [pc, #92]	; (8001638 <getData+0x16c>)
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <getData+0x164>)
 80015de:	f013 ff11 	bl	8015404 <strstr>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <getData+0x120>
			return ESP8266_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e01c      	b.n	8001626 <getData+0x15a>
		}

		/* Check for the chunk end */
		if (strstr((char *) RxBuffer, AT_IPD_OK_STRING) != NULL) {
 80015ec:	4913      	ldr	r1, [pc, #76]	; (800163c <getData+0x170>)
 80015ee:	4810      	ldr	r0, [pc, #64]	; (8001630 <getData+0x164>)
 80015f0:	f013 ff08 	bl	8015404 <strstr>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <getData+0x132>
			newChunk = ESP8266_FALSE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	77bb      	strb	r3, [r7, #30]
		}
		currentTime++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
		osDelay(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f00f fc43 	bl	8010e90 <osDelay>
	}while(currentTime < ESP_LONG_TIME_OUT);
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001610:	4293      	cmp	r3, r2
 8001612:	f67f af72 	bls.w	80014fa <getData+0x2e>

	if(currentTime > ESP_LONG_TIME_OUT)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f644 6220 	movw	r2, #20000	; 0x4e20
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <getData+0x158>
		return ESP8266_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <getData+0x15a>

	return ESP8266_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000d704 	.word	0x2000d704
 8001634:	08017bfc 	.word	0x08017bfc
 8001638:	08017bf4 	.word	0x08017bf4
 800163c:	08017c04 	.word	0x08017c04

08001640 <MQTTSerialize_connectLength>:
int MQTTSerialize_connectLength(MQTTPacket_connectData* options, MQTTProperties* connectProperties,
  MQTTProperties* willProperties)
#else
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
#endif
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	int len = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7a1b      	ldrb	r3, [r3, #8]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d102      	bne.n	800165a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8001654:	230c      	movs	r3, #12
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e005      	b.n	8001666 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion >= 4)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7a1b      	ldrb	r3, [r3, #8]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d901      	bls.n	8001666 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8001662:	230a      	movs	r3, #10
 8001664:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	330c      	adds	r3, #12
 800166a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800166e:	f000 fb52 	bl	8001d16 <MQTTstrlen>
 8001672:	4603      	mov	r3, r0
 8001674:	3302      	adds	r3, #2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7edb      	ldrb	r3, [r3, #27]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3324      	adds	r3, #36	; 0x24
 8001688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800168c:	f000 fb43 	bl	8001d16 <MQTTstrlen>
 8001690:	4603      	mov	r3, r0
 8001692:	1c9c      	adds	r4, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3330      	adds	r3, #48	; 0x30
 8001698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800169c:	f000 fb3b 	bl	8001d16 <MQTTstrlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4423      	add	r3, r4
 80016a4:	3302      	adds	r3, #2
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4413      	add	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <MQTTSerialize_connectLength+0x7c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3340      	adds	r3, #64	; 0x40
 80016c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016c4:	f000 fb27 	bl	8001d16 <MQTTstrlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	3302      	adds	r3, #2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <MQTTSerialize_connectLength+0xa2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	334c      	adds	r3, #76	; 0x4c
 80016e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ea:	f000 fb14 	bl	8001d16 <MQTTstrlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	3302      	adds	r3, #2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
		  len += MQTTProperties_len(willProperties);
	}
#endif

	FUNC_EXIT_RC(len);
	return len;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
	...

08001704 <MQTTSerialize_connect>:
int MQTTV5Serialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options,
  MQTTProperties* connectProperties, MQTTProperties* willProperties)
#else
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
#endif
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
	FUNC_ENTRY;
	#if defined(MQTTV5)
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options,
		         connectProperties, willProperties)) > buflen)
	#else
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff8a 	bl	8001640 <MQTTSerialize_connectLength>
 800172c:	6238      	str	r0, [r7, #32]
 800172e:	6a38      	ldr	r0, [r7, #32]
 8001730:	f000 fa0d 	bl	8001b4e <MQTTPacket_len>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4293      	cmp	r3, r2
 800173a:	da03      	bge.n	8001744 <MQTTSerialize_connect+0x40>
	#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800173c:	f06f 0301 	mvn.w	r3, #1
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001742:	e0ca      	b.n	80018da <MQTTSerialize_connect+0x1d6>
	}

	header.byte = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8001748:	7e3b      	ldrb	r3, [r7, #24]
 800174a:	2201      	movs	r2, #1
 800174c:	f362 1307 	bfi	r3, r2, #4, #4
 8001750:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001752:	7e3a      	ldrb	r2, [r7, #24]
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fa50 	bl	8001c00 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	6a39      	ldr	r1, [r7, #32]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f964 	bl	8001a32 <MQTTPacket_encode>
 800176a:	4602      	mov	r2, r0
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	61fb      	str	r3, [r7, #28]

  if (options->MQTTVersion == 5 || options->MQTTVersion == 4)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7a1b      	ldrb	r3, [r3, #8]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d003      	beq.n	8001782 <MQTTSerialize_connect+0x7e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7a1b      	ldrb	r3, [r3, #8]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d106      	bne.n	8001790 <MQTTSerialize_connect+0x8c>
		writeCString(&ptr, "MQTT");
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4957      	ldr	r1, [pc, #348]	; (80018e4 <MQTTSerialize_connect+0x1e0>)
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fa77 	bl	8001c7c <writeCString>
 800178e:	e00a      	b.n	80017a6 <MQTTSerialize_connect+0xa2>
	else if (options->MQTTVersion == 3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7a1b      	ldrb	r3, [r3, #8]
 8001794:	2b03      	cmp	r3, #3
 8001796:	f040 809f 	bne.w	80018d8 <MQTTSerialize_connect+0x1d4>
		writeCString(&ptr, "MQIsdp");
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4952      	ldr	r1, [pc, #328]	; (80018e8 <MQTTSerialize_connect+0x1e4>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fa6b 	bl	8001c7c <writeCString>
	else
	  goto exit;
	writeChar(&ptr, (char)options->MQTTVersion);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7a1a      	ldrb	r2, [r3, #8]
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fa25 	bl	8001c00 <writeChar>

	flags.all = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e9b      	ldrb	r3, [r3, #26]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	f362 0341 	bfi	r3, r2, #1, #1
 80017ca:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7edb      	ldrb	r3, [r3, #27]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	7d3b      	ldrb	r3, [r7, #20]
 80017dc:	f362 0382 	bfi	r3, r2, #2, #1
 80017e0:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80017e2:	7d3b      	ldrb	r3, [r7, #20]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d013      	beq.n	8001816 <MQTTSerialize_connect+0x112>
	{
		flags.bits.willQoS = options->will.qos;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	7d3b      	ldrb	r3, [r7, #20]
 80017fc:	f362 03c4 	bfi	r3, r2, #3, #2
 8001800:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	7d3b      	ldrb	r3, [r7, #20]
 8001810:	f362 1345 	bfi	r3, r2, #5, #1
 8001814:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <MQTTSerialize_connect+0x122>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <MQTTSerialize_connect+0x12a>
		flags.bits.username = 1;
 8001826:	7d3b      	ldrb	r3, [r7, #20]
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <MQTTSerialize_connect+0x13a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <MQTTSerialize_connect+0x142>
		flags.bits.password = 1;
 800183e:	7d3b      	ldrb	r3, [r7, #20]
 8001840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001844:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8001846:	7d3a      	ldrb	r2, [r7, #20]
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f9d6 	bl	8001c00 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8b1b      	ldrh	r3, [r3, #24]
 8001858:	461a      	mov	r2, r3
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f9e2 	bl	8001c2a <writeInt>
#if defined(MQTTV5)
	if (options->MQTTVersion == 5)
	  MQTTProperties_write(&ptr, connectProperties);
#endif
	writeMQTTString(&ptr, options->clientID);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f107 001c 	add.w	r0, r7, #28
 800186c:	330c      	adds	r3, #12
 800186e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001870:	f000 fa23 	bl	8001cba <writeMQTTString>
	if (options->willFlag)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7edb      	ldrb	r3, [r3, #27]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00d      	beq.n	8001898 <MQTTSerialize_connect+0x194>
#if defined(MQTTV5)
		/* write will properties */
		if (options->MQTTVersion == 5 && willProperties)
		  MQTTProperties_write(&ptr, willProperties);
#endif
		writeMQTTString(&ptr, options->will.topicName);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f107 001c 	add.w	r0, r7, #28
 8001882:	3324      	adds	r3, #36	; 0x24
 8001884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001886:	f000 fa18 	bl	8001cba <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f107 001c 	add.w	r0, r7, #28
 8001890:	3330      	adds	r3, #48	; 0x30
 8001892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001894:	f000 fa11 	bl	8001cba <writeMQTTString>
	}
	if (flags.bits.username)
 8001898:	7d3b      	ldrb	r3, [r7, #20]
 800189a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <MQTTSerialize_connect+0x1ae>
		writeMQTTString(&ptr, options->username);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f107 001c 	add.w	r0, r7, #28
 80018aa:	3340      	adds	r3, #64	; 0x40
 80018ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ae:	f000 fa04 	bl	8001cba <writeMQTTString>
	if (flags.bits.password)
 80018b2:	7d3b      	ldrb	r3, [r7, #20]
 80018b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <MQTTSerialize_connect+0x1c8>
		writeMQTTString(&ptr, options->password);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f107 001c 	add.w	r0, r7, #28
 80018c4:	334c      	adds	r3, #76	; 0x4c
 80018c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c8:	f000 f9f7 	bl	8001cba <writeMQTTString>

	rc = ptr - buf;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	e000      	b.n	80018da <MQTTSerialize_connect+0x1d6>
	  goto exit;
 80018d8:	bf00      	nop

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08017c0c 	.word	0x08017c0c
 80018e8:	08017c14 	.word	0x08017c14

080018ec <MQTTDeserialize_connack>:
int MQTTV5Deserialize_connack(MQTTProperties* connackProperties, unsigned char* sessionPresent, unsigned char* connack_rc,
	unsigned char* buf, int buflen)
#else
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
#endif
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f960 	bl	8001bd8 <readChar>
 8001918:	4603      	mov	r3, r0
 800191a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800191c:	7f3b      	ldrb	r3, [r7, #28]
 800191e:	f023 030f 	bic.w	r3, r3, #15
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b20      	cmp	r3, #32
 8001926:	d12e      	bne.n	8001986 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f107 0214 	add.w	r2, r7, #20
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f93b 	bl	8001bac <MQTTPacket_decodeBuf>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4413      	add	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4413      	add	r3, r2
 8001946:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	2b01      	cmp	r3, #1
 8001950:	dd1b      	ble.n	800198a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f93e 	bl	8001bd8 <readChar>
 800195c:	4603      	mov	r3, r0
 800195e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8001960:	7c3b      	ldrb	r3, [r7, #16]
 8001962:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800196e:	f107 0318 	add.w	r3, r7, #24
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f930 	bl	8001bd8 <readChar>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	701a      	strb	r2, [r3, #0]
#if defined(MQTTV5)
	if (connackProperties && !MQTTProperties_read(connackProperties, &curdata, enddata))
	  goto exit;
#endif

	rc = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	e002      	b.n	800198c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800198a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <MQTTSerialize_zero>:
int MQTTV5Serialize_zero(unsigned char* buf, int buflen, unsigned char packettype,
  int reasonCode, MQTTProperties* properties)
#else
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
#endif
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b088      	sub	sp, #32
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	4613      	mov	r3, r2
 80019a2:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
	int rc = -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ac:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	613b      	str	r3, [r7, #16]
	int len = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
		len += 1;
    if (properties)
	    len += MQTTProperties_len(properties);
	}
#endif
	if (MQTTPacket_len(len) > buflen)
 80019b6:	69b8      	ldr	r0, [r7, #24]
 80019b8:	f000 f8c9 	bl	8001b4e <MQTTPacket_len>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	da03      	bge.n	80019cc <MQTTSerialize_zero+0x36>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80019c4:	f06f 0301 	mvn.w	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80019ca:	e01e      	b.n	8001a0a <MQTTSerialize_zero+0x74>
	}
	header.byte = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	753b      	strb	r3, [r7, #20]
	header.bits.type = packettype;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	7d3b      	ldrb	r3, [r7, #20]
 80019da:	f362 1307 	bfi	r3, r2, #4, #4
 80019de:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 80019e0:	7d3a      	ldrb	r2, [r7, #20]
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f909 	bl	8001c00 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f81d 	bl	8001a32 <MQTTPacket_encode>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
		writeChar(&ptr, reasonCode); /* must have reasonCode before properties */
	  if (properties)
		  MQTTProperties_write(&ptr, properties);
	}
#endif
	rc = ptr - buf;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <MQTTSerialize_disconnect>:
int MQTTV5Serialize_disconnect(unsigned char* buf, int buflen,
	             int reasonCode, MQTTProperties* properties)
#else
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
#endif
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
#if defined(MQTTV5)
	return MQTTV5Serialize_zero(buf, buflen, DISCONNECT, reasonCode, properties);
#else
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8001a1e:	220e      	movs	r2, #14
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffb7 	bl	8001996 <MQTTSerialize_zero>
 8001a28:	4603      	mov	r3, r0
#endif
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	425a      	negs	r2, r3
 8001a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a4c:	bf58      	it	pl
 8001a4e:	4253      	negpl	r3, r2
 8001a50:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da00      	bge.n	8001a5a <MQTTPacket_encode+0x28>
 8001a58:	337f      	adds	r3, #127	; 0x7f
 8001a5a:	11db      	asrs	r3, r3, #7
 8001a5c:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd03      	ble.n	8001a6c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a6a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60fa      	str	r2, [r7, #12]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	7afa      	ldrb	r2, [r7, #11]
 8001a7a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dcde      	bgt.n	8001a40 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	dd03      	ble.n	8001ac2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abe:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001ac0:	e01d      	b.n	8001afe <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001ac2:	f107 020b 	add.w	r2, r7, #11
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4798      	blx	r3
 8001ace:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d112      	bne.n	8001afc <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ae0:	6979      	ldr	r1, [r7, #20]
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	441a      	add	r2, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	dbd6      	blt.n	8001aa8 <MQTTPacket_decode+0x18>
exit:
 8001afa:	e000      	b.n	8001afe <MQTTPacket_decode+0x6e>
			goto exit;
 8001afc:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001afe:	693b      	ldr	r3, [r7, #16]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <MQTTPacket_VBIlen>:


int MQTTPacket_VBIlen(int rem_len)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	int rc = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]

	if (rem_len < 128)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	dc02      	bgt.n	8001b20 <MQTTPacket_VBIlen+0x18>
		rc = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e00f      	b.n	8001b40 <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 16384)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b26:	da02      	bge.n	8001b2e <MQTTPacket_VBIlen+0x26>
		rc = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e008      	b.n	8001b40 <MQTTPacket_VBIlen+0x38>
	else if (rem_len < 2097152)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b34:	da02      	bge.n	8001b3c <MQTTPacket_VBIlen+0x34>
		rc = 3;
 8001b36:	2303      	movs	r3, #3
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e001      	b.n	8001b40 <MQTTPacket_VBIlen+0x38>
	else
		rc = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
  return rc;
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001b4e:	b590      	push	{r4, r7, lr}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* header byte + remaining length */
	return rem_len + 1  + MQTTPacket_VBIlen(rem_len);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	1c5c      	adds	r4, r3, #1
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffd4 	bl	8001b08 <MQTTPacket_VBIlen>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4423      	add	r3, r4
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <bufchar>:

static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e00a      	b.n	8001b92 <bufchar+0x26>
		*c = *bufptr++;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <bufchar+0x3c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	4909      	ldr	r1, [pc, #36]	; (8001ba8 <bufchar+0x3c>)
 8001b84:	600a      	str	r2, [r1, #0]
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dbf0      	blt.n	8001b7c <bufchar+0x10>
	return count;
 8001b9a:	683b      	ldr	r3, [r7, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000464 	.word	0x20000464

08001bac <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <MQTTPacket_decodeBuf+0x24>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MQTTPacket_decodeBuf+0x28>)
 8001bc0:	f7ff ff66 	bl	8001a90 <MQTTPacket_decode>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000464 	.word	0x20000464
 8001bd4:	08001b6d 	.word	0x08001b6d

08001bd8 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
	return c;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	da00      	bge.n	8001c3c <writeInt+0x12>
 8001c3a:	33ff      	adds	r3, #255	; 0xff
 8001c3c:	121b      	asrs	r3, r3, #8
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	425a      	negs	r2, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	bf58      	it	pl
 8001c5c:	4253      	negpl	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7fe fab2 	bl	80001f0 <strlen>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffc9 	bl	8001c2a <writeInt>
	memcpy(*pptr, string, len);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f012 ff7b 	bl	8014b9c <memcpy>
	*pptr += len;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	441a      	add	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	4638      	mov	r0, r7
 8001cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dd12      	ble.n	8001cf4 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff ffa9 	bl	8001c2a <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f012 ff5b 	bl	8014b9c <memcpy>
		*pptr += mqttstring.lenstring.len;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	441a      	add	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8001cf2:	e00c      	b.n	8001d0e <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff ffbc 	bl	8001c7c <writeCString>
}
 8001d04:	e003      	b.n	8001d0e <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8001d06:	2100      	movs	r1, #0
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff ff8e 	bl	8001c2a <writeInt>
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa5e 	bl	80001f0 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e001      	b.n	8001d3e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	617b      	str	r3, [r7, #20]
	return rc;
 8001d3e:	697b      	ldr	r3, [r7, #20]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <MQTTSerialize_publishLength>:
#if defined(MQTTV5)
int MQTTV5Serialize_publishLength(int qos, MQTTString topicName, int payloadlen, MQTTProperties* properties)
#else
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
#endif
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	4638      	mov	r0, r7
 8001d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d60:	f7ff ffd9 	bl	8001d16 <MQTTstrlen>
 8001d64:	4603      	mov	r3, r0
 8001d66:	1c9a      	adds	r2, r3, #2
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd02      	ble.n	8001d7e <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	617b      	str	r3, [r7, #20]
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001d7e:	697b      	ldr	r3, [r7, #20]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <MQTTSerialize_publish>:
		MQTTString topicName, MQTTProperties* properties, unsigned char* payload, int payloadlen)
#else
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
#endif
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTV5Serialize_publishLength(qos, topicName, payloadlen, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8001da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f7ff ffc8 	bl	8001d48 <MQTTSerialize_publishLength>
 8001db8:	61b8      	str	r0, [r7, #24]
 8001dba:	69b8      	ldr	r0, [r7, #24]
 8001dbc:	f7ff fec7 	bl	8001b4e <MQTTPacket_len>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	da03      	bge.n	8001dd0 <MQTTSerialize_publish+0x48>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001dc8:	f06f 0301 	mvn.w	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001dce:	e04d      	b.n	8001e6c <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8001dd0:	7c3b      	ldrb	r3, [r7, #16]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f362 1307 	bfi	r3, r2, #4, #4
 8001dd8:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	7c3b      	ldrb	r3, [r7, #16]
 8001de4:	f362 03c3 	bfi	r3, r2, #3, #1
 8001de8:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	7c3b      	ldrb	r3, [r7, #16]
 8001df4:	f362 0342 	bfi	r3, r2, #1, #2
 8001df8:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8001dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	7c3b      	ldrb	r3, [r7, #16]
 8001e06:	f362 0300 	bfi	r3, r2, #0, #1
 8001e0a:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001e0c:	7c3a      	ldrb	r2, [r7, #16]
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fef3 	bl	8001c00 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe07 	bl	8001a32 <MQTTPacket_encode>
 8001e24:	4602      	mov	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8001e2c:	f107 0014 	add.w	r0, r7, #20
 8001e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e36:	f7ff ff40 	bl	8001cba <writeMQTTString>

	if (qos > 0)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dd06      	ble.n	8001e4e <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8001e40:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff feee 	bl	8001c2a <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
		goto exit;
#endif

	memcpy(ptr, payload, payloadlen);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e54:	4618      	mov	r0, r3
 8001e56:	f012 fea1 	bl	8014b9c <memcpy>
	ptr += payloadlen;
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <MQTTSerialize_subscribeLength>:
#if defined(MQTTV5)
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[], MQTTProperties* properties)
#else
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
#endif
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8001e80:	2302      	movs	r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e013      	b.n	8001eb2 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e9e:	f7ff ff3a 	bl	8001d16 <MQTTstrlen>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbe7      	blt.n	8001e8a <MQTTSerialize_subscribeLength+0x14>
#if defined(MQTTV5)
  if (properties)
	  len += MQTTProperties_len(properties);
#endif
	return len;
 8001eba:	68bb      	ldr	r3, [r7, #8]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <MQTTSerialize_subscribe>:
		MQTTProperties* properties, int count, MQTTString topicFilters[], int requestedQoSs[], struct subscribeOptions options[])
#else
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
#endif
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	71fb      	strb	r3, [r7, #7]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
#if defined(MQTTV5)
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters, properties)) > buflen)
#else
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef2:	f7ff ffc0 	bl	8001e76 <MQTTSerialize_subscribeLength>
 8001ef6:	61f8      	str	r0, [r7, #28]
 8001ef8:	69f8      	ldr	r0, [r7, #28]
 8001efa:	f7ff fe28 	bl	8001b4e <MQTTPacket_len>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4293      	cmp	r3, r2
 8001f04:	da03      	bge.n	8001f0e <MQTTSerialize_subscribe+0x4a>
#endif
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001f06:	f06f 0301 	mvn.w	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001f0c:	e053      	b.n	8001fb6 <MQTTSerialize_subscribe+0xf2>
	}

	header.byte = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	743b      	strb	r3, [r7, #16]
	header.bits.type = SUBSCRIBE;
 8001f12:	7c3b      	ldrb	r3, [r7, #16]
 8001f14:	2208      	movs	r2, #8
 8001f16:	f362 1307 	bfi	r3, r2, #4, #4
 8001f1a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	7c3b      	ldrb	r3, [r7, #16]
 8001f26:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f2a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = 1;
 8001f2c:	7c3b      	ldrb	r3, [r7, #16]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f362 0342 	bfi	r3, r2, #1, #2
 8001f34:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8001f36:	7c3a      	ldrb	r2, [r7, #16]
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fe5e 	bl	8001c00 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fd72 	bl	8001a32 <MQTTPacket_encode>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4413      	add	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

	writeInt(&ptr, packetid);
 8001f56:	88ba      	ldrh	r2, [r7, #4]
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fe63 	bl	8001c2a <writeInt>
#if defined(MQTTV5)
  if (properties && MQTTProperties_write(&ptr, properties) < 0)
	  goto exit;
#endif

	for (i = 0; i < count; ++i)
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	e01c      	b.n	8001fa4 <MQTTSerialize_subscribe+0xe0>
	{
		unsigned char opts = requestedQoSs[i];
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	76fb      	strb	r3, [r7, #27]
			opts |= (options[i].noLocal << 2); /* 1 bit */
			opts |= (options[i].retainAsPublished << 3); /* 1 bit */
			opts |= (options[i].retainHandling << 4); /* 2 bits */
		}
#endif
		writeMQTTString(&ptr, topicFilters[i]);
 8001f76:	6a3a      	ldr	r2, [r7, #32]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f84:	4413      	add	r3, r2
 8001f86:	f107 0014 	add.w	r0, r7, #20
 8001f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8c:	f7ff fe95 	bl	8001cba <writeMQTTString>
		writeChar(&ptr, opts);
 8001f90:	7efa      	ldrb	r2, [r7, #27]
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe31 	bl	8001c00 <writeChar>
	for (i = 0; i < count; ++i)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbde      	blt.n	8001f6a <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <BMP280_i2c_read_reg>:


extern I2C_HandleTypeDef hi2c1;

uint8_t BMP280_i2c_read_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t* data, uint16_t length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	603a      	str	r2, [r7, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	71bb      	strb	r3, [r7, #6]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_buff[1];

	tx_buff[0] = internal_adr;
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, TIMEOUT);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	f107 020c 	add.w	r2, r7, #12
 8001fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	480a      	ldr	r0, [pc, #40]	; (8002014 <BMP280_i2c_read_reg+0x54>)
 8001fec:	f004 fef8 	bl	8006de0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, data, length, TIMEOUT);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	88ba      	ldrh	r2, [r7, #4]
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4803      	ldr	r0, [pc, #12]	; (8002014 <BMP280_i2c_read_reg+0x54>)
 8002006:	f004 ffdf 	bl	8006fc8 <HAL_I2C_Master_Receive>

	return 0;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000e54c 	.word	0x2000e54c

08002018 <BMP280_i2c_write_reg>:


void BMP280_i2c_write_reg(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	460b      	mov	r3, r1
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	4613      	mov	r3, r2
 8002028:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 800202e:	797b      	ldrb	r3, [r7, #5]
 8002030:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, sizeof(tx_buff), TIMEOUT);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	b299      	uxth	r1, r3
 8002036:	f107 020c 	add.w	r2, r7, #12
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2302      	movs	r3, #2
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <BMP280_i2c_write_reg+0x38>)
 8002044:	f004 fecc 	bl	8006de0 <HAL_I2C_Master_Transmit>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000e54c 	.word	0x2000e54c

08002054 <BMP280_get_calib_values>:

void BMP280_get_calib_values(bmp280_dev *dev)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	uint8_t temp[BMP280_CALIB_DATA_SIZE], starting_address=0x88;
 800205c:	2388      	movs	r3, #136	; 0x88
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, temp, BMP280_CALIB_DATA_SIZE);
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800206a:	2318      	movs	r3, #24
 800206c:	20ee      	movs	r0, #238	; 0xee
 800206e:	f7ff ffa7 	bl	8001fc0 <BMP280_i2c_read_reg>

	dev->calib_param.dig_t1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7b3b      	ldrb	r3, [r7, #12]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	b29a      	uxth	r2, r3
	dev->calib_param.dig_t1 =
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	801a      	strh	r2, [r3, #0]
	dev->calib_param.dig_t2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	7bbb      	ldrb	r3, [r7, #14]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t2 =
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	805a      	strh	r2, [r3, #2]
	dev->calib_param.dig_t3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8002098:	7c7b      	ldrb	r3, [r7, #17]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21a      	sxth	r2, r3
 800209e:	7c3b      	ldrb	r3, [r7, #16]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21a      	sxth	r2, r3
	dev->calib_param.dig_t3 =
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	809a      	strh	r2, [r3, #4]
	dev->calib_param.dig_p1 =
			(uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	7cbb      	ldrb	r3, [r7, #18]
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	b29a      	uxth	r2, r3
	dev->calib_param.dig_p1 =
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	80da      	strh	r2, [r3, #6]
	dev->calib_param.dig_p2 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80020be:	7d7b      	ldrb	r3, [r7, #21]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	7d3b      	ldrb	r3, [r7, #20]
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p2 =
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	811a      	strh	r2, [r3, #8]
	dev->calib_param.dig_p3 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	7dbb      	ldrb	r3, [r7, #22]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p3 =
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	815a      	strh	r2, [r3, #10]
	dev->calib_param.dig_p4 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 80020e2:	7e7b      	ldrb	r3, [r7, #25]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	7e3b      	ldrb	r3, [r7, #24]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p4 =
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	819a      	strh	r2, [r3, #12]
	dev->calib_param.dig_p5 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 80020f4:	7efb      	ldrb	r3, [r7, #27]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	7ebb      	ldrb	r3, [r7, #26]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p5 =
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	81da      	strh	r2, [r3, #14]
	dev->calib_param.dig_p6 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8002106:	7f7b      	ldrb	r3, [r7, #29]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	7f3b      	ldrb	r3, [r7, #28]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p6 =
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	821a      	strh	r2, [r3, #16]
	dev->calib_param.dig_p7 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	b21a      	sxth	r2, r3
 800211e:	7fbb      	ldrb	r3, [r7, #30]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p7 =
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	825a      	strh	r2, [r3, #18]
	dev->calib_param.dig_p8 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 800212a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p8 =
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	829a      	strh	r2, [r3, #20]
	dev->calib_param.dig_p9 =
			(int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8002140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	b21a      	sxth	r2, r3
 8002148:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800214c:	b21b      	sxth	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b21a      	sxth	r2, r3
	dev->calib_param.dig_p9 =
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	82da      	strh	r2, [r3, #22]

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <BMP280_init>:

void BMP280_init(bmp280_dev *dev)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	uint8_t register_F4 = 0b01010111;
 8002166:	2357      	movs	r3, #87	; 0x57
 8002168:	73fb      	strb	r3, [r7, #15]
	uint8_t register_F5 = 0b10010000;
 800216a:	2390      	movs	r3, #144	; 0x90
 800216c:	73bb      	strb	r3, [r7, #14]

	BMP280_i2c_write_reg(BMP280_dev_address, F4_ctrl_meas_reg, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	461a      	mov	r2, r3
 8002172:	21f4      	movs	r1, #244	; 0xf4
 8002174:	20ee      	movs	r0, #238	; 0xee
 8002176:	f7ff ff4f 	bl	8002018 <BMP280_i2c_write_reg>
	BMP280_i2c_write_reg(BMP280_dev_address, F5_config_reg, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	461a      	mov	r2, r3
 800217e:	21f5      	movs	r1, #245	; 0xf5
 8002180:	20ee      	movs	r0, #238	; 0xee
 8002182:	f7ff ff49 	bl	8002018 <BMP280_i2c_write_reg>

	BMP280_get_calib_values(dev);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff64 	bl	8002054 <BMP280_get_calib_values>
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0000      	movs	r0, r0
	...

08002198 <BMP280_calc_values>:

void BMP280_calc_values(bmp280_dev *dev)
{
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	b090      	sub	sp, #64	; 0x40
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	uint8_t rx_buff[6], starting_address = F7_press_reg;
 80021a2:	23f7      	movs	r3, #247	; 0xf7
 80021a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t * data = NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38

	do
	{
		BMP280_i2c_read_reg(BMP280_dev_address, F3_status_reg, data, 1);
 80021ac:	2301      	movs	r3, #1
 80021ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b0:	21f3      	movs	r1, #243	; 0xf3
 80021b2:	20ee      	movs	r0, #238	; 0xee
 80021b4:	f7ff ff04 	bl	8001fc0 <BMP280_i2c_read_reg>
	} while(((*(data)&0b00001000) == 8)||((*(data)&0b00000001) == 1));
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f3      	bne.n	80021ac <BMP280_calc_values+0x14>
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ed      	bne.n	80021ac <BMP280_calc_values+0x14>


	BMP280_i2c_read_reg(BMP280_dev_address, starting_address, rx_buff, sizeof(rx_buff));
 80021d0:	f107 0220 	add.w	r2, r7, #32
 80021d4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80021d8:	2306      	movs	r3, #6
 80021da:	20ee      	movs	r0, #238	; 0xee
 80021dc:	f7ff fef0 	bl	8001fc0 <BMP280_i2c_read_reg>

	volatile uint32_t temp[3];
	temp[2] = rx_buff[3];
 80021e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e4:	61fb      	str	r3, [r7, #28]
	temp[1] = rx_buff[4];
 80021e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021ea:	61bb      	str	r3, [r7, #24]
	temp[0] = rx_buff[5];
 80021ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80021f0:	617b      	str	r3, [r7, #20]
	dev->raw_data.temperature_raw = (temp[2] << 12) + (temp[1] << 4) + (temp[0] >> 4);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	031a      	lsls	r2, r3, #12
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	441a      	add	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	61da      	str	r2, [r3, #28]

	temp[2] = rx_buff[0];
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	61fb      	str	r3, [r7, #28]
	temp[1] = rx_buff[1];
 800220e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002212:	61bb      	str	r3, [r7, #24]
	temp[0] = rx_buff[2];
 8002214:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002218:	617b      	str	r3, [r7, #20]
	dev->raw_data.pressure_raw=(temp[2] << 12) + (temp[1] << 4) + (temp[0] >> 4);
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	031a      	lsls	r2, r3, #12
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	441a      	add	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	621a      	str	r2, [r3, #32]

	double var1, var2;
	var1 = (((double)dev->raw_data.temperature_raw) / 16384.0 - ((double)dev->calib_param.dig_t1) / 1024.0) * ((double)dev->calib_param.dig_t2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f986 	bl	8000544 <__aeabi_i2d>
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	4bd0      	ldr	r3, [pc, #832]	; (8002580 <BMP280_calc_values+0x3e8>)
 800223e:	f7fe fb15 	bl	800086c <__aeabi_ddiv>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	4625      	mov	r5, r4
 8002248:	461c      	mov	r4, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f968 	bl	8000524 <__aeabi_ui2d>
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4bca      	ldr	r3, [pc, #808]	; (8002584 <BMP280_calc_values+0x3ec>)
 800225a:	f7fe fb07 	bl	800086c <__aeabi_ddiv>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fe f81f 	bl	80002a8 <__aeabi_dsub>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	4625      	mov	r5, r4
 8002270:	461c      	mov	r4, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f963 	bl	8000544 <__aeabi_i2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe f9c7 	bl	8000618 <__aeabi_dmul>
 800228a:	4603      	mov	r3, r0
 800228c:	460c      	mov	r4, r1
 800228e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2 = ((((double)dev->raw_data.temperature_raw) / 131072.0-((double)dev->calib_param.dig_t1)/8192.0)*(((double)dev->raw_data.temperature_raw)/131072.0-((double)dev->calib_param.dig_t1)/8192.0))*((double)dev->calib_param.dig_t3);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f954 	bl	8000544 <__aeabi_i2d>
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80022a4:	f7fe fae2 	bl	800086c <__aeabi_ddiv>
 80022a8:	4603      	mov	r3, r0
 80022aa:	460c      	mov	r4, r1
 80022ac:	4625      	mov	r5, r4
 80022ae:	461c      	mov	r4, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f935 	bl	8000524 <__aeabi_ui2d>
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4bb2      	ldr	r3, [pc, #712]	; (8002588 <BMP280_calc_values+0x3f0>)
 80022c0:	f7fe fad4 	bl	800086c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd ffec 	bl	80002a8 <__aeabi_dsub>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4625      	mov	r5, r4
 80022d6:	461c      	mov	r4, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f931 	bl	8000544 <__aeabi_i2d>
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80022ea:	f7fe fabf 	bl	800086c <__aeabi_ddiv>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4690      	mov	r8, r2
 80022f4:	4699      	mov	r9, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f912 	bl	8000524 <__aeabi_ui2d>
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <BMP280_calc_values+0x3f0>)
 8002306:	f7fe fab1 	bl	800086c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4640      	mov	r0, r8
 8002310:	4649      	mov	r1, r9
 8002312:	f7fd ffc9 	bl	80002a8 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fe f97b 	bl	8000618 <__aeabi_dmul>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	4625      	mov	r5, r4
 8002328:	461c      	mov	r4, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f907 	bl	8000544 <__aeabi_i2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fe f96b 	bl	8000618 <__aeabi_dmul>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	dev->calib_param.t_fine = (int32_t)(var1 + var2);
 800234a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800234e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002352:	f7fd ffab 	bl	80002ac <__adddf3>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fc0b 	bl	8000b78 <__aeabi_d2iz>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
volatile	float T = (var1+var2)/5120.0;
 8002368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800236c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002370:	f7fd ff9c 	bl	80002ac <__adddf3>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4618      	mov	r0, r3
 800237a:	4621      	mov	r1, r4
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b82      	ldr	r3, [pc, #520]	; (800258c <BMP280_calc_values+0x3f4>)
 8002382:	f7fe fa73 	bl	800086c <__aeabi_ddiv>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	4618      	mov	r0, r3
 800238c:	4621      	mov	r1, r4
 800238e:	f7fe fc1b 	bl	8000bc8 <__aeabi_d2f>
 8002392:	4603      	mov	r3, r0
 8002394:	613b      	str	r3, [r7, #16]

	var1 = ((double)dev->calib_param.t_fine / 2.0) - 64000.0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8d2 	bl	8000544 <__aeabi_i2d>
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a8:	f7fe fa60 	bl	800086c <__aeabi_ddiv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4618      	mov	r0, r3
 80023b2:	4621      	mov	r1, r4
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <BMP280_calc_values+0x3f8>)
 80023ba:	f7fd ff75 	bl	80002a8 <__aeabi_dsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	460c      	mov	r4, r1
 80023c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2 = var1 * var1 * ((double)dev->calib_param.dig_p6) / 32768.0;
 80023c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023ce:	f7fe f923 	bl	8000618 <__aeabi_dmul>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	4625      	mov	r5, r4
 80023d8:	461c      	mov	r4, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8af 	bl	8000544 <__aeabi_i2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4620      	mov	r0, r4
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7fe f913 	bl	8000618 <__aeabi_dmul>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	4618      	mov	r0, r3
 80023f8:	4621      	mov	r1, r4
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <BMP280_calc_values+0x3fc>)
 8002400:	f7fe fa34 	bl	800086c <__aeabi_ddiv>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2 = var2 + var1 * ((double)dev->calib_param.dig_p5) * 2.0;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f896 	bl	8000544 <__aeabi_i2d>
 8002418:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800241c:	f7fe f8fc 	bl	8000618 <__aeabi_dmul>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4618      	mov	r0, r3
 8002426:	4621      	mov	r1, r4
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	f7fd ff3e 	bl	80002ac <__adddf3>
 8002430:	4603      	mov	r3, r0
 8002432:	460c      	mov	r4, r1
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800243c:	f7fd ff36 	bl	80002ac <__adddf3>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var2 = (var2 / 4.0) + (((double)dev->calib_param.dig_p4) * 65536.0);
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b52      	ldr	r3, [pc, #328]	; (8002598 <BMP280_calc_values+0x400>)
 800244e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002452:	f7fe fa0b 	bl	800086c <__aeabi_ddiv>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	4625      	mov	r5, r4
 800245c:	461c      	mov	r4, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f86d 	bl	8000544 <__aeabi_i2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b4b      	ldr	r3, [pc, #300]	; (800259c <BMP280_calc_values+0x404>)
 8002470:	f7fe f8d2 	bl	8000618 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd ff16 	bl	80002ac <__adddf3>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) / 524288.0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f858 	bl	8000544 <__aeabi_i2d>
 8002494:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002498:	f7fe f8be 	bl	8000618 <__aeabi_dmul>
 800249c:	4603      	mov	r3, r0
 800249e:	460c      	mov	r4, r1
 80024a0:	4618      	mov	r0, r3
 80024a2:	4621      	mov	r1, r4
 80024a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024a8:	f7fe f8b6 	bl	8000618 <__aeabi_dmul>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	4618      	mov	r0, r3
 80024b2:	4621      	mov	r1, r4
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <BMP280_calc_values+0x408>)
 80024ba:	f7fe f9d7 	bl	800086c <__aeabi_ddiv>
 80024be:	4603      	mov	r3, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	4625      	mov	r5, r4
 80024c4:	461c      	mov	r4, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f839 	bl	8000544 <__aeabi_i2d>
 80024d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024d6:	f7fe f89f 	bl	8000618 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	f7fd fee3 	bl	80002ac <__adddf3>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	4618      	mov	r0, r3
 80024ec:	4621      	mov	r1, r4
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <BMP280_calc_values+0x408>)
 80024f4:	f7fe f9ba 	bl	800086c <__aeabi_ddiv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var1 = (1.0+var1/32768.0) * ((double)dev->calib_param.dig_p1);
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <BMP280_calc_values+0x3fc>)
 8002506:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800250a:	f7fe f9af 	bl	800086c <__aeabi_ddiv>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4618      	mov	r0, r3
 8002514:	4621      	mov	r1, r4
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <BMP280_calc_values+0x40c>)
 800251c:	f7fd fec6 	bl	80002ac <__adddf3>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	4625      	mov	r5, r4
 8002526:	461c      	mov	r4, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	88db      	ldrh	r3, [r3, #6]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd fff9 	bl	8000524 <__aeabi_ui2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f7fe f86d 	bl	8000618 <__aeabi_dmul>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
volatile	double p = 1048576.0 - (double)dev->raw_data.pressure_raw;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ffea 	bl	8000524 <__aeabi_ui2d>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	461a      	mov	r2, r3
 8002556:	4623      	mov	r3, r4
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	4912      	ldr	r1, [pc, #72]	; (80025a8 <BMP280_calc_values+0x410>)
 800255e:	f7fd fea3 	bl	80002a8 <__aeabi_dsub>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 800256a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <BMP280_calc_values+0x414>)
 8002574:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002578:	f7fe f978 	bl	800086c <__aeabi_ddiv>
 800257c:	e018      	b.n	80025b0 <BMP280_calc_values+0x418>
 800257e:	bf00      	nop
 8002580:	40d00000 	.word	0x40d00000
 8002584:	40900000 	.word	0x40900000
 8002588:	40c00000 	.word	0x40c00000
 800258c:	40b40000 	.word	0x40b40000
 8002590:	40ef4000 	.word	0x40ef4000
 8002594:	40e00000 	.word	0x40e00000
 8002598:	40100000 	.word	0x40100000
 800259c:	40f00000 	.word	0x40f00000
 80025a0:	41200000 	.word	0x41200000
 80025a4:	3ff00000 	.word	0x3ff00000
 80025a8:	41300000 	.word	0x41300000
 80025ac:	40b00000 	.word	0x40b00000
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fd fe76 	bl	80002a8 <__aeabi_dsub>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	4618      	mov	r0, r3
 80025c2:	4621      	mov	r1, r4
 80025c4:	a358      	add	r3, pc, #352	; (adr r3, 8002728 <BMP280_calc_values+0x590>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f825 	bl	8000618 <__aeabi_dmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	460c      	mov	r4, r1
 80025d2:	4618      	mov	r0, r3
 80025d4:	4621      	mov	r1, r4
 80025d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025da:	f7fe f947 	bl	800086c <__aeabi_ddiv>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	var1 = ((double)dev->calib_param.dig_p9) * p * p / 2147483648.0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffa9 	bl	8000544 <__aeabi_i2d>
 80025f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	f7fe f80d 	bl	8000618 <__aeabi_dmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	f7fe f803 	bl	8000618 <__aeabi_dmul>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <BMP280_calc_values+0x578>)
 8002620:	f7fe f924 	bl	800086c <__aeabi_ddiv>
 8002624:	4603      	mov	r3, r0
 8002626:	460c      	mov	r4, r1
 8002628:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	var2 = p * ((double)dev->calib_param.dig_p8) / 32768.0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff86 	bl	8000544 <__aeabi_i2d>
 8002638:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800263c:	461a      	mov	r2, r3
 800263e:	4623      	mov	r3, r4
 8002640:	f7fd ffea 	bl	8000618 <__aeabi_dmul>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	4618      	mov	r0, r3
 800264a:	4621      	mov	r1, r4
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <BMP280_calc_values+0x57c>)
 8002652:	f7fe f90b 	bl	800086c <__aeabi_ddiv>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	p = p + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 800265e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002662:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002666:	f7fd fe21 	bl	80002ac <__adddf3>
 800266a:	4603      	mov	r3, r0
 800266c:	460c      	mov	r4, r1
 800266e:	4625      	mov	r5, r4
 8002670:	461c      	mov	r4, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff63 	bl	8000544 <__aeabi_i2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fd fe11 	bl	80002ac <__adddf3>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	4618      	mov	r0, r3
 8002690:	4621      	mov	r1, r4
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <BMP280_calc_values+0x580>)
 8002698:	f7fe f8e8 	bl	800086c <__aeabi_ddiv>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	4618      	mov	r0, r3
 80026a2:	4621      	mov	r1, r4
 80026a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	f7fd fdfe 	bl	80002ac <__adddf3>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	dev->data.temperature = T;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
	dev->data.pressure = p;
 80026be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80026c2:	4618      	mov	r0, r3
 80026c4:	4621      	mov	r1, r4
 80026c6:	f7fe fa7f 	bl	8000bc8 <__aeabi_d2f>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
	dev->data.altitude = 44330.0f * (1 - powf(dev->data.pressure / 101325.0f,1.0f / 5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80026d6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800271c <BMP280_calc_values+0x584>
 80026da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026de:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002720 <BMP280_calc_values+0x588>
 80026e2:	eeb0 0a66 	vmov.f32	s0, s13
 80026e6:	f013 fe33 	bl	8016350 <powf>
 80026ea:	eeb0 7a40 	vmov.f32	s14, s0
 80026ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002724 <BMP280_calc_values+0x58c>
 80026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8002704:	bf00      	nop
 8002706:	3740      	adds	r7, #64	; 0x40
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800270e:	bf00      	nop
 8002710:	41e00000 	.word	0x41e00000
 8002714:	40e00000 	.word	0x40e00000
 8002718:	40300000 	.word	0x40300000
 800271c:	47c5e680 	.word	0x47c5e680
 8002720:	3e42dcae 	.word	0x3e42dcae
 8002724:	472d2a00 	.word	0x472d2a00
 8002728:	00000000 	.word	0x00000000
 800272c:	40b86a00 	.word	0x40b86a00

08002730 <reverse>:
	else
		return 0;
}

// reverses a string 'str' of length 'len'
void reverse(char *str, int32_t len) {
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3b01      	subs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8002744:	e018      	b.n	8002778 <reverse+0x48>
		temp = str[i];
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	441a      	add	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	440b      	add	r3, r1
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
		i++;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
		j--;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3b01      	subs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	dbe2      	blt.n	8002746 <reverse+0x16>
	}
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int32_t x, char str[], int32_t d) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
	while (x) {
 800279c:	e01d      	b.n	80027da <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <intToStr+0x8c>)
 80027a2:	fb83 1302 	smull	r1, r3, r3, r2
 80027a6:	1099      	asrs	r1, r3, #2
 80027a8:	17d3      	asrs	r3, r2, #31
 80027aa:	1ac9      	subs	r1, r1, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	1ad1      	subs	r1, r2, r3
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	6179      	str	r1, [r7, #20]
 80027be:	4619      	mov	r1, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	440b      	add	r3, r1
 80027c4:	3230      	adds	r2, #48	; 0x30
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <intToStr+0x8c>)
 80027ce:	fb82 1203 	smull	r1, r2, r2, r3
 80027d2:	1092      	asrs	r2, r2, #2
 80027d4:	17db      	asrs	r3, r3, #31
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	60fb      	str	r3, [r7, #12]
	while (x) {
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1de      	bne.n	800279e <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 80027e0:	e007      	b.n	80027f2 <intToStr+0x66>
		str[i++] = '0';
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	617a      	str	r2, [r7, #20]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	2230      	movs	r2, #48	; 0x30
 80027f0:	701a      	strb	r2, [r3, #0]
	while (i < d)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dbf3      	blt.n	80027e2 <intToStr+0x56>

	reverse(str, i);
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	68b8      	ldr	r0, [r7, #8]
 80027fe:	f7ff ff97 	bl	8002730 <reverse>
	str[i] = '\0';
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	4413      	add	r3, r2
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
	return i;
 800280c:	697b      	ldr	r3, [r7, #20]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	66666667 	.word	0x66666667
 800281c:	00000000 	.word	0x00000000

08002820 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af00      	add	r7, sp, #0
 8002826:	ed87 0a03 	vstr	s0, [r7, #12]
 800282a:	60b8      	str	r0, [r7, #8]
 800282c:	6079      	str	r1, [r7, #4]
	unsigned char minus_flag = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (n < 0) {
 8002834:	edd7 7a03 	vldr	s15, [r7, #12]
 8002838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	d508      	bpl.n	8002854 <ftoa+0x34>
		minus_flag = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 8002848:	edd7 7a03 	vldr	s15, [r7, #12]
 800284c:	eef1 7a67 	vneg.f32	s15, s15
 8002850:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Extract integer part
	int ipart = (int) n;
 8002854:	edd7 7a03 	vldr	s15, [r7, #12]
 8002858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285c:	ee17 3a90 	vmov	r3, s15
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38

	// Extract floating part
	float fpart = n - (float) ipart;
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002874:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 8002878:	2200      	movs	r2, #0
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800287e:	f7ff ff85 	bl	800278c <intToStr>
 8002882:	6338      	str	r0, [r7, #48]	; 0x30

	// check for display option after point
	if (afterpoint != 0) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d030      	beq.n	80028ec <ftoa+0xcc>
		res[i] = '.';  // add dot
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	4413      	add	r3, r2
 8002890:	222e      	movs	r2, #46	; 0x2e
 8002892:	701a      	strb	r2, [r3, #0]

		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 8002894:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002896:	f7fd fe67 	bl	8000568 <__aeabi_f2d>
 800289a:	4604      	mov	r4, r0
 800289c:	460d      	mov	r5, r1
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fd fe50 	bl	8000544 <__aeabi_i2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	ec43 2b11 	vmov	d1, r2, r3
 80028ac:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80029a8 <ftoa+0x188>
 80028b0:	f013 fbde 	bl	8016070 <pow>
 80028b4:	ec53 2b10 	vmov	r2, r3, d0
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd feac 	bl	8000618 <__aeabi_dmul>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4618      	mov	r0, r3
 80028c6:	4621      	mov	r1, r4
 80028c8:	f7fe f97e 	bl	8000bc8 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34

		intToStr((int) fpart, res + i + 1, afterpoint);
 80028d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	3301      	adds	r3, #1
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	4413      	add	r3, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4619      	mov	r1, r3
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7ff ff50 	bl	800278c <intToStr>
	}

	char string[30];
	if (minus_flag == 1) {
 80028ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d132      	bne.n	800295a <ftoa+0x13a>
		memset(string, 0, 30);
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	221e      	movs	r2, #30
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f012 f958 	bl	8014bb2 <memset>
		string[0] = '-';
 8002902:	232d      	movs	r3, #45	; 0x2d
 8002904:	743b      	strb	r3, [r7, #16]
		if (n < 1.0f) {
 8002906:	edd7 7a03 	vldr	s15, [r7, #12]
 800290a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800290e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002916:	d509      	bpl.n	800292c <ftoa+0x10c>
			string[1] = '0';
 8002918:	2330      	movs	r3, #48	; 0x30
 800291a:	747b      	strb	r3, [r7, #17]
			strcpy(&string[2], res);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	3302      	adds	r3, #2
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f012 fd65 	bl	80153f4 <strcpy>
 800292a:	e006      	b.n	800293a <ftoa+0x11a>
		} else
			strcpy(&string[1], res);
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	3301      	adds	r3, #1
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f012 fd5d 	bl	80153f4 <strcpy>

		memset(res, 0, strlen(res));
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f7fd fc58 	bl	80001f0 <strlen>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	2100      	movs	r1, #0
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f012 f933 	bl	8014bb2 <memset>
		strcpy(res, string);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4619      	mov	r1, r3
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f012 fd4e 	bl	80153f4 <strcpy>
		string[0] = '0';
		strcpy(&string[1], res);
		memset(res, 0, strlen(res));
		strcpy(res, string);
	}
}
 8002958:	e021      	b.n	800299e <ftoa+0x17e>
	} else if (n < 1.0f) {
 800295a:	edd7 7a03 	vldr	s15, [r7, #12]
 800295e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	d400      	bmi.n	800296e <ftoa+0x14e>
}
 800296c:	e017      	b.n	800299e <ftoa+0x17e>
		string[0] = '0';
 800296e:	2330      	movs	r3, #48	; 0x30
 8002970:	743b      	strb	r3, [r7, #16]
		strcpy(&string[1], res);
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	3301      	adds	r3, #1
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f012 fd3a 	bl	80153f4 <strcpy>
		memset(res, 0, strlen(res));
 8002980:	68b8      	ldr	r0, [r7, #8]
 8002982:	f7fd fc35 	bl	80001f0 <strlen>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	2100      	movs	r1, #0
 800298c:	68b8      	ldr	r0, [r7, #8]
 800298e:	f012 f910 	bl	8014bb2 <memset>
		strcpy(res, string);
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4619      	mov	r1, r3
 8002998:	68b8      	ldr	r0, [r7, #8]
 800299a:	f012 fd2b 	bl	80153f4 <strcpy>
}
 800299e:	bf00      	nop
 80029a0:	3740      	adds	r7, #64	; 0x40
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdb0      	pop	{r4, r5, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	00000000 	.word	0x00000000
 80029ac:	40240000 	.word	0x40240000

080029b0 <buttonPressed>:
/*=====[Prototipos de funciones privadas]====================================*/

/*=====[Implementaciones de funciones publicas]==============================*/


void buttonPressed(button_t* config){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	config->time_down = xTaskGetTickCount();
 80029b8:	f00f fe3c 	bl	8012634 <xTaskGetTickCount>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60da      	str	r2, [r3, #12]
	config->pressed = true;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	759a      	strb	r2, [r3, #22]
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <buttonReleased>:

void buttonReleased(button_t* config){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	config->time_up = xTaskGetTickCount();
 80029d8:	f00f fe2c 	bl	8012634 <xTaskGetTickCount>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	611a      	str	r2, [r3, #16]
	if(config->time_up >= config->time_down)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d307      	bcc.n	80029fe <buttonReleased+0x2e>
		config->messure_time = config->time_up - config->time_down;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e006      	b.n	8002a0c <buttonReleased+0x3c>
	else
		config->messure_time = config->time_down - config->time_up ;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	1ad2      	subs	r2, r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
	config->released = true;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	75da      	strb	r2, [r3, #23]
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <fsmButtonInit>:

void fsmButtonInit(button_t* config){
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	719a      	strb	r2, [r3, #6]
	config->countFalling = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	751a      	strb	r2, [r3, #20]
	config->countRising = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	755a      	strb	r2, [r3, #21]
	config->pressed = false;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	759a      	strb	r2, [r3, #22]
	config->released = false;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	75da      	strb	r2, [r3, #23]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <fsmButtonError>:

void fsmButtonError(button_t* config){
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	config->fsmButtonState = STATE_BUTTON_UP;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	719a      	strb	r2, [r3, #6]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <fsmButtonUpdate>:

void fsmButtonUpdate(button_t* config) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

	switch (config->fsmButtonState) {
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	799b      	ldrb	r3, [r3, #6]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d875      	bhi.n	8002b64 <fsmButtonUpdate+0xfc>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <fsmButtonUpdate+0x18>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002abb 	.word	0x08002abb
 8002a88:	08002b01 	.word	0x08002b01
 8002a8c:	08002b1f 	.word	0x08002b1f
	case STATE_BUTTON_UP:
		config->pressed = false;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	759a      	strb	r2, [r3, #22]
		config->released = false;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	75da      	strb	r2, [r3, #23]
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	889b      	ldrh	r3, [r3, #4]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f004 f8c2 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d15c      	bne.n	8002b6c <fsmButtonUpdate+0x104>
			config->fsmButtonState = STATE_BUTTON_FALLING;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	719a      	strb	r2, [r3, #6]
		}

		break;
 8002ab8:	e058      	b.n	8002b6c <fsmButtonUpdate+0x104>
	case STATE_BUTTON_FALLING:
		if (config->countFalling >= DEBOUNCE_TIME) {
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7d1b      	ldrb	r3, [r3, #20]
 8002abe:	2b27      	cmp	r3, #39	; 0x27
 8002ac0:	d917      	bls.n	8002af2 <fsmButtonUpdate+0x8a>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_SET) {
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	889b      	ldrh	r3, [r3, #4]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f004 f8af 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <fsmButtonUpdate+0x7e>
				config->fsmButtonState = STATE_BUTTON_DOWN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	719a      	strb	r2, [r3, #6]
				buttonPressed(config);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff ff66 	bl	80029b0 <buttonPressed>
 8002ae4:	e002      	b.n	8002aec <fsmButtonUpdate+0x84>

			} else{
				config->fsmButtonState = STATE_BUTTON_UP;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	719a      	strb	r2, [r3, #6]
			}
			config->countFalling = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	751a      	strb	r2, [r3, #20]
		}
		config->countFalling++;	//1 cycle = 1ms
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7d1b      	ldrb	r3, [r3, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	751a      	strb	r2, [r3, #20]
		break;
 8002afe:	e038      	b.n	8002b72 <fsmButtonUpdate+0x10a>
	case STATE_BUTTON_DOWN:
		if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	889b      	ldrh	r3, [r3, #4]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f004 f890 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12c      	bne.n	8002b70 <fsmButtonUpdate+0x108>
			config->fsmButtonState = STATE_BUTTON_RISING;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	719a      	strb	r2, [r3, #6]
		}
		break;
 8002b1c:	e028      	b.n	8002b70 <fsmButtonUpdate+0x108>
	case STATE_BUTTON_RISING:
		if (config->countRising >= DEBOUNCE_TIME) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7d5b      	ldrb	r3, [r3, #21]
 8002b22:	2b27      	cmp	r3, #39	; 0x27
 8002b24:	d917      	bls.n	8002b56 <fsmButtonUpdate+0xee>
			if (HAL_GPIO_ReadPin(config->GPIOx, config->GPIO_Pin) == GPIO_PIN_RESET) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	889b      	ldrh	r3, [r3, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f004 f87d 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <fsmButtonUpdate+0xe2>
				config->fsmButtonState = STATE_BUTTON_UP;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	719a      	strb	r2, [r3, #6]
				buttonReleased(config);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff44 	bl	80029d0 <buttonReleased>
 8002b48:	e002      	b.n	8002b50 <fsmButtonUpdate+0xe8>
				} else{
					config->fsmButtonState = STATE_BUTTON_DOWN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	719a      	strb	r2, [r3, #6]
				}
			config->countRising = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	755a      	strb	r2, [r3, #21]
		}
		config->countRising++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7d5b      	ldrb	r3, [r3, #21]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	755a      	strb	r2, [r3, #21]
		break;
 8002b62:	e006      	b.n	8002b72 <fsmButtonUpdate+0x10a>
	default:
		fsmButtonError(config);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff71 	bl	8002a4c <fsmButtonError>
		break;
 8002b6a:	e002      	b.n	8002b72 <fsmButtonUpdate+0x10a>
		break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <fsmButtonUpdate+0x10a>
		break;
 8002b70:	bf00      	nop
	}

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop

08002b7c <vLedWrite>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
void vLedWrite(led_t led, GPIO_PinState ledON) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71bb      	strb	r3, [r7, #6]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d905      	bls.n	8002b9e <vLedWrite+0x22>
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <vLedWrite+0xc0>)
 8002b94:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <vLedWrite+0xc4>)
 8002b96:	2117      	movs	r1, #23
 8002b98:	482a      	ldr	r0, [pc, #168]	; (8002c44 <vLedWrite+0xc8>)
 8002b9a:	f011 ffa1 	bl	8014ae0 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d847      	bhi.n	8002c34 <vLedWrite+0xb8>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <vLedWrite+0x30>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bc9 	.word	0x08002bc9
 8002bb0:	08002bd9 	.word	0x08002bd9
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002bf9 	.word	0x08002bf9
 8002bbc:	08002c09 	.word	0x08002c09
 8002bc0:	08002c17 	.word	0x08002c17
 8002bc4:	08002c25 	.word	0x08002c25
		break;
	case LED_ORANGE:
		HAL_GPIO_WritePin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledON);
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd0:	481d      	ldr	r0, [pc, #116]	; (8002c48 <vLedWrite+0xcc>)
 8002bd2:	f004 f845 	bl	8006c60 <HAL_GPIO_WritePin>
			break;
 8002bd6:	e02d      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_2:
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledON);
 8002bd8:	79bb      	ldrb	r3, [r7, #6]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2120      	movs	r1, #32
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f004 f83d 	bl	8006c60 <HAL_GPIO_WritePin>
			break;
 8002be6:	e025      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, ledON);
 8002be8:	79bb      	ldrb	r3, [r7, #6]
 8002bea:	461a      	mov	r2, r3
 8002bec:	2101      	movs	r1, #1
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f004 f835 	bl	8006c60 <HAL_GPIO_WritePin>
		break;
 8002bf6:	e01d      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_4:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, ledON);
 8002bf8:	79bb      	ldrb	r3, [r7, #6]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2110      	movs	r1, #16
 8002bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c02:	f004 f82d 	bl	8006c60 <HAL_GPIO_WritePin>
		break;
 8002c06:	e015      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_5:
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, ledON);
 8002c08:	79bb      	ldrb	r3, [r7, #6]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <vLedWrite+0xcc>)
 8002c10:	f004 f826 	bl	8006c60 <HAL_GPIO_WritePin>
		break;
 8002c14:	e00e      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_6:
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, ledON);
 8002c16:	79bb      	ldrb	r3, [r7, #6]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	480b      	ldr	r0, [pc, #44]	; (8002c4c <vLedWrite+0xd0>)
 8002c1e:	f004 f81f 	bl	8006c60 <HAL_GPIO_WritePin>
		break;
 8002c22:	e007      	b.n	8002c34 <vLedWrite+0xb8>
	case LED_7:
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, ledON);
 8002c24:	79bb      	ldrb	r3, [r7, #6]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c2c:	4806      	ldr	r0, [pc, #24]	; (8002c48 <vLedWrite+0xcc>)
 8002c2e:	f004 f817 	bl	8006c60 <HAL_GPIO_WritePin>
		break;
 8002c32:	bf00      	nop
	}
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	08017c1c 	.word	0x08017c1c
 8002c40:	08017e9c 	.word	0x08017e9c
 8002c44:	08017c2c 	.word	0x08017c2c
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48001c00 	.word	0x48001c00

08002c50 <vLedToggle>:

/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 */
void vLedToggle(led_t led) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	//GPIO_InitTypeDef GPIO_InitStructure;

	// Check the id.
	assert(led < LED_COUNT);
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d905      	bls.n	8002c6c <vLedToggle+0x1c>
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <vLedToggle+0x9c>)
 8002c62:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <vLedToggle+0xa0>)
 8002c64:	2147      	movs	r1, #71	; 0x47
 8002c66:	4823      	ldr	r0, [pc, #140]	; (8002cf4 <vLedToggle+0xa4>)
 8002c68:	f011 ff3a 	bl	8014ae0 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d838      	bhi.n	8002ce4 <vLedToggle+0x94>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <vLedToggle+0x28>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c95 	.word	0x08002c95
 8002c7c:	08002ca1 	.word	0x08002ca1
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002cc5 	.word	0x08002cc5
 8002c8c:	08002ccf 	.word	0x08002ccf
 8002c90:	08002cd9 	.word	0x08002cd9
		break;
	case LED_ORANGE:
		HAL_GPIO_TogglePin(LEDO_Port, LEDO_Pin);
		break;*/
	case LED_1:
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c98:	4817      	ldr	r0, [pc, #92]	; (8002cf8 <vLedToggle+0xa8>)
 8002c9a:	f003 fff9 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002c9e:	e021      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_2:
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca6:	f003 fff3 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002caa:	e01b      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_3:
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002cac:	2101      	movs	r1, #1
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb2:	f003 ffed 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002cb6:	e015      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_4:
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002cb8:	2110      	movs	r1, #16
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f003 ffe7 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002cc2:	e00f      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_5:
		HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <vLedToggle+0xa8>)
 8002cc8:	f003 ffe2 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002ccc:	e00a      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_6:
		HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8002cce:	2104      	movs	r1, #4
 8002cd0:	480a      	ldr	r0, [pc, #40]	; (8002cfc <vLedToggle+0xac>)
 8002cd2:	f003 ffdd 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002cd6:	e005      	b.n	8002ce4 <vLedToggle+0x94>
	case LED_7:
		HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8002cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <vLedToggle+0xa8>)
 8002cde:	f003 ffd7 	bl	8006c90 <HAL_GPIO_TogglePin>
		break;
 8002ce2:	bf00      	nop
	}

}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	08017c1c 	.word	0x08017c1c
 8002cf0:	08017ea8 	.word	0x08017ea8
 8002cf4:	08017c2c 	.word	0x08017c2c
 8002cf8:	48000400 	.word	0x48000400
 8002cfc:	48001c00 	.word	0x48001c00

08002d00 <vLedRead>:
/*
 * @brief Controls various LEDs.
 * @param ledID The id number of the LED to modify.
 * @param ledON If true, the LED is on, otherwise off.
 */
GPIO_PinState vLedRead(led_t led) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState result;

	// Check the id.
	assert(led < LED_COUNT);
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d905      	bls.n	8002d1c <vLedRead+0x1c>
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <vLedRead+0xbc>)
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <vLedRead+0xc0>)
 8002d14:	2179      	movs	r1, #121	; 0x79
 8002d16:	482b      	ldr	r0, [pc, #172]	; (8002dc4 <vLedRead+0xc4>)
 8002d18:	f011 fee2 	bl	8014ae0 <__assert_func>

	// Pick the LED.
	switch (led) {
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d846      	bhi.n	8002db0 <vLedRead+0xb0>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <vLedRead+0x28>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d45 	.word	0x08002d45
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d75 	.word	0x08002d75
 8002d38:	08002d85 	.word	0x08002d85
 8002d3c:	08002d93 	.word	0x08002d93
 8002d40:	08002da1 	.word	0x08002da1
		break;
	case LED_ORANGE:
		result = HAL_GPIO_ReadPin(LEDO_Port, LEDO_Pin, ledON);
		break;*/
	case LED_1:
		result = HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin);
 8002d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d48:	481f      	ldr	r0, [pc, #124]	; (8002dc8 <vLedRead+0xc8>)
 8002d4a:	f003 ff71 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
		break;
 8002d52:	e02d      	b.n	8002db0 <vLedRead+0xb0>
	case LED_2:
		result = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8002d54:	2120      	movs	r1, #32
 8002d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5a:	f003 ff69 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]
			break;
 8002d62:	e025      	b.n	8002db0 <vLedRead+0xb0>
	case LED_3:
		result = HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin);
 8002d64:	2101      	movs	r1, #1
 8002d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6a:	f003 ff61 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	73fb      	strb	r3, [r7, #15]
		break;
 8002d72:	e01d      	b.n	8002db0 <vLedRead+0xb0>
	case LED_4:
		result = HAL_GPIO_ReadPin(LED4_GPIO_Port, LED4_Pin);
 8002d74:	2110      	movs	r1, #16
 8002d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7a:	f003 ff59 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]
		break;
 8002d82:	e015      	b.n	8002db0 <vLedRead+0xb0>
	case LED_5:
		result = HAL_GPIO_ReadPin(LED5_GPIO_Port, LED5_Pin);
 8002d84:	2104      	movs	r1, #4
 8002d86:	4810      	ldr	r0, [pc, #64]	; (8002dc8 <vLedRead+0xc8>)
 8002d88:	f003 ff52 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
		break;
 8002d90:	e00e      	b.n	8002db0 <vLedRead+0xb0>
	case LED_6:
		result = HAL_GPIO_ReadPin(LED6_GPIO_Port, LED6_Pin);
 8002d92:	2104      	movs	r1, #4
 8002d94:	480d      	ldr	r0, [pc, #52]	; (8002dcc <vLedRead+0xcc>)
 8002d96:	f003 ff4b 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]
		break;
 8002d9e:	e007      	b.n	8002db0 <vLedRead+0xb0>
	case LED_7:
		result = HAL_GPIO_ReadPin(LED7_GPIO_Port, LED7_Pin);
 8002da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da4:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <vLedRead+0xc8>)
 8002da6:	f003 ff43 	bl	8006c30 <HAL_GPIO_ReadPin>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
		break;
 8002dae:	bf00      	nop
	}
	return result;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	08017c1c 	.word	0x08017c1c
 8002dc0:	08017eb4 	.word	0x08017eb4
 8002dc4:	08017c2c 	.word	0x08017c2c
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48001c00 	.word	0x48001c00

08002dd0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002dd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ddc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002de8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002dec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002df0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002df8:	e000      	b.n	8002dfc <ITM_SendChar+0x2c>
    {
      __NOP();
 8002dfa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f9      	beq.n	8002dfa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002e06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e009      	b.n	8002e48 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ffc7 	bl	8002dd0 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf1      	blt.n	8002e34 <_write+0x16>
	return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e60:	f002 fc15 	bl	800568e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e64:	f000 f83c 	bl	8002ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e68:	f000 fcfa 	bl	8003860 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002e6c:	f000 f8e6 	bl	800303c <MX_ADC1_Init>
  MX_ADC3_Init();
 8002e70:	f000 f95e 	bl	8003130 <MX_ADC3_Init>
  MX_DCMI_Init();
 8002e74:	f000 f9c2 	bl	80031fc <MX_DCMI_Init>
  MX_FMC_Init();
 8002e78:	f000 fc44 	bl	8003704 <MX_FMC_Init>
  MX_I2C1_Init();
 8002e7c:	f000 f9f2 	bl	8003264 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002e80:	f000 fa30 	bl	80032e4 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8002e84:	f000 fa6e 	bl	8003364 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002e88:	f000 fa9a 	bl	80033c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002e8c:	f000 fac8 	bl	8003420 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8002e90:	f000 faf6 	bl	8003480 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8002e94:	f000 fb20 	bl	80034d8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8002e98:	f000 fbc6 	bl	8003628 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8002e9c:	f000 fbf4 	bl	8003688 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ea0:	f00d fee6 	bl	8010c70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <main+0x70>)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <main+0x74>)
 8002eaa:	f00d ff4b 	bl	8010d44 <osThreadNew>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <main+0x78>)
 8002eb2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initTasks();
 8002eb4:	f001 f898 	bl	8003fe8 <initTasks>


  printf("Iniciando\r\n");//simepre tiene que estar un primer printf para que funcione bien
 8002eb8:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <main+0x7c>)
 8002eba:	f012 fa63 	bl	8015384 <puts>
  printf("Espere...\r\n");
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <main+0x80>)
 8002ec0:	f012 fa60 	bl	8015384 <puts>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002ec4:	f00d ff08 	bl	8010cd8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <main+0x6c>
 8002eca:	bf00      	nop
 8002ecc:	08017ec0 	.word	0x08017ec0
 8002ed0:	08003c21 	.word	0x08003c21
 8002ed4:	2000e4e4 	.word	0x2000e4e4
 8002ed8:	08017c4c 	.word	0x08017c4c
 8002edc:	08017c58 	.word	0x08017c58

08002ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b0ba      	sub	sp, #232	; 0xe8
 8002ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002eea:	2244      	movs	r2, #68	; 0x44
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f011 fe5f 	bl	8014bb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	228c      	movs	r2, #140	; 0x8c
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f011 fe51 	bl	8014bb2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002f10:	f005 fd6e 	bl	80089f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <SystemClock_Config+0x150>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	4a45      	ldr	r2, [pc, #276]	; (8003030 <SystemClock_Config+0x150>)
 8002f1c:	f023 0318 	bic.w	r3, r3, #24
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f24:	2314      	movs	r3, #20
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f3c:	2360      	movs	r3, #96	; 0x60
 8002f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f42:	2302      	movs	r3, #2
 8002f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f54:	2328      	movs	r3, #40	; 0x28
 8002f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f66:	2302      	movs	r3, #2
 8002f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 fe9f 	bl	8008cb4 <HAL_RCC_OscConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002f7c:	f000 fe6c 	bl	8003c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f80:	230f      	movs	r3, #15
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f006 faab 	bl	8009500 <HAL_RCC_ClockConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002fb0:	f000 fe52 	bl	8003c58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <SystemClock_Config+0x154>)
 8002fb6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fdc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002fde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fe2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002fec:	2318      	movs	r3, #24
 8002fee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <SystemClock_Config+0x158>)
 8002ffe:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	4618      	mov	r0, r3
 8003004:	f006 fcb2 	bl	800996c <HAL_RCCEx_PeriphCLKConfig>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800300e:	f000 fe23 	bl	8003c58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003012:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003016:	f005 fd09 	bl	8008a2c <HAL_PWREx_ControlVoltageScaling>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8003020:	f000 fe1a 	bl	8003c58 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003024:	f007 fc60 	bl	800a8e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003028:	bf00      	nop
 800302a:	37e8      	adds	r7, #232	; 0xe8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	000868e3 	.word	0x000868e3
 8003038:	01110000 	.word	0x01110000

0800303c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003042:	f107 031c 	add.w	r3, r7, #28
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
 800305c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003060:	4a31      	ldr	r2, [pc, #196]	; (8003128 <MX_ADC1_Init+0xec>)
 8003062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <MX_ADC1_Init+0xe8>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003070:	4b2c      	ldr	r3, [pc, #176]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <MX_ADC1_Init+0xe8>)
 800307e:	2204      	movs	r2, #4
 8003080:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003082:	4b28      	ldr	r3, [pc, #160]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003084:	2200      	movs	r2, #0
 8003086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <MX_ADC1_Init+0xe8>)
 800308a:	2200      	movs	r2, #0
 800308c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003090:	2201      	movs	r2, #1
 8003092:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <MX_ADC1_Init+0xe8>)
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <MX_ADC1_Init+0xe8>)
 800309e:	2201      	movs	r2, #1
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030c4:	4817      	ldr	r0, [pc, #92]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030c6:	f002 fccd 	bl	8005a64 <HAL_ADC_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80030d0:	f000 fdc2 	bl	8003c58 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	4811      	ldr	r0, [pc, #68]	; (8003124 <MX_ADC1_Init+0xe8>)
 80030e0:	f003 f9be 	bl	8006460 <HAL_ADCEx_MultiModeConfigChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80030ea:	f000 fdb5 	bl	8003c58 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_ADC1_Init+0xf0>)
 80030f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030f2:	2306      	movs	r3, #6
 80030f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80030fa:	237f      	movs	r3, #127	; 0x7f
 80030fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80030fe:	2304      	movs	r3, #4
 8003100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4806      	ldr	r0, [pc, #24]	; (8003124 <MX_ADC1_Init+0xe8>)
 800310c:	f002 fe02 	bl	8005d14 <HAL_ADC_ConfigChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003116:	f000 fd9f 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000e7bc 	.word	0x2000e7bc
 8003128:	50040000 	.word	0x50040000
 800312c:	10c00010 	.word	0x10c00010

08003130 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003136:	463b      	mov	r3, r7
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
 8003144:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003148:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <MX_ADC3_Init+0xc4>)
 800314a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <MX_ADC3_Init+0xc0>)
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003152:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <MX_ADC3_Init+0xc0>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003166:	2204      	movs	r2, #4
 8003168:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800316a:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <MX_ADC3_Init+0xc0>)
 800316c:	2200      	movs	r2, #0
 800316e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003172:	2200      	movs	r2, #0
 8003174:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003178:	2201      	movs	r2, #1
 800317a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800317c:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <MX_ADC3_Init+0xc0>)
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003186:	2201      	movs	r2, #1
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <MX_ADC3_Init+0xc0>)
 800318c:	2200      	movs	r2, #0
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003192:	2200      	movs	r2, #0
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <MX_ADC3_Init+0xc0>)
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <MX_ADC3_Init+0xc0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <MX_ADC3_Init+0xc0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80031ac:	4810      	ldr	r0, [pc, #64]	; (80031f0 <MX_ADC3_Init+0xc0>)
 80031ae:	f002 fc59 	bl	8005a64 <HAL_ADC_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80031b8:	f000 fd4e 	bl	8003c58 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <MX_ADC3_Init+0xc8>)
 80031be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c0:	2306      	movs	r3, #6
 80031c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031c8:	237f      	movs	r3, #127	; 0x7f
 80031ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031cc:	2304      	movs	r3, #4
 80031ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80031d4:	463b      	mov	r3, r7
 80031d6:	4619      	mov	r1, r3
 80031d8:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_ADC3_Init+0xc0>)
 80031da:	f002 fd9b 	bl	8005d14 <HAL_ADC_ConfigChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80031e4:	f000 fd38 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	2000e824 	.word	0x2000e824
 80031f4:	50040200 	.word	0x50040200
 80031f8:	36902000 	.word	0x36902000

080031fc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <MX_DCMI_Init+0x60>)
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <MX_DCMI_Init+0x64>)
 8003204:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <MX_DCMI_Init+0x60>)
 8003208:	2200      	movs	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <MX_DCMI_Init+0x60>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <MX_DCMI_Init+0x60>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <MX_DCMI_Init+0x60>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <MX_DCMI_Init+0x60>)
 8003220:	2200      	movs	r2, #0
 8003222:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <MX_DCMI_Init+0x60>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <MX_DCMI_Init+0x60>)
 800322c:	2200      	movs	r2, #0
 800322e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <MX_DCMI_Init+0x60>)
 8003232:	2200      	movs	r2, #0
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <MX_DCMI_Init+0x60>)
 8003238:	2200      	movs	r2, #0
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <MX_DCMI_Init+0x60>)
 800323e:	2200      	movs	r2, #0
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <MX_DCMI_Init+0x60>)
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003248:	4804      	ldr	r0, [pc, #16]	; (800325c <MX_DCMI_Init+0x60>)
 800324a:	f003 fa97 	bl	800677c <HAL_DCMI_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8003254:	f000 fd00 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000e88c 	.word	0x2000e88c
 8003260:	50050000 	.word	0x50050000

08003264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <MX_I2C1_Init+0x74>)
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <MX_I2C1_Init+0x78>)
 800326c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_I2C1_Init+0x74>)
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <MX_I2C1_Init+0x7c>)
 8003272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003274:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <MX_I2C1_Init+0x74>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <MX_I2C1_Init+0x74>)
 800327c:	2201      	movs	r2, #1
 800327e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <MX_I2C1_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <MX_I2C1_Init+0x74>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <MX_I2C1_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_I2C1_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_I2C1_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800329e:	480e      	ldr	r0, [pc, #56]	; (80032d8 <MX_I2C1_Init+0x74>)
 80032a0:	f003 fd0f 	bl	8006cc2 <HAL_I2C_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032aa:	f000 fcd5 	bl	8003c58 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ae:	2100      	movs	r1, #0
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <MX_I2C1_Init+0x74>)
 80032b2:	f004 fa67 	bl	8007784 <HAL_I2CEx_ConfigAnalogFilter>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032bc:	f000 fccc 	bl	8003c58 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032c0:	2100      	movs	r1, #0
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_I2C1_Init+0x74>)
 80032c4:	f004 faa9 	bl	800781a <HAL_I2CEx_ConfigDigitalFilter>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 fcc3 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000e54c 	.word	0x2000e54c
 80032dc:	40005400 	.word	0x40005400
 80032e0:	10909cec 	.word	0x10909cec

080032e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <MX_I2C2_Init+0x74>)
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <MX_I2C2_Init+0x78>)
 80032ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <MX_I2C2_Init+0x74>)
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <MX_I2C2_Init+0x7c>)
 80032f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <MX_I2C2_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <MX_I2C2_Init+0x74>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <MX_I2C2_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <MX_I2C2_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <MX_I2C2_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <MX_I2C2_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <MX_I2C2_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800331e:	480e      	ldr	r0, [pc, #56]	; (8003358 <MX_I2C2_Init+0x74>)
 8003320:	f003 fccf 	bl	8006cc2 <HAL_I2C_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800332a:	f000 fc95 	bl	8003c58 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332e:	2100      	movs	r1, #0
 8003330:	4809      	ldr	r0, [pc, #36]	; (8003358 <MX_I2C2_Init+0x74>)
 8003332:	f004 fa27 	bl	8007784 <HAL_I2CEx_ConfigAnalogFilter>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800333c:	f000 fc8c 	bl	8003c58 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003340:	2100      	movs	r1, #0
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_I2C2_Init+0x74>)
 8003344:	f004 fa69 	bl	800781a <HAL_I2CEx_ConfigDigitalFilter>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800334e:	f000 fc83 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2000e598 	.word	0x2000e598
 800335c:	40005800 	.word	0x40005800
 8003360:	10909cec 	.word	0x10909cec

08003364 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <MX_LPUART1_UART_Init+0x54>)
 800336c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 8003370:	4a12      	ldr	r2, [pc, #72]	; (80033bc <MX_LPUART1_UART_Init+0x58>)
 8003372:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800337c:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 800338a:	220c      	movs	r2, #12
 800338c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 8003396:	2200      	movs	r2, #0
 8003398:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80033a0:	4804      	ldr	r0, [pc, #16]	; (80033b4 <MX_LPUART1_UART_Init+0x50>)
 80033a2:	f009 f807 	bl	800c3b4 <HAL_UART_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80033ac:	f000 fc54 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000e6b8 	.word	0x2000e6b8
 80033b8:	40008000 	.word	0x40008000
 80033bc:	00033324 	.word	0x00033324

080033c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <MX_USART1_UART_Init+0x5c>)
 80033c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033e6:	220c      	movs	r2, #12
 80033e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <MX_USART1_UART_Init+0x58>)
 80033fe:	2200      	movs	r2, #0
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <MX_USART1_UART_Init+0x58>)
 8003404:	f008 ffd6 	bl	800c3b4 <HAL_UART_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800340e:	f000 fc23 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000e8e4 	.word	0x2000e8e4
 800341c:	40013800 	.word	0x40013800

08003420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <MX_USART2_UART_Init+0x5c>)
 8003428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <MX_USART2_UART_Init+0x58>)
 800342c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MX_USART2_UART_Init+0x58>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003446:	220c      	movs	r2, #12
 8003448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <MX_USART2_UART_Init+0x58>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <MX_USART2_UART_Init+0x58>)
 800345e:	2200      	movs	r2, #0
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003462:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_USART2_UART_Init+0x58>)
 8003464:	f008 ffa6 	bl	800c3b4 <HAL_UART_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800346e:	f000 fbf3 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2000ea38 	.word	0x2000ea38
 800347c:	40004400 	.word	0x40004400

08003480 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 8003486:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <MX_QUADSPI_Init+0x54>)
 8003488:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 8003492:	2201      	movs	r2, #1
 8003494:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 800349e:	2201      	movs	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_QUADSPI_Init+0x50>)
 80034bc:	f005 fb2c 	bl	8008b18 <HAL_QSPI_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80034c6:	f000 fbc7 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000eab8 	.word	0x2000eab8
 80034d4:	a0001000 	.word	0xa0001000

080034d8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80034dc:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034de:	4a4e      	ldr	r2, [pc, #312]	; (8003618 <MX_SAI1_Init+0x140>)
 80034e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80034e8:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034f0:	2240      	movs	r2, #64	; 0x40
 80034f2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80034f4:	4b47      	ldr	r3, [pc, #284]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <MX_SAI1_Init+0x13c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003500:	4b44      	ldr	r3, [pc, #272]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800350c:	4b41      	ldr	r3, [pc, #260]	; (8003614 <MX_SAI1_Init+0x13c>)
 800350e:	2200      	movs	r2, #0
 8003510:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003512:	4b40      	ldr	r3, [pc, #256]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003518:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <MX_SAI1_Init+0x13c>)
 800351a:	4a40      	ldr	r2, [pc, #256]	; (800361c <MX_SAI1_Init+0x144>)
 800351c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <MX_SAI1_Init+0x13c>)
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003532:	2200      	movs	r2, #0
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003538:	2208      	movs	r2, #8
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <MX_SAI1_Init+0x13c>)
 800353e:	2201      	movs	r2, #1
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003544:	2200      	movs	r2, #0
 8003546:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <MX_SAI1_Init+0x13c>)
 800354a:	2200      	movs	r2, #0
 800354c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003550:	2200      	movs	r2, #0
 8003552:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8003554:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <MX_SAI1_Init+0x13c>)
 800355c:	2200      	movs	r2, #0
 800355e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003562:	2201      	movs	r2, #1
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <MX_SAI1_Init+0x13c>)
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800356c:	4829      	ldr	r0, [pc, #164]	; (8003614 <MX_SAI1_Init+0x13c>)
 800356e:	f007 fc97 	bl	800aea0 <HAL_SAI_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8003578:	f000 fb6e 	bl	8003c58 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800357c:	4b28      	ldr	r3, [pc, #160]	; (8003620 <MX_SAI1_Init+0x148>)
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <MX_SAI1_Init+0x14c>)
 8003580:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <MX_SAI1_Init+0x148>)
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <MX_SAI1_Init+0x148>)
 800358a:	2203      	movs	r2, #3
 800358c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <MX_SAI1_Init+0x148>)
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003594:	4b22      	ldr	r3, [pc, #136]	; (8003620 <MX_SAI1_Init+0x148>)
 8003596:	2200      	movs	r2, #0
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <MX_SAI1_Init+0x148>)
 800359c:	2200      	movs	r2, #0
 800359e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <MX_SAI1_Init+0x148>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <MX_SAI1_Init+0x148>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <MX_SAI1_Init+0x148>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <MX_SAI1_Init+0x148>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <MX_SAI1_Init+0x148>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <MX_SAI1_Init+0x148>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <MX_SAI1_Init+0x148>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <MX_SAI1_Init+0x148>)
 80035cc:	2208      	movs	r2, #8
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <MX_SAI1_Init+0x148>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <MX_SAI1_Init+0x148>)
 80035d8:	2200      	movs	r2, #0
 80035da:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <MX_SAI1_Init+0x148>)
 80035de:	2200      	movs	r2, #0
 80035e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <MX_SAI1_Init+0x148>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <MX_SAI1_Init+0x148>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <MX_SAI1_Init+0x148>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <MX_SAI1_Init+0x148>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <MX_SAI1_Init+0x148>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8003600:	4807      	ldr	r0, [pc, #28]	; (8003620 <MX_SAI1_Init+0x148>)
 8003602:	f007 fc4d 	bl	800aea0 <HAL_SAI_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800360c:	f000 fb24 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000e9b4 	.word	0x2000e9b4
 8003618:	40015404 	.word	0x40015404
 800361c:	0002ee00 	.word	0x0002ee00
 8003620:	2000e738 	.word	0x2000e738
 8003624:	40015424 	.word	0x40015424

08003628 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <MX_SDMMC1_SD_Init+0x5c>)
 8003630:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003632:	4b13      	ldr	r3, [pc, #76]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 8003652:	2200      	movs	r2, #0
 8003654:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8003656:	480a      	ldr	r0, [pc, #40]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 8003658:	f007 fdc6 	bl	800b1e8 <HAL_SD_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8003662:	f000 faf9 	bl	8003c58 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800366a:	4805      	ldr	r0, [pc, #20]	; (8003680 <MX_SDMMC1_SD_Init+0x58>)
 800366c:	f008 f81e 	bl	800b6ac <HAL_SD_ConfigWideBusOperation>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8003676:	f000 faef 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000e5e4 	.word	0x2000e5e4
 8003684:	40012800 	.word	0x40012800

08003688 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <MX_SPI2_Init+0x74>)
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <MX_SPI2_Init+0x78>)
 8003690:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <MX_SPI2_Init+0x74>)
 8003694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003698:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <MX_SPI2_Init+0x74>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <MX_SPI2_Init+0x74>)
 80036a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <MX_SPI2_Init+0x74>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <MX_SPI2_Init+0x74>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <MX_SPI2_Init+0x74>)
 80036b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <MX_SPI2_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <MX_SPI2_Init+0x74>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <MX_SPI2_Init+0x74>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <MX_SPI2_Init+0x74>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <MX_SPI2_Init+0x74>)
 80036d6:	2207      	movs	r2, #7
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <MX_SPI2_Init+0x74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <MX_SPI2_Init+0x74>)
 80036e2:	2208      	movs	r2, #8
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036e6:	4805      	ldr	r0, [pc, #20]	; (80036fc <MX_SPI2_Init+0x74>)
 80036e8:	f008 fb32 	bl	800bd50 <HAL_SPI_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80036f2:	f000 fab1 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2000e4e8 	.word	0x2000e4e8
 8003700:	40003800 	.word	0x40003800

08003704 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800370a:	463b      	mov	r3, r7
 800370c:	2220      	movs	r2, #32
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f011 fa4e 	bl	8014bb2 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8003716:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <MX_FMC_Init+0x150>)
 8003718:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800371c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800371e:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <MX_FMC_Init+0x150>)
 8003720:	4a4d      	ldr	r2, [pc, #308]	; (8003858 <MX_FMC_Init+0x154>)
 8003722:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <MX_FMC_Init+0x150>)
 8003726:	2202      	movs	r2, #2
 8003728:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <MX_FMC_Init+0x150>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8003730:	4b48      	ldr	r3, [pc, #288]	; (8003854 <MX_FMC_Init+0x150>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <MX_FMC_Init+0x150>)
 8003738:	2210      	movs	r2, #16
 800373a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <MX_FMC_Init+0x150>)
 800373e:	2200      	movs	r2, #0
 8003740:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8003742:	4b44      	ldr	r3, [pc, #272]	; (8003854 <MX_FMC_Init+0x150>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <MX_FMC_Init+0x150>)
 800374a:	2200      	movs	r2, #0
 800374c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <MX_FMC_Init+0x150>)
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <MX_FMC_Init+0x150>)
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <MX_FMC_Init+0x150>)
 800375c:	2200      	movs	r2, #0
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003760:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <MX_FMC_Init+0x150>)
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <MX_FMC_Init+0x150>)
 8003768:	2200      	movs	r2, #0
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <MX_FMC_Init+0x150>)
 800376e:	2200      	movs	r2, #0
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <MX_FMC_Init+0x150>)
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <MX_FMC_Init+0x150>)
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800377e:	230f      	movs	r3, #15
 8003780:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8003782:	230f      	movs	r3, #15
 8003784:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003786:	23ff      	movs	r3, #255	; 0xff
 8003788:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800378a:	230f      	movs	r3, #15
 800378c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800378e:	2310      	movs	r3, #16
 8003790:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003792:	2311      	movs	r3, #17
 8003794:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800379a:	463b      	mov	r3, r7
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	482c      	ldr	r0, [pc, #176]	; (8003854 <MX_FMC_Init+0x150>)
 80037a2:	f008 fb5f 	bl	800be64 <HAL_SRAM_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80037ac:	f000 fa54 	bl	8003c58 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <MX_FMC_Init+0x158>)
 80037b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80037b6:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <MX_FMC_Init+0x158>)
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <MX_FMC_Init+0x154>)
 80037bc:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <MX_FMC_Init+0x158>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <MX_FMC_Init+0x158>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <MX_FMC_Init+0x158>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80037d0:	4b22      	ldr	r3, [pc, #136]	; (800385c <MX_FMC_Init+0x158>)
 80037d2:	2210      	movs	r2, #16
 80037d4:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <MX_FMC_Init+0x158>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <MX_FMC_Init+0x158>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <MX_FMC_Init+0x158>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <MX_FMC_Init+0x158>)
 80037ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <MX_FMC_Init+0x158>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <MX_FMC_Init+0x158>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80037fc:	4b17      	ldr	r3, [pc, #92]	; (800385c <MX_FMC_Init+0x158>)
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <MX_FMC_Init+0x158>)
 8003804:	2200      	movs	r2, #0
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <MX_FMC_Init+0x158>)
 800380a:	2200      	movs	r2, #0
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <MX_FMC_Init+0x158>)
 8003810:	2200      	movs	r2, #0
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <MX_FMC_Init+0x158>)
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800381a:	230f      	movs	r3, #15
 800381c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800381e:	230f      	movs	r3, #15
 8003820:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8003822:	23ff      	movs	r3, #255	; 0xff
 8003824:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8003826:	230f      	movs	r3, #15
 8003828:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800382a:	2310      	movs	r3, #16
 800382c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800382e:	2311      	movs	r3, #17
 8003830:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8003836:	463b      	mov	r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	4619      	mov	r1, r3
 800383c:	4807      	ldr	r0, [pc, #28]	; (800385c <MX_FMC_Init+0x158>)
 800383e:	f008 fb11 	bl	800be64 <HAL_SRAM_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8003848:	f000 fa06 	bl	8003c58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800384c:	bf00      	nop
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	2000e668 	.word	0x2000e668
 8003858:	a0000104 	.word	0xa0000104
 800385c:	2000e964 	.word	0x2000e964

08003860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003876:	4bb3      	ldr	r3, [pc, #716]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	4ab2      	ldr	r2, [pc, #712]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003882:	4bb0      	ldr	r3, [pc, #704]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800388e:	4bad      	ldr	r3, [pc, #692]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	4aac      	ldr	r2, [pc, #688]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800389a:	4baa      	ldr	r3, [pc, #680]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038a6:	4ba7      	ldr	r3, [pc, #668]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4aa6      	ldr	r2, [pc, #664]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038ac:	f043 0310 	orr.w	r3, r3, #16
 80038b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b2:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038be:	4ba1      	ldr	r3, [pc, #644]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4aa0      	ldr	r2, [pc, #640]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ca:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	4a9a      	ldr	r2, [pc, #616]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e2:	4b98      	ldr	r3, [pc, #608]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038ee:	4b95      	ldr	r3, [pc, #596]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a94      	ldr	r2, [pc, #592]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fa:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8003906:	f005 f8f7 	bl	8008af8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800390a:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	4a8d      	ldr	r2, [pc, #564]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003910:	f043 0308 	orr.w	r3, r3, #8
 8003914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003916:	4b8b      	ldr	r3, [pc, #556]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003922:	4b88      	ldr	r3, [pc, #544]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800392e:	4b85      	ldr	r3, [pc, #532]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800393a:	4b82      	ldr	r3, [pc, #520]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	4a81      	ldr	r2, [pc, #516]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003940:	f043 0320 	orr.w	r3, r3, #32
 8003944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003946:	4b7f      	ldr	r3, [pc, #508]	; (8003b44 <MX_GPIO_Init+0x2e4>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8003952:	2201      	movs	r2, #1
 8003954:	2104      	movs	r1, #4
 8003956:	487c      	ldr	r0, [pc, #496]	; (8003b48 <MX_GPIO_Init+0x2e8>)
 8003958:	f003 f982 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800395c:	2200      	movs	r2, #0
 800395e:	2101      	movs	r1, #1
 8003960:	487a      	ldr	r0, [pc, #488]	; (8003b4c <MX_GPIO_Init+0x2ec>)
 8003962:	f003 f97d 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	2143      	movs	r1, #67	; 0x43
 800396a:	4877      	ldr	r0, [pc, #476]	; (8003b48 <MX_GPIO_Init+0x2e8>)
 800396c:	f003 f978 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Audio_RST_Pin|LEDx_Pin, GPIO_PIN_RESET);
 8003970:	2200      	movs	r2, #0
 8003972:	21c0      	movs	r1, #192	; 0xc0
 8003974:	4876      	ldr	r0, [pc, #472]	; (8003b50 <MX_GPIO_Init+0x2f0>)
 8003976:	f003 f973 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 800397a:	2201      	movs	r2, #1
 800397c:	2131      	movs	r1, #49	; 0x31
 800397e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003982:	f003 f96d 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED5_Pin|LED7_Pin, GPIO_PIN_SET);
 8003986:	2201      	movs	r2, #1
 8003988:	f241 0104 	movw	r1, #4100	; 0x1004
 800398c:	4871      	ldr	r0, [pc, #452]	; (8003b54 <MX_GPIO_Init+0x2f4>)
 800398e:	f003 f967 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003998:	486e      	ldr	r0, [pc, #440]	; (8003b54 <MX_GPIO_Init+0x2f4>)
 800399a:	f003 f961 	bl	8006c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 800399e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039a8:	2302      	movs	r3, #2
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b0:	4619      	mov	r1, r3
 80039b2:	4866      	ldr	r0, [pc, #408]	; (8003b4c <MX_GPIO_Init+0x2ec>)
 80039b4:	f002 ffaa 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80039b8:	2347      	movs	r3, #71	; 0x47
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039bc:	2301      	movs	r3, #1
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039cc:	4619      	mov	r1, r3
 80039ce:	485e      	ldr	r0, [pc, #376]	; (8003b48 <MX_GPIO_Init+0x2e8>)
 80039d0:	f002 ff9c 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80039d4:	2330      	movs	r3, #48	; 0x30
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039e4:	2305      	movs	r3, #5
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ec:	4619      	mov	r1, r3
 80039ee:	4859      	ldr	r0, [pc, #356]	; (8003b54 <MX_GPIO_Init+0x2f4>)
 80039f0:	f002 ff8c 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 80039f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a02:	2303      	movs	r3, #3
 8003a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a06:	2305      	movs	r3, #5
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a14:	f002 ff7a 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8003a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4847      	ldr	r0, [pc, #284]	; (8003b4c <MX_GPIO_Init+0x2ec>)
 8003a30:	f002 ff6c 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a44:	2303      	movs	r3, #3
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	483f      	ldr	r0, [pc, #252]	; (8003b4c <MX_GPIO_Init+0x2ec>)
 8003a50:	f002 ff5c 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8003a54:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a62:	2300      	movs	r3, #0
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a66:	2303      	movs	r3, #3
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4835      	ldr	r0, [pc, #212]	; (8003b48 <MX_GPIO_Init+0x2e8>)
 8003a72:	f002 ff4b 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8003a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a90:	4619      	mov	r1, r3
 8003a92:	4830      	ldr	r0, [pc, #192]	; (8003b54 <MX_GPIO_Init+0x2f4>)
 8003a94:	f002 ff3a 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4827      	ldr	r0, [pc, #156]	; (8003b48 <MX_GPIO_Init+0x2e8>)
 8003aac:	f002 ff2e 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_RST_Pin LEDx_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin|LEDx_Pin;
 8003ab0:	23c0      	movs	r3, #192	; 0xc0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4822      	ldr	r0, [pc, #136]	; (8003b50 <MX_GPIO_Init+0x2f0>)
 8003ac8:	f002 ff20 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8003acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <MX_GPIO_Init+0x2f8>)
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8003ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ade:	4619      	mov	r1, r3
 8003ae0:	481e      	ldr	r0, [pc, #120]	; (8003b5c <MX_GPIO_Init+0x2fc>)
 8003ae2:	f002 ff13 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8003ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8003af8:	230e      	movs	r3, #14
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b06:	f002 ff01 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin PC1 */
  GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b0e:	230b      	movs	r3, #11
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480c      	ldr	r0, [pc, #48]	; (8003b50 <MX_GPIO_Init+0x2f0>)
 8003b1e:	f002 fef5 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8003b22:	2304      	movs	r3, #4
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003b32:	2306      	movs	r3, #6
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4804      	ldr	r0, [pc, #16]	; (8003b50 <MX_GPIO_Init+0x2f0>)
 8003b3e:	f002 fee5 	bl	800690c <HAL_GPIO_Init>
 8003b42:	e00d      	b.n	8003b60 <MX_GPIO_Init+0x300>
 8003b44:	40021000 	.word	0x40021000
 8003b48:	48001c00 	.word	0x48001c00
 8003b4c:	48002000 	.word	0x48002000
 8003b50:	48000800 	.word	0x48000800
 8003b54:	48000400 	.word	0x48000400
 8003b58:	10110000 	.word	0x10110000
 8003b5c:	48001800 	.word	0x48001800

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8003b60:	2320      	movs	r3, #32
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b64:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <MX_GPIO_Init+0x3b0>)
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b70:	4619      	mov	r1, r3
 8003b72:	4828      	ldr	r0, [pc, #160]	; (8003c14 <MX_GPIO_Init+0x3b4>)
 8003b74:	f002 feca 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED4_Pin;
 8003b78:	2331      	movs	r3, #49	; 0x31
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b92:	f002 febb 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8003b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8003ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	481b      	ldr	r0, [pc, #108]	; (8003c18 <MX_GPIO_Init+0x3b8>)
 8003bac:	f002 feae 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A4_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003bb4:	230b      	movs	r3, #11
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc6:	f002 fea1 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED7_Pin;
 8003bca:	f241 0304 	movw	r3, #4100	; 0x1004
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be0:	4619      	mov	r1, r3
 8003be2:	480e      	ldr	r0, [pc, #56]	; (8003c1c <MX_GPIO_Init+0x3bc>)
 8003be4:	f002 fe92 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bee:	2311      	movs	r3, #17
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <MX_GPIO_Init+0x3bc>)
 8003c02:	f002 fe83 	bl	800690c <HAL_GPIO_Init>

}
 8003c06:	bf00      	nop
 8003c08:	3738      	adds	r7, #56	; 0x38
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	10110000 	.word	0x10110000
 8003c14:	48000800 	.word	0x48000800
 8003c18:	48001400 	.word	0x48001400
 8003c1c:	48000400 	.word	0x48000400

08003c20 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003c28:	f010 f960 	bl	8013eec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1 / portTICK_PERIOD_MS);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f00d f92f 	bl	8010e90 <osDelay>
 8003c32:	e7fb      	b.n	8003c2c <StartDefaultTask+0xc>

08003c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003c46:	f001 fd3b 	bl	80056c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40001000 	.word	0x40001000

08003c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <mqtt_Connect>:
#define BUFFERSIZE_CMD 		128

//int32_t transport_socket;


ESP8266_StatusTypeDef mqtt_Connect(void) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b0bc      	sub	sp, #240	; 0xf0
 8003c6c:	af00      	add	r7, sp, #0
	int32_t length;
	unsigned char buffer[BUFFERSIZE_CMD];
	uint8_t sessionPresent, connack_rc;
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	int32_t internalState = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	int32_t trial = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 8003c80:	4a5e      	ldr	r2, [pc, #376]	; (8003dfc <mqtt_Connect+0x194>)
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	4611      	mov	r1, r2
 8003c86:	2258      	movs	r2, #88	; 0x58
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f010 ff87 	bl	8014b9c <memcpy>

	while (trial < TRIAL_CONNECTION_TIME) {
 8003c8e:	e0aa      	b.n	8003de6 <mqtt_Connect+0x17e>
		switch (internalState) {
 8003c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	f200 80a6 	bhi.w	8003de6 <mqtt_Connect+0x17e>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <mqtt_Connect+0x38>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d93 	.word	0x08003d93
 8003cac:	08003dd3 	.word	0x08003dd3
		case 0:
			connectData.MQTTVersion = 3; //4
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	733b      	strb	r3, [r7, #12]
			connectData.clientID.cstring = "fede";
 8003cb4:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <mqtt_Connect+0x198>)
 8003cb6:	613b      	str	r3, [r7, #16]
			connectData.keepAliveInterval = CONNECTION_KEEPALIVE_S * 2;
 8003cb8:	2378      	movs	r3, #120	; 0x78
 8003cba:	83bb      	strh	r3, [r7, #28]
			//connectData.willFlag = 1;
			//connectData.will.qos = 2;
			memset((char*) buffer, '\0', BUFFERSIZE_CMD);
 8003cbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f010 ff74 	bl	8014bb2 <memset>
			length = MQTTSerialize_connect(buffer, sizeof(buffer),
 8003cca:	1d3a      	adds	r2, r7, #4
 8003ccc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fd16 	bl	8001704 <MQTTSerialize_connect>
 8003cd8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
					&connectData);

			// Send CONNECT to the mqtt broker.

			Status = ESP_SendData(buffer, length);
 8003cdc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ce0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fac8 	bl	800127c <ESP_SendData>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

			if (Status == ESP8266_OK) {
 8003cf2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <mqtt_Connect+0x9e>

				internalState++;
 8003cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			} else {
				internalState = 0;
				if(Status == ESP8266_ERROR)
					trial++;
			}
			break;
 8003d04:	e06e      	b.n	8003de4 <mqtt_Connect+0x17c>
				internalState = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				if(Status == ESP8266_ERROR)
 8003d0c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d167      	bne.n	8003de4 <mqtt_Connect+0x17c>
					trial++;
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			break;
 8003d1e:	e061      	b.n	8003de4 <mqtt_Connect+0x17c>
		case 1:
			memset((char*) buffer, '\0', BUFFERSIZE_CMD);
 8003d20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f010 ff42 	bl	8014bb2 <memset>
			uint32_t Retlength;
			Status = ESP_ReceiveData(buffer, BUFFERSIZE_CMD, &Retlength);
 8003d2e:	463a      	mov	r2, r7
 8003d30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d34:	2180      	movs	r1, #128	; 0x80
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fae0 	bl	80012fc <ESP_ReceiveData>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

			if (Status == ESP8266_OK) {
 8003d42:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d11d      	bne.n	8003d86 <mqtt_Connect+0x11e>
				if (MQTTDeserialize_connack(&sessionPresent, &connack_rc,
						buffer, strlen((char*) buffer)) != 1) {
 8003d4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fa4e 	bl	80001f0 <strlen>
 8003d54:	4603      	mov	r3, r0
				if (MQTTDeserialize_connack(&sessionPresent, &connack_rc,
 8003d56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d5a:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8003d5e:	f107 005f 	add.w	r0, r7, #95	; 0x5f
 8003d62:	f7fd fdc3 	bl	80018ec <MQTTDeserialize_connack>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d005      	beq.n	8003d78 <mqtt_Connect+0x110>
					internalState++;
 8003d6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d70:	3301      	adds	r3, #1
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
					break;
				}
			} else {
				internalState++;
			}
			break;
 8003d76:	e036      	b.n	8003de6 <mqtt_Connect+0x17e>
					Status = ESP8266_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
					trial = TRIAL_CONNECTION_TIME;
 8003d7e:	2305      	movs	r3, #5
 8003d80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					break;
 8003d84:	e02f      	b.n	8003de6 <mqtt_Connect+0x17e>
				internalState++;
 8003d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			break;
 8003d90:	e029      	b.n	8003de6 <mqtt_Connect+0x17e>

		case 2:
			memset((char*) buffer, '\0', BUFFERSIZE_CMD);
 8003d92:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f010 ff09 	bl	8014bb2 <memset>
			length = MQTTSerialize_disconnect(buffer, sizeof(buffer));
 8003da0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fe34 	bl	8001a14 <MQTTSerialize_disconnect>
 8003dac:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			Status = ESP_SendData(buffer, length);
 8003db0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003db4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fa5e 	bl	800127c <ESP_SendData>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			internalState++;
 8003dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			break;
 8003dd0:	e009      	b.n	8003de6 <mqtt_Connect+0x17e>
		case 3:
			Status = ESP8266_ConnectionClose();
 8003dd2:	f7fd f91b 	bl	800100c <ESP8266_ConnectionClose>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			trial = TRIAL_CONNECTION_TIME;//aca deberia devolver para reconectarse
 8003ddc:	2305      	movs	r3, #5
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			break;
 8003de2:	e000      	b.n	8003de6 <mqtt_Connect+0x17e>
			break;
 8003de4:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	f77f af50 	ble.w	8003c90 <mqtt_Connect+0x28>
		}

	}
	return Status;
 8003df0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	37f0      	adds	r7, #240	; 0xf0
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	08017c6c 	.word	0x08017c6c
 8003e00:	08017c64 	.word	0x08017c64

08003e04 <mqtt_Publisher>:


ESP8266_StatusTypeDef mqtt_Publisher(dataMqtt_t *data){
 8003e04:	b5b0      	push	{r4, r5, r7, lr}
 8003e06:	b0b2      	sub	sp, #200	; 0xc8
 8003e08:	af08      	add	r7, sp, #32
 8003e0a:	6078      	str	r0, [r7, #4]
	unsigned char buffer[BUFFERSIZE_CMD];
	int32_t length;
	int32_t trial = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int32_t internalState = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	// Populate the publish message.
	MQTTString topicString = MQTTString_initializer;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
	topicString.cstring = data->topic;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60bb      	str	r3, [r7, #8]
	int qos = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	memset((char*)buffer, '\0', BUFFERSIZE_CMD);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f010 feb8 	bl	8014bb2 <memset>
	//strcat((char*)data->data, "\r\n");// OJO QUE PUEDE QUE ALGUNOS ENVIOS NECESITEN ESTE \R\N
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
			topicString, (char*)data->data, strlen((char*)data->data));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f103 0414 	add.w	r4, r3, #20
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc f9cf 	bl	80001f0 <strlen>
 8003e52:	4603      	mov	r3, r0
	length = MQTTSerialize_publish(buffer, sizeof(buffer), 0, qos, 0, 0,
 8003e54:	f107 0514 	add.w	r5, r7, #20
 8003e58:	9306      	str	r3, [sp, #24]
 8003e5a:	9405      	str	r4, [sp, #20]
 8003e5c:	ac02      	add	r4, sp, #8
 8003e5e:	f107 0308 	add.w	r3, r7, #8
 8003e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7fd ff84 	bl	8001d88 <MQTTSerialize_publish>
 8003e80:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	// Send PUBLISH to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 8003e84:	e02b      	b.n	8003ede <mqtt_Publisher+0xda>
		switch (internalState) {
 8003e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <mqtt_Publisher+0x90>
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d01e      	beq.n	8003ed0 <mqtt_Publisher+0xcc>
 8003e92:	e024      	b.n	8003ede <mqtt_Publisher+0xda>
				case 0:
					Status = ESP_SendData(buffer, length);
 8003e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd f9ec 	bl	800127c <ESP_SendData>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

					if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 8003eaa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <mqtt_Publisher+0xba>
						internalState++;
 8003eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ebc:	e00f      	b.n	8003ede <mqtt_Publisher+0xda>
					} else {
						internalState = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						trial++;
 8003ec4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
				break;
 8003ece:	e006      	b.n	8003ede <mqtt_Publisher+0xda>
				case 1:
					Status = ESP8266_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					trial = TRIAL_CONNECTION_TIME;
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					break;
 8003edc:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	ddcf      	ble.n	8003e86 <mqtt_Publisher+0x82>
		}
	}
	return Status;
 8003ee6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	37a8      	adds	r7, #168	; 0xa8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bdb0      	pop	{r4, r5, r7, pc}

08003ef2 <mqtt_SubscriberPacket>:

	}
	return Status;
}

ESP8266_StatusTypeDef mqtt_SubscriberPacket(char *topic) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b0ae      	sub	sp, #184	; 0xb8
 8003ef6:	af04      	add	r7, sp, #16
 8003ef8:	6078      	str	r0, [r7, #4]
	int length;
	unsigned char buffer[128];
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	int32_t trial = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int32_t internalState = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// Populate the subscribe message.
	MQTTString topicFilters[1] = { MQTTString_initializer };
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
	topicFilters[0].cstring = topic;//"test/rgb";
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]
	int requestedQoSs[1] = { 0 };
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
	length = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1,
 8003f20:	f107 0018 	add.w	r0, r7, #24
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2301      	movs	r3, #1
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2301      	movs	r3, #1
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	f7fd ffc3 	bl	8001ec4 <MQTTSerialize_subscribe>
 8003f3e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			topicFilters, requestedQoSs);

	// Send SUBSCRIBE to the mqtt broker.
	while (trial < TRIAL_CONNECTION_TIME) {
 8003f42:	e02b      	b.n	8003f9c <mqtt_SubscriberPacket+0xaa>
		switch (internalState) {
 8003f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <mqtt_SubscriberPacket+0x60>
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d01e      	beq.n	8003f8e <mqtt_SubscriberPacket+0x9c>
 8003f50:	e024      	b.n	8003f9c <mqtt_SubscriberPacket+0xaa>
		case 0:
			Status = ESP_SendData(buffer, length);
 8003f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003f56:	f107 0318 	add.w	r3, r7, #24
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd f98d 	bl	800127c <ESP_SendData>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

			if (Status == ESP8266_OK){//(result = transport_sendPacketBuffer(transport_socket, buffer, length)) == length) {
 8003f68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <mqtt_SubscriberPacket+0x8a>
				internalState++;
 8003f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f74:	3301      	adds	r3, #1
 8003f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f7a:	e00f      	b.n	8003f9c <mqtt_SubscriberPacket+0xaa>
			} else {
				internalState = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				trial++;
 8003f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f86:	3301      	adds	r3, #1
 8003f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}
			break;
 8003f8c:	e006      	b.n	8003f9c <mqtt_SubscriberPacket+0xaa>
		case 1:
			Status = ESP8266_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			trial = TRIAL_CONNECTION_TIME;
 8003f94:	2305      	movs	r3, #5
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			break;
 8003f9a:	bf00      	nop
	while (trial < TRIAL_CONNECTION_TIME) {
 8003f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	ddcf      	ble.n	8003f44 <mqtt_SubscriberPacket+0x52>
		}
	}
	return Status;
 8003fa4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	37a8      	adds	r7, #168	; 0xa8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <mqtt_SubscriberReceive>:

	return Status;
}*/


ESP8266_StatusTypeDef mqtt_SubscriberReceive(dataMqtt_t *data){//char topic[], char *pData, uint32_t *length) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status = ESP8266_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
	//uint8_t dato[MQTT_BUFFERSIZE];


	//alocate memory for the receiving buffer
	//dato = (uint8_t*) malloc(MQTT_BUFFERSIZE * sizeof(uint8_t));
	memset(data->data, '\0', MQTT_BUFFERSIZE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f010 fdf4 	bl	8014bb2 <memset>
	ESP_ReceiveData(data->data, MQTT_BUFFERSIZE, &data->length);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f103 0014 	add.w	r0, r3, #20
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3394      	adds	r3, #148	; 0x94
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	f7fd f990 	bl	80012fc <ESP_ReceiveData>
	//strcpy(*(pData), (char*)dato);	//ACA NO ME DEVUELVE EL ARREGLO
	//*(length) = RetLength;
	//*(pData) = findIntData(topic, dato, RetLength);
	//free(dato);

	return Status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <initTasks>:
static int32_t findIntData(dataMqtt_t *data);
static void remove0(dataMqtt_t *data);



void initTasks(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8

	HAL_UART_F_Init();
 8003fee:	f001 faef 	bl	80055d0 <HAL_UART_F_Init>

	/* Led initialize */
	int i;
	uint8_t flag_error_mem = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	72fb      	strb	r3, [r7, #11]

	//led init
	for(i = 0; i < LED_COUNT; i++){
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e008      	b.n	800400e <initTasks+0x26>
		vLedWrite(i, GPIO_PIN_RESET);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fdba 	bl	8002b7c <vLedWrite>
	for(i = 0; i < LED_COUNT; i++){
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b06      	cmp	r3, #6
 8004012:	ddf3      	ble.n	8003ffc <initTasks+0x14>
	}

	//button set
	button_down.GPIOx = JOY_DOWN_GPIO_Port;
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <initTasks+0x148>)
 8004016:	4a47      	ldr	r2, [pc, #284]	; (8004134 <initTasks+0x14c>)
 8004018:	601a      	str	r2, [r3, #0]
	button_down.GPIO_Pin = JOY_DOWN_Pin;
 800401a:	4b45      	ldr	r3, [pc, #276]	; (8004130 <initTasks+0x148>)
 800401c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004020:	809a      	strh	r2, [r3, #4]

	//sensor check
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP280_dev_address, 2, 100) == HAL_OK) {
 8004022:	2364      	movs	r3, #100	; 0x64
 8004024:	2202      	movs	r2, #2
 8004026:	21ee      	movs	r1, #238	; 0xee
 8004028:	4843      	ldr	r0, [pc, #268]	; (8004138 <initTasks+0x150>)
 800402a:	f003 f8c3 	bl	80071b4 <HAL_I2C_IsDeviceReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <initTasks+0x60>
		BMP280_init(&dev);
 8004034:	4841      	ldr	r0, [pc, #260]	; (800413c <initTasks+0x154>)
 8004036:	f7fe f892 	bl	800215e <BMP280_init>
		BMP280_calc_values(&dev);
 800403a:	4840      	ldr	r0, [pc, #256]	; (800413c <initTasks+0x154>)
 800403c:	f7fe f8ac 	bl	8002198 <BMP280_calc_values>
		dev.data.init_height = dev.data.altitude;
 8004040:	4b3e      	ldr	r3, [pc, #248]	; (800413c <initTasks+0x154>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a3d      	ldr	r2, [pc, #244]	; (800413c <initTasks+0x154>)
 8004046:	6313      	str	r3, [r2, #48]	; 0x30
	}


	strcpy((char*)dataSub.topic, topic_sub2);
 8004048:	493d      	ldr	r1, [pc, #244]	; (8004140 <initTasks+0x158>)
 800404a:	483e      	ldr	r0, [pc, #248]	; (8004144 <initTasks+0x15c>)
 800404c:	f011 f9d2 	bl	80153f4 <strcpy>

	xSemaphoreMutexUart = xSemaphoreCreateMutex();
 8004050:	2001      	movs	r0, #1
 8004052:	f00d f98a 	bl	801136a <xQueueCreateMutex>
 8004056:	4602      	mov	r2, r0
 8004058:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <initTasks+0x160>)
 800405a:	601a      	str	r2, [r3, #0]
	//xSemaphorePub = xSemaphoreCreateBinary();

	xQueuePrintConsole = xQueueCreate(100, sizeof(uint8_t));
 800405c:	2200      	movs	r2, #0
 800405e:	2101      	movs	r1, #1
 8004060:	2064      	movs	r0, #100	; 0x64
 8004062:	f00d f906 	bl	8011272 <xQueueGenericCreate>
 8004066:	4602      	mov	r2, r0
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <initTasks+0x164>)
 800406a:	601a      	str	r2, [r3, #0]

	xQueueDataRx = xQueueCreate(5, sizeof(dataMqtt_t));
 800406c:	2200      	movs	r2, #0
 800406e:	2198      	movs	r1, #152	; 0x98
 8004070:	2005      	movs	r0, #5
 8004072:	f00d f8fe 	bl	8011272 <xQueueGenericCreate>
 8004076:	4602      	mov	r2, r0
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <initTasks+0x168>)
 800407a:	601a      	str	r2, [r3, #0]
	//xSemaphorePub != NULL && xSemaphoreSub != NULL &&
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <initTasks+0x160>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d043      	beq.n	800410c <initTasks+0x124>
 8004084:	4b32      	ldr	r3, [pc, #200]	; (8004150 <initTasks+0x168>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03f      	beq.n	800410c <initTasks+0x124>
 800408c:	4b2f      	ldr	r3, [pc, #188]	; (800414c <initTasks+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03b      	beq.n	800410c <initTasks+0x124>
		BaseType_t res = xTaskCreate(wifiConnectTask, "wifi", STACK_SIZE, 0,
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <initTasks+0x16c>)
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	2320      	movs	r3, #32
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <initTasks+0x170>)
 80040a4:	482d      	ldr	r0, [pc, #180]	; (800415c <initTasks+0x174>)
 80040a6:	f00d ff53 	bl	8011f50 <xTaskCreate>
 80040aa:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityAboveNormal, &wifiTask);
		if (res != pdPASS) {
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d004      	beq.n	80040bc <initTasks+0xd4>
			printf("error creacion de tarea wifi\r\n");
 80040b2:	482b      	ldr	r0, [pc, #172]	; (8004160 <initTasks+0x178>)
 80040b4:	f011 f966 	bl	8015384 <puts>
			flag_error_mem = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(ledTask, "led", 128, 0,
 80040bc:	2300      	movs	r3, #0
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	2318      	movs	r3, #24
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	2280      	movs	r2, #128	; 0x80
 80040c8:	4926      	ldr	r1, [pc, #152]	; (8004164 <initTasks+0x17c>)
 80040ca:	4827      	ldr	r0, [pc, #156]	; (8004168 <initTasks+0x180>)
 80040cc:	f00d ff40 	bl	8011f50 <xTaskCreate>
 80040d0:	6078      	str	r0, [r7, #4]
				(osPriority_t) osPriorityNormal, 0);
		if (res != pdPASS) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d004      	beq.n	80040e2 <initTasks+0xfa>
			printf("error creacion de tarea led\r\n");
 80040d8:	4824      	ldr	r0, [pc, #144]	; (800416c <initTasks+0x184>)
 80040da:	f011 f953 	bl	8015384 <puts>
			flag_error_mem = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	72fb      	strb	r3, [r7, #11]
		}
		res = xTaskCreate(printConsoleTask, "print", STACK_SIZE, 0,
 80040e2:	2300      	movs	r3, #0
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2320      	movs	r3, #32
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	491f      	ldr	r1, [pc, #124]	; (8004170 <initTasks+0x188>)
 80040f2:	4820      	ldr	r0, [pc, #128]	; (8004174 <initTasks+0x18c>)
 80040f4:	f00d ff2c 	bl	8011f50 <xTaskCreate>
 80040f8:	6078      	str	r0, [r7, #4]
						(osPriority_t) osPriorityAboveNormal, 0);
		if (res != pdPASS) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d00b      	beq.n	8004118 <initTasks+0x130>
			printf("error creacion de tarea led\r\n");
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <initTasks+0x184>)
 8004102:	f011 f93f 	bl	8015384 <puts>
			flag_error_mem = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	72fb      	strb	r3, [r7, #11]
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 800410a:	e005      	b.n	8004118 <initTasks+0x130>
			printf("error creacion de tarea analize\r\n");
			flag_error_mem = 1;

		}*/
	} else {
		printf("error creacion de semaforo\r\n");
 800410c:	481a      	ldr	r0, [pc, #104]	; (8004178 <initTasks+0x190>)
 800410e:	f011 f939 	bl	8015384 <puts>
		flag_error_mem = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	72fb      	strb	r3, [r7, #11]
 8004116:	e000      	b.n	800411a <initTasks+0x132>
	if (xSemaphoreMutexUart != NULL && xQueueDataRx != NULL && xQueuePrintConsole != NULL) {
 8004118:	bf00      	nop
	}

	if(flag_error_mem == 1)
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d103      	bne.n	8004128 <initTasks+0x140>
		vLedWrite(LED_4, GPIO_PIN_SET);
 8004120:	2101      	movs	r1, #1
 8004122:	2003      	movs	r0, #3
 8004124:	f7fe fd2a 	bl	8002b7c <vLedWrite>

}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2000ebe4 	.word	0x2000ebe4
 8004134:	48002000 	.word	0x48002000
 8004138:	2000e54c 	.word	0x2000e54c
 800413c:	2000eb08 	.word	0x2000eb08
 8004140:	20000040 	.word	0x20000040
 8004144:	2000eb40 	.word	0x2000eb40
 8004148:	2000eb3c 	.word	0x2000eb3c
 800414c:	2000ebd8 	.word	0x2000ebd8
 8004150:	2000eb04 	.word	0x2000eb04
 8004154:	2000ebe0 	.word	0x2000ebe0
 8004158:	08017cd0 	.word	0x08017cd0
 800415c:	0800417d 	.word	0x0800417d
 8004160:	08017cd8 	.word	0x08017cd8
 8004164:	08017cf8 	.word	0x08017cf8
 8004168:	08004479 	.word	0x08004479
 800416c:	08017cfc 	.word	0x08017cfc
 8004170:	08017d1c 	.word	0x08017d1c
 8004174:	0800449d 	.word	0x0800449d
 8004178:	08017d24 	.word	0x08017d24

0800417c <wifiConnectTask>:

void wifiConnectTask(void *argument) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
	//uint8_t info[60] = "Conectando a wifi, Espere por favor.. \r\n";
	ESP8266_StatusTypeDef Status;
	//ESP8266_ConnectionInfoTypeDef connection_info;
	//esp_state state_esp = INIT;
	//esp8266_broker_setup(&connection_info);
	int internalState = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
	TickType_t t = xTaskGetTickCount();
 8004188:	f00e fa54 	bl	8012634 <xTaskGetTickCount>
 800418c:	4603      	mov	r3, r0
 800418e:	60bb      	str	r3, [r7, #8]
	printf("Conectando a wifi, Espere por favor.. \r\n");
 8004190:	48a1      	ldr	r0, [pc, #644]	; (8004418 <wifiConnectTask+0x29c>)
 8004192:	f011 f8f7 	bl	8015384 <puts>
	for (;;) {
		switch (internalState) {
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b06      	cmp	r3, #6
 800419a:	f200 8138 	bhi.w	800440e <wifiConnectTask+0x292>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <wifiConnectTask+0x28>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041c1 	.word	0x080041c1
 80041a8:	080041ff 	.word	0x080041ff
 80041ac:	08004233 	.word	0x08004233
 80041b0:	08004263 	.word	0x08004263
 80041b4:	080042ab 	.word	0x080042ab
 80041b8:	080042db 	.word	0x080042db
 80041bc:	080043ed 	.word	0x080043ed
		case 0:
			// Turn the LED off.
			vLedWrite(LED_2, GPIO_PIN_RESET);
 80041c0:	2100      	movs	r1, #0
 80041c2:	2001      	movs	r0, #1
 80041c4:	f7fe fcda 	bl	8002b7c <vLedWrite>
			// Connect to wifi (restore to default first).
			Status = ESP_ConnectWifi(true, WIFI_AP_SSID, WIFI_AP_PASS);
 80041c8:	4a94      	ldr	r2, [pc, #592]	; (800441c <wifiConnectTask+0x2a0>)
 80041ca:	4995      	ldr	r1, [pc, #596]	; (8004420 <wifiConnectTask+0x2a4>)
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fc ff2b 	bl	8001028 <ESP_ConnectWifi>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <wifiConnectTask+0x70>
				// To the next state.
				internalState++;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80041e2:	2100      	movs	r1, #0
 80041e4:	2002      	movs	r0, #2
 80041e6:	f7fe fcc9 	bl	8002b7c <vLedWrite>
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}

			break;
 80041ea:	e105      	b.n	80043f8 <wifiConnectTask+0x27c>
				if (Status == ESP8266_ERROR)
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f040 8102 	bne.w	80043f8 <wifiConnectTask+0x27c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80041f4:	2101      	movs	r1, #1
 80041f6:	2002      	movs	r0, #2
 80041f8:	f7fe fcc0 	bl	8002b7c <vLedWrite>
			break;
 80041fc:	e0fc      	b.n	80043f8 <wifiConnectTask+0x27c>
		case 1:
			// Wait 1sec.
			Status = ESP_Delay(1000);
 80041fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004202:	f7fc fed5 	bl	8000fb0 <ESP_Delay>
 8004206:	4603      	mov	r3, r0
 8004208:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <wifiConnectTask+0xa4>
				// To the next state.
				internalState++;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8004216:	2100      	movs	r1, #0
 8004218:	2002      	movs	r0, #2
 800421a:	f7fe fcaf 	bl	8002b7c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 800421e:	e0ed      	b.n	80043fc <wifiConnectTask+0x280>
				if (Status == ESP8266_ERROR)
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	2b01      	cmp	r3, #1
 8004224:	f040 80ea 	bne.w	80043fc <wifiConnectTask+0x280>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8004228:	2101      	movs	r1, #1
 800422a:	2002      	movs	r0, #2
 800422c:	f7fe fca6 	bl	8002b7c <vLedWrite>
			break;
 8004230:	e0e4      	b.n	80043fc <wifiConnectTask+0x280>
		case 2:
			// Check the wifi connection status.
			Status = ESP_IsConnectedWifi();
 8004232:	f7fc ffa1 	bl	8001178 <ESP_IsConnectedWifi>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <wifiConnectTask+0xd4>
				// To the next state.
				internalState++;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3301      	adds	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 8004246:	2100      	movs	r1, #0
 8004248:	2002      	movs	r0, #2
 800424a:	f7fe fc97 	bl	8002b7c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 800424e:	e0d7      	b.n	8004400 <wifiConnectTask+0x284>
				if (Status == ESP8266_ERROR)
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80d4 	bne.w	8004400 <wifiConnectTask+0x284>
					vLedWrite(LED_3, GPIO_PIN_SET);
 8004258:	2101      	movs	r1, #1
 800425a:	2002      	movs	r0, #2
 800425c:	f7fe fc8e 	bl	8002b7c <vLedWrite>
			break;
 8004260:	e0ce      	b.n	8004400 <wifiConnectTask+0x284>
		case 3:
			// Start TCP connection.
			Status = ESP_StartTCP(network_host, network_port, network_keepalive,
 8004262:	4b70      	ldr	r3, [pc, #448]	; (8004424 <wifiConnectTask+0x2a8>)
 8004264:	8819      	ldrh	r1, [r3, #0]
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <wifiConnectTask+0x2ac>)
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	4b70      	ldr	r3, [pc, #448]	; (800442c <wifiConnectTask+0x2b0>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	486d      	ldr	r0, [pc, #436]	; (8004430 <wifiConnectTask+0x2b4>)
 800427a:	f7fc ff8b 	bl	8001194 <ESP_StartTCP>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]
					network_ssl);
			if (Status == ESP8266_OK) {
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <wifiConnectTask+0x11c>
				// To the next state.
				internalState++;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 800428e:	2100      	movs	r1, #0
 8004290:	2002      	movs	r0, #2
 8004292:	f7fe fc73 	bl	8002b7c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 8004296:	e0b5      	b.n	8004404 <wifiConnectTask+0x288>
				if (Status == ESP8266_ERROR)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 80b2 	bne.w	8004404 <wifiConnectTask+0x288>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80042a0:	2101      	movs	r1, #1
 80042a2:	2002      	movs	r0, #2
 80042a4:	f7fe fc6a 	bl	8002b7c <vLedWrite>
			break;
 80042a8:	e0ac      	b.n	8004404 <wifiConnectTask+0x288>
		case 4:
			// Send the mqtt data.
			Status = mqtt_Connect();
 80042aa:	f7ff fcdd 	bl	8003c68 <mqtt_Connect>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <wifiConnectTask+0x14c>
				internalState++;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3301      	adds	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80042be:	2100      	movs	r1, #0
 80042c0:	2002      	movs	r0, #2
 80042c2:	f7fe fc5b 	bl	8002b7c <vLedWrite>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80042c6:	e09f      	b.n	8004408 <wifiConnectTask+0x28c>
				if (Status == ESP8266_ERROR)
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f040 809c 	bne.w	8004408 <wifiConnectTask+0x28c>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80042d0:	2101      	movs	r1, #1
 80042d2:	2002      	movs	r0, #2
 80042d4:	f7fe fc52 	bl	8002b7c <vLedWrite>
			break;
 80042d8:	e096      	b.n	8004408 <wifiConnectTask+0x28c>
		case 5:
			Status = mqtt_SubscriberPacket(dataSub.topic);
 80042da:	4856      	ldr	r0, [pc, #344]	; (8004434 <wifiConnectTask+0x2b8>)
 80042dc:	f7ff fe09 	bl	8003ef2 <mqtt_SubscriberPacket>
 80042e0:	4603      	mov	r3, r0
 80042e2:	74fb      	strb	r3, [r7, #19]
			if (Status == ESP8266_OK) {
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d176      	bne.n	80043d8 <wifiConnectTask+0x25c>
				internalState++;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3301      	adds	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
				vLedWrite(LED_3, GPIO_PIN_RESET);
 80042f0:	2100      	movs	r1, #0
 80042f2:	2002      	movs	r0, #2
 80042f4:	f7fe fc42 	bl	8002b7c <vLedWrite>
				vLedWrite(LED_2, GPIO_PIN_SET);
 80042f8:	2101      	movs	r1, #1
 80042fa:	2001      	movs	r0, #1
 80042fc:	f7fe fc3e 	bl	8002b7c <vLedWrite>


				vTaskDelayUntil(&t, pdMS_TO_TICKS(5000));
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	f241 3188 	movw	r1, #5000	; 0x1388
 8004308:	4618      	mov	r0, r3
 800430a:	f00d ffd7 	bl	80122bc <vTaskDelayUntil>


				xSemaphoreSub = xSemaphoreCreateBinary();
 800430e:	2203      	movs	r2, #3
 8004310:	2100      	movs	r1, #0
 8004312:	2001      	movs	r0, #1
 8004314:	f00c ffad 	bl	8011272 <xQueueGenericCreate>
 8004318:	4602      	mov	r2, r0
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <wifiConnectTask+0x2bc>)
 800431c:	601a      	str	r2, [r3, #0]
				//xSemaphorePub = xSemaphoreCreateBinary();

				xQueueDataPub = xQueueCreate(20, sizeof(dataMqtt_t));
 800431e:	2200      	movs	r2, #0
 8004320:	2198      	movs	r1, #152	; 0x98
 8004322:	2014      	movs	r0, #20
 8004324:	f00c ffa5 	bl	8011272 <xQueueGenericCreate>
 8004328:	4602      	mov	r2, r0
 800432a:	4b44      	ldr	r3, [pc, #272]	; (800443c <wifiConnectTask+0x2c0>)
 800432c:	601a      	str	r2, [r3, #0]

				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <wifiConnectTask+0x2bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04c      	beq.n	80043d0 <wifiConnectTask+0x254>
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <wifiConnectTask+0x2c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d048      	beq.n	80043d0 <wifiConnectTask+0x254>
					BaseType_t res;
					res = xTaskCreate(subTask, "subscribe", STACK_SIZE, 0,
 800433e:	2300      	movs	r3, #0
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	2321      	movs	r3, #33	; 0x21
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	2300      	movs	r3, #0
 8004348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434c:	493c      	ldr	r1, [pc, #240]	; (8004440 <wifiConnectTask+0x2c4>)
 800434e:	483d      	ldr	r0, [pc, #244]	; (8004444 <wifiConnectTask+0x2c8>)
 8004350:	f00d fdfe 	bl	8011f50 <xTaskCreate>
 8004354:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <wifiConnectTask+0x1e6>
						printf("error creacion de tarea sub\r\n");
 800435c:	483a      	ldr	r0, [pc, #232]	; (8004448 <wifiConnectTask+0x2cc>)
 800435e:	f011 f811 	bl	8015384 <puts>
					}
					res = xTaskCreate(analizeTask, "analize data", STACK_SIZE, 0,
 8004362:	2300      	movs	r3, #0
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	2318      	movs	r3, #24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2300      	movs	r3, #0
 800436c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004370:	4936      	ldr	r1, [pc, #216]	; (800444c <wifiConnectTask+0x2d0>)
 8004372:	4837      	ldr	r0, [pc, #220]	; (8004450 <wifiConnectTask+0x2d4>)
 8004374:	f00d fdec 	bl	8011f50 <xTaskCreate>
 8004378:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d002      	beq.n	8004386 <wifiConnectTask+0x20a>
						printf("error creacion de tarea analize\r\n");
 8004380:	4834      	ldr	r0, [pc, #208]	; (8004454 <wifiConnectTask+0x2d8>)
 8004382:	f010 ffff 	bl	8015384 <puts>
					}
					res = xTaskCreate(pubTask, "publish", STACK_SIZE, 0,
 8004386:	2300      	movs	r3, #0
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	2318      	movs	r3, #24
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004394:	4930      	ldr	r1, [pc, #192]	; (8004458 <wifiConnectTask+0x2dc>)
 8004396:	4831      	ldr	r0, [pc, #196]	; (800445c <wifiConnectTask+0x2e0>)
 8004398:	f00d fdda 	bl	8011f50 <xTaskCreate>
 800439c:	60f8      	str	r0, [r7, #12]
							(osPriority_t) osPriorityNormal, 0);
					if (res != pdPASS) {
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d002      	beq.n	80043aa <wifiConnectTask+0x22e>
						printf("error creacion de tarea pub\r\n");
 80043a4:	482e      	ldr	r0, [pc, #184]	; (8004460 <wifiConnectTask+0x2e4>)
 80043a6:	f010 ffed 	bl	8015384 <puts>
					}
					res = xTaskCreate(buttonsTask, "buttons", STACK_SIZE, 0,
 80043aa:	2300      	movs	r3, #0
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2321      	movs	r3, #33	; 0x21
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b8:	492a      	ldr	r1, [pc, #168]	; (8004464 <wifiConnectTask+0x2e8>)
 80043ba:	482b      	ldr	r0, [pc, #172]	; (8004468 <wifiConnectTask+0x2ec>)
 80043bc:	f00d fdc8 	bl	8011f50 <xTaskCreate>
 80043c0:	60f8      	str	r0, [r7, #12]
									(osPriority_t) osPriorityAboveNormal1, 0);
					if (res != pdPASS) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d00f      	beq.n	80043e8 <wifiConnectTask+0x26c>
						printf("error creacion de tarea buttons\r\n");
 80043c8:	4828      	ldr	r0, [pc, #160]	; (800446c <wifiConnectTask+0x2f0>)
 80043ca:	f010 ffdb 	bl	8015384 <puts>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 80043ce:	e00b      	b.n	80043e8 <wifiConnectTask+0x26c>

					}
					//xSemaphoreGive(xSemaphorePub);
				}
				else{
					printf("error creacion de semaforo\r\n");
 80043d0:	4827      	ldr	r0, [pc, #156]	; (8004470 <wifiConnectTask+0x2f4>)
 80043d2:	f010 ffd7 	bl	8015384 <puts>
			}
			else{
				if (Status == ESP8266_ERROR)
					vLedWrite(LED_3, GPIO_PIN_SET);
			}
			break;
 80043d6:	e019      	b.n	800440c <wifiConnectTask+0x290>
				if (Status == ESP8266_ERROR)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d116      	bne.n	800440c <wifiConnectTask+0x290>
					vLedWrite(LED_3, GPIO_PIN_SET);
 80043de:	2101      	movs	r1, #1
 80043e0:	2002      	movs	r0, #2
 80043e2:	f7fe fbcb 	bl	8002b7c <vLedWrite>
			break;
 80043e6:	e011      	b.n	800440c <wifiConnectTask+0x290>
				if(xSemaphoreSub != NULL && xQueueDataPub != NULL){
 80043e8:	bf00      	nop
			break;
 80043ea:	e00f      	b.n	800440c <wifiConnectTask+0x290>
		case 6:
			vTaskDelete(wifiTask);
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <wifiConnectTask+0x2f8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f00d fef1 	bl	80121d8 <vTaskDelete>
			break;
 80043f6:	e00a      	b.n	800440e <wifiConnectTask+0x292>
			break;
 80043f8:	bf00      	nop
 80043fa:	e008      	b.n	800440e <wifiConnectTask+0x292>
			break;
 80043fc:	bf00      	nop
 80043fe:	e006      	b.n	800440e <wifiConnectTask+0x292>
			break;
 8004400:	bf00      	nop
 8004402:	e004      	b.n	800440e <wifiConnectTask+0x292>
			break;
 8004404:	bf00      	nop
 8004406:	e002      	b.n	800440e <wifiConnectTask+0x292>
			break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <wifiConnectTask+0x292>
			break;
 800440c:	bf00      	nop
		}

		osDelay(1 / portTICK_PERIOD_MS);
 800440e:	2001      	movs	r0, #1
 8004410:	f00c fd3e 	bl	8010e90 <osDelay>
		switch (internalState) {
 8004414:	e6bf      	b.n	8004196 <wifiConnectTask+0x1a>
 8004416:	bf00      	nop
 8004418:	08017d40 	.word	0x08017d40
 800441c:	08017d68 	.word	0x08017d68
 8004420:	08017d78 	.word	0x08017d78
 8004424:	20000024 	.word	0x20000024
 8004428:	20000026 	.word	0x20000026
 800442c:	20000468 	.word	0x20000468
 8004430:	20000004 	.word	0x20000004
 8004434:	2000eb40 	.word	0x2000eb40
 8004438:	2000ebfc 	.word	0x2000ebfc
 800443c:	2000ebdc 	.word	0x2000ebdc
 8004440:	08017d84 	.word	0x08017d84
 8004444:	0800452d 	.word	0x0800452d
 8004448:	08017d90 	.word	0x08017d90
 800444c:	08017db0 	.word	0x08017db0
 8004450:	080045a1 	.word	0x080045a1
 8004454:	08017dc0 	.word	0x08017dc0
 8004458:	08017de4 	.word	0x08017de4
 800445c:	080044d5 	.word	0x080044d5
 8004460:	08017dec 	.word	0x08017dec
 8004464:	08017e0c 	.word	0x08017e0c
 8004468:	08004659 	.word	0x08004659
 800446c:	08017e14 	.word	0x08017e14
 8004470:	08017d24 	.word	0x08017d24
 8004474:	2000ebe0 	.word	0x2000ebe0

08004478 <ledTask>:
	}
	vTaskDelete(wifiTask);
}

void ledTask(void *argument) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

	TickType_t t = xTaskGetTickCount();
 8004480:	f00e f8d8 	bl	8012634 <xTaskGetTickCount>
 8004484:	4603      	mov	r3, r0
 8004486:	60fb      	str	r3, [r7, #12]
	for (;;) {
		vLedToggle(LED_1);
 8004488:	2000      	movs	r0, #0
 800448a:	f7fe fbe1 	bl	8002c50 <vLedToggle>
		vTaskDelayUntil(&t, pdMS_TO_TICKS(100));
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	4618      	mov	r0, r3
 8004496:	f00d ff11 	bl	80122bc <vTaskDelayUntil>
		vLedToggle(LED_1);
 800449a:	e7f5      	b.n	8004488 <ledTask+0x10>

0800449c <printConsoleTask>:
	}
}

void printConsoleTask(void *argument){
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
/*	uint8_t dato1 = 'w';
	printf("%c",dato1);
	uint8_t a1 = 'a';
	printf("%c",(char*)a1);*/
	for(;;){
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <printConsoleTask+0x34>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f107 010f 	add.w	r1, r7, #15
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044b0:	4618      	mov	r0, r3
 80044b2:	f00d f98b 	bl	80117cc <xQueueReceive>
		taskENTER_CRITICAL();
 80044b6:	f00f fa29 	bl	801390c <vPortEnterCritical>
		printf("%c", dataQueuePrint);
 80044ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044be:	4618      	mov	r0, r3
 80044c0:	f010 fef0 	bl	80152a4 <putchar>
		taskEXIT_CRITICAL();
 80044c4:	f00f fa50 	bl	8013968 <vPortExitCritical>
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80044c8:	2001      	movs	r0, #1
 80044ca:	f00d ff71 	bl	80123b0 <vTaskDelay>
		xQueueReceive(xQueuePrintConsole, &dataQueuePrint, portMAX_DELAY);
 80044ce:	e7e9      	b.n	80044a4 <printConsoleTask+0x8>
 80044d0:	2000ebd8 	.word	0x2000ebd8

080044d4 <pubTask>:
	}
}

void pubTask(void *argument) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0aa      	sub	sp, #168	; 0xa8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	//uint32_t data = 0;
	//TickType_t t = xTaskGetTickCount();
	dataMqtt_t dataQueuePub;
	//xSemaphoreTake(xSemaphorePub, portMAX_DELAY);
	for (;;) {
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <pubTask+0x50>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f107 010c 	add.w	r1, r7, #12
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e8:	4618      	mov	r0, r3
 80044ea:	f00d f96f 	bl	80117cc <xQueueReceive>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <pubTask+0x54>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80044f6:	4618      	mov	r0, r3
 80044f8:	f00d fa44 	bl	8011984 <xQueueSemaphoreTake>
		Status = mqtt_Publisher(&dataQueuePub);
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fc7f 	bl	8003e04 <mqtt_Publisher>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		xSemaphoreGive(xSemaphoreMutexUart);
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <pubTask+0x54>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	f00c ff41 	bl	801139c <xQueueGenericSend>
		if (Status == ESP8266_OK) {

		}
		//data++;
		vTaskDelay(1 / portTICK_PERIOD_MS);
 800451a:	2001      	movs	r0, #1
 800451c:	f00d ff48 	bl	80123b0 <vTaskDelay>
		xQueueReceive(xQueueDataPub, &dataQueuePub, portMAX_DELAY);
 8004520:	e7dc      	b.n	80044dc <pubTask+0x8>
 8004522:	bf00      	nop
 8004524:	2000ebdc 	.word	0x2000ebdc
 8004528:	2000eb3c 	.word	0x2000eb3c

0800452c <subTask>:

		//vTaskDelayUntil(&t, pdMS_TO_TICKS(15000));
	}
}

void subTask(void *argument) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	ESP8266_StatusTypeDef Status;
	//uint32_t RetLength;

	for (;;) {
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <subTask+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800453c:	4618      	mov	r0, r3
 800453e:	f00d fa21 	bl	8011984 <xQueueSemaphoreTake>

		xSemaphoreTake(xSemaphoreMutexUart, 20000);
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <subTask+0x68>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f644 6120 	movw	r1, #20000	; 0x4e20
 800454a:	4618      	mov	r0, r3
 800454c:	f00d fa1a 	bl	8011984 <xQueueSemaphoreTake>
		Status = mqtt_SubscriberReceive(&dataSub); //dataSub.topic, dataSub.data, &dataSub.length);
 8004550:	4811      	ldr	r0, [pc, #68]	; (8004598 <subTask+0x6c>)
 8004552:	f7ff fd2d 	bl	8003fb0 <mqtt_SubscriberReceive>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xSemaphoreMutexUart);
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <subTask+0x68>)
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	f00c ff1a 	bl	801139c <xQueueGenericSend>

		if (Status == ESP8266_OK) {
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <subTask+0x5a>
			if (dataSub.length != 0)
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <subTask+0x6c>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <subTask+0x5a>
				xQueueSend(xQueueDataRx, &dataSub, 100);
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <subTask+0x70>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	2264      	movs	r2, #100	; 0x64
 8004580:	4905      	ldr	r1, [pc, #20]	; (8004598 <subTask+0x6c>)
 8004582:	f00c ff0b 	bl	801139c <xQueueGenericSend>
		}
		vTaskDelay(1 / portTICK_PERIOD_MS);
 8004586:	2001      	movs	r0, #1
 8004588:	f00d ff12 	bl	80123b0 <vTaskDelay>
		xSemaphoreTake(xSemaphoreSub, portMAX_DELAY);
 800458c:	e7d2      	b.n	8004534 <subTask+0x8>
 800458e:	bf00      	nop
 8004590:	2000ebfc 	.word	0x2000ebfc
 8004594:	2000eb3c 	.word	0x2000eb3c
 8004598:	2000eb40 	.word	0x2000eb40
 800459c:	2000eb04 	.word	0x2000eb04

080045a0 <analizeTask>:
	}
}

void analizeTask(void *argument) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b0a8      	sub	sp, #160	; 0xa0
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	dataMqtt_t dataQueueRx;
	for (;;) {
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <analizeTask+0xa4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f107 0108 	add.w	r1, r7, #8
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b4:	4618      	mov	r0, r3
 80045b6:	f00d f909 	bl	80117cc <xQueueReceive>
		//findIntData(&dataQueueRx);
		remove0(&dataQueueRx);
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f90e 	bl	80047e0 <remove0>
		if(strstr((char*)dataQueueRx.data, (char*)topic_sub2)!= NULL){
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	3314      	adds	r3, #20
 80045ca:	491f      	ldr	r1, [pc, #124]	; (8004648 <analizeTask+0xa8>)
 80045cc:	4618      	mov	r0, r3
 80045ce:	f010 ff19 	bl	8015404 <strstr>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <analizeTask+0x80>
			if(strstr((char*)dataQueueRx.data, (char*)TRUE_STR)!= NULL){
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	3314      	adds	r3, #20
 80045de:	491b      	ldr	r1, [pc, #108]	; (800464c <analizeTask+0xac>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f010 ff0f 	bl	8015404 <strstr>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <analizeTask+0x5c>
				vLedWrite(LED_7, GPIO_PIN_SET);
 80045ec:	2101      	movs	r1, #1
 80045ee:	2006      	movs	r0, #6
 80045f0:	f7fe fac4 	bl	8002b7c <vLedWrite>
				vLedWrite(LED_6, GPIO_PIN_SET);
 80045f4:	2101      	movs	r1, #1
 80045f6:	2005      	movs	r0, #5
 80045f8:	f7fe fac0 	bl	8002b7c <vLedWrite>
			}
			if(strstr((char*)dataQueueRx.data, (char*)FALSE_STR)!= NULL){
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	3314      	adds	r3, #20
 8004602:	4913      	ldr	r1, [pc, #76]	; (8004650 <analizeTask+0xb0>)
 8004604:	4618      	mov	r0, r3
 8004606:	f010 fefd 	bl	8015404 <strstr>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <analizeTask+0x80>
				vLedWrite(LED_7, GPIO_PIN_RESET);
 8004610:	2100      	movs	r1, #0
 8004612:	2006      	movs	r0, #6
 8004614:	f7fe fab2 	bl	8002b7c <vLedWrite>
				vLedWrite(LED_6, GPIO_PIN_RESET);
 8004618:	2100      	movs	r1, #0
 800461a:	2005      	movs	r0, #5
 800461c:	f7fe faae 	bl	8002b7c <vLedWrite>
			}
		}
		if(strstr((char*)dataQueueRx.data, (char*)topic_sub1)!= NULL){
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	3314      	adds	r3, #20
 8004626:	490b      	ldr	r1, [pc, #44]	; (8004654 <analizeTask+0xb4>)
 8004628:	4618      	mov	r0, r3
 800462a:	f010 feeb 	bl	8015404 <strstr>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <analizeTask+0x9a>
			vLedToggle(LED_2);
 8004634:	2001      	movs	r0, #1
 8004636:	f7fe fb0b 	bl	8002c50 <vLedToggle>

		}

		vTaskDelay(1 / portTICK_PERIOD_MS);
 800463a:	2001      	movs	r0, #1
 800463c:	f00d feb8 	bl	80123b0 <vTaskDelay>
		xQueueReceive(xQueueDataRx, &dataQueueRx, portMAX_DELAY);
 8004640:	e7b2      	b.n	80045a8 <analizeTask+0x8>
 8004642:	bf00      	nop
 8004644:	2000eb04 	.word	0x2000eb04
 8004648:	20000040 	.word	0x20000040
 800464c:	08017ee4 	.word	0x08017ee4
 8004650:	08017eec 	.word	0x08017eec
 8004654:	20000028 	.word	0x20000028

08004658 <buttonsTask>:
	}
}

void buttonsTask(void *argument){
 8004658:	b580      	push	{r7, lr}
 800465a:	b0aa      	sub	sp, #168	; 0xa8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]


	uint32_t cont_aux = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint32_t cont = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	dataMqtt_t data_st;
	//bool flag = false;
	fsmButtonInit(&button_down);
 800466c:	4854      	ldr	r0, [pc, #336]	; (80047c0 <buttonsTask+0x168>)
 800466e:	f7fe f9d4 	bl	8002a1a <fsmButtonInit>
	for (;;) {
		//update FSM button
		fsmButtonUpdate(&button_down);
 8004672:	4853      	ldr	r0, [pc, #332]	; (80047c0 <buttonsTask+0x168>)
 8004674:	f7fe f9f8 	bl	8002a68 <fsmButtonUpdate>

		if(button_down.released){
 8004678:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <buttonsTask+0x168>)
 800467a:	7ddb      	ldrb	r3, [r3, #23]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d04c      	beq.n	800471a <buttonsTask+0xc2>
			//flag = !flag;
			if(vLedRead(LED_6) == GPIO_PIN_RESET){
 8004680:	2005      	movs	r0, #5
 8004682:	f7fe fb3d 	bl	8002d00 <vLedRead>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <buttonsTask+0x6a>
				memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	3314      	adds	r3, #20
 8004692:	4618      	mov	r0, r3
 8004694:	f7fb fdac 	bl	80001f0 <strlen>
 8004698:	4602      	mov	r2, r0
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	3314      	adds	r3, #20
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f010 fa85 	bl	8014bb2 <memset>
				strcpy((char*)data_st.data, (char*)TRUE_STR);
 80046a8:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <buttonsTask+0x16c>)
 80046aa:	f107 031c 	add.w	r3, r7, #28
 80046ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046b2:	6018      	str	r0, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	7019      	strb	r1, [r3, #0]
				vLedWrite(LED_6, GPIO_PIN_SET);
 80046b8:	2101      	movs	r1, #1
 80046ba:	2005      	movs	r0, #5
 80046bc:	f7fe fa5e 	bl	8002b7c <vLedWrite>
 80046c0:	e019      	b.n	80046f6 <buttonsTask+0x9e>
			}
			else{
				memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	3314      	adds	r3, #20
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fb fd91 	bl	80001f0 <strlen>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	3314      	adds	r3, #20
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f010 fa6a 	bl	8014bb2 <memset>
				strcpy((char*)data_st.data, (char*)FALSE_STR);
 80046de:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <buttonsTask+0x170>)
 80046e0:	f107 031c 	add.w	r3, r7, #28
 80046e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	8019      	strh	r1, [r3, #0]
				vLedWrite(LED_6, GPIO_PIN_RESET);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2005      	movs	r0, #5
 80046f2:	f7fe fa43 	bl	8002b7c <vLedWrite>
			}
			cont = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			strcpy((char*)data_st.topic, topic_pub2);
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4932      	ldr	r1, [pc, #200]	; (80047cc <buttonsTask+0x174>)
 8004702:	4618      	mov	r0, r3
 8004704:	f010 fe76 	bl	80153f4 <strcpy>
			//data_st.length = 4;
			//intToStr(data_pub, data_st.data, data_st.length);
			xQueueSend(xQueueDataPub, &data_st, 1000);
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <buttonsTask+0x178>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	f107 0108 	add.w	r1, r7, #8
 8004710:	2300      	movs	r3, #0
 8004712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004716:	f00c fe41 	bl	801139c <xQueueGenericSend>
		}
		if(cont > 10000){
 800471a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800471e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004722:	4293      	cmp	r3, r2
 8004724:	d942      	bls.n	80047ac <buttonsTask+0x154>
			BMP280_calc_values(&dev);
 8004726:	482b      	ldr	r0, [pc, #172]	; (80047d4 <buttonsTask+0x17c>)
 8004728:	f7fd fd36 	bl	8002198 <BMP280_calc_values>
			cont = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			cont_aux++;
 8004732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004736:	3301      	adds	r3, #1
 8004738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			strcpy(data_st.topic, topic_pub1);
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	4925      	ldr	r1, [pc, #148]	; (80047d8 <buttonsTask+0x180>)
 8004742:	4618      	mov	r0, r3
 8004744:	f010 fe56 	bl	80153f4 <strcpy>
			memset((char*) data_st.data, '\0', strlen((char*)data_st.data));
 8004748:	f107 0308 	add.w	r3, r7, #8
 800474c:	3314      	adds	r3, #20
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fd4e 	bl	80001f0 <strlen>
 8004754:	4602      	mov	r2, r0
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	3314      	adds	r3, #20
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f010 fa27 	bl	8014bb2 <memset>
			ftoa(dev.data.temperature, data_st.data,2);
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <buttonsTask+0x17c>)
 8004766:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	3314      	adds	r3, #20
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	eeb0 0a67 	vmov.f32	s0, s15
 8004778:	f7fe f852 	bl	8002820 <ftoa>
			strcat((char*) data_st.data, "ºC");
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	3314      	adds	r3, #20
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fd34 	bl	80001f0 <strlen>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	f107 0308 	add.w	r3, r7, #8
 8004790:	3314      	adds	r3, #20
 8004792:	4413      	add	r3, r2
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <buttonsTask+0x184>)
 8004796:	6810      	ldr	r0, [r2, #0]
 8004798:	6018      	str	r0, [r3, #0]
			//data_st.length = sprintf((char*)data_st.data, "%f%c%c", dev.data.temperature, 'º', 'C');
			//data_st.data = dev.data.temperature;
			xQueueSend(xQueueDataPub, &data_st, 1000);
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <buttonsTask+0x178>)
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f107 0108 	add.w	r1, r7, #8
 80047a2:	2300      	movs	r3, #0
 80047a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047a8:	f00c fdf8 	bl	801139c <xQueueGenericSend>
		}
		cont++;
 80047ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b0:	3301      	adds	r3, #1
 80047b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		vTaskDelay(1 / portTICK_PERIOD_MS);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f00d fdfa 	bl	80123b0 <vTaskDelay>
		fsmButtonUpdate(&button_down);
 80047bc:	e759      	b.n	8004672 <buttonsTask+0x1a>
 80047be:	bf00      	nop
 80047c0:	2000ebe4 	.word	0x2000ebe4
 80047c4:	08017ee4 	.word	0x08017ee4
 80047c8:	08017eec 	.word	0x08017eec
 80047cc:	2000004c 	.word	0x2000004c
 80047d0:	2000ebdc 	.word	0x2000ebdc
 80047d4:	2000eb08 	.word	0x2000eb08
 80047d8:	20000034 	.word	0x20000034
 80047dc:	08017e38 	.word	0x08017e38

080047e0 <remove0>:

	}
}


static void remove0(dataMqtt_t *data){
 80047e0:	b5b0      	push	{r4, r5, r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	466b      	mov	r3, sp
 80047ea:	461d      	mov	r5, r3
	uint8_t newdata[data->length];
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80047f2:	4603      	mov	r3, r0
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	4601      	mov	r1, r0
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	00d4      	lsls	r4, r2, #3
 8004808:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800480c:	00cb      	lsls	r3, r1, #3
 800480e:	4601      	mov	r1, r0
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	f04f 0400 	mov.w	r4, #0
 800481c:	00d4      	lsls	r4, r2, #3
 800481e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	1dc3      	adds	r3, r0, #7
 8004826:	08db      	lsrs	r3, r3, #3
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	ebad 0d03 	sub.w	sp, sp, r3
 800482e:	466b      	mov	r3, sp
 8004830:	3300      	adds	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
	int i;
	int j = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
	memset((char*) newdata, '\0', data->length);
 8004838:	68b8      	ldr	r0, [r7, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004840:	461a      	mov	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	f010 f9b5 	bl	8014bb2 <memset>
	for (i = 0; i < data->length; i++) {
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	e015      	b.n	800487a <remove0+0x9a>
		if (*(data->data + i) != '\0') {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f103 0214 	add.w	r2, r3, #20
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <remove0+0x94>
			newdata[j++] = *(data->data + i);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f103 0214 	add.w	r2, r3, #20
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	441a      	add	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	6179      	str	r1, [r7, #20]
 800486e:	7811      	ldrb	r1, [r2, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < data->length; i++) {
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3301      	adds	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d8e3      	bhi.n	800484e <remove0+0x6e>
		}
	}
	//memcpy((char*)data->data, (char*)newdata, strlen(char*)newdata);
	strcpy((char*)data->data, (char*)newdata);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3314      	adds	r3, #20
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f010 fdb0 	bl	80153f4 <strcpy>
 8004894:	46ad      	mov	sp, r5
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080048a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <HAL_MspInit+0x4c>)
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <HAL_MspInit+0x4c>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6613      	str	r3, [r2, #96]	; 0x60
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <HAL_MspInit+0x4c>)
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_MspInit+0x4c>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <HAL_MspInit+0x4c>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	; 0x58
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_MspInit+0x4c>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	210f      	movs	r1, #15
 80048da:	f06f 0001 	mvn.w	r0, #1
 80048de:	f001 ff23 	bl	8006728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000

080048f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 031c 	add.w	r3, r7, #28
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_ADC_MspInit+0xec>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d12d      	bne.n	800496e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a31      	ldr	r2, [pc, #196]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 800491a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10b      	bne.n	800493c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004924:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 8004926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004928:	4a2e      	ldr	r2, [pc, #184]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 800492a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800492e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004930:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800493c:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8004954:	2318      	movs	r3, #24
 8004956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004958:	230b      	movs	r3, #11
 800495a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	4619      	mov	r1, r3
 8004966:	4820      	ldr	r0, [pc, #128]	; (80049e8 <HAL_ADC_MspInit+0xf8>)
 8004968:	f001 ffd0 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800496c:	e032      	b.n	80049d4 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC3)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <HAL_ADC_MspInit+0xfc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d12d      	bne.n	80049d4 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 8004980:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_ADC_MspInit+0xf0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10b      	bne.n	80049a2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800498a:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 8004990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a2:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_ADC_MspInit+0xf4>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80049ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80049c0:	230b      	movs	r3, #11
 80049c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80049c8:	f107 031c 	add.w	r3, r7, #28
 80049cc:	4619      	mov	r1, r3
 80049ce:	4808      	ldr	r0, [pc, #32]	; (80049f0 <HAL_ADC_MspInit+0x100>)
 80049d0:	f001 ff9c 	bl	800690c <HAL_GPIO_Init>
}
 80049d4:	bf00      	nop
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	50040000 	.word	0x50040000
 80049e0:	2000046c 	.word	0x2000046c
 80049e4:	40021000 	.word	0x40021000
 80049e8:	48000800 	.word	0x48000800
 80049ec:	50040200 	.word	0x50040200
 80049f0:	48001400 	.word	0x48001400

080049f4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	; 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049fc:	f107 031c 	add.w	r3, r7, #28
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a33      	ldr	r2, [pc, #204]	; (8004ae0 <HAL_DCMI_MspInit+0xec>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d160      	bne.n	8004ad8 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004a16:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	4a32      	ldr	r2, [pc, #200]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a64:	f043 0310 	orr.w	r3, r3, #16
 8004a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_DCMI_MspInit+0xf0>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC 
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin 
 8004a76:	f645 7320 	movw	r3, #24352	; 0x5f20
 8004a7a:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a84:	2300      	movs	r3, #0
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004a88:	230a      	movs	r3, #10
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a8c:	f107 031c 	add.w	r3, r7, #28
 8004a90:	4619      	mov	r1, r3
 8004a92:	4815      	ldr	r0, [pc, #84]	; (8004ae8 <HAL_DCMI_MspInit+0xf4>)
 8004a94:	f001 ff3a 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8004a98:	23b0      	movs	r3, #176	; 0xb0
 8004a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004aa8:	230a      	movs	r3, #10
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004aac:	f107 031c 	add.w	r3, r7, #28
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	480e      	ldr	r0, [pc, #56]	; (8004aec <HAL_DCMI_MspInit+0xf8>)
 8004ab4:	f001 ff2a 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8004ab8:	2320      	movs	r3, #32
 8004aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abc:	2302      	movs	r3, #2
 8004abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8004ac8:	230a      	movs	r3, #10
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8004acc:	f107 031c 	add.w	r3, r7, #28
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4807      	ldr	r0, [pc, #28]	; (8004af0 <HAL_DCMI_MspInit+0xfc>)
 8004ad4:	f001 ff1a 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8004ad8:	bf00      	nop
 8004ada:	3730      	adds	r7, #48	; 0x30
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	50050000 	.word	0x50050000
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	48001c00 	.word	0x48001c00
 8004aec:	48002000 	.word	0x48002000
 8004af0:	48001000 	.word	0x48001000

08004af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 031c 	add.w	r3, r7, #28
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_I2C_MspInit+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d129      	bne.n	8004b6a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b22:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8004b2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b34:	2312      	movs	r3, #18
 8004b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b40:	2304      	movs	r3, #4
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b44:	f107 031c 	add.w	r3, r7, #28
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4831      	ldr	r0, [pc, #196]	; (8004c10 <HAL_I2C_MspInit+0x11c>)
 8004b4c:	f001 fede 	bl	800690c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b50:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b68:	e049      	b.n	8004bfe <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <HAL_I2C_MspInit+0x120>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d144      	bne.n	8004bfe <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b80:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8c:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b92:	f043 0302 	orr.w	r3, r3, #2
 8004b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ba8:	2312      	movs	r3, #18
 8004baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bac:	2301      	movs	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8004bb8:	f107 031c 	add.w	r3, r7, #28
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4816      	ldr	r0, [pc, #88]	; (8004c18 <HAL_I2C_MspInit+0x124>)
 8004bc0:	f001 fea4 	bl	800690c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8004bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bca:	2312      	movs	r3, #18
 8004bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	4619      	mov	r1, r3
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <HAL_I2C_MspInit+0x11c>)
 8004be2:	f001 fe93 	bl	800690c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_I2C_MspInit+0x118>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	3730      	adds	r7, #48	; 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40005400 	.word	0x40005400
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	48000400 	.word	0x48000400
 8004c14:	40005800 	.word	0x40005800
 8004c18:	48001c00 	.word	0x48001c00

08004c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b090      	sub	sp, #64	; 0x40
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a68      	ldr	r2, [pc, #416]	; (8004ddc <HAL_UART_MspInit+0x1c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d12b      	bne.n	8004c96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004c3e:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	4a67      	ldr	r2, [pc, #412]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004c4a:	4b65      	ldr	r3, [pc, #404]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c56:	4b62      	ldr	r3, [pc, #392]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c62:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_PWREx_EnableVddIO2();
 8004c6e:	f003 ff43 	bl	8008af8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8004c72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c80:	2303      	movs	r3, #3
 8004c82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004c84:	2308      	movs	r3, #8
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4855      	ldr	r0, [pc, #340]	; (8004de4 <HAL_UART_MspInit+0x1c8>)
 8004c90:	f001 fe3c 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c94:	e09e      	b.n	8004dd4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a53      	ldr	r2, [pc, #332]	; (8004de8 <HAL_UART_MspInit+0x1cc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d14f      	bne.n	8004d40 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	4a4e      	ldr	r2, [pc, #312]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004caa:	6613      	str	r3, [r2, #96]	; 0x60
 8004cac:	4b4c      	ldr	r3, [pc, #304]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb8:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	4a48      	ldr	r2, [pc, #288]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc4:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cd0:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	4a42      	ldr	r2, [pc, #264]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8004ce8:	f003 ff06 	bl	8008af8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8004cec:	2340      	movs	r3, #64	; 0x40
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8004d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d04:	4619      	mov	r1, r3
 8004d06:	4839      	ldr	r0, [pc, #228]	; (8004dec <HAL_UART_MspInit+0x1d0>)
 8004d08:	f001 fe00 	bl	800690c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8004d0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d12:	2302      	movs	r3, #2
 8004d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d26:	4619      	mov	r1, r3
 8004d28:	482e      	ldr	r0, [pc, #184]	; (8004de4 <HAL_UART_MspInit+0x1c8>)
 8004d2a:	f001 fdef 	bl	800690c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2105      	movs	r1, #5
 8004d32:	2025      	movs	r0, #37	; 0x25
 8004d34:	f001 fcf8 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d38:	2025      	movs	r0, #37	; 0x25
 8004d3a:	f001 fd11 	bl	8006760 <HAL_NVIC_EnableIRQ>
}
 8004d3e:	e049      	b.n	8004dd4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <HAL_UART_MspInit+0x1d4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d144      	bne.n	8004dd4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d4a:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	6593      	str	r3, [r2, #88]	; 0x58
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d62:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_UART_MspInit+0x1c4>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8004d92:	2340      	movs	r3, #64	; 0x40
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004da2:	2307      	movs	r3, #7
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8004da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004daa:	4619      	mov	r1, r3
 8004dac:	4811      	ldr	r0, [pc, #68]	; (8004df4 <HAL_UART_MspInit+0x1d8>)
 8004dae:	f001 fdad 	bl	800690c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8004db2:	2304      	movs	r3, #4
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db6:	2302      	movs	r3, #2
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dc2:	2307      	movs	r3, #7
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dd0:	f001 fd9c 	bl	800690c <HAL_GPIO_Init>
}
 8004dd4:	bf00      	nop
 8004dd6:	3740      	adds	r7, #64	; 0x40
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40008000 	.word	0x40008000
 8004de0:	40021000 	.word	0x40021000
 8004de4:	48001800 	.word	0x48001800
 8004de8:	40013800 	.word	0x40013800
 8004dec:	48000400 	.word	0x48000400
 8004df0:	40004400 	.word	0x40004400
 8004df4:	48000c00 	.word	0x48000c00

08004df8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <HAL_QSPI_MspInit+0xb8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d145      	bne.n	8004ea6 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004e1a:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e24:	6513      	str	r3, [r2, #80]	; 0x50
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_QSPI_MspInit+0xbc>)
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8004e62:	f640 0303 	movw	r3, #2051	; 0x803
 8004e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e70:	2303      	movs	r3, #3
 8004e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004e74:	230a      	movs	r3, #10
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <HAL_QSPI_MspInit+0xc0>)
 8004e80:	f001 fd44 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8004e84:	23c8      	movs	r3, #200	; 0xc8
 8004e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e90:	2303      	movs	r3, #3
 8004e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004e94:	230a      	movs	r3, #10
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea2:	f001 fd33 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004ea6:	bf00      	nop
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	a0001000 	.word	0xa0001000
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	48000400 	.word	0x48000400

08004ebc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	; (8004f70 <HAL_SD_MspInit+0xb4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d144      	bne.n	8004f68 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004ede:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f1a:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <HAL_SD_MspInit+0xb8>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8004f26:	2304      	movs	r3, #4
 8004f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f32:	2303      	movs	r3, #3
 8004f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f36:	230c      	movs	r3, #12
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8004f3a:	f107 0314 	add.w	r3, r7, #20
 8004f3e:	4619      	mov	r1, r3
 8004f40:	480d      	ldr	r0, [pc, #52]	; (8004f78 <HAL_SD_MspInit+0xbc>)
 8004f42:	f001 fce3 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin 
 8004f46:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004f4a:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f54:	2303      	movs	r3, #3
 8004f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004f58:	230c      	movs	r3, #12
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	4619      	mov	r1, r3
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <HAL_SD_MspInit+0xc0>)
 8004f64:	f001 fcd2 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004f68:	bf00      	nop
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40012800 	.word	0x40012800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	48000c00 	.word	0x48000c00
 8004f7c:	48000800 	.word	0x48000800

08004f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <HAL_SPI_MspInit+0xb4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d144      	bne.n	800502c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
 8004fae:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <HAL_SPI_MspInit+0xb8>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8004fea:	2306      	movs	r3, #6
 8004fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ffa:	2305      	movs	r3, #5
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	480d      	ldr	r0, [pc, #52]	; (800503c <HAL_SPI_MspInit+0xbc>)
 8005006:	f001 fc81 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005010:	2302      	movs	r3, #2
 8005012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005018:	2303      	movs	r3, #3
 800501a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800501c:	2305      	movs	r3, #5
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	4619      	mov	r1, r3
 8005026:	4806      	ldr	r0, [pc, #24]	; (8005040 <HAL_SPI_MspInit+0xc0>)
 8005028:	f001 fc70 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800502c:	bf00      	nop
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40003800 	.word	0x40003800
 8005038:	40021000 	.word	0x40021000
 800503c:	48002000 	.word	0x48002000
 8005040:	48000400 	.word	0x48000400

08005044 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800504a:	1d3b      	adds	r3, r7, #4
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_FMC_MspInit+0xc4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d14f      	bne.n	8005100 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8005060:	4b29      	ldr	r3, [pc, #164]	; (8005108 <HAL_FMC_MspInit+0xc4>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_FMC_MspInit+0xc8>)
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_FMC_MspInit+0xc8>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6513      	str	r3, [r2, #80]	; 0x50
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <HAL_FMC_MspInit+0xc8>)
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin 
 800507e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005082:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin 
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005084:	2302      	movs	r3, #2
 8005086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	2303      	movs	r3, #3
 800508e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005090:	230c      	movs	r3, #12
 8005092:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	4619      	mov	r1, r3
 8005098:	481d      	ldr	r0, [pc, #116]	; (8005110 <HAL_FMC_MspInit+0xcc>)
 800509a:	f001 fc37 	bl	800690c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin 
 800509e:	f240 233f 	movw	r3, #575	; 0x23f
 80050a2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a4:	2302      	movs	r3, #2
 80050a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ac:	2303      	movs	r3, #3
 80050ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050b0:	230c      	movs	r3, #12
 80050b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4816      	ldr	r0, [pc, #88]	; (8005114 <HAL_FMC_MspInit+0xd0>)
 80050ba:	f001 fc27 	bl	800690c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin 
 80050be:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 80050c2:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin 
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin 
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c4:	2302      	movs	r3, #2
 80050c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050cc:	2303      	movs	r3, #3
 80050ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050d0:	230c      	movs	r3, #12
 80050d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	480f      	ldr	r0, [pc, #60]	; (8005118 <HAL_FMC_MspInit+0xd4>)
 80050da:	f001 fc17 	bl	800690c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin 
 80050de:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80050e2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin 
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e4:	2302      	movs	r3, #2
 80050e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050f0:	230c      	movs	r3, #12
 80050f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <HAL_FMC_MspInit+0xd8>)
 80050fa:	f001 fc07 	bl	800690c <HAL_GPIO_Init>
 80050fe:	e000      	b.n	8005102 <HAL_FMC_MspInit+0xbe>
    return;
 8005100:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000470 	.word	0x20000470
 800510c:	40021000 	.word	0x40021000
 8005110:	48001000 	.word	0x48001000
 8005114:	48001800 	.word	0x48001800
 8005118:	48000c00 	.word	0x48000c00
 800511c:	48001400 	.word	0x48001400

08005120 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005128:	f7ff ff8c 	bl	8005044 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a33      	ldr	r2, [pc, #204]	; (8005210 <HAL_SAI_MspInit+0xdc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d135      	bne.n	80051b2 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8005146:	4b33      	ldr	r3, [pc, #204]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800514e:	4b32      	ldr	r3, [pc, #200]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 8005150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005152:	4a31      	ldr	r2, [pc, #196]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 8005154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005158:	6613      	str	r3, [r2, #96]	; 0x60
 800515a:	4b2f      	ldr	r3, [pc, #188]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 800515c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8005166:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 800516e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8005170:	2354      	movs	r3, #84	; 0x54
 8005172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005174:	2302      	movs	r3, #2
 8005176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517c:	2300      	movs	r3, #0
 800517e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8005180:	230d      	movs	r3, #13
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4619      	mov	r1, r3
 800518a:	4824      	ldr	r0, [pc, #144]	; (800521c <HAL_SAI_MspInit+0xe8>)
 800518c:	f001 fbbe 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80051a2:	230d      	movs	r3, #13
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	481c      	ldr	r0, [pc, #112]	; (8005220 <HAL_SAI_MspInit+0xec>)
 80051ae:	f001 fbad 	bl	800690c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_SAI_MspInit+0xf0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d124      	bne.n	8005206 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80051bc:	4b15      	ldr	r3, [pc, #84]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80051c4:	4b14      	ldr	r3, [pc, #80]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 80051ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ce:	6613      	str	r3, [r2, #96]	; 0x60
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <HAL_SAI_MspInit+0xe4>)
 80051d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <HAL_SAI_MspInit+0xe0>)
 80051e4:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 80051e6:	2308      	movs	r3, #8
 80051e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ea:	2302      	movs	r3, #2
 80051ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f2:	2300      	movs	r3, #0
 80051f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80051f6:	230d      	movs	r3, #13
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f107 0314 	add.w	r3, r7, #20
 80051fe:	4619      	mov	r1, r3
 8005200:	4806      	ldr	r0, [pc, #24]	; (800521c <HAL_SAI_MspInit+0xe8>)
 8005202:	f001 fb83 	bl	800690c <HAL_GPIO_Init>

    }
}
 8005206:	bf00      	nop
 8005208:	3728      	adds	r7, #40	; 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40015404 	.word	0x40015404
 8005214:	20000474 	.word	0x20000474
 8005218:	40021000 	.word	0x40021000
 800521c:	48001000 	.word	0x48001000
 8005220:	48000400 	.word	0x48000400
 8005224:	40015424 	.word	0x40015424

08005228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	; 0x30
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8005238:	2200      	movs	r2, #0
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	2036      	movs	r0, #54	; 0x36
 800523e:	f001 fa73 	bl	8006728 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8005242:	2036      	movs	r0, #54	; 0x36
 8005244:	f001 fa8c 	bl	8006760 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005248:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <HAL_InitTick+0x9c>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <HAL_InitTick+0x9c>)
 800524e:	f043 0310 	orr.w	r3, r3, #16
 8005252:	6593      	str	r3, [r2, #88]	; 0x58
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_InitTick+0x9c>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005260:	f107 0210 	add.w	r2, r7, #16
 8005264:	f107 0314 	add.w	r3, r7, #20
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f004 faec 	bl	8009848 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005270:	f004 fabe 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 8005274:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <HAL_InitTick+0xa0>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0c9b      	lsrs	r3, r3, #18
 8005280:	3b01      	subs	r3, #1
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_InitTick+0xa4>)
 8005286:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <HAL_InitTick+0xa8>)
 8005288:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <HAL_InitTick+0xa4>)
 800528c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005290:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005292:	4a0e      	ldr	r2, [pc, #56]	; (80052cc <HAL_InitTick+0xa4>)
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <HAL_InitTick+0xa4>)
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_InitTick+0xa4>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80052a4:	4809      	ldr	r0, [pc, #36]	; (80052cc <HAL_InitTick+0xa4>)
 80052a6:	f006 fe25 	bl	800bef4 <HAL_TIM_Base_Init>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80052b0:	4806      	ldr	r0, [pc, #24]	; (80052cc <HAL_InitTick+0xa4>)
 80052b2:	f006 fe55 	bl	800bf60 <HAL_TIM_Base_Start_IT>
 80052b6:	4603      	mov	r3, r0
 80052b8:	e000      	b.n	80052bc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3730      	adds	r7, #48	; 0x30
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	431bde83 	.word	0x431bde83
 80052cc:	2000ec00 	.word	0x2000ec00
 80052d0:	40001000 	.word	0x40001000

080052d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	vLedWrite(LED_5, GPIO_PIN_SET);
 80052e6:	2101      	movs	r1, #1
 80052e8:	2004      	movs	r0, #4
 80052ea:	f7fd fc47 	bl	8002b7c <vLedWrite>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ee:	e7fe      	b.n	80052ee <HardFault_Handler+0xc>

080052f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052f4:	e7fe      	b.n	80052f4 <MemManage_Handler+0x4>

080052f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052fa:	e7fe      	b.n	80052fa <BusFault_Handler+0x4>

080052fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005300:	e7fe      	b.n	8005300 <UsageFault_Handler+0x4>

08005302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005314:	4802      	ldr	r0, [pc, #8]	; (8005320 <USART1_IRQHandler+0x10>)
 8005316:	f007 f999 	bl	800c64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	2000e8e4 	.word	0x2000e8e4

08005324 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005328:	4802      	ldr	r0, [pc, #8]	; (8005334 <TIM6_DAC_IRQHandler+0x10>)
 800532a:	f006 fe43 	bl	800bfb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	2000ec00 	.word	0x2000ec00

08005338 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800533c:	4802      	ldr	r0, [pc, #8]	; (8005348 <OTG_FS_IRQHandler+0x10>)
 800533e:	f002 fc0b 	bl	8007b58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005342:	bf00      	nop
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20010148 	.word	0x20010148

0800534c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
	return 1;
 8005350:	2301      	movs	r3, #1
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <_kill>:

int _kill(int pid, int sig)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005366:	f00f fbdd 	bl	8014b24 <__errno>
 800536a:	4602      	mov	r2, r0
 800536c:	2316      	movs	r3, #22
 800536e:	6013      	str	r3, [r2, #0]
	return -1;
 8005370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_exit>:

void _exit (int status)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ffe7 	bl	800535c <_kill>
	while (1) {}		/* Make sure we hang here */
 800538e:	e7fe      	b.n	800538e <_exit+0x12>

08005390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e00a      	b.n	80053b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053a2:	f3af 8000 	nop.w
 80053a6:	4601      	mov	r1, r0
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	60ba      	str	r2, [r7, #8]
 80053ae:	b2ca      	uxtb	r2, r1
 80053b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	3301      	adds	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	dbf0      	blt.n	80053a2 <_read+0x12>
	}

return len;
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
	return -1;
 80053d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053f2:	605a      	str	r2, [r3, #4]
	return 0;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <_isatty>:

int _isatty(int file)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
	return 1;
 800540a:	2301      	movs	r3, #1
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
	return 0;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <_sbrk+0x50>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <_sbrk+0x16>
		heap_end = &end;
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <_sbrk+0x50>)
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <_sbrk+0x54>)
 8005448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <_sbrk+0x50>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <_sbrk+0x50>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	466a      	mov	r2, sp
 800545a:	4293      	cmp	r3, r2
 800545c:	d907      	bls.n	800546e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800545e:	f00f fb61 	bl	8014b24 <__errno>
 8005462:	4602      	mov	r2, r0
 8005464:	230c      	movs	r3, #12
 8005466:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546c:	e006      	b.n	800547c <_sbrk+0x48>
	}

	heap_end += incr;
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <_sbrk+0x50>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	4a03      	ldr	r2, [pc, #12]	; (8005484 <_sbrk+0x50>)
 8005478:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000478 	.word	0x20000478
 8005488:	20010558 	.word	0x20010558

0800548c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <SystemInit+0x64>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <SystemInit+0x64>)
 8005498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800549c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <SystemInit+0x68>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <SystemInit+0x68>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <SystemInit+0x68>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <SystemInit+0x68>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <SystemInit+0x68>)
 80054b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80054bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80054c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <SystemInit+0x68>)
 80054c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <SystemInit+0x68>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <SystemInit+0x68>)
 80054d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <SystemInit+0x68>)
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <SystemInit+0x64>)
 80054de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054e2:	609a      	str	r2, [r3, #8]
#endif
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000ed00 	.word	0xe000ed00
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Callback when new data is received on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	static BaseType_t xHigherPriorityTaskWoken;

	xHigherPriorityTaskWoken = pdFALSE;
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_UART_RxCpltCallback+0xac>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

	if (huart->Instance == USART1) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <HAL_UART_RxCpltCallback+0xb0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d138      	bne.n	8005582 <HAL_UART_RxCpltCallback+0x8a>
		uint8_t dato = WiFiRxBuffer.data[WiFiRxBuffer.tail];
 8005510:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 8005512:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8005516:	461a      	mov	r2, r3
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 800551a:	5c9b      	ldrb	r3, [r3, r2]
 800551c:	73fb      	strb	r3, [r7, #15]


		if (++WiFiRxBuffer.tail >= ESP_BUFFERSIZE_CIRCULAR) {
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 8005520:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8005524:	3301      	adds	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 800552a:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
 800552e:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 8005530:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8005534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005538:	d303      	bcc.n	8005542 <HAL_UART_RxCpltCallback+0x4a>
			WiFiRxBuffer.tail = 0;
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 800553c:	2200      	movs	r2, #0
 800553e:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800
		}
		// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(huart, (uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 8005544:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 8005548:	461a      	mov	r2, r3
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <HAL_UART_RxCpltCallback+0xb4>)
 800554c:	4413      	add	r3, r2
 800554e:	2201      	movs	r2, #1
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f006 ffd8 	bl	800c508 <HAL_UART_Receive_IT>
		if(xSemaphoreSub != NULL){
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <HAL_UART_RxCpltCallback+0xb8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_UART_RxCpltCallback+0x7a>
			if(dato == '\n')
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b0a      	cmp	r3, #10
 8005564:	d105      	bne.n	8005572 <HAL_UART_RxCpltCallback+0x7a>
				xSemaphoreGiveFromISR(xSemaphoreSub, &xHigherPriorityTaskWoken);
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <HAL_UART_RxCpltCallback+0xb8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	490e      	ldr	r1, [pc, #56]	; (80055a4 <HAL_UART_RxCpltCallback+0xac>)
 800556c:	4618      	mov	r0, r3
 800556e:	f00c f8a3 	bl	80116b8 <xQueueGiveFromISR>
		}
#if DEBUG == 1
		//if(dato == '\n')
			xQueueSendFromISR(xQueuePrintConsole, &dato, &xHigherPriorityTaskWoken);
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <HAL_UART_RxCpltCallback+0xbc>)
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	f107 010f 	add.w	r1, r7, #15
 800557a:	2300      	movs	r3, #0
 800557c:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <HAL_UART_RxCpltCallback+0xac>)
 800557e:	f00c f807 	bl	8011590 <xQueueGenericSendFromISR>
#endif
	}
	/* If xHigherPriorityTaskWoken was set to true you
	    we should yield.  The actual macro used here is
	    port specific. */
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <HAL_UART_RxCpltCallback+0xac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_UART_RxCpltCallback+0xa2>
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_UART_RxCpltCallback+0xc0>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000047c 	.word	0x2000047c
 80055a8:	40013800 	.word	0x40013800
 80055ac:	2000dce0 	.word	0x2000dce0
 80055b0:	2000ebfc 	.word	0x2000ebfc
 80055b4:	2000ebd8 	.word	0x2000ebd8
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <HAL_UART_ErrorCallback>:
/**
 * @brief  Function called when error happens on the UART.
 * @param  UartHandle: Uart handle receiving the data.
 * @retval None.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	//WIFI_Handler();
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_F_Init>:

void HAL_UART_F_Init(void) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0

	WiFiRxBuffer.head = 0;
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <HAL_UART_F_Init+0x30>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8a3 2802 	strh.w	r2, [r3, #2050]	; 0x802
	WiFiRxBuffer.tail = 0;
 80055dc:	4b08      	ldr	r3, [pc, #32]	; (8005600 <HAL_UART_F_Init+0x30>)
 80055de:	2200      	movs	r2, #0
 80055e0:	f8a3 2800 	strh.w	r2, [r3, #2048]	; 0x800

	HAL_UART_Receive_IT(&huart1,
			(uint8_t*) &WiFiRxBuffer.data[WiFiRxBuffer.tail], 1);
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_UART_F_Init+0x30>)
 80055e6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
 80055ea:	461a      	mov	r2, r3
	HAL_UART_Receive_IT(&huart1,
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <HAL_UART_F_Init+0x30>)
 80055ee:	4413      	add	r3, r2
 80055f0:	2201      	movs	r2, #1
 80055f2:	4619      	mov	r1, r3
 80055f4:	4803      	ldr	r0, [pc, #12]	; (8005604 <HAL_UART_F_Init+0x34>)
 80055f6:	f006 ff87 	bl	800c508 <HAL_UART_Receive_IT>

}
 80055fa:	bf00      	nop
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	2000dce0 	.word	0x2000dce0
 8005604:	2000e8e4 	.word	0x2000e8e4

08005608 <HAL_UART_F_Send>:
void HAL_UART_F_DeInit(void) {
	/* Reset USART configuration to default */
	HAL_UART_DeInit(&huart1);
}

int8_t HAL_UART_F_Send(const char* Buffer, const uint8_t Length) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
	/* It is using a blocking call to ensure that the AT commands were correctly sent. */
	if (HAL_UART_Transmit_IT(&huart1, (uint8_t*) Buffer, Length) != HAL_OK){//, ESP_DEFAULT_TIME_OUT
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4806      	ldr	r0, [pc, #24]	; (8005638 <HAL_UART_F_Send+0x30>)
 800561e:	f006 ff17 	bl	800c450 <HAL_UART_Transmit_IT>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_F_Send+0x26>
	//if (HAL_UART_Transmit(&huart1, (uint8_t*) Buffer, Length, ESP_DEFAULT_TIME_OUT) != HAL_OK){
		return -1;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800562c:	e000      	b.n	8005630 <HAL_UART_F_Send+0x28>
	}
	return 0;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	2000e8e4 	.word	0x2000e8e4

0800563c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800563c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005674 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005640:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005642:	e003      	b.n	800564c <LoopCopyDataInit>

08005644 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005646:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005648:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800564a:	3104      	adds	r1, #4

0800564c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800564c:	480b      	ldr	r0, [pc, #44]	; (800567c <LoopForever+0xa>)
	ldr	r3, =_edata
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005650:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005652:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005654:	d3f6      	bcc.n	8005644 <CopyDataInit>
	ldr	r2, =_sbss
 8005656:	4a0b      	ldr	r2, [pc, #44]	; (8005684 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005658:	e002      	b.n	8005660 <LoopFillZerobss>

0800565a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800565a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800565c:	f842 3b04 	str.w	r3, [r2], #4

08005660 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <LoopForever+0x16>)
	cmp	r2, r3
 8005662:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005664:	d3f9      	bcc.n	800565a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005666:	f7ff ff11 	bl	800548c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800566a:	f00f fa73 	bl	8014b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800566e:	f7fd fbf5 	bl	8002e5c <main>

08005672 <LoopForever>:

LoopForever:
    b LoopForever
 8005672:	e7fe      	b.n	8005672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005674:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8005678:	08018198 	.word	0x08018198
	ldr	r0, =_sdata
 800567c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005680:	200003bc 	.word	0x200003bc
	ldr	r2, =_sbss
 8005684:	200003bc 	.word	0x200003bc
	ldr	r3, = _ebss
 8005688:	20010554 	.word	0x20010554

0800568c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800568c:	e7fe      	b.n	800568c <ADC1_2_IRQHandler>

0800568e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005698:	2003      	movs	r0, #3
 800569a:	f001 f83a 	bl	8006712 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800569e:	2000      	movs	r0, #0
 80056a0:	f7ff fdc2 	bl	8005228 <HAL_InitTick>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	71fb      	strb	r3, [r7, #7]
 80056ae:	e001      	b.n	80056b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056b0:	f7ff f8f6 	bl	80048a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056b4:	79fb      	ldrb	r3, [r7, #7]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_IncTick+0x1c>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_IncTick+0x20>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	4a03      	ldr	r2, [pc, #12]	; (80056dc <HAL_IncTick+0x1c>)
 80056d0:	6013      	str	r3, [r2, #0]
}
 80056d2:	bf00      	nop
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	2000ec40 	.word	0x2000ec40
 80056e0:	20000060 	.word	0x20000060

080056e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return uwTick;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_GetTick+0x14>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	2000ec40 	.word	0x2000ec40

080056fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005704:	f7ff ffee 	bl	80056e4 <HAL_GetTick>
 8005708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005714:	d004      	beq.n	8005720 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_Delay+0x40>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005720:	bf00      	nop
 8005722:	f7ff ffdf 	bl	80056e4 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	429a      	cmp	r2, r3
 8005730:	d8f7      	bhi.n	8005722 <HAL_Delay+0x26>
  {
  }
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000060 	.word	0x20000060

08005740 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057a8:	b490      	push	{r4, r7}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3360      	adds	r3, #96	; 0x60
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <LL_ADC_SetOffset+0x40>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057da:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc90      	pop	{r4, r7}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	03fff000 	.word	0x03fff000

080057ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80057ec:	b490      	push	{r4, r7}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3360      	adds	r3, #96	; 0x60
 80057fa:	461a      	mov	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bc90      	pop	{r4, r7}
 8005812:	4770      	bx	lr

08005814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005814:	b490      	push	{r4, r7}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3360      	adds	r3, #96	; 0x60
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4313      	orrs	r3, r2
 8005838:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bc90      	pop	{r4, r7}
 8005842:	4770      	bx	lr

08005844 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800586a:	b490      	push	{r4, r7}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3330      	adds	r3, #48	; 0x30
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	4413      	add	r3, r2
 8005888:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	211f      	movs	r1, #31
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	401a      	ands	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0e9b      	lsrs	r3, r3, #26
 80058a0:	f003 011f 	and.w	r1, r3, #31
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc90      	pop	{r4, r7}
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058bc:	b490      	push	{r4, r7}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3314      	adds	r3, #20
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	0e5b      	lsrs	r3, r3, #25
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	4413      	add	r3, r2
 80058da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0d1b      	lsrs	r3, r3, #20
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2107      	movs	r1, #7
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	401a      	ands	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	0d1b      	lsrs	r3, r3, #20
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bc90      	pop	{r4, r7}
 800590a:	4770      	bx	lr

0800590c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005924:	43db      	mvns	r3, r3
 8005926:	401a      	ands	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f003 0318 	and.w	r3, r3, #24
 800592e:	4908      	ldr	r1, [pc, #32]	; (8005950 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005930:	40d9      	lsrs	r1, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	400b      	ands	r3, r1
 8005936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	0007ffff 	.word	0x0007ffff

08005954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6093      	str	r3, [r2, #8]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598c:	d101      	bne.n	8005992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80059b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059dc:	d101      	bne.n	80059e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <LL_ADC_IsEnabled+0x18>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <LL_ADC_IsEnabled+0x1a>
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d101      	bne.n	8005a2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d101      	bne.n	8005a54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e137      	b.n	8005cee <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fe ff2f 	bl	80048f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ff67 	bl	8005978 <LL_ADC_IsDeepPowerDownEnabled>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff4d 	bl	8005954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff ff82 	bl	80059c8 <LL_ADC_IsInternalRegulatorEnabled>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ff66 	bl	80059a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005ad4:	4b88      	ldr	r3, [pc, #544]	; (8005cf8 <HAL_ADC_Init+0x294>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	099b      	lsrs	r3, r3, #6
 8005ada:	4a88      	ldr	r2, [pc, #544]	; (8005cfc <HAL_ADC_Init+0x298>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ae4:	e002      	b.n	8005aec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f9      	bne.n	8005ae6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff ff66 	bl	80059c8 <LL_ADC_IsInternalRegulatorEnabled>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10d      	bne.n	8005b1e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	f043 0210 	orr.w	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	f043 0201 	orr.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff ff77 	bl	8005a16 <LL_ADC_REG_IsConversionOngoing>
 8005b28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 80d2 	bne.w	8005cdc <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 80ce 	bne.w	8005cdc <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005b48:	f043 0202 	orr.w	r2, r3, #2
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff ff4b 	bl	80059f0 <LL_ADC_IsEnabled>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d115      	bne.n	8005b8c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b60:	4867      	ldr	r0, [pc, #412]	; (8005d00 <HAL_ADC_Init+0x29c>)
 8005b62:	f7ff ff45 	bl	80059f0 <LL_ADC_IsEnabled>
 8005b66:	4604      	mov	r4, r0
 8005b68:	4866      	ldr	r0, [pc, #408]	; (8005d04 <HAL_ADC_Init+0x2a0>)
 8005b6a:	f7ff ff41 	bl	80059f0 <LL_ADC_IsEnabled>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	431c      	orrs	r4, r3
 8005b72:	4865      	ldr	r0, [pc, #404]	; (8005d08 <HAL_ADC_Init+0x2a4>)
 8005b74:	f7ff ff3c 	bl	80059f0 <LL_ADC_IsEnabled>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4323      	orrs	r3, r4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4619      	mov	r1, r3
 8005b86:	4861      	ldr	r0, [pc, #388]	; (8005d0c <HAL_ADC_Init+0x2a8>)
 8005b88:	f7ff fdda 	bl	8005740 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	7e5b      	ldrb	r3, [r3, #25]
 8005b90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005b9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ba2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005baa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d106      	bne.n	8005bc8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	045b      	lsls	r3, r3, #17
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b49      	ldr	r3, [pc, #292]	; (8005d10 <HAL_ADC_Init+0x2ac>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	69b9      	ldr	r1, [r7, #24]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff ff0a 	bl	8005a16 <LL_ADC_REG_IsConversionOngoing>
 8005c02:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff ff17 	bl	8005a3c <LL_ADC_INJ_IsConversionOngoing>
 8005c0e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d140      	bne.n	8005c98 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d13d      	bne.n	8005c98 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7e1b      	ldrb	r3, [r3, #24]
 8005c24:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c26:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c2e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3e:	f023 0306 	bic.w	r3, r3, #6
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d118      	bne.n	8005c88 <HAL_ADC_Init+0x224>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	611a      	str	r2, [r3, #16]
 8005c86:	e007      	b.n	8005c98 <HAL_ADC_Init+0x234>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10c      	bne.n	8005cba <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	f023 010f 	bic.w	r1, r3, #15
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cb8:	e007      	b.n	8005cca <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 020f 	bic.w	r2, r2, #15
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8005cda:	e007      	b.n	8005cec <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	f043 0210 	orr.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3724      	adds	r7, #36	; 0x24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000058 	.word	0x20000058
 8005cfc:	053e2d63 	.word	0x053e2d63
 8005d00:	50040000 	.word	0x50040000
 8005d04:	50040100 	.word	0x50040100
 8005d08:	50040200 	.word	0x50040200
 8005d0c:	50040300 	.word	0x50040300
 8005d10:	fff0c007 	.word	0xfff0c007

08005d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0a6      	sub	sp, #152	; 0x98
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x22>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e364      	b.n	8006400 <HAL_ADC_ConfigChannel+0x6ec>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fe67 	bl	8005a16 <LL_ADC_REG_IsConversionOngoing>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 8345 	bne.w	80063da <HAL_ADC_ConfigChannel+0x6c6>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d824      	bhi.n	8005da2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	3b02      	subs	r3, #2
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d81b      	bhi.n	8005d9a <HAL_ADC_ConfigChannel+0x86>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <HAL_ADC_ConfigChannel+0x54>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	220c      	movs	r2, #12
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	e011      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2212      	movs	r2, #18
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	e00d      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2218      	movs	r2, #24
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	e009      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	e004      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2206      	movs	r2, #6
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	e000      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005da2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	f7ff fd5a 	bl	800586a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fe2b 	bl	8005a16 <LL_ADC_REG_IsConversionOngoing>
 8005dc0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fe37 	bl	8005a3c <LL_ADC_INJ_IsConversionOngoing>
 8005dce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 8163 	bne.w	80060a2 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 815e 	bne.w	80060a2 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dee:	d10f      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f7ff fd5e 	bl	80058bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fd1b 	bl	8005844 <LL_ADC_SetSamplingTimeCommonConfig>
 8005e0e:	e00e      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f7ff fd4d 	bl	80058bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fd0b 	bl	8005844 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d00a      	beq.n	8005e66 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6919      	ldr	r1, [r3, #16]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e60:	f7ff fca2 	bl	80057a8 <LL_ADC_SetOffset>
 8005e64:	e11d      	b.n	80060a2 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fcbd 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x17e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff fcb2 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	0e9b      	lsrs	r3, r3, #26
 8005e8c:	f003 021f 	and.w	r2, r3, #31
 8005e90:	e012      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fca7 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ea8:	fa93 f3a3 	rbit	r3, r3
 8005eac:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	0e9b      	lsrs	r3, r3, #26
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	e00a      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x1d2>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee0:	fab3 f383 	clz	r3, r3
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d106      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fc8e 	bl	8005814 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2101      	movs	r1, #1
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fc74 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <HAL_ADC_ConfigChannel+0x210>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fc69 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	0e9b      	lsrs	r3, r3, #26
 8005f1e:	f003 021f 	and.w	r2, r3, #31
 8005f22:	e010      	b.n	8005f46 <HAL_ADC_ConfigChannel+0x232>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fc5e 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005f30:	4603      	mov	r3, r0
 8005f32:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f36:	fa93 f3a3 	rbit	r3, r3
 8005f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	fab3 f383 	clz	r3, r3
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x24a>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	0e9b      	lsrs	r3, r3, #26
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	e00a      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x260>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f66:	fa93 f3a3 	rbit	r3, r3
 8005f6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d106      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fc47 	bl	8005814 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fc2d 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x29e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fc22 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	0e9b      	lsrs	r3, r3, #26
 8005fac:	f003 021f 	and.w	r2, r3, #31
 8005fb0:	e010      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x2c0>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fc17 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8005fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fcc:	fab3 f383 	clz	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <HAL_ADC_ConfigChannel+0x2d8>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0e9b      	lsrs	r3, r3, #26
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	e00a      	b.n	8006002 <HAL_ADC_ConfigChannel+0x2ee>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff4:	fa93 f3a3 	rbit	r3, r3
 8005ff8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffc:	fab3 f383 	clz	r3, r3
 8006000:	b2db      	uxtb	r3, r3
 8006002:	429a      	cmp	r2, r3
 8006004:	d106      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fc00 	bl	8005814 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2103      	movs	r1, #3
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fbe6 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8006020:	4603      	mov	r3, r0
 8006022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x32c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2103      	movs	r1, #3
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fbdb 	bl	80057ec <LL_ADC_GetOffsetChannel>
 8006036:	4603      	mov	r3, r0
 8006038:	0e9b      	lsrs	r3, r3, #26
 800603a:	f003 021f 	and.w	r2, r3, #31
 800603e:	e010      	b.n	8006062 <HAL_ADC_ConfigChannel+0x34e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2103      	movs	r1, #3
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fbd0 	bl	80057ec <LL_ADC_GetOffsetChannel>
 800604c:	4603      	mov	r3, r0
 800604e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605a:	fab3 f383 	clz	r3, r3
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_ADC_ConfigChannel+0x366>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	0e9b      	lsrs	r3, r3, #26
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	e00a      	b.n	8006090 <HAL_ADC_ConfigChannel+0x37c>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006082:	fa93 f3a3 	rbit	r3, r3
 8006086:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	fab3 f383 	clz	r3, r3
 800608e:	b2db      	uxtb	r3, r3
 8006090:	429a      	cmp	r2, r3
 8006092:	d106      	bne.n	80060a2 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2200      	movs	r2, #0
 800609a:	2103      	movs	r1, #3
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fbb9 	bl	8005814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fca2 	bl	80059f0 <LL_ADC_IsEnabled>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 810c 	bne.w	80062cc <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	461a      	mov	r2, r3
 80060c2:	f7ff fc23 	bl	800590c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	4aae      	ldr	r2, [pc, #696]	; (8006384 <HAL_ADC_ConfigChannel+0x670>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	f040 80fd 	bne.w	80062cc <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x3e6>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	0e9b      	lsrs	r3, r3, #26
 80060e8:	3301      	adds	r3, #1
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	bf94      	ite	ls
 80060f2:	2301      	movls	r3, #1
 80060f4:	2300      	movhi	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	e012      	b.n	8006120 <HAL_ADC_ConfigChannel+0x40c>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3301      	adds	r3, #1
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2b09      	cmp	r3, #9
 8006118:	bf94      	ite	ls
 800611a:	2301      	movls	r3, #1
 800611c:	2300      	movhi	r3, #0
 800611e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006120:	2b00      	cmp	r3, #0
 8006122:	d064      	beq.n	80061ee <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x42c>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0e9b      	lsrs	r3, r3, #26
 8006136:	3301      	adds	r3, #1
 8006138:	069b      	lsls	r3, r3, #26
 800613a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800613e:	e00e      	b.n	800615e <HAL_ADC_ConfigChannel+0x44a>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	fa93 f3a3 	rbit	r3, r3
 800614c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	b2db      	uxtb	r3, r3
 8006156:	3301      	adds	r3, #1
 8006158:	069b      	lsls	r3, r3, #26
 800615a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HAL_ADC_ConfigChannel+0x46a>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	0e9b      	lsrs	r3, r3, #26
 8006170:	3301      	adds	r3, #1
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	e010      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x48c>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	fa93 f3a3 	rbit	r3, r3
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	fab3 f383 	clz	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	ea42 0103 	orr.w	r1, r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x4b2>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	0e9b      	lsrs	r3, r3, #26
 80061b6:	3301      	adds	r3, #1
 80061b8:	f003 021f 	and.w	r2, r3, #31
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	051b      	lsls	r3, r3, #20
 80061c4:	e011      	b.n	80061ea <HAL_ADC_ConfigChannel+0x4d6>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	3301      	adds	r3, #1
 80061de:	f003 021f 	and.w	r2, r3, #31
 80061e2:	4613      	mov	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4413      	add	r3, r2
 80061e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ea:	430b      	orrs	r3, r1
 80061ec:	e069      	b.n	80062c2 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d107      	bne.n	800620a <HAL_ADC_ConfigChannel+0x4f6>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0e9b      	lsrs	r3, r3, #26
 8006200:	3301      	adds	r3, #1
 8006202:	069b      	lsls	r3, r3, #26
 8006204:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006208:	e00e      	b.n	8006228 <HAL_ADC_ConfigChannel+0x514>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	61fb      	str	r3, [r7, #28]
  return result;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	3301      	adds	r3, #1
 8006222:	069b      	lsls	r3, r3, #26
 8006224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x534>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	0e9b      	lsrs	r3, r3, #26
 800623a:	3301      	adds	r3, #1
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	e010      	b.n	800626a <HAL_ADC_ConfigChannel+0x556>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	617b      	str	r3, [r7, #20]
  return result;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	fab3 f383 	clz	r3, r3
 800625c:	b2db      	uxtb	r3, r3
 800625e:	3301      	adds	r3, #1
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2101      	movs	r1, #1
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	ea42 0103 	orr.w	r1, r2, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <HAL_ADC_ConfigChannel+0x582>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	0e9b      	lsrs	r3, r3, #26
 8006280:	3301      	adds	r3, #1
 8006282:	f003 021f 	and.w	r2, r3, #31
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	3b1e      	subs	r3, #30
 800628e:	051b      	lsls	r3, r3, #20
 8006290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006294:	e014      	b.n	80062c0 <HAL_ADC_ConfigChannel+0x5ac>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	60fb      	str	r3, [r7, #12]
  return result;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	3301      	adds	r3, #1
 80062ae:	f003 021f 	and.w	r2, r3, #31
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	3b1e      	subs	r3, #30
 80062ba:	051b      	lsls	r3, r3, #20
 80062bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062c0:	430b      	orrs	r3, r1
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	6892      	ldr	r2, [r2, #8]
 80062c6:	4619      	mov	r1, r3
 80062c8:	f7ff faf8 	bl	80058bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b2d      	ldr	r3, [pc, #180]	; (8006388 <HAL_ADC_ConfigChannel+0x674>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 808d 	beq.w	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062da:	482c      	ldr	r0, [pc, #176]	; (800638c <HAL_ADC_ConfigChannel+0x678>)
 80062dc:	f7ff fa56 	bl	800578c <LL_ADC_GetCommonPathInternalCh>
 80062e0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <HAL_ADC_ConfigChannel+0x67c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d12b      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x632>
 80062ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d125      	bne.n	8006346 <HAL_ADC_ConfigChannel+0x632>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_ADC_ConfigChannel+0x680>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_ADC_ConfigChannel+0x5fa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a23      	ldr	r2, [pc, #140]	; (8006398 <HAL_ADC_ConfigChannel+0x684>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d16f      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x6da>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800630e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006316:	4619      	mov	r1, r3
 8006318:	481c      	ldr	r0, [pc, #112]	; (800638c <HAL_ADC_ConfigChannel+0x678>)
 800631a:	f7ff fa24 	bl	8005766 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800631e:	4b1f      	ldr	r3, [pc, #124]	; (800639c <HAL_ADC_ConfigChannel+0x688>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	4a1e      	ldr	r2, [pc, #120]	; (80063a0 <HAL_ADC_ConfigChannel+0x68c>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	099a      	lsrs	r2, r3, #6
 800632c:	4613      	mov	r3, r2
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006336:	e002      	b.n	800633e <HAL_ADC_ConfigChannel+0x62a>
          {
            wait_loop_index--;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f9      	bne.n	8006338 <HAL_ADC_ConfigChannel+0x624>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006344:	e053      	b.n	80063ee <HAL_ADC_ConfigChannel+0x6da>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a16      	ldr	r2, [pc, #88]	; (80063a4 <HAL_ADC_ConfigChannel+0x690>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d12b      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x694>
 8006350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d125      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x694>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <HAL_ADC_ConfigChannel+0x680>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_ADC_ConfigChannel+0x65c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a0b      	ldr	r2, [pc, #44]	; (8006398 <HAL_ADC_ConfigChannel+0x684>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d140      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x6de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006378:	4619      	mov	r1, r3
 800637a:	4804      	ldr	r0, [pc, #16]	; (800638c <HAL_ADC_ConfigChannel+0x678>)
 800637c:	f7ff f9f3 	bl	8005766 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006380:	e037      	b.n	80063f2 <HAL_ADC_ConfigChannel+0x6de>
 8006382:	bf00      	nop
 8006384:	407f0000 	.word	0x407f0000
 8006388:	80080000 	.word	0x80080000
 800638c:	50040300 	.word	0x50040300
 8006390:	c7520000 	.word	0xc7520000
 8006394:	50040000 	.word	0x50040000
 8006398:	50040200 	.word	0x50040200
 800639c:	20000058 	.word	0x20000058
 80063a0:	053e2d63 	.word	0x053e2d63
 80063a4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_ADC_ConfigChannel+0x6f4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d120      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d11a      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <HAL_ADC_ConfigChannel+0x6f8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d115      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063d0:	4619      	mov	r1, r3
 80063d2:	480f      	ldr	r0, [pc, #60]	; (8006410 <HAL_ADC_ConfigChannel+0x6fc>)
 80063d4:	f7ff f9c7 	bl	8005766 <LL_ADC_SetCommonPathInternalCh>
 80063d8:	e00c      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80063ec:	e002      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HAL_ADC_ConfigChannel+0x6e0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80063fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006400:	4618      	mov	r0, r3
 8006402:	3798      	adds	r7, #152	; 0x98
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	80000001 	.word	0x80000001
 800640c:	50040000 	.word	0x50040000
 8006410:	50040300 	.word	0x50040300

08006414 <LL_ADC_IsEnabled>:
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <LL_ADC_IsEnabled+0x18>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <LL_ADC_IsEnabled+0x1a>
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <LL_ADC_REG_IsConversionOngoing>:
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d101      	bne.n	8006452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b0a1      	sub	sp, #132	; 0x84
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e08f      	b.n	800659e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d102      	bne.n	8006496 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006490:	4b46      	ldr	r3, [pc, #280]	; (80065ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e001      	b.n	800649a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e072      	b.n	800659e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ffbd 	bl	800643a <LL_ADC_REG_IsConversionOngoing>
 80064c0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff ffb7 	bl	800643a <LL_ADC_REG_IsConversionOngoing>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d154      	bne.n	800657c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80064d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d151      	bne.n	800657c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064d8:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80064da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d02c      	beq.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80064e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064f6:	035b      	lsls	r3, r3, #13
 80064f8:	430b      	orrs	r3, r1
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006500:	4829      	ldr	r0, [pc, #164]	; (80065a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006502:	f7ff ff87 	bl	8006414 <LL_ADC_IsEnabled>
 8006506:	4604      	mov	r4, r0
 8006508:	4828      	ldr	r0, [pc, #160]	; (80065ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800650a:	f7ff ff83 	bl	8006414 <LL_ADC_IsEnabled>
 800650e:	4603      	mov	r3, r0
 8006510:	431c      	orrs	r4, r3
 8006512:	4828      	ldr	r0, [pc, #160]	; (80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006514:	f7ff ff7e 	bl	8006414 <LL_ADC_IsEnabled>
 8006518:	4603      	mov	r3, r0
 800651a:	4323      	orrs	r3, r4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d137      	bne.n	8006590 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006528:	f023 030f 	bic.w	r3, r3, #15
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	6811      	ldr	r1, [r2, #0]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	6892      	ldr	r2, [r2, #8]
 8006534:	430a      	orrs	r2, r1
 8006536:	431a      	orrs	r2, r3
 8006538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800653a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800653c:	e028      	b.n	8006590 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006548:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800654a:	4817      	ldr	r0, [pc, #92]	; (80065a8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800654c:	f7ff ff62 	bl	8006414 <LL_ADC_IsEnabled>
 8006550:	4604      	mov	r4, r0
 8006552:	4816      	ldr	r0, [pc, #88]	; (80065ac <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006554:	f7ff ff5e 	bl	8006414 <LL_ADC_IsEnabled>
 8006558:	4603      	mov	r3, r0
 800655a:	431c      	orrs	r4, r3
 800655c:	4815      	ldr	r0, [pc, #84]	; (80065b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800655e:	f7ff ff59 	bl	8006414 <LL_ADC_IsEnabled>
 8006562:	4603      	mov	r3, r0
 8006564:	4323      	orrs	r3, r4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d112      	bne.n	8006590 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800656a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006572:	f023 030f 	bic.w	r3, r3, #15
 8006576:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006578:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800657a:	e009      	b.n	8006590 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800658e:	e000      	b.n	8006592 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006590:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800659a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3784      	adds	r7, #132	; 0x84
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	50040000 	.word	0x50040000
 80065ac:	50040100 	.word	0x50040100
 80065b0:	50040300 	.word	0x50040300
 80065b4:	50040200 	.word	0x50040200

080065b8 <__NVIC_SetPriorityGrouping>:
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <__NVIC_SetPriorityGrouping+0x44>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065d4:	4013      	ands	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065ea:	4a04      	ldr	r2, [pc, #16]	; (80065fc <__NVIC_SetPriorityGrouping+0x44>)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	60d3      	str	r3, [r2, #12]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <__NVIC_GetPriorityGrouping>:
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <__NVIC_GetPriorityGrouping+0x18>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	f003 0307 	and.w	r3, r3, #7
}
 800660e:	4618      	mov	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <__NVIC_EnableIRQ>:
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db0b      	blt.n	8006646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f003 021f 	and.w	r2, r3, #31
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <__NVIC_EnableIRQ+0x38>)
 8006636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2001      	movs	r0, #1
 800663e:	fa00 f202 	lsl.w	r2, r0, r2
 8006642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000e100 	.word	0xe000e100

08006658 <__NVIC_SetPriority>:
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db0a      	blt.n	8006682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	490c      	ldr	r1, [pc, #48]	; (80066a4 <__NVIC_SetPriority+0x4c>)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	440b      	add	r3, r1
 800667c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006680:	e00a      	b.n	8006698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4908      	ldr	r1, [pc, #32]	; (80066a8 <__NVIC_SetPriority+0x50>)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3b04      	subs	r3, #4
 8006690:	0112      	lsls	r2, r2, #4
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	440b      	add	r3, r1
 8006696:	761a      	strb	r2, [r3, #24]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000e100 	.word	0xe000e100
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <NVIC_EncodePriority>:
{
 80066ac:	b480      	push	{r7}
 80066ae:	b089      	sub	sp, #36	; 0x24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f1c3 0307 	rsb	r3, r3, #7
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	bf28      	it	cs
 80066ca:	2304      	movcs	r3, #4
 80066cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3304      	adds	r3, #4
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d902      	bls.n	80066dc <NVIC_EncodePriority+0x30>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3b03      	subs	r3, #3
 80066da:	e000      	b.n	80066de <NVIC_EncodePriority+0x32>
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	401a      	ands	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	43d9      	mvns	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	4313      	orrs	r3, r2
}
 8006706:	4618      	mov	r0, r3
 8006708:	3724      	adds	r7, #36	; 0x24
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff ff4c 	bl	80065b8 <__NVIC_SetPriorityGrouping>
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800673a:	f7ff ff61 	bl	8006600 <__NVIC_GetPriorityGrouping>
 800673e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	f7ff ffb1 	bl	80066ac <NVIC_EncodePriority>
 800674a:	4602      	mov	r2, r0
 800674c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff ff80 	bl	8006658 <__NVIC_SetPriority>
}
 8006758:	bf00      	nop
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff ff54 	bl	800661c <__NVIC_EnableIRQ>
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e075      	b.n	800687a <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fe f926 	bl	80049f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067be:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <HAL_DCMI_Init+0x108>)
 80067da:	400b      	ands	r3, r1
 80067dc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6819      	ldr	r1, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80067f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80067fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800680a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8006816:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8006822:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b10      	cmp	r3, #16
 8006832:	d112      	bne.n	800685a <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7f1b      	ldrb	r3, [r3, #28]
 8006838:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7f5b      	ldrb	r3, [r3, #29]
 800683e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006840:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7f9b      	ldrb	r3, [r3, #30]
 8006846:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8006848:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7fdb      	ldrb	r3, [r3, #31]
 8006850:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8006856:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8006858:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 021f 	orr.w	r2, r2, #31
 8006868:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	ffe0f007 	.word	0xffe0f007

08006888 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d005      	beq.n	80068ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2204      	movs	r2, #4
 80068a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	e029      	b.n	8006900 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 020e 	bic.w	r2, r2, #14
 80068ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0201 	bic.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d0:	f003 021c 	and.w	r2, r3, #28
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	2101      	movs	r1, #1
 80068da:	fa01 f202 	lsl.w	r2, r1, r2
 80068de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
    }
  }
  return status;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800691a:	e166      	b.n	8006bea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8158 	beq.w	8006be4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d00b      	beq.n	8006954 <HAL_GPIO_Init+0x48>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d007      	beq.n	8006954 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006948:	2b11      	cmp	r3, #17
 800694a:	d003      	beq.n	8006954 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b12      	cmp	r3, #18
 8006952:	d130      	bne.n	80069b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	2203      	movs	r2, #3
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800698a:	2201      	movs	r2, #1
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4013      	ands	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 0201 	and.w	r2, r3, #1
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	2203      	movs	r2, #3
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43db      	mvns	r3, r3
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0xea>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b12      	cmp	r3, #18
 80069f4:	d123      	bne.n	8006a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	08da      	lsrs	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3208      	adds	r2, #8
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	220f      	movs	r2, #15
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4013      	ands	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	08da      	lsrs	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3208      	adds	r2, #8
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4013      	ands	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0203 	and.w	r2, r3, #3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80b2 	beq.w	8006be4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a80:	4b61      	ldr	r3, [pc, #388]	; (8006c08 <HAL_GPIO_Init+0x2fc>)
 8006a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a84:	4a60      	ldr	r2, [pc, #384]	; (8006c08 <HAL_GPIO_Init+0x2fc>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8006a8c:	4b5e      	ldr	r3, [pc, #376]	; (8006c08 <HAL_GPIO_Init+0x2fc>)
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006a98:	4a5c      	ldr	r2, [pc, #368]	; (8006c0c <HAL_GPIO_Init+0x300>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	220f      	movs	r2, #15
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006ac2:	d02b      	beq.n	8006b1c <HAL_GPIO_Init+0x210>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_GPIO_Init+0x304>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d025      	beq.n	8006b18 <HAL_GPIO_Init+0x20c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a51      	ldr	r2, [pc, #324]	; (8006c14 <HAL_GPIO_Init+0x308>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01f      	beq.n	8006b14 <HAL_GPIO_Init+0x208>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a50      	ldr	r2, [pc, #320]	; (8006c18 <HAL_GPIO_Init+0x30c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d019      	beq.n	8006b10 <HAL_GPIO_Init+0x204>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a4f      	ldr	r2, [pc, #316]	; (8006c1c <HAL_GPIO_Init+0x310>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_GPIO_Init+0x200>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a4e      	ldr	r2, [pc, #312]	; (8006c20 <HAL_GPIO_Init+0x314>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00d      	beq.n	8006b08 <HAL_GPIO_Init+0x1fc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a4d      	ldr	r2, [pc, #308]	; (8006c24 <HAL_GPIO_Init+0x318>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <HAL_GPIO_Init+0x1f8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <HAL_GPIO_Init+0x31c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d101      	bne.n	8006b00 <HAL_GPIO_Init+0x1f4>
 8006afc:	2307      	movs	r3, #7
 8006afe:	e00e      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b00:	2308      	movs	r3, #8
 8006b02:	e00c      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b04:	2306      	movs	r3, #6
 8006b06:	e00a      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b08:	2305      	movs	r3, #5
 8006b0a:	e008      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	e006      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b10:	2303      	movs	r3, #3
 8006b12:	e004      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e002      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	f002 0203 	and.w	r2, r2, #3
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4093      	lsls	r3, r2
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b2e:	4937      	ldr	r1, [pc, #220]	; (8006c0c <HAL_GPIO_Init+0x300>)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	3302      	adds	r3, #2
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b60:	4a32      	ldr	r2, [pc, #200]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006b66:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4013      	ands	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b8a:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b90:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006bba:	4b1c      	ldr	r3, [pc, #112]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006bde:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <HAL_GPIO_Init+0x320>)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3301      	adds	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f47f ae91 	bne.w	800691c <HAL_GPIO_Init+0x10>
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	48000400 	.word	0x48000400
 8006c14:	48000800 	.word	0x48000800
 8006c18:	48000c00 	.word	0x48000c00
 8006c1c:	48001000 	.word	0x48001000
 8006c20:	48001400 	.word	0x48001400
 8006c24:	48001800 	.word	0x48001800
 8006c28:	48001c00 	.word	0x48001c00
 8006c2c:	40010400 	.word	0x40010400

08006c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	887b      	ldrh	r3, [r7, #2]
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e001      	b.n	8006c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	807b      	strh	r3, [r7, #2]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c70:	787b      	ldrb	r3, [r7, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c76:	887a      	ldrh	r2, [r7, #2]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c7c:	e002      	b.n	8006c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c7e:	887a      	ldrh	r2, [r7, #2]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695a      	ldr	r2, [r3, #20]
 8006ca0:	887b      	ldrh	r3, [r7, #2]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006cae:	e002      	b.n	8006cb6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cb0:	887a      	ldrh	r2, [r7, #2]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	619a      	str	r2, [r3, #24]
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e081      	b.n	8006dd8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fd ff03 	bl	8004af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2224      	movs	r2, #36	; 0x24
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	e006      	b.n	8006d4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d104      	bne.n	8006d5c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	ea42 0103 	orr.w	r1, r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	021a      	lsls	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69d9      	ldr	r1, [r3, #28]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	461a      	mov	r2, r3
 8006dec:	460b      	mov	r3, r1
 8006dee:	817b      	strh	r3, [r7, #10]
 8006df0:	4613      	mov	r3, r2
 8006df2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	f040 80da 	bne.w	8006fb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_I2C_Master_Transmit+0x30>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e0d3      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e18:	f7fe fc64 	bl	80056e4 <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2319      	movs	r3, #25
 8006e24:	2201      	movs	r2, #1
 8006e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 faed 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0be      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2221      	movs	r2, #33	; 0x21
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2210      	movs	r2, #16
 8006e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	893a      	ldrh	r2, [r7, #8]
 8006e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2bff      	cmp	r3, #255	; 0xff
 8006e6a:	d90e      	bls.n	8006e8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	22ff      	movs	r2, #255	; 0xff
 8006e70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	8979      	ldrh	r1, [r7, #10]
 8006e7a:	4b51      	ldr	r3, [pc, #324]	; (8006fc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fc50 	bl	8007728 <I2C_TransferConfig>
 8006e88:	e06c      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	8979      	ldrh	r1, [r7, #10]
 8006e9c:	4b48      	ldr	r3, [pc, #288]	; (8006fc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fc3f 	bl	8007728 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006eaa:	e05b      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	6a39      	ldr	r1, [r7, #32]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 faea 	bl	800748a <I2C_WaitOnTXISFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e07b      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d034      	beq.n	8006f64 <HAL_I2C_Master_Transmit+0x184>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d130      	bne.n	8006f64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fa7c 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e04d      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2bff      	cmp	r3, #255	; 0xff
 8006f24:	d90e      	bls.n	8006f44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	22ff      	movs	r2, #255	; 0xff
 8006f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fbf3 	bl	8007728 <I2C_TransferConfig>
 8006f42:	e00f      	b.n	8006f64 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	8979      	ldrh	r1, [r7, #10]
 8006f56:	2300      	movs	r3, #0
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fbe2 	bl	8007728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d19e      	bne.n	8006eac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	6a39      	ldr	r1, [r7, #32]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fac9 	bl	800750a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e01a      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2220      	movs	r2, #32
 8006f88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6859      	ldr	r1, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006f96:	400b      	ands	r3, r1
 8006f98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	80002000 	.word	0x80002000
 8006fc4:	fe00e800 	.word	0xfe00e800

08006fc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	817b      	strh	r3, [r7, #10]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	f040 80db 	bne.w	80071a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_I2C_Master_Receive+0x30>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e0d4      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007000:	f7fe fb70 	bl	80056e4 <HAL_GetTick>
 8007004:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2319      	movs	r3, #25
 800700c:	2201      	movs	r2, #1
 800700e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f9f9 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e0bf      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2222      	movs	r2, #34	; 0x22
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2210      	movs	r2, #16
 800702e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	893a      	ldrh	r2, [r7, #8]
 8007042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704e:	b29b      	uxth	r3, r3
 8007050:	2bff      	cmp	r3, #255	; 0xff
 8007052:	d90e      	bls.n	8007072 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	22ff      	movs	r2, #255	; 0xff
 8007058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	b2da      	uxtb	r2, r3
 8007060:	8979      	ldrh	r1, [r7, #10]
 8007062:	4b52      	ldr	r3, [pc, #328]	; (80071ac <HAL_I2C_Master_Receive+0x1e4>)
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fb5c 	bl	8007728 <I2C_TransferConfig>
 8007070:	e06d      	b.n	800714e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	b2da      	uxtb	r2, r3
 8007082:	8979      	ldrh	r1, [r7, #10]
 8007084:	4b49      	ldr	r3, [pc, #292]	; (80071ac <HAL_I2C_Master_Receive+0x1e4>)
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fb4b 	bl	8007728 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007092:	e05c      	b.n	800714e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	6a39      	ldr	r1, [r7, #32]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fa73 	bl	8007584 <I2C_WaitOnRXNEFlagUntilTimeout>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e07c      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d034      	beq.n	800714e <HAL_I2C_Master_Receive+0x186>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d130      	bne.n	800714e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2200      	movs	r2, #0
 80070f4:	2180      	movs	r1, #128	; 0x80
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f987 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e04d      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	2bff      	cmp	r3, #255	; 0xff
 800710e:	d90e      	bls.n	800712e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	22ff      	movs	r2, #255	; 0xff
 8007114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711a:	b2da      	uxtb	r2, r3
 800711c:	8979      	ldrh	r1, [r7, #10]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fafe 	bl	8007728 <I2C_TransferConfig>
 800712c:	e00f      	b.n	800714e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 faed 	bl	8007728 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d19d      	bne.n	8007094 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	6a39      	ldr	r1, [r7, #32]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f9d4 	bl	800750a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e01a      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2220      	movs	r2, #32
 8007172:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <HAL_I2C_Master_Receive+0x1e8>)
 8007180:	400b      	ands	r3, r1
 8007182:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	80002400 	.word	0x80002400
 80071b0:	fe00e800 	.word	0xfe00e800

080071b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	; 0x28
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	460b      	mov	r3, r1
 80071c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	f040 80f1 	bne.w	80073b8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e4:	d101      	bne.n	80071ea <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
 80071e8:	e0e7      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_I2C_IsDeviceReady+0x44>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e0e0      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2224      	movs	r2, #36	; 0x24
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <HAL_I2C_IsDeviceReady+0x72>
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800721c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007220:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007224:	e004      	b.n	8007230 <HAL_I2C_IsDeviceReady+0x7c>
 8007226:	897b      	ldrh	r3, [r7, #10]
 8007228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800722c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007236:	f7fe fa55 	bl	80056e4 <HAL_GetTick>
 800723a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	bf0c      	ite	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	2300      	movne	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b10      	cmp	r3, #16
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007268:	e034      	b.n	80072d4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007270:	d01a      	beq.n	80072a8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fe fa37 	bl	80056e4 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <HAL_I2C_IsDeviceReady+0xd4>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e088      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	bf0c      	ite	eq
 80072b6:	2301      	moveq	r3, #1
 80072b8:	2300      	movne	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80072d4:	7ffb      	ldrb	r3, [r7, #31]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d102      	bne.n	80072e0 <HAL_I2C_IsDeviceReady+0x12c>
 80072da:	7fbb      	ldrb	r3, [r7, #30]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c4      	beq.n	800726a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d01a      	beq.n	8007324 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2120      	movs	r1, #32
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f886 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e058      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2220      	movs	r2, #32
 800730e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e04a      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	2120      	movs	r1, #32
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f86b 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e03d      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2210      	movs	r2, #16
 8007344:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2220      	movs	r2, #32
 800734c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d118      	bne.n	8007388 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007364:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	2120      	movs	r1, #32
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f84a 	bl	800740a <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e01c      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2220      	movs	r2, #32
 8007386:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3301      	adds	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	f63f af3b 	bhi.w	800720e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	f043 0220 	orr.w	r2, r3, #32
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80073b8:	2302      	movs	r3, #2
  }
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d103      	bne.n	80073e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d007      	beq.n	80073fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
 80073fc:	619a      	str	r2, [r3, #24]
  }
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800741a:	e022      	b.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d01e      	beq.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007424:	f7fe f95e 	bl	80056e4 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <I2C_WaitOnFlagUntilTimeout+0x30>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d113      	bne.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e00f      	b.n	8007482 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4013      	ands	r3, r2
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	429a      	cmp	r2, r3
 8007470:	bf0c      	ite	eq
 8007472:	2301      	moveq	r3, #1
 8007474:	2300      	movne	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	429a      	cmp	r2, r3
 800747e:	d0cd      	beq.n	800741c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007496:	e02c      	b.n	80074f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f8dd 	bl	800765c <I2C_IsAcknowledgeFailed>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e02a      	b.n	8007502 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b2:	d01e      	beq.n	80074f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b4:	f7fe f916 	bl	80056e4 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d302      	bcc.n	80074ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	f043 0220 	orr.w	r2, r3, #32
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e007      	b.n	8007502 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d1cb      	bne.n	8007498 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007516:	e028      	b.n	800756a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f89d 	bl	800765c <I2C_IsAcknowledgeFailed>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e026      	b.n	800757a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752c:	f7fe f8da 	bl	80056e4 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d302      	bcc.n	8007542 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d113      	bne.n	800756a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e007      	b.n	800757a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b20      	cmp	r3, #32
 8007576:	d1cf      	bne.n	8007518 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007590:	e055      	b.n	800763e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f860 	bl	800765c <I2C_IsAcknowledgeFailed>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e053      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d129      	bne.n	8007608 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d105      	bne.n	80075ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e03f      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2220      	movs	r2, #32
 80075d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6859      	ldr	r1, [r3, #4]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b1d      	ldr	r3, [pc, #116]	; (8007658 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e022      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007608:	f7fe f86c 	bl	80056e4 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f043 0220 	orr.w	r2, r3, #32
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e007      	b.n	800764e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b04      	cmp	r3, #4
 800764a:	d1a2      	bne.n	8007592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	fe00e800 	.word	0xfe00e800

0800765c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b10      	cmp	r3, #16
 8007674:	d151      	bne.n	800771a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007676:	e022      	b.n	80076be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767e:	d01e      	beq.n	80076be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007680:	f7fe f830 	bl	80056e4 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <I2C_IsAcknowledgeFailed+0x3a>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d113      	bne.n	80076be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	f043 0220 	orr.w	r2, r3, #32
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e02e      	b.n	800771c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d1d5      	bne.n	8007678 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2210      	movs	r2, #16
 80076d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2220      	movs	r2, #32
 80076da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff fe70 	bl	80073c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <I2C_IsAcknowledgeFailed+0xc8>)
 80076ee:	400b      	ands	r3, r1
 80076f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	f043 0204 	orr.w	r2, r3, #4
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	fe00e800 	.word	0xfe00e800

08007728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	607b      	str	r3, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	817b      	strh	r3, [r7, #10]
 8007736:	4613      	mov	r3, r2
 8007738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	0d5b      	lsrs	r3, r3, #21
 8007744:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007748:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <I2C_TransferConfig+0x58>)
 800774a:	430b      	orrs	r3, r1
 800774c:	43db      	mvns	r3, r3
 800774e:	ea02 0103 	and.w	r1, r2, r3
 8007752:	897b      	ldrh	r3, [r7, #10]
 8007754:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007758:	7a7b      	ldrb	r3, [r7, #9]
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	431a      	orrs	r2, r3
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	431a      	orrs	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	03ff63ff 	.word	0x03ff63ff

08007784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b20      	cmp	r3, #32
 8007798:	d138      	bne.n	800780c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e032      	b.n	800780e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2224      	movs	r2, #36	; 0x24
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	e000      	b.n	800780e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800780c:	2302      	movs	r3, #2
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b20      	cmp	r3, #32
 800782e:	d139      	bne.n	80078a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800783a:	2302      	movs	r3, #2
 800783c:	e033      	b.n	80078a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2224      	movs	r2, #36	; 0x24
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800786c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0201 	orr.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e000      	b.n	80078a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078a4:	2302      	movs	r3, #2
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b4:	b08f      	sub	sp, #60	; 0x3c
 80078b6:	af0a      	add	r7, sp, #40	; 0x28
 80078b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e116      	b.n	8007af2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f00c fce2 	bl	80142a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2203      	movs	r2, #3
 80078e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f006 fce3 	bl	800e2ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	687e      	ldr	r6, [r7, #4]
 8007910:	466d      	mov	r5, sp
 8007912:	f106 0410 	add.w	r4, r6, #16
 8007916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800791a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800791c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800791e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007922:	e885 0003 	stmia.w	r5, {r0, r1}
 8007926:	1d33      	adds	r3, r6, #4
 8007928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800792a:	6838      	ldr	r0, [r7, #0]
 800792c:	f006 fbd0 	bl	800e0d0 <USB_CoreInit>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d005      	beq.n	8007942 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0d7      	b.n	8007af2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f006 fcd1 	bl	800e2f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
 8007952:	e04a      	b.n	80079ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	333d      	adds	r3, #61	; 0x3d
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007968:	7bfa      	ldrb	r2, [r7, #15]
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	333c      	adds	r3, #60	; 0x3c
 8007978:	7bfa      	ldrb	r2, [r7, #15]
 800797a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800797c:	7bfa      	ldrb	r2, [r7, #15]
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	b298      	uxth	r0, r3
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	3342      	adds	r3, #66	; 0x42
 8007990:	4602      	mov	r2, r0
 8007992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007994:	7bfa      	ldrb	r2, [r7, #15]
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	440b      	add	r3, r1
 80079a2:	333f      	adds	r3, #63	; 0x3f
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80079a8:	7bfa      	ldrb	r2, [r7, #15]
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	3344      	adds	r3, #68	; 0x44
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80079bc:	7bfa      	ldrb	r2, [r7, #15]
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	4613      	mov	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	3348      	adds	r3, #72	; 0x48
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80079d0:	7bfa      	ldrb	r2, [r7, #15]
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	4613      	mov	r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	3350      	adds	r3, #80	; 0x50
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	3301      	adds	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
 80079ea:	7bfa      	ldrb	r2, [r7, #15]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d3af      	bcc.n	8007954 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079f4:	2300      	movs	r3, #0
 80079f6:	73fb      	strb	r3, [r7, #15]
 80079f8:	e044      	b.n	8007a84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80079fa:	7bfa      	ldrb	r2, [r7, #15]
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a10:	7bfa      	ldrb	r2, [r7, #15]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007a22:	7bfa      	ldrb	r2, [r7, #15]
 8007a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007a26:	7bfa      	ldrb	r2, [r7, #15]
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007a3c:	7bfa      	ldrb	r2, [r7, #15]
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a52:	7bfa      	ldrb	r2, [r7, #15]
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	3301      	adds	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3b5      	bcc.n	80079fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	687e      	ldr	r6, [r7, #4]
 8007a96:	466d      	mov	r5, sp
 8007a98:	f106 0410 	add.w	r4, r6, #16
 8007a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007aac:	1d33      	adds	r3, r6, #4
 8007aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ab0:	6838      	ldr	r0, [r7, #0]
 8007ab2:	f006 fc47 	bl	800e344 <USB_DevInit>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e014      	b.n	8007af2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d102      	bne.n	8007ae6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ff61 	bl	80089a8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f007 fbc0 	bl	800f270 <USB_DevDisconnect>

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007afa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_PCD_Start+0x1c>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e01c      	b.n	8007b50 <HAL_PCD_Start+0x56>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d105      	bne.n	8007b32 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f007 fb82 	bl	800f240 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f006 fbb3 	bl	800e2ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b08d      	sub	sp, #52	; 0x34
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f007 fc29 	bl	800f3c6 <USB_GetMode>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 838f 	bne.w	800829a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f007 fb8d 	bl	800f2a0 <USB_ReadInterrupts>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8385 	beq.w	8008298 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f007 fb84 	bl	800f2a0 <USB_ReadInterrupts>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d107      	bne.n	8007bb2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695a      	ldr	r2, [r3, #20]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f002 0202 	and.w	r2, r2, #2
 8007bb0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f007 fb72 	bl	800f2a0 <USB_ReadInterrupts>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b10      	cmp	r3, #16
 8007bc4:	d161      	bne.n	8007c8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0210 	bic.w	r2, r2, #16
 8007bd4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f003 020f 	and.w	r2, r3, #15
 8007be2:	4613      	mov	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	0c5b      	lsrs	r3, r3, #17
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d124      	bne.n	8007c4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d035      	beq.n	8007c7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	091b      	lsrs	r3, r3, #4
 8007c16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6a38      	ldr	r0, [r7, #32]
 8007c22:	f007 f9ea 	bl	800effa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c32:	441a      	add	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c44:	441a      	add	r2, r3
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	619a      	str	r2, [r3, #24]
 8007c4a:	e016      	b.n	8007c7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	0c5b      	lsrs	r3, r3, #17
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	2b06      	cmp	r3, #6
 8007c56:	d110      	bne.n	8007c7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c5e:	2208      	movs	r2, #8
 8007c60:	4619      	mov	r1, r3
 8007c62:	6a38      	ldr	r0, [r7, #32]
 8007c64:	f007 f9c9 	bl	800effa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	699a      	ldr	r2, [r3, #24]
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	091b      	lsrs	r3, r3, #4
 8007c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c74:	441a      	add	r2, r3
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0210 	orr.w	r2, r2, #16
 8007c88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f007 fb06 	bl	800f2a0 <USB_ReadInterrupts>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c9e:	d16e      	bne.n	8007d7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f007 fb0c 	bl	800f2c6 <USB_ReadDevAllOutEpInterrupt>
 8007cae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007cb0:	e062      	b.n	8007d78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d057      	beq.n	8007d6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f007 fb31 	bl	800f32e <USB_ReadDevOutEPInterrupt>
 8007ccc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd81 	bl	80087f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fdbd 	bl	8008890 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	2310      	movs	r3, #16
 8007d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d64:	461a      	mov	r2, r3
 8007d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	3301      	adds	r3, #1
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d199      	bne.n	8007cb2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f007 fa8c 	bl	800f2a0 <USB_ReadInterrupts>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d92:	f040 8087 	bne.w	8007ea4 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f007 faad 	bl	800f2fa <USB_ReadDevAllInEpInterrupt>
 8007da0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007da6:	e07a      	b.n	8007e9e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d06f      	beq.n	8007e92 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f007 fad4 	bl	800f36a <USB_ReadDevInEPInterrupt>
 8007dc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	f003 030f 	and.w	r3, r3, #15
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69f9      	ldr	r1, [r7, #28]
 8007dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dee:	4013      	ands	r3, r2
 8007df0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2301      	movs	r3, #1
 8007e02:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f00c fadf 	bl	80143ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	461a      	mov	r2, r3
 8007e28:	2308      	movs	r3, #8
 8007e2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e42:	461a      	mov	r2, r3
 8007e44:	2310      	movs	r3, #16
 8007e46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d008      	beq.n	8007e64 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2340      	movs	r3, #64	; 0x40
 8007e62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc29 	bl	80086e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	3301      	adds	r3, #1
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d181      	bne.n	8007da8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f007 f9f9 	bl	800f2a0 <USB_ReadInterrupts>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eb8:	d122      	bne.n	8007f00 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d108      	bne.n	8007eea <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f00c fd90 	bl	8014a08 <HAL_PCDEx_LPM_Callback>
 8007ee8:	e002      	b.n	8007ef0 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f00c fadc 	bl	80144a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695a      	ldr	r2, [r3, #20]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f007 f9cb 	bl	800f2a0 <USB_ReadInterrupts>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f14:	d112      	bne.n	8007f3c <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d102      	bne.n	8007f2c <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f00c fa98 	bl	801445c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695a      	ldr	r2, [r3, #20]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007f3a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f007 f9ad 	bl	800f2a0 <USB_ReadInterrupts>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f50:	d121      	bne.n	8007f96 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007f60:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d111      	bne.n	8007f90 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007f86:	2101      	movs	r1, #1
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f00c fd3d 	bl	8014a08 <HAL_PCDEx_LPM_Callback>
 8007f8e:	e002      	b.n	8007f96 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f00c fa63 	bl	801445c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f007 f980 	bl	800f2a0 <USB_ReadInterrupts>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	f040 80c5 	bne.w	8008138 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2110      	movs	r1, #16
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f006 fb07 	bl	800e5dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	e056      	b.n	8008082 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fe6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008006:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008026:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800803a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800805a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800807a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807e:	3301      	adds	r3, #1
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008088:	429a      	cmp	r2, r3
 800808a:	d3a3      	bcc.n	8007fd4 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800809a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800809e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d016      	beq.n	80080d6 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080b8:	f043 030b 	orr.w	r3, r3, #11
 80080bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ce:	f043 030b 	orr.w	r3, r3, #11
 80080d2:	6453      	str	r3, [r2, #68]	; 0x44
 80080d4:	e015      	b.n	8008102 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80080ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080fc:	f043 030b 	orr.w	r3, r3, #11
 8008100:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008110:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008114:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f007 f980 	bl	800f428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f007 f8af 	bl	800f2a0 <USB_ReadInterrupts>
 8008142:	4603      	mov	r3, r0
 8008144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814c:	d124      	bne.n	8008198 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f007 f945 	bl	800f3e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f006 fa9e 	bl	800e69e <USB_GetDevSpeed>
 8008162:	4603      	mov	r3, r0
 8008164:	461a      	mov	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681c      	ldr	r4, [r3, #0]
 800816e:	f001 fb33 	bl	80097d8 <HAL_RCC_GetHCLKFreq>
 8008172:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008178:	b2db      	uxtb	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	4620      	mov	r0, r4
 800817e:	f005 fff9 	bl	800e174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f00c f94b 	bl	801441e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008196:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f007 f87f 	bl	800f2a0 <USB_ReadInterrupts>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d10a      	bne.n	80081c2 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f00c f928 	bl	8014402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695a      	ldr	r2, [r3, #20]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f002 0208 	and.w	r2, r2, #8
 80081c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f007 f86a 	bl	800f2a0 <USB_ReadInterrupts>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d6:	d10f      	bne.n	80081f8 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f00c f99a 	bl	801451c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80081f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f007 f84f 	bl	800f2a0 <USB_ReadInterrupts>
 8008202:	4603      	mov	r3, r0
 8008204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800820c:	d10f      	bne.n	800822e <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	b2db      	uxtb	r3, r3
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f00c f96d 	bl	80144f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695a      	ldr	r2, [r3, #20]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800822c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f007 f834 	bl	800f2a0 <USB_ReadInterrupts>
 8008238:	4603      	mov	r3, r0
 800823a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008242:	d10a      	bne.n	800825a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f00c f97b 	bl	8014540 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f007 f81e 	bl	800f2a0 <USB_ReadInterrupts>
 8008264:	4603      	mov	r3, r0
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d115      	bne.n	800829a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f00c f96b 	bl	801455c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6859      	ldr	r1, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	e000      	b.n	800829a <HAL_PCD_IRQHandler+0x742>
      return;
 8008298:	bf00      	nop
    }
  }
}
 800829a:	3734      	adds	r7, #52	; 0x34
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <HAL_PCD_SetAddress+0x1a>
 80082b6:	2302      	movs	r3, #2
 80082b8:	e013      	b.n	80082e2 <HAL_PCD_SetAddress+0x42>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f006 ff8e 	bl	800f1f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	70fb      	strb	r3, [r7, #3]
 80082fc:	460b      	mov	r3, r1
 80082fe:	803b      	strh	r3, [r7, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800830c:	2b00      	cmp	r3, #0
 800830e:	da0f      	bge.n	8008330 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	4613      	mov	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	3338      	adds	r3, #56	; 0x38
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	4413      	add	r3, r2
 8008324:	3304      	adds	r3, #4
 8008326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	705a      	strb	r2, [r3, #1]
 800832e:	e00f      	b.n	8008350 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	4613      	mov	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	4413      	add	r3, r2
 8008346:	3304      	adds	r3, #4
 8008348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	b2da      	uxtb	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800835c:	883a      	ldrh	r2, [r7, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	78ba      	ldrb	r2, [r7, #2]
 8008366:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800837a:	78bb      	ldrb	r3, [r7, #2]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d102      	bne.n	8008386 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_PCD_EP_Open+0xaa>
 8008390:	2302      	movs	r3, #2
 8008392:	e00e      	b.n	80083b2 <HAL_PCD_EP_Open+0xc8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68f9      	ldr	r1, [r7, #12]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f006 f99a 	bl	800e6dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	da0f      	bge.n	80083ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	3338      	adds	r3, #56	; 0x38
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	3304      	adds	r3, #4
 80083e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	705a      	strb	r2, [r3, #1]
 80083ec:	e00f      	b.n	800840e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083ee:	78fb      	ldrb	r3, [r7, #3]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	b2da      	uxtb	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_PCD_EP_Close+0x6e>
 8008424:	2302      	movs	r3, #2
 8008426:	e00e      	b.n	8008446 <HAL_PCD_EP_Close+0x8c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68f9      	ldr	r1, [r7, #12]
 8008436:	4618      	mov	r0, r3
 8008438:	f006 f9d8 	bl	800e7ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
 800845a:	460b      	mov	r3, r1
 800845c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2200      	movs	r2, #0
 8008488:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2200      	movs	r2, #0
 800848e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	b2da      	uxtb	r2, r3
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6979      	ldr	r1, [r7, #20]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f006 fc55 	bl	800ed5c <USB_EP0StartXfer>
 80084b2:	e005      	b.n	80084c0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6979      	ldr	r1, [r7, #20]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f006 fa72 	bl	800e9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	f003 020f 	and.w	r2, r3, #15
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	4613      	mov	r3, r2
 80084e0:	00db      	lsls	r3, r3, #3
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	440b      	add	r3, r1
 80084e8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80084ec:	681b      	ldr	r3, [r3, #0]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	460b      	mov	r3, r1
 8008508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	4613      	mov	r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	3338      	adds	r3, #56	; 0x38
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	3304      	adds	r3, #4
 8008520:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2200      	movs	r2, #0
 8008532:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2201      	movs	r2, #1
 8008538:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	b2da      	uxtb	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	4618      	mov	r0, r3
 8008558:	f006 fc00 	bl	800ed5c <USB_EP0StartXfer>
 800855c:	e005      	b.n	800856a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6979      	ldr	r1, [r7, #20]
 8008564:	4618      	mov	r0, r3
 8008566:	f006 fa1d 	bl	800e9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	f003 020f 	and.w	r2, r3, #15
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	429a      	cmp	r2, r3
 800858c:	d901      	bls.n	8008592 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e04e      	b.n	8008630 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008596:	2b00      	cmp	r3, #0
 8008598:	da0f      	bge.n	80085ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	f003 020f 	and.w	r2, r3, #15
 80085a0:	4613      	mov	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	3338      	adds	r3, #56	; 0x38
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	705a      	strb	r2, [r3, #1]
 80085b8:	e00d      	b.n	80085d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	4413      	add	r3, r2
 80085cc:	3304      	adds	r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_PCD_EP_SetStall+0x82>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e01c      	b.n	8008630 <HAL_PCD_EP_SetStall+0xbc>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	4618      	mov	r0, r3
 8008606:	f006 fd21 	bl	800f04c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	2b00      	cmp	r3, #0
 8008612:	d108      	bne.n	8008626 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f006 ff01 	bl	800f428 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d901      	bls.n	8008656 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e042      	b.n	80086dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800865a:	2b00      	cmp	r3, #0
 800865c:	da0f      	bge.n	800867e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	3338      	adds	r3, #56	; 0x38
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	4413      	add	r3, r2
 8008672:	3304      	adds	r3, #4
 8008674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	705a      	strb	r2, [r3, #1]
 800867c:	e00f      	b.n	800869e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	f003 020f 	and.w	r2, r3, #15
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	3304      	adds	r3, #4
 8008696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	f003 030f 	and.w	r3, r3, #15
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <HAL_PCD_EP_ClrStall+0x86>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e00e      	b.n	80086dc <HAL_PCD_EP_ClrStall+0xa4>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f006 fd2b 	bl	800f128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	3338      	adds	r3, #56	; 0x38
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4413      	add	r3, r2
 8008708:	3304      	adds	r3, #4
 800870a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	699a      	ldr	r2, [r3, #24]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	429a      	cmp	r2, r3
 8008716:	d901      	bls.n	800871c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e067      	b.n	80087ec <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	695a      	ldr	r2, [r3, #20]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	429a      	cmp	r2, r3
 8008730:	d902      	bls.n	8008738 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	3303      	adds	r3, #3
 800873c:	089b      	lsrs	r3, r3, #2
 800873e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008740:	e026      	b.n	8008790 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	429a      	cmp	r2, r3
 8008756:	d902      	bls.n	800875e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	3303      	adds	r3, #3
 8008762:	089b      	lsrs	r3, r3, #2
 8008764:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68d9      	ldr	r1, [r3, #12]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	b2da      	uxtb	r2, r3
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	b29b      	uxth	r3, r3
 8008772:	6978      	ldr	r0, [r7, #20]
 8008774:	f006 fc10 	bl	800ef98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	441a      	add	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	441a      	add	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d809      	bhi.n	80087ba <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d203      	bcs.n	80087ba <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1c3      	bne.n	8008742 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d811      	bhi.n	80087ea <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	2201      	movs	r2, #1
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	43db      	mvns	r3, r3
 80087e0:	6939      	ldr	r1, [r7, #16]
 80087e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087e6:	4013      	ands	r3, r2
 80087e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	333c      	adds	r3, #60	; 0x3c
 800880c:	3304      	adds	r3, #4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4a19      	ldr	r2, [pc, #100]	; (800888c <PCD_EP_OutXfrComplete_int+0x98>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d124      	bne.n	8008874 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008840:	461a      	mov	r2, r3
 8008842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008846:	6093      	str	r3, [r2, #8]
 8008848:	e01a      	b.n	8008880 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f003 0320 	and.w	r3, r3, #32
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008860:	461a      	mov	r2, r3
 8008862:	2320      	movs	r3, #32
 8008864:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f00b fd93 	bl	8014398 <HAL_PCD_DataOutStageCallback>
 8008872:	e005      	b.n	8008880 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f00b fd8c 	bl	8014398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	4f54310a 	.word	0x4f54310a

08008890 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	333c      	adds	r3, #60	; 0x3c
 80088a8:	3304      	adds	r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4a0c      	ldr	r2, [pc, #48]	; (80088f4 <PCD_EP_OutSetupPacket_int+0x64>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d90e      	bls.n	80088e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088dc:	461a      	mov	r2, r3
 80088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f00b fd45 	bl	8014374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	4f54300a 	.word	0x4f54300a

080088f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
 8008904:	4613      	mov	r3, r2
 8008906:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008916:	883b      	ldrh	r3, [r7, #0]
 8008918:	0419      	lsls	r1, r3, #16
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	430a      	orrs	r2, r1
 8008922:	629a      	str	r2, [r3, #40]	; 0x28
 8008924:	e028      	b.n	8008978 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
 8008938:	e00d      	b.n	8008956 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	3340      	adds	r3, #64	; 0x40
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	0c1b      	lsrs	r3, r3, #16
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4413      	add	r3, r2
 800894e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	3301      	adds	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	3b01      	subs	r3, #1
 800895c:	429a      	cmp	r2, r3
 800895e:	d3ec      	bcc.n	800893a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008960:	883b      	ldrh	r3, [r7, #0]
 8008962:	0418      	lsls	r0, r3, #16
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6819      	ldr	r1, [r3, #0]
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	3b01      	subs	r3, #1
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	4302      	orrs	r2, r0
 8008970:	3340      	adds	r3, #64	; 0x40
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	887a      	ldrh	r2, [r7, #2]
 8008998:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089da:	f043 0303 	orr.w	r3, r3, #3
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80089fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089fe:	6013      	str	r3, [r2, #0]
}
 8008a00:	bf00      	nop
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40007000 	.word	0x40007000

08008a10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <HAL_PWREx_GetVoltageRange+0x18>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40007000 	.word	0x40007000

08008a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a3a:	d130      	bne.n	8008a9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a3c:	4b23      	ldr	r3, [pc, #140]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a48:	d038      	beq.n	8008abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a4a:	4b20      	ldr	r3, [pc, #128]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2232      	movs	r2, #50	; 0x32
 8008a60:	fb02 f303 	mul.w	r3, r2, r3
 8008a64:	4a1b      	ldr	r2, [pc, #108]	; (8008ad4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008a66:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6a:	0c9b      	lsrs	r3, r3, #18
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a70:	e002      	b.n	8008a78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a78:	4b14      	ldr	r3, [pc, #80]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a84:	d102      	bne.n	8008a8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1f2      	bne.n	8008a72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a98:	d110      	bne.n	8008abc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e00f      	b.n	8008abe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a9e:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aaa:	d007      	beq.n	8008abc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008aac:	4b07      	ldr	r3, [pc, #28]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ab4:	4a05      	ldr	r2, [pc, #20]	; (8008acc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008aba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40007000 	.word	0x40007000
 8008ad0:	20000058 	.word	0x20000058
 8008ad4:	431bde83 	.word	0x431bde83

08008ad8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ae6:	6053      	str	r3, [r2, #4]
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40007000 	.word	0x40007000

08008af8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b06:	6053      	str	r3, [r2, #4]
}
 8008b08:	bf00      	nop
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40007000 	.word	0x40007000

08008b18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008b20:	f7fc fde0 	bl	80056e4 <HAL_GetTick>
 8008b24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e075      	b.n	8008c1c <HAL_QSPI_Init+0x104>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_QSPI_Init+0x28>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e06d      	b.n	8008c1c <HAL_QSPI_Init+0x104>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fc f94b 	bl	8004df8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008b62:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f85e 	bl	8008c28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	021a      	lsls	r2, r3, #8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2120      	movs	r1, #32
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f856 	bl	8008c44 <QSPI_WaitFlagStateUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d137      	bne.n	8008c12 <HAL_QSPI_Init+0xfa>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bac:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6852      	ldr	r2, [r2, #4]
 8008bb4:	0611      	lsls	r1, r2, #24
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68d2      	ldr	r2, [r2, #12]
 8008bba:	4311      	orrs	r1, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	69d2      	ldr	r2, [r2, #28]
 8008bc0:	4311      	orrs	r1, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6a12      	ldr	r2, [r2, #32]
 8008bc6:	4311      	orrs	r1, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <HAL_QSPI_Init+0x10c>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6912      	ldr	r2, [r2, #16]
 8008bde:	0411      	lsls	r1, r2, #16
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6952      	ldr	r2, [r2, #20]
 8008be4:	4311      	orrs	r1, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6992      	ldr	r2, [r2, #24]
 8008bea:	4311      	orrs	r1, r2
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6812      	ldr	r2, [r2, #0]
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0201 	orr.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	ffe0f8fe 	.word	0xffe0f8fe

08008c28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	4613      	mov	r3, r2
 8008c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008c54:	e01a      	b.n	8008c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c5c:	d016      	beq.n	8008c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5e:	f7fc fd41 	bl	80056e4 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d302      	bcc.n	8008c74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2204      	movs	r2, #4
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c80:	f043 0201 	orr.w	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e00e      	b.n	8008caa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d1d6      	bne.n	8008c56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f000 bc16 	b.w	80094f4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc8:	4ba0      	ldr	r3, [pc, #640]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f003 030c 	and.w	r3, r3, #12
 8008cd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd2:	4b9e      	ldr	r3, [pc, #632]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0310 	and.w	r3, r3, #16
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 80e4 	beq.w	8008eb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <HAL_RCC_OscConfig+0x4c>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b0c      	cmp	r3, #12
 8008cf4:	f040 808b 	bne.w	8008e0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	f040 8087 	bne.w	8008e0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d00:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <HAL_RCC_OscConfig+0x64>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e3ed      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1a      	ldr	r2, [r3, #32]
 8008d1c:	4b8b      	ldr	r3, [pc, #556]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <HAL_RCC_OscConfig+0x7e>
 8008d28:	4b88      	ldr	r3, [pc, #544]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d30:	e005      	b.n	8008d3e <HAL_RCC_OscConfig+0x8a>
 8008d32:	4b86      	ldr	r3, [pc, #536]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d38:	091b      	lsrs	r3, r3, #4
 8008d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d223      	bcs.n	8008d8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fdb0 	bl	80098ac <RCC_SetFlashLatencyFromMSIRange>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e3ce      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d56:	4b7d      	ldr	r3, [pc, #500]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a7c      	ldr	r2, [pc, #496]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d5c:	f043 0308 	orr.w	r3, r3, #8
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4b7a      	ldr	r3, [pc, #488]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	4977      	ldr	r1, [pc, #476]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d74:	4b75      	ldr	r3, [pc, #468]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	4972      	ldr	r1, [pc, #456]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	604b      	str	r3, [r1, #4]
 8008d88:	e025      	b.n	8008dd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d8a:	4b70      	ldr	r3, [pc, #448]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a6f      	ldr	r2, [pc, #444]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d90:	f043 0308 	orr.w	r3, r3, #8
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	4b6d      	ldr	r3, [pc, #436]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	496a      	ldr	r1, [pc, #424]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008da8:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	4965      	ldr	r1, [pc, #404]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fd70 	bl	80098ac <RCC_SetFlashLatencyFromMSIRange>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e38e      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008dd6:	f000 fc75 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 8008dda:	4601      	mov	r1, r0
 8008ddc:	4b5b      	ldr	r3, [pc, #364]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	091b      	lsrs	r3, r3, #4
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	4a5a      	ldr	r2, [pc, #360]	; (8008f50 <HAL_RCC_OscConfig+0x29c>)
 8008de8:	5cd3      	ldrb	r3, [r2, r3]
 8008dea:	f003 031f 	and.w	r3, r3, #31
 8008dee:	fa21 f303 	lsr.w	r3, r1, r3
 8008df2:	4a58      	ldr	r2, [pc, #352]	; (8008f54 <HAL_RCC_OscConfig+0x2a0>)
 8008df4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008df6:	4b58      	ldr	r3, [pc, #352]	; (8008f58 <HAL_RCC_OscConfig+0x2a4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fc fa14 	bl	8005228 <HAL_InitTick>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d052      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	e372      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d032      	beq.n	8008e7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008e16:	4b4d      	ldr	r3, [pc, #308]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a4c      	ldr	r2, [pc, #304]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e1c:	f043 0301 	orr.w	r3, r3, #1
 8008e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e22:	f7fc fc5f 	bl	80056e4 <HAL_GetTick>
 8008e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e28:	e008      	b.n	8008e3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e2a:	f7fc fc5b 	bl	80056e4 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d901      	bls.n	8008e3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e35b      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e3c:	4b43      	ldr	r3, [pc, #268]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f0      	beq.n	8008e2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e48:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a3f      	ldr	r2, [pc, #252]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e4e:	f043 0308 	orr.w	r3, r3, #8
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b3d      	ldr	r3, [pc, #244]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	493a      	ldr	r1, [pc, #232]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	4935      	ldr	r1, [pc, #212]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	604b      	str	r3, [r1, #4]
 8008e7a:	e01a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e7c:	4b33      	ldr	r3, [pc, #204]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a32      	ldr	r2, [pc, #200]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008e82:	f023 0301 	bic.w	r3, r3, #1
 8008e86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008e88:	f7fc fc2c 	bl	80056e4 <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e90:	f7fc fc28 	bl	80056e4 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e328      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008ea2:	4b2a      	ldr	r3, [pc, #168]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f0      	bne.n	8008e90 <HAL_RCC_OscConfig+0x1dc>
 8008eae:	e000      	b.n	8008eb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d073      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d005      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x21c>
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b0c      	cmp	r3, #12
 8008ec8:	d10e      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d10b      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed0:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d063      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x2f0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d15f      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e305      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef0:	d106      	bne.n	8008f00 <HAL_RCC_OscConfig+0x24c>
 8008ef2:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	e01d      	b.n	8008f3c <HAL_RCC_OscConfig+0x288>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f08:	d10c      	bne.n	8008f24 <HAL_RCC_OscConfig+0x270>
 8008f0a:	4b10      	ldr	r3, [pc, #64]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a0f      	ldr	r2, [pc, #60]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	e00b      	b.n	8008f3c <HAL_RCC_OscConfig+0x288>
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <HAL_RCC_OscConfig+0x298>)
 8008f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01b      	beq.n	8008f7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f44:	f7fc fbce 	bl	80056e4 <HAL_GetTick>
 8008f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f4a:	e010      	b.n	8008f6e <HAL_RCC_OscConfig+0x2ba>
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	08017ef4 	.word	0x08017ef4
 8008f54:	20000058 	.word	0x20000058
 8008f58:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f5c:	f7fc fbc2 	bl	80056e4 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b64      	cmp	r3, #100	; 0x64
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e2c2      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f6e:	4baf      	ldr	r3, [pc, #700]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x2a8>
 8008f7a:	e014      	b.n	8008fa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7fc fbb2 	bl	80056e4 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f84:	f7fc fbae 	bl	80056e4 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b64      	cmp	r3, #100	; 0x64
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e2ae      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f96:	4ba5      	ldr	r3, [pc, #660]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0x2d0>
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d060      	beq.n	8009074 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d005      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x310>
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2b0c      	cmp	r3, #12
 8008fbc:	d119      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d116      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc4:	4b99      	ldr	r3, [pc, #612]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d005      	beq.n	8008fdc <HAL_RCC_OscConfig+0x328>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e28b      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fdc:	4b93      	ldr	r3, [pc, #588]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	4990      	ldr	r1, [pc, #576]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff0:	e040      	b.n	8009074 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d023      	beq.n	8009042 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ffa:	4b8c      	ldr	r3, [pc, #560]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a8b      	ldr	r2, [pc, #556]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009006:	f7fc fb6d 	bl	80056e4 <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800900e:	f7fc fb69 	bl	80056e4 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e269      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009020:	4b82      	ldr	r3, [pc, #520]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f0      	beq.n	800900e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902c:	4b7f      	ldr	r3, [pc, #508]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	061b      	lsls	r3, r3, #24
 800903a:	497c      	ldr	r1, [pc, #496]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800903c:	4313      	orrs	r3, r2
 800903e:	604b      	str	r3, [r1, #4]
 8009040:	e018      	b.n	8009074 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009042:	4b7a      	ldr	r3, [pc, #488]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a79      	ldr	r2, [pc, #484]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904e:	f7fc fb49 	bl	80056e4 <HAL_GetTick>
 8009052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009054:	e008      	b.n	8009068 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009056:	f7fc fb45 	bl	80056e4 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e245      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009068:	4b70      	ldr	r3, [pc, #448]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f0      	bne.n	8009056 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0308 	and.w	r3, r3, #8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d03c      	beq.n	80090fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01c      	beq.n	80090c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009088:	4b68      	ldr	r3, [pc, #416]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800908a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800908e:	4a67      	ldr	r2, [pc, #412]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009098:	f7fc fb24 	bl	80056e4 <HAL_GetTick>
 800909c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a0:	f7fc fb20 	bl	80056e4 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e220      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090b2:	4b5e      	ldr	r3, [pc, #376]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80090b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0ef      	beq.n	80090a0 <HAL_RCC_OscConfig+0x3ec>
 80090c0:	e01b      	b.n	80090fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090c2:	4b5a      	ldr	r3, [pc, #360]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80090c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090c8:	4a58      	ldr	r2, [pc, #352]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80090ca:	f023 0301 	bic.w	r3, r3, #1
 80090ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d2:	f7fc fb07 	bl	80056e4 <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090d8:	e008      	b.n	80090ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090da:	f7fc fb03 	bl	80056e4 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e203      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090ec:	4b4f      	ldr	r3, [pc, #316]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80090ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1ef      	bne.n	80090da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a6 	beq.w	8009254 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009108:	2300      	movs	r3, #0
 800910a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800910c:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009118:	4b44      	ldr	r3, [pc, #272]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800911a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911c:	4a43      	ldr	r2, [pc, #268]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800911e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009122:	6593      	str	r3, [r2, #88]	; 0x58
 8009124:	4b41      	ldr	r3, [pc, #260]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009130:	2301      	movs	r3, #1
 8009132:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009134:	4b3e      	ldr	r3, [pc, #248]	; (8009230 <HAL_RCC_OscConfig+0x57c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913c:	2b00      	cmp	r3, #0
 800913e:	d118      	bne.n	8009172 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009140:	4b3b      	ldr	r3, [pc, #236]	; (8009230 <HAL_RCC_OscConfig+0x57c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a3a      	ldr	r2, [pc, #232]	; (8009230 <HAL_RCC_OscConfig+0x57c>)
 8009146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800914a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800914c:	f7fc faca 	bl	80056e4 <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009154:	f7fc fac6 	bl	80056e4 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e1c6      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009166:	4b32      	ldr	r3, [pc, #200]	; (8009230 <HAL_RCC_OscConfig+0x57c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d108      	bne.n	800918c <HAL_RCC_OscConfig+0x4d8>
 800917a:	4b2c      	ldr	r3, [pc, #176]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800917c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009180:	4a2a      	ldr	r2, [pc, #168]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009182:	f043 0301 	orr.w	r3, r3, #1
 8009186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800918a:	e024      	b.n	80091d6 <HAL_RCC_OscConfig+0x522>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	2b05      	cmp	r3, #5
 8009192:	d110      	bne.n	80091b6 <HAL_RCC_OscConfig+0x502>
 8009194:	4b25      	ldr	r3, [pc, #148]	; (800922c <HAL_RCC_OscConfig+0x578>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919a:	4a24      	ldr	r2, [pc, #144]	; (800922c <HAL_RCC_OscConfig+0x578>)
 800919c:	f043 0304 	orr.w	r3, r3, #4
 80091a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091a4:	4b21      	ldr	r3, [pc, #132]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091aa:	4a20      	ldr	r2, [pc, #128]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091b4:	e00f      	b.n	80091d6 <HAL_RCC_OscConfig+0x522>
 80091b6:	4b1d      	ldr	r3, [pc, #116]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091bc:	4a1b      	ldr	r2, [pc, #108]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091be:	f023 0301 	bic.w	r3, r3, #1
 80091c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091c6:	4b19      	ldr	r3, [pc, #100]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	4a17      	ldr	r2, [pc, #92]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091ce:	f023 0304 	bic.w	r3, r3, #4
 80091d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d016      	beq.n	800920c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091de:	f7fc fa81 	bl	80056e4 <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091e4:	e00a      	b.n	80091fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091e6:	f7fc fa7d 	bl	80056e4 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e17b      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <HAL_RCC_OscConfig+0x578>)
 80091fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0ed      	beq.n	80091e6 <HAL_RCC_OscConfig+0x532>
 800920a:	e01a      	b.n	8009242 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800920c:	f7fc fa6a 	bl	80056e4 <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009212:	e00f      	b.n	8009234 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009214:	f7fc fa66 	bl	80056e4 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009222:	4293      	cmp	r3, r2
 8009224:	d906      	bls.n	8009234 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e164      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
 800922a:	bf00      	nop
 800922c:	40021000 	.word	0x40021000
 8009230:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009234:	4ba8      	ldr	r3, [pc, #672]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e8      	bne.n	8009214 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009242:	7ffb      	ldrb	r3, [r7, #31]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d105      	bne.n	8009254 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009248:	4ba3      	ldr	r3, [pc, #652]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800924a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924c:	4aa2      	ldr	r2, [pc, #648]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009252:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03c      	beq.n	80092da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01c      	beq.n	80092a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009268:	4b9b      	ldr	r3, [pc, #620]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800926a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800926e:	4a9a      	ldr	r2, [pc, #616]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009278:	f7fc fa34 	bl	80056e4 <HAL_GetTick>
 800927c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800927e:	e008      	b.n	8009292 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009280:	f7fc fa30 	bl	80056e4 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d901      	bls.n	8009292 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e130      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009292:	4b91      	ldr	r3, [pc, #580]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0ef      	beq.n	8009280 <HAL_RCC_OscConfig+0x5cc>
 80092a0:	e01b      	b.n	80092da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a2:	4b8d      	ldr	r3, [pc, #564]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80092a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a8:	4a8b      	ldr	r2, [pc, #556]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b2:	f7fc fa17 	bl	80056e4 <HAL_GetTick>
 80092b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ba:	f7fc fa13 	bl	80056e4 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e113      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092cc:	4b82      	ldr	r3, [pc, #520]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80092ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1ef      	bne.n	80092ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8107 	beq.w	80094f2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f040 80cb 	bne.w	8009484 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80092ee:	4b7a      	ldr	r3, [pc, #488]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f003 0203 	and.w	r2, r3, #3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	429a      	cmp	r2, r3
 8009300:	d12c      	bne.n	800935c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930c:	3b01      	subs	r3, #1
 800930e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009310:	429a      	cmp	r2, r3
 8009312:	d123      	bne.n	800935c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009320:	429a      	cmp	r2, r3
 8009322:	d11b      	bne.n	800935c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009330:	429a      	cmp	r2, r3
 8009332:	d113      	bne.n	800935c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	3b01      	subs	r3, #1
 8009342:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009344:	429a      	cmp	r2, r3
 8009346:	d109      	bne.n	800935c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	085b      	lsrs	r3, r3, #1
 8009354:	3b01      	subs	r3, #1
 8009356:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009358:	429a      	cmp	r2, r3
 800935a:	d06d      	beq.n	8009438 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	2b0c      	cmp	r3, #12
 8009360:	d068      	beq.n	8009434 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009362:	4b5d      	ldr	r3, [pc, #372]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800936e:	4b5a      	ldr	r3, [pc, #360]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e0ba      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800937e:	4b56      	ldr	r3, [pc, #344]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a55      	ldr	r2, [pc, #340]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009388:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800938a:	f7fc f9ab 	bl	80056e4 <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009390:	e008      	b.n	80093a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009392:	f7fc f9a7 	bl	80056e4 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e0a7      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093a4:	4b4c      	ldr	r3, [pc, #304]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1f0      	bne.n	8009392 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093b0:	4b49      	ldr	r3, [pc, #292]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	4b49      	ldr	r3, [pc, #292]	; (80094dc <HAL_RCC_OscConfig+0x828>)
 80093b6:	4013      	ands	r3, r2
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093c0:	3a01      	subs	r2, #1
 80093c2:	0112      	lsls	r2, r2, #4
 80093c4:	4311      	orrs	r1, r2
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093ca:	0212      	lsls	r2, r2, #8
 80093cc:	4311      	orrs	r1, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093d2:	0852      	lsrs	r2, r2, #1
 80093d4:	3a01      	subs	r2, #1
 80093d6:	0552      	lsls	r2, r2, #21
 80093d8:	4311      	orrs	r1, r2
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80093de:	0852      	lsrs	r2, r2, #1
 80093e0:	3a01      	subs	r2, #1
 80093e2:	0652      	lsls	r2, r2, #25
 80093e4:	4311      	orrs	r1, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093ea:	06d2      	lsls	r2, r2, #27
 80093ec:	430a      	orrs	r2, r1
 80093ee:	493a      	ldr	r1, [pc, #232]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80093f4:	4b38      	ldr	r3, [pc, #224]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a37      	ldr	r2, [pc, #220]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80093fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009400:	4b35      	ldr	r3, [pc, #212]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a34      	ldr	r2, [pc, #208]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800940a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800940c:	f7fc f96a 	bl	80056e4 <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009412:	e008      	b.n	8009426 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009414:	f7fc f966 	bl	80056e4 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d901      	bls.n	8009426 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e066      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009426:	4b2c      	ldr	r3, [pc, #176]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009432:	e05e      	b.n	80094f2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e05d      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009438:	4b27      	ldr	r3, [pc, #156]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d156      	bne.n	80094f2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a23      	ldr	r2, [pc, #140]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800944a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800944e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009450:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	4a20      	ldr	r2, [pc, #128]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800945a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800945c:	f7fc f942 	bl	80056e4 <HAL_GetTick>
 8009460:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009462:	e008      	b.n	8009476 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009464:	f7fc f93e 	bl	80056e4 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b02      	cmp	r3, #2
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e03e      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d0f0      	beq.n	8009464 <HAL_RCC_OscConfig+0x7b0>
 8009482:	e036      	b.n	80094f2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b0c      	cmp	r3, #12
 8009488:	d031      	beq.n	80094ee <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800948a:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a12      	ldr	r2, [pc, #72]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009494:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	4a09      	ldr	r2, [pc, #36]	; (80094d8 <HAL_RCC_OscConfig+0x824>)
 80094b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80094b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094be:	f7fc f911 	bl	80056e4 <HAL_GetTick>
 80094c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094c4:	e00c      	b.n	80094e0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c6:	f7fc f90d 	bl	80056e4 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d905      	bls.n	80094e0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e00d      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
 80094d8:	40021000 	.word	0x40021000
 80094dc:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094e0:	4b06      	ldr	r3, [pc, #24]	; (80094fc <HAL_RCC_OscConfig+0x848>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1ec      	bne.n	80094c6 <HAL_RCC_OscConfig+0x812>
 80094ec:	e001      	b.n	80094f2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40021000 	.word	0x40021000

08009500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e0c8      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009514:	4b66      	ldr	r3, [pc, #408]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d910      	bls.n	8009544 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009522:	4b63      	ldr	r3, [pc, #396]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f023 0207 	bic.w	r2, r3, #7
 800952a:	4961      	ldr	r1, [pc, #388]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	4313      	orrs	r3, r2
 8009530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009532:	4b5f      	ldr	r3, [pc, #380]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d001      	beq.n	8009544 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0b0      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d04c      	beq.n	80095ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2b03      	cmp	r3, #3
 8009556:	d107      	bne.n	8009568 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009558:	4b56      	ldr	r3, [pc, #344]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d121      	bne.n	80095a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e09e      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d107      	bne.n	8009580 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009570:	4b50      	ldr	r3, [pc, #320]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d115      	bne.n	80095a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e092      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d107      	bne.n	8009598 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009588:	4b4a      	ldr	r3, [pc, #296]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e086      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009598:	4b46      	ldr	r3, [pc, #280]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e07e      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095a8:	4b42      	ldr	r3, [pc, #264]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f023 0203 	bic.w	r2, r3, #3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	493f      	ldr	r1, [pc, #252]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ba:	f7fc f893 	bl	80056e4 <HAL_GetTick>
 80095be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c0:	e00a      	b.n	80095d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095c2:	f7fc f88f 	bl	80056e4 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d901      	bls.n	80095d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e066      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d8:	4b36      	ldr	r3, [pc, #216]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 020c 	and.w	r2, r3, #12
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d1eb      	bne.n	80095c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d008      	beq.n	8009608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095f6:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	492c      	ldr	r1, [pc, #176]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009604:	4313      	orrs	r3, r2
 8009606:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009608:	4b29      	ldr	r3, [pc, #164]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d210      	bcs.n	8009638 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009616:	4b26      	ldr	r3, [pc, #152]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f023 0207 	bic.w	r2, r3, #7
 800961e:	4924      	ldr	r1, [pc, #144]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	4313      	orrs	r3, r2
 8009624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <HAL_RCC_ClockConfig+0x1b0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d001      	beq.n	8009638 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e036      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d008      	beq.n	8009656 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009644:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	4918      	ldr	r1, [pc, #96]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009652:	4313      	orrs	r3, r2
 8009654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d009      	beq.n	8009676 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	4910      	ldr	r1, [pc, #64]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 8009672:	4313      	orrs	r3, r2
 8009674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009676:	f000 f825 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800967a:	4601      	mov	r1, r0
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <HAL_RCC_ClockConfig+0x1b4>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	091b      	lsrs	r3, r3, #4
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	4a0c      	ldr	r2, [pc, #48]	; (80096b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009688:	5cd3      	ldrb	r3, [r2, r3]
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	fa21 f303 	lsr.w	r3, r1, r3
 8009692:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <HAL_RCC_ClockConfig+0x1bc>)
 8009694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fb fdc4 	bl	8005228 <HAL_InitTick>
 80096a0:	4603      	mov	r3, r0
 80096a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40022000 	.word	0x40022000
 80096b4:	40021000 	.word	0x40021000
 80096b8:	08017ef4 	.word	0x08017ef4
 80096bc:	20000058 	.word	0x20000058
 80096c0:	2000005c 	.word	0x2000005c

080096c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b089      	sub	sp, #36	; 0x24
 80096c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096d2:	4b3d      	ldr	r3, [pc, #244]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f003 030c 	and.w	r3, r3, #12
 80096da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096dc:	4b3a      	ldr	r3, [pc, #232]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_RCC_GetSysClockFreq+0x34>
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b0c      	cmp	r3, #12
 80096f0:	d121      	bne.n	8009736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d11e      	bne.n	8009736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80096f8:	4b33      	ldr	r3, [pc, #204]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d107      	bne.n	8009714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009704:	4b30      	ldr	r3, [pc, #192]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	e005      	b.n	8009720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009714:	4b2c      	ldr	r3, [pc, #176]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	091b      	lsrs	r3, r3, #4
 800971a:	f003 030f 	and.w	r3, r3, #15
 800971e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009720:	4a2a      	ldr	r2, [pc, #168]	; (80097cc <HAL_RCC_GetSysClockFreq+0x108>)
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10d      	bne.n	800974c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009734:	e00a      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b04      	cmp	r3, #4
 800973a:	d102      	bne.n	8009742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800973c:	4b24      	ldr	r3, [pc, #144]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	e004      	b.n	800974c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2b08      	cmp	r3, #8
 8009746:	d101      	bne.n	800974c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009748:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800974a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b0c      	cmp	r3, #12
 8009750:	d133      	bne.n	80097ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009752:	4b1d      	ldr	r3, [pc, #116]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d002      	beq.n	8009768 <HAL_RCC_GetSysClockFreq+0xa4>
 8009762:	2b03      	cmp	r3, #3
 8009764:	d003      	beq.n	800976e <HAL_RCC_GetSysClockFreq+0xaa>
 8009766:	e005      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009768:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800976a:	617b      	str	r3, [r7, #20]
      break;
 800976c:	e005      	b.n	800977a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800976e:	4b19      	ldr	r3, [pc, #100]	; (80097d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8009770:	617b      	str	r3, [r7, #20]
      break;
 8009772:	e002      	b.n	800977a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	617b      	str	r3, [r7, #20]
      break;
 8009778:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800977a:	4b13      	ldr	r3, [pc, #76]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	091b      	lsrs	r3, r3, #4
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	3301      	adds	r3, #1
 8009786:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	fb02 f203 	mul.w	r2, r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	fbb2 f3f3 	udiv	r3, r2, r3
 800979e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097a0:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	0e5b      	lsrs	r3, r3, #25
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	3301      	adds	r3, #1
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80097ba:	69bb      	ldr	r3, [r7, #24]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3724      	adds	r7, #36	; 0x24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	40021000 	.word	0x40021000
 80097cc:	08017f0c 	.word	0x08017f0c
 80097d0:	00f42400 	.word	0x00f42400
 80097d4:	007a1200 	.word	0x007a1200

080097d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097d8:	b480      	push	{r7}
 80097da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097dc:	4b03      	ldr	r3, [pc, #12]	; (80097ec <HAL_RCC_GetHCLKFreq+0x14>)
 80097de:	681b      	ldr	r3, [r3, #0]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	20000058 	.word	0x20000058

080097f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80097f4:	f7ff fff0 	bl	80097d8 <HAL_RCC_GetHCLKFreq>
 80097f8:	4601      	mov	r1, r0
 80097fa:	4b06      	ldr	r3, [pc, #24]	; (8009814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	0a1b      	lsrs	r3, r3, #8
 8009800:	f003 0307 	and.w	r3, r3, #7
 8009804:	4a04      	ldr	r2, [pc, #16]	; (8009818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009806:	5cd3      	ldrb	r3, [r2, r3]
 8009808:	f003 031f 	and.w	r3, r3, #31
 800980c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009810:	4618      	mov	r0, r3
 8009812:	bd80      	pop	{r7, pc}
 8009814:	40021000 	.word	0x40021000
 8009818:	08017f04 	.word	0x08017f04

0800981c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009820:	f7ff ffda 	bl	80097d8 <HAL_RCC_GetHCLKFreq>
 8009824:	4601      	mov	r1, r0
 8009826:	4b06      	ldr	r3, [pc, #24]	; (8009840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	0adb      	lsrs	r3, r3, #11
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	4a04      	ldr	r2, [pc, #16]	; (8009844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009832:	5cd3      	ldrb	r3, [r2, r3]
 8009834:	f003 031f 	and.w	r3, r3, #31
 8009838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800983c:	4618      	mov	r0, r3
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40021000 	.word	0x40021000
 8009844:	08017f04 	.word	0x08017f04

08009848 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	220f      	movs	r2, #15
 8009856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <HAL_RCC_GetClockConfig+0x5c>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 0203 	and.w	r2, r3, #3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009864:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <HAL_RCC_GetClockConfig+0x5c>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009870:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <HAL_RCC_GetClockConfig+0x5c>)
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <HAL_RCC_GetClockConfig+0x5c>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <HAL_RCC_GetClockConfig+0x60>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0207 	and.w	r2, r3, #7
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40021000 	.word	0x40021000
 80098a8:	40022000 	.word	0x40022000

080098ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80098b8:	4b2a      	ldr	r3, [pc, #168]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80098c4:	f7ff f8a4 	bl	8008a10 <HAL_PWREx_GetVoltageRange>
 80098c8:	6178      	str	r0, [r7, #20]
 80098ca:	e014      	b.n	80098f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80098cc:	4b25      	ldr	r3, [pc, #148]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d0:	4a24      	ldr	r2, [pc, #144]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098d6:	6593      	str	r3, [r2, #88]	; 0x58
 80098d8:	4b22      	ldr	r3, [pc, #136]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80098e4:	f7ff f894 	bl	8008a10 <HAL_PWREx_GetVoltageRange>
 80098e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80098ea:	4b1e      	ldr	r3, [pc, #120]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ee:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80098f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098fc:	d10b      	bne.n	8009916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d919      	bls.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2ba0      	cmp	r3, #160	; 0xa0
 8009908:	d902      	bls.n	8009910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800990a:	2302      	movs	r3, #2
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	e013      	b.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009910:	2301      	movs	r3, #1
 8009912:	613b      	str	r3, [r7, #16]
 8009914:	e010      	b.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b80      	cmp	r3, #128	; 0x80
 800991a:	d902      	bls.n	8009922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800991c:	2303      	movs	r3, #3
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	e00a      	b.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d102      	bne.n	800992e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009928:	2302      	movs	r3, #2
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	e004      	b.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b70      	cmp	r3, #112	; 0x70
 8009932:	d101      	bne.n	8009938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009934:	2301      	movs	r3, #1
 8009936:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f023 0207 	bic.w	r2, r3, #7
 8009940:	4909      	ldr	r1, [pc, #36]	; (8009968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	429a      	cmp	r2, r3
 8009954:	d001      	beq.n	800995a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	40021000 	.word	0x40021000
 8009968:	40022000 	.word	0x40022000

0800996c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009974:	2300      	movs	r3, #0
 8009976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009978:	2300      	movs	r3, #0
 800997a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009984:	2b00      	cmp	r3, #0
 8009986:	d03f      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800998c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009990:	d01c      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009996:	d802      	bhi.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00e      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800999c:	e01f      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x72>
 800999e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099a2:	d003      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 80099a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80099a8:	d01c      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80099aa:	e018      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80099ac:	4b85      	ldr	r3, [pc, #532]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	4a84      	ldr	r2, [pc, #528]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099b8:	e015      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3304      	adds	r3, #4
 80099be:	2100      	movs	r1, #0
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 ffa1 	bl	800a908 <RCCEx_PLLSAI1_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099ca:	e00c      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3320      	adds	r3, #32
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f001 f888 	bl	800aae8 <RCCEx_PLLSAI2_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80099dc:	e003      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	74fb      	strb	r3, [r7, #19]
      break;
 80099e2:	e000      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80099e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e6:	7cfb      	ldrb	r3, [r7, #19]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099ec:	4b75      	ldr	r3, [pc, #468]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099fa:	4972      	ldr	r1, [pc, #456]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009a02:	e001      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	7cfb      	ldrb	r3, [r7, #19]
 8009a06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03f      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a1c:	d01c      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009a1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a22:	d802      	bhi.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009a28:	e01f      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a2e:	d003      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8009a30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a34:	d01c      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8009a36:	e018      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009a38:	4b62      	ldr	r3, [pc, #392]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	4a61      	ldr	r2, [pc, #388]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a44:	e015      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 ff5b 	bl	800a908 <RCCEx_PLLSAI1_Config>
 8009a52:	4603      	mov	r3, r0
 8009a54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a56:	e00c      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3320      	adds	r3, #32
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f001 f842 	bl	800aae8 <RCCEx_PLLSAI2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009a68:	e003      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	74fb      	strb	r3, [r7, #19]
      break;
 8009a6e:	e000      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a72:	7cfb      	ldrb	r3, [r7, #19]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009a78:	4b52      	ldr	r3, [pc, #328]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a86:	494f      	ldr	r1, [pc, #316]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009a8e:	e001      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	7cfb      	ldrb	r3, [r7, #19]
 8009a92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80a0 	beq.w	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009aa6:	4b47      	ldr	r3, [pc, #284]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e000      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00d      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009abc:	4b41      	ldr	r3, [pc, #260]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac0:	4a40      	ldr	r2, [pc, #256]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ac8:	4b3e      	ldr	r3, [pc, #248]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ad8:	4b3b      	ldr	r3, [pc, #236]	; (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a3a      	ldr	r2, [pc, #232]	; (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ae4:	f7fb fdfe 	bl	80056e4 <HAL_GetTick>
 8009ae8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009aea:	e009      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009aec:	f7fb fdfa 	bl	80056e4 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d902      	bls.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	74fb      	strb	r3, [r7, #19]
        break;
 8009afe:	e005      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009b00:	4b31      	ldr	r3, [pc, #196]	; (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0ef      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009b0c:	7cfb      	ldrb	r3, [r7, #19]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d15c      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b12:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01f      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d019      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b3c:	4b21      	ldr	r3, [pc, #132]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b4c:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b52:	4a1c      	ldr	r2, [pc, #112]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d016      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6e:	f7fb fdb9 	bl	80056e4 <HAL_GetTick>
 8009b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b74:	e00b      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b76:	f7fb fdb5 	bl	80056e4 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d902      	bls.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8009b8c:	e006      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0ec      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8009b9c:	7cfb      	ldrb	r3, [r7, #19]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10c      	bne.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb2:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009bba:	e009      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bbc:	7cfb      	ldrb	r3, [r7, #19]
 8009bbe:	74bb      	strb	r3, [r7, #18]
 8009bc0:	e006      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8009bc2:	bf00      	nop
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	7cfb      	ldrb	r3, [r7, #19]
 8009bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bd0:	7c7b      	ldrb	r3, [r7, #17]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d105      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bd6:	4ba6      	ldr	r3, [pc, #664]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	4aa5      	ldr	r2, [pc, #660]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009bee:	4ba0      	ldr	r3, [pc, #640]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf4:	f023 0203 	bic.w	r2, r3, #3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfc:	499c      	ldr	r1, [pc, #624]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c10:	4b97      	ldr	r3, [pc, #604]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	f023 020c 	bic.w	r2, r3, #12
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1e:	4994      	ldr	r1, [pc, #592]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c32:	4b8f      	ldr	r3, [pc, #572]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	498b      	ldr	r1, [pc, #556]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009c54:	4b86      	ldr	r3, [pc, #536]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c62:	4983      	ldr	r1, [pc, #524]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c76:	4b7e      	ldr	r3, [pc, #504]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c84:	497a      	ldr	r1, [pc, #488]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c98:	4b75      	ldr	r3, [pc, #468]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca6:	4972      	ldr	r1, [pc, #456]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cba:	4b6d      	ldr	r3, [pc, #436]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc8:	4969      	ldr	r1, [pc, #420]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cdc:	4b64      	ldr	r3, [pc, #400]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cea:	4961      	ldr	r1, [pc, #388]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cfe:	4b5c      	ldr	r3, [pc, #368]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	4958      	ldr	r1, [pc, #352]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00a      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d20:	4b53      	ldr	r3, [pc, #332]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2e:	4950      	ldr	r1, [pc, #320]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00a      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d42:	4b4b      	ldr	r3, [pc, #300]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d50:	4947      	ldr	r1, [pc, #284]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d64:	4b42      	ldr	r3, [pc, #264]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d6a:	f023 0203 	bic.w	r2, r3, #3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d72:	493f      	ldr	r1, [pc, #252]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d028      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d86:	4b3a      	ldr	r3, [pc, #232]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d94:	4936      	ldr	r1, [pc, #216]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009da4:	d106      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009da6:	4b32      	ldr	r3, [pc, #200]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	4a31      	ldr	r2, [pc, #196]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009db0:	60d3      	str	r3, [r2, #12]
 8009db2:	e011      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dbc:	d10c      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fd9f 	bl	800a908 <RCCEx_PLLSAI1_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009dce:	7cfb      	ldrb	r3, [r7, #19]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8009dd4:	7cfb      	ldrb	r3, [r7, #19]
 8009dd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d028      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009de4:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df2:	491f      	ldr	r1, [pc, #124]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e02:	d106      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e04:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	4a19      	ldr	r2, [pc, #100]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e0e:	60d3      	str	r3, [r2, #12]
 8009e10:	e011      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e1a:	d10c      	bne.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	2101      	movs	r1, #1
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd70 	bl	800a908 <RCCEx_PLLSAI1_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e2c:	7cfb      	ldrb	r3, [r7, #19]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8009e32:	7cfb      	ldrb	r3, [r7, #19]
 8009e34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d02a      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e42:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e50:	4907      	ldr	r1, [pc, #28]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e60:	d108      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e62:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	4a02      	ldr	r2, [pc, #8]	; (8009e70 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8009e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e6c:	60d3      	str	r3, [r2, #12]
 8009e6e:	e013      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e7c:	d10c      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3304      	adds	r3, #4
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fd3f 	bl	800a908 <RCCEx_PLLSAI1_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e8e:	7cfb      	ldrb	r3, [r7, #19]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8009e94:	7cfb      	ldrb	r3, [r7, #19]
 8009e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d02f      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ea4:	4b2c      	ldr	r3, [pc, #176]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb2:	4929      	ldr	r1, [pc, #164]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ec2:	d10d      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fd1c 	bl	800a908 <RCCEx_PLLSAI1_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ed4:	7cfb      	ldrb	r3, [r7, #19]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d014      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009eda:	7cfb      	ldrb	r3, [r7, #19]
 8009edc:	74bb      	strb	r3, [r7, #18]
 8009ede:	e011      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ee8:	d10c      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3320      	adds	r3, #32
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fdf9 	bl	800aae8 <RCCEx_PLLSAI2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009efa:	7cfb      	ldrb	r3, [r7, #19]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8009f00:	7cfb      	ldrb	r3, [r7, #19]
 8009f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f10:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f20:	490d      	ldr	r1, [pc, #52]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f34:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f44:	4904      	ldr	r1, [pc, #16]	; (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009f4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40021000 	.word	0x40021000

08009f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f6e:	d137      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009f70:	4ba9      	ldr	r3, [pc, #676]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f82:	d014      	beq.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f88:	d01e      	beq.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d001      	beq.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009f90:	f000 bca0 	b.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f94:	4ba0      	ldr	r3, [pc, #640]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	f040 8493 	bne.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
        frequency = LSE_VALUE;
 8009fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fa8:	61fb      	str	r3, [r7, #28]
      break;
 8009faa:	f000 bc8e 	b.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009fae:	4b9a      	ldr	r3, [pc, #616]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	f040 8488 	bne.w	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = LSI_VALUE;
 8009fbe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009fc2:	61fb      	str	r3, [r7, #28]
      break;
 8009fc4:	f000 bc83 	b.w	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009fc8:	4b93      	ldr	r3, [pc, #588]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd4:	f040 847d 	bne.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
        frequency = HSE_VALUE / 32U;
 8009fd8:	4b90      	ldr	r3, [pc, #576]	; (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009fda:	61fb      	str	r3, [r7, #28]
      break;
 8009fdc:	f000 bc79 	b.w	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009fe0:	4b8d      	ldr	r3, [pc, #564]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d023      	beq.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d02e      	beq.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d139      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009ff8:	4b87      	ldr	r3, [pc, #540]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0302 	and.w	r3, r3, #2
 800a000:	2b02      	cmp	r3, #2
 800a002:	d116      	bne.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a004:	4b84      	ldr	r3, [pc, #528]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800a010:	4b81      	ldr	r3, [pc, #516]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	091b      	lsrs	r3, r3, #4
 800a016:	f003 030f 	and.w	r3, r3, #15
 800a01a:	e005      	b.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800a01c:	4b7e      	ldr	r3, [pc, #504]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a01e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	4a7d      	ldr	r2, [pc, #500]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800a02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a02e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a030:	e01f      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	61bb      	str	r3, [r7, #24]
      break;
 800a036:	e01c      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a038:	4b77      	ldr	r3, [pc, #476]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a044:	d102      	bne.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800a046:	4b77      	ldr	r3, [pc, #476]	; (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800a048:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a04a:	e012      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	61bb      	str	r3, [r7, #24]
      break;
 800a050:	e00f      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a052:	4b71      	ldr	r3, [pc, #452]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a05e:	d102      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800a060:	4b71      	ldr	r3, [pc, #452]	; (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a062:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a064:	e005      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	61bb      	str	r3, [r7, #24]
      break;
 800a06a:	e002      	b.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61bb      	str	r3, [r7, #24]
      break;
 800a070:	bf00      	nop
    }

    switch(PeriphClk)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a078:	f000 8384 	beq.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a080:	d828      	bhi.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 800a082:	2b10      	cmp	r3, #16
 800a084:	f000 81fb 	beq.w	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a088:	2b10      	cmp	r3, #16
 800a08a:	d811      	bhi.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	f000 8144 	beq.w	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a092:	2b02      	cmp	r3, #2
 800a094:	d804      	bhi.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800a096:	2b01      	cmp	r3, #1
 800a098:	f000 8107 	beq.w	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a09c:	f000 bc1a 	b.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	f000 8184 	beq.w	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a0a6:	2b08      	cmp	r3, #8
 800a0a8:	f000 81b5 	beq.w	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
      break;
 800a0ac:	f000 bc12 	b.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0b0:	2b40      	cmp	r3, #64	; 0x40
 800a0b2:	f000 82dd 	beq.w	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a0b6:	2b40      	cmp	r3, #64	; 0x40
 800a0b8:	d804      	bhi.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	f000 821e 	beq.w	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
      break;
 800a0c0:	f000 bc08 	b.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0c4:	2b80      	cmp	r3, #128	; 0x80
 800a0c6:	f000 82f6 	beq.w	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800a0ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ce:	f000 8315 	beq.w	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      break;
 800a0d2:	e3ff      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d8:	f000 8248 	beq.w	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 800a0dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e0:	d811      	bhi.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a0e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0e6:	d025      	beq.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a0e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ec:	d804      	bhi.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800a0ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f2:	f000 838d 	beq.w	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
      break;
 800a0f6:	e3ed      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a0f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fc:	d021      	beq.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a0fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a102:	d025      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
      break;
 800a104:	e3e6      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a10a:	d021      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a10c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a110:	d808      	bhi.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 800a112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a116:	f000 83bc 	beq.w	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11e:	f000 8296 	beq.w	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
      break;
 800a122:	e3d7      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
    switch(PeriphClk)
 800a124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a128:	d012      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12e:	f000 8308 	beq.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      break;
 800a132:	e3cf      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a134:	69b9      	ldr	r1, [r7, #24]
 800a136:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a13a:	f000 fdaf 	bl	800ac9c <RCCEx_GetSAIxPeriphCLKFreq>
 800a13e:	61f8      	str	r0, [r7, #28]
      break;
 800a140:	e3c8      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a142:	69b9      	ldr	r1, [r7, #24]
 800a144:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a148:	f000 fda8 	bl	800ac9c <RCCEx_GetSAIxPeriphCLKFreq>
 800a14c:	61f8      	str	r0, [r7, #28]
      break;
 800a14e:	e3c1      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a150:	4b31      	ldr	r3, [pc, #196]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a156:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a15a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a162:	d063      	beq.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800a164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a168:	d803      	bhi.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 808b 	beq.w	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
          break;
 800a170:	e09a      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
        switch(srcclk)
 800a172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a176:	d021      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a178:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a17c:	d000      	beq.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          break;
 800a17e:	e093      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a180:	4b25      	ldr	r3, [pc, #148]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b02      	cmp	r3, #2
 800a18a:	f040 8086 	bne.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a18e:	4b22      	ldr	r3, [pc, #136]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 800a19a:	4b1f      	ldr	r3, [pc, #124]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	091b      	lsrs	r3, r3, #4
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	e005      	b.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a1a6:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ac:	0a1b      	lsrs	r3, r3, #8
 800a1ae:	f003 030f 	and.w	r3, r3, #15
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800a1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b8:	61fb      	str	r3, [r7, #28]
          break;
 800a1ba:	e06e      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a1bc:	4b16      	ldr	r3, [pc, #88]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1c8:	d169      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d6:	d162      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	0a1b      	lsrs	r3, r3, #8
 800a1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	fb02 f203 	mul.w	r2, r2, r3
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	091b      	lsrs	r3, r3, #4
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	0d5b      	lsrs	r3, r3, #21
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	3301      	adds	r3, #1
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a212:	61fb      	str	r3, [r7, #28]
          break;
 800a214:	e043      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a216:	bf00      	nop
 800a218:	40021000 	.word	0x40021000
 800a21c:	0003d090 	.word	0x0003d090
 800a220:	08017f0c 	.word	0x08017f0c
 800a224:	00f42400 	.word	0x00f42400
 800a228:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a22c:	4bb0      	ldr	r3, [pc, #704]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a238:	d133      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a23a:	4bad      	ldr	r3, [pc, #692]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a246:	d12c      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a248:	4ba9      	ldr	r3, [pc, #676]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	0a1b      	lsrs	r3, r3, #8
 800a24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a252:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	fb02 f203 	mul.w	r2, r2, r3
 800a25c:	4ba4      	ldr	r3, [pc, #656]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	091b      	lsrs	r3, r3, #4
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	3301      	adds	r3, #1
 800a268:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a26e:	4ba0      	ldr	r3, [pc, #640]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	0d5b      	lsrs	r3, r3, #21
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	3301      	adds	r3, #1
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	61fb      	str	r3, [r7, #28]
          break;
 800a284:	e00d      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a286:	4b9a      	ldr	r3, [pc, #616]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b02      	cmp	r3, #2
 800a292:	d108      	bne.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
            frequency = HSI48_VALUE;
 800a294:	4b97      	ldr	r3, [pc, #604]	; (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a296:	61fb      	str	r3, [r7, #28]
          break;
 800a298:	e005      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          break;
 800a29a:	bf00      	nop
 800a29c:	e31a      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a29e:	bf00      	nop
 800a2a0:	e318      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a2a2:	bf00      	nop
 800a2a4:	e316      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a2a6:	bf00      	nop
        break;
 800a2a8:	e314      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a2aa:	4b91      	ldr	r3, [pc, #580]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b0:	f003 0303 	and.w	r3, r3, #3
 800a2b4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d828      	bhi.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a2bc:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 800a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c2:	bf00      	nop
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2dd 	.word	0x0800a2dd
 800a2cc:	0800a2e5 	.word	0x0800a2e5
 800a2d0:	0800a2f9 	.word	0x0800a2f9
          frequency = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7ff faa2 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800a2d8:	61f8      	str	r0, [r7, #28]
          break;
 800a2da:	e01d      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          frequency = HAL_RCC_GetSysClockFreq();
 800a2dc:	f7ff f9f2 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a2e0:	61f8      	str	r0, [r7, #28]
          break;
 800a2e2:	e019      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2e4:	4b82      	ldr	r3, [pc, #520]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f0:	d10f      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            frequency = HSI_VALUE;
 800a2f2:	4b81      	ldr	r3, [pc, #516]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a2f4:	61fb      	str	r3, [r7, #28]
          break;
 800a2f6:	e00c      	b.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2f8:	4b7d      	ldr	r3, [pc, #500]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d107      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
            frequency = LSE_VALUE;
 800a306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a30a:	61fb      	str	r3, [r7, #28]
          break;
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          break;
 800a30e:	bf00      	nop
 800a310:	e2e0      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a312:	bf00      	nop
 800a314:	e2de      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a316:	bf00      	nop
        break;
 800a318:	e2dc      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a31a:	4b75      	ldr	r3, [pc, #468]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	f003 030c 	and.w	r3, r3, #12
 800a324:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b0c      	cmp	r3, #12
 800a32a:	d83a      	bhi.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a32c:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>)
 800a32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a332:	bf00      	nop
 800a334:	0800a369 	.word	0x0800a369
 800a338:	0800a3a3 	.word	0x0800a3a3
 800a33c:	0800a3a3 	.word	0x0800a3a3
 800a340:	0800a3a3 	.word	0x0800a3a3
 800a344:	0800a371 	.word	0x0800a371
 800a348:	0800a3a3 	.word	0x0800a3a3
 800a34c:	0800a3a3 	.word	0x0800a3a3
 800a350:	0800a3a3 	.word	0x0800a3a3
 800a354:	0800a379 	.word	0x0800a379
 800a358:	0800a3a3 	.word	0x0800a3a3
 800a35c:	0800a3a3 	.word	0x0800a3a3
 800a360:	0800a3a3 	.word	0x0800a3a3
 800a364:	0800a38d 	.word	0x0800a38d
          frequency = HAL_RCC_GetPCLK1Freq();
 800a368:	f7ff fa42 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a36c:	61f8      	str	r0, [r7, #28]
          break;
 800a36e:	e01d      	b.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          frequency = HAL_RCC_GetSysClockFreq();
 800a370:	f7ff f9a8 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a374:	61f8      	str	r0, [r7, #28]
          break;
 800a376:	e019      	b.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x450>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a378:	4b5d      	ldr	r3, [pc, #372]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a384:	d10f      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
            frequency = HSI_VALUE;
 800a386:	4b5c      	ldr	r3, [pc, #368]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a388:	61fb      	str	r3, [r7, #28]
          break;
 800a38a:	e00c      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a38c:	4b58      	ldr	r3, [pc, #352]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	d107      	bne.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = LSE_VALUE;
 800a39a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a39e:	61fb      	str	r3, [r7, #28]
          break;
 800a3a0:	e003      	b.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          break;
 800a3a2:	bf00      	nop
 800a3a4:	e296      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a3a6:	bf00      	nop
 800a3a8:	e294      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a3aa:	bf00      	nop
        break;
 800a3ac:	e292      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a3ae:	4b50      	ldr	r3, [pc, #320]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3b8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	d00d      	beq.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d802      	bhi.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          break;
 800a3c8:	e024      	b.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
        switch(srcclk)
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d00a      	beq.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 800a3ce:	2b30      	cmp	r3, #48	; 0x30
 800a3d0:	d012      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          break;
 800a3d2:	e01f      	b.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3d4:	f7ff fa0c 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a3d8:	61f8      	str	r0, [r7, #28]
          break;
 800a3da:	e01b      	b.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          frequency = HAL_RCC_GetSysClockFreq();
 800a3dc:	f7ff f972 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a3e0:	61f8      	str	r0, [r7, #28]
          break;
 800a3e2:	e017      	b.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3e4:	4b42      	ldr	r3, [pc, #264]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f0:	d10d      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            frequency = HSI_VALUE;
 800a3f2:	4b41      	ldr	r3, [pc, #260]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a3f4:	61fb      	str	r3, [r7, #28]
          break;
 800a3f6:	e00a      	b.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3f8:	4b3d      	ldr	r3, [pc, #244]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b02      	cmp	r3, #2
 800a404:	d105      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
            frequency = LSE_VALUE;
 800a406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a40a:	61fb      	str	r3, [r7, #28]
          break;
 800a40c:	e001      	b.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          break;
 800a40e:	bf00      	nop
 800a410:	e260      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a412:	bf00      	nop
        break;
 800a414:	e25e      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a416:	4b36      	ldr	r3, [pc, #216]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a420:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b40      	cmp	r3, #64	; 0x40
 800a426:	d00d      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d802      	bhi.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 800a430:	e024      	b.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        switch(srcclk)
 800a432:	2b80      	cmp	r3, #128	; 0x80
 800a434:	d00a      	beq.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 800a436:	2bc0      	cmp	r3, #192	; 0xc0
 800a438:	d012      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          break;
 800a43a:	e01f      	b.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a43c:	f7ff f9d8 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a440:	61f8      	str	r0, [r7, #28]
          break;
 800a442:	e01b      	b.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 800a444:	f7ff f93e 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a448:	61f8      	str	r0, [r7, #28]
          break;
 800a44a:	e017      	b.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a44c:	4b28      	ldr	r3, [pc, #160]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a458:	d10d      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800a45a:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a45c:	61fb      	str	r3, [r7, #28]
          break;
 800a45e:	e00a      	b.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a460:	4b23      	ldr	r3, [pc, #140]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d105      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800a46e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a472:	61fb      	str	r3, [r7, #28]
          break;
 800a474:	e001      	b.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800a476:	bf00      	nop
 800a478:	e22c      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a47a:	bf00      	nop
        break;
 800a47c:	e22a      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a47e:	4b1c      	ldr	r3, [pc, #112]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a488:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a490:	d010      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800a492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a496:	d802      	bhi.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x550>
          break;
 800a49c:	e026      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        switch(srcclk)
 800a49e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a2:	d00b      	beq.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 800a4a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4a8:	d012      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
          break;
 800a4aa:	e01f      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4ac:	f7ff f9a0 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a4b0:	61f8      	str	r0, [r7, #28]
          break;
 800a4b2:	e01b      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          frequency = HAL_RCC_GetSysClockFreq();
 800a4b4:	f7ff f906 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a4b8:	61f8      	str	r0, [r7, #28]
          break;
 800a4ba:	e017      	b.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4bc:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c8:	d10d      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
            frequency = HSI_VALUE;
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a4cc:	61fb      	str	r3, [r7, #28]
          break;
 800a4ce:	e00a      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a4d0:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d105      	bne.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
            frequency = LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e2:	61fb      	str	r3, [r7, #28]
          break;
 800a4e4:	e001      	b.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          break;
 800a4e6:	bf00      	nop
 800a4e8:	e1f4      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a4ea:	bf00      	nop
        break;
 800a4ec:	e1f2      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800a4ee:	bf00      	nop
 800a4f0:	40021000 	.word	0x40021000
 800a4f4:	02dc6c00 	.word	0x02dc6c00
 800a4f8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a4fc:	4bad      	ldr	r3, [pc, #692]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a502:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a506:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a50e:	d010      	beq.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800a510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a514:	d802      	bhi.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
          break;
 800a51a:	e026      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        switch(srcclk)
 800a51c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a520:	d00b      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 800a522:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a526:	d012      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800a528:	e01f      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a52a:	f7ff f961 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a52e:	61f8      	str	r0, [r7, #28]
          break;
 800a530:	e01b      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a532:	f7ff f8c7 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a536:	61f8      	str	r0, [r7, #28]
          break;
 800a538:	e017      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a53a:	4b9e      	ldr	r3, [pc, #632]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a546:	d10d      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
            frequency = HSI_VALUE;
 800a548:	4b9b      	ldr	r3, [pc, #620]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a54a:	61fb      	str	r3, [r7, #28]
          break;
 800a54c:	e00a      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a54e:	4b99      	ldr	r3, [pc, #612]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d105      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
            frequency = LSE_VALUE;
 800a55c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a560:	61fb      	str	r3, [r7, #28]
          break;
 800a562:	e001      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
          break;
 800a564:	bf00      	nop
 800a566:	e1b5      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a568:	bf00      	nop
        break;
 800a56a:	e1b3      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a56c:	4b91      	ldr	r3, [pc, #580]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a576:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a57e:	d036      	beq.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a584:	d003      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800a586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
          break;
 800a58c:	e05e      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a58e:	f7ff f899 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a592:	61f8      	str	r0, [r7, #28]
          break;
 800a594:	e05a      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a596:	4b87      	ldr	r3, [pc, #540]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a2:	d150      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800a5a4:	4b83      	ldr	r3, [pc, #524]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d04a      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a5b0:	4b80      	ldr	r3, [pc, #512]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	0a1b      	lsrs	r3, r3, #8
 800a5b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ba:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	fb02 f203 	mul.w	r2, r2, r3
 800a5c4:	4b7b      	ldr	r3, [pc, #492]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	091b      	lsrs	r3, r3, #4
 800a5ca:	f003 0307 	and.w	r3, r3, #7
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a5d6:	4b77      	ldr	r3, [pc, #476]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	0e5b      	lsrs	r3, r3, #25
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ea:	61fb      	str	r3, [r7, #28]
          break;
 800a5ec:	e02b      	b.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800a5ee:	4b71      	ldr	r3, [pc, #452]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5fa:	d126      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800a5fc:	4b6d      	ldr	r3, [pc, #436]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d020      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a608:	4b6a      	ldr	r3, [pc, #424]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a612:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	fb02 f203 	mul.w	r2, r2, r3
 800a61c:	4b65      	ldr	r3, [pc, #404]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	091b      	lsrs	r3, r3, #4
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	3301      	adds	r3, #1
 800a628:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800a62e:	4b61      	ldr	r3, [pc, #388]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	0e5b      	lsrs	r3, r3, #25
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	3301      	adds	r3, #1
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	61fb      	str	r3, [r7, #28]
          break;
 800a644:	e001      	b.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
          break;
 800a646:	bf00      	nop
 800a648:	e144      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a64a:	bf00      	nop
        break;
 800a64c:	e142      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a64e:	4b59      	ldr	r3, [pc, #356]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a658:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a660:	f7ff f8dc 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800a664:	61f8      	str	r0, [r7, #28]
        break;
 800a666:	e135      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a668:	f7ff f82c 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a66c:	61f8      	str	r0, [r7, #28]
        break;
 800a66e:	e131      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a670:	4b50      	ldr	r3, [pc, #320]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a67a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a682:	d009      	beq.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a688:	d00a      	beq.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d000      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
          break;
 800a68e:	e011      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a690:	f7ff f8ae 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a694:	61f8      	str	r0, [r7, #28]
          break;
 800a696:	e00d      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          frequency = HAL_RCC_GetSysClockFreq();
 800a698:	f7ff f814 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a69c:	61f8      	str	r0, [r7, #28]
          break;
 800a69e:	e009      	b.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6a0:	4b44      	ldr	r3, [pc, #272]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ac:	d101      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
            frequency = HSI_VALUE;
 800a6ae:	4b42      	ldr	r3, [pc, #264]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a6b0:	61fb      	str	r3, [r7, #28]
          break;
 800a6b2:	bf00      	nop
        break;
 800a6b4:	e10e      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a6b6:	4b3f      	ldr	r3, [pc, #252]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6c0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6c8:	d009      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a6ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ce:	d00a      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d000      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
          break;
 800a6d4:	e011      	b.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6d6:	f7ff f88b 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a6da:	61f8      	str	r0, [r7, #28]
          break;
 800a6dc:	e00d      	b.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a6de:	f7fe fff1 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a6e2:	61f8      	str	r0, [r7, #28]
          break;
 800a6e4:	e009      	b.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a6e6:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6f2:	d101      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
            frequency = HSI_VALUE;
 800a6f4:	4b30      	ldr	r3, [pc, #192]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a6f6:	61fb      	str	r3, [r7, #28]
          break;
 800a6f8:	bf00      	nop
        break;
 800a6fa:	e0eb      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a6fc:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a706:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a70e:	d009      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 800a710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a714:	d00a      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d000      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
          break;
 800a71a:	e011      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a71c:	f7ff f868 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a720:	61f8      	str	r0, [r7, #28]
          break;
 800a722:	e00d      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a724:	f7fe ffce 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a728:	61f8      	str	r0, [r7, #28]
          break;
 800a72a:	e009      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a72c:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a738:	d101      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 800a73a:	4b1f      	ldr	r3, [pc, #124]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a73c:	61fb      	str	r3, [r7, #28]
          break;
 800a73e:	bf00      	nop
        break;
 800a740:	e0c8      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a742:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d008      	beq.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a754:	2b01      	cmp	r3, #1
 800a756:	d302      	bcc.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d008      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800a75c:	e011      	b.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a75e:	f7ff f847 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a762:	61f8      	str	r0, [r7, #28]
          break;
 800a764:	e00d      	b.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = HAL_RCC_GetSysClockFreq();
 800a766:	f7fe ffad 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800a76a:	61f8      	str	r0, [r7, #28]
          break;
 800a76c:	e009      	b.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a76e:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a77a:	d101      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 800a77c:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800a77e:	61fb      	str	r3, [r7, #28]
          break;
 800a780:	bf00      	nop
        break;
 800a782:	e0a7      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a784:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a78a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a78e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a796:	d015      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a79c:	d802      	bhi.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00c      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 800a7a2:	e034      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
        switch(srcclk)
 800a7a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a7a8:	d017      	beq.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800a7aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a7ae:	d01e      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          break;
 800a7b0:	e02d      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a7b2:	bf00      	nop
 800a7b4:	40021000 	.word	0x40021000
 800a7b8:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7bc:	f7ff f818 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a7c0:	61f8      	str	r0, [r7, #28]
          break;
 800a7c2:	e024      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a7c4:	4b46      	ldr	r3, [pc, #280]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d118      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
              frequency = LSI_VALUE;
 800a7d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a7d6:	61fb      	str	r3, [r7, #28]
          break;
 800a7d8:	e014      	b.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7da:	4b41      	ldr	r3, [pc, #260]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e6:	d10f      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
            frequency = HSI_VALUE;
 800a7e8:	4b3e      	ldr	r3, [pc, #248]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a7ea:	61fb      	str	r3, [r7, #28]
          break;
 800a7ec:	e00c      	b.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a7ee:	4b3c      	ldr	r3, [pc, #240]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d107      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
            frequency = LSE_VALUE;
 800a7fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a800:	61fb      	str	r3, [r7, #28]
          break;
 800a802:	e003      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
          break;
 800a804:	bf00      	nop
 800a806:	e065      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a808:	bf00      	nop
 800a80a:	e063      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a80c:	bf00      	nop
        break;
 800a80e:	e061      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a810:	4b33      	ldr	r3, [pc, #204]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a81a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a822:	d010      	beq.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800a824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a828:	d802      	bhi.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 800a82e:	e02f      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        switch(srcclk)
 800a830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a834:	d012      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x900>
 800a836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a83a:	d019      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          break;
 800a83c:	e028      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a83e:	f7fe ffd7 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a842:	61f8      	str	r0, [r7, #28]
          break;
 800a844:	e024      	b.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a846:	4b26      	ldr	r3, [pc, #152]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	2b02      	cmp	r3, #2
 800a852:	d118      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
              frequency = LSI_VALUE;
 800a854:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a858:	61fb      	str	r3, [r7, #28]
          break;
 800a85a:	e014      	b.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a85c:	4b20      	ldr	r3, [pc, #128]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a868:	d10f      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
            frequency = HSI_VALUE;
 800a86a:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a86c:	61fb      	str	r3, [r7, #28]
          break;
 800a86e:	e00c      	b.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a870:	4b1b      	ldr	r3, [pc, #108]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d107      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = LSE_VALUE;
 800a87e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a882:	61fb      	str	r3, [r7, #28]
          break;
 800a884:	e003      	b.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800a886:	bf00      	nop
 800a888:	e024      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a88a:	bf00      	nop
 800a88c:	e022      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          break;
 800a88e:	bf00      	nop
        break;
 800a890:	e020      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800a892:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a89c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d003      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800a8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a8:	d004      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          break;
 800a8aa:	e00d      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a8ac:	f7fe ffa0 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800a8b0:	61f8      	str	r0, [r7, #28]
          break;
 800a8b2:	e009      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c0:	d101      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
            frequency = HSI_VALUE;
 800a8c2:	4b08      	ldr	r3, [pc, #32]	; (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>)
 800a8c4:	61fb      	str	r3, [r7, #28]
          break;
 800a8c6:	bf00      	nop
        break;
 800a8c8:	e004      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8ca:	bf00      	nop
 800a8cc:	e002      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8ce:	bf00      	nop
 800a8d0:	e000      	b.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      break;
 800a8d2:	bf00      	nop
    }
  }

  return(frequency);
 800a8d4:	69fb      	ldr	r3, [r7, #28]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3720      	adds	r7, #32
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40021000 	.word	0x40021000
 800a8e4:	00f42400 	.word	0x00f42400

0800a8e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a04      	ldr	r2, [pc, #16]	; (800a904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a8f2:	f043 0304 	orr.w	r3, r3, #4
 800a8f6:	6013      	str	r3, [r2, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	40021000 	.word	0x40021000

0800a908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a916:	4b73      	ldr	r3, [pc, #460]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d018      	beq.n	800a954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a922:	4b70      	ldr	r3, [pc, #448]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f003 0203 	and.w	r2, r3, #3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d10d      	bne.n	800a94e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
       ||
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a93a:	4b6a      	ldr	r3, [pc, #424]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	091b      	lsrs	r3, r3, #4
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
       ||
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d044      	beq.n	800a9d8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	73fb      	strb	r3, [r7, #15]
 800a952:	e041      	b.n	800a9d8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d00c      	beq.n	800a976 <RCCEx_PLLSAI1_Config+0x6e>
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d013      	beq.n	800a988 <RCCEx_PLLSAI1_Config+0x80>
 800a960:	2b01      	cmp	r3, #1
 800a962:	d120      	bne.n	800a9a6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a964:	4b5f      	ldr	r3, [pc, #380]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d11d      	bne.n	800a9ac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a974:	e01a      	b.n	800a9ac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a976:	4b5b      	ldr	r3, [pc, #364]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d116      	bne.n	800a9b0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a986:	e013      	b.n	800a9b0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a988:	4b56      	ldr	r3, [pc, #344]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10f      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a994:	4b53      	ldr	r3, [pc, #332]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d109      	bne.n	800a9b4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9a4:	e006      	b.n	800a9b4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9aa:	e004      	b.n	800a9b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800a9b4:	bf00      	nop
    }

    if(status == HAL_OK)
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10d      	bne.n	800a9d8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a9bc:	4b49      	ldr	r3, [pc, #292]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	4944      	ldr	r1, [pc, #272]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d17c      	bne.n	800aad8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a9de:	4b41      	ldr	r3, [pc, #260]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a40      	ldr	r2, [pc, #256]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ea:	f7fa fe7b 	bl	80056e4 <HAL_GetTick>
 800a9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a9f0:	e009      	b.n	800aa06 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9f2:	f7fa fe77 	bl	80056e4 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d902      	bls.n	800aa06 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
        break;
 800aa04:	e005      	b.n	800aa12 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aa06:	4b37      	ldr	r3, [pc, #220]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1ef      	bne.n	800a9f2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d15f      	bne.n	800aad8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d110      	bne.n	800aa40 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa1e:	4b31      	ldr	r3, [pc, #196]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800aa26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6892      	ldr	r2, [r2, #8]
 800aa2e:	0211      	lsls	r1, r2, #8
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	68d2      	ldr	r2, [r2, #12]
 800aa34:	06d2      	lsls	r2, r2, #27
 800aa36:	430a      	orrs	r2, r1
 800aa38:	492a      	ldr	r1, [pc, #168]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	610b      	str	r3, [r1, #16]
 800aa3e:	e027      	b.n	800aa90 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d112      	bne.n	800aa6c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa46:	4b27      	ldr	r3, [pc, #156]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800aa4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6892      	ldr	r2, [r2, #8]
 800aa56:	0211      	lsls	r1, r2, #8
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	6912      	ldr	r2, [r2, #16]
 800aa5c:	0852      	lsrs	r2, r2, #1
 800aa5e:	3a01      	subs	r2, #1
 800aa60:	0552      	lsls	r2, r2, #21
 800aa62:	430a      	orrs	r2, r1
 800aa64:	491f      	ldr	r1, [pc, #124]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	610b      	str	r3, [r1, #16]
 800aa6a:	e011      	b.n	800aa90 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa6c:	4b1d      	ldr	r3, [pc, #116]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800aa74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	6892      	ldr	r2, [r2, #8]
 800aa7c:	0211      	lsls	r1, r2, #8
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	6952      	ldr	r2, [r2, #20]
 800aa82:	0852      	lsrs	r2, r2, #1
 800aa84:	3a01      	subs	r2, #1
 800aa86:	0652      	lsls	r2, r2, #25
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	4916      	ldr	r1, [pc, #88]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800aa90:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a13      	ldr	r2, [pc, #76]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aa96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa9c:	f7fa fe22 	bl	80056e4 <HAL_GetTick>
 800aaa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aaa2:	e009      	b.n	800aab8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aaa4:	f7fa fe1e 	bl	80056e4 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d902      	bls.n	800aab8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	73fb      	strb	r3, [r7, #15]
          break;
 800aab6:	e005      	b.n	800aac4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0ef      	beq.n	800aaa4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800aaca:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	4904      	ldr	r1, [pc, #16]	; (800aae4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	40021000 	.word	0x40021000

0800aae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aaf6:	4b68      	ldr	r3, [pc, #416]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	f003 0303 	and.w	r3, r3, #3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d018      	beq.n	800ab34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ab02:	4b65      	ldr	r3, [pc, #404]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f003 0203 	and.w	r2, r3, #3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d10d      	bne.n	800ab2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
       ||
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ab1a:	4b5f      	ldr	r3, [pc, #380]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	091b      	lsrs	r3, r3, #4
 800ab20:	f003 0307 	and.w	r3, r3, #7
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
       ||
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d044      	beq.n	800abb8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	e041      	b.n	800abb8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d00c      	beq.n	800ab56 <RCCEx_PLLSAI2_Config+0x6e>
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d013      	beq.n	800ab68 <RCCEx_PLLSAI2_Config+0x80>
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d120      	bne.n	800ab86 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ab44:	4b54      	ldr	r3, [pc, #336]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0302 	and.w	r3, r3, #2
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d11d      	bne.n	800ab8c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab54:	e01a      	b.n	800ab8c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ab56:	4b50      	ldr	r3, [pc, #320]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d116      	bne.n	800ab90 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab66:	e013      	b.n	800ab90 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ab68:	4b4b      	ldr	r3, [pc, #300]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10f      	bne.n	800ab94 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ab74:	4b48      	ldr	r3, [pc, #288]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d109      	bne.n	800ab94 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab84:	e006      	b.n	800ab94 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8a:	e004      	b.n	800ab96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab8c:	bf00      	nop
 800ab8e:	e002      	b.n	800ab96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab90:	bf00      	nop
 800ab92:	e000      	b.n	800ab96 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800ab94:	bf00      	nop
    }

    if(status == HAL_OK)
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ab9c:	4b3e      	ldr	r3, [pc, #248]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6819      	ldr	r1, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	3b01      	subs	r3, #1
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	430b      	orrs	r3, r1
 800abb2:	4939      	ldr	r1, [pc, #228]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d166      	bne.n	800ac8c <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800abbe:	4b36      	ldr	r3, [pc, #216]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a35      	ldr	r2, [pc, #212]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abca:	f7fa fd8b 	bl	80056e4 <HAL_GetTick>
 800abce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abd0:	e009      	b.n	800abe6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800abd2:	f7fa fd87 	bl	80056e4 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d902      	bls.n	800abe6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	73fb      	strb	r3, [r7, #15]
        break;
 800abe4:	e005      	b.n	800abf2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800abe6:	4b2c      	ldr	r3, [pc, #176]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1ef      	bne.n	800abd2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d149      	bne.n	800ac8c <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d110      	bne.n	800ac20 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800abfe:	4b26      	ldr	r3, [pc, #152]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ac06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	6892      	ldr	r2, [r2, #8]
 800ac0e:	0211      	lsls	r1, r2, #8
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68d2      	ldr	r2, [r2, #12]
 800ac14:	06d2      	lsls	r2, r2, #27
 800ac16:	430a      	orrs	r2, r1
 800ac18:	491f      	ldr	r1, [pc, #124]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	614b      	str	r3, [r1, #20]
 800ac1e:	e011      	b.n	800ac44 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ac20:	4b1d      	ldr	r3, [pc, #116]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ac28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6892      	ldr	r2, [r2, #8]
 800ac30:	0211      	lsls	r1, r2, #8
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	6912      	ldr	r2, [r2, #16]
 800ac36:	0852      	lsrs	r2, r2, #1
 800ac38:	3a01      	subs	r2, #1
 800ac3a:	0652      	lsls	r2, r2, #25
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	4916      	ldr	r1, [pc, #88]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac50:	f7fa fd48 	bl	80056e4 <HAL_GetTick>
 800ac54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac56:	e009      	b.n	800ac6c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ac58:	f7fa fd44 	bl	80056e4 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d902      	bls.n	800ac6c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
          break;
 800ac6a:	e005      	b.n	800ac78 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d0ef      	beq.n	800ac58 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac80:	695a      	ldr	r2, [r3, #20]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	4904      	ldr	r1, [pc, #16]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1b0>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	40021000 	.word	0x40021000

0800ac9c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acb8:	d10c      	bne.n	800acd4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800acba:	4b77      	ldr	r3, [pc, #476]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800acc4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800accc:	d112      	bne.n	800acf4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800acce:	4b73      	ldr	r3, [pc, #460]	; (800ae9c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800acd0:	61fb      	str	r3, [r7, #28]
 800acd2:	e00f      	b.n	800acf4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acda:	d10b      	bne.n	800acf4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800acdc:	4b6e      	ldr	r3, [pc, #440]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800acde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800ace6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acee:	d101      	bne.n	800acf4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800acf0:	4b6a      	ldr	r3, [pc, #424]	; (800ae9c <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 800acf2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 80c6 	bne.w	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad06:	d003      	beq.n	800ad10 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad0e:	d13b      	bne.n	800ad88 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ad10:	4b61      	ldr	r3, [pc, #388]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad1c:	f040 80b3 	bne.w	800ae86 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800ad20:	4b5d      	ldr	r3, [pc, #372]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 80ac 	beq.w	800ae86 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad2e:	4b5a      	ldr	r3, [pc, #360]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	3301      	adds	r3, #1
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad40:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad42:	4b55      	ldr	r3, [pc, #340]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad4c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ad4e:	4b52      	ldr	r3, [pc, #328]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	0edb      	lsrs	r3, r3, #27
 800ad54:	f003 031f 	and.w	r3, r3, #31
 800ad58:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ad60:	4b4d      	ldr	r3, [pc, #308]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 800ad6c:	2311      	movs	r3, #17
 800ad6e:	617b      	str	r3, [r7, #20]
 800ad70:	e001      	b.n	800ad76 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800ad72:	2307      	movs	r3, #7
 800ad74:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	fb02 f203 	mul.w	r2, r2, r3
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad84:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ad86:	e07e      	b.n	800ae86 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d139      	bne.n	800ae02 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ad8e:	4b42      	ldr	r3, [pc, #264]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad9a:	d175      	bne.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800ad9c:	4b3e      	ldr	r3, [pc, #248]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d06f      	beq.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ada8:	4b3b      	ldr	r3, [pc, #236]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	091b      	lsrs	r3, r3, #4
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	3301      	adds	r3, #1
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800adbc:	4b36      	ldr	r3, [pc, #216]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	0a1b      	lsrs	r3, r3, #8
 800adc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800adc8:	4b33      	ldr	r3, [pc, #204]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	0edb      	lsrs	r3, r3, #27
 800adce:	f003 031f 	and.w	r3, r3, #31
 800add2:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800adda:	4b2f      	ldr	r3, [pc, #188]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800ade6:	2311      	movs	r3, #17
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e001      	b.n	800adf0 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800adec:	2307      	movs	r3, #7
 800adee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	fb02 f203 	mul.w	r2, r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e042      	b.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae08:	d003      	beq.n	800ae12 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae10:	d13a      	bne.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800ae12:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae1e:	d133      	bne.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800ae20:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d02d      	beq.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ae2c:	4b1a      	ldr	r3, [pc, #104]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	3301      	adds	r3, #1
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ae40:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	0a1b      	lsrs	r3, r3, #8
 800ae46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae4a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	0edb      	lsrs	r3, r3, #27
 800ae52:	f003 031f 	and.w	r3, r3, #31
 800ae56:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ae5e:	4b0e      	ldr	r3, [pc, #56]	; (800ae98 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800ae6a:	2311      	movs	r3, #17
 800ae6c:	617b      	str	r3, [r7, #20]
 800ae6e:	e001      	b.n	800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800ae70:	2307      	movs	r3, #7
 800ae72:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	fb02 f203 	mul.w	r2, r2, r3
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	e000      	b.n	800ae88 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ae86:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3724      	adds	r7, #36	; 0x24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40021000 	.word	0x40021000
 800ae9c:	001fff68 	.word	0x001fff68

0800aea0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b088      	sub	sp, #32
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e153      	b.n	800b15a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7fa f934 	bl	8005134 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f957 	bl	800b180 <SAI_Disable>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e13e      	b.n	800b15a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d007      	beq.n	800aefc <HAL_SAI_Init+0x5c>
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d302      	bcc.n	800aef6 <HAL_SAI_Init+0x56>
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d006      	beq.n	800af02 <HAL_SAI_Init+0x62>
 800aef4:	e008      	b.n	800af08 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	61fb      	str	r3, [r7, #28]
      break;
 800aefa:	e008      	b.n	800af0e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aefc:	2310      	movs	r3, #16
 800aefe:	61fb      	str	r3, [r7, #28]
      break;
 800af00:	e005      	b.n	800af0e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800af02:	2320      	movs	r3, #32
 800af04:	61fb      	str	r3, [r7, #28]
      break;
 800af06:	e002      	b.n	800af0e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
      break;
 800af0c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b03      	cmp	r3, #3
 800af14:	d81d      	bhi.n	800af52 <HAL_SAI_Init+0xb2>
 800af16:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <HAL_SAI_Init+0x7c>)
 800af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1c:	0800af2d 	.word	0x0800af2d
 800af20:	0800af33 	.word	0x0800af33
 800af24:	0800af3b 	.word	0x0800af3b
 800af28:	0800af43 	.word	0x0800af43
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]
      break;
 800af30:	e012      	b.n	800af58 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800af32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af36:	617b      	str	r3, [r7, #20]
      break;
 800af38:	e00e      	b.n	800af58 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af3e:	617b      	str	r3, [r7, #20]
      break;
 800af40:	e00a      	b.n	800af58 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800af42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af46:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	61fb      	str	r3, [r7, #28]
      break;
 800af50:	e002      	b.n	800af58 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	617b      	str	r3, [r7, #20]
      break;
 800af56:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a81      	ldr	r2, [pc, #516]	; (800b164 <HAL_SAI_Init+0x2c4>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d004      	beq.n	800af6c <HAL_SAI_Init+0xcc>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a80      	ldr	r2, [pc, #512]	; (800b168 <HAL_SAI_Init+0x2c8>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d103      	bne.n	800af74 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800af6c:	4a7f      	ldr	r2, [pc, #508]	; (800b16c <HAL_SAI_Init+0x2cc>)
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	e002      	b.n	800af7a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800af74:	4a7e      	ldr	r2, [pc, #504]	; (800b170 <HAL_SAI_Init+0x2d0>)
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d041      	beq.n	800b006 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a77      	ldr	r2, [pc, #476]	; (800b164 <HAL_SAI_Init+0x2c4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d004      	beq.n	800af96 <HAL_SAI_Init+0xf6>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a75      	ldr	r2, [pc, #468]	; (800b168 <HAL_SAI_Init+0x2c8>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d105      	bne.n	800afa2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800af96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af9a:	f7fe ffdf 	bl	8009f5c <HAL_RCCEx_GetPeriphCLKFreq>
 800af9e:	6138      	str	r0, [r7, #16]
 800afa0:	e004      	b.n	800afac <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800afa2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800afa6:	f7fe ffd9 	bl	8009f5c <HAL_RCCEx_GetPeriphCLKFreq>
 800afaa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	461a      	mov	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	025b      	lsls	r3, r3, #9
 800afbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a6b      	ldr	r2, [pc, #428]	; (800b174 <HAL_SAI_Init+0x2d4>)
 800afc8:	fba2 2303 	umull	r2, r3, r2, r3
 800afcc:	08da      	lsrs	r2, r3, #3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	4b67      	ldr	r3, [pc, #412]	; (800b174 <HAL_SAI_Init+0x2d4>)
 800afd6:	fba3 2301 	umull	r2, r3, r3, r1
 800afda:	08da      	lsrs	r2, r3, #3
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	1aca      	subs	r2, r1, r3
 800afe6:	2a08      	cmp	r2, #8
 800afe8:	d904      	bls.n	800aff4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d104      	bne.n	800b006 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	085a      	lsrs	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_SAI_Init+0x176>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d109      	bne.n	800b02a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d101      	bne.n	800b022 <HAL_SAI_Init+0x182>
 800b01e:	2300      	movs	r3, #0
 800b020:	e001      	b.n	800b026 <HAL_SAI_Init+0x186>
 800b022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	e008      	b.n	800b03c <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d102      	bne.n	800b038 <HAL_SAI_Init+0x198>
 800b032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b036:	e000      	b.n	800b03a <HAL_SAI_Init+0x19a>
 800b038:	2300      	movs	r3, #0
 800b03a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6819      	ldr	r1, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	4b4c      	ldr	r3, [pc, #304]	; (800b178 <HAL_SAI_Init+0x2d8>)
 800b048:	400b      	ands	r3, r1
 800b04a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b060:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	431a      	orrs	r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800b074:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b080:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	051b      	lsls	r3, r3, #20
 800b088:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b0a0:	f023 030f 	bic.w	r3, r3, #15
 800b0a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6859      	ldr	r1, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699a      	ldr	r2, [r3, #24]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6899      	ldr	r1, [r3, #8]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4b2b      	ldr	r3, [pc, #172]	; (800b17c <HAL_SAI_Init+0x2dc>)
 800b0d0:	400b      	ands	r3, r1
 800b0d2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	6899      	ldr	r1, [r3, #8]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b0ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b0f0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b0fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	430a      	orrs	r2, r1
 800b102:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68d9      	ldr	r1, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b112:	400b      	ands	r3, r1
 800b114:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68d9      	ldr	r1, [r3, #12]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b124:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b12c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b132:	3b01      	subs	r3, #1
 800b134:	021b      	lsls	r3, r3, #8
 800b136:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3720      	adds	r7, #32
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	40015404 	.word	0x40015404
 800b168:	40015424 	.word	0x40015424
 800b16c:	40015400 	.word	0x40015400
 800b170:	40015800 	.word	0x40015800
 800b174:	cccccccd 	.word	0xcccccccd
 800b178:	ff05c010 	.word	0xff05c010
 800b17c:	fff88000 	.word	0xfff88000

0800b180 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b180:	b490      	push	{r4, r7}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b188:	4b15      	ldr	r3, [pc, #84]	; (800b1e0 <SAI_Disable+0x60>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a15      	ldr	r2, [pc, #84]	; (800b1e4 <SAI_Disable+0x64>)
 800b18e:	fba2 2303 	umull	r2, r3, r2, r3
 800b192:	0b1b      	lsrs	r3, r3, #12
 800b194:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b1a8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	d10a      	bne.n	800b1c4 <SAI_Disable+0x44>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c2:	e007      	b.n	800b1d4 <SAI_Disable+0x54>
    }
    count--;
 800b1c4:	3c01      	subs	r4, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1ea      	bne.n	800b1aa <SAI_Disable+0x2a>

  return status;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bc90      	pop	{r4, r7}
 800b1de:	4770      	bx	lr
 800b1e0:	20000058 	.word	0x20000058
 800b1e4:	95cbec1b 	.word	0x95cbec1b

0800b1e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e022      	b.n	800b240 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7f9 fe55 	bl	8004ebc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2203      	movs	r2, #3
 800b216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f814 	bl	800b248 <HAL_SD_InitCard>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e00a      	b.n	800b240 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b248:	b5b0      	push	{r4, r5, r7, lr}
 800b24a:	b08e      	sub	sp, #56	; 0x38
 800b24c:	af04      	add	r7, sp, #16
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b250:	2300      	movs	r3, #0
 800b252:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b258:	2300      	movs	r3, #0
 800b25a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b264:	2376      	movs	r3, #118	; 0x76
 800b266:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681d      	ldr	r5, [r3, #0]
 800b26c:	466c      	mov	r4, sp
 800b26e:	f107 0314 	add.w	r3, r7, #20
 800b272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b27a:	f107 0308 	add.w	r3, r7, #8
 800b27e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b280:	4628      	mov	r0, r5
 800b282:	f002 fa9b 	bl	800d7bc <SDMMC_Init>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e05f      	b.n	800b358 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2a6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f002 fabf 	bl	800d830 <SDMMC_PowerState_ON>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e049      	b.n	800b358 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2d2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fb4d 	bl	800b974 <SD_PowerON>
 800b2da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00b      	beq.n	800b2fa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e02e      	b.n	800b358 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fa6c 	bl	800b7d8 <SD_InitCard>
 800b300:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e01b      	b.n	800b358 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fb14 	bl	800d956 <SDMMC_CmdBlockLength>
 800b32e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00f      	beq.n	800b356 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a09      	ldr	r2, [pc, #36]	; (800b360 <HAL_SD_InitCard+0x118>)
 800b33c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3728      	adds	r7, #40	; 0x28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bdb0      	pop	{r4, r5, r7, pc}
 800b360:	004005ff 	.word	0x004005ff

0800b364 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b372:	0f9b      	lsrs	r3, r3, #30
 800b374:	b2da      	uxtb	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b37e:	0e9b      	lsrs	r3, r3, #26
 800b380:	b2db      	uxtb	r3, r3
 800b382:	f003 030f 	and.w	r3, r3, #15
 800b386:	b2da      	uxtb	r2, r3
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b390:	0e1b      	lsrs	r3, r3, #24
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ae:	0a1b      	lsrs	r3, r3, #8
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3c4:	0d1b      	lsrs	r3, r3, #20
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3d0:	0c1b      	lsrs	r3, r3, #16
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3e2:	0bdb      	lsrs	r3, r3, #15
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f4:	0b9b      	lsrs	r3, r3, #14
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b406:	0b5b      	lsrs	r3, r3, #13
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b418:	0b1b      	lsrs	r3, r3, #12
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	b2da      	uxtb	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2200      	movs	r2, #0
 800b42a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b430:	2b00      	cmp	r3, #0
 800b432:	d163      	bne.n	800b4fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b438:	009a      	lsls	r2, r3, #2
 800b43a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b43e:	4013      	ands	r3, r2
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b444:	0f92      	lsrs	r2, r2, #30
 800b446:	431a      	orrs	r2, r3
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	0edb      	lsrs	r3, r3, #27
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 0307 	and.w	r3, r3, #7
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b462:	0e1b      	lsrs	r3, r3, #24
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	0d5b      	lsrs	r3, r3, #21
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b486:	0c9b      	lsrs	r3, r3, #18
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b498:	0bdb      	lsrs	r3, r3, #15
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	7e1b      	ldrb	r3, [r3, #24]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	2201      	movs	r2, #1
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b4c6:	fb02 f203 	mul.w	r2, r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	7a1b      	ldrb	r3, [r3, #8]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f003 030f 	and.w	r3, r3, #15
 800b4d8:	2201      	movs	r2, #1
 800b4da:	409a      	lsls	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b4e8:	0a52      	lsrs	r2, r2, #9
 800b4ea:	fb02 f203 	mul.w	r2, r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4f8:	661a      	str	r2, [r3, #96]	; 0x60
 800b4fa:	e031      	b.n	800b560 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b500:	2b01      	cmp	r3, #1
 800b502:	d11d      	bne.n	800b540 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b508:	041b      	lsls	r3, r3, #16
 800b50a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b512:	0c1b      	lsrs	r3, r3, #16
 800b514:	431a      	orrs	r2, r3
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	3301      	adds	r3, #1
 800b520:	029a      	lsls	r2, r3, #10
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b534:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
 800b53e:	e00f      	b.n	800b560 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a58      	ldr	r2, [pc, #352]	; (800b6a8 <HAL_SD_GetCardCSD+0x344>)
 800b546:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e09d      	b.n	800b69c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b564:	0b9b      	lsrs	r3, r3, #14
 800b566:	b2db      	uxtb	r3, r3
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b576:	09db      	lsrs	r3, r3, #7
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b598:	0fdb      	lsrs	r3, r3, #31
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a4:	0f5b      	lsrs	r3, r3, #29
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b6:	0e9b      	lsrs	r3, r3, #26
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	f003 0307 	and.w	r3, r3, #7
 800b5be:	b2da      	uxtb	r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c8:	0d9b      	lsrs	r3, r3, #22
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 030f 	and.w	r3, r3, #15
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5da:	0d5b      	lsrs	r3, r3, #21
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	0c1b      	lsrs	r3, r3, #16
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60a:	0bdb      	lsrs	r3, r3, #15
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61e:	0b9b      	lsrs	r3, r3, #14
 800b620:	b2db      	uxtb	r3, r3
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b632:	0b5b      	lsrs	r3, r3, #13
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b646:	0b1b      	lsrs	r3, r3, #12
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65a:	0a9b      	lsrs	r3, r3, #10
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	b2da      	uxtb	r2, r3
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	b2da      	uxtb	r2, r3
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b682:	085b      	lsrs	r3, r3, #1
 800b684:	b2db      	uxtb	r3, r3
 800b686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	004005ff 	.word	0x004005ff

0800b6ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b6ac:	b5b0      	push	{r4, r5, r7, lr}
 800b6ae:	b08e      	sub	sp, #56	; 0x38
 800b6b0:	af04      	add	r7, sp, #16
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d02e      	beq.n	800b72a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d2:	d106      	bne.n	800b6e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
 800b6e0:	e029      	b.n	800b736 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6e8:	d10a      	bne.n	800b700 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f9d0 	bl	800ba90 <SD_WideBus_Enable>
 800b6f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	431a      	orrs	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b6fe:	e01a      	b.n	800b736 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa0d 	bl	800bb26 <SD_WideBus_Disable>
 800b70c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	639a      	str	r2, [r3, #56]	; 0x38
 800b71a:	e00c      	b.n	800b736 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b720:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	639a      	str	r2, [r3, #56]	; 0x38
 800b728:	e005      	b.n	800b736 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d007      	beq.n	800b74e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a24      	ldr	r2, [pc, #144]	; (800b7d4 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b744:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b74c:	e01f      	b.n	800b78e <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	699b      	ldr	r3, [r3, #24]
 800b76e:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681d      	ldr	r5, [r3, #0]
 800b774:	466c      	mov	r4, sp
 800b776:	f107 0314 	add.w	r3, r7, #20
 800b77a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b77e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b788:	4628      	mov	r0, r5
 800b78a:	f002 f817 	bl	800d7bc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b796:	4618      	mov	r0, r3
 800b798:	f002 f8dd 	bl	800d956 <SDMMC_CmdBlockLength>
 800b79c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00c      	beq.n	800b7be <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a0a      	ldr	r2, [pc, #40]	; (800b7d4 <HAL_SD_ConfigWideBusOperation+0x128>)
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3728      	adds	r7, #40	; 0x28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	004005ff 	.word	0x004005ff

0800b7d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b7d8:	b5b0      	push	{r4, r5, r7, lr}
 800b7da:	b094      	sub	sp, #80	; 0x50
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 f830 	bl	800d84e <SDMMC_GetPowerState>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b7f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b7f8:	e0b7      	b.n	800b96a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d02f      	beq.n	800b862 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f9af 	bl	800db6a <SDMMC_CmdSendCID>
 800b80c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <SD_InitCard+0x40>
    {
      return errorstate;
 800b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b816:	e0a8      	b.n	800b96a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f002 f85a 	bl	800d8d8 <SDMMC_GetResponse>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2104      	movs	r1, #4
 800b830:	4618      	mov	r0, r3
 800b832:	f002 f851 	bl	800d8d8 <SDMMC_GetResponse>
 800b836:	4602      	mov	r2, r0
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2108      	movs	r1, #8
 800b842:	4618      	mov	r0, r3
 800b844:	f002 f848 	bl	800d8d8 <SDMMC_GetResponse>
 800b848:	4602      	mov	r2, r0
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	210c      	movs	r1, #12
 800b854:	4618      	mov	r0, r3
 800b856:	f002 f83f 	bl	800d8d8 <SDMMC_GetResponse>
 800b85a:	4602      	mov	r2, r0
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b866:	2b03      	cmp	r3, #3
 800b868:	d00d      	beq.n	800b886 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f107 020e 	add.w	r2, r7, #14
 800b872:	4611      	mov	r1, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f002 f9b5 	bl	800dbe4 <SDMMC_CmdSetRelAdd>
 800b87a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <SD_InitCard+0xae>
    {
      return errorstate;
 800b882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b884:	e071      	b.n	800b96a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d036      	beq.n	800b8fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b88e:	89fb      	ldrh	r3, [r7, #14]
 800b890:	461a      	mov	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89e:	041b      	lsls	r3, r3, #16
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f002 f97f 	bl	800dba6 <SDMMC_CmdSendCSD>
 800b8a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b2:	e05a      	b.n	800b96a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f002 f80c 	bl	800d8d8 <SDMMC_GetResponse>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f002 f803 	bl	800d8d8 <SDMMC_GetResponse>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2108      	movs	r1, #8
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f001 fffa 	bl	800d8d8 <SDMMC_GetResponse>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	210c      	movs	r1, #12
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fff1 	bl	800d8d8 <SDMMC_GetResponse>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2104      	movs	r1, #4
 800b902:	4618      	mov	r0, r3
 800b904:	f001 ffe8 	bl	800d8d8 <SDMMC_GetResponse>
 800b908:	4603      	mov	r3, r0
 800b90a:	0d1a      	lsrs	r2, r3, #20
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b910:	f107 0310 	add.w	r3, r7, #16
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fd24 	bl	800b364 <HAL_SD_GetCardCSD>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b922:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b926:	e020      	b.n	800b96a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6819      	ldr	r1, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b930:	041b      	lsls	r3, r3, #16
 800b932:	f04f 0400 	mov.w	r4, #0
 800b936:	461a      	mov	r2, r3
 800b938:	4623      	mov	r3, r4
 800b93a:	4608      	mov	r0, r1
 800b93c:	f002 f82d 	bl	800d99a <SDMMC_CmdSelDesel>
 800b940:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <SD_InitCard+0x174>
  {
    return errorstate;
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	e00e      	b.n	800b96a <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681d      	ldr	r5, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	466c      	mov	r4, sp
 800b954:	f103 0210 	add.w	r2, r3, #16
 800b958:	ca07      	ldmia	r2, {r0, r1, r2}
 800b95a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b95e:	3304      	adds	r3, #4
 800b960:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b962:	4628      	mov	r0, r5
 800b964:	f001 ff2a 	bl	800d7bc <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3740      	adds	r7, #64	; 0x40
 800b96e:	46bd      	mov	sp, r7
 800b970:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b974 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	617b      	str	r3, [r7, #20]
 800b984:	2300      	movs	r3, #0
 800b986:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f002 f827 	bl	800d9e0 <SDMMC_CmdGoIdleState>
 800b992:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	e072      	b.n	800ba84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f002 f83a 	bl	800da1c <SDMMC_CmdOperCond>
 800b9a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00d      	beq.n	800b9cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f002 f810 	bl	800d9e0 <SDMMC_CmdGoIdleState>
 800b9c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	e05b      	b.n	800ba84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d137      	bne.n	800ba4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f002 f83a 	bl	800da5a <SDMMC_CmdAppCommand>
 800b9e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d02d      	beq.n	800ba4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9f2:	e047      	b.n	800ba84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f002 f82d 	bl	800da5a <SDMMC_CmdAppCommand>
 800ba00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <SD_PowerON+0x98>
    {
      return errorstate;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	e03b      	b.n	800ba84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	491e      	ldr	r1, [pc, #120]	; (800ba8c <SD_PowerON+0x118>)
 800ba12:	4618      	mov	r0, r3
 800ba14:	f002 f843 	bl	800da9e <SDMMC_CmdAppOperCommand>
 800ba18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba24:	e02e      	b.n	800ba84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 ff53 	bl	800d8d8 <SDMMC_GetResponse>
 800ba32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	0fdb      	lsrs	r3, r3, #31
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d101      	bne.n	800ba40 <SD_PowerON+0xcc>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e000      	b.n	800ba42 <SD_PowerON+0xce>
 800ba40:	2300      	movs	r3, #0
 800ba42:	613b      	str	r3, [r7, #16]

    count++;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	3301      	adds	r3, #1
 800ba48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d802      	bhi.n	800ba5a <SD_PowerON+0xe6>
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0cc      	beq.n	800b9f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d902      	bls.n	800ba6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba68:	e00c      	b.n	800ba84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	645a      	str	r2, [r3, #68]	; 0x44
 800ba7a:	e002      	b.n	800ba82 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	c1100000 	.word	0xc1100000

0800ba90 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 ff16 	bl	800d8d8 <SDMMC_GetResponse>
 800baac:	4603      	mov	r3, r0
 800baae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bab6:	d102      	bne.n	800babe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800babc:	e02f      	b.n	800bb1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800babe:	f107 030c 	add.w	r3, r7, #12
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f879 	bl	800bbbc <SD_FindSCR>
 800baca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	e023      	b.n	800bb1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01c      	beq.n	800bb1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae8:	041b      	lsls	r3, r3, #16
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f001 ffb4 	bl	800da5a <SDMMC_CmdAppCommand>
 800baf2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	e00f      	b.n	800bb1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2102      	movs	r1, #2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f001 ffed 	bl	800dae4 <SDMMC_CmdBusWidth>
 800bb0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	e003      	b.n	800bb1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e001      	b.n	800bb1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b086      	sub	sp, #24
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	2300      	movs	r3, #0
 800bb34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f001 fecb 	bl	800d8d8 <SDMMC_GetResponse>
 800bb42:	4603      	mov	r3, r0
 800bb44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb4c:	d102      	bne.n	800bb54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb52:	e02f      	b.n	800bbb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb54:	f107 030c 	add.w	r3, r7, #12
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f82e 	bl	800bbbc <SD_FindSCR>
 800bb60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	e023      	b.n	800bbb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01c      	beq.n	800bbb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb7e:	041b      	lsls	r3, r3, #16
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f001 ff69 	bl	800da5a <SDMMC_CmdAppCommand>
 800bb88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	e00f      	b.n	800bbb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f001 ffa2 	bl	800dae4 <SDMMC_CmdBusWidth>
 800bba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	e003      	b.n	800bbb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	e001      	b.n	800bbb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b08f      	sub	sp, #60	; 0x3c
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bbc6:	f7f9 fd8d 	bl	80056e4 <HAL_GetTick>
 800bbca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60bb      	str	r3, [r7, #8]
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2108      	movs	r1, #8
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 feb7 	bl	800d956 <SDMMC_CmdBlockLength>
 800bbe8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf2:	e0a9      	b.n	800bd48 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfc:	041b      	lsls	r3, r3, #16
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f001 ff2a 	bl	800da5a <SDMMC_CmdAppCommand>
 800bc06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	e09a      	b.n	800bd48 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bc18:	2308      	movs	r3, #8
 800bc1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bc1c:	2330      	movs	r3, #48	; 0x30
 800bc1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bc20:	2302      	movs	r3, #2
 800bc22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f107 0210 	add.w	r2, r7, #16
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 fe61 	bl	800d8fe <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f001 ff71 	bl	800db28 <SDMMC_CmdSendSCR>
 800bc46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d022      	beq.n	800bc94 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	e07a      	b.n	800bd48 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00e      	beq.n	800bc7e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	f107 0208 	add.w	r2, r7, #8
 800bc6c:	18d4      	adds	r4, r2, r3
 800bc6e:	4608      	mov	r0, r1
 800bc70:	f001 fdd1 	bl	800d816 <SDMMC_ReadFIFO>
 800bc74:	4603      	mov	r3, r0
 800bc76:	6023      	str	r3, [r4, #0]
      index++;
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc7e:	f7f9 fd31 	bl	80056e4 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc8c:	d102      	bne.n	800bc94 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc92:	e059      	b.n	800bd48 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc9a:	f240 432a 	movw	r3, #1066	; 0x42a
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0d6      	beq.n	800bc52 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcaa:	f003 0308 	and.w	r3, r3, #8
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2208      	movs	r2, #8
 800bcb8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bcba:	2308      	movs	r3, #8
 800bcbc:	e044      	b.n	800bd48 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc4:	f003 0302 	and.w	r3, r3, #2
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d005      	beq.n	800bcd8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e037      	b.n	800bd48 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcde:	f003 0320 	and.w	r3, r3, #32
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d005      	beq.n	800bcf2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2220      	movs	r2, #32
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bcee:	2320      	movs	r3, #32
 800bcf0:	e02a      	b.n	800bd48 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f240 523a 	movw	r2, #1338	; 0x53a
 800bcfa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	061a      	lsls	r2, r3, #24
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	0a1b      	lsrs	r3, r3, #8
 800bd0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	0e1b      	lsrs	r3, r3, #24
 800bd18:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	601a      	str	r2, [r3, #0]
    scr++;
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	3304      	adds	r3, #4
 800bd22:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	061a      	lsls	r2, r3, #24
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	021b      	lsls	r3, r3, #8
 800bd2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	0a1b      	lsrs	r3, r3, #8
 800bd36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	0e1b      	lsrs	r3, r3, #24
 800bd40:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd44:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	373c      	adds	r7, #60	; 0x3c
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd90      	pop	{r4, r7, pc}

0800bd50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e07c      	b.n	800be5c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d106      	bne.n	800bd82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7f9 f8ff 	bl	8004f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2202      	movs	r2, #2
 800bd86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bda2:	d902      	bls.n	800bdaa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	e002      	b.n	800bdb0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bdaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bdb8:	d007      	beq.n	800bdca <HAL_SPI_Init+0x7a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdc2:	d002      	beq.n	800bdca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10b      	bne.n	800bdea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdda:	d903      	bls.n	800bde4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2202      	movs	r2, #2
 800bde0:	631a      	str	r2, [r3, #48]	; 0x30
 800bde2:	e002      	b.n	800bdea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685a      	ldr	r2, [r3, #4]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be08:	431a      	orrs	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	431a      	orrs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	ea42 0103 	orr.w	r1, r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	0c1b      	lsrs	r3, r3, #16
 800be2a:	f003 0204 	and.w	r2, r3, #4
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	ea42 0103 	orr.w	r1, r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	430a      	orrs	r2, r1
 800be4a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e038      	b.n	800beec <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f7f9 f946 	bl	8005120 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3308      	adds	r3, #8
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f001 fb74 	bl	800d58c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6818      	ldr	r0, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	461a      	mov	r2, r3
 800beae:	68b9      	ldr	r1, [r7, #8]
 800beb0:	f001 fbfc 	bl	800d6ac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6858      	ldr	r0, [r3, #4]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	f001 fc43 	bl	800d74c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	6892      	ldr	r2, [r2, #8]
 800bece:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	6892      	ldr	r2, [r2, #8]
 800beda:	f041 0101 	orr.w	r1, r1, #1
 800bede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	e01d      	b.n	800bf42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f815 	bl	800bf4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3304      	adds	r3, #4
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f000 f986 	bl	800c244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
	...

0800bf60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f042 0201 	orr.w	r2, r2, #1
 800bf76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	689a      	ldr	r2, [r3, #8]
 800bf7e:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <HAL_TIM_Base_Start_IT+0x50>)
 800bf80:	4013      	ands	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b06      	cmp	r3, #6
 800bf88:	d00b      	beq.n	800bfa2 <HAL_TIM_Base_Start_IT+0x42>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf90:	d007      	beq.n	800bfa2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f042 0201 	orr.w	r2, r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	00010007 	.word	0x00010007

0800bfb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d122      	bne.n	800c010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d11b      	bne.n	800c010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0202 	mvn.w	r2, #2
 800bfe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f905 	bl	800c206 <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f8f7 	bl	800c1f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f908 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0304 	and.w	r3, r3, #4
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	d122      	bne.n	800c064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d11b      	bne.n	800c064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0204 	mvn.w	r2, #4
 800c034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f8db 	bl	800c206 <HAL_TIM_IC_CaptureCallback>
 800c050:	e005      	b.n	800c05e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f8cd 	bl	800c1f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f8de 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	f003 0308 	and.w	r3, r3, #8
 800c06e:	2b08      	cmp	r3, #8
 800c070:	d122      	bne.n	800c0b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f003 0308 	and.w	r3, r3, #8
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d11b      	bne.n	800c0b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f06f 0208 	mvn.w	r2, #8
 800c088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2204      	movs	r2, #4
 800c08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f8b1 	bl	800c206 <HAL_TIM_IC_CaptureCallback>
 800c0a4:	e005      	b.n	800c0b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f8a3 	bl	800c1f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f8b4 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	f003 0310 	and.w	r3, r3, #16
 800c0c2:	2b10      	cmp	r3, #16
 800c0c4:	d122      	bne.n	800c10c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b10      	cmp	r3, #16
 800c0d2:	d11b      	bne.n	800c10c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f06f 0210 	mvn.w	r2, #16
 800c0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f887 	bl	800c206 <HAL_TIM_IC_CaptureCallback>
 800c0f8:	e005      	b.n	800c106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f879 	bl	800c1f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f88a 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	2b01      	cmp	r3, #1
 800c118:	d10e      	bne.n	800c138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b01      	cmp	r3, #1
 800c126:	d107      	bne.n	800c138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f06f 0201 	mvn.w	r2, #1
 800c130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7f7 fd7e 	bl	8003c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d10e      	bne.n	800c164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c150:	2b80      	cmp	r3, #128	; 0x80
 800c152:	d107      	bne.n	800c164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f914 	bl	800c38c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c172:	d10e      	bne.n	800c192 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b80      	cmp	r3, #128	; 0x80
 800c180:	d107      	bne.n	800c192 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f907 	bl	800c3a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d10e      	bne.n	800c1be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1aa:	2b40      	cmp	r3, #64	; 0x40
 800c1ac:	d107      	bne.n	800c1be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f838 	bl	800c22e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	f003 0320 	and.w	r3, r3, #32
 800c1c8:	2b20      	cmp	r3, #32
 800c1ca:	d10e      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b20      	cmp	r3, #32
 800c1d8:	d107      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f06f 0220 	mvn.w	r2, #32
 800c1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f8c7 	bl	800c378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
	...

0800c244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a40      	ldr	r2, [pc, #256]	; (800c358 <TIM_Base_SetConfig+0x114>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d013      	beq.n	800c284 <TIM_Base_SetConfig+0x40>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c262:	d00f      	beq.n	800c284 <TIM_Base_SetConfig+0x40>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a3d      	ldr	r2, [pc, #244]	; (800c35c <TIM_Base_SetConfig+0x118>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d00b      	beq.n	800c284 <TIM_Base_SetConfig+0x40>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a3c      	ldr	r2, [pc, #240]	; (800c360 <TIM_Base_SetConfig+0x11c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d007      	beq.n	800c284 <TIM_Base_SetConfig+0x40>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a3b      	ldr	r2, [pc, #236]	; (800c364 <TIM_Base_SetConfig+0x120>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d003      	beq.n	800c284 <TIM_Base_SetConfig+0x40>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a3a      	ldr	r2, [pc, #232]	; (800c368 <TIM_Base_SetConfig+0x124>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d108      	bne.n	800c296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a2f      	ldr	r2, [pc, #188]	; (800c358 <TIM_Base_SetConfig+0x114>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d01f      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a4:	d01b      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a2c      	ldr	r2, [pc, #176]	; (800c35c <TIM_Base_SetConfig+0x118>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d017      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a2b      	ldr	r2, [pc, #172]	; (800c360 <TIM_Base_SetConfig+0x11c>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d013      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a2a      	ldr	r2, [pc, #168]	; (800c364 <TIM_Base_SetConfig+0x120>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d00f      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a29      	ldr	r2, [pc, #164]	; (800c368 <TIM_Base_SetConfig+0x124>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d00b      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a28      	ldr	r2, [pc, #160]	; (800c36c <TIM_Base_SetConfig+0x128>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d007      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a27      	ldr	r2, [pc, #156]	; (800c370 <TIM_Base_SetConfig+0x12c>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d003      	beq.n	800c2de <TIM_Base_SetConfig+0x9a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a26      	ldr	r2, [pc, #152]	; (800c374 <TIM_Base_SetConfig+0x130>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d108      	bne.n	800c2f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a10      	ldr	r2, [pc, #64]	; (800c358 <TIM_Base_SetConfig+0x114>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d00f      	beq.n	800c33c <TIM_Base_SetConfig+0xf8>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a12      	ldr	r2, [pc, #72]	; (800c368 <TIM_Base_SetConfig+0x124>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d00b      	beq.n	800c33c <TIM_Base_SetConfig+0xf8>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a11      	ldr	r2, [pc, #68]	; (800c36c <TIM_Base_SetConfig+0x128>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d007      	beq.n	800c33c <TIM_Base_SetConfig+0xf8>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a10      	ldr	r2, [pc, #64]	; (800c370 <TIM_Base_SetConfig+0x12c>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d003      	beq.n	800c33c <TIM_Base_SetConfig+0xf8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a0f      	ldr	r2, [pc, #60]	; (800c374 <TIM_Base_SetConfig+0x130>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d103      	bne.n	800c344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	691a      	ldr	r2, [r3, #16]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	615a      	str	r2, [r3, #20]
}
 800c34a:	bf00      	nop
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	40012c00 	.word	0x40012c00
 800c35c:	40000400 	.word	0x40000400
 800c360:	40000800 	.word	0x40000800
 800c364:	40000c00 	.word	0x40000c00
 800c368:	40013400 	.word	0x40013400
 800c36c:	40014000 	.word	0x40014000
 800c370:	40014400 	.word	0x40014400
 800c374:	40014800 	.word	0x40014800

0800c378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e040      	b.n	800c448 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7f8 fc20 	bl	8004c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2224      	movs	r2, #36	; 0x24
 800c3e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f022 0201 	bic.w	r2, r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa7a 	bl	800c8ec <UART_SetConfig>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d101      	bne.n	800c402 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e022      	b.n	800c448 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fde0 	bl	800cfd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c41e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c42e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fe67 	bl	800d114 <UART_CheckIdleState>
 800c446:	4603      	mov	r3, r0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	4613      	mov	r3, r2
 800c45c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c462:	2b20      	cmp	r3, #32
 800c464:	d144      	bne.n	800c4f0 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <HAL_UART_Transmit_IT+0x22>
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e03d      	b.n	800c4f2 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <HAL_UART_Transmit_IT+0x34>
 800c480:	2302      	movs	r3, #2
 800c482:	e036      	b.n	800c4f2 <HAL_UART_Transmit_IT+0xa2>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	88fa      	ldrh	r2, [r7, #6]
 800c496:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	88fa      	ldrh	r2, [r7, #6]
 800c49e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2221      	movs	r2, #33	; 0x21
 800c4b2:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4bc:	d107      	bne.n	800c4ce <HAL_UART_Transmit_IT+0x7e>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	4a0d      	ldr	r2, [pc, #52]	; (800c500 <HAL_UART_Transmit_IT+0xb0>)
 800c4ca:	665a      	str	r2, [r3, #100]	; 0x64
 800c4cc:	e002      	b.n	800c4d4 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4a0c      	ldr	r2, [pc, #48]	; (800c504 <HAL_UART_Transmit_IT+0xb4>)
 800c4d2:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c4ea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e000      	b.n	800c4f2 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800c4f0:	2302      	movs	r3, #2
  }
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	0800d375 	.word	0x0800d375
 800c504:	0800d301 	.word	0x0800d301

0800c508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	4613      	mov	r3, r2
 800c514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	f040 808a 	bne.w	800c634 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <HAL_UART_Receive_IT+0x24>
 800c526:	88fb      	ldrh	r3, [r7, #6]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e082      	b.n	800c636 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c536:	2b01      	cmp	r3, #1
 800c538:	d101      	bne.n	800c53e <HAL_UART_Receive_IT+0x36>
 800c53a:	2302      	movs	r3, #2
 800c53c:	e07b      	b.n	800c636 <HAL_UART_Receive_IT+0x12e>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	88fa      	ldrh	r2, [r7, #6]
 800c550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c56a:	d10e      	bne.n	800c58a <HAL_UART_Receive_IT+0x82>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d105      	bne.n	800c580 <HAL_UART_Receive_IT+0x78>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c57a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c57e:	e02d      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	22ff      	movs	r2, #255	; 0xff
 800c584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c588:	e028      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10d      	bne.n	800c5ae <HAL_UART_Receive_IT+0xa6>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d104      	bne.n	800c5a4 <HAL_UART_Receive_IT+0x9c>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	22ff      	movs	r2, #255	; 0xff
 800c59e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5a2:	e01b      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	227f      	movs	r2, #127	; 0x7f
 800c5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5ac:	e016      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5b6:	d10d      	bne.n	800c5d4 <HAL_UART_Receive_IT+0xcc>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d104      	bne.n	800c5ca <HAL_UART_Receive_IT+0xc2>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	227f      	movs	r2, #127	; 0x7f
 800c5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5c8:	e008      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	223f      	movs	r2, #63	; 0x3f
 800c5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5d2:	e003      	b.n	800c5dc <HAL_UART_Receive_IT+0xd4>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2222      	movs	r2, #34	; 0x22
 800c5e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689a      	ldr	r2, [r3, #8]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f042 0201 	orr.w	r2, r2, #1
 800c5f6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c600:	d107      	bne.n	800c612 <HAL_UART_Receive_IT+0x10a>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d103      	bne.n	800c612 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4a0d      	ldr	r2, [pc, #52]	; (800c644 <HAL_UART_Receive_IT+0x13c>)
 800c60e:	661a      	str	r2, [r3, #96]	; 0x60
 800c610:	e002      	b.n	800c618 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4a0c      	ldr	r2, [pc, #48]	; (800c648 <HAL_UART_Receive_IT+0x140>)
 800c616:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c62e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c630:	2300      	movs	r3, #0
 800c632:	e000      	b.n	800c636 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800c634:	2302      	movs	r3, #2
  }
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	0800d4cd 	.word	0x0800d4cd
 800c648:	0800d423 	.word	0x0800d423

0800c64c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c672:	4013      	ands	r3, r2
 800c674:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d113      	bne.n	800c6a4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	f003 0320 	and.w	r3, r3, #32
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00e      	beq.n	800c6a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	f003 0320 	and.w	r3, r3, #32
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d009      	beq.n	800c6a4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 8114 	beq.w	800c8c2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	4798      	blx	r3
      }
      return;
 800c6a2:	e10e      	b.n	800c8c2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80d6 	beq.w	800c858 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f003 0301 	and.w	r3, r3, #1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d105      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80cb 	beq.w	800c858 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00e      	beq.n	800c6ea <HAL_UART_IRQHandler+0x9e>
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d009      	beq.n	800c6ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e2:	f043 0201 	orr.w	r2, r3, #1
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00e      	beq.n	800c712 <HAL_UART_IRQHandler+0xc6>
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d009      	beq.n	800c712 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2202      	movs	r2, #2
 800c704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c70a:	f043 0204 	orr.w	r2, r3, #4
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00e      	beq.n	800c73a <HAL_UART_IRQHandler+0xee>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	d009      	beq.n	800c73a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2204      	movs	r2, #4
 800c72c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c732:	f043 0202 	orr.w	r2, r3, #2
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b00      	cmp	r3, #0
 800c742:	d013      	beq.n	800c76c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2208      	movs	r2, #8
 800c75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c764:	f043 0208 	orr.w	r2, r3, #8
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00f      	beq.n	800c796 <HAL_UART_IRQHandler+0x14a>
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00a      	beq.n	800c796 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c78e:	f043 0220 	orr.w	r2, r3, #32
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 8093 	beq.w	800c8c6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	f003 0320 	and.w	r3, r3, #32
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00c      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d007      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	d004      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d031      	beq.n	800c846 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fd56 	bl	800d294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f2:	2b40      	cmp	r3, #64	; 0x40
 800c7f4:	d123      	bne.n	800c83e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c804:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d013      	beq.n	800c836 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c812:	4a30      	ldr	r2, [pc, #192]	; (800c8d4 <HAL_UART_IRQHandler+0x288>)
 800c814:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fa f834 	bl	8006888 <HAL_DMA_Abort_IT>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d016      	beq.n	800c854 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c834:	e00e      	b.n	800c854 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7f8 fec0 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c83c:	e00a      	b.n	800c854 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7f8 febc 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c844:	e006      	b.n	800c854 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7f8 feb8 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800c852:	e038      	b.n	800c8c6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c854:	bf00      	nop
    return;
 800c856:	e036      	b.n	800c8c6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00d      	beq.n	800c87e <HAL_UART_IRQHandler+0x232>
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d008      	beq.n	800c87e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fe7d 	bl	800d576 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c87c:	e026      	b.n	800c8cc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00d      	beq.n	800c8a4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d008      	beq.n	800c8a4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c896:	2b00      	cmp	r3, #0
 800c898:	d017      	beq.n	800c8ca <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
    }
    return;
 800c8a2:	e012      	b.n	800c8ca <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00e      	beq.n	800c8cc <HAL_UART_IRQHandler+0x280>
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d009      	beq.n	800c8cc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fd99 	bl	800d3f0 <UART_EndTransmit_IT>
    return;
 800c8be:	bf00      	nop
 800c8c0:	e004      	b.n	800c8cc <HAL_UART_IRQHandler+0x280>
      return;
 800c8c2:	bf00      	nop
 800c8c4:	e002      	b.n	800c8cc <HAL_UART_IRQHandler+0x280>
    return;
 800c8c6:	bf00      	nop
 800c8c8:	e000      	b.n	800c8cc <HAL_UART_IRQHandler+0x280>
    return;
 800c8ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	0800d2d5 	.word	0x0800d2d5

0800c8d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c8f0:	b08a      	sub	sp, #40	; 0x28
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800c8fe:	2300      	movs	r3, #0
 800c900:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689a      	ldr	r2, [r3, #8]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	431a      	orrs	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	431a      	orrs	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	4313      	orrs	r3, r2
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	4bb8      	ldr	r3, [pc, #736]	; (800cc04 <UART_SetConfig+0x318>)
 800c922:	4013      	ands	r3, r2
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	6812      	ldr	r2, [r2, #0]
 800c928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c92a:	430b      	orrs	r3, r1
 800c92c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68da      	ldr	r2, [r3, #12]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4aae      	ldr	r2, [pc, #696]	; (800cc08 <UART_SetConfig+0x31c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d004      	beq.n	800c95e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	4313      	orrs	r3, r2
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96e:	430a      	orrs	r2, r1
 800c970:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4aa5      	ldr	r2, [pc, #660]	; (800cc0c <UART_SetConfig+0x320>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d126      	bne.n	800c9ca <UART_SetConfig+0xde>
 800c97c:	4ba4      	ldr	r3, [pc, #656]	; (800cc10 <UART_SetConfig+0x324>)
 800c97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c982:	f003 0303 	and.w	r3, r3, #3
 800c986:	2b03      	cmp	r3, #3
 800c988:	d81a      	bhi.n	800c9c0 <UART_SetConfig+0xd4>
 800c98a:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <UART_SetConfig+0xa4>)
 800c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c990:	0800c9a1 	.word	0x0800c9a1
 800c994:	0800c9b1 	.word	0x0800c9b1
 800c998:	0800c9a9 	.word	0x0800c9a9
 800c99c:	0800c9b9 	.word	0x0800c9b9
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9a6:	e105      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9ae:	e101      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9b6:	e0fd      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800c9b8:	2308      	movs	r3, #8
 800c9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9be:	e0f9      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800c9c0:	2310      	movs	r3, #16
 800c9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c9c6:	bf00      	nop
 800c9c8:	e0f4      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a91      	ldr	r2, [pc, #580]	; (800cc14 <UART_SetConfig+0x328>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d138      	bne.n	800ca46 <UART_SetConfig+0x15a>
 800c9d4:	4b8e      	ldr	r3, [pc, #568]	; (800cc10 <UART_SetConfig+0x324>)
 800c9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9da:	f003 030c 	and.w	r3, r3, #12
 800c9de:	2b0c      	cmp	r3, #12
 800c9e0:	d82c      	bhi.n	800ca3c <UART_SetConfig+0x150>
 800c9e2:	a201      	add	r2, pc, #4	; (adr r2, 800c9e8 <UART_SetConfig+0xfc>)
 800c9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e8:	0800ca1d 	.word	0x0800ca1d
 800c9ec:	0800ca3d 	.word	0x0800ca3d
 800c9f0:	0800ca3d 	.word	0x0800ca3d
 800c9f4:	0800ca3d 	.word	0x0800ca3d
 800c9f8:	0800ca2d 	.word	0x0800ca2d
 800c9fc:	0800ca3d 	.word	0x0800ca3d
 800ca00:	0800ca3d 	.word	0x0800ca3d
 800ca04:	0800ca3d 	.word	0x0800ca3d
 800ca08:	0800ca25 	.word	0x0800ca25
 800ca0c:	0800ca3d 	.word	0x0800ca3d
 800ca10:	0800ca3d 	.word	0x0800ca3d
 800ca14:	0800ca3d 	.word	0x0800ca3d
 800ca18:	0800ca35 	.word	0x0800ca35
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca22:	e0c7      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca24:	2302      	movs	r3, #2
 800ca26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca2a:	e0c3      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca32:	e0bf      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca34:	2308      	movs	r3, #8
 800ca36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca3a:	e0bb      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca3c:	2310      	movs	r3, #16
 800ca3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca42:	bf00      	nop
 800ca44:	e0b6      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a73      	ldr	r2, [pc, #460]	; (800cc18 <UART_SetConfig+0x32c>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d125      	bne.n	800ca9c <UART_SetConfig+0x1b0>
 800ca50:	4b6f      	ldr	r3, [pc, #444]	; (800cc10 <UART_SetConfig+0x324>)
 800ca52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ca5a:	2b10      	cmp	r3, #16
 800ca5c:	d011      	beq.n	800ca82 <UART_SetConfig+0x196>
 800ca5e:	2b10      	cmp	r3, #16
 800ca60:	d802      	bhi.n	800ca68 <UART_SetConfig+0x17c>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d005      	beq.n	800ca72 <UART_SetConfig+0x186>
 800ca66:	e014      	b.n	800ca92 <UART_SetConfig+0x1a6>
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d006      	beq.n	800ca7a <UART_SetConfig+0x18e>
 800ca6c:	2b30      	cmp	r3, #48	; 0x30
 800ca6e:	d00c      	beq.n	800ca8a <UART_SetConfig+0x19e>
 800ca70:	e00f      	b.n	800ca92 <UART_SetConfig+0x1a6>
 800ca72:	2300      	movs	r3, #0
 800ca74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca78:	e09c      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca80:	e098      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca82:	2304      	movs	r3, #4
 800ca84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca88:	e094      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca90:	e090      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca92:	2310      	movs	r3, #16
 800ca94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca98:	bf00      	nop
 800ca9a:	e08b      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a5e      	ldr	r2, [pc, #376]	; (800cc1c <UART_SetConfig+0x330>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d125      	bne.n	800caf2 <UART_SetConfig+0x206>
 800caa6:	4b5a      	ldr	r3, [pc, #360]	; (800cc10 <UART_SetConfig+0x324>)
 800caa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cab0:	2b40      	cmp	r3, #64	; 0x40
 800cab2:	d011      	beq.n	800cad8 <UART_SetConfig+0x1ec>
 800cab4:	2b40      	cmp	r3, #64	; 0x40
 800cab6:	d802      	bhi.n	800cabe <UART_SetConfig+0x1d2>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d005      	beq.n	800cac8 <UART_SetConfig+0x1dc>
 800cabc:	e014      	b.n	800cae8 <UART_SetConfig+0x1fc>
 800cabe:	2b80      	cmp	r3, #128	; 0x80
 800cac0:	d006      	beq.n	800cad0 <UART_SetConfig+0x1e4>
 800cac2:	2bc0      	cmp	r3, #192	; 0xc0
 800cac4:	d00c      	beq.n	800cae0 <UART_SetConfig+0x1f4>
 800cac6:	e00f      	b.n	800cae8 <UART_SetConfig+0x1fc>
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cace:	e071      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cad0:	2302      	movs	r3, #2
 800cad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cad6:	e06d      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cade:	e069      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cae6:	e065      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800caee:	bf00      	nop
 800caf0:	e060      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a4a      	ldr	r2, [pc, #296]	; (800cc20 <UART_SetConfig+0x334>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d129      	bne.n	800cb50 <UART_SetConfig+0x264>
 800cafc:	4b44      	ldr	r3, [pc, #272]	; (800cc10 <UART_SetConfig+0x324>)
 800cafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb0a:	d014      	beq.n	800cb36 <UART_SetConfig+0x24a>
 800cb0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb10:	d802      	bhi.n	800cb18 <UART_SetConfig+0x22c>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <UART_SetConfig+0x23a>
 800cb16:	e016      	b.n	800cb46 <UART_SetConfig+0x25a>
 800cb18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb1c:	d007      	beq.n	800cb2e <UART_SetConfig+0x242>
 800cb1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb22:	d00c      	beq.n	800cb3e <UART_SetConfig+0x252>
 800cb24:	e00f      	b.n	800cb46 <UART_SetConfig+0x25a>
 800cb26:	2300      	movs	r3, #0
 800cb28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb2c:	e042      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb2e:	2302      	movs	r3, #2
 800cb30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb34:	e03e      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb36:	2304      	movs	r3, #4
 800cb38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb3c:	e03a      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb3e:	2308      	movs	r3, #8
 800cb40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb44:	e036      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb46:	2310      	movs	r3, #16
 800cb48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb4c:	bf00      	nop
 800cb4e:	e031      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a2c      	ldr	r2, [pc, #176]	; (800cc08 <UART_SetConfig+0x31c>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d129      	bne.n	800cbae <UART_SetConfig+0x2c2>
 800cb5a:	4b2d      	ldr	r3, [pc, #180]	; (800cc10 <UART_SetConfig+0x324>)
 800cb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb68:	d014      	beq.n	800cb94 <UART_SetConfig+0x2a8>
 800cb6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb6e:	d802      	bhi.n	800cb76 <UART_SetConfig+0x28a>
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d007      	beq.n	800cb84 <UART_SetConfig+0x298>
 800cb74:	e016      	b.n	800cba4 <UART_SetConfig+0x2b8>
 800cb76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb7a:	d007      	beq.n	800cb8c <UART_SetConfig+0x2a0>
 800cb7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb80:	d00c      	beq.n	800cb9c <UART_SetConfig+0x2b0>
 800cb82:	e00f      	b.n	800cba4 <UART_SetConfig+0x2b8>
 800cb84:	2300      	movs	r3, #0
 800cb86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb8a:	e013      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb92:	e00f      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb94:	2304      	movs	r3, #4
 800cb96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb9a:	e00b      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cb9c:	2308      	movs	r3, #8
 800cb9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cba2:	e007      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cba4:	2310      	movs	r3, #16
 800cba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbaa:	bf00      	nop
 800cbac:	e002      	b.n	800cbb4 <UART_SetConfig+0x2c8>
 800cbae:	2310      	movs	r3, #16
 800cbb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a13      	ldr	r2, [pc, #76]	; (800cc08 <UART_SetConfig+0x31c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	f040 80fe 	bne.w	800cdbc <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	d837      	bhi.n	800cc38 <UART_SetConfig+0x34c>
 800cbc8:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <UART_SetConfig+0x2e4>)
 800cbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbce:	bf00      	nop
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cc39 	.word	0x0800cc39
 800cbd8:	0800cbfd 	.word	0x0800cbfd
 800cbdc:	0800cc39 	.word	0x0800cc39
 800cbe0:	0800cc29 	.word	0x0800cc29
 800cbe4:	0800cc39 	.word	0x0800cc39
 800cbe8:	0800cc39 	.word	0x0800cc39
 800cbec:	0800cc39 	.word	0x0800cc39
 800cbf0:	0800cc31 	.word	0x0800cc31
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800cbf4:	f7fc fdfc 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800cbf8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cbfa:	e020      	b.n	800cc3e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800cbfc:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <UART_SetConfig+0x338>)
 800cbfe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc00:	e01d      	b.n	800cc3e <UART_SetConfig+0x352>
 800cc02:	bf00      	nop
 800cc04:	efff69f3 	.word	0xefff69f3
 800cc08:	40008000 	.word	0x40008000
 800cc0c:	40013800 	.word	0x40013800
 800cc10:	40021000 	.word	0x40021000
 800cc14:	40004400 	.word	0x40004400
 800cc18:	40004800 	.word	0x40004800
 800cc1c:	40004c00 	.word	0x40004c00
 800cc20:	40005000 	.word	0x40005000
 800cc24:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800cc28:	f7fc fd4c 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800cc2c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc2e:	e006      	b.n	800cc3e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800cc30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc34:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cc36:	e002      	b.n	800cc3e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	76fb      	strb	r3, [r7, #27]
        break;
 800cc3c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 81b9 	beq.w	800cfb8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d305      	bcc.n	800cc62 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d902      	bls.n	800cc68 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	76fb      	strb	r3, [r7, #27]
 800cc66:	e1a7      	b.n	800cfb8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800cc68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc6c:	2b08      	cmp	r3, #8
 800cc6e:	f200 8092 	bhi.w	800cd96 <UART_SetConfig+0x4aa>
 800cc72:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <UART_SetConfig+0x38c>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc9d 	.word	0x0800cc9d
 800cc7c:	0800cd97 	.word	0x0800cd97
 800cc80:	0800cceb 	.word	0x0800cceb
 800cc84:	0800cd97 	.word	0x0800cd97
 800cc88:	0800cd1f 	.word	0x0800cd1f
 800cc8c:	0800cd97 	.word	0x0800cd97
 800cc90:	0800cd97 	.word	0x0800cd97
 800cc94:	0800cd97 	.word	0x0800cd97
 800cc98:	0800cd6d 	.word	0x0800cd6d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800cc9c:	f7fc fda8 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800cca0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	4619      	mov	r1, r3
 800cca6:	f04f 0200 	mov.w	r2, #0
 800ccaa:	f04f 0300 	mov.w	r3, #0
 800ccae:	f04f 0400 	mov.w	r4, #0
 800ccb2:	0214      	lsls	r4, r2, #8
 800ccb4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ccb8:	020b      	lsls	r3, r1, #8
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	6852      	ldr	r2, [r2, #4]
 800ccbe:	0852      	lsrs	r2, r2, #1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	f04f 0200 	mov.w	r2, #0
 800ccc6:	eb13 0b01 	adds.w	fp, r3, r1
 800ccca:	eb44 0c02 	adc.w	ip, r4, r2
 800ccce:	4658      	mov	r0, fp
 800ccd0:	4661      	mov	r1, ip
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f04f 0400 	mov.w	r4, #0
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4623      	mov	r3, r4
 800ccde:	f7f3 ffc3 	bl	8000c68 <__aeabi_uldivmod>
 800cce2:	4603      	mov	r3, r0
 800cce4:	460c      	mov	r4, r1
 800cce6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cce8:	e058      	b.n	800cd9c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	f04f 0400 	mov.w	r4, #0
 800ccf4:	49ae      	ldr	r1, [pc, #696]	; (800cfb0 <UART_SetConfig+0x6c4>)
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	eb13 0b01 	adds.w	fp, r3, r1
 800ccfe:	eb44 0c02 	adc.w	ip, r4, r2
 800cd02:	4658      	mov	r0, fp
 800cd04:	4661      	mov	r1, ip
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f04f 0400 	mov.w	r4, #0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4623      	mov	r3, r4
 800cd12:	f7f3 ffa9 	bl	8000c68 <__aeabi_uldivmod>
 800cd16:	4603      	mov	r3, r0
 800cd18:	460c      	mov	r4, r1
 800cd1a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cd1c:	e03e      	b.n	800cd9c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800cd1e:	f7fc fcd1 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800cd22:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	4619      	mov	r1, r3
 800cd28:	f04f 0200 	mov.w	r2, #0
 800cd2c:	f04f 0300 	mov.w	r3, #0
 800cd30:	f04f 0400 	mov.w	r4, #0
 800cd34:	0214      	lsls	r4, r2, #8
 800cd36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd3a:	020b      	lsls	r3, r1, #8
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6852      	ldr	r2, [r2, #4]
 800cd40:	0852      	lsrs	r2, r2, #1
 800cd42:	4611      	mov	r1, r2
 800cd44:	f04f 0200 	mov.w	r2, #0
 800cd48:	eb13 0b01 	adds.w	fp, r3, r1
 800cd4c:	eb44 0c02 	adc.w	ip, r4, r2
 800cd50:	4658      	mov	r0, fp
 800cd52:	4661      	mov	r1, ip
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	f04f 0400 	mov.w	r4, #0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	4623      	mov	r3, r4
 800cd60:	f7f3 ff82 	bl	8000c68 <__aeabi_uldivmod>
 800cd64:	4603      	mov	r3, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cd6a:	e017      	b.n	800cd9c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	085b      	lsrs	r3, r3, #1
 800cd72:	f04f 0400 	mov.w	r4, #0
 800cd76:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800cd7a:	f144 0100 	adc.w	r1, r4, #0
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f04f 0400 	mov.w	r4, #0
 800cd86:	461a      	mov	r2, r3
 800cd88:	4623      	mov	r3, r4
 800cd8a:	f7f3 ff6d 	bl	8000c68 <__aeabi_uldivmod>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800cd94:	e002      	b.n	800cd9c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	76fb      	strb	r3, [r7, #27]
            break;
 800cd9a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cda2:	d308      	bcc.n	800cdb6 <UART_SetConfig+0x4ca>
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdaa:	d204      	bcs.n	800cdb6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	69fa      	ldr	r2, [r7, #28]
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e100      	b.n	800cfb8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	76fb      	strb	r3, [r7, #27]
 800cdba:	e0fd      	b.n	800cfb8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdc4:	f040 8084 	bne.w	800ced0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800cdc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdcc:	2b08      	cmp	r3, #8
 800cdce:	d85f      	bhi.n	800ce90 <UART_SetConfig+0x5a4>
 800cdd0:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <UART_SetConfig+0x4ec>)
 800cdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd6:	bf00      	nop
 800cdd8:	0800cdfd 	.word	0x0800cdfd
 800cddc:	0800ce1d 	.word	0x0800ce1d
 800cde0:	0800ce3d 	.word	0x0800ce3d
 800cde4:	0800ce91 	.word	0x0800ce91
 800cde8:	0800ce59 	.word	0x0800ce59
 800cdec:	0800ce91 	.word	0x0800ce91
 800cdf0:	0800ce91 	.word	0x0800ce91
 800cdf4:	0800ce91 	.word	0x0800ce91
 800cdf8:	0800ce79 	.word	0x0800ce79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdfc:	f7fc fcf8 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800ce00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	005a      	lsls	r2, r3, #1
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	085b      	lsrs	r3, r3, #1
 800ce0c:	441a      	add	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce1a:	e03c      	b.n	800ce96 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce1c:	f7fc fcfe 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800ce20:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	005a      	lsls	r2, r3, #1
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	085b      	lsrs	r3, r3, #1
 800ce2c:	441a      	add	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce3a:	e02c      	b.n	800ce96 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	085b      	lsrs	r3, r3, #1
 800ce42:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800ce46:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	6852      	ldr	r2, [r2, #4]
 800ce4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce56:	e01e      	b.n	800ce96 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce58:	f7fc fc34 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800ce5c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	005a      	lsls	r2, r3, #1
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	085b      	lsrs	r3, r3, #1
 800ce68:	441a      	add	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce76:	e00e      	b.n	800ce96 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	085b      	lsrs	r3, r3, #1
 800ce7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800ce8e:	e002      	b.n	800ce96 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	76fb      	strb	r3, [r7, #27]
        break;
 800ce94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	2b0f      	cmp	r3, #15
 800ce9a:	d916      	bls.n	800ceca <UART_SetConfig+0x5de>
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cea2:	d212      	bcs.n	800ceca <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	f023 030f 	bic.w	r3, r3, #15
 800ceac:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	085b      	lsrs	r3, r3, #1
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	f003 0307 	and.w	r3, r3, #7
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	89fb      	ldrh	r3, [r7, #14]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	89fa      	ldrh	r2, [r7, #14]
 800cec6:	60da      	str	r2, [r3, #12]
 800cec8:	e076      	b.n	800cfb8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	76fb      	strb	r3, [r7, #27]
 800cece:	e073      	b.n	800cfb8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800ced0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ced4:	2b08      	cmp	r3, #8
 800ced6:	d85c      	bhi.n	800cf92 <UART_SetConfig+0x6a6>
 800ced8:	a201      	add	r2, pc, #4	; (adr r2, 800cee0 <UART_SetConfig+0x5f4>)
 800ceda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cede:	bf00      	nop
 800cee0:	0800cf05 	.word	0x0800cf05
 800cee4:	0800cf23 	.word	0x0800cf23
 800cee8:	0800cf41 	.word	0x0800cf41
 800ceec:	0800cf93 	.word	0x0800cf93
 800cef0:	0800cf5d 	.word	0x0800cf5d
 800cef4:	0800cf93 	.word	0x0800cf93
 800cef8:	0800cf93 	.word	0x0800cf93
 800cefc:	0800cf93 	.word	0x0800cf93
 800cf00:	0800cf7b 	.word	0x0800cf7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf04:	f7fc fc74 	bl	80097f0 <HAL_RCC_GetPCLK1Freq>
 800cf08:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	085a      	lsrs	r2, r3, #1
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	441a      	add	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf20:	e03a      	b.n	800cf98 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf22:	f7fc fc7b 	bl	800981c <HAL_RCC_GetPCLK2Freq>
 800cf26:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	085a      	lsrs	r2, r3, #1
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	441a      	add	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf3e:	e02b      	b.n	800cf98 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	085b      	lsrs	r3, r3, #1
 800cf46:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800cf4a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6852      	ldr	r2, [r2, #4]
 800cf52:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf5a:	e01d      	b.n	800cf98 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf5c:	f7fc fbb2 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 800cf60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	085a      	lsrs	r2, r3, #1
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	441a      	add	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf78:	e00e      	b.n	800cf98 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	085b      	lsrs	r3, r3, #1
 800cf80:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800cf90:	e002      	b.n	800cf98 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	76fb      	strb	r3, [r7, #27]
        break;
 800cf96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2b0f      	cmp	r3, #15
 800cf9c:	d90a      	bls.n	800cfb4 <UART_SetConfig+0x6c8>
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfa4:	d206      	bcs.n	800cfb4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69fa      	ldr	r2, [r7, #28]
 800cfac:	60da      	str	r2, [r3, #12]
 800cfae:	e003      	b.n	800cfb8 <UART_SetConfig+0x6cc>
 800cfb0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cfc4:	7efb      	ldrb	r3, [r7, #27]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3728      	adds	r7, #40	; 0x28
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800cfd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00a      	beq.n	800cffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	430a      	orrs	r2, r1
 800cff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	f003 0302 	and.w	r3, r3, #2
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00a      	beq.n	800d01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	430a      	orrs	r2, r1
 800d01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d020:	f003 0304 	and.w	r3, r3, #4
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00a      	beq.n	800d03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	430a      	orrs	r2, r1
 800d03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	f003 0308 	and.w	r3, r3, #8
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	430a      	orrs	r2, r1
 800d05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	430a      	orrs	r2, r1
 800d080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d01a      	beq.n	800d0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0ce:	d10a      	bne.n	800d0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00a      	beq.n	800d108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	605a      	str	r2, [r3, #4]
  }
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af02      	add	r7, sp, #8
 800d11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d122:	f7f8 fadf 	bl	80056e4 <HAL_GetTick>
 800d126:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0308 	and.w	r3, r3, #8
 800d132:	2b08      	cmp	r3, #8
 800d134:	d10e      	bne.n	800d154 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d136:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d13a:	9300      	str	r3, [sp, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f82a 	bl	800d19e <UART_WaitOnFlagUntilTimeout>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e020      	b.n	800d196 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b04      	cmp	r3, #4
 800d160:	d10e      	bne.n	800d180 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d162:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f814 	bl	800d19e <UART_WaitOnFlagUntilTimeout>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d17c:	2303      	movs	r3, #3
 800d17e:	e00a      	b.n	800d196 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2220      	movs	r2, #32
 800d184:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2220      	movs	r2, #32
 800d18a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	60f8      	str	r0, [r7, #12]
 800d1a6:	60b9      	str	r1, [r7, #8]
 800d1a8:	603b      	str	r3, [r7, #0]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1ae:	e05d      	b.n	800d26c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1b6:	d059      	beq.n	800d26c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1b8:	f7f8 fa94 	bl	80056e4 <HAL_GetTick>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d302      	bcc.n	800d1ce <UART_WaitOnFlagUntilTimeout+0x30>
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d11b      	bne.n	800d206 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d1dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	689a      	ldr	r2, [r3, #8]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f022 0201 	bic.w	r2, r2, #1
 800d1ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d202:	2303      	movs	r3, #3
 800d204:	e042      	b.n	800d28c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	2b00      	cmp	r3, #0
 800d212:	d02b      	beq.n	800d26c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d21e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d222:	d123      	bne.n	800d26c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d22c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d23c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	689a      	ldr	r2, [r3, #8]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0201 	bic.w	r2, r2, #1
 800d24c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2220      	movs	r2, #32
 800d252:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2220      	movs	r2, #32
 800d258:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2220      	movs	r2, #32
 800d25e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d268:	2303      	movs	r3, #3
 800d26a:	e00f      	b.n	800d28c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69da      	ldr	r2, [r3, #28]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	4013      	ands	r3, r2
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	429a      	cmp	r2, r3
 800d27a:	bf0c      	ite	eq
 800d27c:	2301      	moveq	r3, #1
 800d27e:	2300      	movne	r3, #0
 800d280:	b2db      	uxtb	r3, r3
 800d282:	461a      	mov	r2, r3
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	429a      	cmp	r2, r3
 800d288:	d092      	beq.n	800d1b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d2aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	689a      	ldr	r2, [r3, #8]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f022 0201 	bic.w	r2, r2, #1
 800d2ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2220      	movs	r2, #32
 800d2c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f7f8 f962 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2f8:	bf00      	nop
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d30c:	2b21      	cmp	r3, #33	; 0x21
 800d30e:	d12b      	bne.n	800d368 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d316:	b29b      	uxth	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d110      	bne.n	800d33e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d32a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d33a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d33c:	e014      	b.n	800d368 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d342:	781a      	ldrb	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	b292      	uxth	r2, r2
 800d34a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	3b01      	subs	r3, #1
 800d360:	b29a      	uxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d380:	2b21      	cmp	r3, #33	; 0x21
 800d382:	d12f      	bne.n	800d3e4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d110      	bne.n	800d3b2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d39e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3ae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d3b0:	e018      	b.n	800d3e4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	881a      	ldrh	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3cc:	1c9a      	adds	r2, r3, #2
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d3e4:	bf00      	nop
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d406:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2220      	movs	r2, #32
 800d40c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff fa5f 	bl	800c8d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d41a:	bf00      	nop
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d430:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d436:	2b22      	cmp	r3, #34	; 0x22
 800d438:	d13a      	bne.n	800d4b0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d440:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d442:	89bb      	ldrh	r3, [r7, #12]
 800d444:	b2d9      	uxtb	r1, r3
 800d446:	89fb      	ldrh	r3, [r7, #14]
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d44e:	400a      	ands	r2, r1
 800d450:	b2d2      	uxtb	r2, r2
 800d452:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d458:	1c5a      	adds	r2, r3, #1
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d464:	b29b      	uxth	r3, r3
 800d466:	3b01      	subs	r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d476:	b29b      	uxth	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d123      	bne.n	800d4c4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d48a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f022 0201 	bic.w	r2, r2, #1
 800d49a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2220      	movs	r2, #32
 800d4a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7f8 f825 	bl	80054f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4ae:	e009      	b.n	800d4c4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	8b1b      	ldrh	r3, [r3, #24]
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0208 	orr.w	r2, r2, #8
 800d4c0:	b292      	uxth	r2, r2
 800d4c2:	831a      	strh	r2, [r3, #24]
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4e0:	2b22      	cmp	r3, #34	; 0x22
 800d4e2:	d13a      	bne.n	800d55a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4ea:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d4f2:	89ba      	ldrh	r2, [r7, #12]
 800d4f4:	89fb      	ldrh	r3, [r7, #14]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d502:	1c9a      	adds	r2, r3, #2
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d50e:	b29b      	uxth	r3, r3
 800d510:	3b01      	subs	r3, #1
 800d512:	b29a      	uxth	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d520:	b29b      	uxth	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d123      	bne.n	800d56e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d534:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 0201 	bic.w	r2, r2, #1
 800d544:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2220      	movs	r2, #32
 800d54a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7f7 ffd0 	bl	80054f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d558:	e009      	b.n	800d56e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	8b1b      	ldrh	r3, [r3, #24]
 800d560:	b29a      	uxth	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f042 0208 	orr.w	r2, r2, #8
 800d56a:	b292      	uxth	r2, r2
 800d56c:	831a      	strh	r2, [r3, #24]
}
 800d56e:	bf00      	nop
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d57e:	bf00      	nop
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
	...

0800d58c <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b087      	sub	sp, #28
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	6812      	ldr	r2, [r2, #0]
 800d5a4:	f023 0101 	bic.w	r1, r3, #1
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	d102      	bne.n	800d5bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d5b6:	2340      	movs	r3, #64	; 0x40
 800d5b8:	617b      	str	r3, [r7, #20]
 800d5ba:	e001      	b.n	800d5c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800d5cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800d5d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800d5d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800d5de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800d5e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800d5ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800d5f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800d5f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800d5fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800d602:	4313      	orrs	r3, r2
 800d604:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60a:	693a      	ldr	r2, [r7, #16]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	4313      	orrs	r3, r2
 800d618:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	4313      	orrs	r3, r2
 800d622:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800d624:	4b20      	ldr	r3, [pc, #128]	; (800d6a8 <FMC_NORSRAM_Init+0x11c>)
 800d626:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d62e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d636:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d63e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	43db      	mvns	r3, r3
 800d64e:	ea02 0103 	and.w	r1, r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	4319      	orrs	r1, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d668:	d10c      	bne.n	800d684 <FMC_NORSRAM_Init+0xf8>
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d008      	beq.n	800d684 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d006      	beq.n	800d69a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d694:	431a      	orrs	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	371c      	adds	r7, #28
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	0008fb7f 	.word	0x0008fb7f

0800d6ac <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	431a      	orrs	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	021b      	lsls	r3, r3, #8
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	041b      	lsls	r3, r3, #16
 800d6e0:	431a      	orrs	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	051b      	lsls	r3, r3, #20
 800d6ea:	431a      	orrs	r2, r3
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	3b02      	subs	r3, #2
 800d6f2:	061b      	lsls	r3, r3, #24
 800d6f4:	431a      	orrs	r2, r3
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	3201      	adds	r2, #1
 800d700:	4319      	orrs	r1, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d714:	d113      	bne.n	800d73e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d71e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	3b01      	subs	r3, #1
 800d726:	051b      	lsls	r3, r3, #20
 800d728:	697a      	ldr	r2, [r7, #20]
 800d72a:	4313      	orrs	r3, r2
 800d72c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	431a      	orrs	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	371c      	adds	r7, #28
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <FMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FMC_EXTENDED_MODE_DISABLE
  *            @arg FMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d760:	d11d      	bne.n	800d79e <FMC_NORSRAM_Extended_Timing_Init+0x52>
#endif /* FMC_BWTRx_BUSTURN */
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d76a:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	6811      	ldr	r1, [r2, #0]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	6852      	ldr	r2, [r2, #4]
 800d776:	0112      	lsls	r2, r2, #4
 800d778:	4311      	orrs	r1, r2
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	6892      	ldr	r2, [r2, #8]
 800d77e:	0212      	lsls	r2, r2, #8
 800d780:	4311      	orrs	r1, r2
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	69d2      	ldr	r2, [r2, #28]
 800d786:	4311      	orrs	r1, r2
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	6912      	ldr	r2, [r2, #16]
 800d78c:	0412      	lsls	r2, r2, #16
 800d78e:	430a      	orrs	r2, r1
 800d790:	ea43 0102 	orr.w	r1, r3, r2
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d79c:	e005      	b.n	800d7aa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d7a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	cff00000 	.word	0xcff00000

0800d7bc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d7bc:	b084      	sub	sp, #16
 800d7be:	b480      	push	{r7}
 800d7c0:	b085      	sub	sp, #20
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	f107 001c 	add.w	r0, r7, #28
 800d7ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800d7da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800d7de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d7e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d7e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d7ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d7fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	431a      	orrs	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3714      	adds	r7, #20
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	b004      	add	sp, #16
 800d814:	4770      	bx	lr

0800d816 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d824:	4618      	mov	r0, r3
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2203      	movs	r2, #3
 800d83c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d83e:	2002      	movs	r0, #2
 800d840:	f7f7 ff5c 	bl	80056fc <HAL_Delay>

  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d84e:	b480      	push	{r7}
 800d850:	b083      	sub	sp, #12
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 0303 	and.w	r3, r3, #3
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b085      	sub	sp, #20
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d888:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d88e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d894:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	4313      	orrs	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d8a4:	f023 030f 	bic.w	r3, r3, #15
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b083      	sub	sp, #12
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	b2db      	uxtb	r3, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3314      	adds	r3, #20
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b085      	sub	sp, #20
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d908:	2300      	movs	r3, #0
 800d90a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685a      	ldr	r2, [r3, #4]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d924:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d92a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d930:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	4313      	orrs	r3, r2
 800d936:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	431a      	orrs	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d948:	2300      	movs	r3, #0

}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b088      	sub	sp, #32
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d964:	2310      	movs	r3, #16
 800d966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d968:	2340      	movs	r3, #64	; 0x40
 800d96a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d96c:	2300      	movs	r3, #0
 800d96e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d976:	f107 0308 	add.w	r3, r7, #8
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff ff74 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d982:	f241 3288 	movw	r2, #5000	; 0x1388
 800d986:	2110      	movs	r1, #16
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f975 	bl	800dc78 <SDMMC_GetCmdResp1>
 800d98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d990:	69fb      	ldr	r3, [r7, #28]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3720      	adds	r7, #32
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b08a      	sub	sp, #40	; 0x28
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	60f8      	str	r0, [r7, #12]
 800d9a2:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d9aa:	2307      	movs	r3, #7
 800d9ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9ae:	2340      	movs	r3, #64	; 0x40
 800d9b0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ba:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9bc:	f107 0310 	add.w	r3, r7, #16
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f7ff ff51 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9cc:	2107      	movs	r1, #7
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 f952 	bl	800dc78 <SDMMC_GetCmdResp1>
 800d9d4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3728      	adds	r7, #40	; 0x28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b088      	sub	sp, #32
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9fe:	f107 0308 	add.w	r3, r7, #8
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff ff30 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f90c 	bl	800dc28 <SDMMC_GetCmdError>
 800da10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da12:	69fb      	ldr	r3, [r7, #28]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3720      	adds	r7, #32
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b088      	sub	sp, #32
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800da24:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800da28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800da2a:	2308      	movs	r3, #8
 800da2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da32:	2300      	movs	r3, #0
 800da34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da3c:	f107 0308 	add.w	r3, r7, #8
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff11 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 faf5 	bl	800e038 <SDMMC_GetCmdResp7>
 800da4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da50:	69fb      	ldr	r3, [r7, #28]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3720      	adds	r7, #32
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b088      	sub	sp, #32
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800da68:	2337      	movs	r3, #55	; 0x37
 800da6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da6c:	2340      	movs	r3, #64	; 0x40
 800da6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da70:	2300      	movs	r3, #0
 800da72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da7a:	f107 0308 	add.w	r3, r7, #8
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fef2 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800da86:	f241 3288 	movw	r2, #5000	; 0x1388
 800da8a:	2137      	movs	r1, #55	; 0x37
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f8f3 	bl	800dc78 <SDMMC_GetCmdResp1>
 800da92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da94:	69fb      	ldr	r3, [r7, #28]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3720      	adds	r7, #32
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b088      	sub	sp, #32
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800daae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dab2:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dab4:	2329      	movs	r3, #41	; 0x29
 800dab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab8:	2340      	movs	r3, #64	; 0x40
 800daba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dabc:	2300      	movs	r3, #0
 800dabe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dac6:	f107 0308 	add.w	r3, r7, #8
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff fecc 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fa02 	bl	800dedc <SDMMC_GetCmdResp3>
 800dad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dada:	69fb      	ldr	r3, [r7, #28]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3720      	adds	r7, #32
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800daf2:	2306      	movs	r3, #6
 800daf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daf6:	2340      	movs	r3, #64	; 0x40
 800daf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dafa:	2300      	movs	r3, #0
 800dafc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dafe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db04:	f107 0308 	add.w	r3, r7, #8
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fead 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800db10:	f241 3288 	movw	r2, #5000	; 0x1388
 800db14:	2106      	movs	r1, #6
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f8ae 	bl	800dc78 <SDMMC_GetCmdResp1>
 800db1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db1e:	69fb      	ldr	r3, [r7, #28]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3720      	adds	r7, #32
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b088      	sub	sp, #32
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800db34:	2333      	movs	r3, #51	; 0x33
 800db36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db38:	2340      	movs	r3, #64	; 0x40
 800db3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db3c:	2300      	movs	r3, #0
 800db3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db46:	f107 0308 	add.w	r3, r7, #8
 800db4a:	4619      	mov	r1, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff fe8c 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800db52:	f241 3288 	movw	r2, #5000	; 0x1388
 800db56:	2133      	movs	r1, #51	; 0x33
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f88d 	bl	800dc78 <SDMMC_GetCmdResp1>
 800db5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db60:	69fb      	ldr	r3, [r7, #28]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3720      	adds	r7, #32
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b088      	sub	sp, #32
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800db72:	2300      	movs	r3, #0
 800db74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800db76:	2302      	movs	r3, #2
 800db78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800db7a:	23c0      	movs	r3, #192	; 0xc0
 800db7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db7e:	2300      	movs	r3, #0
 800db80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db88:	f107 0308 	add.w	r3, r7, #8
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff fe6b 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f95b 	bl	800de50 <SDMMC_GetCmdResp2>
 800db9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db9c:	69fb      	ldr	r3, [r7, #28]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3720      	adds	r7, #32
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b088      	sub	sp, #32
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dbb4:	2309      	movs	r3, #9
 800dbb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dbb8:	23c0      	movs	r3, #192	; 0xc0
 800dbba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbc6:	f107 0308 	add.w	r3, r7, #8
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff fe4c 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f93c 	bl	800de50 <SDMMC_GetCmdResp2>
 800dbd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbda:	69fb      	ldr	r3, [r7, #28]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3720      	adds	r7, #32
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc04:	f107 0308 	add.w	r3, r7, #8
 800dc08:	4619      	mov	r1, r3
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7ff fe2d 	bl	800d86a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	2103      	movs	r1, #3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f99b 	bl	800df50 <SDMMC_GetCmdResp6>
 800dc1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3720      	adds	r7, #32
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc28:	b490      	push	{r4, r7}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <SDMMC_GetCmdError+0x48>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a0f      	ldr	r2, [pc, #60]	; (800dc74 <SDMMC_GetCmdError+0x4c>)
 800dc36:	fba2 2303 	umull	r2, r3, r2, r3
 800dc3a:	0a5b      	lsrs	r3, r3, #9
 800dc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc40:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dc44:	4623      	mov	r3, r4
 800dc46:	1e5c      	subs	r4, r3, #1
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc50:	e009      	b.n	800dc66 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f2      	beq.n	800dc44 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	22c5      	movs	r2, #197	; 0xc5
 800dc62:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bc90      	pop	{r4, r7}
 800dc6e:	4770      	bx	lr
 800dc70:	20000058 	.word	0x20000058
 800dc74:	10624dd3 	.word	0x10624dd3

0800dc78 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dc78:	b590      	push	{r4, r7, lr}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	460b      	mov	r3, r1
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc86:	4b6f      	ldr	r3, [pc, #444]	; (800de44 <SDMMC_GetCmdResp1+0x1cc>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a6f      	ldr	r2, [pc, #444]	; (800de48 <SDMMC_GetCmdResp1+0x1d0>)
 800dc8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc90:	0a5b      	lsrs	r3, r3, #9
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800dc98:	4623      	mov	r3, r4
 800dc9a:	1e5c      	subs	r4, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dca4:	e0c9      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcaa:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0f0      	beq.n	800dc98 <SDMMC_GetCmdResp1+0x20>
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1eb      	bne.n	800dc98 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2204      	movs	r2, #4
 800dcd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd2:	2304      	movs	r3, #4
 800dcd4:	e0b1      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d004      	beq.n	800dcec <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2201      	movs	r2, #1
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e0a6      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	22c5      	movs	r2, #197	; 0xc5
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f7ff fde3 	bl	800d8be <SDMMC_GetCommandResponse>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d001      	beq.n	800dd06 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e099      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd06:	2100      	movs	r1, #0
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f7ff fde5 	bl	800d8d8 <SDMMC_GetResponse>
 800dd0e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	4b4e      	ldr	r3, [pc, #312]	; (800de4c <SDMMC_GetCmdResp1+0x1d4>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d101      	bne.n	800dd1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e08d      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	da02      	bge.n	800dd2a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dd24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd28:	e087      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dd34:	2340      	movs	r3, #64	; 0x40
 800dd36:	e080      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dd42:	2380      	movs	r3, #128	; 0x80
 800dd44:	e079      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dd50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd54:	e071      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dd60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd64:	e069      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd74:	e061      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dd80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd84:	e059      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd94:	e051      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dda0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dda4:	e049      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ddb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddb4:	e041      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ddc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddc4:	e039      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ddd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ddd4:	e031      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dde0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dde4:	e029      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ddf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ddf4:	e021      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de04:	e019      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de14:	e011      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800de20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de24:	e009      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f003 0308 	and.w	r3, r3, #8
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800de30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800de34:	e001      	b.n	800de3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd90      	pop	{r4, r7, pc}
 800de42:	bf00      	nop
 800de44:	20000058 	.word	0x20000058
 800de48:	10624dd3 	.word	0x10624dd3
 800de4c:	fdffe008 	.word	0xfdffe008

0800de50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800de50:	b490      	push	{r4, r7}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de58:	4b1e      	ldr	r3, [pc, #120]	; (800ded4 <SDMMC_GetCmdResp2+0x84>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a1e      	ldr	r2, [pc, #120]	; (800ded8 <SDMMC_GetCmdResp2+0x88>)
 800de5e:	fba2 2303 	umull	r2, r3, r2, r3
 800de62:	0a5b      	lsrs	r3, r3, #9
 800de64:	f241 3288 	movw	r2, #5000	; 0x1388
 800de68:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800de6c:	4623      	mov	r3, r4
 800de6e:	1e5c      	subs	r4, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de78:	e026      	b.n	800dec8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de86:	2b00      	cmp	r3, #0
 800de88:	d0f0      	beq.n	800de6c <SDMMC_GetCmdResp2+0x1c>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1eb      	bne.n	800de6c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de98:	f003 0304 	and.w	r3, r3, #4
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d004      	beq.n	800deaa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2204      	movs	r2, #4
 800dea4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dea6:	2304      	movs	r3, #4
 800dea8:	e00e      	b.n	800dec8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d004      	beq.n	800dec0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2201      	movs	r2, #1
 800deba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800debc:	2301      	movs	r3, #1
 800debe:	e003      	b.n	800dec8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	22c5      	movs	r2, #197	; 0xc5
 800dec4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bc90      	pop	{r4, r7}
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	20000058 	.word	0x20000058
 800ded8:	10624dd3 	.word	0x10624dd3

0800dedc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dedc:	b490      	push	{r4, r7}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dee4:	4b18      	ldr	r3, [pc, #96]	; (800df48 <SDMMC_GetCmdResp3+0x6c>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a18      	ldr	r2, [pc, #96]	; (800df4c <SDMMC_GetCmdResp3+0x70>)
 800deea:	fba2 2303 	umull	r2, r3, r2, r3
 800deee:	0a5b      	lsrs	r3, r3, #9
 800def0:	f241 3288 	movw	r2, #5000	; 0x1388
 800def4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800def8:	4623      	mov	r3, r4
 800defa:	1e5c      	subs	r4, r3, #1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df04:	e01b      	b.n	800df3e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0f0      	beq.n	800def8 <SDMMC_GetCmdResp3+0x1c>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d1eb      	bne.n	800def8 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df24:	f003 0304 	and.w	r3, r3, #4
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2204      	movs	r2, #4
 800df30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df32:	2304      	movs	r3, #4
 800df34:	e003      	b.n	800df3e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	22c5      	movs	r2, #197	; 0xc5
 800df3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bc90      	pop	{r4, r7}
 800df46:	4770      	bx	lr
 800df48:	20000058 	.word	0x20000058
 800df4c:	10624dd3 	.word	0x10624dd3

0800df50 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b087      	sub	sp, #28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	460b      	mov	r3, r1
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df5e:	4b34      	ldr	r3, [pc, #208]	; (800e030 <SDMMC_GetCmdResp6+0xe0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a34      	ldr	r2, [pc, #208]	; (800e034 <SDMMC_GetCmdResp6+0xe4>)
 800df64:	fba2 2303 	umull	r2, r3, r2, r3
 800df68:	0a5b      	lsrs	r3, r3, #9
 800df6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df6e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800df72:	4623      	mov	r3, r4
 800df74:	1e5c      	subs	r4, r3, #1
 800df76:	2b00      	cmp	r3, #0
 800df78:	d102      	bne.n	800df80 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df7e:	e052      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df84:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0f0      	beq.n	800df72 <SDMMC_GetCmdResp6+0x22>
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1eb      	bne.n	800df72 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9e:	f003 0304 	and.w	r3, r3, #4
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2204      	movs	r2, #4
 800dfaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfac:	2304      	movs	r3, #4
 800dfae:	e03a      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e02f      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f7ff fc79 	bl	800d8be <SDMMC_GetCommandResponse>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d001      	beq.n	800dfda <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e025      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	22c5      	movs	r2, #197	; 0xc5
 800dfde:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fc78 	bl	800d8d8 <SDMMC_GetResponse>
 800dfe8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	0c1b      	lsrs	r3, r3, #16
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dffe:	2300      	movs	r3, #0
 800e000:	e011      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e00c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e010:	e009      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e01c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e020:	e001      	b.n	800e026 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e026:	4618      	mov	r0, r3
 800e028:	371c      	adds	r7, #28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd90      	pop	{r4, r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000058 	.word	0x20000058
 800e034:	10624dd3 	.word	0x10624dd3

0800e038 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e038:	b490      	push	{r4, r7}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e040:	4b21      	ldr	r3, [pc, #132]	; (800e0c8 <SDMMC_GetCmdResp7+0x90>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a21      	ldr	r2, [pc, #132]	; (800e0cc <SDMMC_GetCmdResp7+0x94>)
 800e046:	fba2 2303 	umull	r2, r3, r2, r3
 800e04a:	0a5b      	lsrs	r3, r3, #9
 800e04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e050:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800e054:	4623      	mov	r3, r4
 800e056:	1e5c      	subs	r4, r3, #1
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e05c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e060:	e02c      	b.n	800e0bc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e066:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d0f0      	beq.n	800e054 <SDMMC_GetCmdResp7+0x1c>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1eb      	bne.n	800e054 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e080:	f003 0304 	and.w	r3, r3, #4
 800e084:	2b00      	cmp	r3, #0
 800e086:	d004      	beq.n	800e092 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2204      	movs	r2, #4
 800e08c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e08e:	2304      	movs	r3, #4
 800e090:	e014      	b.n	800e0bc <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d004      	beq.n	800e0a8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e009      	b.n	800e0bc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2240      	movs	r2, #64	; 0x40
 800e0b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0ba:	2300      	movs	r3, #0

}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bc90      	pop	{r4, r7}
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	20000058 	.word	0x20000058
 800e0cc:	10624dd3 	.word	0x10624dd3

0800e0d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	f107 001c 	add.w	r0, r7, #28
 800e0de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d122      	bne.n	800e12e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e112:	2b01      	cmp	r3, #1
 800e114:	d105      	bne.n	800e122 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f001 f9c8 	bl	800f4b8 <USB_CoreReset>
 800e128:	4603      	mov	r3, r0
 800e12a:	73fb      	strb	r3, [r7, #15]
 800e12c:	e01a      	b.n	800e164 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f001 f9bc 	bl	800f4b8 <USB_CoreReset>
 800e140:	4603      	mov	r3, r0
 800e142:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	639a      	str	r2, [r3, #56]	; 0x38
 800e156:	e005      	b.n	800e164 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800e164:	7bfb      	ldrb	r3, [r7, #15]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e170:	b004      	add	sp, #16
 800e172:	4770      	bx	lr

0800e174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e174:	b480      	push	{r7}
 800e176:	b087      	sub	sp, #28
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4613      	mov	r3, r2
 800e180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e182:	79fb      	ldrb	r3, [r7, #7]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d165      	bne.n	800e254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	4a3e      	ldr	r2, [pc, #248]	; (800e284 <USB_SetTurnaroundTime+0x110>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d906      	bls.n	800e19e <USB_SetTurnaroundTime+0x2a>
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	4a3d      	ldr	r2, [pc, #244]	; (800e288 <USB_SetTurnaroundTime+0x114>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d802      	bhi.n	800e19e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e198:	230f      	movs	r3, #15
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	e05c      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	4a39      	ldr	r2, [pc, #228]	; (800e288 <USB_SetTurnaroundTime+0x114>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d906      	bls.n	800e1b4 <USB_SetTurnaroundTime+0x40>
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	4a38      	ldr	r2, [pc, #224]	; (800e28c <USB_SetTurnaroundTime+0x118>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d802      	bhi.n	800e1b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e1ae:	230e      	movs	r3, #14
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	e051      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	4a35      	ldr	r2, [pc, #212]	; (800e28c <USB_SetTurnaroundTime+0x118>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d906      	bls.n	800e1ca <USB_SetTurnaroundTime+0x56>
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	4a34      	ldr	r2, [pc, #208]	; (800e290 <USB_SetTurnaroundTime+0x11c>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d802      	bhi.n	800e1ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e1c4:	230d      	movs	r3, #13
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	e046      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	4a30      	ldr	r2, [pc, #192]	; (800e290 <USB_SetTurnaroundTime+0x11c>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d906      	bls.n	800e1e0 <USB_SetTurnaroundTime+0x6c>
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	4a2f      	ldr	r2, [pc, #188]	; (800e294 <USB_SetTurnaroundTime+0x120>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d802      	bhi.n	800e1e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e1da:	230c      	movs	r3, #12
 800e1dc:	617b      	str	r3, [r7, #20]
 800e1de:	e03b      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	4a2c      	ldr	r2, [pc, #176]	; (800e294 <USB_SetTurnaroundTime+0x120>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d906      	bls.n	800e1f6 <USB_SetTurnaroundTime+0x82>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	4a2b      	ldr	r2, [pc, #172]	; (800e298 <USB_SetTurnaroundTime+0x124>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d802      	bhi.n	800e1f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e1f0:	230b      	movs	r3, #11
 800e1f2:	617b      	str	r3, [r7, #20]
 800e1f4:	e030      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	4a27      	ldr	r2, [pc, #156]	; (800e298 <USB_SetTurnaroundTime+0x124>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d906      	bls.n	800e20c <USB_SetTurnaroundTime+0x98>
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	4a26      	ldr	r2, [pc, #152]	; (800e29c <USB_SetTurnaroundTime+0x128>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d802      	bhi.n	800e20c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e206:	230a      	movs	r3, #10
 800e208:	617b      	str	r3, [r7, #20]
 800e20a:	e025      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	4a23      	ldr	r2, [pc, #140]	; (800e29c <USB_SetTurnaroundTime+0x128>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d906      	bls.n	800e222 <USB_SetTurnaroundTime+0xae>
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	4a22      	ldr	r2, [pc, #136]	; (800e2a0 <USB_SetTurnaroundTime+0x12c>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d802      	bhi.n	800e222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e21c:	2309      	movs	r3, #9
 800e21e:	617b      	str	r3, [r7, #20]
 800e220:	e01a      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	4a1e      	ldr	r2, [pc, #120]	; (800e2a0 <USB_SetTurnaroundTime+0x12c>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d906      	bls.n	800e238 <USB_SetTurnaroundTime+0xc4>
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	4a1d      	ldr	r2, [pc, #116]	; (800e2a4 <USB_SetTurnaroundTime+0x130>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d802      	bhi.n	800e238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e232:	2308      	movs	r3, #8
 800e234:	617b      	str	r3, [r7, #20]
 800e236:	e00f      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	4a1a      	ldr	r2, [pc, #104]	; (800e2a4 <USB_SetTurnaroundTime+0x130>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d906      	bls.n	800e24e <USB_SetTurnaroundTime+0xda>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	4a19      	ldr	r2, [pc, #100]	; (800e2a8 <USB_SetTurnaroundTime+0x134>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d802      	bhi.n	800e24e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e248:	2307      	movs	r3, #7
 800e24a:	617b      	str	r3, [r7, #20]
 800e24c:	e004      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e24e:	2306      	movs	r3, #6
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e001      	b.n	800e258 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e254:	2309      	movs	r3, #9
 800e256:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	68da      	ldr	r2, [r3, #12]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	029b      	lsls	r3, r3, #10
 800e26c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e270:	431a      	orrs	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	371c      	adds	r7, #28
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr
 800e284:	00d8acbf 	.word	0x00d8acbf
 800e288:	00e4e1bf 	.word	0x00e4e1bf
 800e28c:	00f423ff 	.word	0x00f423ff
 800e290:	0106737f 	.word	0x0106737f
 800e294:	011a499f 	.word	0x011a499f
 800e298:	01312cff 	.word	0x01312cff
 800e29c:	014ca43f 	.word	0x014ca43f
 800e2a0:	016e35ff 	.word	0x016e35ff
 800e2a4:	01a6ab1f 	.word	0x01a6ab1f
 800e2a8:	01e847ff 	.word	0x01e847ff

0800e2ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f043 0201 	orr.w	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f023 0201 	bic.w	r2, r3, #1
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d106      	bne.n	800e31c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60da      	str	r2, [r3, #12]
 800e31a:	e00b      	b.n	800e334 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e31c:	78fb      	ldrb	r3, [r7, #3]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d106      	bne.n	800e330 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	e001      	b.n	800e334 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e330:	2301      	movs	r3, #1
 800e332:	e003      	b.n	800e33c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e334:	2032      	movs	r0, #50	; 0x32
 800e336:	f7f7 f9e1 	bl	80056fc <HAL_Delay>

  return HAL_OK;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e344:	b084      	sub	sp, #16
 800e346:	b580      	push	{r7, lr}
 800e348:	b086      	sub	sp, #24
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e35e:	2300      	movs	r3, #0
 800e360:	613b      	str	r3, [r7, #16]
 800e362:	e009      	b.n	800e378 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	3340      	adds	r3, #64	; 0x40
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	2200      	movs	r2, #0
 800e370:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	3301      	adds	r3, #1
 800e376:	613b      	str	r3, [r7, #16]
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	2b0e      	cmp	r3, #14
 800e37c:	d9f2      	bls.n	800e364 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e380:	2b00      	cmp	r3, #0
 800e382:	d11c      	bne.n	800e3be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e392:	f043 0302 	orr.w	r3, r3, #2
 800e396:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	e005      	b.n	800e3ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3dc:	4619      	mov	r1, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	680b      	ldr	r3, [r1, #0]
 800e3e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e3ea:	2103      	movs	r1, #3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f93d 	bl	800e66c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e3f2:	2110      	movs	r1, #16
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f8f1 	bl	800e5dc <USB_FlushTxFifo>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d001      	beq.n	800e404 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f90f 	bl	800e628 <USB_FlushRxFifo>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e41a:	461a      	mov	r2, r3
 800e41c:	2300      	movs	r3, #0
 800e41e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e426:	461a      	mov	r2, r3
 800e428:	2300      	movs	r3, #0
 800e42a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e432:	461a      	mov	r2, r3
 800e434:	2300      	movs	r3, #0
 800e436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e438:	2300      	movs	r3, #0
 800e43a:	613b      	str	r3, [r7, #16]
 800e43c:	e043      	b.n	800e4c6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	015a      	lsls	r2, r3, #5
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	4413      	add	r3, r2
 800e446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e454:	d118      	bne.n	800e488 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e468:	461a      	mov	r2, r3
 800e46a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	e013      	b.n	800e49a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	015a      	lsls	r2, r3, #5
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	4413      	add	r3, r2
 800e47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e47e:	461a      	mov	r2, r3
 800e480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	e008      	b.n	800e49a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	015a      	lsls	r2, r3, #5
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e494:	461a      	mov	r2, r3
 800e496:	2300      	movs	r3, #0
 800e498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e4be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	613b      	str	r3, [r7, #16]
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d3b7      	bcc.n	800e43e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	613b      	str	r3, [r7, #16]
 800e4d2:	e043      	b.n	800e55c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	015a      	lsls	r2, r3, #5
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4413      	add	r3, r2
 800e4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4ea:	d118      	bne.n	800e51e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10a      	bne.n	800e508 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	015a      	lsls	r2, r3, #5
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4fe:	461a      	mov	r2, r3
 800e500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e504:	6013      	str	r3, [r2, #0]
 800e506:	e013      	b.n	800e530 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e514:	461a      	mov	r2, r3
 800e516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e51a:	6013      	str	r3, [r2, #0]
 800e51c:	e008      	b.n	800e530 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	015a      	lsls	r2, r3, #5
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4413      	add	r3, r2
 800e526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e52a:	461a      	mov	r2, r3
 800e52c:	2300      	movs	r3, #0
 800e52e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	015a      	lsls	r2, r3, #5
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4413      	add	r3, r2
 800e538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e53c:	461a      	mov	r2, r3
 800e53e:	2300      	movs	r3, #0
 800e540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	015a      	lsls	r2, r3, #5
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	4413      	add	r3, r2
 800e54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e54e:	461a      	mov	r2, r3
 800e550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3301      	adds	r3, #1
 800e55a:	613b      	str	r3, [r7, #16]
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	693a      	ldr	r2, [r7, #16]
 800e560:	429a      	cmp	r2, r3
 800e562:	d3b7      	bcc.n	800e4d4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	f043 0210 	orr.w	r2, r3, #16
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	4b10      	ldr	r3, [pc, #64]	; (800e5d8 <USB_DevInit+0x294>)
 800e598:	4313      	orrs	r3, r2
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d005      	beq.n	800e5b0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	699b      	ldr	r3, [r3, #24]
 800e5a8:	f043 0208 	orr.w	r2, r3, #8
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d107      	bne.n	800e5c6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5be:	f043 0304 	orr.w	r3, r3, #4
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3718      	adds	r7, #24
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5d2:	b004      	add	sp, #16
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	803c3800 	.word	0x803c3800

0800e5dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	019b      	lsls	r3, r3, #6
 800e5ee:	f043 0220 	orr.w	r2, r3, #32
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4a09      	ldr	r2, [pc, #36]	; (800e624 <USB_FlushTxFifo+0x48>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d901      	bls.n	800e608 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e604:	2303      	movs	r3, #3
 800e606:	e006      	b.n	800e616 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	f003 0320 	and.w	r3, r3, #32
 800e610:	2b20      	cmp	r3, #32
 800e612:	d0f0      	beq.n	800e5f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	00030d40 	.word	0x00030d40

0800e628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2210      	movs	r2, #16
 800e638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3301      	adds	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4a09      	ldr	r2, [pc, #36]	; (800e668 <USB_FlushRxFifo+0x40>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d901      	bls.n	800e64c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e648:	2303      	movs	r3, #3
 800e64a:	e006      	b.n	800e65a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	f003 0310 	and.w	r3, r3, #16
 800e654:	2b10      	cmp	r3, #16
 800e656:	d0f0      	beq.n	800e63a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3714      	adds	r7, #20
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	00030d40 	.word	0x00030d40

0800e66c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	68f9      	ldr	r1, [r7, #12]
 800e688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e68c:	4313      	orrs	r3, r2
 800e68e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b087      	sub	sp, #28
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f003 0306 	and.w	r3, r3, #6
 800e6b6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d002      	beq.n	800e6c4 <USB_GetDevSpeed+0x26>
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2b06      	cmp	r3, #6
 800e6c2:	d102      	bne.n	800e6ca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	75fb      	strb	r3, [r7, #23]
 800e6c8:	e001      	b.n	800e6ce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800e6ca:	230f      	movs	r3, #15
 800e6cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	371c      	adds	r7, #28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	785b      	ldrb	r3, [r3, #1]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d13a      	bne.n	800e76e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6fe:	69da      	ldr	r2, [r3, #28]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	f003 030f 	and.w	r3, r3, #15
 800e708:	2101      	movs	r1, #1
 800e70a:	fa01 f303 	lsl.w	r3, r1, r3
 800e70e:	b29b      	uxth	r3, r3
 800e710:	68f9      	ldr	r1, [r7, #12]
 800e712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e716:	4313      	orrs	r3, r2
 800e718:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	015a      	lsls	r2, r3, #5
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	4413      	add	r3, r2
 800e722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d155      	bne.n	800e7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	78db      	ldrb	r3, [r3, #3]
 800e74a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e74c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	059b      	lsls	r3, r3, #22
 800e752:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e754:	4313      	orrs	r3, r2
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	0151      	lsls	r1, r2, #5
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	440a      	add	r2, r1
 800e75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e76a:	6013      	str	r3, [r2, #0]
 800e76c:	e036      	b.n	800e7dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e774:	69da      	ldr	r2, [r3, #28]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	f003 030f 	and.w	r3, r3, #15
 800e77e:	2101      	movs	r1, #1
 800e780:	fa01 f303 	lsl.w	r3, r1, r3
 800e784:	041b      	lsls	r3, r3, #16
 800e786:	68f9      	ldr	r1, [r7, #12]
 800e788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e78c:	4313      	orrs	r3, r2
 800e78e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	015a      	lsls	r2, r3, #5
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	4413      	add	r3, r2
 800e798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d11a      	bne.n	800e7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	015a      	lsls	r2, r3, #5
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	4413      	add	r3, r2
 800e7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	78db      	ldrb	r3, [r3, #3]
 800e7c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e7c2:	430b      	orrs	r3, r1
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	0151      	lsls	r1, r2, #5
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	440a      	add	r2, r1
 800e7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3714      	adds	r7, #20
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
	...

0800e7ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d161      	bne.n	800e8cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e81a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e81e:	d11f      	bne.n	800e860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	015a      	lsls	r2, r3, #5
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	4413      	add	r3, r2
 800e828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	0151      	lsls	r1, r2, #5
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	440a      	add	r2, r1
 800e836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e83a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e83e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	015a      	lsls	r2, r3, #5
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	4413      	add	r3, r2
 800e848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	0151      	lsls	r1, r2, #5
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	440a      	add	r2, r1
 800e856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e85a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e85e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	f003 030f 	and.w	r3, r3, #15
 800e870:	2101      	movs	r1, #1
 800e872:	fa01 f303 	lsl.w	r3, r1, r3
 800e876:	b29b      	uxth	r3, r3
 800e878:	43db      	mvns	r3, r3
 800e87a:	68f9      	ldr	r1, [r7, #12]
 800e87c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e880:	4013      	ands	r3, r2
 800e882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e88a:	69da      	ldr	r2, [r3, #28]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	f003 030f 	and.w	r3, r3, #15
 800e894:	2101      	movs	r1, #1
 800e896:	fa01 f303 	lsl.w	r3, r1, r3
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	43db      	mvns	r3, r3
 800e89e:	68f9      	ldr	r1, [r7, #12]
 800e8a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	015a      	lsls	r2, r3, #5
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	0159      	lsls	r1, r3, #5
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	440b      	add	r3, r1
 800e8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	4b35      	ldr	r3, [pc, #212]	; (800e99c <USB_DeactivateEndpoint+0x1b0>)
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	600b      	str	r3, [r1, #0]
 800e8ca:	e060      	b.n	800e98e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	015a      	lsls	r2, r3, #5
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8e2:	d11f      	bne.n	800e924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	015a      	lsls	r2, r3, #5
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	0151      	lsls	r1, r2, #5
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	440a      	add	r2, r1
 800e8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	015a      	lsls	r2, r3, #5
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4413      	add	r3, r2
 800e90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	0151      	lsls	r1, r2, #5
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	440a      	add	r2, r1
 800e91a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e91e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e92a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	2101      	movs	r1, #1
 800e936:	fa01 f303 	lsl.w	r3, r1, r3
 800e93a:	041b      	lsls	r3, r3, #16
 800e93c:	43db      	mvns	r3, r3
 800e93e:	68f9      	ldr	r1, [r7, #12]
 800e940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e944:	4013      	ands	r3, r2
 800e946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e94e:	69da      	ldr	r2, [r3, #28]
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f003 030f 	and.w	r3, r3, #15
 800e958:	2101      	movs	r1, #1
 800e95a:	fa01 f303 	lsl.w	r3, r1, r3
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	43db      	mvns	r3, r3
 800e962:	68f9      	ldr	r1, [r7, #12]
 800e964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e968:	4013      	ands	r3, r2
 800e96a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	015a      	lsls	r2, r3, #5
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4413      	add	r3, r2
 800e974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	0159      	lsls	r1, r3, #5
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	440b      	add	r3, r1
 800e982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e986:	4619      	mov	r1, r3
 800e988:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <USB_DeactivateEndpoint+0x1b4>)
 800e98a:	4013      	ands	r3, r2
 800e98c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	ec337800 	.word	0xec337800
 800e9a0:	eff37800 	.word	0xeff37800

0800e9a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	785b      	ldrb	r3, [r3, #1]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	f040 810a 	bne.w	800ebd6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	695b      	ldr	r3, [r3, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d132      	bne.n	800ea30 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	015a      	lsls	r2, r3, #5
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d6:	691b      	ldr	r3, [r3, #16]
 800e9d8:	693a      	ldr	r2, [r7, #16]
 800e9da:	0151      	lsls	r1, r2, #5
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	440a      	add	r2, r1
 800e9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e9e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e9ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	015a      	lsls	r2, r3, #5
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	0151      	lsls	r1, r2, #5
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	440a      	add	r2, r1
 800ea04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	0151      	lsls	r1, r2, #5
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	440a      	add	r2, r1
 800ea24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea28:	0cdb      	lsrs	r3, r3, #19
 800ea2a:	04db      	lsls	r3, r3, #19
 800ea2c:	6113      	str	r3, [r2, #16]
 800ea2e:	e074      	b.n	800eb1a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	0151      	lsls	r1, r2, #5
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	440a      	add	r2, r1
 800ea46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea4a:	0cdb      	lsrs	r3, r3, #19
 800ea4c:	04db      	lsls	r3, r3, #19
 800ea4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	015a      	lsls	r2, r3, #5
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	4413      	add	r3, r2
 800ea58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea5c:	691b      	ldr	r3, [r3, #16]
 800ea5e:	693a      	ldr	r2, [r7, #16]
 800ea60:	0151      	lsls	r1, r2, #5
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	440a      	add	r2, r1
 800ea66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea80:	691a      	ldr	r2, [r3, #16]
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	6959      	ldr	r1, [r3, #20]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	440b      	add	r3, r1
 800ea8c:	1e59      	subs	r1, r3, #1
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea96:	04d9      	lsls	r1, r3, #19
 800ea98:	4baf      	ldr	r3, [pc, #700]	; (800ed58 <USB_EPStartXfer+0x3b4>)
 800ea9a:	400b      	ands	r3, r1
 800ea9c:	6939      	ldr	r1, [r7, #16]
 800ea9e:	0148      	lsls	r0, r1, #5
 800eaa0:	6979      	ldr	r1, [r7, #20]
 800eaa2:	4401      	add	r1, r0
 800eaa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	015a      	lsls	r2, r3, #5
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	4413      	add	r3, r2
 800eab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab8:	691a      	ldr	r2, [r3, #16]
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eac2:	6939      	ldr	r1, [r7, #16]
 800eac4:	0148      	lsls	r0, r1, #5
 800eac6:	6979      	ldr	r1, [r7, #20]
 800eac8:	4401      	add	r1, r0
 800eaca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eace:	4313      	orrs	r3, r2
 800ead0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	78db      	ldrb	r3, [r3, #3]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d11f      	bne.n	800eb1a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	0151      	lsls	r1, r2, #5
 800eaec:	697a      	ldr	r2, [r7, #20]
 800eaee:	440a      	add	r2, r1
 800eaf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eaf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800eaf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	0151      	lsls	r1, r2, #5
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	440a      	add	r2, r1
 800eb10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb18:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	015a      	lsls	r2, r3, #5
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	4413      	add	r3, r2
 800eb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	0151      	lsls	r1, r2, #5
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	440a      	add	r2, r1
 800eb30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb38:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	78db      	ldrb	r3, [r3, #3]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d015      	beq.n	800eb6e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 8100 	beq.w	800ed4c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	f003 030f 	and.w	r3, r3, #15
 800eb5c:	2101      	movs	r1, #1
 800eb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb62:	6979      	ldr	r1, [r7, #20]
 800eb64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	634b      	str	r3, [r1, #52]	; 0x34
 800eb6c:	e0ee      	b.n	800ed4c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d110      	bne.n	800eba0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	015a      	lsls	r2, r3, #5
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	4413      	add	r3, r2
 800eb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	0151      	lsls	r1, r2, #5
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	440a      	add	r2, r1
 800eb94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb9c:	6013      	str	r3, [r2, #0]
 800eb9e:	e00f      	b.n	800ebc0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	015a      	lsls	r2, r3, #5
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	4413      	add	r3, r2
 800eba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	693a      	ldr	r2, [r7, #16]
 800ebb0:	0151      	lsls	r1, r2, #5
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	440a      	add	r2, r1
 800ebb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebbe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	68d9      	ldr	r1, [r3, #12]
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	781a      	ldrb	r2, [r3, #0]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f9e2 	bl	800ef98 <USB_WritePacket>
 800ebd4:	e0ba      	b.n	800ed4c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	015a      	lsls	r2, r3, #5
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe2:	691b      	ldr	r3, [r3, #16]
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	0151      	lsls	r1, r2, #5
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	440a      	add	r2, r1
 800ebec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebf0:	0cdb      	lsrs	r3, r3, #19
 800ebf2:	04db      	lsls	r3, r3, #19
 800ebf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	015a      	lsls	r2, r3, #5
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	0151      	lsls	r1, r2, #5
 800ec08:	697a      	ldr	r2, [r7, #20]
 800ec0a:	440a      	add	r2, r1
 800ec0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d123      	bne.n	800ec6a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	015a      	lsls	r2, r3, #5
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec2e:	691a      	ldr	r2, [r3, #16]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec38:	6939      	ldr	r1, [r7, #16]
 800ec3a:	0148      	lsls	r0, r1, #5
 800ec3c:	6979      	ldr	r1, [r7, #20]
 800ec3e:	4401      	add	r1, r0
 800ec40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec44:	4313      	orrs	r3, r2
 800ec46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	0151      	lsls	r1, r2, #5
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	440a      	add	r2, r1
 800ec5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec66:	6113      	str	r3, [r2, #16]
 800ec68:	e033      	b.n	800ecd2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	695a      	ldr	r2, [r3, #20]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	4413      	add	r3, r2
 800ec74:	1e5a      	subs	r2, r3, #1
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec7e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	015a      	lsls	r2, r3, #5
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	4413      	add	r3, r2
 800ec88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec8c:	691a      	ldr	r2, [r3, #16]
 800ec8e:	89fb      	ldrh	r3, [r7, #14]
 800ec90:	04d9      	lsls	r1, r3, #19
 800ec92:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <USB_EPStartXfer+0x3b4>)
 800ec94:	400b      	ands	r3, r1
 800ec96:	6939      	ldr	r1, [r7, #16]
 800ec98:	0148      	lsls	r0, r1, #5
 800ec9a:	6979      	ldr	r1, [r7, #20]
 800ec9c:	4401      	add	r1, r0
 800ec9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eca2:	4313      	orrs	r3, r2
 800eca4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	015a      	lsls	r2, r3, #5
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	4413      	add	r3, r2
 800ecae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb2:	691a      	ldr	r2, [r3, #16]
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	89f9      	ldrh	r1, [r7, #14]
 800ecba:	fb01 f303 	mul.w	r3, r1, r3
 800ecbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecc2:	6939      	ldr	r1, [r7, #16]
 800ecc4:	0148      	lsls	r0, r1, #5
 800ecc6:	6979      	ldr	r1, [r7, #20]
 800ecc8:	4401      	add	r1, r0
 800ecca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	78db      	ldrb	r3, [r3, #3]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d128      	bne.n	800ed2c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d110      	bne.n	800ed0c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	015a      	lsls	r2, r3, #5
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	693a      	ldr	r2, [r7, #16]
 800ecfa:	0151      	lsls	r1, r2, #5
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	440a      	add	r2, r1
 800ed00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed08:	6013      	str	r3, [r2, #0]
 800ed0a:	e00f      	b.n	800ed2c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	4413      	add	r3, r2
 800ed14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	693a      	ldr	r2, [r7, #16]
 800ed1c:	0151      	lsls	r1, r2, #5
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	440a      	add	r2, r1
 800ed22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	015a      	lsls	r2, r3, #5
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	4413      	add	r3, r2
 800ed34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	0151      	lsls	r1, r2, #5
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	440a      	add	r2, r1
 800ed42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	1ff80000 	.word	0x1ff80000

0800ed5c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	f040 80ab 	bne.w	800eed0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d132      	bne.n	800ede8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	015a      	lsls	r2, r3, #5
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	4413      	add	r3, r2
 800ed8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed8e:	691b      	ldr	r3, [r3, #16]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	0151      	lsls	r1, r2, #5
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	440a      	add	r2, r1
 800ed98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eda0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eda4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	015a      	lsls	r2, r3, #5
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	4413      	add	r3, r2
 800edae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb2:	691b      	ldr	r3, [r3, #16]
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	0151      	lsls	r1, r2, #5
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	440a      	add	r2, r1
 800edbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800edc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	4413      	add	r3, r2
 800edce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	0151      	lsls	r1, r2, #5
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	440a      	add	r2, r1
 800eddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ede0:	0cdb      	lsrs	r3, r3, #19
 800ede2:	04db      	lsls	r3, r3, #19
 800ede4:	6113      	str	r3, [r2, #16]
 800ede6:	e04e      	b.n	800ee86 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	015a      	lsls	r2, r3, #5
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	4413      	add	r3, r2
 800edf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	0151      	lsls	r1, r2, #5
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	440a      	add	r2, r1
 800edfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee02:	0cdb      	lsrs	r3, r3, #19
 800ee04:	04db      	lsls	r3, r3, #19
 800ee06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	015a      	lsls	r2, r3, #5
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	68ba      	ldr	r2, [r7, #8]
 800ee18:	0151      	lsls	r1, r2, #5
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	440a      	add	r2, r1
 800ee1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	695a      	ldr	r2, [r3, #20]
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d903      	bls.n	800ee40 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	689a      	ldr	r2, [r3, #8]
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	015a      	lsls	r2, r3, #5
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	4413      	add	r3, r2
 800ee48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee4c:	691b      	ldr	r3, [r3, #16]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	0151      	lsls	r1, r2, #5
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	440a      	add	r2, r1
 800ee56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	015a      	lsls	r2, r3, #5
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	4413      	add	r3, r2
 800ee68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee6c:	691a      	ldr	r2, [r3, #16]
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	0148      	lsls	r0, r1, #5
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	4401      	add	r1, r0
 800ee7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee82:	4313      	orrs	r3, r2
 800ee84:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	015a      	lsls	r2, r3, #5
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	0151      	lsls	r1, r2, #5
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	440a      	add	r2, r1
 800ee9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eea4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	695b      	ldr	r3, [r3, #20]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d06d      	beq.n	800ef8a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	f003 030f 	and.w	r3, r3, #15
 800eebe:	2101      	movs	r1, #1
 800eec0:	fa01 f303 	lsl.w	r3, r1, r3
 800eec4:	68f9      	ldr	r1, [r7, #12]
 800eec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eeca:	4313      	orrs	r3, r2
 800eecc:	634b      	str	r3, [r1, #52]	; 0x34
 800eece:	e05c      	b.n	800ef8a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	015a      	lsls	r2, r3, #5
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	4413      	add	r3, r2
 800eed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	0151      	lsls	r1, r2, #5
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	440a      	add	r2, r1
 800eee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eeea:	0cdb      	lsrs	r3, r3, #19
 800eeec:	04db      	lsls	r3, r3, #19
 800eeee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	0151      	lsls	r1, r2, #5
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	440a      	add	r2, r1
 800ef06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef12:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	695b      	ldr	r3, [r3, #20]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d003      	beq.n	800ef24 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	689a      	ldr	r2, [r3, #8]
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	015a      	lsls	r2, r3, #5
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	0151      	lsls	r1, r2, #5
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	440a      	add	r2, r1
 800ef3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	015a      	lsls	r2, r3, #5
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef50:	691a      	ldr	r2, [r3, #16]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	0148      	lsls	r0, r1, #5
 800ef5e:	68f9      	ldr	r1, [r7, #12]
 800ef60:	4401      	add	r1, r0
 800ef62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ef66:	4313      	orrs	r3, r2
 800ef68:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	015a      	lsls	r2, r3, #5
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	4413      	add	r3, r2
 800ef72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68ba      	ldr	r2, [r7, #8]
 800ef7a:	0151      	lsls	r1, r2, #5
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	440a      	add	r2, r1
 800ef80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b089      	sub	sp, #36	; 0x24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	4611      	mov	r1, r2
 800efa4:	461a      	mov	r2, r3
 800efa6:	460b      	mov	r3, r1
 800efa8:	71fb      	strb	r3, [r7, #7]
 800efaa:	4613      	mov	r3, r2
 800efac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800efb6:	88bb      	ldrh	r3, [r7, #4]
 800efb8:	3303      	adds	r3, #3
 800efba:	089b      	lsrs	r3, r3, #2
 800efbc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800efbe:	2300      	movs	r3, #0
 800efc0:	61bb      	str	r3, [r7, #24]
 800efc2:	e00f      	b.n	800efe4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800efc4:	79fb      	ldrb	r3, [r7, #7]
 800efc6:	031a      	lsls	r2, r3, #12
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efd0:	461a      	mov	r2, r3
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	3304      	adds	r3, #4
 800efdc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	3301      	adds	r3, #1
 800efe2:	61bb      	str	r3, [r7, #24]
 800efe4:	69ba      	ldr	r2, [r7, #24]
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d3eb      	bcc.n	800efc4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3724      	adds	r7, #36	; 0x24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr

0800effa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800effa:	b480      	push	{r7}
 800effc:	b089      	sub	sp, #36	; 0x24
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	4613      	mov	r3, r2
 800f006:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f010:	88fb      	ldrh	r3, [r7, #6]
 800f012:	3303      	adds	r3, #3
 800f014:	089b      	lsrs	r3, r3, #2
 800f016:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f018:	2300      	movs	r3, #0
 800f01a:	61bb      	str	r3, [r7, #24]
 800f01c:	e00b      	b.n	800f036 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	601a      	str	r2, [r3, #0]
    pDest++;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	3304      	adds	r3, #4
 800f02e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	3301      	adds	r3, #1
 800f034:	61bb      	str	r3, [r7, #24]
 800f036:	69ba      	ldr	r2, [r7, #24]
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d3ef      	bcc.n	800f01e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f03e:	69fb      	ldr	r3, [r7, #28]
}
 800f040:	4618      	mov	r0, r3
 800f042:	3724      	adds	r7, #36	; 0x24
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	785b      	ldrb	r3, [r3, #1]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d12c      	bne.n	800f0c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	db12      	blt.n	800f0a0 <USB_EPSetStall+0x54>
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00f      	beq.n	800f0a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	015a      	lsls	r2, r3, #5
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	4413      	add	r3, r2
 800f088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	68ba      	ldr	r2, [r7, #8]
 800f090:	0151      	lsls	r1, r2, #5
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	440a      	add	r2, r1
 800f096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f09a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f09e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	015a      	lsls	r2, r3, #5
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	0151      	lsls	r1, r2, #5
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	440a      	add	r2, r1
 800f0b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f0be:	6013      	str	r3, [r2, #0]
 800f0c0:	e02b      	b.n	800f11a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	015a      	lsls	r2, r3, #5
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	db12      	blt.n	800f0fa <USB_EPSetStall+0xae>
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00f      	beq.n	800f0fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	015a      	lsls	r2, r3, #5
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	0151      	lsls	r1, r2, #5
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	440a      	add	r2, r1
 800f0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f0f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	4413      	add	r3, r2
 800f102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	0151      	lsls	r1, r2, #5
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	440a      	add	r2, r1
 800f110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	785b      	ldrb	r3, [r3, #1]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d128      	bne.n	800f196 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	0151      	lsls	r1, r2, #5
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	440a      	add	r2, r1
 800f15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f15e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f162:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	78db      	ldrb	r3, [r3, #3]
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d003      	beq.n	800f174 <USB_EPClearStall+0x4c>
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	78db      	ldrb	r3, [r3, #3]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d138      	bne.n	800f1e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	015a      	lsls	r2, r3, #5
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4413      	add	r3, r2
 800f17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	0151      	lsls	r1, r2, #5
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	440a      	add	r2, r1
 800f18a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f18e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	e027      	b.n	800f1e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	015a      	lsls	r2, r3, #5
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	4413      	add	r3, r2
 800f19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68ba      	ldr	r2, [r7, #8]
 800f1a6:	0151      	lsls	r1, r2, #5
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	440a      	add	r2, r1
 800f1ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	78db      	ldrb	r3, [r3, #3]
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d003      	beq.n	800f1c6 <USB_EPClearStall+0x9e>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	78db      	ldrb	r3, [r3, #3]
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d10f      	bne.n	800f1e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	015a      	lsls	r2, r3, #5
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	0151      	lsls	r1, r2, #5
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	440a      	add	r2, r1
 800f1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f212:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f216:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	011b      	lsls	r3, r3, #4
 800f224:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f228:	68f9      	ldr	r1, [r7, #12]
 800f22a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f22e:	4313      	orrs	r3, r2
 800f230:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f232:	2300      	movs	r3, #0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f25a:	f023 0302 	bic.w	r3, r3, #2
 800f25e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f260:	2003      	movs	r0, #3
 800f262:	f7f6 fa4b 	bl	80056fc <HAL_Delay>

  return HAL_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f28a:	f043 0302 	orr.w	r3, r3, #2
 800f28e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f290:	2003      	movs	r0, #3
 800f292:	f7f6 fa33 	bl	80056fc <HAL_Delay>

  return HAL_OK;
 800f296:	2300      	movs	r3, #0
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	695b      	ldr	r3, [r3, #20]
 800f2ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	699b      	ldr	r3, [r3, #24]
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2d8:	699b      	ldr	r3, [r3, #24]
 800f2da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e2:	69db      	ldr	r3, [r3, #28]
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	4013      	ands	r3, r2
 800f2e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	0c1b      	lsrs	r3, r3, #16
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2fa:	b480      	push	{r7}
 800f2fc:	b085      	sub	sp, #20
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f30c:	699b      	ldr	r3, [r3, #24]
 800f30e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f316:	69db      	ldr	r3, [r3, #28]
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	4013      	ands	r3, r2
 800f31c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	b29b      	uxth	r3, r3
}
 800f322:	4618      	mov	r0, r3
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f32e:	b480      	push	{r7}
 800f330:	b085      	sub	sp, #20
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	460b      	mov	r3, r1
 800f338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f33e:	78fb      	ldrb	r3, [r7, #3]
 800f340:	015a      	lsls	r2, r3, #5
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4413      	add	r3, r2
 800f346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	4013      	ands	r3, r2
 800f35a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f35c:	68bb      	ldr	r3, [r7, #8]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f36a:	b480      	push	{r7}
 800f36c:	b087      	sub	sp, #28
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
 800f372:	460b      	mov	r3, r1
 800f374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f38e:	78fb      	ldrb	r3, [r7, #3]
 800f390:	f003 030f 	and.w	r3, r3, #15
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	fa22 f303 	lsr.w	r3, r2, r3
 800f39a:	01db      	lsls	r3, r3, #7
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3a4:	78fb      	ldrb	r3, [r7, #3]
 800f3a6:	015a      	lsls	r2, r3, #5
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b083      	sub	sp, #12
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	f003 0301 	and.w	r3, r3, #1
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b085      	sub	sp, #20
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f41a:	2300      	movs	r3, #0
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3714      	adds	r7, #20
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800f428:	b480      	push	{r7}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	333c      	adds	r3, #60	; 0x3c
 800f43a:	3304      	adds	r3, #4
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	4a1c      	ldr	r2, [pc, #112]	; (800f4b4 <USB_EP0_OutStart+0x8c>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d90a      	bls.n	800f45e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f458:	d101      	bne.n	800f45e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	e024      	b.n	800f4a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f464:	461a      	mov	r2, r3
 800f466:	2300      	movs	r3, #0
 800f468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f47c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f48c:	f043 0318 	orr.w	r3, r3, #24
 800f490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	68fa      	ldr	r2, [r7, #12]
 800f49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f4a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3714      	adds	r7, #20
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr
 800f4b4:	4f54300a 	.word	0x4f54300a

0800f4b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	60fb      	str	r3, [r7, #12]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	4a13      	ldr	r2, [pc, #76]	; (800f51c <USB_CoreReset+0x64>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d901      	bls.n	800f4d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	e01b      	b.n	800f50e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	daf2      	bge.n	800f4c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	f043 0201 	orr.w	r2, r3, #1
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	60fb      	str	r3, [r7, #12]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4a09      	ldr	r2, [pc, #36]	; (800f51c <USB_CoreReset+0x64>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d901      	bls.n	800f500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e006      	b.n	800f50e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d0f0      	beq.n	800f4ee <USB_CoreReset+0x36>

  return HAL_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3714      	adds	r7, #20
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	00030d40 	.word	0x00030d40

0800f520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f52c:	2300      	movs	r3, #0
 800f52e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7c1b      	ldrb	r3, [r3, #16]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d115      	bne.n	800f564 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f53c:	2202      	movs	r2, #2
 800f53e:	2181      	movs	r1, #129	; 0x81
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f005 f897 	bl	8014674 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2201      	movs	r2, #1
 800f54a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f54c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f550:	2202      	movs	r2, #2
 800f552:	2101      	movs	r1, #1
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f005 f88d 	bl	8014674 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f562:	e012      	b.n	800f58a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f564:	2340      	movs	r3, #64	; 0x40
 800f566:	2202      	movs	r2, #2
 800f568:	2181      	movs	r1, #129	; 0x81
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f005 f882 	bl	8014674 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f576:	2340      	movs	r3, #64	; 0x40
 800f578:	2202      	movs	r2, #2
 800f57a:	2101      	movs	r1, #1
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f005 f879 	bl	8014674 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2201      	movs	r2, #1
 800f586:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f58a:	2308      	movs	r3, #8
 800f58c:	2203      	movs	r2, #3
 800f58e:	2182      	movs	r1, #130	; 0x82
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f005 f86f 	bl	8014674 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2201      	movs	r2, #1
 800f59a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f59c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f5a0:	f005 fa80 	bl	8014aa4 <USBD_static_malloc>
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d102      	bne.n	800f5bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	73fb      	strb	r3, [r7, #15]
 800f5ba:	e026      	b.n	800f60a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7c1b      	ldrb	r3, [r3, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f005 f9ba 	bl	801496c <USBD_LL_PrepareReceive>
 800f5f8:	e007      	b.n	800f60a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f600:	2340      	movs	r3, #64	; 0x40
 800f602:	2101      	movs	r1, #1
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f005 f9b1 	bl	801496c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	460b      	mov	r3, r1
 800f61e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f620:	2300      	movs	r3, #0
 800f622:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f624:	2181      	movs	r1, #129	; 0x81
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f005 f862 	bl	80146f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f632:	2101      	movs	r1, #1
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f005 f85b 	bl	80146f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f642:	2182      	movs	r1, #130	; 0x82
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f005 f853 	bl	80146f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00e      	beq.n	800f678 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66a:	4618      	mov	r0, r3
 800f66c:	f005 fa28 	bl	8014ac0 <USBD_static_free>
    pdev->pClassData = NULL;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800f678:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
 800f68a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f692:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f698:	2300      	movs	r3, #0
 800f69a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d039      	beq.n	800f720 <USBD_CDC_Setup+0x9e>
 800f6ac:	2b20      	cmp	r3, #32
 800f6ae:	d17c      	bne.n	800f7aa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	88db      	ldrh	r3, [r3, #6]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d029      	beq.n	800f70c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	b25b      	sxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	da11      	bge.n	800f6e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800f6ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f6d0:	683a      	ldr	r2, [r7, #0]
 800f6d2:	88d2      	ldrh	r2, [r2, #6]
 800f6d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f6d6:	6939      	ldr	r1, [r7, #16]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	88db      	ldrh	r3, [r3, #6]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f001 fa3a 	bl	8010b58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800f6e4:	e068      	b.n	800f7b8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	785a      	ldrb	r2, [r3, #1]
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	88db      	ldrh	r3, [r3, #6]
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f6fc:	6939      	ldr	r1, [r7, #16]
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	88db      	ldrh	r3, [r3, #6]
 800f702:	461a      	mov	r2, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f001 fa55 	bl	8010bb4 <USBD_CtlPrepareRx>
      break;
 800f70a:	e055      	b.n	800f7b8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	7850      	ldrb	r0, [r2, #1]
 800f718:	2200      	movs	r2, #0
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	4798      	blx	r3
      break;
 800f71e:	e04b      	b.n	800f7b8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	785b      	ldrb	r3, [r3, #1]
 800f724:	2b0a      	cmp	r3, #10
 800f726:	d017      	beq.n	800f758 <USBD_CDC_Setup+0xd6>
 800f728:	2b0b      	cmp	r3, #11
 800f72a:	d029      	beq.n	800f780 <USBD_CDC_Setup+0xfe>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d133      	bne.n	800f798 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f736:	2b03      	cmp	r3, #3
 800f738:	d107      	bne.n	800f74a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f73a:	f107 030c 	add.w	r3, r7, #12
 800f73e:	2202      	movs	r2, #2
 800f740:	4619      	mov	r1, r3
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f001 fa08 	bl	8010b58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f748:	e02e      	b.n	800f7a8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 f998 	bl	8010a82 <USBD_CtlError>
            ret = USBD_FAIL;
 800f752:	2302      	movs	r3, #2
 800f754:	75fb      	strb	r3, [r7, #23]
          break;
 800f756:	e027      	b.n	800f7a8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f75e:	2b03      	cmp	r3, #3
 800f760:	d107      	bne.n	800f772 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800f762:	f107 030f 	add.w	r3, r7, #15
 800f766:	2201      	movs	r2, #1
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f001 f9f4 	bl	8010b58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f770:	e01a      	b.n	800f7a8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f001 f984 	bl	8010a82 <USBD_CtlError>
            ret = USBD_FAIL;
 800f77a:	2302      	movs	r3, #2
 800f77c:	75fb      	strb	r3, [r7, #23]
          break;
 800f77e:	e013      	b.n	800f7a8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f786:	2b03      	cmp	r3, #3
 800f788:	d00d      	beq.n	800f7a6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 f978 	bl	8010a82 <USBD_CtlError>
            ret = USBD_FAIL;
 800f792:	2302      	movs	r3, #2
 800f794:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f796:	e006      	b.n	800f7a6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 f971 	bl	8010a82 <USBD_CtlError>
          ret = USBD_FAIL;
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	75fb      	strb	r3, [r7, #23]
          break;
 800f7a4:	e000      	b.n	800f7a8 <USBD_CDC_Setup+0x126>
          break;
 800f7a6:	bf00      	nop
      }
      break;
 800f7a8:	e006      	b.n	800f7b8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f001 f968 	bl	8010a82 <USBD_CtlError>
      ret = USBD_FAIL;
 800f7b2:	2302      	movs	r3, #2
 800f7b4:	75fb      	strb	r3, [r7, #23]
      break;
 800f7b6:	bf00      	nop
  }

  return ret;
 800f7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7dc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d03a      	beq.n	800f85e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f7e8:	78fa      	ldrb	r2, [r7, #3]
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4413      	add	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	440b      	add	r3, r1
 800f7f6:	331c      	adds	r3, #28
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d029      	beq.n	800f852 <USBD_CDC_DataIn+0x90>
 800f7fe:	78fa      	ldrb	r2, [r7, #3]
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	4613      	mov	r3, r2
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	440b      	add	r3, r1
 800f80c:	331c      	adds	r3, #28
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	78f9      	ldrb	r1, [r7, #3]
 800f812:	68b8      	ldr	r0, [r7, #8]
 800f814:	460b      	mov	r3, r1
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	1a5b      	subs	r3, r3, r1
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	4403      	add	r3, r0
 800f81e:	3344      	adds	r3, #68	; 0x44
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	fbb2 f1f3 	udiv	r1, r2, r3
 800f826:	fb03 f301 	mul.w	r3, r3, r1
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d110      	bne.n	800f852 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f830:	78fa      	ldrb	r2, [r7, #3]
 800f832:	6879      	ldr	r1, [r7, #4]
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	440b      	add	r3, r1
 800f83e:	331c      	adds	r3, #28
 800f840:	2200      	movs	r2, #0
 800f842:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f844:	78f9      	ldrb	r1, [r7, #3]
 800f846:	2300      	movs	r3, #0
 800f848:	2200      	movs	r2, #0
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f005 f854 	bl	80148f8 <USBD_LL_Transmit>
 800f850:	e003      	b.n	800f85a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e000      	b.n	800f860 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f85e:	2302      	movs	r3, #2
  }
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	460b      	mov	r3, r1
 800f872:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f87a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f87c:	78fb      	ldrb	r3, [r7, #3]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f005 f8ad 	bl	80149e0 <USBD_LL_GetRxDataSize>
 800f886:	4602      	mov	r2, r0
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00d      	beq.n	800f8b4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4798      	blx	r3

    return USBD_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	e000      	b.n	800f8b6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f8b4:	2302      	movs	r3, #2
  }
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b084      	sub	sp, #16
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8cc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d015      	beq.n	800f904 <USBD_CDC_EP0_RxReady+0x46>
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f8de:	2bff      	cmp	r3, #255	; 0xff
 800f8e0:	d010      	beq.n	800f904 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f8f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f8f8:	b292      	uxth	r2, r2
 800f8fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	22ff      	movs	r2, #255	; 0xff
 800f900:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
	...

0800f910 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2243      	movs	r2, #67	; 0x43
 800f91c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f91e:	4b03      	ldr	r3, [pc, #12]	; (800f92c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	200000ec 	.word	0x200000ec

0800f930 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2243      	movs	r2, #67	; 0x43
 800f93c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f93e:	4b03      	ldr	r3, [pc, #12]	; (800f94c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	200000a8 	.word	0x200000a8

0800f950 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2243      	movs	r2, #67	; 0x43
 800f95c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f95e:	4b03      	ldr	r3, [pc, #12]	; (800f96c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f960:	4618      	mov	r0, r3
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	20000130 	.word	0x20000130

0800f970 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	220a      	movs	r2, #10
 800f97c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f97e:	4b03      	ldr	r3, [pc, #12]	; (800f98c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	20000064 	.word	0x20000064

0800f990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f99a:	2302      	movs	r3, #2
 800f99c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d005      	beq.n	800f9b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	683a      	ldr	r2, [r7, #0]
 800f9a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800f9be:	b480      	push	{r7}
 800f9c0:	b087      	sub	sp, #28
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	60b9      	str	r1, [r7, #8]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9d2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f9dc:	88fa      	ldrh	r2, [r7, #6]
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	371c      	adds	r7, #28
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800f9f2:	b480      	push	{r7}
 800f9f4:	b085      	sub	sp, #20
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	683a      	ldr	r2, [r7, #0]
 800fa08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr

0800fa1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d017      	beq.n	800fa64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	7c1b      	ldrb	r3, [r3, #16]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d109      	bne.n	800fa50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fa42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa46:	2101      	movs	r1, #1
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f004 ff8f 	bl	801496c <USBD_LL_PrepareReceive>
 800fa4e:	e007      	b.n	800fa60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fa56:	2340      	movs	r3, #64	; 0x40
 800fa58:	2101      	movs	r1, #1
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f004 ff86 	bl	801496c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800fa60:	2300      	movs	r3, #0
 800fa62:	e000      	b.n	800fa66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800fa64:	2302      	movs	r3, #2
  }
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	60f8      	str	r0, [r7, #12]
 800fa76:	60b9      	str	r1, [r7, #8]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d101      	bne.n	800fa86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fa82:	2302      	movs	r3, #2
 800fa84:	e01a      	b.n	800fabc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d003      	beq.n	800fa98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	79fa      	ldrb	r2, [r7, #7]
 800fab2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f004 fd5f 	bl	8014578 <USBD_LL_Init>

  return USBD_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	683a      	ldr	r2, [r7, #0]
 800fadc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800fae0:	2300      	movs	r3, #0
 800fae2:	73fb      	strb	r3, [r7, #15]
 800fae4:	e001      	b.n	800faea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fae6:	2302      	movs	r3, #2
 800fae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800faea:	7bfb      	ldrb	r3, [r7, #15]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f004 fd85 	bl	8014610 <USBD_LL_Start>

  return USBD_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr

0800fb26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	460b      	mov	r3, r1
 800fb30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fb32:	2302      	movs	r3, #2
 800fb34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00c      	beq.n	800fb5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	78fa      	ldrb	r2, [r7, #3]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	4798      	blx	r3
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d101      	bne.n	800fb5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	78fa      	ldrb	r2, [r7, #3]
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	4798      	blx	r3

  return USBD_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f000 ff33 	bl	8010a08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fbbe:	f003 031f 	and.w	r3, r3, #31
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d00c      	beq.n	800fbe0 <USBD_LL_SetupStage+0x56>
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d302      	bcc.n	800fbd0 <USBD_LL_SetupStage+0x46>
 800fbca:	2b02      	cmp	r3, #2
 800fbcc:	d010      	beq.n	800fbf0 <USBD_LL_SetupStage+0x66>
 800fbce:	e017      	b.n	800fc00 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fa09 	bl	800fff0 <USBD_StdDevReq>
      break;
 800fbde:	e01a      	b.n	800fc16 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 fa6b 	bl	80100c4 <USBD_StdItfReq>
      break;
 800fbee:	e012      	b.n	800fc16 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 faa9 	bl	8010150 <USBD_StdEPReq>
      break;
 800fbfe:	e00a      	b.n	800fc16 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800fc06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f004 fda4 	bl	801475c <USBD_LL_StallEP>
      break;
 800fc14:	bf00      	nop
  }

  return USBD_OK;
 800fc16:	2300      	movs	r3, #0
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	607a      	str	r2, [r7, #4]
 800fc2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fc2e:	7afb      	ldrb	r3, [r7, #11]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d14b      	bne.n	800fccc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fc3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc42:	2b03      	cmp	r3, #3
 800fc44:	d134      	bne.n	800fcb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	68da      	ldr	r2, [r3, #12]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	691b      	ldr	r3, [r3, #16]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d919      	bls.n	800fc86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	68da      	ldr	r2, [r3, #12]
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	691b      	ldr	r3, [r3, #16]
 800fc5a:	1ad2      	subs	r2, r2, r3
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	68da      	ldr	r2, [r3, #12]
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d203      	bcs.n	800fc74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	e002      	b.n	800fc7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	6879      	ldr	r1, [r7, #4]
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f000 ffb6 	bl	8010bf0 <USBD_CtlContinueRx>
 800fc84:	e038      	b.n	800fcf8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00a      	beq.n	800fca8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fc98:	2b03      	cmp	r3, #3
 800fc9a:	d105      	bne.n	800fca8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f000 ffb3 	bl	8010c14 <USBD_CtlSendStatus>
 800fcae:	e023      	b.n	800fcf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcb6:	2b05      	cmp	r3, #5
 800fcb8:	d11e      	bne.n	800fcf8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f004 fd49 	bl	801475c <USBD_LL_StallEP>
 800fcca:	e015      	b.n	800fcf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d00d      	beq.n	800fcf4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800fcde:	2b03      	cmp	r3, #3
 800fce0:	d108      	bne.n	800fcf4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fce8:	699b      	ldr	r3, [r3, #24]
 800fcea:	7afa      	ldrb	r2, [r7, #11]
 800fcec:	4611      	mov	r1, r2
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	4798      	blx	r3
 800fcf2:	e001      	b.n	800fcf8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	e000      	b.n	800fcfa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3718      	adds	r7, #24
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b086      	sub	sp, #24
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	60f8      	str	r0, [r7, #12]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	607a      	str	r2, [r7, #4]
 800fd0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fd10:	7afb      	ldrb	r3, [r7, #11]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d17f      	bne.n	800fe16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	3314      	adds	r3, #20
 800fd1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d15c      	bne.n	800fde0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d915      	bls.n	800fd5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	68da      	ldr	r2, [r3, #12]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	1ad2      	subs	r2, r2, r3
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	461a      	mov	r2, r3
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f000 ff20 	bl	8010b90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd50:	2300      	movs	r3, #0
 800fd52:	2200      	movs	r2, #0
 800fd54:	2100      	movs	r1, #0
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f004 fe08 	bl	801496c <USBD_LL_PrepareReceive>
 800fd5c:	e04e      	b.n	800fdfc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	6912      	ldr	r2, [r2, #16]
 800fd66:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd6a:	fb02 f201 	mul.w	r2, r2, r1
 800fd6e:	1a9b      	subs	r3, r3, r2
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d11c      	bne.n	800fdae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	689a      	ldr	r2, [r3, #8]
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d316      	bcc.n	800fdae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d20f      	bcs.n	800fdae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fd8e:	2200      	movs	r2, #0
 800fd90:	2100      	movs	r1, #0
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 fefc 	bl	8010b90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fda0:	2300      	movs	r3, #0
 800fda2:	2200      	movs	r2, #0
 800fda4:	2100      	movs	r1, #0
 800fda6:	68f8      	ldr	r0, [r7, #12]
 800fda8:	f004 fde0 	bl	801496c <USBD_LL_PrepareReceive>
 800fdac:	e026      	b.n	800fdfc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00a      	beq.n	800fdd0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d105      	bne.n	800fdd0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fdd0:	2180      	movs	r1, #128	; 0x80
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f004 fcc2 	bl	801475c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 ff2e 	bl	8010c3a <USBD_CtlReceiveStatus>
 800fdde:	e00d      	b.n	800fdfc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fde6:	2b04      	cmp	r3, #4
 800fde8:	d004      	beq.n	800fdf4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d103      	bne.n	800fdfc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fdf4:	2180      	movs	r1, #128	; 0x80
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f004 fcb0 	bl	801475c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d11d      	bne.n	800fe42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7ff fe82 	bl	800fb10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fe14:	e015      	b.n	800fe42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00d      	beq.n	800fe3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800fe28:	2b03      	cmp	r3, #3
 800fe2a:	d108      	bne.n	800fe3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe32:	695b      	ldr	r3, [r3, #20]
 800fe34:	7afa      	ldrb	r2, [r7, #11]
 800fe36:	4611      	mov	r1, r2
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	4798      	blx	r3
 800fe3c:	e001      	b.n	800fe42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fe3e:	2302      	movs	r3, #2
 800fe40:	e000      	b.n	800fe44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fe42:	2300      	movs	r3, #0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3718      	adds	r7, #24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe54:	2340      	movs	r3, #64	; 0x40
 800fe56:	2200      	movs	r2, #0
 800fe58:	2100      	movs	r1, #0
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f004 fc0a 	bl	8014674 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2201      	movs	r2, #1
 800fe64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2240      	movs	r2, #64	; 0x40
 800fe6c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe70:	2340      	movs	r3, #64	; 0x40
 800fe72:	2200      	movs	r2, #0
 800fe74:	2180      	movs	r1, #128	; 0x80
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f004 fbfc 	bl	8014674 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2240      	movs	r2, #64	; 0x40
 800fe86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feac:	2b00      	cmp	r3, #0
 800feae:	d009      	beq.n	800fec4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	6852      	ldr	r2, [r2, #4]
 800febc:	b2d2      	uxtb	r2, r2
 800febe:	4611      	mov	r1, r2
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	4798      	blx	r3
  }

  return USBD_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	460b      	mov	r3, r1
 800fed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	78fa      	ldrb	r2, [r7, #3]
 800fede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800feee:	b480      	push	{r7}
 800fef0:	b083      	sub	sp, #12
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2204      	movs	r2, #4
 800ff06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff26:	2b04      	cmp	r3, #4
 800ff28:	d105      	bne.n	800ff36 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d10b      	bne.n	800ff6e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff5c:	69db      	ldr	r3, [r3, #28]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d005      	beq.n	800ff6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff68:	69db      	ldr	r3, [r3, #28]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ff84:	2300      	movs	r3, #0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ff92:	b480      	push	{r7}
 800ff94:	b083      	sub	sp, #12
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	370c      	adds	r7, #12
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr

0800ffc2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b082      	sub	sp, #8
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	6852      	ldr	r2, [r2, #4]
 800ffde:	b2d2      	uxtb	r2, r2
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	4798      	blx	r3

  return USBD_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010006:	2b20      	cmp	r3, #32
 8010008:	d004      	beq.n	8010014 <USBD_StdDevReq+0x24>
 801000a:	2b40      	cmp	r3, #64	; 0x40
 801000c:	d002      	beq.n	8010014 <USBD_StdDevReq+0x24>
 801000e:	2b00      	cmp	r3, #0
 8010010:	d008      	beq.n	8010024 <USBD_StdDevReq+0x34>
 8010012:	e04c      	b.n	80100ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	4798      	blx	r3
      break;
 8010022:	e049      	b.n	80100b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	785b      	ldrb	r3, [r3, #1]
 8010028:	2b09      	cmp	r3, #9
 801002a:	d83a      	bhi.n	80100a2 <USBD_StdDevReq+0xb2>
 801002c:	a201      	add	r2, pc, #4	; (adr r2, 8010034 <USBD_StdDevReq+0x44>)
 801002e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010032:	bf00      	nop
 8010034:	08010085 	.word	0x08010085
 8010038:	08010099 	.word	0x08010099
 801003c:	080100a3 	.word	0x080100a3
 8010040:	0801008f 	.word	0x0801008f
 8010044:	080100a3 	.word	0x080100a3
 8010048:	08010067 	.word	0x08010067
 801004c:	0801005d 	.word	0x0801005d
 8010050:	080100a3 	.word	0x080100a3
 8010054:	0801007b 	.word	0x0801007b
 8010058:	08010071 	.word	0x08010071
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801005c:	6839      	ldr	r1, [r7, #0]
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f9d4 	bl	801040c <USBD_GetDescriptor>
          break;
 8010064:	e022      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fb61 	bl	8010730 <USBD_SetAddress>
          break;
 801006e:	e01d      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fb9e 	bl	80107b4 <USBD_SetConfig>
          break;
 8010078:	e018      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fc27 	bl	80108d0 <USBD_GetConfig>
          break;
 8010082:	e013      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010084:	6839      	ldr	r1, [r7, #0]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 fc56 	bl	8010938 <USBD_GetStatus>
          break;
 801008c:	e00e      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801008e:	6839      	ldr	r1, [r7, #0]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 fc84 	bl	801099e <USBD_SetFeature>
          break;
 8010096:	e009      	b.n	80100ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fc93 	bl	80109c6 <USBD_ClrFeature>
          break;
 80100a0:	e004      	b.n	80100ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 fcec 	bl	8010a82 <USBD_CtlError>
          break;
 80100aa:	bf00      	nop
      }
      break;
 80100ac:	e004      	b.n	80100b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fce6 	bl	8010a82 <USBD_CtlError>
      break;
 80100b6:	bf00      	nop
  }

  return ret;
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop

080100c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100da:	2b20      	cmp	r3, #32
 80100dc:	d003      	beq.n	80100e6 <USBD_StdItfReq+0x22>
 80100de:	2b40      	cmp	r3, #64	; 0x40
 80100e0:	d001      	beq.n	80100e6 <USBD_StdItfReq+0x22>
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d12a      	bne.n	801013c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100ec:	3b01      	subs	r3, #1
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d81d      	bhi.n	801012e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	889b      	ldrh	r3, [r3, #4]
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d813      	bhi.n	8010124 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	6839      	ldr	r1, [r7, #0]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	4798      	blx	r3
 801010a:	4603      	mov	r3, r0
 801010c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	88db      	ldrh	r3, [r3, #6]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d110      	bne.n	8010138 <USBD_StdItfReq+0x74>
 8010116:	7bfb      	ldrb	r3, [r7, #15]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d10d      	bne.n	8010138 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 fd79 	bl	8010c14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010122:	e009      	b.n	8010138 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fcab 	bl	8010a82 <USBD_CtlError>
          break;
 801012c:	e004      	b.n	8010138 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801012e:	6839      	ldr	r1, [r7, #0]
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 fca6 	bl	8010a82 <USBD_CtlError>
          break;
 8010136:	e000      	b.n	801013a <USBD_StdItfReq+0x76>
          break;
 8010138:	bf00      	nop
      }
      break;
 801013a:	e004      	b.n	8010146 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fc9f 	bl	8010a82 <USBD_CtlError>
      break;
 8010144:	bf00      	nop
  }

  return USBD_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	889b      	ldrh	r3, [r3, #4]
 8010162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801016c:	2b20      	cmp	r3, #32
 801016e:	d004      	beq.n	801017a <USBD_StdEPReq+0x2a>
 8010170:	2b40      	cmp	r3, #64	; 0x40
 8010172:	d002      	beq.n	801017a <USBD_StdEPReq+0x2a>
 8010174:	2b00      	cmp	r3, #0
 8010176:	d008      	beq.n	801018a <USBD_StdEPReq+0x3a>
 8010178:	e13d      	b.n	80103f6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	4798      	blx	r3
      break;
 8010188:	e13a      	b.n	8010400 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010192:	2b20      	cmp	r3, #32
 8010194:	d10a      	bne.n	80101ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	4798      	blx	r3
 80101a4:	4603      	mov	r3, r0
 80101a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
 80101aa:	e12a      	b.n	8010402 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	785b      	ldrb	r3, [r3, #1]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d03e      	beq.n	8010232 <USBD_StdEPReq+0xe2>
 80101b4:	2b03      	cmp	r3, #3
 80101b6:	d002      	beq.n	80101be <USBD_StdEPReq+0x6e>
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d070      	beq.n	801029e <USBD_StdEPReq+0x14e>
 80101bc:	e115      	b.n	80103ea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d002      	beq.n	80101ce <USBD_StdEPReq+0x7e>
 80101c8:	2b03      	cmp	r3, #3
 80101ca:	d015      	beq.n	80101f8 <USBD_StdEPReq+0xa8>
 80101cc:	e02b      	b.n	8010226 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101ce:	7bbb      	ldrb	r3, [r7, #14]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00c      	beq.n	80101ee <USBD_StdEPReq+0x9e>
 80101d4:	7bbb      	ldrb	r3, [r7, #14]
 80101d6:	2b80      	cmp	r3, #128	; 0x80
 80101d8:	d009      	beq.n	80101ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80101da:	7bbb      	ldrb	r3, [r7, #14]
 80101dc:	4619      	mov	r1, r3
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f004 fabc 	bl	801475c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80101e4:	2180      	movs	r1, #128	; 0x80
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f004 fab8 	bl	801475c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80101ec:	e020      	b.n	8010230 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 fc46 	bl	8010a82 <USBD_CtlError>
              break;
 80101f6:	e01b      	b.n	8010230 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	885b      	ldrh	r3, [r3, #2]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10e      	bne.n	801021e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8010200:	7bbb      	ldrb	r3, [r7, #14]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00b      	beq.n	801021e <USBD_StdEPReq+0xce>
 8010206:	7bbb      	ldrb	r3, [r7, #14]
 8010208:	2b80      	cmp	r3, #128	; 0x80
 801020a:	d008      	beq.n	801021e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	88db      	ldrh	r3, [r3, #6]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d104      	bne.n	801021e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8010214:	7bbb      	ldrb	r3, [r7, #14]
 8010216:	4619      	mov	r1, r3
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f004 fa9f 	bl	801475c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 fcf8 	bl	8010c14 <USBD_CtlSendStatus>

              break;
 8010224:	e004      	b.n	8010230 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fc2a 	bl	8010a82 <USBD_CtlError>
              break;
 801022e:	bf00      	nop
          }
          break;
 8010230:	e0e0      	b.n	80103f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010238:	2b02      	cmp	r3, #2
 801023a:	d002      	beq.n	8010242 <USBD_StdEPReq+0xf2>
 801023c:	2b03      	cmp	r3, #3
 801023e:	d015      	beq.n	801026c <USBD_StdEPReq+0x11c>
 8010240:	e026      	b.n	8010290 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010242:	7bbb      	ldrb	r3, [r7, #14]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00c      	beq.n	8010262 <USBD_StdEPReq+0x112>
 8010248:	7bbb      	ldrb	r3, [r7, #14]
 801024a:	2b80      	cmp	r3, #128	; 0x80
 801024c:	d009      	beq.n	8010262 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801024e:	7bbb      	ldrb	r3, [r7, #14]
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f004 fa82 	bl	801475c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8010258:	2180      	movs	r1, #128	; 0x80
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f004 fa7e 	bl	801475c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010260:	e01c      	b.n	801029c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8010262:	6839      	ldr	r1, [r7, #0]
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 fc0c 	bl	8010a82 <USBD_CtlError>
              break;
 801026a:	e017      	b.n	801029c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	885b      	ldrh	r3, [r3, #2]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d112      	bne.n	801029a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010274:	7bbb      	ldrb	r3, [r7, #14]
 8010276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801027a:	2b00      	cmp	r3, #0
 801027c:	d004      	beq.n	8010288 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801027e:	7bbb      	ldrb	r3, [r7, #14]
 8010280:	4619      	mov	r1, r3
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f004 faa0 	bl	80147c8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fcc3 	bl	8010c14 <USBD_CtlSendStatus>
              }
              break;
 801028e:	e004      	b.n	801029a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8010290:	6839      	ldr	r1, [r7, #0]
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 fbf5 	bl	8010a82 <USBD_CtlError>
              break;
 8010298:	e000      	b.n	801029c <USBD_StdEPReq+0x14c>
              break;
 801029a:	bf00      	nop
          }
          break;
 801029c:	e0aa      	b.n	80103f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d002      	beq.n	80102ae <USBD_StdEPReq+0x15e>
 80102a8:	2b03      	cmp	r3, #3
 80102aa:	d032      	beq.n	8010312 <USBD_StdEPReq+0x1c2>
 80102ac:	e097      	b.n	80103de <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102ae:	7bbb      	ldrb	r3, [r7, #14]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d007      	beq.n	80102c4 <USBD_StdEPReq+0x174>
 80102b4:	7bbb      	ldrb	r3, [r7, #14]
 80102b6:	2b80      	cmp	r3, #128	; 0x80
 80102b8:	d004      	beq.n	80102c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fbe0 	bl	8010a82 <USBD_CtlError>
                break;
 80102c2:	e091      	b.n	80103e8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	da0b      	bge.n	80102e4 <USBD_StdEPReq+0x194>
 80102cc:	7bbb      	ldrb	r3, [r7, #14]
 80102ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102d2:	4613      	mov	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	3310      	adds	r3, #16
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	4413      	add	r3, r2
 80102e0:	3304      	adds	r3, #4
 80102e2:	e00b      	b.n	80102fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80102e4:	7bbb      	ldrb	r3, [r7, #14]
 80102e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102ea:	4613      	mov	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	4413      	add	r3, r2
 80102fa:	3304      	adds	r3, #4
 80102fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	2200      	movs	r2, #0
 8010302:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	2202      	movs	r2, #2
 8010308:	4619      	mov	r1, r3
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 fc24 	bl	8010b58 <USBD_CtlSendData>
              break;
 8010310:	e06a      	b.n	80103e8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010316:	2b00      	cmp	r3, #0
 8010318:	da11      	bge.n	801033e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801031a:	7bbb      	ldrb	r3, [r7, #14]
 801031c:	f003 020f 	and.w	r2, r3, #15
 8010320:	6879      	ldr	r1, [r7, #4]
 8010322:	4613      	mov	r3, r2
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4413      	add	r3, r2
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	440b      	add	r3, r1
 801032c:	3318      	adds	r3, #24
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d117      	bne.n	8010364 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8010334:	6839      	ldr	r1, [r7, #0]
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fba3 	bl	8010a82 <USBD_CtlError>
                  break;
 801033c:	e054      	b.n	80103e8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801033e:	7bbb      	ldrb	r3, [r7, #14]
 8010340:	f003 020f 	and.w	r2, r3, #15
 8010344:	6879      	ldr	r1, [r7, #4]
 8010346:	4613      	mov	r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	4413      	add	r3, r2
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	440b      	add	r3, r1
 8010350:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d104      	bne.n	8010364 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 fb90 	bl	8010a82 <USBD_CtlError>
                  break;
 8010362:	e041      	b.n	80103e8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010368:	2b00      	cmp	r3, #0
 801036a:	da0b      	bge.n	8010384 <USBD_StdEPReq+0x234>
 801036c:	7bbb      	ldrb	r3, [r7, #14]
 801036e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010372:	4613      	mov	r3, r2
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	4413      	add	r3, r2
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	3310      	adds	r3, #16
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	4413      	add	r3, r2
 8010380:	3304      	adds	r3, #4
 8010382:	e00b      	b.n	801039c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010384:	7bbb      	ldrb	r3, [r7, #14]
 8010386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	4413      	add	r3, r2
 801039a:	3304      	adds	r3, #4
 801039c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801039e:	7bbb      	ldrb	r3, [r7, #14]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <USBD_StdEPReq+0x25a>
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	2b80      	cmp	r3, #128	; 0x80
 80103a8:	d103      	bne.n	80103b2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	2200      	movs	r2, #0
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	e00e      	b.n	80103d0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80103b2:	7bbb      	ldrb	r3, [r7, #14]
 80103b4:	4619      	mov	r1, r3
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f004 fa3c 	bl	8014834 <USBD_LL_IsStallEP>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2201      	movs	r2, #1
 80103c6:	601a      	str	r2, [r3, #0]
 80103c8:	e002      	b.n	80103d0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2202      	movs	r2, #2
 80103d4:	4619      	mov	r1, r3
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fbbe 	bl	8010b58 <USBD_CtlSendData>
              break;
 80103dc:	e004      	b.n	80103e8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80103de:	6839      	ldr	r1, [r7, #0]
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 fb4e 	bl	8010a82 <USBD_CtlError>
              break;
 80103e6:	bf00      	nop
          }
          break;
 80103e8:	e004      	b.n	80103f4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f000 fb48 	bl	8010a82 <USBD_CtlError>
          break;
 80103f2:	bf00      	nop
      }
      break;
 80103f4:	e004      	b.n	8010400 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fb42 	bl	8010a82 <USBD_CtlError>
      break;
 80103fe:	bf00      	nop
  }

  return ret;
 8010400:	7bfb      	ldrb	r3, [r7, #15]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010416:	2300      	movs	r3, #0
 8010418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	885b      	ldrh	r3, [r3, #2]
 8010426:	0a1b      	lsrs	r3, r3, #8
 8010428:	b29b      	uxth	r3, r3
 801042a:	3b01      	subs	r3, #1
 801042c:	2b0e      	cmp	r3, #14
 801042e:	f200 8152 	bhi.w	80106d6 <USBD_GetDescriptor+0x2ca>
 8010432:	a201      	add	r2, pc, #4	; (adr r2, 8010438 <USBD_GetDescriptor+0x2c>)
 8010434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010438:	080104a9 	.word	0x080104a9
 801043c:	080104c1 	.word	0x080104c1
 8010440:	08010501 	.word	0x08010501
 8010444:	080106d7 	.word	0x080106d7
 8010448:	080106d7 	.word	0x080106d7
 801044c:	08010677 	.word	0x08010677
 8010450:	080106a3 	.word	0x080106a3
 8010454:	080106d7 	.word	0x080106d7
 8010458:	080106d7 	.word	0x080106d7
 801045c:	080106d7 	.word	0x080106d7
 8010460:	080106d7 	.word	0x080106d7
 8010464:	080106d7 	.word	0x080106d7
 8010468:	080106d7 	.word	0x080106d7
 801046c:	080106d7 	.word	0x080106d7
 8010470:	08010475 	.word	0x08010475
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801047a:	69db      	ldr	r3, [r3, #28]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00b      	beq.n	8010498 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010486:	69db      	ldr	r3, [r3, #28]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	7c12      	ldrb	r2, [r2, #16]
 801048c:	f107 0108 	add.w	r1, r7, #8
 8010490:	4610      	mov	r0, r2
 8010492:	4798      	blx	r3
 8010494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010496:	e126      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 faf1 	bl	8010a82 <USBD_CtlError>
        err++;
 80104a0:	7afb      	ldrb	r3, [r7, #11]
 80104a2:	3301      	adds	r3, #1
 80104a4:	72fb      	strb	r3, [r7, #11]
      break;
 80104a6:	e11e      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	7c12      	ldrb	r2, [r2, #16]
 80104b4:	f107 0108 	add.w	r1, r7, #8
 80104b8:	4610      	mov	r0, r2
 80104ba:	4798      	blx	r3
 80104bc:	60f8      	str	r0, [r7, #12]
      break;
 80104be:	e112      	b.n	80106e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	7c1b      	ldrb	r3, [r3, #16]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10d      	bne.n	80104e4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d0:	f107 0208 	add.w	r2, r7, #8
 80104d4:	4610      	mov	r0, r2
 80104d6:	4798      	blx	r3
 80104d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3301      	adds	r3, #1
 80104de:	2202      	movs	r2, #2
 80104e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80104e2:	e100      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ec:	f107 0208 	add.w	r2, r7, #8
 80104f0:	4610      	mov	r0, r2
 80104f2:	4798      	blx	r3
 80104f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3301      	adds	r3, #1
 80104fa:	2202      	movs	r2, #2
 80104fc:	701a      	strb	r2, [r3, #0]
      break;
 80104fe:	e0f2      	b.n	80106e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	885b      	ldrh	r3, [r3, #2]
 8010504:	b2db      	uxtb	r3, r3
 8010506:	2b05      	cmp	r3, #5
 8010508:	f200 80ac 	bhi.w	8010664 <USBD_GetDescriptor+0x258>
 801050c:	a201      	add	r2, pc, #4	; (adr r2, 8010514 <USBD_GetDescriptor+0x108>)
 801050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010512:	bf00      	nop
 8010514:	0801052d 	.word	0x0801052d
 8010518:	08010561 	.word	0x08010561
 801051c:	08010595 	.word	0x08010595
 8010520:	080105c9 	.word	0x080105c9
 8010524:	080105fd 	.word	0x080105fd
 8010528:	08010631 	.word	0x08010631
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00b      	beq.n	8010550 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	7c12      	ldrb	r2, [r2, #16]
 8010544:	f107 0108 	add.w	r1, r7, #8
 8010548:	4610      	mov	r0, r2
 801054a:	4798      	blx	r3
 801054c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801054e:	e091      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010550:	6839      	ldr	r1, [r7, #0]
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 fa95 	bl	8010a82 <USBD_CtlError>
            err++;
 8010558:	7afb      	ldrb	r3, [r7, #11]
 801055a:	3301      	adds	r3, #1
 801055c:	72fb      	strb	r3, [r7, #11]
          break;
 801055e:	e089      	b.n	8010674 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00b      	beq.n	8010584 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	7c12      	ldrb	r2, [r2, #16]
 8010578:	f107 0108 	add.w	r1, r7, #8
 801057c:	4610      	mov	r0, r2
 801057e:	4798      	blx	r3
 8010580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010582:	e077      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 fa7b 	bl	8010a82 <USBD_CtlError>
            err++;
 801058c:	7afb      	ldrb	r3, [r7, #11]
 801058e:	3301      	adds	r3, #1
 8010590:	72fb      	strb	r3, [r7, #11]
          break;
 8010592:	e06f      	b.n	8010674 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00b      	beq.n	80105b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	7c12      	ldrb	r2, [r2, #16]
 80105ac:	f107 0108 	add.w	r1, r7, #8
 80105b0:	4610      	mov	r0, r2
 80105b2:	4798      	blx	r3
 80105b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105b6:	e05d      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fa61 	bl	8010a82 <USBD_CtlError>
            err++;
 80105c0:	7afb      	ldrb	r3, [r7, #11]
 80105c2:	3301      	adds	r3, #1
 80105c4:	72fb      	strb	r3, [r7, #11]
          break;
 80105c6:	e055      	b.n	8010674 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d00b      	beq.n	80105ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	7c12      	ldrb	r2, [r2, #16]
 80105e0:	f107 0108 	add.w	r1, r7, #8
 80105e4:	4610      	mov	r0, r2
 80105e6:	4798      	blx	r3
 80105e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80105ea:	e043      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105ec:	6839      	ldr	r1, [r7, #0]
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 fa47 	bl	8010a82 <USBD_CtlError>
            err++;
 80105f4:	7afb      	ldrb	r3, [r7, #11]
 80105f6:	3301      	adds	r3, #1
 80105f8:	72fb      	strb	r3, [r7, #11]
          break;
 80105fa:	e03b      	b.n	8010674 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d00b      	beq.n	8010620 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	7c12      	ldrb	r2, [r2, #16]
 8010614:	f107 0108 	add.w	r1, r7, #8
 8010618:	4610      	mov	r0, r2
 801061a:	4798      	blx	r3
 801061c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801061e:	e029      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010620:	6839      	ldr	r1, [r7, #0]
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 fa2d 	bl	8010a82 <USBD_CtlError>
            err++;
 8010628:	7afb      	ldrb	r3, [r7, #11]
 801062a:	3301      	adds	r3, #1
 801062c:	72fb      	strb	r3, [r7, #11]
          break;
 801062e:	e021      	b.n	8010674 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00b      	beq.n	8010654 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	7c12      	ldrb	r2, [r2, #16]
 8010648:	f107 0108 	add.w	r1, r7, #8
 801064c:	4610      	mov	r0, r2
 801064e:	4798      	blx	r3
 8010650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010652:	e00f      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010654:	6839      	ldr	r1, [r7, #0]
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 fa13 	bl	8010a82 <USBD_CtlError>
            err++;
 801065c:	7afb      	ldrb	r3, [r7, #11]
 801065e:	3301      	adds	r3, #1
 8010660:	72fb      	strb	r3, [r7, #11]
          break;
 8010662:	e007      	b.n	8010674 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8010664:	6839      	ldr	r1, [r7, #0]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fa0b 	bl	8010a82 <USBD_CtlError>
          err++;
 801066c:	7afb      	ldrb	r3, [r7, #11]
 801066e:	3301      	adds	r3, #1
 8010670:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8010672:	e038      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
 8010674:	e037      	b.n	80106e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7c1b      	ldrb	r3, [r3, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d109      	bne.n	8010692 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010686:	f107 0208 	add.w	r2, r7, #8
 801068a:	4610      	mov	r0, r2
 801068c:	4798      	blx	r3
 801068e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010690:	e029      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 f9f4 	bl	8010a82 <USBD_CtlError>
        err++;
 801069a:	7afb      	ldrb	r3, [r7, #11]
 801069c:	3301      	adds	r3, #1
 801069e:	72fb      	strb	r3, [r7, #11]
      break;
 80106a0:	e021      	b.n	80106e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7c1b      	ldrb	r3, [r3, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d10d      	bne.n	80106c6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106b2:	f107 0208 	add.w	r2, r7, #8
 80106b6:	4610      	mov	r0, r2
 80106b8:	4798      	blx	r3
 80106ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	3301      	adds	r3, #1
 80106c0:	2207      	movs	r2, #7
 80106c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106c4:	e00f      	b.n	80106e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80106c6:	6839      	ldr	r1, [r7, #0]
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 f9da 	bl	8010a82 <USBD_CtlError>
        err++;
 80106ce:	7afb      	ldrb	r3, [r7, #11]
 80106d0:	3301      	adds	r3, #1
 80106d2:	72fb      	strb	r3, [r7, #11]
      break;
 80106d4:	e007      	b.n	80106e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 f9d2 	bl	8010a82 <USBD_CtlError>
      err++;
 80106de:	7afb      	ldrb	r3, [r7, #11]
 80106e0:	3301      	adds	r3, #1
 80106e2:	72fb      	strb	r3, [r7, #11]
      break;
 80106e4:	bf00      	nop
  }

  if (err != 0U)
 80106e6:	7afb      	ldrb	r3, [r7, #11]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d11c      	bne.n	8010726 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80106ec:	893b      	ldrh	r3, [r7, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d011      	beq.n	8010716 <USBD_GetDescriptor+0x30a>
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	88db      	ldrh	r3, [r3, #6]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00d      	beq.n	8010716 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	88da      	ldrh	r2, [r3, #6]
 80106fe:	893b      	ldrh	r3, [r7, #8]
 8010700:	4293      	cmp	r3, r2
 8010702:	bf28      	it	cs
 8010704:	4613      	movcs	r3, r2
 8010706:	b29b      	uxth	r3, r3
 8010708:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801070a:	893b      	ldrh	r3, [r7, #8]
 801070c:	461a      	mov	r2, r3
 801070e:	68f9      	ldr	r1, [r7, #12]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 fa21 	bl	8010b58 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	88db      	ldrh	r3, [r3, #6]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d104      	bne.n	8010728 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fa78 	bl	8010c14 <USBD_CtlSendStatus>
 8010724:	e000      	b.n	8010728 <USBD_GetDescriptor+0x31c>
    return;
 8010726:	bf00      	nop
    }
  }
}
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop

08010730 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	889b      	ldrh	r3, [r3, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d130      	bne.n	80107a4 <USBD_SetAddress+0x74>
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	88db      	ldrh	r3, [r3, #6]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d12c      	bne.n	80107a4 <USBD_SetAddress+0x74>
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	885b      	ldrh	r3, [r3, #2]
 801074e:	2b7f      	cmp	r3, #127	; 0x7f
 8010750:	d828      	bhi.n	80107a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	885b      	ldrh	r3, [r3, #2]
 8010756:	b2db      	uxtb	r3, r3
 8010758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801075c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010764:	2b03      	cmp	r3, #3
 8010766:	d104      	bne.n	8010772 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010768:	6839      	ldr	r1, [r7, #0]
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 f989 	bl	8010a82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010770:	e01c      	b.n	80107ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	7bfa      	ldrb	r2, [r7, #15]
 8010776:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801077a:	7bfb      	ldrb	r3, [r7, #15]
 801077c:	4619      	mov	r1, r3
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f004 f884 	bl	801488c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fa45 	bl	8010c14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801078a:	7bfb      	ldrb	r3, [r7, #15]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d004      	beq.n	801079a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2202      	movs	r2, #2
 8010794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010798:	e008      	b.n	80107ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2201      	movs	r2, #1
 801079e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107a2:	e003      	b.n	80107ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80107a4:	6839      	ldr	r1, [r7, #0]
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f96b 	bl	8010a82 <USBD_CtlError>
  }
}
 80107ac:	bf00      	nop
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	885b      	ldrh	r3, [r3, #2]
 80107c2:	b2da      	uxtb	r2, r3
 80107c4:	4b41      	ldr	r3, [pc, #260]	; (80108cc <USBD_SetConfig+0x118>)
 80107c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80107c8:	4b40      	ldr	r3, [pc, #256]	; (80108cc <USBD_SetConfig+0x118>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d904      	bls.n	80107da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 f955 	bl	8010a82 <USBD_CtlError>
 80107d8:	e075      	b.n	80108c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107e0:	2b02      	cmp	r3, #2
 80107e2:	d002      	beq.n	80107ea <USBD_SetConfig+0x36>
 80107e4:	2b03      	cmp	r3, #3
 80107e6:	d023      	beq.n	8010830 <USBD_SetConfig+0x7c>
 80107e8:	e062      	b.n	80108b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80107ea:	4b38      	ldr	r3, [pc, #224]	; (80108cc <USBD_SetConfig+0x118>)
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d01a      	beq.n	8010828 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80107f2:	4b36      	ldr	r3, [pc, #216]	; (80108cc <USBD_SetConfig+0x118>)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	461a      	mov	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2203      	movs	r2, #3
 8010800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010804:	4b31      	ldr	r3, [pc, #196]	; (80108cc <USBD_SetConfig+0x118>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff f98b 	bl	800fb26 <USBD_SetClassConfig>
 8010810:	4603      	mov	r3, r0
 8010812:	2b02      	cmp	r3, #2
 8010814:	d104      	bne.n	8010820 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 f932 	bl	8010a82 <USBD_CtlError>
            return;
 801081e:	e052      	b.n	80108c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 f9f7 	bl	8010c14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010826:	e04e      	b.n	80108c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 f9f3 	bl	8010c14 <USBD_CtlSendStatus>
        break;
 801082e:	e04a      	b.n	80108c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8010830:	4b26      	ldr	r3, [pc, #152]	; (80108cc <USBD_SetConfig+0x118>)
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d112      	bne.n	801085e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2202      	movs	r2, #2
 801083c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010840:	4b22      	ldr	r3, [pc, #136]	; (80108cc <USBD_SetConfig+0x118>)
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	461a      	mov	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801084a:	4b20      	ldr	r3, [pc, #128]	; (80108cc <USBD_SetConfig+0x118>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	4619      	mov	r1, r3
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff f987 	bl	800fb64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 f9dc 	bl	8010c14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801085c:	e033      	b.n	80108c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801085e:	4b1b      	ldr	r3, [pc, #108]	; (80108cc <USBD_SetConfig+0x118>)
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	461a      	mov	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	429a      	cmp	r2, r3
 801086a:	d01d      	beq.n	80108a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	b2db      	uxtb	r3, r3
 8010872:	4619      	mov	r1, r3
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f7ff f975 	bl	800fb64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801087a:	4b14      	ldr	r3, [pc, #80]	; (80108cc <USBD_SetConfig+0x118>)
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010884:	4b11      	ldr	r3, [pc, #68]	; (80108cc <USBD_SetConfig+0x118>)
 8010886:	781b      	ldrb	r3, [r3, #0]
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff f94b 	bl	800fb26 <USBD_SetClassConfig>
 8010890:	4603      	mov	r3, r0
 8010892:	2b02      	cmp	r3, #2
 8010894:	d104      	bne.n	80108a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8010896:	6839      	ldr	r1, [r7, #0]
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 f8f2 	bl	8010a82 <USBD_CtlError>
            return;
 801089e:	e012      	b.n	80108c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f9b7 	bl	8010c14 <USBD_CtlSendStatus>
        break;
 80108a6:	e00e      	b.n	80108c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 f9b3 	bl	8010c14 <USBD_CtlSendStatus>
        break;
 80108ae:	e00a      	b.n	80108c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80108b0:	6839      	ldr	r1, [r7, #0]
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 f8e5 	bl	8010a82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80108b8:	4b04      	ldr	r3, [pc, #16]	; (80108cc <USBD_SetConfig+0x118>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	4619      	mov	r1, r3
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f7ff f950 	bl	800fb64 <USBD_ClrClassConfig>
        break;
 80108c4:	bf00      	nop
    }
  }
}
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20000480 	.word	0x20000480

080108d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	88db      	ldrh	r3, [r3, #6]
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d004      	beq.n	80108ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 f8cc 	bl	8010a82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80108ea:	e021      	b.n	8010930 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	db17      	blt.n	8010926 <USBD_GetConfig+0x56>
 80108f6:	2b02      	cmp	r3, #2
 80108f8:	dd02      	ble.n	8010900 <USBD_GetConfig+0x30>
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d00b      	beq.n	8010916 <USBD_GetConfig+0x46>
 80108fe:	e012      	b.n	8010926 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	3308      	adds	r3, #8
 801090a:	2201      	movs	r2, #1
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f922 	bl	8010b58 <USBD_CtlSendData>
        break;
 8010914:	e00c      	b.n	8010930 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	3304      	adds	r3, #4
 801091a:	2201      	movs	r2, #1
 801091c:	4619      	mov	r1, r3
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 f91a 	bl	8010b58 <USBD_CtlSendData>
        break;
 8010924:	e004      	b.n	8010930 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8010926:	6839      	ldr	r1, [r7, #0]
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 f8aa 	bl	8010a82 <USBD_CtlError>
        break;
 801092e:	bf00      	nop
}
 8010930:	bf00      	nop
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010948:	3b01      	subs	r3, #1
 801094a:	2b02      	cmp	r3, #2
 801094c:	d81e      	bhi.n	801098c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	88db      	ldrh	r3, [r3, #6]
 8010952:	2b02      	cmp	r3, #2
 8010954:	d004      	beq.n	8010960 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 f892 	bl	8010a82 <USBD_CtlError>
        break;
 801095e:	e01a      	b.n	8010996 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2201      	movs	r2, #1
 8010964:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801096c:	2b00      	cmp	r3, #0
 801096e:	d005      	beq.n	801097c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	f043 0202 	orr.w	r2, r3, #2
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	330c      	adds	r3, #12
 8010980:	2202      	movs	r2, #2
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 f8e7 	bl	8010b58 <USBD_CtlSendData>
      break;
 801098a:	e004      	b.n	8010996 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801098c:	6839      	ldr	r1, [r7, #0]
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f877 	bl	8010a82 <USBD_CtlError>
      break;
 8010994:	bf00      	nop
  }
}
 8010996:	bf00      	nop
 8010998:	3708      	adds	r7, #8
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b082      	sub	sp, #8
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d106      	bne.n	80109be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2201      	movs	r2, #1
 80109b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f92b 	bl	8010c14 <USBD_CtlSendStatus>
  }
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
 80109ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109d6:	3b01      	subs	r3, #1
 80109d8:	2b02      	cmp	r3, #2
 80109da:	d80b      	bhi.n	80109f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	885b      	ldrh	r3, [r3, #2]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d10c      	bne.n	80109fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f911 	bl	8010c14 <USBD_CtlSendStatus>
      }
      break;
 80109f2:	e004      	b.n	80109fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80109f4:	6839      	ldr	r1, [r7, #0]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f843 	bl	8010a82 <USBD_CtlError>
      break;
 80109fc:	e000      	b.n	8010a00 <USBD_ClrFeature+0x3a>
      break;
 80109fe:	bf00      	nop
  }
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	781a      	ldrb	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	785a      	ldrb	r2, [r3, #1]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	3302      	adds	r3, #2
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	3303      	adds	r3, #3
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	021b      	lsls	r3, r3, #8
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4413      	add	r3, r2
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	3304      	adds	r3, #4
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	3305      	adds	r3, #5
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	021b      	lsls	r3, r3, #8
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	4413      	add	r3, r2
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	3306      	adds	r3, #6
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	3307      	adds	r3, #7
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	021b      	lsls	r3, r3, #8
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	4413      	add	r3, r2
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	80da      	strh	r2, [r3, #6]

}
 8010a76:	bf00      	nop
 8010a78:	370c      	adds	r7, #12
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b082      	sub	sp, #8
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010a8c:	2180      	movs	r1, #128	; 0x80
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f003 fe64 	bl	801475c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010a94:	2100      	movs	r1, #0
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f003 fe60 	bl	801475c <USBD_LL_StallEP>
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d032      	beq.n	8010b20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f000 f834 	bl	8010b28 <USBD_GetLen>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	1c5a      	adds	r2, r3, #1
 8010ad2:	75fa      	strb	r2, [r7, #23]
 8010ad4:	461a      	mov	r2, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	4413      	add	r3, r2
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	7812      	ldrb	r2, [r2, #0]
 8010ade:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	75fa      	strb	r2, [r7, #23]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	4413      	add	r3, r2
 8010aec:	2203      	movs	r2, #3
 8010aee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010af0:	e012      	b.n	8010b18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	1c5a      	adds	r2, r3, #1
 8010af6:	60fa      	str	r2, [r7, #12]
 8010af8:	7dfa      	ldrb	r2, [r7, #23]
 8010afa:	1c51      	adds	r1, r2, #1
 8010afc:	75f9      	strb	r1, [r7, #23]
 8010afe:	4611      	mov	r1, r2
 8010b00:	68ba      	ldr	r2, [r7, #8]
 8010b02:	440a      	add	r2, r1
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010b08:	7dfb      	ldrb	r3, [r7, #23]
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	75fa      	strb	r2, [r7, #23]
 8010b0e:	461a      	mov	r2, r3
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	4413      	add	r3, r2
 8010b14:	2200      	movs	r2, #0
 8010b16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d1e8      	bne.n	8010af2 <USBD_GetString+0x4e>
    }
  }
}
 8010b20:	bf00      	nop
 8010b22:	3718      	adds	r7, #24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010b30:	2300      	movs	r3, #0
 8010b32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8010b34:	e005      	b.n	8010b42 <USBD_GetLen+0x1a>
  {
    len++;
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d1f5      	bne.n	8010b36 <USBD_GetLen+0xe>
  }

  return len;
 8010b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3714      	adds	r7, #20
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	4613      	mov	r3, r2
 8010b64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2202      	movs	r2, #2
 8010b6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010b6e:	88fa      	ldrh	r2, [r7, #6]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010b74:	88fa      	ldrh	r2, [r7, #6]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b7a:	88fb      	ldrh	r3, [r7, #6]
 8010b7c:	68ba      	ldr	r2, [r7, #8]
 8010b7e:	2100      	movs	r1, #0
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f003 feb9 	bl	80148f8 <USBD_LL_Transmit>

  return USBD_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b9e:	88fb      	ldrh	r3, [r7, #6]
 8010ba0:	68ba      	ldr	r2, [r7, #8]
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	68f8      	ldr	r0, [r7, #12]
 8010ba6:	f003 fea7 	bl	80148f8 <USBD_LL_Transmit>

  return USBD_OK;
 8010baa:	2300      	movs	r3, #0
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2203      	movs	r2, #3
 8010bc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010bca:	88fa      	ldrh	r2, [r7, #6]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8010bd2:	88fa      	ldrh	r2, [r7, #6]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010bda:	88fb      	ldrh	r3, [r7, #6]
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	2100      	movs	r1, #0
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f003 fec3 	bl	801496c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3710      	adds	r7, #16
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010bfe:	88fb      	ldrh	r3, [r7, #6]
 8010c00:	68ba      	ldr	r2, [r7, #8]
 8010c02:	2100      	movs	r1, #0
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f003 feb1 	bl	801496c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2204      	movs	r2, #4
 8010c20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010c24:	2300      	movs	r3, #0
 8010c26:	2200      	movs	r2, #0
 8010c28:	2100      	movs	r1, #0
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f003 fe64 	bl	80148f8 <USBD_LL_Transmit>

  return USBD_OK;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3708      	adds	r7, #8
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b082      	sub	sp, #8
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2205      	movs	r2, #5
 8010c46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	2100      	movs	r1, #0
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f003 fe8b 	bl	801496c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010c56:	2300      	movs	r3, #0
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3708      	adds	r7, #8
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010c60:	b480      	push	{r7}
 8010c62:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010c64:	bf00      	nop
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
	...

08010c70 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c76:	f3ef 8305 	mrs	r3, IPSR
 8010c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10f      	bne.n	8010ca2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c82:	f3ef 8310 	mrs	r3, PRIMASK
 8010c86:	607b      	str	r3, [r7, #4]
  return(result);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d105      	bne.n	8010c9a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8010c92:	603b      	str	r3, [r7, #0]
  return(result);
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d007      	beq.n	8010caa <osKernelInitialize+0x3a>
 8010c9a:	4b0e      	ldr	r3, [pc, #56]	; (8010cd4 <osKernelInitialize+0x64>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	d103      	bne.n	8010caa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010ca2:	f06f 0305 	mvn.w	r3, #5
 8010ca6:	60fb      	str	r3, [r7, #12]
 8010ca8:	e00c      	b.n	8010cc4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010caa:	4b0a      	ldr	r3, [pc, #40]	; (8010cd4 <osKernelInitialize+0x64>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010cb2:	4b08      	ldr	r3, [pc, #32]	; (8010cd4 <osKernelInitialize+0x64>)
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	e002      	b.n	8010cc4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3714      	adds	r7, #20
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	20000484 	.word	0x20000484

08010cd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cde:	f3ef 8305 	mrs	r3, IPSR
 8010ce2:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ce4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d10f      	bne.n	8010d0a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cea:	f3ef 8310 	mrs	r3, PRIMASK
 8010cee:	607b      	str	r3, [r7, #4]
  return(result);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d105      	bne.n	8010d02 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8010cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d007      	beq.n	8010d12 <osKernelStart+0x3a>
 8010d02:	4b0f      	ldr	r3, [pc, #60]	; (8010d40 <osKernelStart+0x68>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b02      	cmp	r3, #2
 8010d08:	d103      	bne.n	8010d12 <osKernelStart+0x3a>
    stat = osErrorISR;
 8010d0a:	f06f 0305 	mvn.w	r3, #5
 8010d0e:	60fb      	str	r3, [r7, #12]
 8010d10:	e010      	b.n	8010d34 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010d12:	4b0b      	ldr	r3, [pc, #44]	; (8010d40 <osKernelStart+0x68>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d109      	bne.n	8010d2e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010d1a:	f7ff ffa1 	bl	8010c60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010d1e:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <osKernelStart+0x68>)
 8010d20:	2202      	movs	r2, #2
 8010d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010d24:	f001 fb78 	bl	8012418 <vTaskStartScheduler>
      stat = osOK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	60fb      	str	r3, [r7, #12]
 8010d2c:	e002      	b.n	8010d34 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010d34:	68fb      	ldr	r3, [r7, #12]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	20000484 	.word	0x20000484

08010d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b090      	sub	sp, #64	; 0x40
 8010d48:	af04      	add	r7, sp, #16
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d54:	f3ef 8305 	mrs	r3, IPSR
 8010d58:	61fb      	str	r3, [r7, #28]
  return(result);
 8010d5a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f040 808f 	bne.w	8010e80 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d62:	f3ef 8310 	mrs	r3, PRIMASK
 8010d66:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d105      	bne.n	8010d7a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8010d72:	617b      	str	r3, [r7, #20]
  return(result);
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d003      	beq.n	8010d82 <osThreadNew+0x3e>
 8010d7a:	4b44      	ldr	r3, [pc, #272]	; (8010e8c <osThreadNew+0x148>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	d07e      	beq.n	8010e80 <osThreadNew+0x13c>
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d07b      	beq.n	8010e80 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010d88:	2380      	movs	r3, #128	; 0x80
 8010d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010d8c:	2318      	movs	r3, #24
 8010d8e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010d90:	2300      	movs	r3, #0
 8010d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d045      	beq.n	8010e2c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <osThreadNew+0x6a>
        name = attr->name;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d002      	beq.n	8010dbc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	699b      	ldr	r3, [r3, #24]
 8010dba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d008      	beq.n	8010dd4 <osThreadNew+0x90>
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	2b38      	cmp	r3, #56	; 0x38
 8010dc6:	d805      	bhi.n	8010dd4 <osThreadNew+0x90>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d001      	beq.n	8010dd8 <osThreadNew+0x94>
        return (NULL);
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e054      	b.n	8010e82 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	695b      	ldr	r3, [r3, #20]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d003      	beq.n	8010de8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	695b      	ldr	r3, [r3, #20]
 8010de4:	089b      	lsrs	r3, r3, #2
 8010de6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	689b      	ldr	r3, [r3, #8]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00e      	beq.n	8010e0e <osThreadNew+0xca>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	2b5b      	cmp	r3, #91	; 0x5b
 8010df6:	d90a      	bls.n	8010e0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d006      	beq.n	8010e0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <osThreadNew+0xca>
        mem = 1;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	623b      	str	r3, [r7, #32]
 8010e0c:	e010      	b.n	8010e30 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d10c      	bne.n	8010e30 <osThreadNew+0xec>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d108      	bne.n	8010e30 <osThreadNew+0xec>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d104      	bne.n	8010e30 <osThreadNew+0xec>
          mem = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	623b      	str	r3, [r7, #32]
 8010e2a:	e001      	b.n	8010e30 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d110      	bne.n	8010e58 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e3e:	9202      	str	r2, [sp, #8]
 8010e40:	9301      	str	r3, [sp, #4]
 8010e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f001 f825 	bl	8011e9c <xTaskCreateStatic>
 8010e52:	4603      	mov	r3, r0
 8010e54:	613b      	str	r3, [r7, #16]
 8010e56:	e013      	b.n	8010e80 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010e58:	6a3b      	ldr	r3, [r7, #32]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d110      	bne.n	8010e80 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	b29a      	uxth	r2, r3
 8010e62:	f107 0310 	add.w	r3, r7, #16
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f001 f86d 	bl	8011f50 <xTaskCreate>
 8010e76:	4603      	mov	r3, r0
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d001      	beq.n	8010e80 <osThreadNew+0x13c>
          hTask = NULL;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e80:	693b      	ldr	r3, [r7, #16]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3730      	adds	r7, #48	; 0x30
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	20000484 	.word	0x20000484

08010e90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e98:	f3ef 8305 	mrs	r3, IPSR
 8010e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8010e9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d10f      	bne.n	8010ec4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8010ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d105      	bne.n	8010ebc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8010eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d007      	beq.n	8010ecc <osDelay+0x3c>
 8010ebc:	4b0a      	ldr	r3, [pc, #40]	; (8010ee8 <osDelay+0x58>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	d103      	bne.n	8010ecc <osDelay+0x3c>
    stat = osErrorISR;
 8010ec4:	f06f 0305 	mvn.w	r3, #5
 8010ec8:	617b      	str	r3, [r7, #20]
 8010eca:	e007      	b.n	8010edc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d002      	beq.n	8010edc <osDelay+0x4c>
      vTaskDelay(ticks);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f001 fa6a 	bl	80123b0 <vTaskDelay>
    }
  }

  return (stat);
 8010edc:	697b      	ldr	r3, [r7, #20]
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3718      	adds	r7, #24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20000484 	.word	0x20000484

08010eec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	4a07      	ldr	r2, [pc, #28]	; (8010f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8010efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	4a06      	ldr	r2, [pc, #24]	; (8010f1c <vApplicationGetIdleTaskMemory+0x30>)
 8010f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2280      	movs	r2, #128	; 0x80
 8010f08:	601a      	str	r2, [r3, #0]
}
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	20000488 	.word	0x20000488
 8010f1c:	200004e4 	.word	0x200004e4

08010f20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	4a07      	ldr	r2, [pc, #28]	; (8010f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8010f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	4a06      	ldr	r2, [pc, #24]	; (8010f50 <vApplicationGetTimerTaskMemory+0x30>)
 8010f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010f3e:	601a      	str	r2, [r3, #0]
}
 8010f40:	bf00      	nop
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	200006e4 	.word	0x200006e4
 8010f50:	20000740 	.word	0x20000740

08010f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f103 0208 	add.w	r2, r3, #8
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f103 0208 	add.w	r2, r3, #8
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f103 0208 	add.w	r2, r3, #8
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010fa2:	bf00      	nop
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b085      	sub	sp, #20
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
 8010fb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	689a      	ldr	r2, [r3, #8]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	683a      	ldr	r2, [r7, #0]
 8010fd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
}
 8010fea:	bf00      	nop
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ff6:	b480      	push	{r7}
 8010ff8:	b085      	sub	sp, #20
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801100c:	d103      	bne.n	8011016 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	691b      	ldr	r3, [r3, #16]
 8011012:	60fb      	str	r3, [r7, #12]
 8011014:	e00c      	b.n	8011030 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	3308      	adds	r3, #8
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	e002      	b.n	8011024 <vListInsert+0x2e>
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	60fb      	str	r3, [r7, #12]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	429a      	cmp	r2, r3
 801102e:	d2f6      	bcs.n	801101e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	601a      	str	r2, [r3, #0]
}
 801105c:	bf00      	nop
 801105e:	3714      	adds	r7, #20
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	691b      	ldr	r3, [r3, #16]
 8011074:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	6892      	ldr	r2, [r2, #8]
 801107e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	689b      	ldr	r3, [r3, #8]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	6852      	ldr	r2, [r2, #4]
 8011088:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	429a      	cmp	r2, r3
 8011092:	d103      	bne.n	801109c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	689a      	ldr	r2, [r3, #8]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	1e5a      	subs	r2, r3, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80110d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	60bb      	str	r3, [r7, #8]
 80110e2:	e7fe      	b.n	80110e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80110e4:	f002 fc12 	bl	801390c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110f0:	68f9      	ldr	r1, [r7, #12]
 80110f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80110f4:	fb01 f303 	mul.w	r3, r1, r3
 80110f8:	441a      	add	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011114:	3b01      	subs	r3, #1
 8011116:	68f9      	ldr	r1, [r7, #12]
 8011118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801111a:	fb01 f303 	mul.w	r3, r1, r3
 801111e:	441a      	add	r2, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	22ff      	movs	r2, #255	; 0xff
 8011128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	22ff      	movs	r2, #255	; 0xff
 8011130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d114      	bne.n	8011164 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	691b      	ldr	r3, [r3, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d01a      	beq.n	8011178 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	3310      	adds	r3, #16
 8011146:	4618      	mov	r0, r3
 8011148:	f001 fbe6 	bl	8012918 <xTaskRemoveFromEventList>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d012      	beq.n	8011178 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011152:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <xQueueGenericReset+0xcc>)
 8011154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011158:	601a      	str	r2, [r3, #0]
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	e009      	b.n	8011178 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	3310      	adds	r3, #16
 8011168:	4618      	mov	r0, r3
 801116a:	f7ff fef3 	bl	8010f54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3324      	adds	r3, #36	; 0x24
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff feee 	bl	8010f54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011178:	f002 fbf6 	bl	8013968 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801117c:	2301      	movs	r3, #1
}
 801117e:	4618      	mov	r0, r3
 8011180:	3710      	adds	r7, #16
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	e000ed04 	.word	0xe000ed04

0801118c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08e      	sub	sp, #56	; 0x38
 8011190:	af02      	add	r7, sp, #8
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	60b9      	str	r1, [r7, #8]
 8011196:	607a      	str	r2, [r7, #4]
 8011198:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d109      	bne.n	80111b4 <xQueueGenericCreateStatic+0x28>
 80111a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a4:	f383 8811 	msr	BASEPRI, r3
 80111a8:	f3bf 8f6f 	isb	sy
 80111ac:	f3bf 8f4f 	dsb	sy
 80111b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80111b2:	e7fe      	b.n	80111b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d109      	bne.n	80111ce <xQueueGenericCreateStatic+0x42>
 80111ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	627b      	str	r3, [r7, #36]	; 0x24
 80111cc:	e7fe      	b.n	80111cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <xQueueGenericCreateStatic+0x4e>
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d001      	beq.n	80111de <xQueueGenericCreateStatic+0x52>
 80111da:	2301      	movs	r3, #1
 80111dc:	e000      	b.n	80111e0 <xQueueGenericCreateStatic+0x54>
 80111de:	2300      	movs	r3, #0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d109      	bne.n	80111f8 <xQueueGenericCreateStatic+0x6c>
 80111e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e8:	f383 8811 	msr	BASEPRI, r3
 80111ec:	f3bf 8f6f 	isb	sy
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	623b      	str	r3, [r7, #32]
 80111f6:	e7fe      	b.n	80111f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d102      	bne.n	8011204 <xQueueGenericCreateStatic+0x78>
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d101      	bne.n	8011208 <xQueueGenericCreateStatic+0x7c>
 8011204:	2301      	movs	r3, #1
 8011206:	e000      	b.n	801120a <xQueueGenericCreateStatic+0x7e>
 8011208:	2300      	movs	r3, #0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d109      	bne.n	8011222 <xQueueGenericCreateStatic+0x96>
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	61fb      	str	r3, [r7, #28]
 8011220:	e7fe      	b.n	8011220 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011222:	2350      	movs	r3, #80	; 0x50
 8011224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	2b50      	cmp	r3, #80	; 0x50
 801122a:	d009      	beq.n	8011240 <xQueueGenericCreateStatic+0xb4>
 801122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011230:	f383 8811 	msr	BASEPRI, r3
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	f3bf 8f4f 	dsb	sy
 801123c:	61bb      	str	r3, [r7, #24]
 801123e:	e7fe      	b.n	801123e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011240:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00d      	beq.n	8011268 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124e:	2201      	movs	r2, #1
 8011250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011254:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	4613      	mov	r3, r2
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	68b9      	ldr	r1, [r7, #8]
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f000 f844 	bl	80112f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801126a:	4618      	mov	r0, r3
 801126c:	3730      	adds	r7, #48	; 0x30
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011272:	b580      	push	{r7, lr}
 8011274:	b08a      	sub	sp, #40	; 0x28
 8011276:	af02      	add	r7, sp, #8
 8011278:	60f8      	str	r0, [r7, #12]
 801127a:	60b9      	str	r1, [r7, #8]
 801127c:	4613      	mov	r3, r2
 801127e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d109      	bne.n	801129a <xQueueGenericCreate+0x28>
 8011286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128a:	f383 8811 	msr	BASEPRI, r3
 801128e:	f3bf 8f6f 	isb	sy
 8011292:	f3bf 8f4f 	dsb	sy
 8011296:	613b      	str	r3, [r7, #16]
 8011298:	e7fe      	b.n	8011298 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	61fb      	str	r3, [r7, #28]
 80112a4:	e004      	b.n	80112b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	fb02 f303 	mul.w	r3, r2, r3
 80112ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	3350      	adds	r3, #80	; 0x50
 80112b4:	4618      	mov	r0, r3
 80112b6:	f002 fc43 	bl	8013b40 <pvPortMalloc>
 80112ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d011      	beq.n	80112e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80112c2:	69bb      	ldr	r3, [r7, #24]
 80112c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	3350      	adds	r3, #80	; 0x50
 80112ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112d4:	79fa      	ldrb	r2, [r7, #7]
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4613      	mov	r3, r2
 80112dc:	697a      	ldr	r2, [r7, #20]
 80112de:	68b9      	ldr	r1, [r7, #8]
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 f805 	bl	80112f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80112e6:	69bb      	ldr	r3, [r7, #24]
	}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3720      	adds	r7, #32
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
 80112fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011304:	69bb      	ldr	r3, [r7, #24]
 8011306:	69ba      	ldr	r2, [r7, #24]
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	e002      	b.n	8011312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011312:	69bb      	ldr	r3, [r7, #24]
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801131e:	2101      	movs	r1, #1
 8011320:	69b8      	ldr	r0, [r7, #24]
 8011322:	f7ff fecb 	bl	80110bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	78fa      	ldrb	r2, [r7, #3]
 801132a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801132e:	bf00      	nop
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011336:	b580      	push	{r7, lr}
 8011338:	b082      	sub	sp, #8
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00e      	beq.n	8011362 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2200      	movs	r2, #0
 8011348:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2200      	movs	r2, #0
 801134e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011356:	2300      	movs	r3, #0
 8011358:	2200      	movs	r2, #0
 801135a:	2100      	movs	r1, #0
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f81d 	bl	801139c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011362:	bf00      	nop
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801136a:	b580      	push	{r7, lr}
 801136c:	b086      	sub	sp, #24
 801136e:	af00      	add	r7, sp, #0
 8011370:	4603      	mov	r3, r0
 8011372:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011374:	2301      	movs	r3, #1
 8011376:	617b      	str	r3, [r7, #20]
 8011378:	2300      	movs	r3, #0
 801137a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801137c:	79fb      	ldrb	r3, [r7, #7]
 801137e:	461a      	mov	r2, r3
 8011380:	6939      	ldr	r1, [r7, #16]
 8011382:	6978      	ldr	r0, [r7, #20]
 8011384:	f7ff ff75 	bl	8011272 <xQueueGenericCreate>
 8011388:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7ff ffd3 	bl	8011336 <prvInitialiseMutex>

		return xNewQueue;
 8011390:	68fb      	ldr	r3, [r7, #12]
	}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
	...

0801139c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b08e      	sub	sp, #56	; 0x38
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	607a      	str	r2, [r7, #4]
 80113a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80113aa:	2300      	movs	r3, #0
 80113ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80113b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <xQueueGenericSend+0x30>
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ca:	e7fe      	b.n	80113ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d103      	bne.n	80113da <xQueueGenericSend+0x3e>
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <xQueueGenericSend+0x42>
 80113da:	2301      	movs	r3, #1
 80113dc:	e000      	b.n	80113e0 <xQueueGenericSend+0x44>
 80113de:	2300      	movs	r3, #0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d109      	bne.n	80113f8 <xQueueGenericSend+0x5c>
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	627b      	str	r3, [r7, #36]	; 0x24
 80113f6:	e7fe      	b.n	80113f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	2b02      	cmp	r3, #2
 80113fc:	d103      	bne.n	8011406 <xQueueGenericSend+0x6a>
 80113fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011402:	2b01      	cmp	r3, #1
 8011404:	d101      	bne.n	801140a <xQueueGenericSend+0x6e>
 8011406:	2301      	movs	r3, #1
 8011408:	e000      	b.n	801140c <xQueueGenericSend+0x70>
 801140a:	2300      	movs	r3, #0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d109      	bne.n	8011424 <xQueueGenericSend+0x88>
 8011410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011414:	f383 8811 	msr	BASEPRI, r3
 8011418:	f3bf 8f6f 	isb	sy
 801141c:	f3bf 8f4f 	dsb	sy
 8011420:	623b      	str	r3, [r7, #32]
 8011422:	e7fe      	b.n	8011422 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011424:	f001 fc2e 	bl	8012c84 <xTaskGetSchedulerState>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <xQueueGenericSend+0x98>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d101      	bne.n	8011438 <xQueueGenericSend+0x9c>
 8011434:	2301      	movs	r3, #1
 8011436:	e000      	b.n	801143a <xQueueGenericSend+0x9e>
 8011438:	2300      	movs	r3, #0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d109      	bne.n	8011452 <xQueueGenericSend+0xb6>
 801143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011442:	f383 8811 	msr	BASEPRI, r3
 8011446:	f3bf 8f6f 	isb	sy
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	61fb      	str	r3, [r7, #28]
 8011450:	e7fe      	b.n	8011450 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011452:	f002 fa5b 	bl	801390c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801145e:	429a      	cmp	r2, r3
 8011460:	d302      	bcc.n	8011468 <xQueueGenericSend+0xcc>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	2b02      	cmp	r3, #2
 8011466:	d129      	bne.n	80114bc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011468:	683a      	ldr	r2, [r7, #0]
 801146a:	68b9      	ldr	r1, [r7, #8]
 801146c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801146e:	f000 fba9 	bl	8011bc4 <prvCopyDataToQueue>
 8011472:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011478:	2b00      	cmp	r3, #0
 801147a:	d010      	beq.n	801149e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147e:	3324      	adds	r3, #36	; 0x24
 8011480:	4618      	mov	r0, r3
 8011482:	f001 fa49 	bl	8012918 <xTaskRemoveFromEventList>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d013      	beq.n	80114b4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801148c:	4b3f      	ldr	r3, [pc, #252]	; (801158c <xQueueGenericSend+0x1f0>)
 801148e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011492:	601a      	str	r2, [r3, #0]
 8011494:	f3bf 8f4f 	dsb	sy
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	e00a      	b.n	80114b4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d007      	beq.n	80114b4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80114a4:	4b39      	ldr	r3, [pc, #228]	; (801158c <xQueueGenericSend+0x1f0>)
 80114a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	f3bf 8f4f 	dsb	sy
 80114b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80114b4:	f002 fa58 	bl	8013968 <vPortExitCritical>
				return pdPASS;
 80114b8:	2301      	movs	r3, #1
 80114ba:	e063      	b.n	8011584 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d103      	bne.n	80114ca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80114c2:	f002 fa51 	bl	8013968 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80114c6:	2300      	movs	r3, #0
 80114c8:	e05c      	b.n	8011584 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d106      	bne.n	80114de <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114d0:	f107 0314 	add.w	r3, r7, #20
 80114d4:	4618      	mov	r0, r3
 80114d6:	f001 fa81 	bl	80129dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80114da:	2301      	movs	r3, #1
 80114dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80114de:	f002 fa43 	bl	8013968 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80114e2:	f000 fffd 	bl	80124e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80114e6:	f002 fa11 	bl	801390c <vPortEnterCritical>
 80114ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114f0:	b25b      	sxtb	r3, r3
 80114f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114f6:	d103      	bne.n	8011500 <xQueueGenericSend+0x164>
 80114f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011506:	b25b      	sxtb	r3, r3
 8011508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801150c:	d103      	bne.n	8011516 <xQueueGenericSend+0x17a>
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011516:	f002 fa27 	bl	8013968 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801151a:	1d3a      	adds	r2, r7, #4
 801151c:	f107 0314 	add.w	r3, r7, #20
 8011520:	4611      	mov	r1, r2
 8011522:	4618      	mov	r0, r3
 8011524:	f001 fa70 	bl	8012a08 <xTaskCheckForTimeOut>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d124      	bne.n	8011578 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801152e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011530:	f000 fc40 	bl	8011db4 <prvIsQueueFull>
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d018      	beq.n	801156c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153c:	3310      	adds	r3, #16
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	4611      	mov	r1, r2
 8011542:	4618      	mov	r0, r3
 8011544:	f001 f99a 	bl	801287c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801154a:	f000 fbcb 	bl	8011ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801154e:	f000 ffd5 	bl	80124fc <xTaskResumeAll>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	f47f af7c 	bne.w	8011452 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801155a:	4b0c      	ldr	r3, [pc, #48]	; (801158c <xQueueGenericSend+0x1f0>)
 801155c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	e772      	b.n	8011452 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801156c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801156e:	f000 fbb9 	bl	8011ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011572:	f000 ffc3 	bl	80124fc <xTaskResumeAll>
 8011576:	e76c      	b.n	8011452 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801157a:	f000 fbb3 	bl	8011ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801157e:	f000 ffbd 	bl	80124fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011584:	4618      	mov	r0, r3
 8011586:	3738      	adds	r7, #56	; 0x38
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	e000ed04 	.word	0xe000ed04

08011590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b08e      	sub	sp, #56	; 0x38
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
 801159c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80115a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d109      	bne.n	80115bc <xQueueGenericSendFromISR+0x2c>
 80115a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ac:	f383 8811 	msr	BASEPRI, r3
 80115b0:	f3bf 8f6f 	isb	sy
 80115b4:	f3bf 8f4f 	dsb	sy
 80115b8:	627b      	str	r3, [r7, #36]	; 0x24
 80115ba:	e7fe      	b.n	80115ba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d103      	bne.n	80115ca <xQueueGenericSendFromISR+0x3a>
 80115c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d101      	bne.n	80115ce <xQueueGenericSendFromISR+0x3e>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e000      	b.n	80115d0 <xQueueGenericSendFromISR+0x40>
 80115ce:	2300      	movs	r3, #0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d109      	bne.n	80115e8 <xQueueGenericSendFromISR+0x58>
 80115d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	623b      	str	r3, [r7, #32]
 80115e6:	e7fe      	b.n	80115e6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	2b02      	cmp	r3, #2
 80115ec:	d103      	bne.n	80115f6 <xQueueGenericSendFromISR+0x66>
 80115ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d101      	bne.n	80115fa <xQueueGenericSendFromISR+0x6a>
 80115f6:	2301      	movs	r3, #1
 80115f8:	e000      	b.n	80115fc <xQueueGenericSendFromISR+0x6c>
 80115fa:	2300      	movs	r3, #0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d109      	bne.n	8011614 <xQueueGenericSendFromISR+0x84>
 8011600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011604:	f383 8811 	msr	BASEPRI, r3
 8011608:	f3bf 8f6f 	isb	sy
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	61fb      	str	r3, [r7, #28]
 8011612:	e7fe      	b.n	8011612 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011614:	f002 fa56 	bl	8013ac4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011618:	f3ef 8211 	mrs	r2, BASEPRI
 801161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011620:	f383 8811 	msr	BASEPRI, r3
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	61ba      	str	r2, [r7, #24]
 801162e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011630:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011632:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801163c:	429a      	cmp	r2, r3
 801163e:	d302      	bcc.n	8011646 <xQueueGenericSendFromISR+0xb6>
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	2b02      	cmp	r3, #2
 8011644:	d12c      	bne.n	80116a0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801164c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	68b9      	ldr	r1, [r7, #8]
 8011654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011656:	f000 fab5 	bl	8011bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801165a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801165e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011662:	d112      	bne.n	801168a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	2b00      	cmp	r3, #0
 801166a:	d016      	beq.n	801169a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	3324      	adds	r3, #36	; 0x24
 8011670:	4618      	mov	r0, r3
 8011672:	f001 f951 	bl	8012918 <xTaskRemoveFromEventList>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00e      	beq.n	801169a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00b      	beq.n	801169a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2201      	movs	r2, #1
 8011686:	601a      	str	r2, [r3, #0]
 8011688:	e007      	b.n	801169a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801168a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801168e:	3301      	adds	r3, #1
 8011690:	b2db      	uxtb	r3, r3
 8011692:	b25a      	sxtb	r2, r3
 8011694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801169a:	2301      	movs	r3, #1
 801169c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801169e:	e001      	b.n	80116a4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	637b      	str	r3, [r7, #52]	; 0x34
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80116ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3738      	adds	r7, #56	; 0x38
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08e      	sub	sp, #56	; 0x38
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d109      	bne.n	80116e0 <xQueueGiveFromISR+0x28>
	__asm volatile
 80116cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d0:	f383 8811 	msr	BASEPRI, r3
 80116d4:	f3bf 8f6f 	isb	sy
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	623b      	str	r3, [r7, #32]
 80116de:	e7fe      	b.n	80116de <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d009      	beq.n	80116fc <xQueueGiveFromISR+0x44>
 80116e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ec:	f383 8811 	msr	BASEPRI, r3
 80116f0:	f3bf 8f6f 	isb	sy
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	61fb      	str	r3, [r7, #28]
 80116fa:	e7fe      	b.n	80116fa <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80116fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d103      	bne.n	801170c <xQueueGiveFromISR+0x54>
 8011704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011706:	689b      	ldr	r3, [r3, #8]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d101      	bne.n	8011710 <xQueueGiveFromISR+0x58>
 801170c:	2301      	movs	r3, #1
 801170e:	e000      	b.n	8011712 <xQueueGiveFromISR+0x5a>
 8011710:	2300      	movs	r3, #0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d109      	bne.n	801172a <xQueueGiveFromISR+0x72>
 8011716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	61bb      	str	r3, [r7, #24]
 8011728:	e7fe      	b.n	8011728 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801172a:	f002 f9cb 	bl	8013ac4 <vPortValidateInterruptPriority>
	__asm volatile
 801172e:	f3ef 8211 	mrs	r2, BASEPRI
 8011732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	617a      	str	r2, [r7, #20]
 8011744:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011746:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801174e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011756:	429a      	cmp	r2, r3
 8011758:	d22b      	bcs.n	80117b2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011766:	1c5a      	adds	r2, r3, #1
 8011768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801176c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011774:	d112      	bne.n	801179c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177a:	2b00      	cmp	r3, #0
 801177c:	d016      	beq.n	80117ac <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	3324      	adds	r3, #36	; 0x24
 8011782:	4618      	mov	r0, r3
 8011784:	f001 f8c8 	bl	8012918 <xTaskRemoveFromEventList>
 8011788:	4603      	mov	r3, r0
 801178a:	2b00      	cmp	r3, #0
 801178c:	d00e      	beq.n	80117ac <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00b      	beq.n	80117ac <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2201      	movs	r2, #1
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	e007      	b.n	80117ac <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801179c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117a0:	3301      	adds	r3, #1
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	b25a      	sxtb	r2, r3
 80117a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80117ac:	2301      	movs	r3, #1
 80117ae:	637b      	str	r3, [r7, #52]	; 0x34
 80117b0:	e001      	b.n	80117b6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	637b      	str	r3, [r7, #52]	; 0x34
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80117c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3738      	adds	r7, #56	; 0x38
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08c      	sub	sp, #48	; 0x30
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80117d8:	2300      	movs	r3, #0
 80117da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80117e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d109      	bne.n	80117fa <xQueueReceive+0x2e>
	__asm volatile
 80117e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ea:	f383 8811 	msr	BASEPRI, r3
 80117ee:	f3bf 8f6f 	isb	sy
 80117f2:	f3bf 8f4f 	dsb	sy
 80117f6:	623b      	str	r3, [r7, #32]
 80117f8:	e7fe      	b.n	80117f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d103      	bne.n	8011808 <xQueueReceive+0x3c>
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011804:	2b00      	cmp	r3, #0
 8011806:	d101      	bne.n	801180c <xQueueReceive+0x40>
 8011808:	2301      	movs	r3, #1
 801180a:	e000      	b.n	801180e <xQueueReceive+0x42>
 801180c:	2300      	movs	r3, #0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d109      	bne.n	8011826 <xQueueReceive+0x5a>
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	61fb      	str	r3, [r7, #28]
 8011824:	e7fe      	b.n	8011824 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011826:	f001 fa2d 	bl	8012c84 <xTaskGetSchedulerState>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d102      	bne.n	8011836 <xQueueReceive+0x6a>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <xQueueReceive+0x6e>
 8011836:	2301      	movs	r3, #1
 8011838:	e000      	b.n	801183c <xQueueReceive+0x70>
 801183a:	2300      	movs	r3, #0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d109      	bne.n	8011854 <xQueueReceive+0x88>
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	61bb      	str	r3, [r7, #24]
 8011852:	e7fe      	b.n	8011852 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011854:	f002 f85a 	bl	801390c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801185c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011860:	2b00      	cmp	r3, #0
 8011862:	d01f      	beq.n	80118a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011864:	68b9      	ldr	r1, [r7, #8]
 8011866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011868:	f000 fa16 	bl	8011c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	1e5a      	subs	r2, r3, #1
 8011870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011872:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00f      	beq.n	801189c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187e:	3310      	adds	r3, #16
 8011880:	4618      	mov	r0, r3
 8011882:	f001 f849 	bl	8012918 <xTaskRemoveFromEventList>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	d007      	beq.n	801189c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801188c:	4b3c      	ldr	r3, [pc, #240]	; (8011980 <xQueueReceive+0x1b4>)
 801188e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011892:	601a      	str	r2, [r3, #0]
 8011894:	f3bf 8f4f 	dsb	sy
 8011898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801189c:	f002 f864 	bl	8013968 <vPortExitCritical>
				return pdPASS;
 80118a0:	2301      	movs	r3, #1
 80118a2:	e069      	b.n	8011978 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d103      	bne.n	80118b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80118aa:	f002 f85d 	bl	8013968 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80118ae:	2300      	movs	r3, #0
 80118b0:	e062      	b.n	8011978 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80118b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d106      	bne.n	80118c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80118b8:	f107 0310 	add.w	r3, r7, #16
 80118bc:	4618      	mov	r0, r3
 80118be:	f001 f88d 	bl	80129dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80118c2:	2301      	movs	r3, #1
 80118c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80118c6:	f002 f84f 	bl	8013968 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80118ca:	f000 fe09 	bl	80124e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80118ce:	f002 f81d 	bl	801390c <vPortEnterCritical>
 80118d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118d8:	b25b      	sxtb	r3, r3
 80118da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118de:	d103      	bne.n	80118e8 <xQueueReceive+0x11c>
 80118e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e2:	2200      	movs	r2, #0
 80118e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80118e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118ee:	b25b      	sxtb	r3, r3
 80118f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118f4:	d103      	bne.n	80118fe <xQueueReceive+0x132>
 80118f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f8:	2200      	movs	r2, #0
 80118fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80118fe:	f002 f833 	bl	8013968 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011902:	1d3a      	adds	r2, r7, #4
 8011904:	f107 0310 	add.w	r3, r7, #16
 8011908:	4611      	mov	r1, r2
 801190a:	4618      	mov	r0, r3
 801190c:	f001 f87c 	bl	8012a08 <xTaskCheckForTimeOut>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d123      	bne.n	801195e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011918:	f000 fa36 	bl	8011d88 <prvIsQueueEmpty>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d017      	beq.n	8011952 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011924:	3324      	adds	r3, #36	; 0x24
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	4611      	mov	r1, r2
 801192a:	4618      	mov	r0, r3
 801192c:	f000 ffa6 	bl	801287c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011932:	f000 f9d7 	bl	8011ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011936:	f000 fde1 	bl	80124fc <xTaskResumeAll>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d189      	bne.n	8011854 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011940:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <xQueueReceive+0x1b4>)
 8011942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	f3bf 8f6f 	isb	sy
 8011950:	e780      	b.n	8011854 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011954:	f000 f9c6 	bl	8011ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011958:	f000 fdd0 	bl	80124fc <xTaskResumeAll>
 801195c:	e77a      	b.n	8011854 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801195e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011960:	f000 f9c0 	bl	8011ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011964:	f000 fdca 	bl	80124fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801196a:	f000 fa0d 	bl	8011d88 <prvIsQueueEmpty>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	f43f af6f 	beq.w	8011854 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011976:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011978:	4618      	mov	r0, r3
 801197a:	3730      	adds	r7, #48	; 0x30
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	e000ed04 	.word	0xe000ed04

08011984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b08e      	sub	sp, #56	; 0x38
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801198e:	2300      	movs	r3, #0
 8011990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011996:	2300      	movs	r3, #0
 8011998:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199c:	2b00      	cmp	r3, #0
 801199e:	d109      	bne.n	80119b4 <xQueueSemaphoreTake+0x30>
 80119a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a4:	f383 8811 	msr	BASEPRI, r3
 80119a8:	f3bf 8f6f 	isb	sy
 80119ac:	f3bf 8f4f 	dsb	sy
 80119b0:	623b      	str	r3, [r7, #32]
 80119b2:	e7fe      	b.n	80119b2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d009      	beq.n	80119d0 <xQueueSemaphoreTake+0x4c>
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	61fb      	str	r3, [r7, #28]
 80119ce:	e7fe      	b.n	80119ce <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119d0:	f001 f958 	bl	8012c84 <xTaskGetSchedulerState>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <xQueueSemaphoreTake+0x5c>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d101      	bne.n	80119e4 <xQueueSemaphoreTake+0x60>
 80119e0:	2301      	movs	r3, #1
 80119e2:	e000      	b.n	80119e6 <xQueueSemaphoreTake+0x62>
 80119e4:	2300      	movs	r3, #0
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d109      	bne.n	80119fe <xQueueSemaphoreTake+0x7a>
 80119ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ee:	f383 8811 	msr	BASEPRI, r3
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	f3bf 8f4f 	dsb	sy
 80119fa:	61bb      	str	r3, [r7, #24]
 80119fc:	e7fe      	b.n	80119fc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119fe:	f001 ff85 	bl	801390c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a06:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d024      	beq.n	8011a58 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a10:	1e5a      	subs	r2, r3, #1
 8011a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a14:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d104      	bne.n	8011a28 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011a1e:	f001 faa3 	bl	8012f68 <pvTaskIncrementMutexHeldCount>
 8011a22:	4602      	mov	r2, r0
 8011a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2a:	691b      	ldr	r3, [r3, #16]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00f      	beq.n	8011a50 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a32:	3310      	adds	r3, #16
 8011a34:	4618      	mov	r0, r3
 8011a36:	f000 ff6f 	bl	8012918 <xTaskRemoveFromEventList>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d007      	beq.n	8011a50 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a40:	4b53      	ldr	r3, [pc, #332]	; (8011b90 <xQueueSemaphoreTake+0x20c>)
 8011a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a50:	f001 ff8a 	bl	8013968 <vPortExitCritical>
				return pdPASS;
 8011a54:	2301      	movs	r3, #1
 8011a56:	e096      	b.n	8011b86 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d110      	bne.n	8011a80 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d009      	beq.n	8011a78 <xQueueSemaphoreTake+0xf4>
 8011a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	617b      	str	r3, [r7, #20]
 8011a76:	e7fe      	b.n	8011a76 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011a78:	f001 ff76 	bl	8013968 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e082      	b.n	8011b86 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a86:	f107 030c 	add.w	r3, r7, #12
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 ffa6 	bl	80129dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a90:	2301      	movs	r3, #1
 8011a92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a94:	f001 ff68 	bl	8013968 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a98:	f000 fd22 	bl	80124e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a9c:	f001 ff36 	bl	801390c <vPortEnterCritical>
 8011aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aa6:	b25b      	sxtb	r3, r3
 8011aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aac:	d103      	bne.n	8011ab6 <xQueueSemaphoreTake+0x132>
 8011aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011abc:	b25b      	sxtb	r3, r3
 8011abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ac2:	d103      	bne.n	8011acc <xQueueSemaphoreTake+0x148>
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011acc:	f001 ff4c 	bl	8013968 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ad0:	463a      	mov	r2, r7
 8011ad2:	f107 030c 	add.w	r3, r7, #12
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f000 ff95 	bl	8012a08 <xTaskCheckForTimeOut>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d132      	bne.n	8011b4a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ae6:	f000 f94f 	bl	8011d88 <prvIsQueueEmpty>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d026      	beq.n	8011b3e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d109      	bne.n	8011b0c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011af8:	f001 ff08 	bl	801390c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f001 f8dd 	bl	8012cc0 <xTaskPriorityInherit>
 8011b06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011b08:	f001 ff2e 	bl	8013968 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0e:	3324      	adds	r3, #36	; 0x24
 8011b10:	683a      	ldr	r2, [r7, #0]
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 feb1 	bl	801287c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b1c:	f000 f8e2 	bl	8011ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b20:	f000 fcec 	bl	80124fc <xTaskResumeAll>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f47f af69 	bne.w	80119fe <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011b2c:	4b18      	ldr	r3, [pc, #96]	; (8011b90 <xQueueSemaphoreTake+0x20c>)
 8011b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b32:	601a      	str	r2, [r3, #0]
 8011b34:	f3bf 8f4f 	dsb	sy
 8011b38:	f3bf 8f6f 	isb	sy
 8011b3c:	e75f      	b.n	80119fe <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b40:	f000 f8d0 	bl	8011ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b44:	f000 fcda 	bl	80124fc <xTaskResumeAll>
 8011b48:	e759      	b.n	80119fe <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b4c:	f000 f8ca 	bl	8011ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b50:	f000 fcd4 	bl	80124fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b56:	f000 f917 	bl	8011d88 <prvIsQueueEmpty>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f43f af4e 	beq.w	80119fe <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00d      	beq.n	8011b84 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011b68:	f001 fed0 	bl	801390c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b6e:	f000 f811 	bl	8011b94 <prvGetDisinheritPriorityAfterTimeout>
 8011b72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f001 f974 	bl	8012e68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011b80:	f001 fef2 	bl	8013968 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3738      	adds	r7, #56	; 0x38
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	e000ed04 	.word	0xe000ed04

08011b94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d006      	beq.n	8011bb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011bae:	60fb      	str	r3, [r7, #12]
 8011bb0:	e001      	b.n	8011bb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10d      	bne.n	8011bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d14d      	bne.n	8011c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f001 f8ce 	bl	8012d90 <xTaskPriorityDisinherit>
 8011bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	609a      	str	r2, [r3, #8]
 8011bfc:	e043      	b.n	8011c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d119      	bne.n	8011c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	6858      	ldr	r0, [r3, #4]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	68b9      	ldr	r1, [r7, #8]
 8011c10:	f002 ffc4 	bl	8014b9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	685a      	ldr	r2, [r3, #4]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c1c:	441a      	add	r2, r3
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	685a      	ldr	r2, [r3, #4]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	689b      	ldr	r3, [r3, #8]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d32b      	bcc.n	8011c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	605a      	str	r2, [r3, #4]
 8011c36:	e026      	b.n	8011c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	68d8      	ldr	r0, [r3, #12]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c40:	461a      	mov	r2, r3
 8011c42:	68b9      	ldr	r1, [r7, #8]
 8011c44:	f002 ffaa 	bl	8014b9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	68da      	ldr	r2, [r3, #12]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c50:	425b      	negs	r3, r3
 8011c52:	441a      	add	r2, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	68da      	ldr	r2, [r3, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d207      	bcs.n	8011c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	689a      	ldr	r2, [r3, #8]
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c6c:	425b      	negs	r3, r3
 8011c6e:	441a      	add	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d105      	bne.n	8011c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d002      	beq.n	8011c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	3b01      	subs	r3, #1
 8011c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	1c5a      	adds	r2, r3, #1
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011c8e:	697b      	ldr	r3, [r7, #20]
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d018      	beq.n	8011cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68da      	ldr	r2, [r3, #12]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb2:	441a      	add	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	68da      	ldr	r2, [r3, #12]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d303      	bcc.n	8011ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	68d9      	ldr	r1, [r3, #12]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	6838      	ldr	r0, [r7, #0]
 8011cd8:	f002 ff60 	bl	8014b9c <memcpy>
	}
}
 8011cdc:	bf00      	nop
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011cec:	f001 fe0e 	bl	801390c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cf8:	e011      	b.n	8011d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d012      	beq.n	8011d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	3324      	adds	r3, #36	; 0x24
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 fe06 	bl	8012918 <xTaskRemoveFromEventList>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011d12:	f000 fed9 	bl	8012ac8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	dce9      	bgt.n	8011cfa <prvUnlockQueue+0x16>
 8011d26:	e000      	b.n	8011d2a <prvUnlockQueue+0x46>
					break;
 8011d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	22ff      	movs	r2, #255	; 0xff
 8011d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011d32:	f001 fe19 	bl	8013968 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011d36:	f001 fde9 	bl	801390c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d42:	e011      	b.n	8011d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	691b      	ldr	r3, [r3, #16]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d012      	beq.n	8011d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3310      	adds	r3, #16
 8011d50:	4618      	mov	r0, r3
 8011d52:	f000 fde1 	bl	8012918 <xTaskRemoveFromEventList>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d001      	beq.n	8011d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011d5c:	f000 feb4 	bl	8012ac8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011d60:	7bbb      	ldrb	r3, [r7, #14]
 8011d62:	3b01      	subs	r3, #1
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	dce9      	bgt.n	8011d44 <prvUnlockQueue+0x60>
 8011d70:	e000      	b.n	8011d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	22ff      	movs	r2, #255	; 0xff
 8011d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011d7c:	f001 fdf4 	bl	8013968 <vPortExitCritical>
}
 8011d80:	bf00      	nop
 8011d82:	3710      	adds	r7, #16
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d90:	f001 fdbc 	bl	801390c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	60fb      	str	r3, [r7, #12]
 8011da0:	e001      	b.n	8011da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011da2:	2300      	movs	r3, #0
 8011da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011da6:	f001 fddf 	bl	8013968 <vPortExitCritical>

	return xReturn;
 8011daa:	68fb      	ldr	r3, [r7, #12]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3710      	adds	r7, #16
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011dbc:	f001 fda6 	bl	801390c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d102      	bne.n	8011dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	60fb      	str	r3, [r7, #12]
 8011dd0:	e001      	b.n	8011dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011dd6:	f001 fdc7 	bl	8013968 <vPortExitCritical>

	return xReturn;
 8011dda:	68fb      	ldr	r3, [r7, #12]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011dee:	2300      	movs	r3, #0
 8011df0:	60fb      	str	r3, [r7, #12]
 8011df2:	e014      	b.n	8011e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011df4:	4a0e      	ldr	r2, [pc, #56]	; (8011e30 <vQueueAddToRegistry+0x4c>)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10b      	bne.n	8011e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011e00:	490b      	ldr	r1, [pc, #44]	; (8011e30 <vQueueAddToRegistry+0x4c>)
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	683a      	ldr	r2, [r7, #0]
 8011e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011e0a:	4a09      	ldr	r2, [pc, #36]	; (8011e30 <vQueueAddToRegistry+0x4c>)
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	4413      	add	r3, r2
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011e16:	e005      	b.n	8011e24 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	60fb      	str	r3, [r7, #12]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2b07      	cmp	r3, #7
 8011e22:	d9e7      	bls.n	8011df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e24:	bf00      	nop
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	2000ec44 	.word	0x2000ec44

08011e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b086      	sub	sp, #24
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e44:	f001 fd62 	bl	801390c <vPortEnterCritical>
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e4e:	b25b      	sxtb	r3, r3
 8011e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e54:	d103      	bne.n	8011e5e <vQueueWaitForMessageRestricted+0x2a>
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e64:	b25b      	sxtb	r3, r3
 8011e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e6a:	d103      	bne.n	8011e74 <vQueueWaitForMessageRestricted+0x40>
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e74:	f001 fd78 	bl	8013968 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d106      	bne.n	8011e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	3324      	adds	r3, #36	; 0x24
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	68b9      	ldr	r1, [r7, #8]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 fd1b 	bl	80128c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011e8e:	6978      	ldr	r0, [r7, #20]
 8011e90:	f7ff ff28 	bl	8011ce4 <prvUnlockQueue>
	}
 8011e94:	bf00      	nop
 8011e96:	3718      	adds	r7, #24
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08e      	sub	sp, #56	; 0x38
 8011ea0:	af04      	add	r7, sp, #16
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d109      	bne.n	8011ec4 <xTaskCreateStatic+0x28>
 8011eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb4:	f383 8811 	msr	BASEPRI, r3
 8011eb8:	f3bf 8f6f 	isb	sy
 8011ebc:	f3bf 8f4f 	dsb	sy
 8011ec0:	623b      	str	r3, [r7, #32]
 8011ec2:	e7fe      	b.n	8011ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d109      	bne.n	8011ede <xTaskCreateStatic+0x42>
 8011eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ece:	f383 8811 	msr	BASEPRI, r3
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	61fb      	str	r3, [r7, #28]
 8011edc:	e7fe      	b.n	8011edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011ede:	235c      	movs	r3, #92	; 0x5c
 8011ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8011ee6:	d009      	beq.n	8011efc <xTaskCreateStatic+0x60>
 8011ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eec:	f383 8811 	msr	BASEPRI, r3
 8011ef0:	f3bf 8f6f 	isb	sy
 8011ef4:	f3bf 8f4f 	dsb	sy
 8011ef8:	61bb      	str	r3, [r7, #24]
 8011efa:	e7fe      	b.n	8011efa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d01e      	beq.n	8011f42 <xTaskCreateStatic+0xa6>
 8011f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d01b      	beq.n	8011f42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	2202      	movs	r2, #2
 8011f18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	9303      	str	r3, [sp, #12]
 8011f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f22:	9302      	str	r3, [sp, #8]
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	9301      	str	r3, [sp, #4]
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	68b9      	ldr	r1, [r7, #8]
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f000 f850 	bl	8011fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f3c:	f000 f8dc 	bl	80120f8 <prvAddNewTaskToReadyList>
 8011f40:	e001      	b.n	8011f46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011f42:	2300      	movs	r3, #0
 8011f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f46:	697b      	ldr	r3, [r7, #20]
	}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3728      	adds	r7, #40	; 0x28
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b08c      	sub	sp, #48	; 0x30
 8011f54:	af04      	add	r7, sp, #16
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	603b      	str	r3, [r7, #0]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011f60:	88fb      	ldrh	r3, [r7, #6]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4618      	mov	r0, r3
 8011f66:	f001 fdeb 	bl	8013b40 <pvPortMalloc>
 8011f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00e      	beq.n	8011f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011f72:	205c      	movs	r0, #92	; 0x5c
 8011f74:	f001 fde4 	bl	8013b40 <pvPortMalloc>
 8011f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d003      	beq.n	8011f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	697a      	ldr	r2, [r7, #20]
 8011f84:	631a      	str	r2, [r3, #48]	; 0x30
 8011f86:	e005      	b.n	8011f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011f88:	6978      	ldr	r0, [r7, #20]
 8011f8a:	f001 fe9b 	bl	8013cc4 <vPortFree>
 8011f8e:	e001      	b.n	8011f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011f90:	2300      	movs	r3, #0
 8011f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d017      	beq.n	8011fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011fa2:	88fa      	ldrh	r2, [r7, #6]
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	9303      	str	r3, [sp, #12]
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	9302      	str	r3, [sp, #8]
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	9301      	str	r3, [sp, #4]
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	68b9      	ldr	r1, [r7, #8]
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f000 f80e 	bl	8011fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011fbe:	69f8      	ldr	r0, [r7, #28]
 8011fc0:	f000 f89a 	bl	80120f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	61bb      	str	r3, [r7, #24]
 8011fc8:	e002      	b.n	8011fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3720      	adds	r7, #32
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b088      	sub	sp, #32
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	607a      	str	r2, [r7, #4]
 8011fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	21a5      	movs	r1, #165	; 0xa5
 8011ff4:	f002 fddd 	bl	8014bb2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012002:	3b01      	subs	r3, #1
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	4413      	add	r3, r2
 8012008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	f023 0307 	bic.w	r3, r3, #7
 8012010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	f003 0307 	and.w	r3, r3, #7
 8012018:	2b00      	cmp	r3, #0
 801201a:	d009      	beq.n	8012030 <prvInitialiseNewTask+0x56>
 801201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012020:	f383 8811 	msr	BASEPRI, r3
 8012024:	f3bf 8f6f 	isb	sy
 8012028:	f3bf 8f4f 	dsb	sy
 801202c:	617b      	str	r3, [r7, #20]
 801202e:	e7fe      	b.n	801202e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d01f      	beq.n	8012076 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012036:	2300      	movs	r3, #0
 8012038:	61fb      	str	r3, [r7, #28]
 801203a:	e012      	b.n	8012062 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801203c:	68ba      	ldr	r2, [r7, #8]
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	4413      	add	r3, r2
 8012042:	7819      	ldrb	r1, [r3, #0]
 8012044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	4413      	add	r3, r2
 801204a:	3334      	adds	r3, #52	; 0x34
 801204c:	460a      	mov	r2, r1
 801204e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	4413      	add	r3, r2
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d006      	beq.n	801206a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	3301      	adds	r3, #1
 8012060:	61fb      	str	r3, [r7, #28]
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	2b0f      	cmp	r3, #15
 8012066:	d9e9      	bls.n	801203c <prvInitialiseNewTask+0x62>
 8012068:	e000      	b.n	801206c <prvInitialiseNewTask+0x92>
			{
				break;
 801206a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206e:	2200      	movs	r2, #0
 8012070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012074:	e003      	b.n	801207e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012078:	2200      	movs	r2, #0
 801207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012080:	2b37      	cmp	r3, #55	; 0x37
 8012082:	d901      	bls.n	8012088 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012084:	2337      	movs	r3, #55	; 0x37
 8012086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801208c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012096:	2200      	movs	r2, #0
 8012098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	3304      	adds	r3, #4
 801209e:	4618      	mov	r0, r3
 80120a0:	f7fe ff78 	bl	8010f94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	3318      	adds	r3, #24
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fe ff73 	bl	8010f94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80120ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80120be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80120c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c6:	2200      	movs	r2, #0
 80120c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	68f9      	ldr	r1, [r7, #12]
 80120d6:	69b8      	ldr	r0, [r7, #24]
 80120d8:	f001 faf4 	bl	80136c4 <pxPortInitialiseStack>
 80120dc:	4602      	mov	r2, r0
 80120de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80120e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d002      	beq.n	80120ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80120e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120ee:	bf00      	nop
 80120f0:	3720      	adds	r7, #32
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
	...

080120f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012100:	f001 fc04 	bl	801390c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012104:	4b2d      	ldr	r3, [pc, #180]	; (80121bc <prvAddNewTaskToReadyList+0xc4>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	3301      	adds	r3, #1
 801210a:	4a2c      	ldr	r2, [pc, #176]	; (80121bc <prvAddNewTaskToReadyList+0xc4>)
 801210c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801210e:	4b2c      	ldr	r3, [pc, #176]	; (80121c0 <prvAddNewTaskToReadyList+0xc8>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d109      	bne.n	801212a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012116:	4a2a      	ldr	r2, [pc, #168]	; (80121c0 <prvAddNewTaskToReadyList+0xc8>)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801211c:	4b27      	ldr	r3, [pc, #156]	; (80121bc <prvAddNewTaskToReadyList+0xc4>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d110      	bne.n	8012146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012124:	f000 fcf4 	bl	8012b10 <prvInitialiseTaskLists>
 8012128:	e00d      	b.n	8012146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801212a:	4b26      	ldr	r3, [pc, #152]	; (80121c4 <prvAddNewTaskToReadyList+0xcc>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d109      	bne.n	8012146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012132:	4b23      	ldr	r3, [pc, #140]	; (80121c0 <prvAddNewTaskToReadyList+0xc8>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801213c:	429a      	cmp	r2, r3
 801213e:	d802      	bhi.n	8012146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012140:	4a1f      	ldr	r2, [pc, #124]	; (80121c0 <prvAddNewTaskToReadyList+0xc8>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012146:	4b20      	ldr	r3, [pc, #128]	; (80121c8 <prvAddNewTaskToReadyList+0xd0>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3301      	adds	r3, #1
 801214c:	4a1e      	ldr	r2, [pc, #120]	; (80121c8 <prvAddNewTaskToReadyList+0xd0>)
 801214e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012150:	4b1d      	ldr	r3, [pc, #116]	; (80121c8 <prvAddNewTaskToReadyList+0xd0>)
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215c:	4b1b      	ldr	r3, [pc, #108]	; (80121cc <prvAddNewTaskToReadyList+0xd4>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d903      	bls.n	801216c <prvAddNewTaskToReadyList+0x74>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012168:	4a18      	ldr	r2, [pc, #96]	; (80121cc <prvAddNewTaskToReadyList+0xd4>)
 801216a:	6013      	str	r3, [r2, #0]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012170:	4613      	mov	r3, r2
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	4413      	add	r3, r2
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	4a15      	ldr	r2, [pc, #84]	; (80121d0 <prvAddNewTaskToReadyList+0xd8>)
 801217a:	441a      	add	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	3304      	adds	r3, #4
 8012180:	4619      	mov	r1, r3
 8012182:	4610      	mov	r0, r2
 8012184:	f7fe ff13 	bl	8010fae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012188:	f001 fbee 	bl	8013968 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801218c:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <prvAddNewTaskToReadyList+0xcc>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00e      	beq.n	80121b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012194:	4b0a      	ldr	r3, [pc, #40]	; (80121c0 <prvAddNewTaskToReadyList+0xc8>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801219e:	429a      	cmp	r2, r3
 80121a0:	d207      	bcs.n	80121b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80121a2:	4b0c      	ldr	r3, [pc, #48]	; (80121d4 <prvAddNewTaskToReadyList+0xdc>)
 80121a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80121b2:	bf00      	nop
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	20001014 	.word	0x20001014
 80121c0:	20000b40 	.word	0x20000b40
 80121c4:	20001020 	.word	0x20001020
 80121c8:	20001030 	.word	0x20001030
 80121cc:	2000101c 	.word	0x2000101c
 80121d0:	20000b44 	.word	0x20000b44
 80121d4:	e000ed04 	.word	0xe000ed04

080121d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80121e0:	f001 fb94 	bl	801390c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <vTaskDelete+0x18>
 80121ea:	4b2c      	ldr	r3, [pc, #176]	; (801229c <vTaskDelete+0xc4>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	e000      	b.n	80121f2 <vTaskDelete+0x1a>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3304      	adds	r3, #4
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe ff35 	bl	8011068 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012202:	2b00      	cmp	r3, #0
 8012204:	d004      	beq.n	8012210 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	3318      	adds	r3, #24
 801220a:	4618      	mov	r0, r3
 801220c:	f7fe ff2c 	bl	8011068 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8012210:	4b23      	ldr	r3, [pc, #140]	; (80122a0 <vTaskDelete+0xc8>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	3301      	adds	r3, #1
 8012216:	4a22      	ldr	r2, [pc, #136]	; (80122a0 <vTaskDelete+0xc8>)
 8012218:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801221a:	4b20      	ldr	r3, [pc, #128]	; (801229c <vTaskDelete+0xc4>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	429a      	cmp	r2, r3
 8012222:	d10b      	bne.n	801223c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	3304      	adds	r3, #4
 8012228:	4619      	mov	r1, r3
 801222a:	481e      	ldr	r0, [pc, #120]	; (80122a4 <vTaskDelete+0xcc>)
 801222c:	f7fe febf 	bl	8010fae <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012230:	4b1d      	ldr	r3, [pc, #116]	; (80122a8 <vTaskDelete+0xd0>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	3301      	adds	r3, #1
 8012236:	4a1c      	ldr	r2, [pc, #112]	; (80122a8 <vTaskDelete+0xd0>)
 8012238:	6013      	str	r3, [r2, #0]
 801223a:	e009      	b.n	8012250 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801223c:	4b1b      	ldr	r3, [pc, #108]	; (80122ac <vTaskDelete+0xd4>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	3b01      	subs	r3, #1
 8012242:	4a1a      	ldr	r2, [pc, #104]	; (80122ac <vTaskDelete+0xd4>)
 8012244:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f000 fcce 	bl	8012be8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801224c:	f000 fcfa 	bl	8012c44 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8012250:	f001 fb8a 	bl	8013968 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8012254:	4b16      	ldr	r3, [pc, #88]	; (80122b0 <vTaskDelete+0xd8>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d01a      	beq.n	8012292 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 801225c:	4b0f      	ldr	r3, [pc, #60]	; (801229c <vTaskDelete+0xc4>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	429a      	cmp	r2, r3
 8012264:	d115      	bne.n	8012292 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8012266:	4b13      	ldr	r3, [pc, #76]	; (80122b4 <vTaskDelete+0xdc>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d009      	beq.n	8012282 <vTaskDelete+0xaa>
 801226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012272:	f383 8811 	msr	BASEPRI, r3
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	60bb      	str	r3, [r7, #8]
 8012280:	e7fe      	b.n	8012280 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8012282:	4b0d      	ldr	r3, [pc, #52]	; (80122b8 <vTaskDelete+0xe0>)
 8012284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	f3bf 8f4f 	dsb	sy
 801228e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012292:	bf00      	nop
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	20000b40 	.word	0x20000b40
 80122a0:	20001030 	.word	0x20001030
 80122a4:	20000fe8 	.word	0x20000fe8
 80122a8:	20000ffc 	.word	0x20000ffc
 80122ac:	20001014 	.word	0x20001014
 80122b0:	20001020 	.word	0x20001020
 80122b4:	2000103c 	.word	0x2000103c
 80122b8:	e000ed04 	.word	0xe000ed04

080122bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08a      	sub	sp, #40	; 0x28
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80122c6:	2300      	movs	r3, #0
 80122c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d109      	bne.n	80122e4 <vTaskDelayUntil+0x28>
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	617b      	str	r3, [r7, #20]
 80122e2:	e7fe      	b.n	80122e2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d109      	bne.n	80122fe <vTaskDelayUntil+0x42>
 80122ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ee:	f383 8811 	msr	BASEPRI, r3
 80122f2:	f3bf 8f6f 	isb	sy
 80122f6:	f3bf 8f4f 	dsb	sy
 80122fa:	613b      	str	r3, [r7, #16]
 80122fc:	e7fe      	b.n	80122fc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 80122fe:	4b29      	ldr	r3, [pc, #164]	; (80123a4 <vTaskDelayUntil+0xe8>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d009      	beq.n	801231a <vTaskDelayUntil+0x5e>
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	60fb      	str	r3, [r7, #12]
 8012318:	e7fe      	b.n	8012318 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 801231a:	f000 f8e1 	bl	80124e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801231e:	4b22      	ldr	r3, [pc, #136]	; (80123a8 <vTaskDelayUntil+0xec>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	683a      	ldr	r2, [r7, #0]
 801232a:	4413      	add	r3, r2
 801232c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	6a3a      	ldr	r2, [r7, #32]
 8012334:	429a      	cmp	r2, r3
 8012336:	d20b      	bcs.n	8012350 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	69fa      	ldr	r2, [r7, #28]
 801233e:	429a      	cmp	r2, r3
 8012340:	d211      	bcs.n	8012366 <vTaskDelayUntil+0xaa>
 8012342:	69fa      	ldr	r2, [r7, #28]
 8012344:	6a3b      	ldr	r3, [r7, #32]
 8012346:	429a      	cmp	r2, r3
 8012348:	d90d      	bls.n	8012366 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 801234a:	2301      	movs	r3, #1
 801234c:	627b      	str	r3, [r7, #36]	; 0x24
 801234e:	e00a      	b.n	8012366 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	69fa      	ldr	r2, [r7, #28]
 8012356:	429a      	cmp	r2, r3
 8012358:	d303      	bcc.n	8012362 <vTaskDelayUntil+0xa6>
 801235a:	69fa      	ldr	r2, [r7, #28]
 801235c:	6a3b      	ldr	r3, [r7, #32]
 801235e:	429a      	cmp	r2, r3
 8012360:	d901      	bls.n	8012366 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8012362:	2301      	movs	r3, #1
 8012364:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	69fa      	ldr	r2, [r7, #28]
 801236a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	2b00      	cmp	r3, #0
 8012370:	d006      	beq.n	8012380 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012372:	69fa      	ldr	r2, [r7, #28]
 8012374:	6a3b      	ldr	r3, [r7, #32]
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	2100      	movs	r1, #0
 801237a:	4618      	mov	r0, r3
 801237c:	f000 fe08 	bl	8012f90 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012380:	f000 f8bc 	bl	80124fc <xTaskResumeAll>
 8012384:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d107      	bne.n	801239c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 801238c:	4b07      	ldr	r3, [pc, #28]	; (80123ac <vTaskDelayUntil+0xf0>)
 801238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801239c:	bf00      	nop
 801239e:	3728      	adds	r7, #40	; 0x28
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	2000103c 	.word	0x2000103c
 80123a8:	20001018 	.word	0x20001018
 80123ac:	e000ed04 	.word	0xe000ed04

080123b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80123b8:	2300      	movs	r3, #0
 80123ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d016      	beq.n	80123f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80123c2:	4b13      	ldr	r3, [pc, #76]	; (8012410 <vTaskDelay+0x60>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d009      	beq.n	80123de <vTaskDelay+0x2e>
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	60bb      	str	r3, [r7, #8]
 80123dc:	e7fe      	b.n	80123dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80123de:	f000 f87f 	bl	80124e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80123e2:	2100      	movs	r1, #0
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 fdd3 	bl	8012f90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80123ea:	f000 f887 	bl	80124fc <xTaskResumeAll>
 80123ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d107      	bne.n	8012406 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80123f6:	4b07      	ldr	r3, [pc, #28]	; (8012414 <vTaskDelay+0x64>)
 80123f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123fc:	601a      	str	r2, [r3, #0]
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012406:	bf00      	nop
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	2000103c 	.word	0x2000103c
 8012414:	e000ed04 	.word	0xe000ed04

08012418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b08a      	sub	sp, #40	; 0x28
 801241c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012422:	2300      	movs	r3, #0
 8012424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012426:	463a      	mov	r2, r7
 8012428:	1d39      	adds	r1, r7, #4
 801242a:	f107 0308 	add.w	r3, r7, #8
 801242e:	4618      	mov	r0, r3
 8012430:	f7fe fd5c 	bl	8010eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	68ba      	ldr	r2, [r7, #8]
 801243a:	9202      	str	r2, [sp, #8]
 801243c:	9301      	str	r3, [sp, #4]
 801243e:	2300      	movs	r3, #0
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	2300      	movs	r3, #0
 8012444:	460a      	mov	r2, r1
 8012446:	4920      	ldr	r1, [pc, #128]	; (80124c8 <vTaskStartScheduler+0xb0>)
 8012448:	4820      	ldr	r0, [pc, #128]	; (80124cc <vTaskStartScheduler+0xb4>)
 801244a:	f7ff fd27 	bl	8011e9c <xTaskCreateStatic>
 801244e:	4602      	mov	r2, r0
 8012450:	4b1f      	ldr	r3, [pc, #124]	; (80124d0 <vTaskStartScheduler+0xb8>)
 8012452:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012454:	4b1e      	ldr	r3, [pc, #120]	; (80124d0 <vTaskStartScheduler+0xb8>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d002      	beq.n	8012462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801245c:	2301      	movs	r3, #1
 801245e:	617b      	str	r3, [r7, #20]
 8012460:	e001      	b.n	8012466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d102      	bne.n	8012472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801246c:	f000 fde4 	bl	8013038 <xTimerCreateTimerTask>
 8012470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d115      	bne.n	80124a4 <vTaskStartScheduler+0x8c>
 8012478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247c:	f383 8811 	msr	BASEPRI, r3
 8012480:	f3bf 8f6f 	isb	sy
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801248a:	4b12      	ldr	r3, [pc, #72]	; (80124d4 <vTaskStartScheduler+0xbc>)
 801248c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012492:	4b11      	ldr	r3, [pc, #68]	; (80124d8 <vTaskStartScheduler+0xc0>)
 8012494:	2201      	movs	r2, #1
 8012496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012498:	4b10      	ldr	r3, [pc, #64]	; (80124dc <vTaskStartScheduler+0xc4>)
 801249a:	2200      	movs	r2, #0
 801249c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801249e:	f001 f997 	bl	80137d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124a2:	e00d      	b.n	80124c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124aa:	d109      	bne.n	80124c0 <vTaskStartScheduler+0xa8>
 80124ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b0:	f383 8811 	msr	BASEPRI, r3
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	f3bf 8f4f 	dsb	sy
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	e7fe      	b.n	80124be <vTaskStartScheduler+0xa6>
}
 80124c0:	bf00      	nop
 80124c2:	3718      	adds	r7, #24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	08017e3c 	.word	0x08017e3c
 80124cc:	08012ae1 	.word	0x08012ae1
 80124d0:	20001038 	.word	0x20001038
 80124d4:	20001034 	.word	0x20001034
 80124d8:	20001020 	.word	0x20001020
 80124dc:	20001018 	.word	0x20001018

080124e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80124e0:	b480      	push	{r7}
 80124e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80124e4:	4b04      	ldr	r3, [pc, #16]	; (80124f8 <vTaskSuspendAll+0x18>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3301      	adds	r3, #1
 80124ea:	4a03      	ldr	r2, [pc, #12]	; (80124f8 <vTaskSuspendAll+0x18>)
 80124ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80124ee:	bf00      	nop
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr
 80124f8:	2000103c 	.word	0x2000103c

080124fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012502:	2300      	movs	r3, #0
 8012504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012506:	2300      	movs	r3, #0
 8012508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801250a:	4b41      	ldr	r3, [pc, #260]	; (8012610 <xTaskResumeAll+0x114>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d109      	bne.n	8012526 <xTaskResumeAll+0x2a>
 8012512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012516:	f383 8811 	msr	BASEPRI, r3
 801251a:	f3bf 8f6f 	isb	sy
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	603b      	str	r3, [r7, #0]
 8012524:	e7fe      	b.n	8012524 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012526:	f001 f9f1 	bl	801390c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801252a:	4b39      	ldr	r3, [pc, #228]	; (8012610 <xTaskResumeAll+0x114>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	3b01      	subs	r3, #1
 8012530:	4a37      	ldr	r2, [pc, #220]	; (8012610 <xTaskResumeAll+0x114>)
 8012532:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012534:	4b36      	ldr	r3, [pc, #216]	; (8012610 <xTaskResumeAll+0x114>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d162      	bne.n	8012602 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801253c:	4b35      	ldr	r3, [pc, #212]	; (8012614 <xTaskResumeAll+0x118>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d05e      	beq.n	8012602 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012544:	e02f      	b.n	80125a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012546:	4b34      	ldr	r3, [pc, #208]	; (8012618 <xTaskResumeAll+0x11c>)
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	3318      	adds	r3, #24
 8012552:	4618      	mov	r0, r3
 8012554:	f7fe fd88 	bl	8011068 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	3304      	adds	r3, #4
 801255c:	4618      	mov	r0, r3
 801255e:	f7fe fd83 	bl	8011068 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012566:	4b2d      	ldr	r3, [pc, #180]	; (801261c <xTaskResumeAll+0x120>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	429a      	cmp	r2, r3
 801256c:	d903      	bls.n	8012576 <xTaskResumeAll+0x7a>
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012572:	4a2a      	ldr	r2, [pc, #168]	; (801261c <xTaskResumeAll+0x120>)
 8012574:	6013      	str	r3, [r2, #0]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801257a:	4613      	mov	r3, r2
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4a27      	ldr	r2, [pc, #156]	; (8012620 <xTaskResumeAll+0x124>)
 8012584:	441a      	add	r2, r3
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	3304      	adds	r3, #4
 801258a:	4619      	mov	r1, r3
 801258c:	4610      	mov	r0, r2
 801258e:	f7fe fd0e 	bl	8010fae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012596:	4b23      	ldr	r3, [pc, #140]	; (8012624 <xTaskResumeAll+0x128>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259c:	429a      	cmp	r2, r3
 801259e:	d302      	bcc.n	80125a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80125a0:	4b21      	ldr	r3, [pc, #132]	; (8012628 <xTaskResumeAll+0x12c>)
 80125a2:	2201      	movs	r2, #1
 80125a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125a6:	4b1c      	ldr	r3, [pc, #112]	; (8012618 <xTaskResumeAll+0x11c>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1cb      	bne.n	8012546 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d001      	beq.n	80125b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80125b4:	f000 fb46 	bl	8012c44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80125b8:	4b1c      	ldr	r3, [pc, #112]	; (801262c <xTaskResumeAll+0x130>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d010      	beq.n	80125e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80125c4:	f000 f846 	bl	8012654 <xTaskIncrementTick>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d002      	beq.n	80125d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80125ce:	4b16      	ldr	r3, [pc, #88]	; (8012628 <xTaskResumeAll+0x12c>)
 80125d0:	2201      	movs	r2, #1
 80125d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	3b01      	subs	r3, #1
 80125d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1f1      	bne.n	80125c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80125e0:	4b12      	ldr	r3, [pc, #72]	; (801262c <xTaskResumeAll+0x130>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80125e6:	4b10      	ldr	r3, [pc, #64]	; (8012628 <xTaskResumeAll+0x12c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d009      	beq.n	8012602 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80125ee:	2301      	movs	r3, #1
 80125f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80125f2:	4b0f      	ldr	r3, [pc, #60]	; (8012630 <xTaskResumeAll+0x134>)
 80125f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012602:	f001 f9b1 	bl	8013968 <vPortExitCritical>

	return xAlreadyYielded;
 8012606:	68bb      	ldr	r3, [r7, #8]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3710      	adds	r7, #16
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	2000103c 	.word	0x2000103c
 8012614:	20001014 	.word	0x20001014
 8012618:	20000fd4 	.word	0x20000fd4
 801261c:	2000101c 	.word	0x2000101c
 8012620:	20000b44 	.word	0x20000b44
 8012624:	20000b40 	.word	0x20000b40
 8012628:	20001028 	.word	0x20001028
 801262c:	20001024 	.word	0x20001024
 8012630:	e000ed04 	.word	0xe000ed04

08012634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801263a:	4b05      	ldr	r3, [pc, #20]	; (8012650 <xTaskGetTickCount+0x1c>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012640:	687b      	ldr	r3, [r7, #4]
}
 8012642:	4618      	mov	r0, r3
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	20001018 	.word	0x20001018

08012654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b086      	sub	sp, #24
 8012658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801265a:	2300      	movs	r3, #0
 801265c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801265e:	4b4e      	ldr	r3, [pc, #312]	; (8012798 <xTaskIncrementTick+0x144>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f040 8088 	bne.w	8012778 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012668:	4b4c      	ldr	r3, [pc, #304]	; (801279c <xTaskIncrementTick+0x148>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	3301      	adds	r3, #1
 801266e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012670:	4a4a      	ldr	r2, [pc, #296]	; (801279c <xTaskIncrementTick+0x148>)
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d11f      	bne.n	80126bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801267c:	4b48      	ldr	r3, [pc, #288]	; (80127a0 <xTaskIncrementTick+0x14c>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d009      	beq.n	801269a <xTaskIncrementTick+0x46>
 8012686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268a:	f383 8811 	msr	BASEPRI, r3
 801268e:	f3bf 8f6f 	isb	sy
 8012692:	f3bf 8f4f 	dsb	sy
 8012696:	603b      	str	r3, [r7, #0]
 8012698:	e7fe      	b.n	8012698 <xTaskIncrementTick+0x44>
 801269a:	4b41      	ldr	r3, [pc, #260]	; (80127a0 <xTaskIncrementTick+0x14c>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	60fb      	str	r3, [r7, #12]
 80126a0:	4b40      	ldr	r3, [pc, #256]	; (80127a4 <xTaskIncrementTick+0x150>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	4a3e      	ldr	r2, [pc, #248]	; (80127a0 <xTaskIncrementTick+0x14c>)
 80126a6:	6013      	str	r3, [r2, #0]
 80126a8:	4a3e      	ldr	r2, [pc, #248]	; (80127a4 <xTaskIncrementTick+0x150>)
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	6013      	str	r3, [r2, #0]
 80126ae:	4b3e      	ldr	r3, [pc, #248]	; (80127a8 <xTaskIncrementTick+0x154>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	3301      	adds	r3, #1
 80126b4:	4a3c      	ldr	r2, [pc, #240]	; (80127a8 <xTaskIncrementTick+0x154>)
 80126b6:	6013      	str	r3, [r2, #0]
 80126b8:	f000 fac4 	bl	8012c44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80126bc:	4b3b      	ldr	r3, [pc, #236]	; (80127ac <xTaskIncrementTick+0x158>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	693a      	ldr	r2, [r7, #16]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d349      	bcc.n	801275a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126c6:	4b36      	ldr	r3, [pc, #216]	; (80127a0 <xTaskIncrementTick+0x14c>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d104      	bne.n	80126da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126d0:	4b36      	ldr	r3, [pc, #216]	; (80127ac <xTaskIncrementTick+0x158>)
 80126d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126d6:	601a      	str	r2, [r3, #0]
					break;
 80126d8:	e03f      	b.n	801275a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126da:	4b31      	ldr	r3, [pc, #196]	; (80127a0 <xTaskIncrementTick+0x14c>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80126ea:	693a      	ldr	r2, [r7, #16]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d203      	bcs.n	80126fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80126f2:	4a2e      	ldr	r2, [pc, #184]	; (80127ac <xTaskIncrementTick+0x158>)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80126f8:	e02f      	b.n	801275a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	3304      	adds	r3, #4
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe fcb2 	bl	8011068 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012708:	2b00      	cmp	r3, #0
 801270a:	d004      	beq.n	8012716 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	3318      	adds	r3, #24
 8012710:	4618      	mov	r0, r3
 8012712:	f7fe fca9 	bl	8011068 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801271a:	4b25      	ldr	r3, [pc, #148]	; (80127b0 <xTaskIncrementTick+0x15c>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	429a      	cmp	r2, r3
 8012720:	d903      	bls.n	801272a <xTaskIncrementTick+0xd6>
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012726:	4a22      	ldr	r2, [pc, #136]	; (80127b0 <xTaskIncrementTick+0x15c>)
 8012728:	6013      	str	r3, [r2, #0]
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272e:	4613      	mov	r3, r2
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	4413      	add	r3, r2
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	4a1f      	ldr	r2, [pc, #124]	; (80127b4 <xTaskIncrementTick+0x160>)
 8012738:	441a      	add	r2, r3
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	3304      	adds	r3, #4
 801273e:	4619      	mov	r1, r3
 8012740:	4610      	mov	r0, r2
 8012742:	f7fe fc34 	bl	8010fae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801274a:	4b1b      	ldr	r3, [pc, #108]	; (80127b8 <xTaskIncrementTick+0x164>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012750:	429a      	cmp	r2, r3
 8012752:	d3b8      	bcc.n	80126c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012754:	2301      	movs	r3, #1
 8012756:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012758:	e7b5      	b.n	80126c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801275a:	4b17      	ldr	r3, [pc, #92]	; (80127b8 <xTaskIncrementTick+0x164>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012760:	4914      	ldr	r1, [pc, #80]	; (80127b4 <xTaskIncrementTick+0x160>)
 8012762:	4613      	mov	r3, r2
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	440b      	add	r3, r1
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b01      	cmp	r3, #1
 8012770:	d907      	bls.n	8012782 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8012772:	2301      	movs	r3, #1
 8012774:	617b      	str	r3, [r7, #20]
 8012776:	e004      	b.n	8012782 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012778:	4b10      	ldr	r3, [pc, #64]	; (80127bc <xTaskIncrementTick+0x168>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	3301      	adds	r3, #1
 801277e:	4a0f      	ldr	r2, [pc, #60]	; (80127bc <xTaskIncrementTick+0x168>)
 8012780:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012782:	4b0f      	ldr	r3, [pc, #60]	; (80127c0 <xTaskIncrementTick+0x16c>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801278a:	2301      	movs	r3, #1
 801278c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801278e:	697b      	ldr	r3, [r7, #20]
}
 8012790:	4618      	mov	r0, r3
 8012792:	3718      	adds	r7, #24
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	2000103c 	.word	0x2000103c
 801279c:	20001018 	.word	0x20001018
 80127a0:	20000fcc 	.word	0x20000fcc
 80127a4:	20000fd0 	.word	0x20000fd0
 80127a8:	2000102c 	.word	0x2000102c
 80127ac:	20001034 	.word	0x20001034
 80127b0:	2000101c 	.word	0x2000101c
 80127b4:	20000b44 	.word	0x20000b44
 80127b8:	20000b40 	.word	0x20000b40
 80127bc:	20001024 	.word	0x20001024
 80127c0:	20001028 	.word	0x20001028

080127c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80127ca:	4b27      	ldr	r3, [pc, #156]	; (8012868 <vTaskSwitchContext+0xa4>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d003      	beq.n	80127da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80127d2:	4b26      	ldr	r3, [pc, #152]	; (801286c <vTaskSwitchContext+0xa8>)
 80127d4:	2201      	movs	r2, #1
 80127d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80127d8:	e040      	b.n	801285c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80127da:	4b24      	ldr	r3, [pc, #144]	; (801286c <vTaskSwitchContext+0xa8>)
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127e0:	4b23      	ldr	r3, [pc, #140]	; (8012870 <vTaskSwitchContext+0xac>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	60fb      	str	r3, [r7, #12]
 80127e6:	e00f      	b.n	8012808 <vTaskSwitchContext+0x44>
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d109      	bne.n	8012802 <vTaskSwitchContext+0x3e>
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	f383 8811 	msr	BASEPRI, r3
 80127f6:	f3bf 8f6f 	isb	sy
 80127fa:	f3bf 8f4f 	dsb	sy
 80127fe:	607b      	str	r3, [r7, #4]
 8012800:	e7fe      	b.n	8012800 <vTaskSwitchContext+0x3c>
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	3b01      	subs	r3, #1
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	491a      	ldr	r1, [pc, #104]	; (8012874 <vTaskSwitchContext+0xb0>)
 801280a:	68fa      	ldr	r2, [r7, #12]
 801280c:	4613      	mov	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	4413      	add	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	440b      	add	r3, r1
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d0e5      	beq.n	80127e8 <vTaskSwitchContext+0x24>
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	4613      	mov	r3, r2
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	4413      	add	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4a13      	ldr	r2, [pc, #76]	; (8012874 <vTaskSwitchContext+0xb0>)
 8012828:	4413      	add	r3, r2
 801282a:	60bb      	str	r3, [r7, #8]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	605a      	str	r2, [r3, #4]
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	3308      	adds	r3, #8
 801283e:	429a      	cmp	r2, r3
 8012840:	d104      	bne.n	801284c <vTaskSwitchContext+0x88>
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	685a      	ldr	r2, [r3, #4]
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	605a      	str	r2, [r3, #4]
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	4a09      	ldr	r2, [pc, #36]	; (8012878 <vTaskSwitchContext+0xb4>)
 8012854:	6013      	str	r3, [r2, #0]
 8012856:	4a06      	ldr	r2, [pc, #24]	; (8012870 <vTaskSwitchContext+0xac>)
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6013      	str	r3, [r2, #0]
}
 801285c:	bf00      	nop
 801285e:	3714      	adds	r7, #20
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr
 8012868:	2000103c 	.word	0x2000103c
 801286c:	20001028 	.word	0x20001028
 8012870:	2000101c 	.word	0x2000101c
 8012874:	20000b44 	.word	0x20000b44
 8012878:	20000b40 	.word	0x20000b40

0801287c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d109      	bne.n	80128a0 <vTaskPlaceOnEventList+0x24>
 801288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012890:	f383 8811 	msr	BASEPRI, r3
 8012894:	f3bf 8f6f 	isb	sy
 8012898:	f3bf 8f4f 	dsb	sy
 801289c:	60fb      	str	r3, [r7, #12]
 801289e:	e7fe      	b.n	801289e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128a0:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <vTaskPlaceOnEventList+0x44>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	3318      	adds	r3, #24
 80128a6:	4619      	mov	r1, r3
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7fe fba4 	bl	8010ff6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128ae:	2101      	movs	r1, #1
 80128b0:	6838      	ldr	r0, [r7, #0]
 80128b2:	f000 fb6d 	bl	8012f90 <prvAddCurrentTaskToDelayedList>
}
 80128b6:	bf00      	nop
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	20000b40 	.word	0x20000b40

080128c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d109      	bne.n	80128ea <vTaskPlaceOnEventListRestricted+0x26>
 80128d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	617b      	str	r3, [r7, #20]
 80128e8:	e7fe      	b.n	80128e8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128ea:	4b0a      	ldr	r3, [pc, #40]	; (8012914 <vTaskPlaceOnEventListRestricted+0x50>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	3318      	adds	r3, #24
 80128f0:	4619      	mov	r1, r3
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7fe fb5b 	bl	8010fae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80128fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012902:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012904:	6879      	ldr	r1, [r7, #4]
 8012906:	68b8      	ldr	r0, [r7, #8]
 8012908:	f000 fb42 	bl	8012f90 <prvAddCurrentTaskToDelayedList>
	}
 801290c:	bf00      	nop
 801290e:	3718      	adds	r7, #24
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	20000b40 	.word	0x20000b40

08012918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d109      	bne.n	8012942 <xTaskRemoveFromEventList+0x2a>
 801292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012932:	f383 8811 	msr	BASEPRI, r3
 8012936:	f3bf 8f6f 	isb	sy
 801293a:	f3bf 8f4f 	dsb	sy
 801293e:	60fb      	str	r3, [r7, #12]
 8012940:	e7fe      	b.n	8012940 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	3318      	adds	r3, #24
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe fb8e 	bl	8011068 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801294c:	4b1d      	ldr	r3, [pc, #116]	; (80129c4 <xTaskRemoveFromEventList+0xac>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d11d      	bne.n	8012990 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	3304      	adds	r3, #4
 8012958:	4618      	mov	r0, r3
 801295a:	f7fe fb85 	bl	8011068 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012962:	4b19      	ldr	r3, [pc, #100]	; (80129c8 <xTaskRemoveFromEventList+0xb0>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	429a      	cmp	r2, r3
 8012968:	d903      	bls.n	8012972 <xTaskRemoveFromEventList+0x5a>
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296e:	4a16      	ldr	r2, [pc, #88]	; (80129c8 <xTaskRemoveFromEventList+0xb0>)
 8012970:	6013      	str	r3, [r2, #0]
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012976:	4613      	mov	r3, r2
 8012978:	009b      	lsls	r3, r3, #2
 801297a:	4413      	add	r3, r2
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	4a13      	ldr	r2, [pc, #76]	; (80129cc <xTaskRemoveFromEventList+0xb4>)
 8012980:	441a      	add	r2, r3
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	3304      	adds	r3, #4
 8012986:	4619      	mov	r1, r3
 8012988:	4610      	mov	r0, r2
 801298a:	f7fe fb10 	bl	8010fae <vListInsertEnd>
 801298e:	e005      	b.n	801299c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	3318      	adds	r3, #24
 8012994:	4619      	mov	r1, r3
 8012996:	480e      	ldr	r0, [pc, #56]	; (80129d0 <xTaskRemoveFromEventList+0xb8>)
 8012998:	f7fe fb09 	bl	8010fae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129a0:	4b0c      	ldr	r3, [pc, #48]	; (80129d4 <xTaskRemoveFromEventList+0xbc>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d905      	bls.n	80129b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80129aa:	2301      	movs	r3, #1
 80129ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80129ae:	4b0a      	ldr	r3, [pc, #40]	; (80129d8 <xTaskRemoveFromEventList+0xc0>)
 80129b0:	2201      	movs	r2, #1
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	e001      	b.n	80129ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80129b6:	2300      	movs	r3, #0
 80129b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80129ba:	697b      	ldr	r3, [r7, #20]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3718      	adds	r7, #24
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	2000103c 	.word	0x2000103c
 80129c8:	2000101c 	.word	0x2000101c
 80129cc:	20000b44 	.word	0x20000b44
 80129d0:	20000fd4 	.word	0x20000fd4
 80129d4:	20000b40 	.word	0x20000b40
 80129d8:	20001028 	.word	0x20001028

080129dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80129e4:	4b06      	ldr	r3, [pc, #24]	; (8012a00 <vTaskInternalSetTimeOutState+0x24>)
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80129ec:	4b05      	ldr	r3, [pc, #20]	; (8012a04 <vTaskInternalSetTimeOutState+0x28>)
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	605a      	str	r2, [r3, #4]
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	2000102c 	.word	0x2000102c
 8012a04:	20001018 	.word	0x20001018

08012a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b088      	sub	sp, #32
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d109      	bne.n	8012a2c <xTaskCheckForTimeOut+0x24>
 8012a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1c:	f383 8811 	msr	BASEPRI, r3
 8012a20:	f3bf 8f6f 	isb	sy
 8012a24:	f3bf 8f4f 	dsb	sy
 8012a28:	613b      	str	r3, [r7, #16]
 8012a2a:	e7fe      	b.n	8012a2a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d109      	bne.n	8012a46 <xTaskCheckForTimeOut+0x3e>
 8012a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a36:	f383 8811 	msr	BASEPRI, r3
 8012a3a:	f3bf 8f6f 	isb	sy
 8012a3e:	f3bf 8f4f 	dsb	sy
 8012a42:	60fb      	str	r3, [r7, #12]
 8012a44:	e7fe      	b.n	8012a44 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012a46:	f000 ff61 	bl	801390c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012a4a:	4b1d      	ldr	r3, [pc, #116]	; (8012ac0 <xTaskCheckForTimeOut+0xb8>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	69ba      	ldr	r2, [r7, #24]
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a62:	d102      	bne.n	8012a6a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012a64:	2300      	movs	r3, #0
 8012a66:	61fb      	str	r3, [r7, #28]
 8012a68:	e023      	b.n	8012ab2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	4b15      	ldr	r3, [pc, #84]	; (8012ac4 <xTaskCheckForTimeOut+0xbc>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d007      	beq.n	8012a86 <xTaskCheckForTimeOut+0x7e>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	69ba      	ldr	r2, [r7, #24]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d302      	bcc.n	8012a86 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012a80:	2301      	movs	r3, #1
 8012a82:	61fb      	str	r3, [r7, #28]
 8012a84:	e015      	b.n	8012ab2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	697a      	ldr	r2, [r7, #20]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d20b      	bcs.n	8012aa8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	681a      	ldr	r2, [r3, #0]
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	1ad2      	subs	r2, r2, r3
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff ff9d 	bl	80129dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	61fb      	str	r3, [r7, #28]
 8012aa6:	e004      	b.n	8012ab2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012ab2:	f000 ff59 	bl	8013968 <vPortExitCritical>

	return xReturn;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3720      	adds	r7, #32
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	20001018 	.word	0x20001018
 8012ac4:	2000102c 	.word	0x2000102c

08012ac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012acc:	4b03      	ldr	r3, [pc, #12]	; (8012adc <vTaskMissedYield+0x14>)
 8012ace:	2201      	movs	r2, #1
 8012ad0:	601a      	str	r2, [r3, #0]
}
 8012ad2:	bf00      	nop
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr
 8012adc:	20001028 	.word	0x20001028

08012ae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ae8:	f000 f852 	bl	8012b90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <prvIdleTask+0x28>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d9f9      	bls.n	8012ae8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012af4:	4b05      	ldr	r3, [pc, #20]	; (8012b0c <prvIdleTask+0x2c>)
 8012af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012b04:	e7f0      	b.n	8012ae8 <prvIdleTask+0x8>
 8012b06:	bf00      	nop
 8012b08:	20000b44 	.word	0x20000b44
 8012b0c:	e000ed04 	.word	0xe000ed04

08012b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b16:	2300      	movs	r3, #0
 8012b18:	607b      	str	r3, [r7, #4]
 8012b1a:	e00c      	b.n	8012b36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	4613      	mov	r3, r2
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	4a12      	ldr	r2, [pc, #72]	; (8012b70 <prvInitialiseTaskLists+0x60>)
 8012b28:	4413      	add	r3, r2
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fe fa12 	bl	8010f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	3301      	adds	r3, #1
 8012b34:	607b      	str	r3, [r7, #4]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2b37      	cmp	r3, #55	; 0x37
 8012b3a:	d9ef      	bls.n	8012b1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b3c:	480d      	ldr	r0, [pc, #52]	; (8012b74 <prvInitialiseTaskLists+0x64>)
 8012b3e:	f7fe fa09 	bl	8010f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b42:	480d      	ldr	r0, [pc, #52]	; (8012b78 <prvInitialiseTaskLists+0x68>)
 8012b44:	f7fe fa06 	bl	8010f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b48:	480c      	ldr	r0, [pc, #48]	; (8012b7c <prvInitialiseTaskLists+0x6c>)
 8012b4a:	f7fe fa03 	bl	8010f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b4e:	480c      	ldr	r0, [pc, #48]	; (8012b80 <prvInitialiseTaskLists+0x70>)
 8012b50:	f7fe fa00 	bl	8010f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b54:	480b      	ldr	r0, [pc, #44]	; (8012b84 <prvInitialiseTaskLists+0x74>)
 8012b56:	f7fe f9fd 	bl	8010f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012b5a:	4b0b      	ldr	r3, [pc, #44]	; (8012b88 <prvInitialiseTaskLists+0x78>)
 8012b5c:	4a05      	ldr	r2, [pc, #20]	; (8012b74 <prvInitialiseTaskLists+0x64>)
 8012b5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012b60:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <prvInitialiseTaskLists+0x7c>)
 8012b62:	4a05      	ldr	r2, [pc, #20]	; (8012b78 <prvInitialiseTaskLists+0x68>)
 8012b64:	601a      	str	r2, [r3, #0]
}
 8012b66:	bf00      	nop
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}
 8012b6e:	bf00      	nop
 8012b70:	20000b44 	.word	0x20000b44
 8012b74:	20000fa4 	.word	0x20000fa4
 8012b78:	20000fb8 	.word	0x20000fb8
 8012b7c:	20000fd4 	.word	0x20000fd4
 8012b80:	20000fe8 	.word	0x20000fe8
 8012b84:	20001000 	.word	0x20001000
 8012b88:	20000fcc 	.word	0x20000fcc
 8012b8c:	20000fd0 	.word	0x20000fd0

08012b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012b96:	e019      	b.n	8012bcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012b98:	f000 feb8 	bl	801390c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b9c:	4b0f      	ldr	r3, [pc, #60]	; (8012bdc <prvCheckTasksWaitingTermination+0x4c>)
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7fe fa5d 	bl	8011068 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012bae:	4b0c      	ldr	r3, [pc, #48]	; (8012be0 <prvCheckTasksWaitingTermination+0x50>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	4a0a      	ldr	r2, [pc, #40]	; (8012be0 <prvCheckTasksWaitingTermination+0x50>)
 8012bb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012bb8:	4b0a      	ldr	r3, [pc, #40]	; (8012be4 <prvCheckTasksWaitingTermination+0x54>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	4a09      	ldr	r2, [pc, #36]	; (8012be4 <prvCheckTasksWaitingTermination+0x54>)
 8012bc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012bc2:	f000 fed1 	bl	8013968 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 f80e 	bl	8012be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012bcc:	4b05      	ldr	r3, [pc, #20]	; (8012be4 <prvCheckTasksWaitingTermination+0x54>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d1e1      	bne.n	8012b98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012bd4:	bf00      	nop
 8012bd6:	3708      	adds	r7, #8
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	20000fe8 	.word	0x20000fe8
 8012be0:	20001014 	.word	0x20001014
 8012be4:	20000ffc 	.word	0x20000ffc

08012be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d108      	bne.n	8012c0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f001 f860 	bl	8013cc4 <vPortFree>
				vPortFree( pxTCB );
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f001 f85d 	bl	8013cc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012c0a:	e017      	b.n	8012c3c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d103      	bne.n	8012c1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f001 f854 	bl	8013cc4 <vPortFree>
	}
 8012c1c:	e00e      	b.n	8012c3c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d009      	beq.n	8012c3c <prvDeleteTCB+0x54>
 8012c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2c:	f383 8811 	msr	BASEPRI, r3
 8012c30:	f3bf 8f6f 	isb	sy
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	e7fe      	b.n	8012c3a <prvDeleteTCB+0x52>
	}
 8012c3c:	bf00      	nop
 8012c3e:	3710      	adds	r7, #16
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c4a:	4b0c      	ldr	r3, [pc, #48]	; (8012c7c <prvResetNextTaskUnblockTime+0x38>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d104      	bne.n	8012c5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012c54:	4b0a      	ldr	r3, [pc, #40]	; (8012c80 <prvResetNextTaskUnblockTime+0x3c>)
 8012c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012c5c:	e008      	b.n	8012c70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c5e:	4b07      	ldr	r3, [pc, #28]	; (8012c7c <prvResetNextTaskUnblockTime+0x38>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	4a04      	ldr	r2, [pc, #16]	; (8012c80 <prvResetNextTaskUnblockTime+0x3c>)
 8012c6e:	6013      	str	r3, [r2, #0]
}
 8012c70:	bf00      	nop
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	20000fcc 	.word	0x20000fcc
 8012c80:	20001034 	.word	0x20001034

08012c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012c8a:	4b0b      	ldr	r3, [pc, #44]	; (8012cb8 <xTaskGetSchedulerState+0x34>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012c92:	2301      	movs	r3, #1
 8012c94:	607b      	str	r3, [r7, #4]
 8012c96:	e008      	b.n	8012caa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c98:	4b08      	ldr	r3, [pc, #32]	; (8012cbc <xTaskGetSchedulerState+0x38>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d102      	bne.n	8012ca6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	607b      	str	r3, [r7, #4]
 8012ca4:	e001      	b.n	8012caa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012caa:	687b      	ldr	r3, [r7, #4]
	}
 8012cac:	4618      	mov	r0, r3
 8012cae:	370c      	adds	r7, #12
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	20001020 	.word	0x20001020
 8012cbc:	2000103c 	.word	0x2000103c

08012cc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d051      	beq.n	8012d7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cda:	4b2a      	ldr	r3, [pc, #168]	; (8012d84 <xTaskPriorityInherit+0xc4>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d241      	bcs.n	8012d68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	db06      	blt.n	8012cfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cec:	4b25      	ldr	r3, [pc, #148]	; (8012d84 <xTaskPriorityInherit+0xc4>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	6959      	ldr	r1, [r3, #20]
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d02:	4613      	mov	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	4413      	add	r3, r2
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	4a1f      	ldr	r2, [pc, #124]	; (8012d88 <xTaskPriorityInherit+0xc8>)
 8012d0c:	4413      	add	r3, r2
 8012d0e:	4299      	cmp	r1, r3
 8012d10:	d122      	bne.n	8012d58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	3304      	adds	r3, #4
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe f9a6 	bl	8011068 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d1c:	4b19      	ldr	r3, [pc, #100]	; (8012d84 <xTaskPriorityInherit+0xc4>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d2a:	4b18      	ldr	r3, [pc, #96]	; (8012d8c <xTaskPriorityInherit+0xcc>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d903      	bls.n	8012d3a <xTaskPriorityInherit+0x7a>
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d36:	4a15      	ldr	r2, [pc, #84]	; (8012d8c <xTaskPriorityInherit+0xcc>)
 8012d38:	6013      	str	r3, [r2, #0]
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d3e:	4613      	mov	r3, r2
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	4413      	add	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4a10      	ldr	r2, [pc, #64]	; (8012d88 <xTaskPriorityInherit+0xc8>)
 8012d48:	441a      	add	r2, r3
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	3304      	adds	r3, #4
 8012d4e:	4619      	mov	r1, r3
 8012d50:	4610      	mov	r0, r2
 8012d52:	f7fe f92c 	bl	8010fae <vListInsertEnd>
 8012d56:	e004      	b.n	8012d62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d58:	4b0a      	ldr	r3, [pc, #40]	; (8012d84 <xTaskPriorityInherit+0xc4>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012d62:	2301      	movs	r3, #1
 8012d64:	60fb      	str	r3, [r7, #12]
 8012d66:	e008      	b.n	8012d7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d6c:	4b05      	ldr	r3, [pc, #20]	; (8012d84 <xTaskPriorityInherit+0xc4>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d201      	bcs.n	8012d7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012d76:	2301      	movs	r3, #1
 8012d78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
	}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3710      	adds	r7, #16
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	20000b40 	.word	0x20000b40
 8012d88:	20000b44 	.word	0x20000b44
 8012d8c:	2000101c 	.word	0x2000101c

08012d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d054      	beq.n	8012e50 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012da6:	4b2d      	ldr	r3, [pc, #180]	; (8012e5c <xTaskPriorityDisinherit+0xcc>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	693a      	ldr	r2, [r7, #16]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d009      	beq.n	8012dc4 <xTaskPriorityDisinherit+0x34>
 8012db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	60fb      	str	r3, [r7, #12]
 8012dc2:	e7fe      	b.n	8012dc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d109      	bne.n	8012de0 <xTaskPriorityDisinherit+0x50>
 8012dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	60bb      	str	r3, [r7, #8]
 8012dde:	e7fe      	b.n	8012dde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012de4:	1e5a      	subs	r2, r3, #1
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d02c      	beq.n	8012e50 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d128      	bne.n	8012e50 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	3304      	adds	r3, #4
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe f930 	bl	8011068 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e20:	4b0f      	ldr	r3, [pc, #60]	; (8012e60 <xTaskPriorityDisinherit+0xd0>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d903      	bls.n	8012e30 <xTaskPriorityDisinherit+0xa0>
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2c:	4a0c      	ldr	r2, [pc, #48]	; (8012e60 <xTaskPriorityDisinherit+0xd0>)
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e34:	4613      	mov	r3, r2
 8012e36:	009b      	lsls	r3, r3, #2
 8012e38:	4413      	add	r3, r2
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	4a09      	ldr	r2, [pc, #36]	; (8012e64 <xTaskPriorityDisinherit+0xd4>)
 8012e3e:	441a      	add	r2, r3
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	3304      	adds	r3, #4
 8012e44:	4619      	mov	r1, r3
 8012e46:	4610      	mov	r0, r2
 8012e48:	f7fe f8b1 	bl	8010fae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e50:	697b      	ldr	r3, [r7, #20]
	}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3718      	adds	r7, #24
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20000b40 	.word	0x20000b40
 8012e60:	2000101c 	.word	0x2000101c
 8012e64:	20000b44 	.word	0x20000b44

08012e68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012e76:	2301      	movs	r3, #1
 8012e78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d068      	beq.n	8012f52 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d109      	bne.n	8012e9c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8c:	f383 8811 	msr	BASEPRI, r3
 8012e90:	f3bf 8f6f 	isb	sy
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	60fb      	str	r3, [r7, #12]
 8012e9a:	e7fe      	b.n	8012e9a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ea0:	683a      	ldr	r2, [r7, #0]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d902      	bls.n	8012eac <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	61fb      	str	r3, [r7, #28]
 8012eaa:	e002      	b.n	8012eb2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012eb0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb6:	69fa      	ldr	r2, [r7, #28]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d04a      	beq.n	8012f52 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d145      	bne.n	8012f52 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ec6:	4b25      	ldr	r3, [pc, #148]	; (8012f5c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	69ba      	ldr	r2, [r7, #24]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d109      	bne.n	8012ee4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	60bb      	str	r3, [r7, #8]
 8012ee2:	e7fe      	b.n	8012ee2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	69fa      	ldr	r2, [r7, #28]
 8012eee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	db04      	blt.n	8012f02 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	6959      	ldr	r1, [r3, #20]
 8012f06:	693a      	ldr	r2, [r7, #16]
 8012f08:	4613      	mov	r3, r2
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	4413      	add	r3, r2
 8012f0e:	009b      	lsls	r3, r3, #2
 8012f10:	4a13      	ldr	r2, [pc, #76]	; (8012f60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f12:	4413      	add	r3, r2
 8012f14:	4299      	cmp	r1, r3
 8012f16:	d11c      	bne.n	8012f52 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	3304      	adds	r3, #4
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7fe f8a3 	bl	8011068 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f26:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d903      	bls.n	8012f36 <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f32:	4a0c      	ldr	r2, [pc, #48]	; (8012f64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f34:	6013      	str	r3, [r2, #0]
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	4a07      	ldr	r2, [pc, #28]	; (8012f60 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f44:	441a      	add	r2, r3
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	3304      	adds	r3, #4
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	f7fe f82e 	bl	8010fae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f52:	bf00      	nop
 8012f54:	3720      	adds	r7, #32
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20000b40 	.word	0x20000b40
 8012f60:	20000b44 	.word	0x20000b44
 8012f64:	2000101c 	.word	0x2000101c

08012f68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012f68:	b480      	push	{r7}
 8012f6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012f6c:	4b07      	ldr	r3, [pc, #28]	; (8012f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d004      	beq.n	8012f7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012f74:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f7a:	3201      	adds	r2, #1
 8012f7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012f7e:	4b03      	ldr	r3, [pc, #12]	; (8012f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8012f80:	681b      	ldr	r3, [r3, #0]
	}
 8012f82:	4618      	mov	r0, r3
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr
 8012f8c:	20000b40 	.word	0x20000b40

08012f90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012f9a:	4b21      	ldr	r3, [pc, #132]	; (8013020 <prvAddCurrentTaskToDelayedList+0x90>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fa0:	4b20      	ldr	r3, [pc, #128]	; (8013024 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fe f85e 	bl	8011068 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fb2:	d10a      	bne.n	8012fca <prvAddCurrentTaskToDelayedList+0x3a>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d007      	beq.n	8012fca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fba:	4b1a      	ldr	r3, [pc, #104]	; (8013024 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	4819      	ldr	r0, [pc, #100]	; (8013028 <prvAddCurrentTaskToDelayedList+0x98>)
 8012fc4:	f7fd fff3 	bl	8010fae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012fc8:	e026      	b.n	8013018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012fca:	68fa      	ldr	r2, [r7, #12]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	4413      	add	r3, r2
 8012fd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012fd2:	4b14      	ldr	r3, [pc, #80]	; (8013024 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d209      	bcs.n	8012ff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fe2:	4b12      	ldr	r3, [pc, #72]	; (801302c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	4b0f      	ldr	r3, [pc, #60]	; (8013024 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	3304      	adds	r3, #4
 8012fec:	4619      	mov	r1, r3
 8012fee:	4610      	mov	r0, r2
 8012ff0:	f7fe f801 	bl	8010ff6 <vListInsert>
}
 8012ff4:	e010      	b.n	8013018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ff6:	4b0e      	ldr	r3, [pc, #56]	; (8013030 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	3304      	adds	r3, #4
 8013000:	4619      	mov	r1, r3
 8013002:	4610      	mov	r0, r2
 8013004:	f7fd fff7 	bl	8010ff6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013008:	4b0a      	ldr	r3, [pc, #40]	; (8013034 <prvAddCurrentTaskToDelayedList+0xa4>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	68ba      	ldr	r2, [r7, #8]
 801300e:	429a      	cmp	r2, r3
 8013010:	d202      	bcs.n	8013018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013012:	4a08      	ldr	r2, [pc, #32]	; (8013034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	6013      	str	r3, [r2, #0]
}
 8013018:	bf00      	nop
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	20001018 	.word	0x20001018
 8013024:	20000b40 	.word	0x20000b40
 8013028:	20001000 	.word	0x20001000
 801302c:	20000fd0 	.word	0x20000fd0
 8013030:	20000fcc 	.word	0x20000fcc
 8013034:	20001034 	.word	0x20001034

08013038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08a      	sub	sp, #40	; 0x28
 801303c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801303e:	2300      	movs	r3, #0
 8013040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013042:	f000 faff 	bl	8013644 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013046:	4b1c      	ldr	r3, [pc, #112]	; (80130b8 <xTimerCreateTimerTask+0x80>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d021      	beq.n	8013092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801304e:	2300      	movs	r3, #0
 8013050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013052:	2300      	movs	r3, #0
 8013054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013056:	1d3a      	adds	r2, r7, #4
 8013058:	f107 0108 	add.w	r1, r7, #8
 801305c:	f107 030c 	add.w	r3, r7, #12
 8013060:	4618      	mov	r0, r3
 8013062:	f7fd ff5d 	bl	8010f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013066:	6879      	ldr	r1, [r7, #4]
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	9202      	str	r2, [sp, #8]
 801306e:	9301      	str	r3, [sp, #4]
 8013070:	2302      	movs	r3, #2
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	2300      	movs	r3, #0
 8013076:	460a      	mov	r2, r1
 8013078:	4910      	ldr	r1, [pc, #64]	; (80130bc <xTimerCreateTimerTask+0x84>)
 801307a:	4811      	ldr	r0, [pc, #68]	; (80130c0 <xTimerCreateTimerTask+0x88>)
 801307c:	f7fe ff0e 	bl	8011e9c <xTaskCreateStatic>
 8013080:	4602      	mov	r2, r0
 8013082:	4b10      	ldr	r3, [pc, #64]	; (80130c4 <xTimerCreateTimerTask+0x8c>)
 8013084:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013086:	4b0f      	ldr	r3, [pc, #60]	; (80130c4 <xTimerCreateTimerTask+0x8c>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d001      	beq.n	8013092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801308e:	2301      	movs	r3, #1
 8013090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d109      	bne.n	80130ac <xTimerCreateTimerTask+0x74>
 8013098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	613b      	str	r3, [r7, #16]
 80130aa:	e7fe      	b.n	80130aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80130ac:	697b      	ldr	r3, [r7, #20]
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3718      	adds	r7, #24
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	20001070 	.word	0x20001070
 80130bc:	08017e44 	.word	0x08017e44
 80130c0:	080131f9 	.word	0x080131f9
 80130c4:	20001074 	.word	0x20001074

080130c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b08a      	sub	sp, #40	; 0x28
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]
 80130d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80130d6:	2300      	movs	r3, #0
 80130d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d109      	bne.n	80130f4 <xTimerGenericCommand+0x2c>
 80130e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e4:	f383 8811 	msr	BASEPRI, r3
 80130e8:	f3bf 8f6f 	isb	sy
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	623b      	str	r3, [r7, #32]
 80130f2:	e7fe      	b.n	80130f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80130f4:	4b19      	ldr	r3, [pc, #100]	; (801315c <xTimerGenericCommand+0x94>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d02a      	beq.n	8013152 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	2b05      	cmp	r3, #5
 801310c:	dc18      	bgt.n	8013140 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801310e:	f7ff fdb9 	bl	8012c84 <xTaskGetSchedulerState>
 8013112:	4603      	mov	r3, r0
 8013114:	2b02      	cmp	r3, #2
 8013116:	d109      	bne.n	801312c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013118:	4b10      	ldr	r3, [pc, #64]	; (801315c <xTimerGenericCommand+0x94>)
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	f107 0110 	add.w	r1, r7, #16
 8013120:	2300      	movs	r3, #0
 8013122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013124:	f7fe f93a 	bl	801139c <xQueueGenericSend>
 8013128:	6278      	str	r0, [r7, #36]	; 0x24
 801312a:	e012      	b.n	8013152 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801312c:	4b0b      	ldr	r3, [pc, #44]	; (801315c <xTimerGenericCommand+0x94>)
 801312e:	6818      	ldr	r0, [r3, #0]
 8013130:	f107 0110 	add.w	r1, r7, #16
 8013134:	2300      	movs	r3, #0
 8013136:	2200      	movs	r2, #0
 8013138:	f7fe f930 	bl	801139c <xQueueGenericSend>
 801313c:	6278      	str	r0, [r7, #36]	; 0x24
 801313e:	e008      	b.n	8013152 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013140:	4b06      	ldr	r3, [pc, #24]	; (801315c <xTimerGenericCommand+0x94>)
 8013142:	6818      	ldr	r0, [r3, #0]
 8013144:	f107 0110 	add.w	r1, r7, #16
 8013148:	2300      	movs	r3, #0
 801314a:	683a      	ldr	r2, [r7, #0]
 801314c:	f7fe fa20 	bl	8011590 <xQueueGenericSendFromISR>
 8013150:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013154:	4618      	mov	r0, r3
 8013156:	3728      	adds	r7, #40	; 0x28
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	20001070 	.word	0x20001070

08013160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b088      	sub	sp, #32
 8013164:	af02      	add	r7, sp, #8
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801316a:	4b22      	ldr	r3, [pc, #136]	; (80131f4 <prvProcessExpiredTimer+0x94>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	68db      	ldr	r3, [r3, #12]
 8013172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	3304      	adds	r3, #4
 8013178:	4618      	mov	r0, r3
 801317a:	f7fd ff75 	bl	8011068 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013184:	f003 0304 	and.w	r3, r3, #4
 8013188:	2b00      	cmp	r3, #0
 801318a:	d021      	beq.n	80131d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	699a      	ldr	r2, [r3, #24]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	18d1      	adds	r1, r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	6978      	ldr	r0, [r7, #20]
 801319a:	f000 f8d1 	bl	8013340 <prvInsertTimerInActiveList>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d01e      	beq.n	80131e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131a4:	2300      	movs	r3, #0
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	2300      	movs	r3, #0
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	2100      	movs	r1, #0
 80131ae:	6978      	ldr	r0, [r7, #20]
 80131b0:	f7ff ff8a 	bl	80130c8 <xTimerGenericCommand>
 80131b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d112      	bne.n	80131e2 <prvProcessExpiredTimer+0x82>
 80131bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c0:	f383 8811 	msr	BASEPRI, r3
 80131c4:	f3bf 8f6f 	isb	sy
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	60fb      	str	r3, [r7, #12]
 80131ce:	e7fe      	b.n	80131ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d6:	f023 0301 	bic.w	r3, r3, #1
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	6978      	ldr	r0, [r7, #20]
 80131e8:	4798      	blx	r3
}
 80131ea:	bf00      	nop
 80131ec:	3718      	adds	r7, #24
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	20001068 	.word	0x20001068

080131f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013200:	f107 0308 	add.w	r3, r7, #8
 8013204:	4618      	mov	r0, r3
 8013206:	f000 f857 	bl	80132b8 <prvGetNextExpireTime>
 801320a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	4619      	mov	r1, r3
 8013210:	68f8      	ldr	r0, [r7, #12]
 8013212:	f000 f803 	bl	801321c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013216:	f000 f8d5 	bl	80133c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801321a:	e7f1      	b.n	8013200 <prvTimerTask+0x8>

0801321c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013226:	f7ff f95b 	bl	80124e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801322a:	f107 0308 	add.w	r3, r7, #8
 801322e:	4618      	mov	r0, r3
 8013230:	f000 f866 	bl	8013300 <prvSampleTimeNow>
 8013234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d130      	bne.n	801329e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10a      	bne.n	8013258 <prvProcessTimerOrBlockTask+0x3c>
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	429a      	cmp	r2, r3
 8013248:	d806      	bhi.n	8013258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801324a:	f7ff f957 	bl	80124fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801324e:	68f9      	ldr	r1, [r7, #12]
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7ff ff85 	bl	8013160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013256:	e024      	b.n	80132a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d008      	beq.n	8013270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801325e:	4b13      	ldr	r3, [pc, #76]	; (80132ac <prvProcessTimerOrBlockTask+0x90>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d101      	bne.n	801326c <prvProcessTimerOrBlockTask+0x50>
 8013268:	2301      	movs	r3, #1
 801326a:	e000      	b.n	801326e <prvProcessTimerOrBlockTask+0x52>
 801326c:	2300      	movs	r3, #0
 801326e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013270:	4b0f      	ldr	r3, [pc, #60]	; (80132b0 <prvProcessTimerOrBlockTask+0x94>)
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	683a      	ldr	r2, [r7, #0]
 801327c:	4619      	mov	r1, r3
 801327e:	f7fe fdd9 	bl	8011e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013282:	f7ff f93b 	bl	80124fc <xTaskResumeAll>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d10a      	bne.n	80132a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801328c:	4b09      	ldr	r3, [pc, #36]	; (80132b4 <prvProcessTimerOrBlockTask+0x98>)
 801328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013292:	601a      	str	r2, [r3, #0]
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	f3bf 8f6f 	isb	sy
}
 801329c:	e001      	b.n	80132a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801329e:	f7ff f92d 	bl	80124fc <xTaskResumeAll>
}
 80132a2:	bf00      	nop
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	2000106c 	.word	0x2000106c
 80132b0:	20001070 	.word	0x20001070
 80132b4:	e000ed04 	.word	0xe000ed04

080132b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80132c0:	4b0e      	ldr	r3, [pc, #56]	; (80132fc <prvGetNextExpireTime+0x44>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d101      	bne.n	80132ce <prvGetNextExpireTime+0x16>
 80132ca:	2201      	movs	r2, #1
 80132cc:	e000      	b.n	80132d0 <prvGetNextExpireTime+0x18>
 80132ce:	2200      	movs	r2, #0
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d105      	bne.n	80132e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80132dc:	4b07      	ldr	r3, [pc, #28]	; (80132fc <prvGetNextExpireTime+0x44>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	60fb      	str	r3, [r7, #12]
 80132e6:	e001      	b.n	80132ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80132e8:	2300      	movs	r3, #0
 80132ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80132ec:	68fb      	ldr	r3, [r7, #12]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3714      	adds	r7, #20
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop
 80132fc:	20001068 	.word	0x20001068

08013300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013308:	f7ff f994 	bl	8012634 <xTaskGetTickCount>
 801330c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801330e:	4b0b      	ldr	r3, [pc, #44]	; (801333c <prvSampleTimeNow+0x3c>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	429a      	cmp	r2, r3
 8013316:	d205      	bcs.n	8013324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013318:	f000 f930 	bl	801357c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2201      	movs	r2, #1
 8013320:	601a      	str	r2, [r3, #0]
 8013322:	e002      	b.n	801332a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801332a:	4a04      	ldr	r2, [pc, #16]	; (801333c <prvSampleTimeNow+0x3c>)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013330:	68fb      	ldr	r3, [r7, #12]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	20001078 	.word	0x20001078

08013340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b086      	sub	sp, #24
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
 801334c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801334e:	2300      	movs	r3, #0
 8013350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	68ba      	ldr	r2, [r7, #8]
 8013356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	429a      	cmp	r2, r3
 8013364:	d812      	bhi.n	801338c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	1ad2      	subs	r2, r2, r3
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	429a      	cmp	r2, r3
 8013372:	d302      	bcc.n	801337a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013374:	2301      	movs	r3, #1
 8013376:	617b      	str	r3, [r7, #20]
 8013378:	e01b      	b.n	80133b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801337a:	4b10      	ldr	r3, [pc, #64]	; (80133bc <prvInsertTimerInActiveList+0x7c>)
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	3304      	adds	r3, #4
 8013382:	4619      	mov	r1, r3
 8013384:	4610      	mov	r0, r2
 8013386:	f7fd fe36 	bl	8010ff6 <vListInsert>
 801338a:	e012      	b.n	80133b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	429a      	cmp	r2, r3
 8013392:	d206      	bcs.n	80133a2 <prvInsertTimerInActiveList+0x62>
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	429a      	cmp	r2, r3
 801339a:	d302      	bcc.n	80133a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801339c:	2301      	movs	r3, #1
 801339e:	617b      	str	r3, [r7, #20]
 80133a0:	e007      	b.n	80133b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80133a2:	4b07      	ldr	r3, [pc, #28]	; (80133c0 <prvInsertTimerInActiveList+0x80>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	3304      	adds	r3, #4
 80133aa:	4619      	mov	r1, r3
 80133ac:	4610      	mov	r0, r2
 80133ae:	f7fd fe22 	bl	8010ff6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80133b2:	697b      	ldr	r3, [r7, #20]
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3718      	adds	r7, #24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	2000106c 	.word	0x2000106c
 80133c0:	20001068 	.word	0x20001068

080133c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b08e      	sub	sp, #56	; 0x38
 80133c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80133ca:	e0c6      	b.n	801355a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	da17      	bge.n	8013402 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80133d2:	1d3b      	adds	r3, r7, #4
 80133d4:	3304      	adds	r3, #4
 80133d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80133d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d109      	bne.n	80133f2 <prvProcessReceivedCommands+0x2e>
 80133de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	61fb      	str	r3, [r7, #28]
 80133f0:	e7fe      	b.n	80133f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80133f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133f8:	6850      	ldr	r0, [r2, #4]
 80133fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133fc:	6892      	ldr	r2, [r2, #8]
 80133fe:	4611      	mov	r1, r2
 8013400:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2b00      	cmp	r3, #0
 8013406:	f2c0 80a7 	blt.w	8013558 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013410:	695b      	ldr	r3, [r3, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d004      	beq.n	8013420 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013418:	3304      	adds	r3, #4
 801341a:	4618      	mov	r0, r3
 801341c:	f7fd fe24 	bl	8011068 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013420:	463b      	mov	r3, r7
 8013422:	4618      	mov	r0, r3
 8013424:	f7ff ff6c 	bl	8013300 <prvSampleTimeNow>
 8013428:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b09      	cmp	r3, #9
 801342e:	f200 8094 	bhi.w	801355a <prvProcessReceivedCommands+0x196>
 8013432:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <prvProcessReceivedCommands+0x74>)
 8013434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013438:	08013461 	.word	0x08013461
 801343c:	08013461 	.word	0x08013461
 8013440:	08013461 	.word	0x08013461
 8013444:	080134d3 	.word	0x080134d3
 8013448:	080134e7 	.word	0x080134e7
 801344c:	0801352f 	.word	0x0801352f
 8013450:	08013461 	.word	0x08013461
 8013454:	08013461 	.word	0x08013461
 8013458:	080134d3 	.word	0x080134d3
 801345c:	080134e7 	.word	0x080134e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013466:	f043 0301 	orr.w	r3, r3, #1
 801346a:	b2da      	uxtb	r2, r3
 801346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013476:	699b      	ldr	r3, [r3, #24]
 8013478:	18d1      	adds	r1, r2, r3
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801347e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013480:	f7ff ff5e 	bl	8013340 <prvInsertTimerInActiveList>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d067      	beq.n	801355a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	6a1b      	ldr	r3, [r3, #32]
 801348e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013498:	f003 0304 	and.w	r3, r3, #4
 801349c:	2b00      	cmp	r3, #0
 801349e:	d05c      	beq.n	801355a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a4:	699b      	ldr	r3, [r3, #24]
 80134a6:	441a      	add	r2, r3
 80134a8:	2300      	movs	r3, #0
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	2300      	movs	r3, #0
 80134ae:	2100      	movs	r1, #0
 80134b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134b2:	f7ff fe09 	bl	80130c8 <xTimerGenericCommand>
 80134b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80134b8:	6a3b      	ldr	r3, [r7, #32]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d14d      	bne.n	801355a <prvProcessReceivedCommands+0x196>
 80134be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c2:	f383 8811 	msr	BASEPRI, r3
 80134c6:	f3bf 8f6f 	isb	sy
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	61bb      	str	r3, [r7, #24]
 80134d0:	e7fe      	b.n	80134d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134d8:	f023 0301 	bic.w	r3, r3, #1
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80134e4:	e039      	b.n	801355a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80134e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134ec:	f043 0301 	orr.w	r3, r3, #1
 80134f0:	b2da      	uxtb	r2, r3
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80134f8:	68ba      	ldr	r2, [r7, #8]
 80134fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80134fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013500:	699b      	ldr	r3, [r3, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d109      	bne.n	801351a <prvProcessReceivedCommands+0x156>
 8013506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350a:	f383 8811 	msr	BASEPRI, r3
 801350e:	f3bf 8f6f 	isb	sy
 8013512:	f3bf 8f4f 	dsb	sy
 8013516:	617b      	str	r3, [r7, #20]
 8013518:	e7fe      	b.n	8013518 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351c:	699a      	ldr	r2, [r3, #24]
 801351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013520:	18d1      	adds	r1, r2, r3
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013528:	f7ff ff0a 	bl	8013340 <prvInsertTimerInActiveList>
					break;
 801352c:	e015      	b.n	801355a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013534:	f003 0302 	and.w	r3, r3, #2
 8013538:	2b00      	cmp	r3, #0
 801353a:	d103      	bne.n	8013544 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 801353c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801353e:	f000 fbc1 	bl	8013cc4 <vPortFree>
 8013542:	e00a      	b.n	801355a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801354a:	f023 0301 	bic.w	r3, r3, #1
 801354e:	b2da      	uxtb	r2, r3
 8013550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013556:	e000      	b.n	801355a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801355a:	4b07      	ldr	r3, [pc, #28]	; (8013578 <prvProcessReceivedCommands+0x1b4>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	1d39      	adds	r1, r7, #4
 8013560:	2200      	movs	r2, #0
 8013562:	4618      	mov	r0, r3
 8013564:	f7fe f932 	bl	80117cc <xQueueReceive>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	f47f af2e 	bne.w	80133cc <prvProcessReceivedCommands+0x8>
	}
}
 8013570:	bf00      	nop
 8013572:	3730      	adds	r7, #48	; 0x30
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20001070 	.word	0x20001070

0801357c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b088      	sub	sp, #32
 8013580:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013582:	e047      	b.n	8013614 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013584:	4b2d      	ldr	r3, [pc, #180]	; (801363c <prvSwitchTimerLists+0xc0>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801358e:	4b2b      	ldr	r3, [pc, #172]	; (801363c <prvSwitchTimerLists+0xc0>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	3304      	adds	r3, #4
 801359c:	4618      	mov	r0, r3
 801359e:	f7fd fd63 	bl	8011068 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	6a1b      	ldr	r3, [r3, #32]
 80135a6:	68f8      	ldr	r0, [r7, #12]
 80135a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135b0:	f003 0304 	and.w	r3, r3, #4
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d02d      	beq.n	8013614 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	699b      	ldr	r3, [r3, #24]
 80135bc:	693a      	ldr	r2, [r7, #16]
 80135be:	4413      	add	r3, r2
 80135c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d90e      	bls.n	80135e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	68ba      	ldr	r2, [r7, #8]
 80135ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80135d6:	4b19      	ldr	r3, [pc, #100]	; (801363c <prvSwitchTimerLists+0xc0>)
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	3304      	adds	r3, #4
 80135de:	4619      	mov	r1, r3
 80135e0:	4610      	mov	r0, r2
 80135e2:	f7fd fd08 	bl	8010ff6 <vListInsert>
 80135e6:	e015      	b.n	8013614 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80135e8:	2300      	movs	r3, #0
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	2300      	movs	r3, #0
 80135ee:	693a      	ldr	r2, [r7, #16]
 80135f0:	2100      	movs	r1, #0
 80135f2:	68f8      	ldr	r0, [r7, #12]
 80135f4:	f7ff fd68 	bl	80130c8 <xTimerGenericCommand>
 80135f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d109      	bne.n	8013614 <prvSwitchTimerLists+0x98>
 8013600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013604:	f383 8811 	msr	BASEPRI, r3
 8013608:	f3bf 8f6f 	isb	sy
 801360c:	f3bf 8f4f 	dsb	sy
 8013610:	603b      	str	r3, [r7, #0]
 8013612:	e7fe      	b.n	8013612 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013614:	4b09      	ldr	r3, [pc, #36]	; (801363c <prvSwitchTimerLists+0xc0>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1b2      	bne.n	8013584 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801361e:	4b07      	ldr	r3, [pc, #28]	; (801363c <prvSwitchTimerLists+0xc0>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013624:	4b06      	ldr	r3, [pc, #24]	; (8013640 <prvSwitchTimerLists+0xc4>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4a04      	ldr	r2, [pc, #16]	; (801363c <prvSwitchTimerLists+0xc0>)
 801362a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801362c:	4a04      	ldr	r2, [pc, #16]	; (8013640 <prvSwitchTimerLists+0xc4>)
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	6013      	str	r3, [r2, #0]
}
 8013632:	bf00      	nop
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
 801363a:	bf00      	nop
 801363c:	20001068 	.word	0x20001068
 8013640:	2000106c 	.word	0x2000106c

08013644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801364a:	f000 f95f 	bl	801390c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801364e:	4b15      	ldr	r3, [pc, #84]	; (80136a4 <prvCheckForValidListAndQueue+0x60>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d120      	bne.n	8013698 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013656:	4814      	ldr	r0, [pc, #80]	; (80136a8 <prvCheckForValidListAndQueue+0x64>)
 8013658:	f7fd fc7c 	bl	8010f54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801365c:	4813      	ldr	r0, [pc, #76]	; (80136ac <prvCheckForValidListAndQueue+0x68>)
 801365e:	f7fd fc79 	bl	8010f54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013662:	4b13      	ldr	r3, [pc, #76]	; (80136b0 <prvCheckForValidListAndQueue+0x6c>)
 8013664:	4a10      	ldr	r2, [pc, #64]	; (80136a8 <prvCheckForValidListAndQueue+0x64>)
 8013666:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013668:	4b12      	ldr	r3, [pc, #72]	; (80136b4 <prvCheckForValidListAndQueue+0x70>)
 801366a:	4a10      	ldr	r2, [pc, #64]	; (80136ac <prvCheckForValidListAndQueue+0x68>)
 801366c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801366e:	2300      	movs	r3, #0
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	4b11      	ldr	r3, [pc, #68]	; (80136b8 <prvCheckForValidListAndQueue+0x74>)
 8013674:	4a11      	ldr	r2, [pc, #68]	; (80136bc <prvCheckForValidListAndQueue+0x78>)
 8013676:	2110      	movs	r1, #16
 8013678:	200a      	movs	r0, #10
 801367a:	f7fd fd87 	bl	801118c <xQueueGenericCreateStatic>
 801367e:	4602      	mov	r2, r0
 8013680:	4b08      	ldr	r3, [pc, #32]	; (80136a4 <prvCheckForValidListAndQueue+0x60>)
 8013682:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013684:	4b07      	ldr	r3, [pc, #28]	; (80136a4 <prvCheckForValidListAndQueue+0x60>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d005      	beq.n	8013698 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801368c:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <prvCheckForValidListAndQueue+0x60>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	490b      	ldr	r1, [pc, #44]	; (80136c0 <prvCheckForValidListAndQueue+0x7c>)
 8013692:	4618      	mov	r0, r3
 8013694:	f7fe fba6 	bl	8011de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013698:	f000 f966 	bl	8013968 <vPortExitCritical>
}
 801369c:	bf00      	nop
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	20001070 	.word	0x20001070
 80136a8:	20001040 	.word	0x20001040
 80136ac:	20001054 	.word	0x20001054
 80136b0:	20001068 	.word	0x20001068
 80136b4:	2000106c 	.word	0x2000106c
 80136b8:	2000111c 	.word	0x2000111c
 80136bc:	2000107c 	.word	0x2000107c
 80136c0:	08017e4c 	.word	0x08017e4c

080136c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80136c4:	b480      	push	{r7}
 80136c6:	b085      	sub	sp, #20
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	3b04      	subs	r3, #4
 80136d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80136dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	3b04      	subs	r3, #4
 80136e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	f023 0201 	bic.w	r2, r3, #1
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	3b04      	subs	r3, #4
 80136f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80136f4:	4a0c      	ldr	r2, [pc, #48]	; (8013728 <pxPortInitialiseStack+0x64>)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	3b14      	subs	r3, #20
 80136fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	3b04      	subs	r3, #4
 801370a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f06f 0202 	mvn.w	r2, #2
 8013712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	3b20      	subs	r3, #32
 8013718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3714      	adds	r7, #20
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr
 8013728:	0801372d 	.word	0x0801372d

0801372c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801372c:	b480      	push	{r7}
 801372e:	b085      	sub	sp, #20
 8013730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013732:	2300      	movs	r3, #0
 8013734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013736:	4b11      	ldr	r3, [pc, #68]	; (801377c <prvTaskExitError+0x50>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801373e:	d009      	beq.n	8013754 <prvTaskExitError+0x28>
 8013740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013744:	f383 8811 	msr	BASEPRI, r3
 8013748:	f3bf 8f6f 	isb	sy
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	60fb      	str	r3, [r7, #12]
 8013752:	e7fe      	b.n	8013752 <prvTaskExitError+0x26>
 8013754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013766:	bf00      	nop
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d0fc      	beq.n	8013768 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801376e:	bf00      	nop
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop
 801377c:	20000174 	.word	0x20000174

08013780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013780:	4b07      	ldr	r3, [pc, #28]	; (80137a0 <pxCurrentTCBConst2>)
 8013782:	6819      	ldr	r1, [r3, #0]
 8013784:	6808      	ldr	r0, [r1, #0]
 8013786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801378a:	f380 8809 	msr	PSP, r0
 801378e:	f3bf 8f6f 	isb	sy
 8013792:	f04f 0000 	mov.w	r0, #0
 8013796:	f380 8811 	msr	BASEPRI, r0
 801379a:	4770      	bx	lr
 801379c:	f3af 8000 	nop.w

080137a0 <pxCurrentTCBConst2>:
 80137a0:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137a4:	bf00      	nop
 80137a6:	bf00      	nop

080137a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80137a8:	4808      	ldr	r0, [pc, #32]	; (80137cc <prvPortStartFirstTask+0x24>)
 80137aa:	6800      	ldr	r0, [r0, #0]
 80137ac:	6800      	ldr	r0, [r0, #0]
 80137ae:	f380 8808 	msr	MSP, r0
 80137b2:	f04f 0000 	mov.w	r0, #0
 80137b6:	f380 8814 	msr	CONTROL, r0
 80137ba:	b662      	cpsie	i
 80137bc:	b661      	cpsie	f
 80137be:	f3bf 8f4f 	dsb	sy
 80137c2:	f3bf 8f6f 	isb	sy
 80137c6:	df00      	svc	0
 80137c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80137ca:	bf00      	nop
 80137cc:	e000ed08 	.word	0xe000ed08

080137d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b086      	sub	sp, #24
 80137d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80137d6:	4b44      	ldr	r3, [pc, #272]	; (80138e8 <xPortStartScheduler+0x118>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4a44      	ldr	r2, [pc, #272]	; (80138ec <xPortStartScheduler+0x11c>)
 80137dc:	4293      	cmp	r3, r2
 80137de:	d109      	bne.n	80137f4 <xPortStartScheduler+0x24>
 80137e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	613b      	str	r3, [r7, #16]
 80137f2:	e7fe      	b.n	80137f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80137f4:	4b3c      	ldr	r3, [pc, #240]	; (80138e8 <xPortStartScheduler+0x118>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	4a3d      	ldr	r2, [pc, #244]	; (80138f0 <xPortStartScheduler+0x120>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d109      	bne.n	8013812 <xPortStartScheduler+0x42>
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	60fb      	str	r3, [r7, #12]
 8013810:	e7fe      	b.n	8013810 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013812:	4b38      	ldr	r3, [pc, #224]	; (80138f4 <xPortStartScheduler+0x124>)
 8013814:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	b2db      	uxtb	r3, r3
 801381c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	22ff      	movs	r2, #255	; 0xff
 8013822:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	b2db      	uxtb	r3, r3
 801382a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801382c:	78fb      	ldrb	r3, [r7, #3]
 801382e:	b2db      	uxtb	r3, r3
 8013830:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013834:	b2da      	uxtb	r2, r3
 8013836:	4b30      	ldr	r3, [pc, #192]	; (80138f8 <xPortStartScheduler+0x128>)
 8013838:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801383a:	4b30      	ldr	r3, [pc, #192]	; (80138fc <xPortStartScheduler+0x12c>)
 801383c:	2207      	movs	r2, #7
 801383e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013840:	e009      	b.n	8013856 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013842:	4b2e      	ldr	r3, [pc, #184]	; (80138fc <xPortStartScheduler+0x12c>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	3b01      	subs	r3, #1
 8013848:	4a2c      	ldr	r2, [pc, #176]	; (80138fc <xPortStartScheduler+0x12c>)
 801384a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801384c:	78fb      	ldrb	r3, [r7, #3]
 801384e:	b2db      	uxtb	r3, r3
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	b2db      	uxtb	r3, r3
 8013854:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013856:	78fb      	ldrb	r3, [r7, #3]
 8013858:	b2db      	uxtb	r3, r3
 801385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801385e:	2b80      	cmp	r3, #128	; 0x80
 8013860:	d0ef      	beq.n	8013842 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013862:	4b26      	ldr	r3, [pc, #152]	; (80138fc <xPortStartScheduler+0x12c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f1c3 0307 	rsb	r3, r3, #7
 801386a:	2b04      	cmp	r3, #4
 801386c:	d009      	beq.n	8013882 <xPortStartScheduler+0xb2>
 801386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013872:	f383 8811 	msr	BASEPRI, r3
 8013876:	f3bf 8f6f 	isb	sy
 801387a:	f3bf 8f4f 	dsb	sy
 801387e:	60bb      	str	r3, [r7, #8]
 8013880:	e7fe      	b.n	8013880 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013882:	4b1e      	ldr	r3, [pc, #120]	; (80138fc <xPortStartScheduler+0x12c>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	021b      	lsls	r3, r3, #8
 8013888:	4a1c      	ldr	r2, [pc, #112]	; (80138fc <xPortStartScheduler+0x12c>)
 801388a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801388c:	4b1b      	ldr	r3, [pc, #108]	; (80138fc <xPortStartScheduler+0x12c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013894:	4a19      	ldr	r2, [pc, #100]	; (80138fc <xPortStartScheduler+0x12c>)
 8013896:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	b2da      	uxtb	r2, r3
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138a0:	4b17      	ldr	r3, [pc, #92]	; (8013900 <xPortStartScheduler+0x130>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	4a16      	ldr	r2, [pc, #88]	; (8013900 <xPortStartScheduler+0x130>)
 80138a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80138aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138ac:	4b14      	ldr	r3, [pc, #80]	; (8013900 <xPortStartScheduler+0x130>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a13      	ldr	r2, [pc, #76]	; (8013900 <xPortStartScheduler+0x130>)
 80138b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80138b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80138b8:	f000 f8d6 	bl	8013a68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80138bc:	4b11      	ldr	r3, [pc, #68]	; (8013904 <xPortStartScheduler+0x134>)
 80138be:	2200      	movs	r2, #0
 80138c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80138c2:	f000 f8f5 	bl	8013ab0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80138c6:	4b10      	ldr	r3, [pc, #64]	; (8013908 <xPortStartScheduler+0x138>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	4a0f      	ldr	r2, [pc, #60]	; (8013908 <xPortStartScheduler+0x138>)
 80138cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80138d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80138d2:	f7ff ff69 	bl	80137a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80138d6:	f7fe ff75 	bl	80127c4 <vTaskSwitchContext>
	prvTaskExitError();
 80138da:	f7ff ff27 	bl	801372c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3718      	adds	r7, #24
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	e000ed00 	.word	0xe000ed00
 80138ec:	410fc271 	.word	0x410fc271
 80138f0:	410fc270 	.word	0x410fc270
 80138f4:	e000e400 	.word	0xe000e400
 80138f8:	2000116c 	.word	0x2000116c
 80138fc:	20001170 	.word	0x20001170
 8013900:	e000ed20 	.word	0xe000ed20
 8013904:	20000174 	.word	0x20000174
 8013908:	e000ef34 	.word	0xe000ef34

0801390c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013924:	4b0e      	ldr	r3, [pc, #56]	; (8013960 <vPortEnterCritical+0x54>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	3301      	adds	r3, #1
 801392a:	4a0d      	ldr	r2, [pc, #52]	; (8013960 <vPortEnterCritical+0x54>)
 801392c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801392e:	4b0c      	ldr	r3, [pc, #48]	; (8013960 <vPortEnterCritical+0x54>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2b01      	cmp	r3, #1
 8013934:	d10e      	bne.n	8013954 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013936:	4b0b      	ldr	r3, [pc, #44]	; (8013964 <vPortEnterCritical+0x58>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	b2db      	uxtb	r3, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d009      	beq.n	8013954 <vPortEnterCritical+0x48>
 8013940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	603b      	str	r3, [r7, #0]
 8013952:	e7fe      	b.n	8013952 <vPortEnterCritical+0x46>
	}
}
 8013954:	bf00      	nop
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr
 8013960:	20000174 	.word	0x20000174
 8013964:	e000ed04 	.word	0xe000ed04

08013968 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013968:	b480      	push	{r7}
 801396a:	b083      	sub	sp, #12
 801396c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801396e:	4b11      	ldr	r3, [pc, #68]	; (80139b4 <vPortExitCritical+0x4c>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d109      	bne.n	801398a <vPortExitCritical+0x22>
 8013976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	607b      	str	r3, [r7, #4]
 8013988:	e7fe      	b.n	8013988 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801398a:	4b0a      	ldr	r3, [pc, #40]	; (80139b4 <vPortExitCritical+0x4c>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	3b01      	subs	r3, #1
 8013990:	4a08      	ldr	r2, [pc, #32]	; (80139b4 <vPortExitCritical+0x4c>)
 8013992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013994:	4b07      	ldr	r3, [pc, #28]	; (80139b4 <vPortExitCritical+0x4c>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d104      	bne.n	80139a6 <vPortExitCritical+0x3e>
 801399c:	2300      	movs	r3, #0
 801399e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80139a6:	bf00      	nop
 80139a8:	370c      	adds	r7, #12
 80139aa:	46bd      	mov	sp, r7
 80139ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b0:	4770      	bx	lr
 80139b2:	bf00      	nop
 80139b4:	20000174 	.word	0x20000174
	...

080139c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80139c0:	f3ef 8009 	mrs	r0, PSP
 80139c4:	f3bf 8f6f 	isb	sy
 80139c8:	4b15      	ldr	r3, [pc, #84]	; (8013a20 <pxCurrentTCBConst>)
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	f01e 0f10 	tst.w	lr, #16
 80139d0:	bf08      	it	eq
 80139d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80139d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139da:	6010      	str	r0, [r2, #0]
 80139dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80139e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80139e4:	f380 8811 	msr	BASEPRI, r0
 80139e8:	f3bf 8f4f 	dsb	sy
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f7fe fee8 	bl	80127c4 <vTaskSwitchContext>
 80139f4:	f04f 0000 	mov.w	r0, #0
 80139f8:	f380 8811 	msr	BASEPRI, r0
 80139fc:	bc09      	pop	{r0, r3}
 80139fe:	6819      	ldr	r1, [r3, #0]
 8013a00:	6808      	ldr	r0, [r1, #0]
 8013a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a06:	f01e 0f10 	tst.w	lr, #16
 8013a0a:	bf08      	it	eq
 8013a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a10:	f380 8809 	msr	PSP, r0
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	f3af 8000 	nop.w

08013a20 <pxCurrentTCBConst>:
 8013a20:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a24:	bf00      	nop
 8013a26:	bf00      	nop

08013a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a32:	f383 8811 	msr	BASEPRI, r3
 8013a36:	f3bf 8f6f 	isb	sy
 8013a3a:	f3bf 8f4f 	dsb	sy
 8013a3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a40:	f7fe fe08 	bl	8012654 <xTaskIncrementTick>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d003      	beq.n	8013a52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a4a:	4b06      	ldr	r3, [pc, #24]	; (8013a64 <SysTick_Handler+0x3c>)
 8013a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	2300      	movs	r3, #0
 8013a54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013a5c:	bf00      	nop
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	e000ed04 	.word	0xe000ed04

08013a68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013a68:	b480      	push	{r7}
 8013a6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013a6c:	4b0b      	ldr	r3, [pc, #44]	; (8013a9c <vPortSetupTimerInterrupt+0x34>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013a72:	4b0b      	ldr	r3, [pc, #44]	; (8013aa0 <vPortSetupTimerInterrupt+0x38>)
 8013a74:	2200      	movs	r2, #0
 8013a76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013a78:	4b0a      	ldr	r3, [pc, #40]	; (8013aa4 <vPortSetupTimerInterrupt+0x3c>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4a0a      	ldr	r2, [pc, #40]	; (8013aa8 <vPortSetupTimerInterrupt+0x40>)
 8013a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8013a82:	099b      	lsrs	r3, r3, #6
 8013a84:	4a09      	ldr	r2, [pc, #36]	; (8013aac <vPortSetupTimerInterrupt+0x44>)
 8013a86:	3b01      	subs	r3, #1
 8013a88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013a8a:	4b04      	ldr	r3, [pc, #16]	; (8013a9c <vPortSetupTimerInterrupt+0x34>)
 8013a8c:	2207      	movs	r2, #7
 8013a8e:	601a      	str	r2, [r3, #0]
}
 8013a90:	bf00      	nop
 8013a92:	46bd      	mov	sp, r7
 8013a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	e000e010 	.word	0xe000e010
 8013aa0:	e000e018 	.word	0xe000e018
 8013aa4:	20000058 	.word	0x20000058
 8013aa8:	10624dd3 	.word	0x10624dd3
 8013aac:	e000e014 	.word	0xe000e014

08013ab0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ab0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013ac0 <vPortEnableVFP+0x10>
 8013ab4:	6801      	ldr	r1, [r0, #0]
 8013ab6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013aba:	6001      	str	r1, [r0, #0]
 8013abc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013abe:	bf00      	nop
 8013ac0:	e000ed88 	.word	0xe000ed88

08013ac4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b085      	sub	sp, #20
 8013ac8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013aca:	f3ef 8305 	mrs	r3, IPSR
 8013ace:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b0f      	cmp	r3, #15
 8013ad4:	d913      	bls.n	8013afe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013ad6:	4a16      	ldr	r2, [pc, #88]	; (8013b30 <vPortValidateInterruptPriority+0x6c>)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	4413      	add	r3, r2
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013ae0:	4b14      	ldr	r3, [pc, #80]	; (8013b34 <vPortValidateInterruptPriority+0x70>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	7afa      	ldrb	r2, [r7, #11]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d209      	bcs.n	8013afe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aee:	f383 8811 	msr	BASEPRI, r3
 8013af2:	f3bf 8f6f 	isb	sy
 8013af6:	f3bf 8f4f 	dsb	sy
 8013afa:	607b      	str	r3, [r7, #4]
 8013afc:	e7fe      	b.n	8013afc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013afe:	4b0e      	ldr	r3, [pc, #56]	; (8013b38 <vPortValidateInterruptPriority+0x74>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013b06:	4b0d      	ldr	r3, [pc, #52]	; (8013b3c <vPortValidateInterruptPriority+0x78>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d909      	bls.n	8013b22 <vPortValidateInterruptPriority+0x5e>
 8013b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b12:	f383 8811 	msr	BASEPRI, r3
 8013b16:	f3bf 8f6f 	isb	sy
 8013b1a:	f3bf 8f4f 	dsb	sy
 8013b1e:	603b      	str	r3, [r7, #0]
 8013b20:	e7fe      	b.n	8013b20 <vPortValidateInterruptPriority+0x5c>
	}
 8013b22:	bf00      	nop
 8013b24:	3714      	adds	r7, #20
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	e000e3f0 	.word	0xe000e3f0
 8013b34:	2000116c 	.word	0x2000116c
 8013b38:	e000ed0c 	.word	0xe000ed0c
 8013b3c:	20001170 	.word	0x20001170

08013b40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b08a      	sub	sp, #40	; 0x28
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013b4c:	f7fe fcc8 	bl	80124e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013b50:	4b57      	ldr	r3, [pc, #348]	; (8013cb0 <pvPortMalloc+0x170>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d101      	bne.n	8013b5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013b58:	f000 f90c 	bl	8013d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013b5c:	4b55      	ldr	r3, [pc, #340]	; (8013cb4 <pvPortMalloc+0x174>)
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4013      	ands	r3, r2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	f040 808c 	bne.w	8013c82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d01c      	beq.n	8013baa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013b70:	2208      	movs	r2, #8
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4413      	add	r3, r2
 8013b76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f003 0307 	and.w	r3, r3, #7
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d013      	beq.n	8013baa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f023 0307 	bic.w	r3, r3, #7
 8013b88:	3308      	adds	r3, #8
 8013b8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f003 0307 	and.w	r3, r3, #7
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d009      	beq.n	8013baa <pvPortMalloc+0x6a>
 8013b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9a:	f383 8811 	msr	BASEPRI, r3
 8013b9e:	f3bf 8f6f 	isb	sy
 8013ba2:	f3bf 8f4f 	dsb	sy
 8013ba6:	617b      	str	r3, [r7, #20]
 8013ba8:	e7fe      	b.n	8013ba8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d068      	beq.n	8013c82 <pvPortMalloc+0x142>
 8013bb0:	4b41      	ldr	r3, [pc, #260]	; (8013cb8 <pvPortMalloc+0x178>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d863      	bhi.n	8013c82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013bba:	4b40      	ldr	r3, [pc, #256]	; (8013cbc <pvPortMalloc+0x17c>)
 8013bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013bbe:	4b3f      	ldr	r3, [pc, #252]	; (8013cbc <pvPortMalloc+0x17c>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013bc4:	e004      	b.n	8013bd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	687a      	ldr	r2, [r7, #4]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d903      	bls.n	8013be2 <pvPortMalloc+0xa2>
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1f1      	bne.n	8013bc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013be2:	4b33      	ldr	r3, [pc, #204]	; (8013cb0 <pvPortMalloc+0x170>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d04a      	beq.n	8013c82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013bec:	6a3b      	ldr	r3, [r7, #32]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2208      	movs	r2, #8
 8013bf2:	4413      	add	r3, r2
 8013bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	6a3b      	ldr	r3, [r7, #32]
 8013bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c00:	685a      	ldr	r2, [r3, #4]
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	1ad2      	subs	r2, r2, r3
 8013c06:	2308      	movs	r3, #8
 8013c08:	005b      	lsls	r3, r3, #1
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d91e      	bls.n	8013c4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	4413      	add	r3, r2
 8013c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c16:	69bb      	ldr	r3, [r7, #24]
 8013c18:	f003 0307 	and.w	r3, r3, #7
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d009      	beq.n	8013c34 <pvPortMalloc+0xf4>
 8013c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c24:	f383 8811 	msr	BASEPRI, r3
 8013c28:	f3bf 8f6f 	isb	sy
 8013c2c:	f3bf 8f4f 	dsb	sy
 8013c30:	613b      	str	r3, [r7, #16]
 8013c32:	e7fe      	b.n	8013c32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c36:	685a      	ldr	r2, [r3, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	1ad2      	subs	r2, r2, r3
 8013c3c:	69bb      	ldr	r3, [r7, #24]
 8013c3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013c46:	69b8      	ldr	r0, [r7, #24]
 8013c48:	f000 f8f6 	bl	8013e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013c4c:	4b1a      	ldr	r3, [pc, #104]	; (8013cb8 <pvPortMalloc+0x178>)
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	4a18      	ldr	r2, [pc, #96]	; (8013cb8 <pvPortMalloc+0x178>)
 8013c58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013c5a:	4b17      	ldr	r3, [pc, #92]	; (8013cb8 <pvPortMalloc+0x178>)
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	4b18      	ldr	r3, [pc, #96]	; (8013cc0 <pvPortMalloc+0x180>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d203      	bcs.n	8013c6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013c66:	4b14      	ldr	r3, [pc, #80]	; (8013cb8 <pvPortMalloc+0x178>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4a15      	ldr	r2, [pc, #84]	; (8013cc0 <pvPortMalloc+0x180>)
 8013c6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c70:	685a      	ldr	r2, [r3, #4]
 8013c72:	4b10      	ldr	r3, [pc, #64]	; (8013cb4 <pvPortMalloc+0x174>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	431a      	orrs	r2, r3
 8013c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7e:	2200      	movs	r2, #0
 8013c80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013c82:	f7fe fc3b 	bl	80124fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	f003 0307 	and.w	r3, r3, #7
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <pvPortMalloc+0x164>
 8013c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c94:	f383 8811 	msr	BASEPRI, r3
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	60fb      	str	r3, [r7, #12]
 8013ca2:	e7fe      	b.n	8013ca2 <pvPortMalloc+0x162>
	return pvReturn;
 8013ca4:	69fb      	ldr	r3, [r7, #28]
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3728      	adds	r7, #40	; 0x28
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	2000d4cc 	.word	0x2000d4cc
 8013cb4:	2000d4d8 	.word	0x2000d4d8
 8013cb8:	2000d4d0 	.word	0x2000d4d0
 8013cbc:	2000d4c4 	.word	0x2000d4c4
 8013cc0:	2000d4d4 	.word	0x2000d4d4

08013cc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d046      	beq.n	8013d64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013cd6:	2308      	movs	r3, #8
 8013cd8:	425b      	negs	r3, r3
 8013cda:	697a      	ldr	r2, [r7, #20]
 8013cdc:	4413      	add	r3, r2
 8013cde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	685a      	ldr	r2, [r3, #4]
 8013ce8:	4b20      	ldr	r3, [pc, #128]	; (8013d6c <vPortFree+0xa8>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	4013      	ands	r3, r2
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d109      	bne.n	8013d06 <vPortFree+0x42>
 8013cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf6:	f383 8811 	msr	BASEPRI, r3
 8013cfa:	f3bf 8f6f 	isb	sy
 8013cfe:	f3bf 8f4f 	dsb	sy
 8013d02:	60fb      	str	r3, [r7, #12]
 8013d04:	e7fe      	b.n	8013d04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d009      	beq.n	8013d22 <vPortFree+0x5e>
 8013d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d12:	f383 8811 	msr	BASEPRI, r3
 8013d16:	f3bf 8f6f 	isb	sy
 8013d1a:	f3bf 8f4f 	dsb	sy
 8013d1e:	60bb      	str	r3, [r7, #8]
 8013d20:	e7fe      	b.n	8013d20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	4b11      	ldr	r3, [pc, #68]	; (8013d6c <vPortFree+0xa8>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	4013      	ands	r3, r2
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d019      	beq.n	8013d64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d115      	bne.n	8013d64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	685a      	ldr	r2, [r3, #4]
 8013d3c:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <vPortFree+0xa8>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	43db      	mvns	r3, r3
 8013d42:	401a      	ands	r2, r3
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013d48:	f7fe fbca 	bl	80124e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	4b07      	ldr	r3, [pc, #28]	; (8013d70 <vPortFree+0xac>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4413      	add	r3, r2
 8013d56:	4a06      	ldr	r2, [pc, #24]	; (8013d70 <vPortFree+0xac>)
 8013d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013d5a:	6938      	ldr	r0, [r7, #16]
 8013d5c:	f000 f86c 	bl	8013e38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013d60:	f7fe fbcc 	bl	80124fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013d64:	bf00      	nop
 8013d66:	3718      	adds	r7, #24
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	2000d4d8 	.word	0x2000d4d8
 8013d70:	2000d4d0 	.word	0x2000d4d0

08013d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013d80:	4b27      	ldr	r3, [pc, #156]	; (8013e20 <prvHeapInit+0xac>)
 8013d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f003 0307 	and.w	r3, r3, #7
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00c      	beq.n	8013da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	3307      	adds	r3, #7
 8013d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f023 0307 	bic.w	r3, r3, #7
 8013d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	1ad3      	subs	r3, r2, r3
 8013da2:	4a1f      	ldr	r2, [pc, #124]	; (8013e20 <prvHeapInit+0xac>)
 8013da4:	4413      	add	r3, r2
 8013da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013dac:	4a1d      	ldr	r2, [pc, #116]	; (8013e24 <prvHeapInit+0xb0>)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013db2:	4b1c      	ldr	r3, [pc, #112]	; (8013e24 <prvHeapInit+0xb0>)
 8013db4:	2200      	movs	r2, #0
 8013db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	68ba      	ldr	r2, [r7, #8]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013dc0:	2208      	movs	r2, #8
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	1a9b      	subs	r3, r3, r2
 8013dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	f023 0307 	bic.w	r3, r3, #7
 8013dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	4a15      	ldr	r2, [pc, #84]	; (8013e28 <prvHeapInit+0xb4>)
 8013dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013dd6:	4b14      	ldr	r3, [pc, #80]	; (8013e28 <prvHeapInit+0xb4>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013dde:	4b12      	ldr	r3, [pc, #72]	; (8013e28 <prvHeapInit+0xb4>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2200      	movs	r2, #0
 8013de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	1ad2      	subs	r2, r2, r3
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013df4:	4b0c      	ldr	r3, [pc, #48]	; (8013e28 <prvHeapInit+0xb4>)
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	4a0a      	ldr	r2, [pc, #40]	; (8013e2c <prvHeapInit+0xb8>)
 8013e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	4a09      	ldr	r2, [pc, #36]	; (8013e30 <prvHeapInit+0xbc>)
 8013e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e0c:	4b09      	ldr	r3, [pc, #36]	; (8013e34 <prvHeapInit+0xc0>)
 8013e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013e12:	601a      	str	r2, [r3, #0]
}
 8013e14:	bf00      	nop
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	20001174 	.word	0x20001174
 8013e24:	2000d4c4 	.word	0x2000d4c4
 8013e28:	2000d4cc 	.word	0x2000d4cc
 8013e2c:	2000d4d4 	.word	0x2000d4d4
 8013e30:	2000d4d0 	.word	0x2000d4d0
 8013e34:	2000d4d8 	.word	0x2000d4d8

08013e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013e40:	4b28      	ldr	r3, [pc, #160]	; (8013ee4 <prvInsertBlockIntoFreeList+0xac>)
 8013e42:	60fb      	str	r3, [r7, #12]
 8013e44:	e002      	b.n	8013e4c <prvInsertBlockIntoFreeList+0x14>
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	60fb      	str	r3, [r7, #12]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d8f7      	bhi.n	8013e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	4413      	add	r3, r2
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d108      	bne.n	8013e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	685a      	ldr	r2, [r3, #4]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	441a      	add	r2, r3
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	68ba      	ldr	r2, [r7, #8]
 8013e84:	441a      	add	r2, r3
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d118      	bne.n	8013ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	4b15      	ldr	r3, [pc, #84]	; (8013ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d00d      	beq.n	8013eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	441a      	add	r2, r3
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	601a      	str	r2, [r3, #0]
 8013eb4:	e008      	b.n	8013ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013eb6:	4b0c      	ldr	r3, [pc, #48]	; (8013ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	e003      	b.n	8013ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013ec8:	68fa      	ldr	r2, [r7, #12]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d002      	beq.n	8013ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ed6:	bf00      	nop
 8013ed8:	3714      	adds	r7, #20
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr
 8013ee2:	bf00      	nop
 8013ee4:	2000d4c4 	.word	0x2000d4c4
 8013ee8:	2000d4cc 	.word	0x2000d4cc

08013eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	4912      	ldr	r1, [pc, #72]	; (8013f3c <MX_USB_DEVICE_Init+0x50>)
 8013ef4:	4812      	ldr	r0, [pc, #72]	; (8013f40 <MX_USB_DEVICE_Init+0x54>)
 8013ef6:	f7fb fdba 	bl	800fa6e <USBD_Init>
 8013efa:	4603      	mov	r3, r0
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d001      	beq.n	8013f04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013f00:	f7ef feaa 	bl	8003c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013f04:	490f      	ldr	r1, [pc, #60]	; (8013f44 <MX_USB_DEVICE_Init+0x58>)
 8013f06:	480e      	ldr	r0, [pc, #56]	; (8013f40 <MX_USB_DEVICE_Init+0x54>)
 8013f08:	f7fb fddc 	bl	800fac4 <USBD_RegisterClass>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d001      	beq.n	8013f16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013f12:	f7ef fea1 	bl	8003c58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013f16:	490c      	ldr	r1, [pc, #48]	; (8013f48 <MX_USB_DEVICE_Init+0x5c>)
 8013f18:	4809      	ldr	r0, [pc, #36]	; (8013f40 <MX_USB_DEVICE_Init+0x54>)
 8013f1a:	f7fb fd39 	bl	800f990 <USBD_CDC_RegisterInterface>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d001      	beq.n	8013f28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013f24:	f7ef fe98 	bl	8003c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013f28:	4805      	ldr	r0, [pc, #20]	; (8013f40 <MX_USB_DEVICE_Init+0x54>)
 8013f2a:	f7fb fde5 	bl	800faf8 <USBD_Start>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013f34:	f7ef fe90 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013f38:	bf00      	nop
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	20000188 	.word	0x20000188
 8013f40:	2000ec84 	.word	0x2000ec84
 8013f44:	20000070 	.word	0x20000070
 8013f48:	20000178 	.word	0x20000178

08013f4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013f50:	2200      	movs	r2, #0
 8013f52:	4905      	ldr	r1, [pc, #20]	; (8013f68 <CDC_Init_FS+0x1c>)
 8013f54:	4805      	ldr	r0, [pc, #20]	; (8013f6c <CDC_Init_FS+0x20>)
 8013f56:	f7fb fd32 	bl	800f9be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013f5a:	4905      	ldr	r1, [pc, #20]	; (8013f70 <CDC_Init_FS+0x24>)
 8013f5c:	4803      	ldr	r0, [pc, #12]	; (8013f6c <CDC_Init_FS+0x20>)
 8013f5e:	f7fb fd48 	bl	800f9f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013f62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	bd80      	pop	{r7, pc}
 8013f68:	2000f748 	.word	0x2000f748
 8013f6c:	2000ec84 	.word	0x2000ec84
 8013f70:	2000ef48 	.word	0x2000ef48

08013f74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013f74:	b480      	push	{r7}
 8013f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013f78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b083      	sub	sp, #12
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	6039      	str	r1, [r7, #0]
 8013f8e:	71fb      	strb	r3, [r7, #7]
 8013f90:	4613      	mov	r3, r2
 8013f92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013f94:	79fb      	ldrb	r3, [r7, #7]
 8013f96:	2b23      	cmp	r3, #35	; 0x23
 8013f98:	d84a      	bhi.n	8014030 <CDC_Control_FS+0xac>
 8013f9a:	a201      	add	r2, pc, #4	; (adr r2, 8013fa0 <CDC_Control_FS+0x1c>)
 8013f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa0:	08014031 	.word	0x08014031
 8013fa4:	08014031 	.word	0x08014031
 8013fa8:	08014031 	.word	0x08014031
 8013fac:	08014031 	.word	0x08014031
 8013fb0:	08014031 	.word	0x08014031
 8013fb4:	08014031 	.word	0x08014031
 8013fb8:	08014031 	.word	0x08014031
 8013fbc:	08014031 	.word	0x08014031
 8013fc0:	08014031 	.word	0x08014031
 8013fc4:	08014031 	.word	0x08014031
 8013fc8:	08014031 	.word	0x08014031
 8013fcc:	08014031 	.word	0x08014031
 8013fd0:	08014031 	.word	0x08014031
 8013fd4:	08014031 	.word	0x08014031
 8013fd8:	08014031 	.word	0x08014031
 8013fdc:	08014031 	.word	0x08014031
 8013fe0:	08014031 	.word	0x08014031
 8013fe4:	08014031 	.word	0x08014031
 8013fe8:	08014031 	.word	0x08014031
 8013fec:	08014031 	.word	0x08014031
 8013ff0:	08014031 	.word	0x08014031
 8013ff4:	08014031 	.word	0x08014031
 8013ff8:	08014031 	.word	0x08014031
 8013ffc:	08014031 	.word	0x08014031
 8014000:	08014031 	.word	0x08014031
 8014004:	08014031 	.word	0x08014031
 8014008:	08014031 	.word	0x08014031
 801400c:	08014031 	.word	0x08014031
 8014010:	08014031 	.word	0x08014031
 8014014:	08014031 	.word	0x08014031
 8014018:	08014031 	.word	0x08014031
 801401c:	08014031 	.word	0x08014031
 8014020:	08014031 	.word	0x08014031
 8014024:	08014031 	.word	0x08014031
 8014028:	08014031 	.word	0x08014031
 801402c:	08014031 	.word	0x08014031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014030:	bf00      	nop
  }

  return (USBD_OK);
 8014032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014034:	4618      	mov	r0, r3
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr

08014040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801404a:	6879      	ldr	r1, [r7, #4]
 801404c:	4805      	ldr	r0, [pc, #20]	; (8014064 <CDC_Receive_FS+0x24>)
 801404e:	f7fb fcd0 	bl	800f9f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014052:	4804      	ldr	r0, [pc, #16]	; (8014064 <CDC_Receive_FS+0x24>)
 8014054:	f7fb fce1 	bl	800fa1a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801405a:	4618      	mov	r0, r3
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	2000ec84 	.word	0x2000ec84

08014068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014068:	b480      	push	{r7}
 801406a:	b083      	sub	sp, #12
 801406c:	af00      	add	r7, sp, #0
 801406e:	4603      	mov	r3, r0
 8014070:	6039      	str	r1, [r7, #0]
 8014072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	2212      	movs	r2, #18
 8014078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801407a:	4b03      	ldr	r3, [pc, #12]	; (8014088 <USBD_FS_DeviceDescriptor+0x20>)
}
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	200001a8 	.word	0x200001a8

0801408c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	4603      	mov	r3, r0
 8014094:	6039      	str	r1, [r7, #0]
 8014096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	2204      	movs	r2, #4
 801409c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801409e:	4b03      	ldr	r3, [pc, #12]	; (80140ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	370c      	adds	r7, #12
 80140a4:	46bd      	mov	sp, r7
 80140a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140aa:	4770      	bx	lr
 80140ac:	200001c8 	.word	0x200001c8

080140b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	6039      	str	r1, [r7, #0]
 80140ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80140bc:	79fb      	ldrb	r3, [r7, #7]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d105      	bne.n	80140ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80140c2:	683a      	ldr	r2, [r7, #0]
 80140c4:	4907      	ldr	r1, [pc, #28]	; (80140e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80140c6:	4808      	ldr	r0, [pc, #32]	; (80140e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80140c8:	f7fc fcec 	bl	8010aa4 <USBD_GetString>
 80140cc:	e004      	b.n	80140d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	4904      	ldr	r1, [pc, #16]	; (80140e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80140d2:	4805      	ldr	r0, [pc, #20]	; (80140e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80140d4:	f7fc fce6 	bl	8010aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80140d8:	4b02      	ldr	r3, [pc, #8]	; (80140e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	2000ff48 	.word	0x2000ff48
 80140e8:	08017e54 	.word	0x08017e54

080140ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	4603      	mov	r3, r0
 80140f4:	6039      	str	r1, [r7, #0]
 80140f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80140f8:	683a      	ldr	r2, [r7, #0]
 80140fa:	4904      	ldr	r1, [pc, #16]	; (801410c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80140fc:	4804      	ldr	r0, [pc, #16]	; (8014110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80140fe:	f7fc fcd1 	bl	8010aa4 <USBD_GetString>
  return USBD_StrDesc;
 8014102:	4b02      	ldr	r3, [pc, #8]	; (801410c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014104:	4618      	mov	r0, r3
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	2000ff48 	.word	0x2000ff48
 8014110:	08017e6c 	.word	0x08017e6c

08014114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	4603      	mov	r3, r0
 801411c:	6039      	str	r1, [r7, #0]
 801411e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	221a      	movs	r2, #26
 8014124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014126:	f000 f855 	bl	80141d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801412a:	4b02      	ldr	r3, [pc, #8]	; (8014134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801412c:	4618      	mov	r0, r3
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	200001cc 	.word	0x200001cc

08014138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	4603      	mov	r3, r0
 8014140:	6039      	str	r1, [r7, #0]
 8014142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014144:	79fb      	ldrb	r3, [r7, #7]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d105      	bne.n	8014156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801414a:	683a      	ldr	r2, [r7, #0]
 801414c:	4907      	ldr	r1, [pc, #28]	; (801416c <USBD_FS_ConfigStrDescriptor+0x34>)
 801414e:	4808      	ldr	r0, [pc, #32]	; (8014170 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014150:	f7fc fca8 	bl	8010aa4 <USBD_GetString>
 8014154:	e004      	b.n	8014160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014156:	683a      	ldr	r2, [r7, #0]
 8014158:	4904      	ldr	r1, [pc, #16]	; (801416c <USBD_FS_ConfigStrDescriptor+0x34>)
 801415a:	4805      	ldr	r0, [pc, #20]	; (8014170 <USBD_FS_ConfigStrDescriptor+0x38>)
 801415c:	f7fc fca2 	bl	8010aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014160:	4b02      	ldr	r3, [pc, #8]	; (801416c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014162:	4618      	mov	r0, r3
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	2000ff48 	.word	0x2000ff48
 8014170:	08017e80 	.word	0x08017e80

08014174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	6039      	str	r1, [r7, #0]
 801417e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014180:	79fb      	ldrb	r3, [r7, #7]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d105      	bne.n	8014192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014186:	683a      	ldr	r2, [r7, #0]
 8014188:	4907      	ldr	r1, [pc, #28]	; (80141a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801418a:	4808      	ldr	r0, [pc, #32]	; (80141ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801418c:	f7fc fc8a 	bl	8010aa4 <USBD_GetString>
 8014190:	e004      	b.n	801419c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	4904      	ldr	r1, [pc, #16]	; (80141a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014196:	4805      	ldr	r0, [pc, #20]	; (80141ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014198:	f7fc fc84 	bl	8010aa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801419c:	4b02      	ldr	r3, [pc, #8]	; (80141a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	2000ff48 	.word	0x2000ff48
 80141ac:	08017e8c 	.word	0x08017e8c

080141b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141b0:	b480      	push	{r7}
 80141b2:	b083      	sub	sp, #12
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	4603      	mov	r3, r0
 80141b8:	6039      	str	r1, [r7, #0]
 80141ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	220c      	movs	r2, #12
 80141c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80141c2:	4b03      	ldr	r3, [pc, #12]	; (80141d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr
 80141d0:	200001bc 	.word	0x200001bc

080141d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80141da:	4b0f      	ldr	r3, [pc, #60]	; (8014218 <Get_SerialNum+0x44>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80141e0:	4b0e      	ldr	r3, [pc, #56]	; (801421c <Get_SerialNum+0x48>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80141e6:	4b0e      	ldr	r3, [pc, #56]	; (8014220 <Get_SerialNum+0x4c>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4413      	add	r3, r2
 80141f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d009      	beq.n	801420e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80141fa:	2208      	movs	r2, #8
 80141fc:	4909      	ldr	r1, [pc, #36]	; (8014224 <Get_SerialNum+0x50>)
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f000 f814 	bl	801422c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014204:	2204      	movs	r2, #4
 8014206:	4908      	ldr	r1, [pc, #32]	; (8014228 <Get_SerialNum+0x54>)
 8014208:	68b8      	ldr	r0, [r7, #8]
 801420a:	f000 f80f 	bl	801422c <IntToUnicode>
  }
}
 801420e:	bf00      	nop
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
 8014216:	bf00      	nop
 8014218:	1fff7590 	.word	0x1fff7590
 801421c:	1fff7594 	.word	0x1fff7594
 8014220:	1fff7598 	.word	0x1fff7598
 8014224:	200001ce 	.word	0x200001ce
 8014228:	200001de 	.word	0x200001de

0801422c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801422c:	b480      	push	{r7}
 801422e:	b087      	sub	sp, #28
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	4613      	mov	r3, r2
 8014238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801423a:	2300      	movs	r3, #0
 801423c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801423e:	2300      	movs	r3, #0
 8014240:	75fb      	strb	r3, [r7, #23]
 8014242:	e027      	b.n	8014294 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	0f1b      	lsrs	r3, r3, #28
 8014248:	2b09      	cmp	r3, #9
 801424a:	d80b      	bhi.n	8014264 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	0f1b      	lsrs	r3, r3, #28
 8014250:	b2da      	uxtb	r2, r3
 8014252:	7dfb      	ldrb	r3, [r7, #23]
 8014254:	005b      	lsls	r3, r3, #1
 8014256:	4619      	mov	r1, r3
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	440b      	add	r3, r1
 801425c:	3230      	adds	r2, #48	; 0x30
 801425e:	b2d2      	uxtb	r2, r2
 8014260:	701a      	strb	r2, [r3, #0]
 8014262:	e00a      	b.n	801427a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	0f1b      	lsrs	r3, r3, #28
 8014268:	b2da      	uxtb	r2, r3
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	005b      	lsls	r3, r3, #1
 801426e:	4619      	mov	r1, r3
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	440b      	add	r3, r1
 8014274:	3237      	adds	r2, #55	; 0x37
 8014276:	b2d2      	uxtb	r2, r2
 8014278:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	011b      	lsls	r3, r3, #4
 801427e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014280:	7dfb      	ldrb	r3, [r7, #23]
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	3301      	adds	r3, #1
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	4413      	add	r3, r2
 801428a:	2200      	movs	r2, #0
 801428c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801428e:	7dfb      	ldrb	r3, [r7, #23]
 8014290:	3301      	adds	r3, #1
 8014292:	75fb      	strb	r3, [r7, #23]
 8014294:	7dfa      	ldrb	r2, [r7, #23]
 8014296:	79fb      	ldrb	r3, [r7, #7]
 8014298:	429a      	cmp	r2, r3
 801429a:	d3d3      	bcc.n	8014244 <IntToUnicode+0x18>
  }
}
 801429c:	bf00      	nop
 801429e:	371c      	adds	r7, #28
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b08a      	sub	sp, #40	; 0x28
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142b0:	f107 0314 	add.w	r3, r7, #20
 80142b4:	2200      	movs	r2, #0
 80142b6:	601a      	str	r2, [r3, #0]
 80142b8:	605a      	str	r2, [r3, #4]
 80142ba:	609a      	str	r2, [r3, #8]
 80142bc:	60da      	str	r2, [r3, #12]
 80142be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80142c8:	d14e      	bne.n	8014368 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80142ca:	4b29      	ldr	r3, [pc, #164]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 80142cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142ce:	4a28      	ldr	r2, [pc, #160]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 80142d0:	f043 0301 	orr.w	r3, r3, #1
 80142d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80142d6:	4b26      	ldr	r3, [pc, #152]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 80142d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	613b      	str	r3, [r7, #16]
 80142e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80142e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80142e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142e8:	2302      	movs	r3, #2
 80142ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142ec:	2300      	movs	r3, #0
 80142ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80142f0:	2303      	movs	r3, #3
 80142f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80142f4:	230a      	movs	r3, #10
 80142f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80142f8:	f107 0314 	add.w	r3, r7, #20
 80142fc:	4619      	mov	r1, r3
 80142fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014302:	f7f2 fb03 	bl	800690c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014306:	4b1a      	ldr	r3, [pc, #104]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801430a:	4a19      	ldr	r2, [pc, #100]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 801430c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014312:	4b17      	ldr	r3, [pc, #92]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801431a:	60fb      	str	r3, [r7, #12]
 801431c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801431e:	4b14      	ldr	r3, [pc, #80]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014326:	2b00      	cmp	r3, #0
 8014328:	d114      	bne.n	8014354 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801432a:	4b11      	ldr	r3, [pc, #68]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 801432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801432e:	4a10      	ldr	r2, [pc, #64]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014334:	6593      	str	r3, [r2, #88]	; 0x58
 8014336:	4b0e      	ldr	r3, [pc, #56]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801433e:	60bb      	str	r3, [r7, #8]
 8014340:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8014342:	f7f4 fbc9 	bl	8008ad8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8014346:	4b0a      	ldr	r3, [pc, #40]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 8014348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801434a:	4a09      	ldr	r2, [pc, #36]	; (8014370 <HAL_PCD_MspInit+0xc8>)
 801434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014350:	6593      	str	r3, [r2, #88]	; 0x58
 8014352:	e001      	b.n	8014358 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8014354:	f7f4 fbc0 	bl	8008ad8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014358:	2200      	movs	r2, #0
 801435a:	2105      	movs	r1, #5
 801435c:	2043      	movs	r0, #67	; 0x43
 801435e:	f7f2 f9e3 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014362:	2043      	movs	r0, #67	; 0x43
 8014364:	f7f2 f9fc 	bl	8006760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014368:	bf00      	nop
 801436a:	3728      	adds	r7, #40	; 0x28
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	40021000 	.word	0x40021000

08014374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014388:	4619      	mov	r1, r3
 801438a:	4610      	mov	r0, r2
 801438c:	f7fb fbfd 	bl	800fb8a <USBD_LL_SetupStage>
}
 8014390:	bf00      	nop
 8014392:	3708      	adds	r7, #8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	460b      	mov	r3, r1
 80143a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80143aa:	78fa      	ldrb	r2, [r7, #3]
 80143ac:	6879      	ldr	r1, [r7, #4]
 80143ae:	4613      	mov	r3, r2
 80143b0:	00db      	lsls	r3, r3, #3
 80143b2:	1a9b      	subs	r3, r3, r2
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	440b      	add	r3, r1
 80143b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80143bc:	681a      	ldr	r2, [r3, #0]
 80143be:	78fb      	ldrb	r3, [r7, #3]
 80143c0:	4619      	mov	r1, r3
 80143c2:	f7fb fc2d 	bl	800fc20 <USBD_LL_DataOutStage>
}
 80143c6:	bf00      	nop
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b082      	sub	sp, #8
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
 80143d6:	460b      	mov	r3, r1
 80143d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80143e0:	78fa      	ldrb	r2, [r7, #3]
 80143e2:	6879      	ldr	r1, [r7, #4]
 80143e4:	4613      	mov	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	1a9b      	subs	r3, r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	440b      	add	r3, r1
 80143ee:	3348      	adds	r3, #72	; 0x48
 80143f0:	681a      	ldr	r2, [r3, #0]
 80143f2:	78fb      	ldrb	r3, [r7, #3]
 80143f4:	4619      	mov	r1, r3
 80143f6:	f7fb fc84 	bl	800fd02 <USBD_LL_DataInStage>
}
 80143fa:	bf00      	nop
 80143fc:	3708      	adds	r7, #8
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b082      	sub	sp, #8
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014410:	4618      	mov	r0, r3
 8014412:	f7fb fd97 	bl	800ff44 <USBD_LL_SOF>
}
 8014416:	bf00      	nop
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801441e:	b580      	push	{r7, lr}
 8014420:	b084      	sub	sp, #16
 8014422:	af00      	add	r7, sp, #0
 8014424:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014426:	2301      	movs	r3, #1
 8014428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	2b02      	cmp	r3, #2
 8014430:	d001      	beq.n	8014436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014432:	f7ef fc11 	bl	8003c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801443c:	7bfa      	ldrb	r2, [r7, #15]
 801443e:	4611      	mov	r1, r2
 8014440:	4618      	mov	r0, r3
 8014442:	f7fb fd44 	bl	800fece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801444c:	4618      	mov	r0, r3
 801444e:	f7fb fcfd 	bl	800fe4c <USBD_LL_Reset>
}
 8014452:	bf00      	nop
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
	...

0801445c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	6812      	ldr	r2, [r2, #0]
 8014472:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014476:	f043 0301 	orr.w	r3, r3, #1
 801447a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014482:	4618      	mov	r0, r3
 8014484:	f7fb fd33 	bl	800feee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6a1b      	ldr	r3, [r3, #32]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d005      	beq.n	801449c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014490:	4b04      	ldr	r3, [pc, #16]	; (80144a4 <HAL_PCD_SuspendCallback+0x48>)
 8014492:	691b      	ldr	r3, [r3, #16]
 8014494:	4a03      	ldr	r2, [pc, #12]	; (80144a4 <HAL_PCD_SuspendCallback+0x48>)
 8014496:	f043 0306 	orr.w	r3, r3, #6
 801449a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801449c:	bf00      	nop
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	e000ed00 	.word	0xe000ed00

080144a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	6812      	ldr	r2, [r2, #0]
 80144be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80144c2:	f023 0301 	bic.w	r3, r3, #1
 80144c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6a1b      	ldr	r3, [r3, #32]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d007      	beq.n	80144e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80144d0:	4b08      	ldr	r3, [pc, #32]	; (80144f4 <HAL_PCD_ResumeCallback+0x4c>)
 80144d2:	691b      	ldr	r3, [r3, #16]
 80144d4:	4a07      	ldr	r2, [pc, #28]	; (80144f4 <HAL_PCD_ResumeCallback+0x4c>)
 80144d6:	f023 0306 	bic.w	r3, r3, #6
 80144da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80144dc:	f000 fafa 	bl	8014ad4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fb fd16 	bl	800ff18 <USBD_LL_Resume>
}
 80144ec:	bf00      	nop
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	e000ed00 	.word	0xe000ed00

080144f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	460b      	mov	r3, r1
 8014502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801450a:	78fa      	ldrb	r2, [r7, #3]
 801450c:	4611      	mov	r1, r2
 801450e:	4618      	mov	r0, r3
 8014510:	f7fb fd3f 	bl	800ff92 <USBD_LL_IsoOUTIncomplete>
}
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	460b      	mov	r3, r1
 8014526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801452e:	78fa      	ldrb	r2, [r7, #3]
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f7fb fd20 	bl	800ff78 <USBD_LL_IsoINIncomplete>
}
 8014538:	bf00      	nop
 801453a:	3708      	adds	r7, #8
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801454e:	4618      	mov	r0, r3
 8014550:	f7fb fd2c 	bl	800ffac <USBD_LL_DevConnected>
}
 8014554:	bf00      	nop
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801456a:	4618      	mov	r0, r3
 801456c:	f7fb fd29 	bl	800ffc2 <USBD_LL_DevDisconnected>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d13c      	bne.n	8014602 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014588:	4a20      	ldr	r2, [pc, #128]	; (801460c <USBD_LL_Init+0x94>)
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	4a1e      	ldr	r2, [pc, #120]	; (801460c <USBD_LL_Init+0x94>)
 8014594:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014598:	4b1c      	ldr	r3, [pc, #112]	; (801460c <USBD_LL_Init+0x94>)
 801459a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801459e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80145a0:	4b1a      	ldr	r3, [pc, #104]	; (801460c <USBD_LL_Init+0x94>)
 80145a2:	2206      	movs	r2, #6
 80145a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80145a6:	4b19      	ldr	r3, [pc, #100]	; (801460c <USBD_LL_Init+0x94>)
 80145a8:	2202      	movs	r2, #2
 80145aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80145ac:	4b17      	ldr	r3, [pc, #92]	; (801460c <USBD_LL_Init+0x94>)
 80145ae:	2202      	movs	r2, #2
 80145b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80145b2:	4b16      	ldr	r3, [pc, #88]	; (801460c <USBD_LL_Init+0x94>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80145b8:	4b14      	ldr	r3, [pc, #80]	; (801460c <USBD_LL_Init+0x94>)
 80145ba:	2200      	movs	r2, #0
 80145bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80145be:	4b13      	ldr	r3, [pc, #76]	; (801460c <USBD_LL_Init+0x94>)
 80145c0:	2200      	movs	r2, #0
 80145c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80145c4:	4b11      	ldr	r3, [pc, #68]	; (801460c <USBD_LL_Init+0x94>)
 80145c6:	2200      	movs	r2, #0
 80145c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80145ca:	4b10      	ldr	r3, [pc, #64]	; (801460c <USBD_LL_Init+0x94>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80145d0:	4b0e      	ldr	r3, [pc, #56]	; (801460c <USBD_LL_Init+0x94>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80145d6:	480d      	ldr	r0, [pc, #52]	; (801460c <USBD_LL_Init+0x94>)
 80145d8:	f7f3 f96b 	bl	80078b2 <HAL_PCD_Init>
 80145dc:	4603      	mov	r3, r0
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d001      	beq.n	80145e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80145e2:	f7ef fb39 	bl	8003c58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80145e6:	2180      	movs	r1, #128	; 0x80
 80145e8:	4808      	ldr	r0, [pc, #32]	; (801460c <USBD_LL_Init+0x94>)
 80145ea:	f7f4 f9cc 	bl	8008986 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80145ee:	2240      	movs	r2, #64	; 0x40
 80145f0:	2100      	movs	r1, #0
 80145f2:	4806      	ldr	r0, [pc, #24]	; (801460c <USBD_LL_Init+0x94>)
 80145f4:	f7f4 f980 	bl	80088f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80145f8:	2280      	movs	r2, #128	; 0x80
 80145fa:	2101      	movs	r1, #1
 80145fc:	4803      	ldr	r0, [pc, #12]	; (801460c <USBD_LL_Init+0x94>)
 80145fe:	f7f4 f97b 	bl	80088f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014602:	2300      	movs	r3, #0
}
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	20010148 	.word	0x20010148

08014610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014618:	2300      	movs	r3, #0
 801461a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801461c:	2300      	movs	r3, #0
 801461e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014626:	4618      	mov	r0, r3
 8014628:	f7f3 fa67 	bl	8007afa <HAL_PCD_Start>
 801462c:	4603      	mov	r3, r0
 801462e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8014630:	7bbb      	ldrb	r3, [r7, #14]
 8014632:	2b03      	cmp	r3, #3
 8014634:	d816      	bhi.n	8014664 <USBD_LL_Start+0x54>
 8014636:	a201      	add	r2, pc, #4	; (adr r2, 801463c <USBD_LL_Start+0x2c>)
 8014638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801463c:	0801464d 	.word	0x0801464d
 8014640:	08014653 	.word	0x08014653
 8014644:	08014659 	.word	0x08014659
 8014648:	0801465f 	.word	0x0801465f
    case HAL_OK :
      usb_status = USBD_OK;
 801464c:	2300      	movs	r3, #0
 801464e:	73fb      	strb	r3, [r7, #15]
    break;
 8014650:	e00b      	b.n	801466a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014652:	2302      	movs	r3, #2
 8014654:	73fb      	strb	r3, [r7, #15]
    break;
 8014656:	e008      	b.n	801466a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014658:	2301      	movs	r3, #1
 801465a:	73fb      	strb	r3, [r7, #15]
    break;
 801465c:	e005      	b.n	801466a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801465e:	2302      	movs	r3, #2
 8014660:	73fb      	strb	r3, [r7, #15]
    break;
 8014662:	e002      	b.n	801466a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014664:	2302      	movs	r3, #2
 8014666:	73fb      	strb	r3, [r7, #15]
    break;
 8014668:	bf00      	nop
  }
  return usb_status;
 801466a:	7bfb      	ldrb	r3, [r7, #15]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	4608      	mov	r0, r1
 801467e:	4611      	mov	r1, r2
 8014680:	461a      	mov	r2, r3
 8014682:	4603      	mov	r3, r0
 8014684:	70fb      	strb	r3, [r7, #3]
 8014686:	460b      	mov	r3, r1
 8014688:	70bb      	strb	r3, [r7, #2]
 801468a:	4613      	mov	r3, r2
 801468c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801468e:	2300      	movs	r3, #0
 8014690:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014692:	2300      	movs	r3, #0
 8014694:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801469c:	78bb      	ldrb	r3, [r7, #2]
 801469e:	883a      	ldrh	r2, [r7, #0]
 80146a0:	78f9      	ldrb	r1, [r7, #3]
 80146a2:	f7f3 fe22 	bl	80082ea <HAL_PCD_EP_Open>
 80146a6:	4603      	mov	r3, r0
 80146a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80146aa:	7bbb      	ldrb	r3, [r7, #14]
 80146ac:	2b03      	cmp	r3, #3
 80146ae:	d817      	bhi.n	80146e0 <USBD_LL_OpenEP+0x6c>
 80146b0:	a201      	add	r2, pc, #4	; (adr r2, 80146b8 <USBD_LL_OpenEP+0x44>)
 80146b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b6:	bf00      	nop
 80146b8:	080146c9 	.word	0x080146c9
 80146bc:	080146cf 	.word	0x080146cf
 80146c0:	080146d5 	.word	0x080146d5
 80146c4:	080146db 	.word	0x080146db
    case HAL_OK :
      usb_status = USBD_OK;
 80146c8:	2300      	movs	r3, #0
 80146ca:	73fb      	strb	r3, [r7, #15]
    break;
 80146cc:	e00b      	b.n	80146e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80146ce:	2302      	movs	r3, #2
 80146d0:	73fb      	strb	r3, [r7, #15]
    break;
 80146d2:	e008      	b.n	80146e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80146d4:	2301      	movs	r3, #1
 80146d6:	73fb      	strb	r3, [r7, #15]
    break;
 80146d8:	e005      	b.n	80146e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80146da:	2302      	movs	r3, #2
 80146dc:	73fb      	strb	r3, [r7, #15]
    break;
 80146de:	e002      	b.n	80146e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80146e0:	2302      	movs	r3, #2
 80146e2:	73fb      	strb	r3, [r7, #15]
    break;
 80146e4:	bf00      	nop
  }
  return usb_status;
 80146e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	460b      	mov	r3, r1
 80146fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146fc:	2300      	movs	r3, #0
 80146fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801470a:	78fa      	ldrb	r2, [r7, #3]
 801470c:	4611      	mov	r1, r2
 801470e:	4618      	mov	r0, r3
 8014710:	f7f3 fe53 	bl	80083ba <HAL_PCD_EP_Close>
 8014714:	4603      	mov	r3, r0
 8014716:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8014718:	7bbb      	ldrb	r3, [r7, #14]
 801471a:	2b03      	cmp	r3, #3
 801471c:	d816      	bhi.n	801474c <USBD_LL_CloseEP+0x5c>
 801471e:	a201      	add	r2, pc, #4	; (adr r2, 8014724 <USBD_LL_CloseEP+0x34>)
 8014720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014724:	08014735 	.word	0x08014735
 8014728:	0801473b 	.word	0x0801473b
 801472c:	08014741 	.word	0x08014741
 8014730:	08014747 	.word	0x08014747
    case HAL_OK :
      usb_status = USBD_OK;
 8014734:	2300      	movs	r3, #0
 8014736:	73fb      	strb	r3, [r7, #15]
    break;
 8014738:	e00b      	b.n	8014752 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801473a:	2302      	movs	r3, #2
 801473c:	73fb      	strb	r3, [r7, #15]
    break;
 801473e:	e008      	b.n	8014752 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014740:	2301      	movs	r3, #1
 8014742:	73fb      	strb	r3, [r7, #15]
    break;
 8014744:	e005      	b.n	8014752 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014746:	2302      	movs	r3, #2
 8014748:	73fb      	strb	r3, [r7, #15]
    break;
 801474a:	e002      	b.n	8014752 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801474c:	2302      	movs	r3, #2
 801474e:	73fb      	strb	r3, [r7, #15]
    break;
 8014750:	bf00      	nop
  }
  return usb_status;  
 8014752:	7bfb      	ldrb	r3, [r7, #15]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3710      	adds	r7, #16
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b084      	sub	sp, #16
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014768:	2300      	movs	r3, #0
 801476a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801476c:	2300      	movs	r3, #0
 801476e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014776:	78fa      	ldrb	r2, [r7, #3]
 8014778:	4611      	mov	r1, r2
 801477a:	4618      	mov	r0, r3
 801477c:	f7f3 fefa 	bl	8008574 <HAL_PCD_EP_SetStall>
 8014780:	4603      	mov	r3, r0
 8014782:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014784:	7bbb      	ldrb	r3, [r7, #14]
 8014786:	2b03      	cmp	r3, #3
 8014788:	d816      	bhi.n	80147b8 <USBD_LL_StallEP+0x5c>
 801478a:	a201      	add	r2, pc, #4	; (adr r2, 8014790 <USBD_LL_StallEP+0x34>)
 801478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014790:	080147a1 	.word	0x080147a1
 8014794:	080147a7 	.word	0x080147a7
 8014798:	080147ad 	.word	0x080147ad
 801479c:	080147b3 	.word	0x080147b3
    case HAL_OK :
      usb_status = USBD_OK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	73fb      	strb	r3, [r7, #15]
    break;
 80147a4:	e00b      	b.n	80147be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80147a6:	2302      	movs	r3, #2
 80147a8:	73fb      	strb	r3, [r7, #15]
    break;
 80147aa:	e008      	b.n	80147be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80147ac:	2301      	movs	r3, #1
 80147ae:	73fb      	strb	r3, [r7, #15]
    break;
 80147b0:	e005      	b.n	80147be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80147b2:	2302      	movs	r3, #2
 80147b4:	73fb      	strb	r3, [r7, #15]
    break;
 80147b6:	e002      	b.n	80147be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80147b8:	2302      	movs	r3, #2
 80147ba:	73fb      	strb	r3, [r7, #15]
    break;
 80147bc:	bf00      	nop
  }
  return usb_status;  
 80147be:	7bfb      	ldrb	r3, [r7, #15]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3710      	adds	r7, #16
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b084      	sub	sp, #16
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	460b      	mov	r3, r1
 80147d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147d4:	2300      	movs	r3, #0
 80147d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80147e2:	78fa      	ldrb	r2, [r7, #3]
 80147e4:	4611      	mov	r1, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7f3 ff26 	bl	8008638 <HAL_PCD_EP_ClrStall>
 80147ec:	4603      	mov	r3, r0
 80147ee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80147f0:	7bbb      	ldrb	r3, [r7, #14]
 80147f2:	2b03      	cmp	r3, #3
 80147f4:	d816      	bhi.n	8014824 <USBD_LL_ClearStallEP+0x5c>
 80147f6:	a201      	add	r2, pc, #4	; (adr r2, 80147fc <USBD_LL_ClearStallEP+0x34>)
 80147f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147fc:	0801480d 	.word	0x0801480d
 8014800:	08014813 	.word	0x08014813
 8014804:	08014819 	.word	0x08014819
 8014808:	0801481f 	.word	0x0801481f
    case HAL_OK :
      usb_status = USBD_OK;
 801480c:	2300      	movs	r3, #0
 801480e:	73fb      	strb	r3, [r7, #15]
    break;
 8014810:	e00b      	b.n	801482a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014812:	2302      	movs	r3, #2
 8014814:	73fb      	strb	r3, [r7, #15]
    break;
 8014816:	e008      	b.n	801482a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014818:	2301      	movs	r3, #1
 801481a:	73fb      	strb	r3, [r7, #15]
    break;
 801481c:	e005      	b.n	801482a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801481e:	2302      	movs	r3, #2
 8014820:	73fb      	strb	r3, [r7, #15]
    break;
 8014822:	e002      	b.n	801482a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014824:	2302      	movs	r3, #2
 8014826:	73fb      	strb	r3, [r7, #15]
    break;
 8014828:	bf00      	nop
  }
  return usb_status; 
 801482a:	7bfb      	ldrb	r3, [r7, #15]
}
 801482c:	4618      	mov	r0, r3
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014846:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801484c:	2b00      	cmp	r3, #0
 801484e:	da0b      	bge.n	8014868 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014850:	78fb      	ldrb	r3, [r7, #3]
 8014852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014856:	68f9      	ldr	r1, [r7, #12]
 8014858:	4613      	mov	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	1a9b      	subs	r3, r3, r2
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	440b      	add	r3, r1
 8014862:	333e      	adds	r3, #62	; 0x3e
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	e00b      	b.n	8014880 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014868:	78fb      	ldrb	r3, [r7, #3]
 801486a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801486e:	68f9      	ldr	r1, [r7, #12]
 8014870:	4613      	mov	r3, r2
 8014872:	00db      	lsls	r3, r3, #3
 8014874:	1a9b      	subs	r3, r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	440b      	add	r3, r1
 801487a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801487e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014880:	4618      	mov	r0, r3
 8014882:	3714      	adds	r7, #20
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr

0801488c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	460b      	mov	r3, r1
 8014896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014898:	2300      	movs	r3, #0
 801489a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801489c:	2300      	movs	r3, #0
 801489e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148a6:	78fa      	ldrb	r2, [r7, #3]
 80148a8:	4611      	mov	r1, r2
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7f3 fcf8 	bl	80082a0 <HAL_PCD_SetAddress>
 80148b0:	4603      	mov	r3, r0
 80148b2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80148b4:	7bbb      	ldrb	r3, [r7, #14]
 80148b6:	2b03      	cmp	r3, #3
 80148b8:	d816      	bhi.n	80148e8 <USBD_LL_SetUSBAddress+0x5c>
 80148ba:	a201      	add	r2, pc, #4	; (adr r2, 80148c0 <USBD_LL_SetUSBAddress+0x34>)
 80148bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c0:	080148d1 	.word	0x080148d1
 80148c4:	080148d7 	.word	0x080148d7
 80148c8:	080148dd 	.word	0x080148dd
 80148cc:	080148e3 	.word	0x080148e3
    case HAL_OK :
      usb_status = USBD_OK;
 80148d0:	2300      	movs	r3, #0
 80148d2:	73fb      	strb	r3, [r7, #15]
    break;
 80148d4:	e00b      	b.n	80148ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80148d6:	2302      	movs	r3, #2
 80148d8:	73fb      	strb	r3, [r7, #15]
    break;
 80148da:	e008      	b.n	80148ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80148dc:	2301      	movs	r3, #1
 80148de:	73fb      	strb	r3, [r7, #15]
    break;
 80148e0:	e005      	b.n	80148ee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80148e2:	2302      	movs	r3, #2
 80148e4:	73fb      	strb	r3, [r7, #15]
    break;
 80148e6:	e002      	b.n	80148ee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80148e8:	2302      	movs	r3, #2
 80148ea:	73fb      	strb	r3, [r7, #15]
    break;
 80148ec:	bf00      	nop
  }
  return usb_status;  
 80148ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b086      	sub	sp, #24
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	607a      	str	r2, [r7, #4]
 8014902:	461a      	mov	r2, r3
 8014904:	460b      	mov	r3, r1
 8014906:	72fb      	strb	r3, [r7, #11]
 8014908:	4613      	mov	r3, r2
 801490a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801490c:	2300      	movs	r3, #0
 801490e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014910:	2300      	movs	r3, #0
 8014912:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801491a:	893b      	ldrh	r3, [r7, #8]
 801491c:	7af9      	ldrb	r1, [r7, #11]
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	f7f3 fdeb 	bl	80084fa <HAL_PCD_EP_Transmit>
 8014924:	4603      	mov	r3, r0
 8014926:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8014928:	7dbb      	ldrb	r3, [r7, #22]
 801492a:	2b03      	cmp	r3, #3
 801492c:	d816      	bhi.n	801495c <USBD_LL_Transmit+0x64>
 801492e:	a201      	add	r2, pc, #4	; (adr r2, 8014934 <USBD_LL_Transmit+0x3c>)
 8014930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014934:	08014945 	.word	0x08014945
 8014938:	0801494b 	.word	0x0801494b
 801493c:	08014951 	.word	0x08014951
 8014940:	08014957 	.word	0x08014957
    case HAL_OK :
      usb_status = USBD_OK;
 8014944:	2300      	movs	r3, #0
 8014946:	75fb      	strb	r3, [r7, #23]
    break;
 8014948:	e00b      	b.n	8014962 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801494a:	2302      	movs	r3, #2
 801494c:	75fb      	strb	r3, [r7, #23]
    break;
 801494e:	e008      	b.n	8014962 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014950:	2301      	movs	r3, #1
 8014952:	75fb      	strb	r3, [r7, #23]
    break;
 8014954:	e005      	b.n	8014962 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014956:	2302      	movs	r3, #2
 8014958:	75fb      	strb	r3, [r7, #23]
    break;
 801495a:	e002      	b.n	8014962 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 801495c:	2302      	movs	r3, #2
 801495e:	75fb      	strb	r3, [r7, #23]
    break;
 8014960:	bf00      	nop
  }
  return usb_status;    
 8014962:	7dfb      	ldrb	r3, [r7, #23]
}
 8014964:	4618      	mov	r0, r3
 8014966:	3718      	adds	r7, #24
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}

0801496c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b086      	sub	sp, #24
 8014970:	af00      	add	r7, sp, #0
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	607a      	str	r2, [r7, #4]
 8014976:	461a      	mov	r2, r3
 8014978:	460b      	mov	r3, r1
 801497a:	72fb      	strb	r3, [r7, #11]
 801497c:	4613      	mov	r3, r2
 801497e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014980:	2300      	movs	r3, #0
 8014982:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014984:	2300      	movs	r3, #0
 8014986:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801498e:	893b      	ldrh	r3, [r7, #8]
 8014990:	7af9      	ldrb	r1, [r7, #11]
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	f7f3 fd5b 	bl	800844e <HAL_PCD_EP_Receive>
 8014998:	4603      	mov	r3, r0
 801499a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 801499c:	7dbb      	ldrb	r3, [r7, #22]
 801499e:	2b03      	cmp	r3, #3
 80149a0:	d816      	bhi.n	80149d0 <USBD_LL_PrepareReceive+0x64>
 80149a2:	a201      	add	r2, pc, #4	; (adr r2, 80149a8 <USBD_LL_PrepareReceive+0x3c>)
 80149a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a8:	080149b9 	.word	0x080149b9
 80149ac:	080149bf 	.word	0x080149bf
 80149b0:	080149c5 	.word	0x080149c5
 80149b4:	080149cb 	.word	0x080149cb
    case HAL_OK :
      usb_status = USBD_OK;
 80149b8:	2300      	movs	r3, #0
 80149ba:	75fb      	strb	r3, [r7, #23]
    break;
 80149bc:	e00b      	b.n	80149d6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80149be:	2302      	movs	r3, #2
 80149c0:	75fb      	strb	r3, [r7, #23]
    break;
 80149c2:	e008      	b.n	80149d6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80149c4:	2301      	movs	r3, #1
 80149c6:	75fb      	strb	r3, [r7, #23]
    break;
 80149c8:	e005      	b.n	80149d6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80149ca:	2302      	movs	r3, #2
 80149cc:	75fb      	strb	r3, [r7, #23]
    break;
 80149ce:	e002      	b.n	80149d6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80149d0:	2302      	movs	r3, #2
 80149d2:	75fb      	strb	r3, [r7, #23]
    break;
 80149d4:	bf00      	nop
  }
  return usb_status; 
 80149d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3718      	adds	r7, #24
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	460b      	mov	r3, r1
 80149ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149f2:	78fa      	ldrb	r2, [r7, #3]
 80149f4:	4611      	mov	r1, r2
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7f3 fd67 	bl	80084ca <HAL_PCD_EP_GetRxCount>
 80149fc:	4603      	mov	r3, r0
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3708      	adds	r7, #8
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
	...

08014a08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	460b      	mov	r3, r1
 8014a12:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014a14:	78fb      	ldrb	r3, [r7, #3]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d002      	beq.n	8014a20 <HAL_PCDEx_LPM_Callback+0x18>
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d01f      	beq.n	8014a5e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8014a1e:	e03b      	b.n	8014a98 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6a1b      	ldr	r3, [r3, #32]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d007      	beq.n	8014a38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014a28:	f000 f854 	bl	8014ad4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a2c:	4b1c      	ldr	r3, [pc, #112]	; (8014aa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a2e:	691b      	ldr	r3, [r3, #16]
 8014a30:	4a1b      	ldr	r2, [pc, #108]	; (8014aa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a32:	f023 0306 	bic.w	r3, r3, #6
 8014a36:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	6812      	ldr	r2, [r2, #0]
 8014a46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014a4a:	f023 0301 	bic.w	r3, r3, #1
 8014a4e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fb fa5e 	bl	800ff18 <USBD_LL_Resume>
    break;
 8014a5c:	e01c      	b.n	8014a98 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	6812      	ldr	r2, [r2, #0]
 8014a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014a70:	f043 0301 	orr.w	r3, r3, #1
 8014a74:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7fb fa36 	bl	800feee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6a1b      	ldr	r3, [r3, #32]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d005      	beq.n	8014a96 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a8a:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	4a04      	ldr	r2, [pc, #16]	; (8014aa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8014a90:	f043 0306 	orr.w	r3, r3, #6
 8014a94:	6113      	str	r3, [r2, #16]
    break;   
 8014a96:	bf00      	nop
}
 8014a98:	bf00      	nop
 8014a9a:	3708      	adds	r7, #8
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	e000ed00 	.word	0xe000ed00

08014aa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014aac:	4b03      	ldr	r3, [pc, #12]	; (8014abc <USBD_static_malloc+0x18>)
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	370c      	adds	r7, #12
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	2000d4dc 	.word	0x2000d4dc

08014ac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]

}
 8014ac8:	bf00      	nop
 8014aca:	370c      	adds	r7, #12
 8014acc:	46bd      	mov	sp, r7
 8014ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad2:	4770      	bx	lr

08014ad4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014ad8:	f7ee fa02 	bl	8002ee0 <SystemClock_Config>
}
 8014adc:	bf00      	nop
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <__assert_func>:
 8014ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ae2:	461c      	mov	r4, r3
 8014ae4:	4b09      	ldr	r3, [pc, #36]	; (8014b0c <__assert_func+0x2c>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4605      	mov	r5, r0
 8014aea:	68d8      	ldr	r0, [r3, #12]
 8014aec:	b152      	cbz	r2, 8014b04 <__assert_func+0x24>
 8014aee:	4b08      	ldr	r3, [pc, #32]	; (8014b10 <__assert_func+0x30>)
 8014af0:	9100      	str	r1, [sp, #0]
 8014af2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014af6:	4907      	ldr	r1, [pc, #28]	; (8014b14 <__assert_func+0x34>)
 8014af8:	462b      	mov	r3, r5
 8014afa:	4622      	mov	r2, r4
 8014afc:	f000 f818 	bl	8014b30 <fiprintf>
 8014b00:	f000 fdec 	bl	80156dc <abort>
 8014b04:	4b04      	ldr	r3, [pc, #16]	; (8014b18 <__assert_func+0x38>)
 8014b06:	461a      	mov	r2, r3
 8014b08:	e7f2      	b.n	8014af0 <__assert_func+0x10>
 8014b0a:	bf00      	nop
 8014b0c:	200001e8 	.word	0x200001e8
 8014b10:	08017f3c 	.word	0x08017f3c
 8014b14:	08017f49 	.word	0x08017f49
 8014b18:	08017f77 	.word	0x08017f77

08014b1c <atoi>:
 8014b1c:	220a      	movs	r2, #10
 8014b1e:	2100      	movs	r1, #0
 8014b20:	f000 bd06 	b.w	8015530 <strtol>

08014b24 <__errno>:
 8014b24:	4b01      	ldr	r3, [pc, #4]	; (8014b2c <__errno+0x8>)
 8014b26:	6818      	ldr	r0, [r3, #0]
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	200001e8 	.word	0x200001e8

08014b30 <fiprintf>:
 8014b30:	b40e      	push	{r1, r2, r3}
 8014b32:	b503      	push	{r0, r1, lr}
 8014b34:	4601      	mov	r1, r0
 8014b36:	ab03      	add	r3, sp, #12
 8014b38:	4805      	ldr	r0, [pc, #20]	; (8014b50 <fiprintf+0x20>)
 8014b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b3e:	6800      	ldr	r0, [r0, #0]
 8014b40:	9301      	str	r3, [sp, #4]
 8014b42:	f000 f911 	bl	8014d68 <_vfiprintf_r>
 8014b46:	b002      	add	sp, #8
 8014b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b4c:	b003      	add	sp, #12
 8014b4e:	4770      	bx	lr
 8014b50:	200001e8 	.word	0x200001e8

08014b54 <__libc_init_array>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	4e0d      	ldr	r6, [pc, #52]	; (8014b8c <__libc_init_array+0x38>)
 8014b58:	4c0d      	ldr	r4, [pc, #52]	; (8014b90 <__libc_init_array+0x3c>)
 8014b5a:	1ba4      	subs	r4, r4, r6
 8014b5c:	10a4      	asrs	r4, r4, #2
 8014b5e:	2500      	movs	r5, #0
 8014b60:	42a5      	cmp	r5, r4
 8014b62:	d109      	bne.n	8014b78 <__libc_init_array+0x24>
 8014b64:	4e0b      	ldr	r6, [pc, #44]	; (8014b94 <__libc_init_array+0x40>)
 8014b66:	4c0c      	ldr	r4, [pc, #48]	; (8014b98 <__libc_init_array+0x44>)
 8014b68:	f002 ffda 	bl	8017b20 <_init>
 8014b6c:	1ba4      	subs	r4, r4, r6
 8014b6e:	10a4      	asrs	r4, r4, #2
 8014b70:	2500      	movs	r5, #0
 8014b72:	42a5      	cmp	r5, r4
 8014b74:	d105      	bne.n	8014b82 <__libc_init_array+0x2e>
 8014b76:	bd70      	pop	{r4, r5, r6, pc}
 8014b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b7c:	4798      	blx	r3
 8014b7e:	3501      	adds	r5, #1
 8014b80:	e7ee      	b.n	8014b60 <__libc_init_array+0xc>
 8014b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b86:	4798      	blx	r3
 8014b88:	3501      	adds	r5, #1
 8014b8a:	e7f2      	b.n	8014b72 <__libc_init_array+0x1e>
 8014b8c:	08018190 	.word	0x08018190
 8014b90:	08018190 	.word	0x08018190
 8014b94:	08018190 	.word	0x08018190
 8014b98:	08018194 	.word	0x08018194

08014b9c <memcpy>:
 8014b9c:	b510      	push	{r4, lr}
 8014b9e:	1e43      	subs	r3, r0, #1
 8014ba0:	440a      	add	r2, r1
 8014ba2:	4291      	cmp	r1, r2
 8014ba4:	d100      	bne.n	8014ba8 <memcpy+0xc>
 8014ba6:	bd10      	pop	{r4, pc}
 8014ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bb0:	e7f7      	b.n	8014ba2 <memcpy+0x6>

08014bb2 <memset>:
 8014bb2:	4402      	add	r2, r0
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d100      	bne.n	8014bbc <memset+0xa>
 8014bba:	4770      	bx	lr
 8014bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8014bc0:	e7f9      	b.n	8014bb6 <memset+0x4>
	...

08014bc4 <_free_r>:
 8014bc4:	b538      	push	{r3, r4, r5, lr}
 8014bc6:	4605      	mov	r5, r0
 8014bc8:	2900      	cmp	r1, #0
 8014bca:	d045      	beq.n	8014c58 <_free_r+0x94>
 8014bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bd0:	1f0c      	subs	r4, r1, #4
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	bfb8      	it	lt
 8014bd6:	18e4      	addlt	r4, r4, r3
 8014bd8:	f000 ff95 	bl	8015b06 <__malloc_lock>
 8014bdc:	4a1f      	ldr	r2, [pc, #124]	; (8014c5c <_free_r+0x98>)
 8014bde:	6813      	ldr	r3, [r2, #0]
 8014be0:	4610      	mov	r0, r2
 8014be2:	b933      	cbnz	r3, 8014bf2 <_free_r+0x2e>
 8014be4:	6063      	str	r3, [r4, #4]
 8014be6:	6014      	str	r4, [r2, #0]
 8014be8:	4628      	mov	r0, r5
 8014bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bee:	f000 bf8b 	b.w	8015b08 <__malloc_unlock>
 8014bf2:	42a3      	cmp	r3, r4
 8014bf4:	d90c      	bls.n	8014c10 <_free_r+0x4c>
 8014bf6:	6821      	ldr	r1, [r4, #0]
 8014bf8:	1862      	adds	r2, r4, r1
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	bf04      	itt	eq
 8014bfe:	681a      	ldreq	r2, [r3, #0]
 8014c00:	685b      	ldreq	r3, [r3, #4]
 8014c02:	6063      	str	r3, [r4, #4]
 8014c04:	bf04      	itt	eq
 8014c06:	1852      	addeq	r2, r2, r1
 8014c08:	6022      	streq	r2, [r4, #0]
 8014c0a:	6004      	str	r4, [r0, #0]
 8014c0c:	e7ec      	b.n	8014be8 <_free_r+0x24>
 8014c0e:	4613      	mov	r3, r2
 8014c10:	685a      	ldr	r2, [r3, #4]
 8014c12:	b10a      	cbz	r2, 8014c18 <_free_r+0x54>
 8014c14:	42a2      	cmp	r2, r4
 8014c16:	d9fa      	bls.n	8014c0e <_free_r+0x4a>
 8014c18:	6819      	ldr	r1, [r3, #0]
 8014c1a:	1858      	adds	r0, r3, r1
 8014c1c:	42a0      	cmp	r0, r4
 8014c1e:	d10b      	bne.n	8014c38 <_free_r+0x74>
 8014c20:	6820      	ldr	r0, [r4, #0]
 8014c22:	4401      	add	r1, r0
 8014c24:	1858      	adds	r0, r3, r1
 8014c26:	4282      	cmp	r2, r0
 8014c28:	6019      	str	r1, [r3, #0]
 8014c2a:	d1dd      	bne.n	8014be8 <_free_r+0x24>
 8014c2c:	6810      	ldr	r0, [r2, #0]
 8014c2e:	6852      	ldr	r2, [r2, #4]
 8014c30:	605a      	str	r2, [r3, #4]
 8014c32:	4401      	add	r1, r0
 8014c34:	6019      	str	r1, [r3, #0]
 8014c36:	e7d7      	b.n	8014be8 <_free_r+0x24>
 8014c38:	d902      	bls.n	8014c40 <_free_r+0x7c>
 8014c3a:	230c      	movs	r3, #12
 8014c3c:	602b      	str	r3, [r5, #0]
 8014c3e:	e7d3      	b.n	8014be8 <_free_r+0x24>
 8014c40:	6820      	ldr	r0, [r4, #0]
 8014c42:	1821      	adds	r1, r4, r0
 8014c44:	428a      	cmp	r2, r1
 8014c46:	bf04      	itt	eq
 8014c48:	6811      	ldreq	r1, [r2, #0]
 8014c4a:	6852      	ldreq	r2, [r2, #4]
 8014c4c:	6062      	str	r2, [r4, #4]
 8014c4e:	bf04      	itt	eq
 8014c50:	1809      	addeq	r1, r1, r0
 8014c52:	6021      	streq	r1, [r4, #0]
 8014c54:	605c      	str	r4, [r3, #4]
 8014c56:	e7c7      	b.n	8014be8 <_free_r+0x24>
 8014c58:	bd38      	pop	{r3, r4, r5, pc}
 8014c5a:	bf00      	nop
 8014c5c:	2000d6fc 	.word	0x2000d6fc

08014c60 <_malloc_r>:
 8014c60:	b570      	push	{r4, r5, r6, lr}
 8014c62:	1ccd      	adds	r5, r1, #3
 8014c64:	f025 0503 	bic.w	r5, r5, #3
 8014c68:	3508      	adds	r5, #8
 8014c6a:	2d0c      	cmp	r5, #12
 8014c6c:	bf38      	it	cc
 8014c6e:	250c      	movcc	r5, #12
 8014c70:	2d00      	cmp	r5, #0
 8014c72:	4606      	mov	r6, r0
 8014c74:	db01      	blt.n	8014c7a <_malloc_r+0x1a>
 8014c76:	42a9      	cmp	r1, r5
 8014c78:	d903      	bls.n	8014c82 <_malloc_r+0x22>
 8014c7a:	230c      	movs	r3, #12
 8014c7c:	6033      	str	r3, [r6, #0]
 8014c7e:	2000      	movs	r0, #0
 8014c80:	bd70      	pop	{r4, r5, r6, pc}
 8014c82:	f000 ff40 	bl	8015b06 <__malloc_lock>
 8014c86:	4a21      	ldr	r2, [pc, #132]	; (8014d0c <_malloc_r+0xac>)
 8014c88:	6814      	ldr	r4, [r2, #0]
 8014c8a:	4621      	mov	r1, r4
 8014c8c:	b991      	cbnz	r1, 8014cb4 <_malloc_r+0x54>
 8014c8e:	4c20      	ldr	r4, [pc, #128]	; (8014d10 <_malloc_r+0xb0>)
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	b91b      	cbnz	r3, 8014c9c <_malloc_r+0x3c>
 8014c94:	4630      	mov	r0, r6
 8014c96:	f000 fb7d 	bl	8015394 <_sbrk_r>
 8014c9a:	6020      	str	r0, [r4, #0]
 8014c9c:	4629      	mov	r1, r5
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	f000 fb78 	bl	8015394 <_sbrk_r>
 8014ca4:	1c43      	adds	r3, r0, #1
 8014ca6:	d124      	bne.n	8014cf2 <_malloc_r+0x92>
 8014ca8:	230c      	movs	r3, #12
 8014caa:	6033      	str	r3, [r6, #0]
 8014cac:	4630      	mov	r0, r6
 8014cae:	f000 ff2b 	bl	8015b08 <__malloc_unlock>
 8014cb2:	e7e4      	b.n	8014c7e <_malloc_r+0x1e>
 8014cb4:	680b      	ldr	r3, [r1, #0]
 8014cb6:	1b5b      	subs	r3, r3, r5
 8014cb8:	d418      	bmi.n	8014cec <_malloc_r+0x8c>
 8014cba:	2b0b      	cmp	r3, #11
 8014cbc:	d90f      	bls.n	8014cde <_malloc_r+0x7e>
 8014cbe:	600b      	str	r3, [r1, #0]
 8014cc0:	50cd      	str	r5, [r1, r3]
 8014cc2:	18cc      	adds	r4, r1, r3
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f000 ff1f 	bl	8015b08 <__malloc_unlock>
 8014cca:	f104 000b 	add.w	r0, r4, #11
 8014cce:	1d23      	adds	r3, r4, #4
 8014cd0:	f020 0007 	bic.w	r0, r0, #7
 8014cd4:	1ac3      	subs	r3, r0, r3
 8014cd6:	d0d3      	beq.n	8014c80 <_malloc_r+0x20>
 8014cd8:	425a      	negs	r2, r3
 8014cda:	50e2      	str	r2, [r4, r3]
 8014cdc:	e7d0      	b.n	8014c80 <_malloc_r+0x20>
 8014cde:	428c      	cmp	r4, r1
 8014ce0:	684b      	ldr	r3, [r1, #4]
 8014ce2:	bf16      	itet	ne
 8014ce4:	6063      	strne	r3, [r4, #4]
 8014ce6:	6013      	streq	r3, [r2, #0]
 8014ce8:	460c      	movne	r4, r1
 8014cea:	e7eb      	b.n	8014cc4 <_malloc_r+0x64>
 8014cec:	460c      	mov	r4, r1
 8014cee:	6849      	ldr	r1, [r1, #4]
 8014cf0:	e7cc      	b.n	8014c8c <_malloc_r+0x2c>
 8014cf2:	1cc4      	adds	r4, r0, #3
 8014cf4:	f024 0403 	bic.w	r4, r4, #3
 8014cf8:	42a0      	cmp	r0, r4
 8014cfa:	d005      	beq.n	8014d08 <_malloc_r+0xa8>
 8014cfc:	1a21      	subs	r1, r4, r0
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f000 fb48 	bl	8015394 <_sbrk_r>
 8014d04:	3001      	adds	r0, #1
 8014d06:	d0cf      	beq.n	8014ca8 <_malloc_r+0x48>
 8014d08:	6025      	str	r5, [r4, #0]
 8014d0a:	e7db      	b.n	8014cc4 <_malloc_r+0x64>
 8014d0c:	2000d6fc 	.word	0x2000d6fc
 8014d10:	2000d700 	.word	0x2000d700

08014d14 <__sfputc_r>:
 8014d14:	6893      	ldr	r3, [r2, #8]
 8014d16:	3b01      	subs	r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	b410      	push	{r4}
 8014d1c:	6093      	str	r3, [r2, #8]
 8014d1e:	da08      	bge.n	8014d32 <__sfputc_r+0x1e>
 8014d20:	6994      	ldr	r4, [r2, #24]
 8014d22:	42a3      	cmp	r3, r4
 8014d24:	db01      	blt.n	8014d2a <__sfputc_r+0x16>
 8014d26:	290a      	cmp	r1, #10
 8014d28:	d103      	bne.n	8014d32 <__sfputc_r+0x1e>
 8014d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d2e:	f000 bc15 	b.w	801555c <__swbuf_r>
 8014d32:	6813      	ldr	r3, [r2, #0]
 8014d34:	1c58      	adds	r0, r3, #1
 8014d36:	6010      	str	r0, [r2, #0]
 8014d38:	7019      	strb	r1, [r3, #0]
 8014d3a:	4608      	mov	r0, r1
 8014d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <__sfputs_r>:
 8014d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d44:	4606      	mov	r6, r0
 8014d46:	460f      	mov	r7, r1
 8014d48:	4614      	mov	r4, r2
 8014d4a:	18d5      	adds	r5, r2, r3
 8014d4c:	42ac      	cmp	r4, r5
 8014d4e:	d101      	bne.n	8014d54 <__sfputs_r+0x12>
 8014d50:	2000      	movs	r0, #0
 8014d52:	e007      	b.n	8014d64 <__sfputs_r+0x22>
 8014d54:	463a      	mov	r2, r7
 8014d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	f7ff ffda 	bl	8014d14 <__sfputc_r>
 8014d60:	1c43      	adds	r3, r0, #1
 8014d62:	d1f3      	bne.n	8014d4c <__sfputs_r+0xa>
 8014d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d68 <_vfiprintf_r>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	460c      	mov	r4, r1
 8014d6e:	b09d      	sub	sp, #116	; 0x74
 8014d70:	4617      	mov	r7, r2
 8014d72:	461d      	mov	r5, r3
 8014d74:	4606      	mov	r6, r0
 8014d76:	b118      	cbz	r0, 8014d80 <_vfiprintf_r+0x18>
 8014d78:	6983      	ldr	r3, [r0, #24]
 8014d7a:	b90b      	cbnz	r3, 8014d80 <_vfiprintf_r+0x18>
 8014d7c:	f000 fda6 	bl	80158cc <__sinit>
 8014d80:	4b7c      	ldr	r3, [pc, #496]	; (8014f74 <_vfiprintf_r+0x20c>)
 8014d82:	429c      	cmp	r4, r3
 8014d84:	d158      	bne.n	8014e38 <_vfiprintf_r+0xd0>
 8014d86:	6874      	ldr	r4, [r6, #4]
 8014d88:	89a3      	ldrh	r3, [r4, #12]
 8014d8a:	0718      	lsls	r0, r3, #28
 8014d8c:	d55e      	bpl.n	8014e4c <_vfiprintf_r+0xe4>
 8014d8e:	6923      	ldr	r3, [r4, #16]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d05b      	beq.n	8014e4c <_vfiprintf_r+0xe4>
 8014d94:	2300      	movs	r3, #0
 8014d96:	9309      	str	r3, [sp, #36]	; 0x24
 8014d98:	2320      	movs	r3, #32
 8014d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d9e:	2330      	movs	r3, #48	; 0x30
 8014da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014da4:	9503      	str	r5, [sp, #12]
 8014da6:	f04f 0b01 	mov.w	fp, #1
 8014daa:	46b8      	mov	r8, r7
 8014dac:	4645      	mov	r5, r8
 8014dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014db2:	b10b      	cbz	r3, 8014db8 <_vfiprintf_r+0x50>
 8014db4:	2b25      	cmp	r3, #37	; 0x25
 8014db6:	d154      	bne.n	8014e62 <_vfiprintf_r+0xfa>
 8014db8:	ebb8 0a07 	subs.w	sl, r8, r7
 8014dbc:	d00b      	beq.n	8014dd6 <_vfiprintf_r+0x6e>
 8014dbe:	4653      	mov	r3, sl
 8014dc0:	463a      	mov	r2, r7
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f7ff ffbc 	bl	8014d42 <__sfputs_r>
 8014dca:	3001      	adds	r0, #1
 8014dcc:	f000 80c2 	beq.w	8014f54 <_vfiprintf_r+0x1ec>
 8014dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dd2:	4453      	add	r3, sl
 8014dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8014dd6:	f898 3000 	ldrb.w	r3, [r8]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	f000 80ba 	beq.w	8014f54 <_vfiprintf_r+0x1ec>
 8014de0:	2300      	movs	r3, #0
 8014de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dea:	9304      	str	r3, [sp, #16]
 8014dec:	9307      	str	r3, [sp, #28]
 8014dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014df2:	931a      	str	r3, [sp, #104]	; 0x68
 8014df4:	46a8      	mov	r8, r5
 8014df6:	2205      	movs	r2, #5
 8014df8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014dfc:	485e      	ldr	r0, [pc, #376]	; (8014f78 <_vfiprintf_r+0x210>)
 8014dfe:	f7eb f9ff 	bl	8000200 <memchr>
 8014e02:	9b04      	ldr	r3, [sp, #16]
 8014e04:	bb78      	cbnz	r0, 8014e66 <_vfiprintf_r+0xfe>
 8014e06:	06d9      	lsls	r1, r3, #27
 8014e08:	bf44      	itt	mi
 8014e0a:	2220      	movmi	r2, #32
 8014e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e10:	071a      	lsls	r2, r3, #28
 8014e12:	bf44      	itt	mi
 8014e14:	222b      	movmi	r2, #43	; 0x2b
 8014e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e1a:	782a      	ldrb	r2, [r5, #0]
 8014e1c:	2a2a      	cmp	r2, #42	; 0x2a
 8014e1e:	d02a      	beq.n	8014e76 <_vfiprintf_r+0x10e>
 8014e20:	9a07      	ldr	r2, [sp, #28]
 8014e22:	46a8      	mov	r8, r5
 8014e24:	2000      	movs	r0, #0
 8014e26:	250a      	movs	r5, #10
 8014e28:	4641      	mov	r1, r8
 8014e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e2e:	3b30      	subs	r3, #48	; 0x30
 8014e30:	2b09      	cmp	r3, #9
 8014e32:	d969      	bls.n	8014f08 <_vfiprintf_r+0x1a0>
 8014e34:	b360      	cbz	r0, 8014e90 <_vfiprintf_r+0x128>
 8014e36:	e024      	b.n	8014e82 <_vfiprintf_r+0x11a>
 8014e38:	4b50      	ldr	r3, [pc, #320]	; (8014f7c <_vfiprintf_r+0x214>)
 8014e3a:	429c      	cmp	r4, r3
 8014e3c:	d101      	bne.n	8014e42 <_vfiprintf_r+0xda>
 8014e3e:	68b4      	ldr	r4, [r6, #8]
 8014e40:	e7a2      	b.n	8014d88 <_vfiprintf_r+0x20>
 8014e42:	4b4f      	ldr	r3, [pc, #316]	; (8014f80 <_vfiprintf_r+0x218>)
 8014e44:	429c      	cmp	r4, r3
 8014e46:	bf08      	it	eq
 8014e48:	68f4      	ldreq	r4, [r6, #12]
 8014e4a:	e79d      	b.n	8014d88 <_vfiprintf_r+0x20>
 8014e4c:	4621      	mov	r1, r4
 8014e4e:	4630      	mov	r0, r6
 8014e50:	f000 fbd6 	bl	8015600 <__swsetup_r>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d09d      	beq.n	8014d94 <_vfiprintf_r+0x2c>
 8014e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e5c:	b01d      	add	sp, #116	; 0x74
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	46a8      	mov	r8, r5
 8014e64:	e7a2      	b.n	8014dac <_vfiprintf_r+0x44>
 8014e66:	4a44      	ldr	r2, [pc, #272]	; (8014f78 <_vfiprintf_r+0x210>)
 8014e68:	1a80      	subs	r0, r0, r2
 8014e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8014e6e:	4318      	orrs	r0, r3
 8014e70:	9004      	str	r0, [sp, #16]
 8014e72:	4645      	mov	r5, r8
 8014e74:	e7be      	b.n	8014df4 <_vfiprintf_r+0x8c>
 8014e76:	9a03      	ldr	r2, [sp, #12]
 8014e78:	1d11      	adds	r1, r2, #4
 8014e7a:	6812      	ldr	r2, [r2, #0]
 8014e7c:	9103      	str	r1, [sp, #12]
 8014e7e:	2a00      	cmp	r2, #0
 8014e80:	db01      	blt.n	8014e86 <_vfiprintf_r+0x11e>
 8014e82:	9207      	str	r2, [sp, #28]
 8014e84:	e004      	b.n	8014e90 <_vfiprintf_r+0x128>
 8014e86:	4252      	negs	r2, r2
 8014e88:	f043 0302 	orr.w	r3, r3, #2
 8014e8c:	9207      	str	r2, [sp, #28]
 8014e8e:	9304      	str	r3, [sp, #16]
 8014e90:	f898 3000 	ldrb.w	r3, [r8]
 8014e94:	2b2e      	cmp	r3, #46	; 0x2e
 8014e96:	d10e      	bne.n	8014eb6 <_vfiprintf_r+0x14e>
 8014e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8014e9e:	d138      	bne.n	8014f12 <_vfiprintf_r+0x1aa>
 8014ea0:	9b03      	ldr	r3, [sp, #12]
 8014ea2:	1d1a      	adds	r2, r3, #4
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	9203      	str	r2, [sp, #12]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	bfb8      	it	lt
 8014eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014eb0:	f108 0802 	add.w	r8, r8, #2
 8014eb4:	9305      	str	r3, [sp, #20]
 8014eb6:	4d33      	ldr	r5, [pc, #204]	; (8014f84 <_vfiprintf_r+0x21c>)
 8014eb8:	f898 1000 	ldrb.w	r1, [r8]
 8014ebc:	2203      	movs	r2, #3
 8014ebe:	4628      	mov	r0, r5
 8014ec0:	f7eb f99e 	bl	8000200 <memchr>
 8014ec4:	b140      	cbz	r0, 8014ed8 <_vfiprintf_r+0x170>
 8014ec6:	2340      	movs	r3, #64	; 0x40
 8014ec8:	1b40      	subs	r0, r0, r5
 8014eca:	fa03 f000 	lsl.w	r0, r3, r0
 8014ece:	9b04      	ldr	r3, [sp, #16]
 8014ed0:	4303      	orrs	r3, r0
 8014ed2:	f108 0801 	add.w	r8, r8, #1
 8014ed6:	9304      	str	r3, [sp, #16]
 8014ed8:	f898 1000 	ldrb.w	r1, [r8]
 8014edc:	482a      	ldr	r0, [pc, #168]	; (8014f88 <_vfiprintf_r+0x220>)
 8014ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ee2:	2206      	movs	r2, #6
 8014ee4:	f108 0701 	add.w	r7, r8, #1
 8014ee8:	f7eb f98a 	bl	8000200 <memchr>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	d037      	beq.n	8014f60 <_vfiprintf_r+0x1f8>
 8014ef0:	4b26      	ldr	r3, [pc, #152]	; (8014f8c <_vfiprintf_r+0x224>)
 8014ef2:	bb1b      	cbnz	r3, 8014f3c <_vfiprintf_r+0x1d4>
 8014ef4:	9b03      	ldr	r3, [sp, #12]
 8014ef6:	3307      	adds	r3, #7
 8014ef8:	f023 0307 	bic.w	r3, r3, #7
 8014efc:	3308      	adds	r3, #8
 8014efe:	9303      	str	r3, [sp, #12]
 8014f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f02:	444b      	add	r3, r9
 8014f04:	9309      	str	r3, [sp, #36]	; 0x24
 8014f06:	e750      	b.n	8014daa <_vfiprintf_r+0x42>
 8014f08:	fb05 3202 	mla	r2, r5, r2, r3
 8014f0c:	2001      	movs	r0, #1
 8014f0e:	4688      	mov	r8, r1
 8014f10:	e78a      	b.n	8014e28 <_vfiprintf_r+0xc0>
 8014f12:	2300      	movs	r3, #0
 8014f14:	f108 0801 	add.w	r8, r8, #1
 8014f18:	9305      	str	r3, [sp, #20]
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	250a      	movs	r5, #10
 8014f1e:	4640      	mov	r0, r8
 8014f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f24:	3a30      	subs	r2, #48	; 0x30
 8014f26:	2a09      	cmp	r2, #9
 8014f28:	d903      	bls.n	8014f32 <_vfiprintf_r+0x1ca>
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d0c3      	beq.n	8014eb6 <_vfiprintf_r+0x14e>
 8014f2e:	9105      	str	r1, [sp, #20]
 8014f30:	e7c1      	b.n	8014eb6 <_vfiprintf_r+0x14e>
 8014f32:	fb05 2101 	mla	r1, r5, r1, r2
 8014f36:	2301      	movs	r3, #1
 8014f38:	4680      	mov	r8, r0
 8014f3a:	e7f0      	b.n	8014f1e <_vfiprintf_r+0x1b6>
 8014f3c:	ab03      	add	r3, sp, #12
 8014f3e:	9300      	str	r3, [sp, #0]
 8014f40:	4622      	mov	r2, r4
 8014f42:	4b13      	ldr	r3, [pc, #76]	; (8014f90 <_vfiprintf_r+0x228>)
 8014f44:	a904      	add	r1, sp, #16
 8014f46:	4630      	mov	r0, r6
 8014f48:	f3af 8000 	nop.w
 8014f4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014f50:	4681      	mov	r9, r0
 8014f52:	d1d5      	bne.n	8014f00 <_vfiprintf_r+0x198>
 8014f54:	89a3      	ldrh	r3, [r4, #12]
 8014f56:	065b      	lsls	r3, r3, #25
 8014f58:	f53f af7e 	bmi.w	8014e58 <_vfiprintf_r+0xf0>
 8014f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f5e:	e77d      	b.n	8014e5c <_vfiprintf_r+0xf4>
 8014f60:	ab03      	add	r3, sp, #12
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	4622      	mov	r2, r4
 8014f66:	4b0a      	ldr	r3, [pc, #40]	; (8014f90 <_vfiprintf_r+0x228>)
 8014f68:	a904      	add	r1, sp, #16
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	f000 f888 	bl	8015080 <_printf_i>
 8014f70:	e7ec      	b.n	8014f4c <_vfiprintf_r+0x1e4>
 8014f72:	bf00      	nop
 8014f74:	08017fd0 	.word	0x08017fd0
 8014f78:	08017f7c 	.word	0x08017f7c
 8014f7c:	08017ff0 	.word	0x08017ff0
 8014f80:	08017fb0 	.word	0x08017fb0
 8014f84:	08017f82 	.word	0x08017f82
 8014f88:	08017f86 	.word	0x08017f86
 8014f8c:	00000000 	.word	0x00000000
 8014f90:	08014d43 	.word	0x08014d43

08014f94 <_printf_common>:
 8014f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f98:	4691      	mov	r9, r2
 8014f9a:	461f      	mov	r7, r3
 8014f9c:	688a      	ldr	r2, [r1, #8]
 8014f9e:	690b      	ldr	r3, [r1, #16]
 8014fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	bfb8      	it	lt
 8014fa8:	4613      	movlt	r3, r2
 8014faa:	f8c9 3000 	str.w	r3, [r9]
 8014fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fb2:	4606      	mov	r6, r0
 8014fb4:	460c      	mov	r4, r1
 8014fb6:	b112      	cbz	r2, 8014fbe <_printf_common+0x2a>
 8014fb8:	3301      	adds	r3, #1
 8014fba:	f8c9 3000 	str.w	r3, [r9]
 8014fbe:	6823      	ldr	r3, [r4, #0]
 8014fc0:	0699      	lsls	r1, r3, #26
 8014fc2:	bf42      	ittt	mi
 8014fc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014fc8:	3302      	addmi	r3, #2
 8014fca:	f8c9 3000 	strmi.w	r3, [r9]
 8014fce:	6825      	ldr	r5, [r4, #0]
 8014fd0:	f015 0506 	ands.w	r5, r5, #6
 8014fd4:	d107      	bne.n	8014fe6 <_printf_common+0x52>
 8014fd6:	f104 0a19 	add.w	sl, r4, #25
 8014fda:	68e3      	ldr	r3, [r4, #12]
 8014fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8014fe0:	1a9b      	subs	r3, r3, r2
 8014fe2:	42ab      	cmp	r3, r5
 8014fe4:	dc28      	bgt.n	8015038 <_printf_common+0xa4>
 8014fe6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014fea:	6822      	ldr	r2, [r4, #0]
 8014fec:	3300      	adds	r3, #0
 8014fee:	bf18      	it	ne
 8014ff0:	2301      	movne	r3, #1
 8014ff2:	0692      	lsls	r2, r2, #26
 8014ff4:	d42d      	bmi.n	8015052 <_printf_common+0xbe>
 8014ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ffa:	4639      	mov	r1, r7
 8014ffc:	4630      	mov	r0, r6
 8014ffe:	47c0      	blx	r8
 8015000:	3001      	adds	r0, #1
 8015002:	d020      	beq.n	8015046 <_printf_common+0xb2>
 8015004:	6823      	ldr	r3, [r4, #0]
 8015006:	68e5      	ldr	r5, [r4, #12]
 8015008:	f8d9 2000 	ldr.w	r2, [r9]
 801500c:	f003 0306 	and.w	r3, r3, #6
 8015010:	2b04      	cmp	r3, #4
 8015012:	bf08      	it	eq
 8015014:	1aad      	subeq	r5, r5, r2
 8015016:	68a3      	ldr	r3, [r4, #8]
 8015018:	6922      	ldr	r2, [r4, #16]
 801501a:	bf0c      	ite	eq
 801501c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015020:	2500      	movne	r5, #0
 8015022:	4293      	cmp	r3, r2
 8015024:	bfc4      	itt	gt
 8015026:	1a9b      	subgt	r3, r3, r2
 8015028:	18ed      	addgt	r5, r5, r3
 801502a:	f04f 0900 	mov.w	r9, #0
 801502e:	341a      	adds	r4, #26
 8015030:	454d      	cmp	r5, r9
 8015032:	d11a      	bne.n	801506a <_printf_common+0xd6>
 8015034:	2000      	movs	r0, #0
 8015036:	e008      	b.n	801504a <_printf_common+0xb6>
 8015038:	2301      	movs	r3, #1
 801503a:	4652      	mov	r2, sl
 801503c:	4639      	mov	r1, r7
 801503e:	4630      	mov	r0, r6
 8015040:	47c0      	blx	r8
 8015042:	3001      	adds	r0, #1
 8015044:	d103      	bne.n	801504e <_printf_common+0xba>
 8015046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801504e:	3501      	adds	r5, #1
 8015050:	e7c3      	b.n	8014fda <_printf_common+0x46>
 8015052:	18e1      	adds	r1, r4, r3
 8015054:	1c5a      	adds	r2, r3, #1
 8015056:	2030      	movs	r0, #48	; 0x30
 8015058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801505c:	4422      	add	r2, r4
 801505e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015066:	3302      	adds	r3, #2
 8015068:	e7c5      	b.n	8014ff6 <_printf_common+0x62>
 801506a:	2301      	movs	r3, #1
 801506c:	4622      	mov	r2, r4
 801506e:	4639      	mov	r1, r7
 8015070:	4630      	mov	r0, r6
 8015072:	47c0      	blx	r8
 8015074:	3001      	adds	r0, #1
 8015076:	d0e6      	beq.n	8015046 <_printf_common+0xb2>
 8015078:	f109 0901 	add.w	r9, r9, #1
 801507c:	e7d8      	b.n	8015030 <_printf_common+0x9c>
	...

08015080 <_printf_i>:
 8015080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015084:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015088:	460c      	mov	r4, r1
 801508a:	7e09      	ldrb	r1, [r1, #24]
 801508c:	b085      	sub	sp, #20
 801508e:	296e      	cmp	r1, #110	; 0x6e
 8015090:	4617      	mov	r7, r2
 8015092:	4606      	mov	r6, r0
 8015094:	4698      	mov	r8, r3
 8015096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015098:	f000 80b3 	beq.w	8015202 <_printf_i+0x182>
 801509c:	d822      	bhi.n	80150e4 <_printf_i+0x64>
 801509e:	2963      	cmp	r1, #99	; 0x63
 80150a0:	d036      	beq.n	8015110 <_printf_i+0x90>
 80150a2:	d80a      	bhi.n	80150ba <_printf_i+0x3a>
 80150a4:	2900      	cmp	r1, #0
 80150a6:	f000 80b9 	beq.w	801521c <_printf_i+0x19c>
 80150aa:	2958      	cmp	r1, #88	; 0x58
 80150ac:	f000 8083 	beq.w	80151b6 <_printf_i+0x136>
 80150b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80150b8:	e032      	b.n	8015120 <_printf_i+0xa0>
 80150ba:	2964      	cmp	r1, #100	; 0x64
 80150bc:	d001      	beq.n	80150c2 <_printf_i+0x42>
 80150be:	2969      	cmp	r1, #105	; 0x69
 80150c0:	d1f6      	bne.n	80150b0 <_printf_i+0x30>
 80150c2:	6820      	ldr	r0, [r4, #0]
 80150c4:	6813      	ldr	r3, [r2, #0]
 80150c6:	0605      	lsls	r5, r0, #24
 80150c8:	f103 0104 	add.w	r1, r3, #4
 80150cc:	d52a      	bpl.n	8015124 <_printf_i+0xa4>
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	6011      	str	r1, [r2, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	da03      	bge.n	80150de <_printf_i+0x5e>
 80150d6:	222d      	movs	r2, #45	; 0x2d
 80150d8:	425b      	negs	r3, r3
 80150da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80150de:	486f      	ldr	r0, [pc, #444]	; (801529c <_printf_i+0x21c>)
 80150e0:	220a      	movs	r2, #10
 80150e2:	e039      	b.n	8015158 <_printf_i+0xd8>
 80150e4:	2973      	cmp	r1, #115	; 0x73
 80150e6:	f000 809d 	beq.w	8015224 <_printf_i+0x1a4>
 80150ea:	d808      	bhi.n	80150fe <_printf_i+0x7e>
 80150ec:	296f      	cmp	r1, #111	; 0x6f
 80150ee:	d020      	beq.n	8015132 <_printf_i+0xb2>
 80150f0:	2970      	cmp	r1, #112	; 0x70
 80150f2:	d1dd      	bne.n	80150b0 <_printf_i+0x30>
 80150f4:	6823      	ldr	r3, [r4, #0]
 80150f6:	f043 0320 	orr.w	r3, r3, #32
 80150fa:	6023      	str	r3, [r4, #0]
 80150fc:	e003      	b.n	8015106 <_printf_i+0x86>
 80150fe:	2975      	cmp	r1, #117	; 0x75
 8015100:	d017      	beq.n	8015132 <_printf_i+0xb2>
 8015102:	2978      	cmp	r1, #120	; 0x78
 8015104:	d1d4      	bne.n	80150b0 <_printf_i+0x30>
 8015106:	2378      	movs	r3, #120	; 0x78
 8015108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801510c:	4864      	ldr	r0, [pc, #400]	; (80152a0 <_printf_i+0x220>)
 801510e:	e055      	b.n	80151bc <_printf_i+0x13c>
 8015110:	6813      	ldr	r3, [r2, #0]
 8015112:	1d19      	adds	r1, r3, #4
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	6011      	str	r1, [r2, #0]
 8015118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801511c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015120:	2301      	movs	r3, #1
 8015122:	e08c      	b.n	801523e <_printf_i+0x1be>
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	6011      	str	r1, [r2, #0]
 8015128:	f010 0f40 	tst.w	r0, #64	; 0x40
 801512c:	bf18      	it	ne
 801512e:	b21b      	sxthne	r3, r3
 8015130:	e7cf      	b.n	80150d2 <_printf_i+0x52>
 8015132:	6813      	ldr	r3, [r2, #0]
 8015134:	6825      	ldr	r5, [r4, #0]
 8015136:	1d18      	adds	r0, r3, #4
 8015138:	6010      	str	r0, [r2, #0]
 801513a:	0628      	lsls	r0, r5, #24
 801513c:	d501      	bpl.n	8015142 <_printf_i+0xc2>
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	e002      	b.n	8015148 <_printf_i+0xc8>
 8015142:	0668      	lsls	r0, r5, #25
 8015144:	d5fb      	bpl.n	801513e <_printf_i+0xbe>
 8015146:	881b      	ldrh	r3, [r3, #0]
 8015148:	4854      	ldr	r0, [pc, #336]	; (801529c <_printf_i+0x21c>)
 801514a:	296f      	cmp	r1, #111	; 0x6f
 801514c:	bf14      	ite	ne
 801514e:	220a      	movne	r2, #10
 8015150:	2208      	moveq	r2, #8
 8015152:	2100      	movs	r1, #0
 8015154:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015158:	6865      	ldr	r5, [r4, #4]
 801515a:	60a5      	str	r5, [r4, #8]
 801515c:	2d00      	cmp	r5, #0
 801515e:	f2c0 8095 	blt.w	801528c <_printf_i+0x20c>
 8015162:	6821      	ldr	r1, [r4, #0]
 8015164:	f021 0104 	bic.w	r1, r1, #4
 8015168:	6021      	str	r1, [r4, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d13d      	bne.n	80151ea <_printf_i+0x16a>
 801516e:	2d00      	cmp	r5, #0
 8015170:	f040 808e 	bne.w	8015290 <_printf_i+0x210>
 8015174:	4665      	mov	r5, ip
 8015176:	2a08      	cmp	r2, #8
 8015178:	d10b      	bne.n	8015192 <_printf_i+0x112>
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	07db      	lsls	r3, r3, #31
 801517e:	d508      	bpl.n	8015192 <_printf_i+0x112>
 8015180:	6923      	ldr	r3, [r4, #16]
 8015182:	6862      	ldr	r2, [r4, #4]
 8015184:	429a      	cmp	r2, r3
 8015186:	bfde      	ittt	le
 8015188:	2330      	movle	r3, #48	; 0x30
 801518a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801518e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015192:	ebac 0305 	sub.w	r3, ip, r5
 8015196:	6123      	str	r3, [r4, #16]
 8015198:	f8cd 8000 	str.w	r8, [sp]
 801519c:	463b      	mov	r3, r7
 801519e:	aa03      	add	r2, sp, #12
 80151a0:	4621      	mov	r1, r4
 80151a2:	4630      	mov	r0, r6
 80151a4:	f7ff fef6 	bl	8014f94 <_printf_common>
 80151a8:	3001      	adds	r0, #1
 80151aa:	d14d      	bne.n	8015248 <_printf_i+0x1c8>
 80151ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151b0:	b005      	add	sp, #20
 80151b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151b6:	4839      	ldr	r0, [pc, #228]	; (801529c <_printf_i+0x21c>)
 80151b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80151bc:	6813      	ldr	r3, [r2, #0]
 80151be:	6821      	ldr	r1, [r4, #0]
 80151c0:	1d1d      	adds	r5, r3, #4
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	6015      	str	r5, [r2, #0]
 80151c6:	060a      	lsls	r2, r1, #24
 80151c8:	d50b      	bpl.n	80151e2 <_printf_i+0x162>
 80151ca:	07ca      	lsls	r2, r1, #31
 80151cc:	bf44      	itt	mi
 80151ce:	f041 0120 	orrmi.w	r1, r1, #32
 80151d2:	6021      	strmi	r1, [r4, #0]
 80151d4:	b91b      	cbnz	r3, 80151de <_printf_i+0x15e>
 80151d6:	6822      	ldr	r2, [r4, #0]
 80151d8:	f022 0220 	bic.w	r2, r2, #32
 80151dc:	6022      	str	r2, [r4, #0]
 80151de:	2210      	movs	r2, #16
 80151e0:	e7b7      	b.n	8015152 <_printf_i+0xd2>
 80151e2:	064d      	lsls	r5, r1, #25
 80151e4:	bf48      	it	mi
 80151e6:	b29b      	uxthmi	r3, r3
 80151e8:	e7ef      	b.n	80151ca <_printf_i+0x14a>
 80151ea:	4665      	mov	r5, ip
 80151ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80151f0:	fb02 3311 	mls	r3, r2, r1, r3
 80151f4:	5cc3      	ldrb	r3, [r0, r3]
 80151f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80151fa:	460b      	mov	r3, r1
 80151fc:	2900      	cmp	r1, #0
 80151fe:	d1f5      	bne.n	80151ec <_printf_i+0x16c>
 8015200:	e7b9      	b.n	8015176 <_printf_i+0xf6>
 8015202:	6813      	ldr	r3, [r2, #0]
 8015204:	6825      	ldr	r5, [r4, #0]
 8015206:	6961      	ldr	r1, [r4, #20]
 8015208:	1d18      	adds	r0, r3, #4
 801520a:	6010      	str	r0, [r2, #0]
 801520c:	0628      	lsls	r0, r5, #24
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	d501      	bpl.n	8015216 <_printf_i+0x196>
 8015212:	6019      	str	r1, [r3, #0]
 8015214:	e002      	b.n	801521c <_printf_i+0x19c>
 8015216:	066a      	lsls	r2, r5, #25
 8015218:	d5fb      	bpl.n	8015212 <_printf_i+0x192>
 801521a:	8019      	strh	r1, [r3, #0]
 801521c:	2300      	movs	r3, #0
 801521e:	6123      	str	r3, [r4, #16]
 8015220:	4665      	mov	r5, ip
 8015222:	e7b9      	b.n	8015198 <_printf_i+0x118>
 8015224:	6813      	ldr	r3, [r2, #0]
 8015226:	1d19      	adds	r1, r3, #4
 8015228:	6011      	str	r1, [r2, #0]
 801522a:	681d      	ldr	r5, [r3, #0]
 801522c:	6862      	ldr	r2, [r4, #4]
 801522e:	2100      	movs	r1, #0
 8015230:	4628      	mov	r0, r5
 8015232:	f7ea ffe5 	bl	8000200 <memchr>
 8015236:	b108      	cbz	r0, 801523c <_printf_i+0x1bc>
 8015238:	1b40      	subs	r0, r0, r5
 801523a:	6060      	str	r0, [r4, #4]
 801523c:	6863      	ldr	r3, [r4, #4]
 801523e:	6123      	str	r3, [r4, #16]
 8015240:	2300      	movs	r3, #0
 8015242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015246:	e7a7      	b.n	8015198 <_printf_i+0x118>
 8015248:	6923      	ldr	r3, [r4, #16]
 801524a:	462a      	mov	r2, r5
 801524c:	4639      	mov	r1, r7
 801524e:	4630      	mov	r0, r6
 8015250:	47c0      	blx	r8
 8015252:	3001      	adds	r0, #1
 8015254:	d0aa      	beq.n	80151ac <_printf_i+0x12c>
 8015256:	6823      	ldr	r3, [r4, #0]
 8015258:	079b      	lsls	r3, r3, #30
 801525a:	d413      	bmi.n	8015284 <_printf_i+0x204>
 801525c:	68e0      	ldr	r0, [r4, #12]
 801525e:	9b03      	ldr	r3, [sp, #12]
 8015260:	4298      	cmp	r0, r3
 8015262:	bfb8      	it	lt
 8015264:	4618      	movlt	r0, r3
 8015266:	e7a3      	b.n	80151b0 <_printf_i+0x130>
 8015268:	2301      	movs	r3, #1
 801526a:	464a      	mov	r2, r9
 801526c:	4639      	mov	r1, r7
 801526e:	4630      	mov	r0, r6
 8015270:	47c0      	blx	r8
 8015272:	3001      	adds	r0, #1
 8015274:	d09a      	beq.n	80151ac <_printf_i+0x12c>
 8015276:	3501      	adds	r5, #1
 8015278:	68e3      	ldr	r3, [r4, #12]
 801527a:	9a03      	ldr	r2, [sp, #12]
 801527c:	1a9b      	subs	r3, r3, r2
 801527e:	42ab      	cmp	r3, r5
 8015280:	dcf2      	bgt.n	8015268 <_printf_i+0x1e8>
 8015282:	e7eb      	b.n	801525c <_printf_i+0x1dc>
 8015284:	2500      	movs	r5, #0
 8015286:	f104 0919 	add.w	r9, r4, #25
 801528a:	e7f5      	b.n	8015278 <_printf_i+0x1f8>
 801528c:	2b00      	cmp	r3, #0
 801528e:	d1ac      	bne.n	80151ea <_printf_i+0x16a>
 8015290:	7803      	ldrb	r3, [r0, #0]
 8015292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015296:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801529a:	e76c      	b.n	8015176 <_printf_i+0xf6>
 801529c:	08017f8d 	.word	0x08017f8d
 80152a0:	08017f9e 	.word	0x08017f9e

080152a4 <putchar>:
 80152a4:	b538      	push	{r3, r4, r5, lr}
 80152a6:	4b08      	ldr	r3, [pc, #32]	; (80152c8 <putchar+0x24>)
 80152a8:	681c      	ldr	r4, [r3, #0]
 80152aa:	4605      	mov	r5, r0
 80152ac:	b124      	cbz	r4, 80152b8 <putchar+0x14>
 80152ae:	69a3      	ldr	r3, [r4, #24]
 80152b0:	b913      	cbnz	r3, 80152b8 <putchar+0x14>
 80152b2:	4620      	mov	r0, r4
 80152b4:	f000 fb0a 	bl	80158cc <__sinit>
 80152b8:	68a2      	ldr	r2, [r4, #8]
 80152ba:	4629      	mov	r1, r5
 80152bc:	4620      	mov	r0, r4
 80152be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152c2:	f000 bd9b 	b.w	8015dfc <_putc_r>
 80152c6:	bf00      	nop
 80152c8:	200001e8 	.word	0x200001e8

080152cc <_puts_r>:
 80152cc:	b570      	push	{r4, r5, r6, lr}
 80152ce:	460e      	mov	r6, r1
 80152d0:	4605      	mov	r5, r0
 80152d2:	b118      	cbz	r0, 80152dc <_puts_r+0x10>
 80152d4:	6983      	ldr	r3, [r0, #24]
 80152d6:	b90b      	cbnz	r3, 80152dc <_puts_r+0x10>
 80152d8:	f000 faf8 	bl	80158cc <__sinit>
 80152dc:	69ab      	ldr	r3, [r5, #24]
 80152de:	68ac      	ldr	r4, [r5, #8]
 80152e0:	b913      	cbnz	r3, 80152e8 <_puts_r+0x1c>
 80152e2:	4628      	mov	r0, r5
 80152e4:	f000 faf2 	bl	80158cc <__sinit>
 80152e8:	4b23      	ldr	r3, [pc, #140]	; (8015378 <_puts_r+0xac>)
 80152ea:	429c      	cmp	r4, r3
 80152ec:	d117      	bne.n	801531e <_puts_r+0x52>
 80152ee:	686c      	ldr	r4, [r5, #4]
 80152f0:	89a3      	ldrh	r3, [r4, #12]
 80152f2:	071b      	lsls	r3, r3, #28
 80152f4:	d51d      	bpl.n	8015332 <_puts_r+0x66>
 80152f6:	6923      	ldr	r3, [r4, #16]
 80152f8:	b1db      	cbz	r3, 8015332 <_puts_r+0x66>
 80152fa:	3e01      	subs	r6, #1
 80152fc:	68a3      	ldr	r3, [r4, #8]
 80152fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015302:	3b01      	subs	r3, #1
 8015304:	60a3      	str	r3, [r4, #8]
 8015306:	b9e9      	cbnz	r1, 8015344 <_puts_r+0x78>
 8015308:	2b00      	cmp	r3, #0
 801530a:	da2e      	bge.n	801536a <_puts_r+0x9e>
 801530c:	4622      	mov	r2, r4
 801530e:	210a      	movs	r1, #10
 8015310:	4628      	mov	r0, r5
 8015312:	f000 f923 	bl	801555c <__swbuf_r>
 8015316:	3001      	adds	r0, #1
 8015318:	d011      	beq.n	801533e <_puts_r+0x72>
 801531a:	200a      	movs	r0, #10
 801531c:	e011      	b.n	8015342 <_puts_r+0x76>
 801531e:	4b17      	ldr	r3, [pc, #92]	; (801537c <_puts_r+0xb0>)
 8015320:	429c      	cmp	r4, r3
 8015322:	d101      	bne.n	8015328 <_puts_r+0x5c>
 8015324:	68ac      	ldr	r4, [r5, #8]
 8015326:	e7e3      	b.n	80152f0 <_puts_r+0x24>
 8015328:	4b15      	ldr	r3, [pc, #84]	; (8015380 <_puts_r+0xb4>)
 801532a:	429c      	cmp	r4, r3
 801532c:	bf08      	it	eq
 801532e:	68ec      	ldreq	r4, [r5, #12]
 8015330:	e7de      	b.n	80152f0 <_puts_r+0x24>
 8015332:	4621      	mov	r1, r4
 8015334:	4628      	mov	r0, r5
 8015336:	f000 f963 	bl	8015600 <__swsetup_r>
 801533a:	2800      	cmp	r0, #0
 801533c:	d0dd      	beq.n	80152fa <_puts_r+0x2e>
 801533e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015342:	bd70      	pop	{r4, r5, r6, pc}
 8015344:	2b00      	cmp	r3, #0
 8015346:	da04      	bge.n	8015352 <_puts_r+0x86>
 8015348:	69a2      	ldr	r2, [r4, #24]
 801534a:	429a      	cmp	r2, r3
 801534c:	dc06      	bgt.n	801535c <_puts_r+0x90>
 801534e:	290a      	cmp	r1, #10
 8015350:	d004      	beq.n	801535c <_puts_r+0x90>
 8015352:	6823      	ldr	r3, [r4, #0]
 8015354:	1c5a      	adds	r2, r3, #1
 8015356:	6022      	str	r2, [r4, #0]
 8015358:	7019      	strb	r1, [r3, #0]
 801535a:	e7cf      	b.n	80152fc <_puts_r+0x30>
 801535c:	4622      	mov	r2, r4
 801535e:	4628      	mov	r0, r5
 8015360:	f000 f8fc 	bl	801555c <__swbuf_r>
 8015364:	3001      	adds	r0, #1
 8015366:	d1c9      	bne.n	80152fc <_puts_r+0x30>
 8015368:	e7e9      	b.n	801533e <_puts_r+0x72>
 801536a:	6823      	ldr	r3, [r4, #0]
 801536c:	200a      	movs	r0, #10
 801536e:	1c5a      	adds	r2, r3, #1
 8015370:	6022      	str	r2, [r4, #0]
 8015372:	7018      	strb	r0, [r3, #0]
 8015374:	e7e5      	b.n	8015342 <_puts_r+0x76>
 8015376:	bf00      	nop
 8015378:	08017fd0 	.word	0x08017fd0
 801537c:	08017ff0 	.word	0x08017ff0
 8015380:	08017fb0 	.word	0x08017fb0

08015384 <puts>:
 8015384:	4b02      	ldr	r3, [pc, #8]	; (8015390 <puts+0xc>)
 8015386:	4601      	mov	r1, r0
 8015388:	6818      	ldr	r0, [r3, #0]
 801538a:	f7ff bf9f 	b.w	80152cc <_puts_r>
 801538e:	bf00      	nop
 8015390:	200001e8 	.word	0x200001e8

08015394 <_sbrk_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4c06      	ldr	r4, [pc, #24]	; (80153b0 <_sbrk_r+0x1c>)
 8015398:	2300      	movs	r3, #0
 801539a:	4605      	mov	r5, r0
 801539c:	4608      	mov	r0, r1
 801539e:	6023      	str	r3, [r4, #0]
 80153a0:	f7f0 f848 	bl	8005434 <_sbrk>
 80153a4:	1c43      	adds	r3, r0, #1
 80153a6:	d102      	bne.n	80153ae <_sbrk_r+0x1a>
 80153a8:	6823      	ldr	r3, [r4, #0]
 80153aa:	b103      	cbz	r3, 80153ae <_sbrk_r+0x1a>
 80153ac:	602b      	str	r3, [r5, #0]
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	20010550 	.word	0x20010550

080153b4 <siprintf>:
 80153b4:	b40e      	push	{r1, r2, r3}
 80153b6:	b500      	push	{lr}
 80153b8:	b09c      	sub	sp, #112	; 0x70
 80153ba:	ab1d      	add	r3, sp, #116	; 0x74
 80153bc:	9002      	str	r0, [sp, #8]
 80153be:	9006      	str	r0, [sp, #24]
 80153c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153c4:	4809      	ldr	r0, [pc, #36]	; (80153ec <siprintf+0x38>)
 80153c6:	9107      	str	r1, [sp, #28]
 80153c8:	9104      	str	r1, [sp, #16]
 80153ca:	4909      	ldr	r1, [pc, #36]	; (80153f0 <siprintf+0x3c>)
 80153cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80153d0:	9105      	str	r1, [sp, #20]
 80153d2:	6800      	ldr	r0, [r0, #0]
 80153d4:	9301      	str	r3, [sp, #4]
 80153d6:	a902      	add	r1, sp, #8
 80153d8:	f000 fc18 	bl	8015c0c <_svfiprintf_r>
 80153dc:	9b02      	ldr	r3, [sp, #8]
 80153de:	2200      	movs	r2, #0
 80153e0:	701a      	strb	r2, [r3, #0]
 80153e2:	b01c      	add	sp, #112	; 0x70
 80153e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80153e8:	b003      	add	sp, #12
 80153ea:	4770      	bx	lr
 80153ec:	200001e8 	.word	0x200001e8
 80153f0:	ffff0208 	.word	0xffff0208

080153f4 <strcpy>:
 80153f4:	4603      	mov	r3, r0
 80153f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153fa:	f803 2b01 	strb.w	r2, [r3], #1
 80153fe:	2a00      	cmp	r2, #0
 8015400:	d1f9      	bne.n	80153f6 <strcpy+0x2>
 8015402:	4770      	bx	lr

08015404 <strstr>:
 8015404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015406:	7803      	ldrb	r3, [r0, #0]
 8015408:	b17b      	cbz	r3, 801542a <strstr+0x26>
 801540a:	4604      	mov	r4, r0
 801540c:	7823      	ldrb	r3, [r4, #0]
 801540e:	4620      	mov	r0, r4
 8015410:	1c66      	adds	r6, r4, #1
 8015412:	b17b      	cbz	r3, 8015434 <strstr+0x30>
 8015414:	1e4a      	subs	r2, r1, #1
 8015416:	1e63      	subs	r3, r4, #1
 8015418:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801541c:	b14d      	cbz	r5, 8015432 <strstr+0x2e>
 801541e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015422:	42af      	cmp	r7, r5
 8015424:	4634      	mov	r4, r6
 8015426:	d0f7      	beq.n	8015418 <strstr+0x14>
 8015428:	e7f0      	b.n	801540c <strstr+0x8>
 801542a:	780b      	ldrb	r3, [r1, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	bf18      	it	ne
 8015430:	2000      	movne	r0, #0
 8015432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015434:	4618      	mov	r0, r3
 8015436:	e7fc      	b.n	8015432 <strstr+0x2e>

08015438 <_strtol_l.isra.0>:
 8015438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801543c:	4680      	mov	r8, r0
 801543e:	4689      	mov	r9, r1
 8015440:	4692      	mov	sl, r2
 8015442:	461e      	mov	r6, r3
 8015444:	460f      	mov	r7, r1
 8015446:	463d      	mov	r5, r7
 8015448:	9808      	ldr	r0, [sp, #32]
 801544a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801544e:	f000 fac7 	bl	80159e0 <__locale_ctype_ptr_l>
 8015452:	4420      	add	r0, r4
 8015454:	7843      	ldrb	r3, [r0, #1]
 8015456:	f013 0308 	ands.w	r3, r3, #8
 801545a:	d132      	bne.n	80154c2 <_strtol_l.isra.0+0x8a>
 801545c:	2c2d      	cmp	r4, #45	; 0x2d
 801545e:	d132      	bne.n	80154c6 <_strtol_l.isra.0+0x8e>
 8015460:	787c      	ldrb	r4, [r7, #1]
 8015462:	1cbd      	adds	r5, r7, #2
 8015464:	2201      	movs	r2, #1
 8015466:	2e00      	cmp	r6, #0
 8015468:	d05d      	beq.n	8015526 <_strtol_l.isra.0+0xee>
 801546a:	2e10      	cmp	r6, #16
 801546c:	d109      	bne.n	8015482 <_strtol_l.isra.0+0x4a>
 801546e:	2c30      	cmp	r4, #48	; 0x30
 8015470:	d107      	bne.n	8015482 <_strtol_l.isra.0+0x4a>
 8015472:	782b      	ldrb	r3, [r5, #0]
 8015474:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015478:	2b58      	cmp	r3, #88	; 0x58
 801547a:	d14f      	bne.n	801551c <_strtol_l.isra.0+0xe4>
 801547c:	786c      	ldrb	r4, [r5, #1]
 801547e:	2610      	movs	r6, #16
 8015480:	3502      	adds	r5, #2
 8015482:	2a00      	cmp	r2, #0
 8015484:	bf14      	ite	ne
 8015486:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801548a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801548e:	2700      	movs	r7, #0
 8015490:	fbb1 fcf6 	udiv	ip, r1, r6
 8015494:	4638      	mov	r0, r7
 8015496:	fb06 1e1c 	mls	lr, r6, ip, r1
 801549a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801549e:	2b09      	cmp	r3, #9
 80154a0:	d817      	bhi.n	80154d2 <_strtol_l.isra.0+0x9a>
 80154a2:	461c      	mov	r4, r3
 80154a4:	42a6      	cmp	r6, r4
 80154a6:	dd23      	ble.n	80154f0 <_strtol_l.isra.0+0xb8>
 80154a8:	1c7b      	adds	r3, r7, #1
 80154aa:	d007      	beq.n	80154bc <_strtol_l.isra.0+0x84>
 80154ac:	4584      	cmp	ip, r0
 80154ae:	d31c      	bcc.n	80154ea <_strtol_l.isra.0+0xb2>
 80154b0:	d101      	bne.n	80154b6 <_strtol_l.isra.0+0x7e>
 80154b2:	45a6      	cmp	lr, r4
 80154b4:	db19      	blt.n	80154ea <_strtol_l.isra.0+0xb2>
 80154b6:	fb00 4006 	mla	r0, r0, r6, r4
 80154ba:	2701      	movs	r7, #1
 80154bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154c0:	e7eb      	b.n	801549a <_strtol_l.isra.0+0x62>
 80154c2:	462f      	mov	r7, r5
 80154c4:	e7bf      	b.n	8015446 <_strtol_l.isra.0+0xe>
 80154c6:	2c2b      	cmp	r4, #43	; 0x2b
 80154c8:	bf04      	itt	eq
 80154ca:	1cbd      	addeq	r5, r7, #2
 80154cc:	787c      	ldrbeq	r4, [r7, #1]
 80154ce:	461a      	mov	r2, r3
 80154d0:	e7c9      	b.n	8015466 <_strtol_l.isra.0+0x2e>
 80154d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80154d6:	2b19      	cmp	r3, #25
 80154d8:	d801      	bhi.n	80154de <_strtol_l.isra.0+0xa6>
 80154da:	3c37      	subs	r4, #55	; 0x37
 80154dc:	e7e2      	b.n	80154a4 <_strtol_l.isra.0+0x6c>
 80154de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80154e2:	2b19      	cmp	r3, #25
 80154e4:	d804      	bhi.n	80154f0 <_strtol_l.isra.0+0xb8>
 80154e6:	3c57      	subs	r4, #87	; 0x57
 80154e8:	e7dc      	b.n	80154a4 <_strtol_l.isra.0+0x6c>
 80154ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80154ee:	e7e5      	b.n	80154bc <_strtol_l.isra.0+0x84>
 80154f0:	1c7b      	adds	r3, r7, #1
 80154f2:	d108      	bne.n	8015506 <_strtol_l.isra.0+0xce>
 80154f4:	2322      	movs	r3, #34	; 0x22
 80154f6:	f8c8 3000 	str.w	r3, [r8]
 80154fa:	4608      	mov	r0, r1
 80154fc:	f1ba 0f00 	cmp.w	sl, #0
 8015500:	d107      	bne.n	8015512 <_strtol_l.isra.0+0xda>
 8015502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015506:	b102      	cbz	r2, 801550a <_strtol_l.isra.0+0xd2>
 8015508:	4240      	negs	r0, r0
 801550a:	f1ba 0f00 	cmp.w	sl, #0
 801550e:	d0f8      	beq.n	8015502 <_strtol_l.isra.0+0xca>
 8015510:	b10f      	cbz	r7, 8015516 <_strtol_l.isra.0+0xde>
 8015512:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8015516:	f8ca 9000 	str.w	r9, [sl]
 801551a:	e7f2      	b.n	8015502 <_strtol_l.isra.0+0xca>
 801551c:	2430      	movs	r4, #48	; 0x30
 801551e:	2e00      	cmp	r6, #0
 8015520:	d1af      	bne.n	8015482 <_strtol_l.isra.0+0x4a>
 8015522:	2608      	movs	r6, #8
 8015524:	e7ad      	b.n	8015482 <_strtol_l.isra.0+0x4a>
 8015526:	2c30      	cmp	r4, #48	; 0x30
 8015528:	d0a3      	beq.n	8015472 <_strtol_l.isra.0+0x3a>
 801552a:	260a      	movs	r6, #10
 801552c:	e7a9      	b.n	8015482 <_strtol_l.isra.0+0x4a>
	...

08015530 <strtol>:
 8015530:	4b08      	ldr	r3, [pc, #32]	; (8015554 <strtol+0x24>)
 8015532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015534:	681c      	ldr	r4, [r3, #0]
 8015536:	4d08      	ldr	r5, [pc, #32]	; (8015558 <strtol+0x28>)
 8015538:	6a23      	ldr	r3, [r4, #32]
 801553a:	2b00      	cmp	r3, #0
 801553c:	bf08      	it	eq
 801553e:	462b      	moveq	r3, r5
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	4613      	mov	r3, r2
 8015544:	460a      	mov	r2, r1
 8015546:	4601      	mov	r1, r0
 8015548:	4620      	mov	r0, r4
 801554a:	f7ff ff75 	bl	8015438 <_strtol_l.isra.0>
 801554e:	b003      	add	sp, #12
 8015550:	bd30      	pop	{r4, r5, pc}
 8015552:	bf00      	nop
 8015554:	200001e8 	.word	0x200001e8
 8015558:	2000024c 	.word	0x2000024c

0801555c <__swbuf_r>:
 801555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555e:	460e      	mov	r6, r1
 8015560:	4614      	mov	r4, r2
 8015562:	4605      	mov	r5, r0
 8015564:	b118      	cbz	r0, 801556e <__swbuf_r+0x12>
 8015566:	6983      	ldr	r3, [r0, #24]
 8015568:	b90b      	cbnz	r3, 801556e <__swbuf_r+0x12>
 801556a:	f000 f9af 	bl	80158cc <__sinit>
 801556e:	4b21      	ldr	r3, [pc, #132]	; (80155f4 <__swbuf_r+0x98>)
 8015570:	429c      	cmp	r4, r3
 8015572:	d12a      	bne.n	80155ca <__swbuf_r+0x6e>
 8015574:	686c      	ldr	r4, [r5, #4]
 8015576:	69a3      	ldr	r3, [r4, #24]
 8015578:	60a3      	str	r3, [r4, #8]
 801557a:	89a3      	ldrh	r3, [r4, #12]
 801557c:	071a      	lsls	r2, r3, #28
 801557e:	d52e      	bpl.n	80155de <__swbuf_r+0x82>
 8015580:	6923      	ldr	r3, [r4, #16]
 8015582:	b363      	cbz	r3, 80155de <__swbuf_r+0x82>
 8015584:	6923      	ldr	r3, [r4, #16]
 8015586:	6820      	ldr	r0, [r4, #0]
 8015588:	1ac0      	subs	r0, r0, r3
 801558a:	6963      	ldr	r3, [r4, #20]
 801558c:	b2f6      	uxtb	r6, r6
 801558e:	4283      	cmp	r3, r0
 8015590:	4637      	mov	r7, r6
 8015592:	dc04      	bgt.n	801559e <__swbuf_r+0x42>
 8015594:	4621      	mov	r1, r4
 8015596:	4628      	mov	r0, r5
 8015598:	f000 f92e 	bl	80157f8 <_fflush_r>
 801559c:	bb28      	cbnz	r0, 80155ea <__swbuf_r+0x8e>
 801559e:	68a3      	ldr	r3, [r4, #8]
 80155a0:	3b01      	subs	r3, #1
 80155a2:	60a3      	str	r3, [r4, #8]
 80155a4:	6823      	ldr	r3, [r4, #0]
 80155a6:	1c5a      	adds	r2, r3, #1
 80155a8:	6022      	str	r2, [r4, #0]
 80155aa:	701e      	strb	r6, [r3, #0]
 80155ac:	6963      	ldr	r3, [r4, #20]
 80155ae:	3001      	adds	r0, #1
 80155b0:	4283      	cmp	r3, r0
 80155b2:	d004      	beq.n	80155be <__swbuf_r+0x62>
 80155b4:	89a3      	ldrh	r3, [r4, #12]
 80155b6:	07db      	lsls	r3, r3, #31
 80155b8:	d519      	bpl.n	80155ee <__swbuf_r+0x92>
 80155ba:	2e0a      	cmp	r6, #10
 80155bc:	d117      	bne.n	80155ee <__swbuf_r+0x92>
 80155be:	4621      	mov	r1, r4
 80155c0:	4628      	mov	r0, r5
 80155c2:	f000 f919 	bl	80157f8 <_fflush_r>
 80155c6:	b190      	cbz	r0, 80155ee <__swbuf_r+0x92>
 80155c8:	e00f      	b.n	80155ea <__swbuf_r+0x8e>
 80155ca:	4b0b      	ldr	r3, [pc, #44]	; (80155f8 <__swbuf_r+0x9c>)
 80155cc:	429c      	cmp	r4, r3
 80155ce:	d101      	bne.n	80155d4 <__swbuf_r+0x78>
 80155d0:	68ac      	ldr	r4, [r5, #8]
 80155d2:	e7d0      	b.n	8015576 <__swbuf_r+0x1a>
 80155d4:	4b09      	ldr	r3, [pc, #36]	; (80155fc <__swbuf_r+0xa0>)
 80155d6:	429c      	cmp	r4, r3
 80155d8:	bf08      	it	eq
 80155da:	68ec      	ldreq	r4, [r5, #12]
 80155dc:	e7cb      	b.n	8015576 <__swbuf_r+0x1a>
 80155de:	4621      	mov	r1, r4
 80155e0:	4628      	mov	r0, r5
 80155e2:	f000 f80d 	bl	8015600 <__swsetup_r>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d0cc      	beq.n	8015584 <__swbuf_r+0x28>
 80155ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80155ee:	4638      	mov	r0, r7
 80155f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155f2:	bf00      	nop
 80155f4:	08017fd0 	.word	0x08017fd0
 80155f8:	08017ff0 	.word	0x08017ff0
 80155fc:	08017fb0 	.word	0x08017fb0

08015600 <__swsetup_r>:
 8015600:	4b32      	ldr	r3, [pc, #200]	; (80156cc <__swsetup_r+0xcc>)
 8015602:	b570      	push	{r4, r5, r6, lr}
 8015604:	681d      	ldr	r5, [r3, #0]
 8015606:	4606      	mov	r6, r0
 8015608:	460c      	mov	r4, r1
 801560a:	b125      	cbz	r5, 8015616 <__swsetup_r+0x16>
 801560c:	69ab      	ldr	r3, [r5, #24]
 801560e:	b913      	cbnz	r3, 8015616 <__swsetup_r+0x16>
 8015610:	4628      	mov	r0, r5
 8015612:	f000 f95b 	bl	80158cc <__sinit>
 8015616:	4b2e      	ldr	r3, [pc, #184]	; (80156d0 <__swsetup_r+0xd0>)
 8015618:	429c      	cmp	r4, r3
 801561a:	d10f      	bne.n	801563c <__swsetup_r+0x3c>
 801561c:	686c      	ldr	r4, [r5, #4]
 801561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015622:	b29a      	uxth	r2, r3
 8015624:	0715      	lsls	r5, r2, #28
 8015626:	d42c      	bmi.n	8015682 <__swsetup_r+0x82>
 8015628:	06d0      	lsls	r0, r2, #27
 801562a:	d411      	bmi.n	8015650 <__swsetup_r+0x50>
 801562c:	2209      	movs	r2, #9
 801562e:	6032      	str	r2, [r6, #0]
 8015630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015634:	81a3      	strh	r3, [r4, #12]
 8015636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801563a:	e03e      	b.n	80156ba <__swsetup_r+0xba>
 801563c:	4b25      	ldr	r3, [pc, #148]	; (80156d4 <__swsetup_r+0xd4>)
 801563e:	429c      	cmp	r4, r3
 8015640:	d101      	bne.n	8015646 <__swsetup_r+0x46>
 8015642:	68ac      	ldr	r4, [r5, #8]
 8015644:	e7eb      	b.n	801561e <__swsetup_r+0x1e>
 8015646:	4b24      	ldr	r3, [pc, #144]	; (80156d8 <__swsetup_r+0xd8>)
 8015648:	429c      	cmp	r4, r3
 801564a:	bf08      	it	eq
 801564c:	68ec      	ldreq	r4, [r5, #12]
 801564e:	e7e6      	b.n	801561e <__swsetup_r+0x1e>
 8015650:	0751      	lsls	r1, r2, #29
 8015652:	d512      	bpl.n	801567a <__swsetup_r+0x7a>
 8015654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015656:	b141      	cbz	r1, 801566a <__swsetup_r+0x6a>
 8015658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801565c:	4299      	cmp	r1, r3
 801565e:	d002      	beq.n	8015666 <__swsetup_r+0x66>
 8015660:	4630      	mov	r0, r6
 8015662:	f7ff faaf 	bl	8014bc4 <_free_r>
 8015666:	2300      	movs	r3, #0
 8015668:	6363      	str	r3, [r4, #52]	; 0x34
 801566a:	89a3      	ldrh	r3, [r4, #12]
 801566c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015670:	81a3      	strh	r3, [r4, #12]
 8015672:	2300      	movs	r3, #0
 8015674:	6063      	str	r3, [r4, #4]
 8015676:	6923      	ldr	r3, [r4, #16]
 8015678:	6023      	str	r3, [r4, #0]
 801567a:	89a3      	ldrh	r3, [r4, #12]
 801567c:	f043 0308 	orr.w	r3, r3, #8
 8015680:	81a3      	strh	r3, [r4, #12]
 8015682:	6923      	ldr	r3, [r4, #16]
 8015684:	b94b      	cbnz	r3, 801569a <__swsetup_r+0x9a>
 8015686:	89a3      	ldrh	r3, [r4, #12]
 8015688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801568c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015690:	d003      	beq.n	801569a <__swsetup_r+0x9a>
 8015692:	4621      	mov	r1, r4
 8015694:	4630      	mov	r0, r6
 8015696:	f000 f9cb 	bl	8015a30 <__smakebuf_r>
 801569a:	89a2      	ldrh	r2, [r4, #12]
 801569c:	f012 0301 	ands.w	r3, r2, #1
 80156a0:	d00c      	beq.n	80156bc <__swsetup_r+0xbc>
 80156a2:	2300      	movs	r3, #0
 80156a4:	60a3      	str	r3, [r4, #8]
 80156a6:	6963      	ldr	r3, [r4, #20]
 80156a8:	425b      	negs	r3, r3
 80156aa:	61a3      	str	r3, [r4, #24]
 80156ac:	6923      	ldr	r3, [r4, #16]
 80156ae:	b953      	cbnz	r3, 80156c6 <__swsetup_r+0xc6>
 80156b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80156b8:	d1ba      	bne.n	8015630 <__swsetup_r+0x30>
 80156ba:	bd70      	pop	{r4, r5, r6, pc}
 80156bc:	0792      	lsls	r2, r2, #30
 80156be:	bf58      	it	pl
 80156c0:	6963      	ldrpl	r3, [r4, #20]
 80156c2:	60a3      	str	r3, [r4, #8]
 80156c4:	e7f2      	b.n	80156ac <__swsetup_r+0xac>
 80156c6:	2000      	movs	r0, #0
 80156c8:	e7f7      	b.n	80156ba <__swsetup_r+0xba>
 80156ca:	bf00      	nop
 80156cc:	200001e8 	.word	0x200001e8
 80156d0:	08017fd0 	.word	0x08017fd0
 80156d4:	08017ff0 	.word	0x08017ff0
 80156d8:	08017fb0 	.word	0x08017fb0

080156dc <abort>:
 80156dc:	b508      	push	{r3, lr}
 80156de:	2006      	movs	r0, #6
 80156e0:	f000 fbea 	bl	8015eb8 <raise>
 80156e4:	2001      	movs	r0, #1
 80156e6:	f7ef fe49 	bl	800537c <_exit>
	...

080156ec <__sflush_r>:
 80156ec:	898a      	ldrh	r2, [r1, #12]
 80156ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f2:	4605      	mov	r5, r0
 80156f4:	0710      	lsls	r0, r2, #28
 80156f6:	460c      	mov	r4, r1
 80156f8:	d458      	bmi.n	80157ac <__sflush_r+0xc0>
 80156fa:	684b      	ldr	r3, [r1, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	dc05      	bgt.n	801570c <__sflush_r+0x20>
 8015700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015702:	2b00      	cmp	r3, #0
 8015704:	dc02      	bgt.n	801570c <__sflush_r+0x20>
 8015706:	2000      	movs	r0, #0
 8015708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801570c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801570e:	2e00      	cmp	r6, #0
 8015710:	d0f9      	beq.n	8015706 <__sflush_r+0x1a>
 8015712:	2300      	movs	r3, #0
 8015714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015718:	682f      	ldr	r7, [r5, #0]
 801571a:	6a21      	ldr	r1, [r4, #32]
 801571c:	602b      	str	r3, [r5, #0]
 801571e:	d032      	beq.n	8015786 <__sflush_r+0x9a>
 8015720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015722:	89a3      	ldrh	r3, [r4, #12]
 8015724:	075a      	lsls	r2, r3, #29
 8015726:	d505      	bpl.n	8015734 <__sflush_r+0x48>
 8015728:	6863      	ldr	r3, [r4, #4]
 801572a:	1ac0      	subs	r0, r0, r3
 801572c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801572e:	b10b      	cbz	r3, 8015734 <__sflush_r+0x48>
 8015730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015732:	1ac0      	subs	r0, r0, r3
 8015734:	2300      	movs	r3, #0
 8015736:	4602      	mov	r2, r0
 8015738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801573a:	6a21      	ldr	r1, [r4, #32]
 801573c:	4628      	mov	r0, r5
 801573e:	47b0      	blx	r6
 8015740:	1c43      	adds	r3, r0, #1
 8015742:	89a3      	ldrh	r3, [r4, #12]
 8015744:	d106      	bne.n	8015754 <__sflush_r+0x68>
 8015746:	6829      	ldr	r1, [r5, #0]
 8015748:	291d      	cmp	r1, #29
 801574a:	d848      	bhi.n	80157de <__sflush_r+0xf2>
 801574c:	4a29      	ldr	r2, [pc, #164]	; (80157f4 <__sflush_r+0x108>)
 801574e:	40ca      	lsrs	r2, r1
 8015750:	07d6      	lsls	r6, r2, #31
 8015752:	d544      	bpl.n	80157de <__sflush_r+0xf2>
 8015754:	2200      	movs	r2, #0
 8015756:	6062      	str	r2, [r4, #4]
 8015758:	04d9      	lsls	r1, r3, #19
 801575a:	6922      	ldr	r2, [r4, #16]
 801575c:	6022      	str	r2, [r4, #0]
 801575e:	d504      	bpl.n	801576a <__sflush_r+0x7e>
 8015760:	1c42      	adds	r2, r0, #1
 8015762:	d101      	bne.n	8015768 <__sflush_r+0x7c>
 8015764:	682b      	ldr	r3, [r5, #0]
 8015766:	b903      	cbnz	r3, 801576a <__sflush_r+0x7e>
 8015768:	6560      	str	r0, [r4, #84]	; 0x54
 801576a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801576c:	602f      	str	r7, [r5, #0]
 801576e:	2900      	cmp	r1, #0
 8015770:	d0c9      	beq.n	8015706 <__sflush_r+0x1a>
 8015772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015776:	4299      	cmp	r1, r3
 8015778:	d002      	beq.n	8015780 <__sflush_r+0x94>
 801577a:	4628      	mov	r0, r5
 801577c:	f7ff fa22 	bl	8014bc4 <_free_r>
 8015780:	2000      	movs	r0, #0
 8015782:	6360      	str	r0, [r4, #52]	; 0x34
 8015784:	e7c0      	b.n	8015708 <__sflush_r+0x1c>
 8015786:	2301      	movs	r3, #1
 8015788:	4628      	mov	r0, r5
 801578a:	47b0      	blx	r6
 801578c:	1c41      	adds	r1, r0, #1
 801578e:	d1c8      	bne.n	8015722 <__sflush_r+0x36>
 8015790:	682b      	ldr	r3, [r5, #0]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0c5      	beq.n	8015722 <__sflush_r+0x36>
 8015796:	2b1d      	cmp	r3, #29
 8015798:	d001      	beq.n	801579e <__sflush_r+0xb2>
 801579a:	2b16      	cmp	r3, #22
 801579c:	d101      	bne.n	80157a2 <__sflush_r+0xb6>
 801579e:	602f      	str	r7, [r5, #0]
 80157a0:	e7b1      	b.n	8015706 <__sflush_r+0x1a>
 80157a2:	89a3      	ldrh	r3, [r4, #12]
 80157a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157a8:	81a3      	strh	r3, [r4, #12]
 80157aa:	e7ad      	b.n	8015708 <__sflush_r+0x1c>
 80157ac:	690f      	ldr	r7, [r1, #16]
 80157ae:	2f00      	cmp	r7, #0
 80157b0:	d0a9      	beq.n	8015706 <__sflush_r+0x1a>
 80157b2:	0793      	lsls	r3, r2, #30
 80157b4:	680e      	ldr	r6, [r1, #0]
 80157b6:	bf08      	it	eq
 80157b8:	694b      	ldreq	r3, [r1, #20]
 80157ba:	600f      	str	r7, [r1, #0]
 80157bc:	bf18      	it	ne
 80157be:	2300      	movne	r3, #0
 80157c0:	eba6 0807 	sub.w	r8, r6, r7
 80157c4:	608b      	str	r3, [r1, #8]
 80157c6:	f1b8 0f00 	cmp.w	r8, #0
 80157ca:	dd9c      	ble.n	8015706 <__sflush_r+0x1a>
 80157cc:	4643      	mov	r3, r8
 80157ce:	463a      	mov	r2, r7
 80157d0:	6a21      	ldr	r1, [r4, #32]
 80157d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157d4:	4628      	mov	r0, r5
 80157d6:	47b0      	blx	r6
 80157d8:	2800      	cmp	r0, #0
 80157da:	dc06      	bgt.n	80157ea <__sflush_r+0xfe>
 80157dc:	89a3      	ldrh	r3, [r4, #12]
 80157de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157e2:	81a3      	strh	r3, [r4, #12]
 80157e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157e8:	e78e      	b.n	8015708 <__sflush_r+0x1c>
 80157ea:	4407      	add	r7, r0
 80157ec:	eba8 0800 	sub.w	r8, r8, r0
 80157f0:	e7e9      	b.n	80157c6 <__sflush_r+0xda>
 80157f2:	bf00      	nop
 80157f4:	20400001 	.word	0x20400001

080157f8 <_fflush_r>:
 80157f8:	b538      	push	{r3, r4, r5, lr}
 80157fa:	690b      	ldr	r3, [r1, #16]
 80157fc:	4605      	mov	r5, r0
 80157fe:	460c      	mov	r4, r1
 8015800:	b1db      	cbz	r3, 801583a <_fflush_r+0x42>
 8015802:	b118      	cbz	r0, 801580c <_fflush_r+0x14>
 8015804:	6983      	ldr	r3, [r0, #24]
 8015806:	b90b      	cbnz	r3, 801580c <_fflush_r+0x14>
 8015808:	f000 f860 	bl	80158cc <__sinit>
 801580c:	4b0c      	ldr	r3, [pc, #48]	; (8015840 <_fflush_r+0x48>)
 801580e:	429c      	cmp	r4, r3
 8015810:	d109      	bne.n	8015826 <_fflush_r+0x2e>
 8015812:	686c      	ldr	r4, [r5, #4]
 8015814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015818:	b17b      	cbz	r3, 801583a <_fflush_r+0x42>
 801581a:	4621      	mov	r1, r4
 801581c:	4628      	mov	r0, r5
 801581e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015822:	f7ff bf63 	b.w	80156ec <__sflush_r>
 8015826:	4b07      	ldr	r3, [pc, #28]	; (8015844 <_fflush_r+0x4c>)
 8015828:	429c      	cmp	r4, r3
 801582a:	d101      	bne.n	8015830 <_fflush_r+0x38>
 801582c:	68ac      	ldr	r4, [r5, #8]
 801582e:	e7f1      	b.n	8015814 <_fflush_r+0x1c>
 8015830:	4b05      	ldr	r3, [pc, #20]	; (8015848 <_fflush_r+0x50>)
 8015832:	429c      	cmp	r4, r3
 8015834:	bf08      	it	eq
 8015836:	68ec      	ldreq	r4, [r5, #12]
 8015838:	e7ec      	b.n	8015814 <_fflush_r+0x1c>
 801583a:	2000      	movs	r0, #0
 801583c:	bd38      	pop	{r3, r4, r5, pc}
 801583e:	bf00      	nop
 8015840:	08017fd0 	.word	0x08017fd0
 8015844:	08017ff0 	.word	0x08017ff0
 8015848:	08017fb0 	.word	0x08017fb0

0801584c <std>:
 801584c:	2300      	movs	r3, #0
 801584e:	b510      	push	{r4, lr}
 8015850:	4604      	mov	r4, r0
 8015852:	e9c0 3300 	strd	r3, r3, [r0]
 8015856:	6083      	str	r3, [r0, #8]
 8015858:	8181      	strh	r1, [r0, #12]
 801585a:	6643      	str	r3, [r0, #100]	; 0x64
 801585c:	81c2      	strh	r2, [r0, #14]
 801585e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015862:	6183      	str	r3, [r0, #24]
 8015864:	4619      	mov	r1, r3
 8015866:	2208      	movs	r2, #8
 8015868:	305c      	adds	r0, #92	; 0x5c
 801586a:	f7ff f9a2 	bl	8014bb2 <memset>
 801586e:	4b05      	ldr	r3, [pc, #20]	; (8015884 <std+0x38>)
 8015870:	6263      	str	r3, [r4, #36]	; 0x24
 8015872:	4b05      	ldr	r3, [pc, #20]	; (8015888 <std+0x3c>)
 8015874:	62a3      	str	r3, [r4, #40]	; 0x28
 8015876:	4b05      	ldr	r3, [pc, #20]	; (801588c <std+0x40>)
 8015878:	62e3      	str	r3, [r4, #44]	; 0x2c
 801587a:	4b05      	ldr	r3, [pc, #20]	; (8015890 <std+0x44>)
 801587c:	6224      	str	r4, [r4, #32]
 801587e:	6323      	str	r3, [r4, #48]	; 0x30
 8015880:	bd10      	pop	{r4, pc}
 8015882:	bf00      	nop
 8015884:	08015ef1 	.word	0x08015ef1
 8015888:	08015f13 	.word	0x08015f13
 801588c:	08015f4b 	.word	0x08015f4b
 8015890:	08015f6f 	.word	0x08015f6f

08015894 <_cleanup_r>:
 8015894:	4901      	ldr	r1, [pc, #4]	; (801589c <_cleanup_r+0x8>)
 8015896:	f000 b885 	b.w	80159a4 <_fwalk_reent>
 801589a:	bf00      	nop
 801589c:	080157f9 	.word	0x080157f9

080158a0 <__sfmoreglue>:
 80158a0:	b570      	push	{r4, r5, r6, lr}
 80158a2:	1e4a      	subs	r2, r1, #1
 80158a4:	2568      	movs	r5, #104	; 0x68
 80158a6:	4355      	muls	r5, r2
 80158a8:	460e      	mov	r6, r1
 80158aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158ae:	f7ff f9d7 	bl	8014c60 <_malloc_r>
 80158b2:	4604      	mov	r4, r0
 80158b4:	b140      	cbz	r0, 80158c8 <__sfmoreglue+0x28>
 80158b6:	2100      	movs	r1, #0
 80158b8:	e9c0 1600 	strd	r1, r6, [r0]
 80158bc:	300c      	adds	r0, #12
 80158be:	60a0      	str	r0, [r4, #8]
 80158c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158c4:	f7ff f975 	bl	8014bb2 <memset>
 80158c8:	4620      	mov	r0, r4
 80158ca:	bd70      	pop	{r4, r5, r6, pc}

080158cc <__sinit>:
 80158cc:	6983      	ldr	r3, [r0, #24]
 80158ce:	b510      	push	{r4, lr}
 80158d0:	4604      	mov	r4, r0
 80158d2:	bb33      	cbnz	r3, 8015922 <__sinit+0x56>
 80158d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158d8:	6503      	str	r3, [r0, #80]	; 0x50
 80158da:	4b12      	ldr	r3, [pc, #72]	; (8015924 <__sinit+0x58>)
 80158dc:	4a12      	ldr	r2, [pc, #72]	; (8015928 <__sinit+0x5c>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	6282      	str	r2, [r0, #40]	; 0x28
 80158e2:	4298      	cmp	r0, r3
 80158e4:	bf04      	itt	eq
 80158e6:	2301      	moveq	r3, #1
 80158e8:	6183      	streq	r3, [r0, #24]
 80158ea:	f000 f81f 	bl	801592c <__sfp>
 80158ee:	6060      	str	r0, [r4, #4]
 80158f0:	4620      	mov	r0, r4
 80158f2:	f000 f81b 	bl	801592c <__sfp>
 80158f6:	60a0      	str	r0, [r4, #8]
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 f817 	bl	801592c <__sfp>
 80158fe:	2200      	movs	r2, #0
 8015900:	60e0      	str	r0, [r4, #12]
 8015902:	2104      	movs	r1, #4
 8015904:	6860      	ldr	r0, [r4, #4]
 8015906:	f7ff ffa1 	bl	801584c <std>
 801590a:	2201      	movs	r2, #1
 801590c:	2109      	movs	r1, #9
 801590e:	68a0      	ldr	r0, [r4, #8]
 8015910:	f7ff ff9c 	bl	801584c <std>
 8015914:	2202      	movs	r2, #2
 8015916:	2112      	movs	r1, #18
 8015918:	68e0      	ldr	r0, [r4, #12]
 801591a:	f7ff ff97 	bl	801584c <std>
 801591e:	2301      	movs	r3, #1
 8015920:	61a3      	str	r3, [r4, #24]
 8015922:	bd10      	pop	{r4, pc}
 8015924:	08017f78 	.word	0x08017f78
 8015928:	08015895 	.word	0x08015895

0801592c <__sfp>:
 801592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592e:	4b1b      	ldr	r3, [pc, #108]	; (801599c <__sfp+0x70>)
 8015930:	681e      	ldr	r6, [r3, #0]
 8015932:	69b3      	ldr	r3, [r6, #24]
 8015934:	4607      	mov	r7, r0
 8015936:	b913      	cbnz	r3, 801593e <__sfp+0x12>
 8015938:	4630      	mov	r0, r6
 801593a:	f7ff ffc7 	bl	80158cc <__sinit>
 801593e:	3648      	adds	r6, #72	; 0x48
 8015940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015944:	3b01      	subs	r3, #1
 8015946:	d503      	bpl.n	8015950 <__sfp+0x24>
 8015948:	6833      	ldr	r3, [r6, #0]
 801594a:	b133      	cbz	r3, 801595a <__sfp+0x2e>
 801594c:	6836      	ldr	r6, [r6, #0]
 801594e:	e7f7      	b.n	8015940 <__sfp+0x14>
 8015950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015954:	b16d      	cbz	r5, 8015972 <__sfp+0x46>
 8015956:	3468      	adds	r4, #104	; 0x68
 8015958:	e7f4      	b.n	8015944 <__sfp+0x18>
 801595a:	2104      	movs	r1, #4
 801595c:	4638      	mov	r0, r7
 801595e:	f7ff ff9f 	bl	80158a0 <__sfmoreglue>
 8015962:	6030      	str	r0, [r6, #0]
 8015964:	2800      	cmp	r0, #0
 8015966:	d1f1      	bne.n	801594c <__sfp+0x20>
 8015968:	230c      	movs	r3, #12
 801596a:	603b      	str	r3, [r7, #0]
 801596c:	4604      	mov	r4, r0
 801596e:	4620      	mov	r0, r4
 8015970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015972:	4b0b      	ldr	r3, [pc, #44]	; (80159a0 <__sfp+0x74>)
 8015974:	6665      	str	r5, [r4, #100]	; 0x64
 8015976:	e9c4 5500 	strd	r5, r5, [r4]
 801597a:	60a5      	str	r5, [r4, #8]
 801597c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015980:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015984:	2208      	movs	r2, #8
 8015986:	4629      	mov	r1, r5
 8015988:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801598c:	f7ff f911 	bl	8014bb2 <memset>
 8015990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015998:	e7e9      	b.n	801596e <__sfp+0x42>
 801599a:	bf00      	nop
 801599c:	08017f78 	.word	0x08017f78
 80159a0:	ffff0001 	.word	0xffff0001

080159a4 <_fwalk_reent>:
 80159a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159a8:	4680      	mov	r8, r0
 80159aa:	4689      	mov	r9, r1
 80159ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80159b0:	2600      	movs	r6, #0
 80159b2:	b914      	cbnz	r4, 80159ba <_fwalk_reent+0x16>
 80159b4:	4630      	mov	r0, r6
 80159b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80159be:	3f01      	subs	r7, #1
 80159c0:	d501      	bpl.n	80159c6 <_fwalk_reent+0x22>
 80159c2:	6824      	ldr	r4, [r4, #0]
 80159c4:	e7f5      	b.n	80159b2 <_fwalk_reent+0xe>
 80159c6:	89ab      	ldrh	r3, [r5, #12]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d907      	bls.n	80159dc <_fwalk_reent+0x38>
 80159cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159d0:	3301      	adds	r3, #1
 80159d2:	d003      	beq.n	80159dc <_fwalk_reent+0x38>
 80159d4:	4629      	mov	r1, r5
 80159d6:	4640      	mov	r0, r8
 80159d8:	47c8      	blx	r9
 80159da:	4306      	orrs	r6, r0
 80159dc:	3568      	adds	r5, #104	; 0x68
 80159de:	e7ee      	b.n	80159be <_fwalk_reent+0x1a>

080159e0 <__locale_ctype_ptr_l>:
 80159e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80159e4:	4770      	bx	lr

080159e6 <__swhatbuf_r>:
 80159e6:	b570      	push	{r4, r5, r6, lr}
 80159e8:	460e      	mov	r6, r1
 80159ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ee:	2900      	cmp	r1, #0
 80159f0:	b096      	sub	sp, #88	; 0x58
 80159f2:	4614      	mov	r4, r2
 80159f4:	461d      	mov	r5, r3
 80159f6:	da07      	bge.n	8015a08 <__swhatbuf_r+0x22>
 80159f8:	2300      	movs	r3, #0
 80159fa:	602b      	str	r3, [r5, #0]
 80159fc:	89b3      	ldrh	r3, [r6, #12]
 80159fe:	061a      	lsls	r2, r3, #24
 8015a00:	d410      	bmi.n	8015a24 <__swhatbuf_r+0x3e>
 8015a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a06:	e00e      	b.n	8015a26 <__swhatbuf_r+0x40>
 8015a08:	466a      	mov	r2, sp
 8015a0a:	f000 fae3 	bl	8015fd4 <_fstat_r>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	dbf2      	blt.n	80159f8 <__swhatbuf_r+0x12>
 8015a12:	9a01      	ldr	r2, [sp, #4]
 8015a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a1c:	425a      	negs	r2, r3
 8015a1e:	415a      	adcs	r2, r3
 8015a20:	602a      	str	r2, [r5, #0]
 8015a22:	e7ee      	b.n	8015a02 <__swhatbuf_r+0x1c>
 8015a24:	2340      	movs	r3, #64	; 0x40
 8015a26:	2000      	movs	r0, #0
 8015a28:	6023      	str	r3, [r4, #0]
 8015a2a:	b016      	add	sp, #88	; 0x58
 8015a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015a30 <__smakebuf_r>:
 8015a30:	898b      	ldrh	r3, [r1, #12]
 8015a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a34:	079d      	lsls	r5, r3, #30
 8015a36:	4606      	mov	r6, r0
 8015a38:	460c      	mov	r4, r1
 8015a3a:	d507      	bpl.n	8015a4c <__smakebuf_r+0x1c>
 8015a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a40:	6023      	str	r3, [r4, #0]
 8015a42:	6123      	str	r3, [r4, #16]
 8015a44:	2301      	movs	r3, #1
 8015a46:	6163      	str	r3, [r4, #20]
 8015a48:	b002      	add	sp, #8
 8015a4a:	bd70      	pop	{r4, r5, r6, pc}
 8015a4c:	ab01      	add	r3, sp, #4
 8015a4e:	466a      	mov	r2, sp
 8015a50:	f7ff ffc9 	bl	80159e6 <__swhatbuf_r>
 8015a54:	9900      	ldr	r1, [sp, #0]
 8015a56:	4605      	mov	r5, r0
 8015a58:	4630      	mov	r0, r6
 8015a5a:	f7ff f901 	bl	8014c60 <_malloc_r>
 8015a5e:	b948      	cbnz	r0, 8015a74 <__smakebuf_r+0x44>
 8015a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a64:	059a      	lsls	r2, r3, #22
 8015a66:	d4ef      	bmi.n	8015a48 <__smakebuf_r+0x18>
 8015a68:	f023 0303 	bic.w	r3, r3, #3
 8015a6c:	f043 0302 	orr.w	r3, r3, #2
 8015a70:	81a3      	strh	r3, [r4, #12]
 8015a72:	e7e3      	b.n	8015a3c <__smakebuf_r+0xc>
 8015a74:	4b0d      	ldr	r3, [pc, #52]	; (8015aac <__smakebuf_r+0x7c>)
 8015a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a78:	89a3      	ldrh	r3, [r4, #12]
 8015a7a:	6020      	str	r0, [r4, #0]
 8015a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a80:	81a3      	strh	r3, [r4, #12]
 8015a82:	9b00      	ldr	r3, [sp, #0]
 8015a84:	6163      	str	r3, [r4, #20]
 8015a86:	9b01      	ldr	r3, [sp, #4]
 8015a88:	6120      	str	r0, [r4, #16]
 8015a8a:	b15b      	cbz	r3, 8015aa4 <__smakebuf_r+0x74>
 8015a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a90:	4630      	mov	r0, r6
 8015a92:	f000 fab1 	bl	8015ff8 <_isatty_r>
 8015a96:	b128      	cbz	r0, 8015aa4 <__smakebuf_r+0x74>
 8015a98:	89a3      	ldrh	r3, [r4, #12]
 8015a9a:	f023 0303 	bic.w	r3, r3, #3
 8015a9e:	f043 0301 	orr.w	r3, r3, #1
 8015aa2:	81a3      	strh	r3, [r4, #12]
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	431d      	orrs	r5, r3
 8015aa8:	81a5      	strh	r5, [r4, #12]
 8015aaa:	e7cd      	b.n	8015a48 <__smakebuf_r+0x18>
 8015aac:	08015895 	.word	0x08015895

08015ab0 <__ascii_mbtowc>:
 8015ab0:	b082      	sub	sp, #8
 8015ab2:	b901      	cbnz	r1, 8015ab6 <__ascii_mbtowc+0x6>
 8015ab4:	a901      	add	r1, sp, #4
 8015ab6:	b142      	cbz	r2, 8015aca <__ascii_mbtowc+0x1a>
 8015ab8:	b14b      	cbz	r3, 8015ace <__ascii_mbtowc+0x1e>
 8015aba:	7813      	ldrb	r3, [r2, #0]
 8015abc:	600b      	str	r3, [r1, #0]
 8015abe:	7812      	ldrb	r2, [r2, #0]
 8015ac0:	1c10      	adds	r0, r2, #0
 8015ac2:	bf18      	it	ne
 8015ac4:	2001      	movne	r0, #1
 8015ac6:	b002      	add	sp, #8
 8015ac8:	4770      	bx	lr
 8015aca:	4610      	mov	r0, r2
 8015acc:	e7fb      	b.n	8015ac6 <__ascii_mbtowc+0x16>
 8015ace:	f06f 0001 	mvn.w	r0, #1
 8015ad2:	e7f8      	b.n	8015ac6 <__ascii_mbtowc+0x16>

08015ad4 <memmove>:
 8015ad4:	4288      	cmp	r0, r1
 8015ad6:	b510      	push	{r4, lr}
 8015ad8:	eb01 0302 	add.w	r3, r1, r2
 8015adc:	d807      	bhi.n	8015aee <memmove+0x1a>
 8015ade:	1e42      	subs	r2, r0, #1
 8015ae0:	4299      	cmp	r1, r3
 8015ae2:	d00a      	beq.n	8015afa <memmove+0x26>
 8015ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ae8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015aec:	e7f8      	b.n	8015ae0 <memmove+0xc>
 8015aee:	4283      	cmp	r3, r0
 8015af0:	d9f5      	bls.n	8015ade <memmove+0xa>
 8015af2:	1881      	adds	r1, r0, r2
 8015af4:	1ad2      	subs	r2, r2, r3
 8015af6:	42d3      	cmn	r3, r2
 8015af8:	d100      	bne.n	8015afc <memmove+0x28>
 8015afa:	bd10      	pop	{r4, pc}
 8015afc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015b04:	e7f7      	b.n	8015af6 <memmove+0x22>

08015b06 <__malloc_lock>:
 8015b06:	4770      	bx	lr

08015b08 <__malloc_unlock>:
 8015b08:	4770      	bx	lr

08015b0a <_realloc_r>:
 8015b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0c:	4607      	mov	r7, r0
 8015b0e:	4614      	mov	r4, r2
 8015b10:	460e      	mov	r6, r1
 8015b12:	b921      	cbnz	r1, 8015b1e <_realloc_r+0x14>
 8015b14:	4611      	mov	r1, r2
 8015b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015b1a:	f7ff b8a1 	b.w	8014c60 <_malloc_r>
 8015b1e:	b922      	cbnz	r2, 8015b2a <_realloc_r+0x20>
 8015b20:	f7ff f850 	bl	8014bc4 <_free_r>
 8015b24:	4625      	mov	r5, r4
 8015b26:	4628      	mov	r0, r5
 8015b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b2a:	f000 fa87 	bl	801603c <_malloc_usable_size_r>
 8015b2e:	42a0      	cmp	r0, r4
 8015b30:	d20f      	bcs.n	8015b52 <_realloc_r+0x48>
 8015b32:	4621      	mov	r1, r4
 8015b34:	4638      	mov	r0, r7
 8015b36:	f7ff f893 	bl	8014c60 <_malloc_r>
 8015b3a:	4605      	mov	r5, r0
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	d0f2      	beq.n	8015b26 <_realloc_r+0x1c>
 8015b40:	4631      	mov	r1, r6
 8015b42:	4622      	mov	r2, r4
 8015b44:	f7ff f82a 	bl	8014b9c <memcpy>
 8015b48:	4631      	mov	r1, r6
 8015b4a:	4638      	mov	r0, r7
 8015b4c:	f7ff f83a 	bl	8014bc4 <_free_r>
 8015b50:	e7e9      	b.n	8015b26 <_realloc_r+0x1c>
 8015b52:	4635      	mov	r5, r6
 8015b54:	e7e7      	b.n	8015b26 <_realloc_r+0x1c>

08015b56 <__ssputs_r>:
 8015b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b5a:	688e      	ldr	r6, [r1, #8]
 8015b5c:	429e      	cmp	r6, r3
 8015b5e:	4682      	mov	sl, r0
 8015b60:	460c      	mov	r4, r1
 8015b62:	4690      	mov	r8, r2
 8015b64:	4699      	mov	r9, r3
 8015b66:	d837      	bhi.n	8015bd8 <__ssputs_r+0x82>
 8015b68:	898a      	ldrh	r2, [r1, #12]
 8015b6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015b6e:	d031      	beq.n	8015bd4 <__ssputs_r+0x7e>
 8015b70:	6825      	ldr	r5, [r4, #0]
 8015b72:	6909      	ldr	r1, [r1, #16]
 8015b74:	1a6f      	subs	r7, r5, r1
 8015b76:	6965      	ldr	r5, [r4, #20]
 8015b78:	2302      	movs	r3, #2
 8015b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b7e:	fb95 f5f3 	sdiv	r5, r5, r3
 8015b82:	f109 0301 	add.w	r3, r9, #1
 8015b86:	443b      	add	r3, r7
 8015b88:	429d      	cmp	r5, r3
 8015b8a:	bf38      	it	cc
 8015b8c:	461d      	movcc	r5, r3
 8015b8e:	0553      	lsls	r3, r2, #21
 8015b90:	d530      	bpl.n	8015bf4 <__ssputs_r+0x9e>
 8015b92:	4629      	mov	r1, r5
 8015b94:	f7ff f864 	bl	8014c60 <_malloc_r>
 8015b98:	4606      	mov	r6, r0
 8015b9a:	b950      	cbnz	r0, 8015bb2 <__ssputs_r+0x5c>
 8015b9c:	230c      	movs	r3, #12
 8015b9e:	f8ca 3000 	str.w	r3, [sl]
 8015ba2:	89a3      	ldrh	r3, [r4, #12]
 8015ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba8:	81a3      	strh	r3, [r4, #12]
 8015baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bb2:	463a      	mov	r2, r7
 8015bb4:	6921      	ldr	r1, [r4, #16]
 8015bb6:	f7fe fff1 	bl	8014b9c <memcpy>
 8015bba:	89a3      	ldrh	r3, [r4, #12]
 8015bbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bc4:	81a3      	strh	r3, [r4, #12]
 8015bc6:	6126      	str	r6, [r4, #16]
 8015bc8:	6165      	str	r5, [r4, #20]
 8015bca:	443e      	add	r6, r7
 8015bcc:	1bed      	subs	r5, r5, r7
 8015bce:	6026      	str	r6, [r4, #0]
 8015bd0:	60a5      	str	r5, [r4, #8]
 8015bd2:	464e      	mov	r6, r9
 8015bd4:	454e      	cmp	r6, r9
 8015bd6:	d900      	bls.n	8015bda <__ssputs_r+0x84>
 8015bd8:	464e      	mov	r6, r9
 8015bda:	4632      	mov	r2, r6
 8015bdc:	4641      	mov	r1, r8
 8015bde:	6820      	ldr	r0, [r4, #0]
 8015be0:	f7ff ff78 	bl	8015ad4 <memmove>
 8015be4:	68a3      	ldr	r3, [r4, #8]
 8015be6:	1b9b      	subs	r3, r3, r6
 8015be8:	60a3      	str	r3, [r4, #8]
 8015bea:	6823      	ldr	r3, [r4, #0]
 8015bec:	441e      	add	r6, r3
 8015bee:	6026      	str	r6, [r4, #0]
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	e7dc      	b.n	8015bae <__ssputs_r+0x58>
 8015bf4:	462a      	mov	r2, r5
 8015bf6:	f7ff ff88 	bl	8015b0a <_realloc_r>
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d1e2      	bne.n	8015bc6 <__ssputs_r+0x70>
 8015c00:	6921      	ldr	r1, [r4, #16]
 8015c02:	4650      	mov	r0, sl
 8015c04:	f7fe ffde 	bl	8014bc4 <_free_r>
 8015c08:	e7c8      	b.n	8015b9c <__ssputs_r+0x46>
	...

08015c0c <_svfiprintf_r>:
 8015c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c10:	461d      	mov	r5, r3
 8015c12:	898b      	ldrh	r3, [r1, #12]
 8015c14:	061f      	lsls	r7, r3, #24
 8015c16:	b09d      	sub	sp, #116	; 0x74
 8015c18:	4680      	mov	r8, r0
 8015c1a:	460c      	mov	r4, r1
 8015c1c:	4616      	mov	r6, r2
 8015c1e:	d50f      	bpl.n	8015c40 <_svfiprintf_r+0x34>
 8015c20:	690b      	ldr	r3, [r1, #16]
 8015c22:	b96b      	cbnz	r3, 8015c40 <_svfiprintf_r+0x34>
 8015c24:	2140      	movs	r1, #64	; 0x40
 8015c26:	f7ff f81b 	bl	8014c60 <_malloc_r>
 8015c2a:	6020      	str	r0, [r4, #0]
 8015c2c:	6120      	str	r0, [r4, #16]
 8015c2e:	b928      	cbnz	r0, 8015c3c <_svfiprintf_r+0x30>
 8015c30:	230c      	movs	r3, #12
 8015c32:	f8c8 3000 	str.w	r3, [r8]
 8015c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c3a:	e0c8      	b.n	8015dce <_svfiprintf_r+0x1c2>
 8015c3c:	2340      	movs	r3, #64	; 0x40
 8015c3e:	6163      	str	r3, [r4, #20]
 8015c40:	2300      	movs	r3, #0
 8015c42:	9309      	str	r3, [sp, #36]	; 0x24
 8015c44:	2320      	movs	r3, #32
 8015c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c4a:	2330      	movs	r3, #48	; 0x30
 8015c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c50:	9503      	str	r5, [sp, #12]
 8015c52:	f04f 0b01 	mov.w	fp, #1
 8015c56:	4637      	mov	r7, r6
 8015c58:	463d      	mov	r5, r7
 8015c5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015c5e:	b10b      	cbz	r3, 8015c64 <_svfiprintf_r+0x58>
 8015c60:	2b25      	cmp	r3, #37	; 0x25
 8015c62:	d13e      	bne.n	8015ce2 <_svfiprintf_r+0xd6>
 8015c64:	ebb7 0a06 	subs.w	sl, r7, r6
 8015c68:	d00b      	beq.n	8015c82 <_svfiprintf_r+0x76>
 8015c6a:	4653      	mov	r3, sl
 8015c6c:	4632      	mov	r2, r6
 8015c6e:	4621      	mov	r1, r4
 8015c70:	4640      	mov	r0, r8
 8015c72:	f7ff ff70 	bl	8015b56 <__ssputs_r>
 8015c76:	3001      	adds	r0, #1
 8015c78:	f000 80a4 	beq.w	8015dc4 <_svfiprintf_r+0x1b8>
 8015c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c7e:	4453      	add	r3, sl
 8015c80:	9309      	str	r3, [sp, #36]	; 0x24
 8015c82:	783b      	ldrb	r3, [r7, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	f000 809d 	beq.w	8015dc4 <_svfiprintf_r+0x1b8>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c94:	9304      	str	r3, [sp, #16]
 8015c96:	9307      	str	r3, [sp, #28]
 8015c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8015c9e:	462f      	mov	r7, r5
 8015ca0:	2205      	movs	r2, #5
 8015ca2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015ca6:	4850      	ldr	r0, [pc, #320]	; (8015de8 <_svfiprintf_r+0x1dc>)
 8015ca8:	f7ea faaa 	bl	8000200 <memchr>
 8015cac:	9b04      	ldr	r3, [sp, #16]
 8015cae:	b9d0      	cbnz	r0, 8015ce6 <_svfiprintf_r+0xda>
 8015cb0:	06d9      	lsls	r1, r3, #27
 8015cb2:	bf44      	itt	mi
 8015cb4:	2220      	movmi	r2, #32
 8015cb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015cba:	071a      	lsls	r2, r3, #28
 8015cbc:	bf44      	itt	mi
 8015cbe:	222b      	movmi	r2, #43	; 0x2b
 8015cc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015cc4:	782a      	ldrb	r2, [r5, #0]
 8015cc6:	2a2a      	cmp	r2, #42	; 0x2a
 8015cc8:	d015      	beq.n	8015cf6 <_svfiprintf_r+0xea>
 8015cca:	9a07      	ldr	r2, [sp, #28]
 8015ccc:	462f      	mov	r7, r5
 8015cce:	2000      	movs	r0, #0
 8015cd0:	250a      	movs	r5, #10
 8015cd2:	4639      	mov	r1, r7
 8015cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cd8:	3b30      	subs	r3, #48	; 0x30
 8015cda:	2b09      	cmp	r3, #9
 8015cdc:	d94d      	bls.n	8015d7a <_svfiprintf_r+0x16e>
 8015cde:	b1b8      	cbz	r0, 8015d10 <_svfiprintf_r+0x104>
 8015ce0:	e00f      	b.n	8015d02 <_svfiprintf_r+0xf6>
 8015ce2:	462f      	mov	r7, r5
 8015ce4:	e7b8      	b.n	8015c58 <_svfiprintf_r+0x4c>
 8015ce6:	4a40      	ldr	r2, [pc, #256]	; (8015de8 <_svfiprintf_r+0x1dc>)
 8015ce8:	1a80      	subs	r0, r0, r2
 8015cea:	fa0b f000 	lsl.w	r0, fp, r0
 8015cee:	4318      	orrs	r0, r3
 8015cf0:	9004      	str	r0, [sp, #16]
 8015cf2:	463d      	mov	r5, r7
 8015cf4:	e7d3      	b.n	8015c9e <_svfiprintf_r+0x92>
 8015cf6:	9a03      	ldr	r2, [sp, #12]
 8015cf8:	1d11      	adds	r1, r2, #4
 8015cfa:	6812      	ldr	r2, [r2, #0]
 8015cfc:	9103      	str	r1, [sp, #12]
 8015cfe:	2a00      	cmp	r2, #0
 8015d00:	db01      	blt.n	8015d06 <_svfiprintf_r+0xfa>
 8015d02:	9207      	str	r2, [sp, #28]
 8015d04:	e004      	b.n	8015d10 <_svfiprintf_r+0x104>
 8015d06:	4252      	negs	r2, r2
 8015d08:	f043 0302 	orr.w	r3, r3, #2
 8015d0c:	9207      	str	r2, [sp, #28]
 8015d0e:	9304      	str	r3, [sp, #16]
 8015d10:	783b      	ldrb	r3, [r7, #0]
 8015d12:	2b2e      	cmp	r3, #46	; 0x2e
 8015d14:	d10c      	bne.n	8015d30 <_svfiprintf_r+0x124>
 8015d16:	787b      	ldrb	r3, [r7, #1]
 8015d18:	2b2a      	cmp	r3, #42	; 0x2a
 8015d1a:	d133      	bne.n	8015d84 <_svfiprintf_r+0x178>
 8015d1c:	9b03      	ldr	r3, [sp, #12]
 8015d1e:	1d1a      	adds	r2, r3, #4
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	9203      	str	r2, [sp, #12]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	bfb8      	it	lt
 8015d28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015d2c:	3702      	adds	r7, #2
 8015d2e:	9305      	str	r3, [sp, #20]
 8015d30:	4d2e      	ldr	r5, [pc, #184]	; (8015dec <_svfiprintf_r+0x1e0>)
 8015d32:	7839      	ldrb	r1, [r7, #0]
 8015d34:	2203      	movs	r2, #3
 8015d36:	4628      	mov	r0, r5
 8015d38:	f7ea fa62 	bl	8000200 <memchr>
 8015d3c:	b138      	cbz	r0, 8015d4e <_svfiprintf_r+0x142>
 8015d3e:	2340      	movs	r3, #64	; 0x40
 8015d40:	1b40      	subs	r0, r0, r5
 8015d42:	fa03 f000 	lsl.w	r0, r3, r0
 8015d46:	9b04      	ldr	r3, [sp, #16]
 8015d48:	4303      	orrs	r3, r0
 8015d4a:	3701      	adds	r7, #1
 8015d4c:	9304      	str	r3, [sp, #16]
 8015d4e:	7839      	ldrb	r1, [r7, #0]
 8015d50:	4827      	ldr	r0, [pc, #156]	; (8015df0 <_svfiprintf_r+0x1e4>)
 8015d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d56:	2206      	movs	r2, #6
 8015d58:	1c7e      	adds	r6, r7, #1
 8015d5a:	f7ea fa51 	bl	8000200 <memchr>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	d038      	beq.n	8015dd4 <_svfiprintf_r+0x1c8>
 8015d62:	4b24      	ldr	r3, [pc, #144]	; (8015df4 <_svfiprintf_r+0x1e8>)
 8015d64:	bb13      	cbnz	r3, 8015dac <_svfiprintf_r+0x1a0>
 8015d66:	9b03      	ldr	r3, [sp, #12]
 8015d68:	3307      	adds	r3, #7
 8015d6a:	f023 0307 	bic.w	r3, r3, #7
 8015d6e:	3308      	adds	r3, #8
 8015d70:	9303      	str	r3, [sp, #12]
 8015d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d74:	444b      	add	r3, r9
 8015d76:	9309      	str	r3, [sp, #36]	; 0x24
 8015d78:	e76d      	b.n	8015c56 <_svfiprintf_r+0x4a>
 8015d7a:	fb05 3202 	mla	r2, r5, r2, r3
 8015d7e:	2001      	movs	r0, #1
 8015d80:	460f      	mov	r7, r1
 8015d82:	e7a6      	b.n	8015cd2 <_svfiprintf_r+0xc6>
 8015d84:	2300      	movs	r3, #0
 8015d86:	3701      	adds	r7, #1
 8015d88:	9305      	str	r3, [sp, #20]
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	250a      	movs	r5, #10
 8015d8e:	4638      	mov	r0, r7
 8015d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d94:	3a30      	subs	r2, #48	; 0x30
 8015d96:	2a09      	cmp	r2, #9
 8015d98:	d903      	bls.n	8015da2 <_svfiprintf_r+0x196>
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d0c8      	beq.n	8015d30 <_svfiprintf_r+0x124>
 8015d9e:	9105      	str	r1, [sp, #20]
 8015da0:	e7c6      	b.n	8015d30 <_svfiprintf_r+0x124>
 8015da2:	fb05 2101 	mla	r1, r5, r1, r2
 8015da6:	2301      	movs	r3, #1
 8015da8:	4607      	mov	r7, r0
 8015daa:	e7f0      	b.n	8015d8e <_svfiprintf_r+0x182>
 8015dac:	ab03      	add	r3, sp, #12
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	4622      	mov	r2, r4
 8015db2:	4b11      	ldr	r3, [pc, #68]	; (8015df8 <_svfiprintf_r+0x1ec>)
 8015db4:	a904      	add	r1, sp, #16
 8015db6:	4640      	mov	r0, r8
 8015db8:	f3af 8000 	nop.w
 8015dbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015dc0:	4681      	mov	r9, r0
 8015dc2:	d1d6      	bne.n	8015d72 <_svfiprintf_r+0x166>
 8015dc4:	89a3      	ldrh	r3, [r4, #12]
 8015dc6:	065b      	lsls	r3, r3, #25
 8015dc8:	f53f af35 	bmi.w	8015c36 <_svfiprintf_r+0x2a>
 8015dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dce:	b01d      	add	sp, #116	; 0x74
 8015dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dd4:	ab03      	add	r3, sp, #12
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	4622      	mov	r2, r4
 8015dda:	4b07      	ldr	r3, [pc, #28]	; (8015df8 <_svfiprintf_r+0x1ec>)
 8015ddc:	a904      	add	r1, sp, #16
 8015dde:	4640      	mov	r0, r8
 8015de0:	f7ff f94e 	bl	8015080 <_printf_i>
 8015de4:	e7ea      	b.n	8015dbc <_svfiprintf_r+0x1b0>
 8015de6:	bf00      	nop
 8015de8:	08017f7c 	.word	0x08017f7c
 8015dec:	08017f82 	.word	0x08017f82
 8015df0:	08017f86 	.word	0x08017f86
 8015df4:	00000000 	.word	0x00000000
 8015df8:	08015b57 	.word	0x08015b57

08015dfc <_putc_r>:
 8015dfc:	b570      	push	{r4, r5, r6, lr}
 8015dfe:	460d      	mov	r5, r1
 8015e00:	4614      	mov	r4, r2
 8015e02:	4606      	mov	r6, r0
 8015e04:	b118      	cbz	r0, 8015e0e <_putc_r+0x12>
 8015e06:	6983      	ldr	r3, [r0, #24]
 8015e08:	b90b      	cbnz	r3, 8015e0e <_putc_r+0x12>
 8015e0a:	f7ff fd5f 	bl	80158cc <__sinit>
 8015e0e:	4b13      	ldr	r3, [pc, #76]	; (8015e5c <_putc_r+0x60>)
 8015e10:	429c      	cmp	r4, r3
 8015e12:	d112      	bne.n	8015e3a <_putc_r+0x3e>
 8015e14:	6874      	ldr	r4, [r6, #4]
 8015e16:	68a3      	ldr	r3, [r4, #8]
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	60a3      	str	r3, [r4, #8]
 8015e1e:	da16      	bge.n	8015e4e <_putc_r+0x52>
 8015e20:	69a2      	ldr	r2, [r4, #24]
 8015e22:	4293      	cmp	r3, r2
 8015e24:	db02      	blt.n	8015e2c <_putc_r+0x30>
 8015e26:	b2eb      	uxtb	r3, r5
 8015e28:	2b0a      	cmp	r3, #10
 8015e2a:	d110      	bne.n	8015e4e <_putc_r+0x52>
 8015e2c:	4622      	mov	r2, r4
 8015e2e:	4629      	mov	r1, r5
 8015e30:	4630      	mov	r0, r6
 8015e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e36:	f7ff bb91 	b.w	801555c <__swbuf_r>
 8015e3a:	4b09      	ldr	r3, [pc, #36]	; (8015e60 <_putc_r+0x64>)
 8015e3c:	429c      	cmp	r4, r3
 8015e3e:	d101      	bne.n	8015e44 <_putc_r+0x48>
 8015e40:	68b4      	ldr	r4, [r6, #8]
 8015e42:	e7e8      	b.n	8015e16 <_putc_r+0x1a>
 8015e44:	4b07      	ldr	r3, [pc, #28]	; (8015e64 <_putc_r+0x68>)
 8015e46:	429c      	cmp	r4, r3
 8015e48:	bf08      	it	eq
 8015e4a:	68f4      	ldreq	r4, [r6, #12]
 8015e4c:	e7e3      	b.n	8015e16 <_putc_r+0x1a>
 8015e4e:	6823      	ldr	r3, [r4, #0]
 8015e50:	1c5a      	adds	r2, r3, #1
 8015e52:	6022      	str	r2, [r4, #0]
 8015e54:	701d      	strb	r5, [r3, #0]
 8015e56:	b2e8      	uxtb	r0, r5
 8015e58:	bd70      	pop	{r4, r5, r6, pc}
 8015e5a:	bf00      	nop
 8015e5c:	08017fd0 	.word	0x08017fd0
 8015e60:	08017ff0 	.word	0x08017ff0
 8015e64:	08017fb0 	.word	0x08017fb0

08015e68 <_raise_r>:
 8015e68:	291f      	cmp	r1, #31
 8015e6a:	b538      	push	{r3, r4, r5, lr}
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	460d      	mov	r5, r1
 8015e70:	d904      	bls.n	8015e7c <_raise_r+0x14>
 8015e72:	2316      	movs	r3, #22
 8015e74:	6003      	str	r3, [r0, #0]
 8015e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e7a:	bd38      	pop	{r3, r4, r5, pc}
 8015e7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e7e:	b112      	cbz	r2, 8015e86 <_raise_r+0x1e>
 8015e80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e84:	b94b      	cbnz	r3, 8015e9a <_raise_r+0x32>
 8015e86:	4620      	mov	r0, r4
 8015e88:	f000 f830 	bl	8015eec <_getpid_r>
 8015e8c:	462a      	mov	r2, r5
 8015e8e:	4601      	mov	r1, r0
 8015e90:	4620      	mov	r0, r4
 8015e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e96:	f000 b817 	b.w	8015ec8 <_kill_r>
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d00a      	beq.n	8015eb4 <_raise_r+0x4c>
 8015e9e:	1c59      	adds	r1, r3, #1
 8015ea0:	d103      	bne.n	8015eaa <_raise_r+0x42>
 8015ea2:	2316      	movs	r3, #22
 8015ea4:	6003      	str	r3, [r0, #0]
 8015ea6:	2001      	movs	r0, #1
 8015ea8:	e7e7      	b.n	8015e7a <_raise_r+0x12>
 8015eaa:	2400      	movs	r4, #0
 8015eac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015eb0:	4628      	mov	r0, r5
 8015eb2:	4798      	blx	r3
 8015eb4:	2000      	movs	r0, #0
 8015eb6:	e7e0      	b.n	8015e7a <_raise_r+0x12>

08015eb8 <raise>:
 8015eb8:	4b02      	ldr	r3, [pc, #8]	; (8015ec4 <raise+0xc>)
 8015eba:	4601      	mov	r1, r0
 8015ebc:	6818      	ldr	r0, [r3, #0]
 8015ebe:	f7ff bfd3 	b.w	8015e68 <_raise_r>
 8015ec2:	bf00      	nop
 8015ec4:	200001e8 	.word	0x200001e8

08015ec8 <_kill_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	4c07      	ldr	r4, [pc, #28]	; (8015ee8 <_kill_r+0x20>)
 8015ecc:	2300      	movs	r3, #0
 8015ece:	4605      	mov	r5, r0
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	4611      	mov	r1, r2
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	f7ef fa41 	bl	800535c <_kill>
 8015eda:	1c43      	adds	r3, r0, #1
 8015edc:	d102      	bne.n	8015ee4 <_kill_r+0x1c>
 8015ede:	6823      	ldr	r3, [r4, #0]
 8015ee0:	b103      	cbz	r3, 8015ee4 <_kill_r+0x1c>
 8015ee2:	602b      	str	r3, [r5, #0]
 8015ee4:	bd38      	pop	{r3, r4, r5, pc}
 8015ee6:	bf00      	nop
 8015ee8:	20010550 	.word	0x20010550

08015eec <_getpid_r>:
 8015eec:	f7ef ba2e 	b.w	800534c <_getpid>

08015ef0 <__sread>:
 8015ef0:	b510      	push	{r4, lr}
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ef8:	f000 f8a8 	bl	801604c <_read_r>
 8015efc:	2800      	cmp	r0, #0
 8015efe:	bfab      	itete	ge
 8015f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015f02:	89a3      	ldrhlt	r3, [r4, #12]
 8015f04:	181b      	addge	r3, r3, r0
 8015f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015f0a:	bfac      	ite	ge
 8015f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015f0e:	81a3      	strhlt	r3, [r4, #12]
 8015f10:	bd10      	pop	{r4, pc}

08015f12 <__swrite>:
 8015f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f16:	461f      	mov	r7, r3
 8015f18:	898b      	ldrh	r3, [r1, #12]
 8015f1a:	05db      	lsls	r3, r3, #23
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	460c      	mov	r4, r1
 8015f20:	4616      	mov	r6, r2
 8015f22:	d505      	bpl.n	8015f30 <__swrite+0x1e>
 8015f24:	2302      	movs	r3, #2
 8015f26:	2200      	movs	r2, #0
 8015f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f2c:	f000 f874 	bl	8016018 <_lseek_r>
 8015f30:	89a3      	ldrh	r3, [r4, #12]
 8015f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f3a:	81a3      	strh	r3, [r4, #12]
 8015f3c:	4632      	mov	r2, r6
 8015f3e:	463b      	mov	r3, r7
 8015f40:	4628      	mov	r0, r5
 8015f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f46:	f000 b823 	b.w	8015f90 <_write_r>

08015f4a <__sseek>:
 8015f4a:	b510      	push	{r4, lr}
 8015f4c:	460c      	mov	r4, r1
 8015f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f52:	f000 f861 	bl	8016018 <_lseek_r>
 8015f56:	1c43      	adds	r3, r0, #1
 8015f58:	89a3      	ldrh	r3, [r4, #12]
 8015f5a:	bf15      	itete	ne
 8015f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015f66:	81a3      	strheq	r3, [r4, #12]
 8015f68:	bf18      	it	ne
 8015f6a:	81a3      	strhne	r3, [r4, #12]
 8015f6c:	bd10      	pop	{r4, pc}

08015f6e <__sclose>:
 8015f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f72:	f000 b81f 	b.w	8015fb4 <_close_r>

08015f76 <__ascii_wctomb>:
 8015f76:	b149      	cbz	r1, 8015f8c <__ascii_wctomb+0x16>
 8015f78:	2aff      	cmp	r2, #255	; 0xff
 8015f7a:	bf85      	ittet	hi
 8015f7c:	238a      	movhi	r3, #138	; 0x8a
 8015f7e:	6003      	strhi	r3, [r0, #0]
 8015f80:	700a      	strbls	r2, [r1, #0]
 8015f82:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015f86:	bf98      	it	ls
 8015f88:	2001      	movls	r0, #1
 8015f8a:	4770      	bx	lr
 8015f8c:	4608      	mov	r0, r1
 8015f8e:	4770      	bx	lr

08015f90 <_write_r>:
 8015f90:	b538      	push	{r3, r4, r5, lr}
 8015f92:	4c07      	ldr	r4, [pc, #28]	; (8015fb0 <_write_r+0x20>)
 8015f94:	4605      	mov	r5, r0
 8015f96:	4608      	mov	r0, r1
 8015f98:	4611      	mov	r1, r2
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	6022      	str	r2, [r4, #0]
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	f7ec ff3d 	bl	8002e1e <_write>
 8015fa4:	1c43      	adds	r3, r0, #1
 8015fa6:	d102      	bne.n	8015fae <_write_r+0x1e>
 8015fa8:	6823      	ldr	r3, [r4, #0]
 8015faa:	b103      	cbz	r3, 8015fae <_write_r+0x1e>
 8015fac:	602b      	str	r3, [r5, #0]
 8015fae:	bd38      	pop	{r3, r4, r5, pc}
 8015fb0:	20010550 	.word	0x20010550

08015fb4 <_close_r>:
 8015fb4:	b538      	push	{r3, r4, r5, lr}
 8015fb6:	4c06      	ldr	r4, [pc, #24]	; (8015fd0 <_close_r+0x1c>)
 8015fb8:	2300      	movs	r3, #0
 8015fba:	4605      	mov	r5, r0
 8015fbc:	4608      	mov	r0, r1
 8015fbe:	6023      	str	r3, [r4, #0]
 8015fc0:	f7ef fa03 	bl	80053ca <_close>
 8015fc4:	1c43      	adds	r3, r0, #1
 8015fc6:	d102      	bne.n	8015fce <_close_r+0x1a>
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	b103      	cbz	r3, 8015fce <_close_r+0x1a>
 8015fcc:	602b      	str	r3, [r5, #0]
 8015fce:	bd38      	pop	{r3, r4, r5, pc}
 8015fd0:	20010550 	.word	0x20010550

08015fd4 <_fstat_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4c07      	ldr	r4, [pc, #28]	; (8015ff4 <_fstat_r+0x20>)
 8015fd8:	2300      	movs	r3, #0
 8015fda:	4605      	mov	r5, r0
 8015fdc:	4608      	mov	r0, r1
 8015fde:	4611      	mov	r1, r2
 8015fe0:	6023      	str	r3, [r4, #0]
 8015fe2:	f7ef f9fe 	bl	80053e2 <_fstat>
 8015fe6:	1c43      	adds	r3, r0, #1
 8015fe8:	d102      	bne.n	8015ff0 <_fstat_r+0x1c>
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	b103      	cbz	r3, 8015ff0 <_fstat_r+0x1c>
 8015fee:	602b      	str	r3, [r5, #0]
 8015ff0:	bd38      	pop	{r3, r4, r5, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20010550 	.word	0x20010550

08015ff8 <_isatty_r>:
 8015ff8:	b538      	push	{r3, r4, r5, lr}
 8015ffa:	4c06      	ldr	r4, [pc, #24]	; (8016014 <_isatty_r+0x1c>)
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	4605      	mov	r5, r0
 8016000:	4608      	mov	r0, r1
 8016002:	6023      	str	r3, [r4, #0]
 8016004:	f7ef f9fd 	bl	8005402 <_isatty>
 8016008:	1c43      	adds	r3, r0, #1
 801600a:	d102      	bne.n	8016012 <_isatty_r+0x1a>
 801600c:	6823      	ldr	r3, [r4, #0]
 801600e:	b103      	cbz	r3, 8016012 <_isatty_r+0x1a>
 8016010:	602b      	str	r3, [r5, #0]
 8016012:	bd38      	pop	{r3, r4, r5, pc}
 8016014:	20010550 	.word	0x20010550

08016018 <_lseek_r>:
 8016018:	b538      	push	{r3, r4, r5, lr}
 801601a:	4c07      	ldr	r4, [pc, #28]	; (8016038 <_lseek_r+0x20>)
 801601c:	4605      	mov	r5, r0
 801601e:	4608      	mov	r0, r1
 8016020:	4611      	mov	r1, r2
 8016022:	2200      	movs	r2, #0
 8016024:	6022      	str	r2, [r4, #0]
 8016026:	461a      	mov	r2, r3
 8016028:	f7ef f9f6 	bl	8005418 <_lseek>
 801602c:	1c43      	adds	r3, r0, #1
 801602e:	d102      	bne.n	8016036 <_lseek_r+0x1e>
 8016030:	6823      	ldr	r3, [r4, #0]
 8016032:	b103      	cbz	r3, 8016036 <_lseek_r+0x1e>
 8016034:	602b      	str	r3, [r5, #0]
 8016036:	bd38      	pop	{r3, r4, r5, pc}
 8016038:	20010550 	.word	0x20010550

0801603c <_malloc_usable_size_r>:
 801603c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016040:	1f18      	subs	r0, r3, #4
 8016042:	2b00      	cmp	r3, #0
 8016044:	bfbc      	itt	lt
 8016046:	580b      	ldrlt	r3, [r1, r0]
 8016048:	18c0      	addlt	r0, r0, r3
 801604a:	4770      	bx	lr

0801604c <_read_r>:
 801604c:	b538      	push	{r3, r4, r5, lr}
 801604e:	4c07      	ldr	r4, [pc, #28]	; (801606c <_read_r+0x20>)
 8016050:	4605      	mov	r5, r0
 8016052:	4608      	mov	r0, r1
 8016054:	4611      	mov	r1, r2
 8016056:	2200      	movs	r2, #0
 8016058:	6022      	str	r2, [r4, #0]
 801605a:	461a      	mov	r2, r3
 801605c:	f7ef f998 	bl	8005390 <_read>
 8016060:	1c43      	adds	r3, r0, #1
 8016062:	d102      	bne.n	801606a <_read_r+0x1e>
 8016064:	6823      	ldr	r3, [r4, #0]
 8016066:	b103      	cbz	r3, 801606a <_read_r+0x1e>
 8016068:	602b      	str	r3, [r5, #0]
 801606a:	bd38      	pop	{r3, r4, r5, pc}
 801606c:	20010550 	.word	0x20010550

08016070 <pow>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	ed2d 8b04 	vpush	{d8-d9}
 8016078:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801634c <pow+0x2dc>
 801607c:	b08d      	sub	sp, #52	; 0x34
 801607e:	ec57 6b10 	vmov	r6, r7, d0
 8016082:	ec55 4b11 	vmov	r4, r5, d1
 8016086:	f000 fac7 	bl	8016618 <__ieee754_pow>
 801608a:	f999 3000 	ldrsb.w	r3, [r9]
 801608e:	9300      	str	r3, [sp, #0]
 8016090:	3301      	adds	r3, #1
 8016092:	eeb0 8a40 	vmov.f32	s16, s0
 8016096:	eef0 8a60 	vmov.f32	s17, s1
 801609a:	46c8      	mov	r8, r9
 801609c:	d05f      	beq.n	801615e <pow+0xee>
 801609e:	4622      	mov	r2, r4
 80160a0:	462b      	mov	r3, r5
 80160a2:	4620      	mov	r0, r4
 80160a4:	4629      	mov	r1, r5
 80160a6:	f7ea fd51 	bl	8000b4c <__aeabi_dcmpun>
 80160aa:	4683      	mov	fp, r0
 80160ac:	2800      	cmp	r0, #0
 80160ae:	d156      	bne.n	801615e <pow+0xee>
 80160b0:	4632      	mov	r2, r6
 80160b2:	463b      	mov	r3, r7
 80160b4:	4630      	mov	r0, r6
 80160b6:	4639      	mov	r1, r7
 80160b8:	f7ea fd48 	bl	8000b4c <__aeabi_dcmpun>
 80160bc:	9001      	str	r0, [sp, #4]
 80160be:	b1e8      	cbz	r0, 80160fc <pow+0x8c>
 80160c0:	2200      	movs	r2, #0
 80160c2:	2300      	movs	r3, #0
 80160c4:	4620      	mov	r0, r4
 80160c6:	4629      	mov	r1, r5
 80160c8:	f7ea fd0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d046      	beq.n	801615e <pow+0xee>
 80160d0:	2301      	movs	r3, #1
 80160d2:	9302      	str	r3, [sp, #8]
 80160d4:	4b96      	ldr	r3, [pc, #600]	; (8016330 <pow+0x2c0>)
 80160d6:	9303      	str	r3, [sp, #12]
 80160d8:	4b96      	ldr	r3, [pc, #600]	; (8016334 <pow+0x2c4>)
 80160da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80160de:	2200      	movs	r2, #0
 80160e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80160e4:	9b00      	ldr	r3, [sp, #0]
 80160e6:	2b02      	cmp	r3, #2
 80160e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80160ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80160f0:	d033      	beq.n	801615a <pow+0xea>
 80160f2:	a802      	add	r0, sp, #8
 80160f4:	f001 fb22 	bl	801773c <matherr>
 80160f8:	bb48      	cbnz	r0, 801614e <pow+0xde>
 80160fa:	e05d      	b.n	80161b8 <pow+0x148>
 80160fc:	f04f 0a00 	mov.w	sl, #0
 8016100:	f04f 0b00 	mov.w	fp, #0
 8016104:	4652      	mov	r2, sl
 8016106:	465b      	mov	r3, fp
 8016108:	4630      	mov	r0, r6
 801610a:	4639      	mov	r1, r7
 801610c:	f7ea fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 8016110:	ec4b ab19 	vmov	d9, sl, fp
 8016114:	2800      	cmp	r0, #0
 8016116:	d054      	beq.n	80161c2 <pow+0x152>
 8016118:	4652      	mov	r2, sl
 801611a:	465b      	mov	r3, fp
 801611c:	4620      	mov	r0, r4
 801611e:	4629      	mov	r1, r5
 8016120:	f7ea fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8016124:	4680      	mov	r8, r0
 8016126:	b318      	cbz	r0, 8016170 <pow+0x100>
 8016128:	2301      	movs	r3, #1
 801612a:	9302      	str	r3, [sp, #8]
 801612c:	4b80      	ldr	r3, [pc, #512]	; (8016330 <pow+0x2c0>)
 801612e:	9303      	str	r3, [sp, #12]
 8016130:	9b01      	ldr	r3, [sp, #4]
 8016132:	930a      	str	r3, [sp, #40]	; 0x28
 8016134:	9b00      	ldr	r3, [sp, #0]
 8016136:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801613a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801613e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d0d5      	beq.n	80160f2 <pow+0x82>
 8016146:	4b7b      	ldr	r3, [pc, #492]	; (8016334 <pow+0x2c4>)
 8016148:	2200      	movs	r2, #0
 801614a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016150:	b11b      	cbz	r3, 801615a <pow+0xea>
 8016152:	f7fe fce7 	bl	8014b24 <__errno>
 8016156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016158:	6003      	str	r3, [r0, #0]
 801615a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801615e:	eeb0 0a48 	vmov.f32	s0, s16
 8016162:	eef0 0a68 	vmov.f32	s1, s17
 8016166:	b00d      	add	sp, #52	; 0x34
 8016168:	ecbd 8b04 	vpop	{d8-d9}
 801616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016170:	ec45 4b10 	vmov	d0, r4, r5
 8016174:	f001 fada 	bl	801772c <finite>
 8016178:	2800      	cmp	r0, #0
 801617a:	d0f0      	beq.n	801615e <pow+0xee>
 801617c:	4652      	mov	r2, sl
 801617e:	465b      	mov	r3, fp
 8016180:	4620      	mov	r0, r4
 8016182:	4629      	mov	r1, r5
 8016184:	f7ea fcba 	bl	8000afc <__aeabi_dcmplt>
 8016188:	2800      	cmp	r0, #0
 801618a:	d0e8      	beq.n	801615e <pow+0xee>
 801618c:	2301      	movs	r3, #1
 801618e:	9302      	str	r3, [sp, #8]
 8016190:	4b67      	ldr	r3, [pc, #412]	; (8016330 <pow+0x2c0>)
 8016192:	9303      	str	r3, [sp, #12]
 8016194:	f999 3000 	ldrsb.w	r3, [r9]
 8016198:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801619c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80161a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80161a4:	b913      	cbnz	r3, 80161ac <pow+0x13c>
 80161a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80161aa:	e7a2      	b.n	80160f2 <pow+0x82>
 80161ac:	4962      	ldr	r1, [pc, #392]	; (8016338 <pow+0x2c8>)
 80161ae:	2000      	movs	r0, #0
 80161b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80161b4:	2b02      	cmp	r3, #2
 80161b6:	d19c      	bne.n	80160f2 <pow+0x82>
 80161b8:	f7fe fcb4 	bl	8014b24 <__errno>
 80161bc:	2321      	movs	r3, #33	; 0x21
 80161be:	6003      	str	r3, [r0, #0]
 80161c0:	e7c5      	b.n	801614e <pow+0xde>
 80161c2:	eeb0 0a48 	vmov.f32	s0, s16
 80161c6:	eef0 0a68 	vmov.f32	s1, s17
 80161ca:	f001 faaf 	bl	801772c <finite>
 80161ce:	9000      	str	r0, [sp, #0]
 80161d0:	2800      	cmp	r0, #0
 80161d2:	f040 8081 	bne.w	80162d8 <pow+0x268>
 80161d6:	ec47 6b10 	vmov	d0, r6, r7
 80161da:	f001 faa7 	bl	801772c <finite>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d07a      	beq.n	80162d8 <pow+0x268>
 80161e2:	ec45 4b10 	vmov	d0, r4, r5
 80161e6:	f001 faa1 	bl	801772c <finite>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	d074      	beq.n	80162d8 <pow+0x268>
 80161ee:	ec53 2b18 	vmov	r2, r3, d8
 80161f2:	ee18 0a10 	vmov	r0, s16
 80161f6:	4619      	mov	r1, r3
 80161f8:	f7ea fca8 	bl	8000b4c <__aeabi_dcmpun>
 80161fc:	f999 9000 	ldrsb.w	r9, [r9]
 8016200:	4b4b      	ldr	r3, [pc, #300]	; (8016330 <pow+0x2c0>)
 8016202:	b1b0      	cbz	r0, 8016232 <pow+0x1c2>
 8016204:	2201      	movs	r2, #1
 8016206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801620a:	9b00      	ldr	r3, [sp, #0]
 801620c:	930a      	str	r3, [sp, #40]	; 0x28
 801620e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016212:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016216:	f1b9 0f00 	cmp.w	r9, #0
 801621a:	d0c4      	beq.n	80161a6 <pow+0x136>
 801621c:	4652      	mov	r2, sl
 801621e:	465b      	mov	r3, fp
 8016220:	4650      	mov	r0, sl
 8016222:	4659      	mov	r1, fp
 8016224:	f7ea fb22 	bl	800086c <__aeabi_ddiv>
 8016228:	f1b9 0f02 	cmp.w	r9, #2
 801622c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016230:	e7c1      	b.n	80161b6 <pow+0x146>
 8016232:	2203      	movs	r2, #3
 8016234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016238:	900a      	str	r0, [sp, #40]	; 0x28
 801623a:	4629      	mov	r1, r5
 801623c:	4620      	mov	r0, r4
 801623e:	2200      	movs	r2, #0
 8016240:	4b3e      	ldr	r3, [pc, #248]	; (801633c <pow+0x2cc>)
 8016242:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801624a:	f7ea f9e5 	bl	8000618 <__aeabi_dmul>
 801624e:	4604      	mov	r4, r0
 8016250:	460d      	mov	r5, r1
 8016252:	f1b9 0f00 	cmp.w	r9, #0
 8016256:	d124      	bne.n	80162a2 <pow+0x232>
 8016258:	4b39      	ldr	r3, [pc, #228]	; (8016340 <pow+0x2d0>)
 801625a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801625e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016262:	4630      	mov	r0, r6
 8016264:	4652      	mov	r2, sl
 8016266:	465b      	mov	r3, fp
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea fc47 	bl	8000afc <__aeabi_dcmplt>
 801626e:	2800      	cmp	r0, #0
 8016270:	d056      	beq.n	8016320 <pow+0x2b0>
 8016272:	ec45 4b10 	vmov	d0, r4, r5
 8016276:	f001 fa6b 	bl	8017750 <rint>
 801627a:	4622      	mov	r2, r4
 801627c:	462b      	mov	r3, r5
 801627e:	ec51 0b10 	vmov	r0, r1, d0
 8016282:	f7ea fc31 	bl	8000ae8 <__aeabi_dcmpeq>
 8016286:	b920      	cbnz	r0, 8016292 <pow+0x222>
 8016288:	4b2e      	ldr	r3, [pc, #184]	; (8016344 <pow+0x2d4>)
 801628a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801628e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016292:	f998 3000 	ldrsb.w	r3, [r8]
 8016296:	2b02      	cmp	r3, #2
 8016298:	d142      	bne.n	8016320 <pow+0x2b0>
 801629a:	f7fe fc43 	bl	8014b24 <__errno>
 801629e:	2322      	movs	r3, #34	; 0x22
 80162a0:	e78d      	b.n	80161be <pow+0x14e>
 80162a2:	4b29      	ldr	r3, [pc, #164]	; (8016348 <pow+0x2d8>)
 80162a4:	2200      	movs	r2, #0
 80162a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162aa:	4630      	mov	r0, r6
 80162ac:	4652      	mov	r2, sl
 80162ae:	465b      	mov	r3, fp
 80162b0:	4639      	mov	r1, r7
 80162b2:	f7ea fc23 	bl	8000afc <__aeabi_dcmplt>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	d0eb      	beq.n	8016292 <pow+0x222>
 80162ba:	ec45 4b10 	vmov	d0, r4, r5
 80162be:	f001 fa47 	bl	8017750 <rint>
 80162c2:	4622      	mov	r2, r4
 80162c4:	462b      	mov	r3, r5
 80162c6:	ec51 0b10 	vmov	r0, r1, d0
 80162ca:	f7ea fc0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d1df      	bne.n	8016292 <pow+0x222>
 80162d2:	2200      	movs	r2, #0
 80162d4:	4b18      	ldr	r3, [pc, #96]	; (8016338 <pow+0x2c8>)
 80162d6:	e7da      	b.n	801628e <pow+0x21e>
 80162d8:	2200      	movs	r2, #0
 80162da:	2300      	movs	r3, #0
 80162dc:	ec51 0b18 	vmov	r0, r1, d8
 80162e0:	f7ea fc02 	bl	8000ae8 <__aeabi_dcmpeq>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	f43f af3a 	beq.w	801615e <pow+0xee>
 80162ea:	ec47 6b10 	vmov	d0, r6, r7
 80162ee:	f001 fa1d 	bl	801772c <finite>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	f43f af33 	beq.w	801615e <pow+0xee>
 80162f8:	ec45 4b10 	vmov	d0, r4, r5
 80162fc:	f001 fa16 	bl	801772c <finite>
 8016300:	2800      	cmp	r0, #0
 8016302:	f43f af2c 	beq.w	801615e <pow+0xee>
 8016306:	2304      	movs	r3, #4
 8016308:	9302      	str	r3, [sp, #8]
 801630a:	4b09      	ldr	r3, [pc, #36]	; (8016330 <pow+0x2c0>)
 801630c:	9303      	str	r3, [sp, #12]
 801630e:	2300      	movs	r3, #0
 8016310:	930a      	str	r3, [sp, #40]	; 0x28
 8016312:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016316:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801631a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801631e:	e7b8      	b.n	8016292 <pow+0x222>
 8016320:	a802      	add	r0, sp, #8
 8016322:	f001 fa0b 	bl	801773c <matherr>
 8016326:	2800      	cmp	r0, #0
 8016328:	f47f af11 	bne.w	801614e <pow+0xde>
 801632c:	e7b5      	b.n	801629a <pow+0x22a>
 801632e:	bf00      	nop
 8016330:	0801811b 	.word	0x0801811b
 8016334:	3ff00000 	.word	0x3ff00000
 8016338:	fff00000 	.word	0xfff00000
 801633c:	3fe00000 	.word	0x3fe00000
 8016340:	47efffff 	.word	0x47efffff
 8016344:	c7efffff 	.word	0xc7efffff
 8016348:	7ff00000 	.word	0x7ff00000
 801634c:	200003b8 	.word	0x200003b8

08016350 <powf>:
 8016350:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8016354:	ed2d 8b04 	vpush	{d8-d9}
 8016358:	4ca7      	ldr	r4, [pc, #668]	; (80165f8 <powf+0x2a8>)
 801635a:	b08a      	sub	sp, #40	; 0x28
 801635c:	eef0 8a40 	vmov.f32	s17, s0
 8016360:	eeb0 8a60 	vmov.f32	s16, s1
 8016364:	f000 ff16 	bl	8017194 <__ieee754_powf>
 8016368:	f994 5000 	ldrsb.w	r5, [r4]
 801636c:	1c6b      	adds	r3, r5, #1
 801636e:	eeb0 9a40 	vmov.f32	s18, s0
 8016372:	4626      	mov	r6, r4
 8016374:	d05f      	beq.n	8016436 <powf+0xe6>
 8016376:	eeb4 8a48 	vcmp.f32	s16, s16
 801637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801637e:	d65a      	bvs.n	8016436 <powf+0xe6>
 8016380:	eef4 8a68 	vcmp.f32	s17, s17
 8016384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016388:	d721      	bvc.n	80163ce <powf+0x7e>
 801638a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801638e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016392:	d150      	bne.n	8016436 <powf+0xe6>
 8016394:	2301      	movs	r3, #1
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	4b98      	ldr	r3, [pc, #608]	; (80165fc <powf+0x2ac>)
 801639a:	9301      	str	r3, [sp, #4]
 801639c:	ee18 0a90 	vmov	r0, s17
 80163a0:	2300      	movs	r3, #0
 80163a2:	9308      	str	r3, [sp, #32]
 80163a4:	f7ea f8e0 	bl	8000568 <__aeabi_f2d>
 80163a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163ac:	ee18 0a10 	vmov	r0, s16
 80163b0:	f7ea f8da 	bl	8000568 <__aeabi_f2d>
 80163b4:	4b92      	ldr	r3, [pc, #584]	; (8016600 <powf+0x2b0>)
 80163b6:	2200      	movs	r2, #0
 80163b8:	2d02      	cmp	r5, #2
 80163ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80163be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80163c2:	d032      	beq.n	801642a <powf+0xda>
 80163c4:	4668      	mov	r0, sp
 80163c6:	f001 f9b9 	bl	801773c <matherr>
 80163ca:	bb40      	cbnz	r0, 801641e <powf+0xce>
 80163cc:	e065      	b.n	801649a <powf+0x14a>
 80163ce:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8016604 <powf+0x2b4>
 80163d2:	eef4 8a69 	vcmp.f32	s17, s19
 80163d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163da:	d163      	bne.n	80164a4 <powf+0x154>
 80163dc:	eeb4 8a69 	vcmp.f32	s16, s19
 80163e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e4:	d12e      	bne.n	8016444 <powf+0xf4>
 80163e6:	2301      	movs	r3, #1
 80163e8:	9300      	str	r3, [sp, #0]
 80163ea:	4b84      	ldr	r3, [pc, #528]	; (80165fc <powf+0x2ac>)
 80163ec:	9301      	str	r3, [sp, #4]
 80163ee:	ee18 0a90 	vmov	r0, s17
 80163f2:	2300      	movs	r3, #0
 80163f4:	9308      	str	r3, [sp, #32]
 80163f6:	f7ea f8b7 	bl	8000568 <__aeabi_f2d>
 80163fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163fe:	ee18 0a10 	vmov	r0, s16
 8016402:	f7ea f8b1 	bl	8000568 <__aeabi_f2d>
 8016406:	2200      	movs	r2, #0
 8016408:	2300      	movs	r3, #0
 801640a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801640e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016412:	2d00      	cmp	r5, #0
 8016414:	d0d6      	beq.n	80163c4 <powf+0x74>
 8016416:	4b7a      	ldr	r3, [pc, #488]	; (8016600 <powf+0x2b0>)
 8016418:	2200      	movs	r2, #0
 801641a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801641e:	9b08      	ldr	r3, [sp, #32]
 8016420:	b11b      	cbz	r3, 801642a <powf+0xda>
 8016422:	f7fe fb7f 	bl	8014b24 <__errno>
 8016426:	9b08      	ldr	r3, [sp, #32]
 8016428:	6003      	str	r3, [r0, #0]
 801642a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801642e:	f7ea fbcb 	bl	8000bc8 <__aeabi_d2f>
 8016432:	ee09 0a10 	vmov	s18, r0
 8016436:	eeb0 0a49 	vmov.f32	s0, s18
 801643a:	b00a      	add	sp, #40	; 0x28
 801643c:	ecbd 8b04 	vpop	{d8-d9}
 8016440:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8016444:	eeb0 0a48 	vmov.f32	s0, s16
 8016448:	f001 fa83 	bl	8017952 <finitef>
 801644c:	2800      	cmp	r0, #0
 801644e:	d0f2      	beq.n	8016436 <powf+0xe6>
 8016450:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	d5ed      	bpl.n	8016436 <powf+0xe6>
 801645a:	2301      	movs	r3, #1
 801645c:	9300      	str	r3, [sp, #0]
 801645e:	4b67      	ldr	r3, [pc, #412]	; (80165fc <powf+0x2ac>)
 8016460:	9301      	str	r3, [sp, #4]
 8016462:	ee18 0a90 	vmov	r0, s17
 8016466:	2300      	movs	r3, #0
 8016468:	9308      	str	r3, [sp, #32]
 801646a:	f7ea f87d 	bl	8000568 <__aeabi_f2d>
 801646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016472:	ee18 0a10 	vmov	r0, s16
 8016476:	f7ea f877 	bl	8000568 <__aeabi_f2d>
 801647a:	f994 3000 	ldrsb.w	r3, [r4]
 801647e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016482:	b923      	cbnz	r3, 801648e <powf+0x13e>
 8016484:	2200      	movs	r2, #0
 8016486:	2300      	movs	r3, #0
 8016488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801648c:	e79a      	b.n	80163c4 <powf+0x74>
 801648e:	495e      	ldr	r1, [pc, #376]	; (8016608 <powf+0x2b8>)
 8016490:	2000      	movs	r0, #0
 8016492:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016496:	2b02      	cmp	r3, #2
 8016498:	d194      	bne.n	80163c4 <powf+0x74>
 801649a:	f7fe fb43 	bl	8014b24 <__errno>
 801649e:	2321      	movs	r3, #33	; 0x21
 80164a0:	6003      	str	r3, [r0, #0]
 80164a2:	e7bc      	b.n	801641e <powf+0xce>
 80164a4:	f001 fa55 	bl	8017952 <finitef>
 80164a8:	4605      	mov	r5, r0
 80164aa:	2800      	cmp	r0, #0
 80164ac:	d173      	bne.n	8016596 <powf+0x246>
 80164ae:	eeb0 0a68 	vmov.f32	s0, s17
 80164b2:	f001 fa4e 	bl	8017952 <finitef>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d06d      	beq.n	8016596 <powf+0x246>
 80164ba:	eeb0 0a48 	vmov.f32	s0, s16
 80164be:	f001 fa48 	bl	8017952 <finitef>
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d067      	beq.n	8016596 <powf+0x246>
 80164c6:	ee18 0a90 	vmov	r0, s17
 80164ca:	f7ea f84d 	bl	8000568 <__aeabi_f2d>
 80164ce:	4680      	mov	r8, r0
 80164d0:	ee18 0a10 	vmov	r0, s16
 80164d4:	4689      	mov	r9, r1
 80164d6:	f7ea f847 	bl	8000568 <__aeabi_f2d>
 80164da:	eeb4 9a49 	vcmp.f32	s18, s18
 80164de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e2:	f994 4000 	ldrsb.w	r4, [r4]
 80164e6:	4b45      	ldr	r3, [pc, #276]	; (80165fc <powf+0x2ac>)
 80164e8:	d713      	bvc.n	8016512 <powf+0x1c2>
 80164ea:	2201      	movs	r2, #1
 80164ec:	e9cd 2300 	strd	r2, r3, [sp]
 80164f0:	9508      	str	r5, [sp, #32]
 80164f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80164f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164fa:	2c00      	cmp	r4, #0
 80164fc:	d0c2      	beq.n	8016484 <powf+0x134>
 80164fe:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8016502:	ee17 0a90 	vmov	r0, s15
 8016506:	f7ea f82f 	bl	8000568 <__aeabi_f2d>
 801650a:	2c02      	cmp	r4, #2
 801650c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016510:	e7c2      	b.n	8016498 <powf+0x148>
 8016512:	2203      	movs	r2, #3
 8016514:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016518:	e9cd 2300 	strd	r2, r3, [sp]
 801651c:	9508      	str	r5, [sp, #32]
 801651e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016526:	ee28 8a27 	vmul.f32	s16, s16, s15
 801652a:	b9fc      	cbnz	r4, 801656c <powf+0x21c>
 801652c:	4b37      	ldr	r3, [pc, #220]	; (801660c <powf+0x2bc>)
 801652e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8016532:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801653a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801653e:	d553      	bpl.n	80165e8 <powf+0x298>
 8016540:	eeb0 0a48 	vmov.f32	s0, s16
 8016544:	f001 fa16 	bl	8017974 <rintf>
 8016548:	eeb4 0a48 	vcmp.f32	s0, s16
 801654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016550:	d004      	beq.n	801655c <powf+0x20c>
 8016552:	4b2f      	ldr	r3, [pc, #188]	; (8016610 <powf+0x2c0>)
 8016554:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016558:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801655c:	f996 3000 	ldrsb.w	r3, [r6]
 8016560:	2b02      	cmp	r3, #2
 8016562:	d141      	bne.n	80165e8 <powf+0x298>
 8016564:	f7fe fade 	bl	8014b24 <__errno>
 8016568:	2322      	movs	r3, #34	; 0x22
 801656a:	e799      	b.n	80164a0 <powf+0x150>
 801656c:	4b29      	ldr	r3, [pc, #164]	; (8016614 <powf+0x2c4>)
 801656e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8016572:	2200      	movs	r2, #0
 8016574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801657c:	d5ee      	bpl.n	801655c <powf+0x20c>
 801657e:	eeb0 0a48 	vmov.f32	s0, s16
 8016582:	f001 f9f7 	bl	8017974 <rintf>
 8016586:	eeb4 0a48 	vcmp.f32	s0, s16
 801658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658e:	d0e5      	beq.n	801655c <powf+0x20c>
 8016590:	2200      	movs	r2, #0
 8016592:	4b1d      	ldr	r3, [pc, #116]	; (8016608 <powf+0x2b8>)
 8016594:	e7e0      	b.n	8016558 <powf+0x208>
 8016596:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659e:	f47f af4a 	bne.w	8016436 <powf+0xe6>
 80165a2:	eeb0 0a68 	vmov.f32	s0, s17
 80165a6:	f001 f9d4 	bl	8017952 <finitef>
 80165aa:	2800      	cmp	r0, #0
 80165ac:	f43f af43 	beq.w	8016436 <powf+0xe6>
 80165b0:	eeb0 0a48 	vmov.f32	s0, s16
 80165b4:	f001 f9cd 	bl	8017952 <finitef>
 80165b8:	2800      	cmp	r0, #0
 80165ba:	f43f af3c 	beq.w	8016436 <powf+0xe6>
 80165be:	2304      	movs	r3, #4
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	4b0e      	ldr	r3, [pc, #56]	; (80165fc <powf+0x2ac>)
 80165c4:	9301      	str	r3, [sp, #4]
 80165c6:	ee18 0a90 	vmov	r0, s17
 80165ca:	2300      	movs	r3, #0
 80165cc:	9308      	str	r3, [sp, #32]
 80165ce:	f7e9 ffcb 	bl	8000568 <__aeabi_f2d>
 80165d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165d6:	ee18 0a10 	vmov	r0, s16
 80165da:	f7e9 ffc5 	bl	8000568 <__aeabi_f2d>
 80165de:	2200      	movs	r2, #0
 80165e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80165e4:	2300      	movs	r3, #0
 80165e6:	e7b7      	b.n	8016558 <powf+0x208>
 80165e8:	4668      	mov	r0, sp
 80165ea:	f001 f8a7 	bl	801773c <matherr>
 80165ee:	2800      	cmp	r0, #0
 80165f0:	f47f af15 	bne.w	801641e <powf+0xce>
 80165f4:	e7b6      	b.n	8016564 <powf+0x214>
 80165f6:	bf00      	nop
 80165f8:	200003b8 	.word	0x200003b8
 80165fc:	0801811f 	.word	0x0801811f
 8016600:	3ff00000 	.word	0x3ff00000
 8016604:	00000000 	.word	0x00000000
 8016608:	fff00000 	.word	0xfff00000
 801660c:	47efffff 	.word	0x47efffff
 8016610:	c7efffff 	.word	0xc7efffff
 8016614:	7ff00000 	.word	0x7ff00000

08016618 <__ieee754_pow>:
 8016618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661c:	b091      	sub	sp, #68	; 0x44
 801661e:	ed8d 1b00 	vstr	d1, [sp]
 8016622:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016626:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801662a:	ea58 0302 	orrs.w	r3, r8, r2
 801662e:	ec57 6b10 	vmov	r6, r7, d0
 8016632:	f000 84be 	beq.w	8016fb2 <__ieee754_pow+0x99a>
 8016636:	4b7a      	ldr	r3, [pc, #488]	; (8016820 <__ieee754_pow+0x208>)
 8016638:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801663c:	429c      	cmp	r4, r3
 801663e:	463d      	mov	r5, r7
 8016640:	ee10 aa10 	vmov	sl, s0
 8016644:	dc09      	bgt.n	801665a <__ieee754_pow+0x42>
 8016646:	d103      	bne.n	8016650 <__ieee754_pow+0x38>
 8016648:	b93e      	cbnz	r6, 801665a <__ieee754_pow+0x42>
 801664a:	45a0      	cmp	r8, r4
 801664c:	dc0d      	bgt.n	801666a <__ieee754_pow+0x52>
 801664e:	e001      	b.n	8016654 <__ieee754_pow+0x3c>
 8016650:	4598      	cmp	r8, r3
 8016652:	dc02      	bgt.n	801665a <__ieee754_pow+0x42>
 8016654:	4598      	cmp	r8, r3
 8016656:	d10e      	bne.n	8016676 <__ieee754_pow+0x5e>
 8016658:	b16a      	cbz	r2, 8016676 <__ieee754_pow+0x5e>
 801665a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801665e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016662:	ea54 030a 	orrs.w	r3, r4, sl
 8016666:	f000 84a4 	beq.w	8016fb2 <__ieee754_pow+0x99a>
 801666a:	486e      	ldr	r0, [pc, #440]	; (8016824 <__ieee754_pow+0x20c>)
 801666c:	b011      	add	sp, #68	; 0x44
 801666e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016672:	f001 b865 	b.w	8017740 <nan>
 8016676:	2d00      	cmp	r5, #0
 8016678:	da53      	bge.n	8016722 <__ieee754_pow+0x10a>
 801667a:	4b6b      	ldr	r3, [pc, #428]	; (8016828 <__ieee754_pow+0x210>)
 801667c:	4598      	cmp	r8, r3
 801667e:	dc4d      	bgt.n	801671c <__ieee754_pow+0x104>
 8016680:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016684:	4598      	cmp	r8, r3
 8016686:	dd4c      	ble.n	8016722 <__ieee754_pow+0x10a>
 8016688:	ea4f 5328 	mov.w	r3, r8, asr #20
 801668c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016690:	2b14      	cmp	r3, #20
 8016692:	dd26      	ble.n	80166e2 <__ieee754_pow+0xca>
 8016694:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016698:	fa22 f103 	lsr.w	r1, r2, r3
 801669c:	fa01 f303 	lsl.w	r3, r1, r3
 80166a0:	4293      	cmp	r3, r2
 80166a2:	d13e      	bne.n	8016722 <__ieee754_pow+0x10a>
 80166a4:	f001 0101 	and.w	r1, r1, #1
 80166a8:	f1c1 0b02 	rsb	fp, r1, #2
 80166ac:	2a00      	cmp	r2, #0
 80166ae:	d15b      	bne.n	8016768 <__ieee754_pow+0x150>
 80166b0:	4b5b      	ldr	r3, [pc, #364]	; (8016820 <__ieee754_pow+0x208>)
 80166b2:	4598      	cmp	r8, r3
 80166b4:	d124      	bne.n	8016700 <__ieee754_pow+0xe8>
 80166b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80166ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80166be:	ea53 030a 	orrs.w	r3, r3, sl
 80166c2:	f000 8476 	beq.w	8016fb2 <__ieee754_pow+0x99a>
 80166c6:	4b59      	ldr	r3, [pc, #356]	; (801682c <__ieee754_pow+0x214>)
 80166c8:	429c      	cmp	r4, r3
 80166ca:	dd2d      	ble.n	8016728 <__ieee754_pow+0x110>
 80166cc:	f1b9 0f00 	cmp.w	r9, #0
 80166d0:	f280 8473 	bge.w	8016fba <__ieee754_pow+0x9a2>
 80166d4:	2000      	movs	r0, #0
 80166d6:	2100      	movs	r1, #0
 80166d8:	ec41 0b10 	vmov	d0, r0, r1
 80166dc:	b011      	add	sp, #68	; 0x44
 80166de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e2:	2a00      	cmp	r2, #0
 80166e4:	d13e      	bne.n	8016764 <__ieee754_pow+0x14c>
 80166e6:	f1c3 0314 	rsb	r3, r3, #20
 80166ea:	fa48 f103 	asr.w	r1, r8, r3
 80166ee:	fa01 f303 	lsl.w	r3, r1, r3
 80166f2:	4543      	cmp	r3, r8
 80166f4:	f040 8469 	bne.w	8016fca <__ieee754_pow+0x9b2>
 80166f8:	f001 0101 	and.w	r1, r1, #1
 80166fc:	f1c1 0b02 	rsb	fp, r1, #2
 8016700:	4b4b      	ldr	r3, [pc, #300]	; (8016830 <__ieee754_pow+0x218>)
 8016702:	4598      	cmp	r8, r3
 8016704:	d118      	bne.n	8016738 <__ieee754_pow+0x120>
 8016706:	f1b9 0f00 	cmp.w	r9, #0
 801670a:	f280 845a 	bge.w	8016fc2 <__ieee754_pow+0x9aa>
 801670e:	4948      	ldr	r1, [pc, #288]	; (8016830 <__ieee754_pow+0x218>)
 8016710:	4632      	mov	r2, r6
 8016712:	463b      	mov	r3, r7
 8016714:	2000      	movs	r0, #0
 8016716:	f7ea f8a9 	bl	800086c <__aeabi_ddiv>
 801671a:	e7dd      	b.n	80166d8 <__ieee754_pow+0xc0>
 801671c:	f04f 0b02 	mov.w	fp, #2
 8016720:	e7c4      	b.n	80166ac <__ieee754_pow+0x94>
 8016722:	f04f 0b00 	mov.w	fp, #0
 8016726:	e7c1      	b.n	80166ac <__ieee754_pow+0x94>
 8016728:	f1b9 0f00 	cmp.w	r9, #0
 801672c:	dad2      	bge.n	80166d4 <__ieee754_pow+0xbc>
 801672e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016732:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016736:	e7cf      	b.n	80166d8 <__ieee754_pow+0xc0>
 8016738:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801673c:	d106      	bne.n	801674c <__ieee754_pow+0x134>
 801673e:	4632      	mov	r2, r6
 8016740:	463b      	mov	r3, r7
 8016742:	4610      	mov	r0, r2
 8016744:	4619      	mov	r1, r3
 8016746:	f7e9 ff67 	bl	8000618 <__aeabi_dmul>
 801674a:	e7c5      	b.n	80166d8 <__ieee754_pow+0xc0>
 801674c:	4b39      	ldr	r3, [pc, #228]	; (8016834 <__ieee754_pow+0x21c>)
 801674e:	4599      	cmp	r9, r3
 8016750:	d10a      	bne.n	8016768 <__ieee754_pow+0x150>
 8016752:	2d00      	cmp	r5, #0
 8016754:	db08      	blt.n	8016768 <__ieee754_pow+0x150>
 8016756:	ec47 6b10 	vmov	d0, r6, r7
 801675a:	b011      	add	sp, #68	; 0x44
 801675c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016760:	f000 bc68 	b.w	8017034 <__ieee754_sqrt>
 8016764:	f04f 0b00 	mov.w	fp, #0
 8016768:	ec47 6b10 	vmov	d0, r6, r7
 801676c:	f000 ffd5 	bl	801771a <fabs>
 8016770:	ec51 0b10 	vmov	r0, r1, d0
 8016774:	f1ba 0f00 	cmp.w	sl, #0
 8016778:	d127      	bne.n	80167ca <__ieee754_pow+0x1b2>
 801677a:	b124      	cbz	r4, 8016786 <__ieee754_pow+0x16e>
 801677c:	4b2c      	ldr	r3, [pc, #176]	; (8016830 <__ieee754_pow+0x218>)
 801677e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016782:	429a      	cmp	r2, r3
 8016784:	d121      	bne.n	80167ca <__ieee754_pow+0x1b2>
 8016786:	f1b9 0f00 	cmp.w	r9, #0
 801678a:	da05      	bge.n	8016798 <__ieee754_pow+0x180>
 801678c:	4602      	mov	r2, r0
 801678e:	460b      	mov	r3, r1
 8016790:	2000      	movs	r0, #0
 8016792:	4927      	ldr	r1, [pc, #156]	; (8016830 <__ieee754_pow+0x218>)
 8016794:	f7ea f86a 	bl	800086c <__aeabi_ddiv>
 8016798:	2d00      	cmp	r5, #0
 801679a:	da9d      	bge.n	80166d8 <__ieee754_pow+0xc0>
 801679c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80167a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167a4:	ea54 030b 	orrs.w	r3, r4, fp
 80167a8:	d108      	bne.n	80167bc <__ieee754_pow+0x1a4>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	4610      	mov	r0, r2
 80167b0:	4619      	mov	r1, r3
 80167b2:	f7e9 fd79 	bl	80002a8 <__aeabi_dsub>
 80167b6:	4602      	mov	r2, r0
 80167b8:	460b      	mov	r3, r1
 80167ba:	e7ac      	b.n	8016716 <__ieee754_pow+0xfe>
 80167bc:	f1bb 0f01 	cmp.w	fp, #1
 80167c0:	d18a      	bne.n	80166d8 <__ieee754_pow+0xc0>
 80167c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167c6:	4619      	mov	r1, r3
 80167c8:	e786      	b.n	80166d8 <__ieee754_pow+0xc0>
 80167ca:	0fed      	lsrs	r5, r5, #31
 80167cc:	1e6b      	subs	r3, r5, #1
 80167ce:	930d      	str	r3, [sp, #52]	; 0x34
 80167d0:	ea5b 0303 	orrs.w	r3, fp, r3
 80167d4:	d102      	bne.n	80167dc <__ieee754_pow+0x1c4>
 80167d6:	4632      	mov	r2, r6
 80167d8:	463b      	mov	r3, r7
 80167da:	e7e8      	b.n	80167ae <__ieee754_pow+0x196>
 80167dc:	4b16      	ldr	r3, [pc, #88]	; (8016838 <__ieee754_pow+0x220>)
 80167de:	4598      	cmp	r8, r3
 80167e0:	f340 80fe 	ble.w	80169e0 <__ieee754_pow+0x3c8>
 80167e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80167e8:	4598      	cmp	r8, r3
 80167ea:	dd0a      	ble.n	8016802 <__ieee754_pow+0x1ea>
 80167ec:	4b0f      	ldr	r3, [pc, #60]	; (801682c <__ieee754_pow+0x214>)
 80167ee:	429c      	cmp	r4, r3
 80167f0:	dc0d      	bgt.n	801680e <__ieee754_pow+0x1f6>
 80167f2:	f1b9 0f00 	cmp.w	r9, #0
 80167f6:	f6bf af6d 	bge.w	80166d4 <__ieee754_pow+0xbc>
 80167fa:	a307      	add	r3, pc, #28	; (adr r3, 8016818 <__ieee754_pow+0x200>)
 80167fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016800:	e79f      	b.n	8016742 <__ieee754_pow+0x12a>
 8016802:	4b0e      	ldr	r3, [pc, #56]	; (801683c <__ieee754_pow+0x224>)
 8016804:	429c      	cmp	r4, r3
 8016806:	ddf4      	ble.n	80167f2 <__ieee754_pow+0x1da>
 8016808:	4b09      	ldr	r3, [pc, #36]	; (8016830 <__ieee754_pow+0x218>)
 801680a:	429c      	cmp	r4, r3
 801680c:	dd18      	ble.n	8016840 <__ieee754_pow+0x228>
 801680e:	f1b9 0f00 	cmp.w	r9, #0
 8016812:	dcf2      	bgt.n	80167fa <__ieee754_pow+0x1e2>
 8016814:	e75e      	b.n	80166d4 <__ieee754_pow+0xbc>
 8016816:	bf00      	nop
 8016818:	8800759c 	.word	0x8800759c
 801681c:	7e37e43c 	.word	0x7e37e43c
 8016820:	7ff00000 	.word	0x7ff00000
 8016824:	08017f77 	.word	0x08017f77
 8016828:	433fffff 	.word	0x433fffff
 801682c:	3fefffff 	.word	0x3fefffff
 8016830:	3ff00000 	.word	0x3ff00000
 8016834:	3fe00000 	.word	0x3fe00000
 8016838:	41e00000 	.word	0x41e00000
 801683c:	3feffffe 	.word	0x3feffffe
 8016840:	2200      	movs	r2, #0
 8016842:	4b63      	ldr	r3, [pc, #396]	; (80169d0 <__ieee754_pow+0x3b8>)
 8016844:	f7e9 fd30 	bl	80002a8 <__aeabi_dsub>
 8016848:	a355      	add	r3, pc, #340	; (adr r3, 80169a0 <__ieee754_pow+0x388>)
 801684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801684e:	4604      	mov	r4, r0
 8016850:	460d      	mov	r5, r1
 8016852:	f7e9 fee1 	bl	8000618 <__aeabi_dmul>
 8016856:	a354      	add	r3, pc, #336	; (adr r3, 80169a8 <__ieee754_pow+0x390>)
 8016858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801685c:	4606      	mov	r6, r0
 801685e:	460f      	mov	r7, r1
 8016860:	4620      	mov	r0, r4
 8016862:	4629      	mov	r1, r5
 8016864:	f7e9 fed8 	bl	8000618 <__aeabi_dmul>
 8016868:	2200      	movs	r2, #0
 801686a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801686e:	4b59      	ldr	r3, [pc, #356]	; (80169d4 <__ieee754_pow+0x3bc>)
 8016870:	4620      	mov	r0, r4
 8016872:	4629      	mov	r1, r5
 8016874:	f7e9 fed0 	bl	8000618 <__aeabi_dmul>
 8016878:	4602      	mov	r2, r0
 801687a:	460b      	mov	r3, r1
 801687c:	a14c      	add	r1, pc, #304	; (adr r1, 80169b0 <__ieee754_pow+0x398>)
 801687e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016882:	f7e9 fd11 	bl	80002a8 <__aeabi_dsub>
 8016886:	4622      	mov	r2, r4
 8016888:	462b      	mov	r3, r5
 801688a:	f7e9 fec5 	bl	8000618 <__aeabi_dmul>
 801688e:	4602      	mov	r2, r0
 8016890:	460b      	mov	r3, r1
 8016892:	2000      	movs	r0, #0
 8016894:	4950      	ldr	r1, [pc, #320]	; (80169d8 <__ieee754_pow+0x3c0>)
 8016896:	f7e9 fd07 	bl	80002a8 <__aeabi_dsub>
 801689a:	4622      	mov	r2, r4
 801689c:	462b      	mov	r3, r5
 801689e:	4680      	mov	r8, r0
 80168a0:	4689      	mov	r9, r1
 80168a2:	4620      	mov	r0, r4
 80168a4:	4629      	mov	r1, r5
 80168a6:	f7e9 feb7 	bl	8000618 <__aeabi_dmul>
 80168aa:	4602      	mov	r2, r0
 80168ac:	460b      	mov	r3, r1
 80168ae:	4640      	mov	r0, r8
 80168b0:	4649      	mov	r1, r9
 80168b2:	f7e9 feb1 	bl	8000618 <__aeabi_dmul>
 80168b6:	a340      	add	r3, pc, #256	; (adr r3, 80169b8 <__ieee754_pow+0x3a0>)
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	f7e9 feac 	bl	8000618 <__aeabi_dmul>
 80168c0:	4602      	mov	r2, r0
 80168c2:	460b      	mov	r3, r1
 80168c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168c8:	f7e9 fcee 	bl	80002a8 <__aeabi_dsub>
 80168cc:	4602      	mov	r2, r0
 80168ce:	460b      	mov	r3, r1
 80168d0:	4604      	mov	r4, r0
 80168d2:	460d      	mov	r5, r1
 80168d4:	4630      	mov	r0, r6
 80168d6:	4639      	mov	r1, r7
 80168d8:	f7e9 fce8 	bl	80002ac <__adddf3>
 80168dc:	2000      	movs	r0, #0
 80168de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80168e2:	4632      	mov	r2, r6
 80168e4:	463b      	mov	r3, r7
 80168e6:	f7e9 fcdf 	bl	80002a8 <__aeabi_dsub>
 80168ea:	4602      	mov	r2, r0
 80168ec:	460b      	mov	r3, r1
 80168ee:	4620      	mov	r0, r4
 80168f0:	4629      	mov	r1, r5
 80168f2:	f7e9 fcd9 	bl	80002a8 <__aeabi_dsub>
 80168f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168f8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80168fc:	4313      	orrs	r3, r2
 80168fe:	4606      	mov	r6, r0
 8016900:	460f      	mov	r7, r1
 8016902:	f040 81eb 	bne.w	8016cdc <__ieee754_pow+0x6c4>
 8016906:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80169c0 <__ieee754_pow+0x3a8>
 801690a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801690e:	2400      	movs	r4, #0
 8016910:	4622      	mov	r2, r4
 8016912:	462b      	mov	r3, r5
 8016914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016918:	ed8d 7b02 	vstr	d7, [sp, #8]
 801691c:	f7e9 fcc4 	bl	80002a8 <__aeabi_dsub>
 8016920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016924:	f7e9 fe78 	bl	8000618 <__aeabi_dmul>
 8016928:	e9dd 2300 	ldrd	r2, r3, [sp]
 801692c:	4680      	mov	r8, r0
 801692e:	4689      	mov	r9, r1
 8016930:	4630      	mov	r0, r6
 8016932:	4639      	mov	r1, r7
 8016934:	f7e9 fe70 	bl	8000618 <__aeabi_dmul>
 8016938:	4602      	mov	r2, r0
 801693a:	460b      	mov	r3, r1
 801693c:	4640      	mov	r0, r8
 801693e:	4649      	mov	r1, r9
 8016940:	f7e9 fcb4 	bl	80002ac <__adddf3>
 8016944:	4622      	mov	r2, r4
 8016946:	462b      	mov	r3, r5
 8016948:	4680      	mov	r8, r0
 801694a:	4689      	mov	r9, r1
 801694c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016950:	f7e9 fe62 	bl	8000618 <__aeabi_dmul>
 8016954:	460b      	mov	r3, r1
 8016956:	4604      	mov	r4, r0
 8016958:	460d      	mov	r5, r1
 801695a:	4602      	mov	r2, r0
 801695c:	4649      	mov	r1, r9
 801695e:	4640      	mov	r0, r8
 8016960:	e9cd 4500 	strd	r4, r5, [sp]
 8016964:	f7e9 fca2 	bl	80002ac <__adddf3>
 8016968:	4b1c      	ldr	r3, [pc, #112]	; (80169dc <__ieee754_pow+0x3c4>)
 801696a:	4299      	cmp	r1, r3
 801696c:	4606      	mov	r6, r0
 801696e:	460f      	mov	r7, r1
 8016970:	468b      	mov	fp, r1
 8016972:	f340 82f7 	ble.w	8016f64 <__ieee754_pow+0x94c>
 8016976:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801697a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801697e:	4303      	orrs	r3, r0
 8016980:	f000 81ea 	beq.w	8016d58 <__ieee754_pow+0x740>
 8016984:	a310      	add	r3, pc, #64	; (adr r3, 80169c8 <__ieee754_pow+0x3b0>)
 8016986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801698a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801698e:	f7e9 fe43 	bl	8000618 <__aeabi_dmul>
 8016992:	a30d      	add	r3, pc, #52	; (adr r3, 80169c8 <__ieee754_pow+0x3b0>)
 8016994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016998:	e6d5      	b.n	8016746 <__ieee754_pow+0x12e>
 801699a:	bf00      	nop
 801699c:	f3af 8000 	nop.w
 80169a0:	60000000 	.word	0x60000000
 80169a4:	3ff71547 	.word	0x3ff71547
 80169a8:	f85ddf44 	.word	0xf85ddf44
 80169ac:	3e54ae0b 	.word	0x3e54ae0b
 80169b0:	55555555 	.word	0x55555555
 80169b4:	3fd55555 	.word	0x3fd55555
 80169b8:	652b82fe 	.word	0x652b82fe
 80169bc:	3ff71547 	.word	0x3ff71547
 80169c0:	00000000 	.word	0x00000000
 80169c4:	bff00000 	.word	0xbff00000
 80169c8:	8800759c 	.word	0x8800759c
 80169cc:	7e37e43c 	.word	0x7e37e43c
 80169d0:	3ff00000 	.word	0x3ff00000
 80169d4:	3fd00000 	.word	0x3fd00000
 80169d8:	3fe00000 	.word	0x3fe00000
 80169dc:	408fffff 	.word	0x408fffff
 80169e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80169e4:	f04f 0200 	mov.w	r2, #0
 80169e8:	da05      	bge.n	80169f6 <__ieee754_pow+0x3de>
 80169ea:	4bd3      	ldr	r3, [pc, #844]	; (8016d38 <__ieee754_pow+0x720>)
 80169ec:	f7e9 fe14 	bl	8000618 <__aeabi_dmul>
 80169f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80169f4:	460c      	mov	r4, r1
 80169f6:	1523      	asrs	r3, r4, #20
 80169f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80169fc:	4413      	add	r3, r2
 80169fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016a00:	4bce      	ldr	r3, [pc, #824]	; (8016d3c <__ieee754_pow+0x724>)
 8016a02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016a06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016a0a:	429c      	cmp	r4, r3
 8016a0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a10:	dd08      	ble.n	8016a24 <__ieee754_pow+0x40c>
 8016a12:	4bcb      	ldr	r3, [pc, #812]	; (8016d40 <__ieee754_pow+0x728>)
 8016a14:	429c      	cmp	r4, r3
 8016a16:	f340 815e 	ble.w	8016cd6 <__ieee754_pow+0x6be>
 8016a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016a24:	f04f 0a00 	mov.w	sl, #0
 8016a28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016a2c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a30:	4bc4      	ldr	r3, [pc, #784]	; (8016d44 <__ieee754_pow+0x72c>)
 8016a32:	4413      	add	r3, r2
 8016a34:	ed93 7b00 	vldr	d7, [r3]
 8016a38:	4629      	mov	r1, r5
 8016a3a:	ec53 2b17 	vmov	r2, r3, d7
 8016a3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016a42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a46:	f7e9 fc2f 	bl	80002a8 <__aeabi_dsub>
 8016a4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a4e:	4606      	mov	r6, r0
 8016a50:	460f      	mov	r7, r1
 8016a52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a56:	f7e9 fc29 	bl	80002ac <__adddf3>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	2000      	movs	r0, #0
 8016a60:	49b9      	ldr	r1, [pc, #740]	; (8016d48 <__ieee754_pow+0x730>)
 8016a62:	f7e9 ff03 	bl	800086c <__aeabi_ddiv>
 8016a66:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016a6a:	4602      	mov	r2, r0
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	4630      	mov	r0, r6
 8016a70:	4639      	mov	r1, r7
 8016a72:	f7e9 fdd1 	bl	8000618 <__aeabi_dmul>
 8016a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016a7a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016a82:	2300      	movs	r3, #0
 8016a84:	9302      	str	r3, [sp, #8]
 8016a86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016a8a:	106d      	asrs	r5, r5, #1
 8016a8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016a90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016a94:	2200      	movs	r2, #0
 8016a96:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016a9a:	4640      	mov	r0, r8
 8016a9c:	4649      	mov	r1, r9
 8016a9e:	4614      	mov	r4, r2
 8016aa0:	461d      	mov	r5, r3
 8016aa2:	f7e9 fdb9 	bl	8000618 <__aeabi_dmul>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	460b      	mov	r3, r1
 8016aaa:	4630      	mov	r0, r6
 8016aac:	4639      	mov	r1, r7
 8016aae:	f7e9 fbfb 	bl	80002a8 <__aeabi_dsub>
 8016ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	460f      	mov	r7, r1
 8016aba:	4620      	mov	r0, r4
 8016abc:	4629      	mov	r1, r5
 8016abe:	f7e9 fbf3 	bl	80002a8 <__aeabi_dsub>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016aca:	f7e9 fbed 	bl	80002a8 <__aeabi_dsub>
 8016ace:	4642      	mov	r2, r8
 8016ad0:	464b      	mov	r3, r9
 8016ad2:	f7e9 fda1 	bl	8000618 <__aeabi_dmul>
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	460b      	mov	r3, r1
 8016ada:	4630      	mov	r0, r6
 8016adc:	4639      	mov	r1, r7
 8016ade:	f7e9 fbe3 	bl	80002a8 <__aeabi_dsub>
 8016ae2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016ae6:	f7e9 fd97 	bl	8000618 <__aeabi_dmul>
 8016aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016aee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016af2:	4610      	mov	r0, r2
 8016af4:	4619      	mov	r1, r3
 8016af6:	f7e9 fd8f 	bl	8000618 <__aeabi_dmul>
 8016afa:	a37b      	add	r3, pc, #492	; (adr r3, 8016ce8 <__ieee754_pow+0x6d0>)
 8016afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b00:	4604      	mov	r4, r0
 8016b02:	460d      	mov	r5, r1
 8016b04:	f7e9 fd88 	bl	8000618 <__aeabi_dmul>
 8016b08:	a379      	add	r3, pc, #484	; (adr r3, 8016cf0 <__ieee754_pow+0x6d8>)
 8016b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0e:	f7e9 fbcd 	bl	80002ac <__adddf3>
 8016b12:	4622      	mov	r2, r4
 8016b14:	462b      	mov	r3, r5
 8016b16:	f7e9 fd7f 	bl	8000618 <__aeabi_dmul>
 8016b1a:	a377      	add	r3, pc, #476	; (adr r3, 8016cf8 <__ieee754_pow+0x6e0>)
 8016b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b20:	f7e9 fbc4 	bl	80002ac <__adddf3>
 8016b24:	4622      	mov	r2, r4
 8016b26:	462b      	mov	r3, r5
 8016b28:	f7e9 fd76 	bl	8000618 <__aeabi_dmul>
 8016b2c:	a374      	add	r3, pc, #464	; (adr r3, 8016d00 <__ieee754_pow+0x6e8>)
 8016b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b32:	f7e9 fbbb 	bl	80002ac <__adddf3>
 8016b36:	4622      	mov	r2, r4
 8016b38:	462b      	mov	r3, r5
 8016b3a:	f7e9 fd6d 	bl	8000618 <__aeabi_dmul>
 8016b3e:	a372      	add	r3, pc, #456	; (adr r3, 8016d08 <__ieee754_pow+0x6f0>)
 8016b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b44:	f7e9 fbb2 	bl	80002ac <__adddf3>
 8016b48:	4622      	mov	r2, r4
 8016b4a:	462b      	mov	r3, r5
 8016b4c:	f7e9 fd64 	bl	8000618 <__aeabi_dmul>
 8016b50:	a36f      	add	r3, pc, #444	; (adr r3, 8016d10 <__ieee754_pow+0x6f8>)
 8016b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b56:	f7e9 fba9 	bl	80002ac <__adddf3>
 8016b5a:	4622      	mov	r2, r4
 8016b5c:	4606      	mov	r6, r0
 8016b5e:	460f      	mov	r7, r1
 8016b60:	462b      	mov	r3, r5
 8016b62:	4620      	mov	r0, r4
 8016b64:	4629      	mov	r1, r5
 8016b66:	f7e9 fd57 	bl	8000618 <__aeabi_dmul>
 8016b6a:	4602      	mov	r2, r0
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	4630      	mov	r0, r6
 8016b70:	4639      	mov	r1, r7
 8016b72:	f7e9 fd51 	bl	8000618 <__aeabi_dmul>
 8016b76:	4642      	mov	r2, r8
 8016b78:	4604      	mov	r4, r0
 8016b7a:	460d      	mov	r5, r1
 8016b7c:	464b      	mov	r3, r9
 8016b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b82:	f7e9 fb93 	bl	80002ac <__adddf3>
 8016b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016b8a:	f7e9 fd45 	bl	8000618 <__aeabi_dmul>
 8016b8e:	4622      	mov	r2, r4
 8016b90:	462b      	mov	r3, r5
 8016b92:	f7e9 fb8b 	bl	80002ac <__adddf3>
 8016b96:	4642      	mov	r2, r8
 8016b98:	4606      	mov	r6, r0
 8016b9a:	460f      	mov	r7, r1
 8016b9c:	464b      	mov	r3, r9
 8016b9e:	4640      	mov	r0, r8
 8016ba0:	4649      	mov	r1, r9
 8016ba2:	f7e9 fd39 	bl	8000618 <__aeabi_dmul>
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	4b68      	ldr	r3, [pc, #416]	; (8016d4c <__ieee754_pow+0x734>)
 8016baa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016bae:	f7e9 fb7d 	bl	80002ac <__adddf3>
 8016bb2:	4632      	mov	r2, r6
 8016bb4:	463b      	mov	r3, r7
 8016bb6:	f7e9 fb79 	bl	80002ac <__adddf3>
 8016bba:	9802      	ldr	r0, [sp, #8]
 8016bbc:	460d      	mov	r5, r1
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	4640      	mov	r0, r8
 8016bc6:	4649      	mov	r1, r9
 8016bc8:	f7e9 fd26 	bl	8000618 <__aeabi_dmul>
 8016bcc:	2200      	movs	r2, #0
 8016bce:	4680      	mov	r8, r0
 8016bd0:	4689      	mov	r9, r1
 8016bd2:	4b5e      	ldr	r3, [pc, #376]	; (8016d4c <__ieee754_pow+0x734>)
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	4629      	mov	r1, r5
 8016bd8:	f7e9 fb66 	bl	80002a8 <__aeabi_dsub>
 8016bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016be0:	f7e9 fb62 	bl	80002a8 <__aeabi_dsub>
 8016be4:	4602      	mov	r2, r0
 8016be6:	460b      	mov	r3, r1
 8016be8:	4630      	mov	r0, r6
 8016bea:	4639      	mov	r1, r7
 8016bec:	f7e9 fb5c 	bl	80002a8 <__aeabi_dsub>
 8016bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016bf4:	f7e9 fd10 	bl	8000618 <__aeabi_dmul>
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	460f      	mov	r7, r1
 8016bfe:	462b      	mov	r3, r5
 8016c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c04:	f7e9 fd08 	bl	8000618 <__aeabi_dmul>
 8016c08:	4602      	mov	r2, r0
 8016c0a:	460b      	mov	r3, r1
 8016c0c:	4630      	mov	r0, r6
 8016c0e:	4639      	mov	r1, r7
 8016c10:	f7e9 fb4c 	bl	80002ac <__adddf3>
 8016c14:	4606      	mov	r6, r0
 8016c16:	460f      	mov	r7, r1
 8016c18:	4602      	mov	r2, r0
 8016c1a:	460b      	mov	r3, r1
 8016c1c:	4640      	mov	r0, r8
 8016c1e:	4649      	mov	r1, r9
 8016c20:	f7e9 fb44 	bl	80002ac <__adddf3>
 8016c24:	9802      	ldr	r0, [sp, #8]
 8016c26:	a33c      	add	r3, pc, #240	; (adr r3, 8016d18 <__ieee754_pow+0x700>)
 8016c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	460d      	mov	r5, r1
 8016c30:	f7e9 fcf2 	bl	8000618 <__aeabi_dmul>
 8016c34:	4642      	mov	r2, r8
 8016c36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016c3a:	464b      	mov	r3, r9
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	4629      	mov	r1, r5
 8016c40:	f7e9 fb32 	bl	80002a8 <__aeabi_dsub>
 8016c44:	4602      	mov	r2, r0
 8016c46:	460b      	mov	r3, r1
 8016c48:	4630      	mov	r0, r6
 8016c4a:	4639      	mov	r1, r7
 8016c4c:	f7e9 fb2c 	bl	80002a8 <__aeabi_dsub>
 8016c50:	a333      	add	r3, pc, #204	; (adr r3, 8016d20 <__ieee754_pow+0x708>)
 8016c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c56:	f7e9 fcdf 	bl	8000618 <__aeabi_dmul>
 8016c5a:	a333      	add	r3, pc, #204	; (adr r3, 8016d28 <__ieee754_pow+0x710>)
 8016c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c60:	4606      	mov	r6, r0
 8016c62:	460f      	mov	r7, r1
 8016c64:	4620      	mov	r0, r4
 8016c66:	4629      	mov	r1, r5
 8016c68:	f7e9 fcd6 	bl	8000618 <__aeabi_dmul>
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	460b      	mov	r3, r1
 8016c70:	4630      	mov	r0, r6
 8016c72:	4639      	mov	r1, r7
 8016c74:	f7e9 fb1a 	bl	80002ac <__adddf3>
 8016c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c7a:	4b35      	ldr	r3, [pc, #212]	; (8016d50 <__ieee754_pow+0x738>)
 8016c7c:	4413      	add	r3, r2
 8016c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c82:	f7e9 fb13 	bl	80002ac <__adddf3>
 8016c86:	4604      	mov	r4, r0
 8016c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c8a:	460d      	mov	r5, r1
 8016c8c:	f7e9 fc5a 	bl	8000544 <__aeabi_i2d>
 8016c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c92:	4b30      	ldr	r3, [pc, #192]	; (8016d54 <__ieee754_pow+0x73c>)
 8016c94:	4413      	add	r3, r2
 8016c96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	460f      	mov	r7, r1
 8016c9e:	4622      	mov	r2, r4
 8016ca0:	462b      	mov	r3, r5
 8016ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016ca6:	f7e9 fb01 	bl	80002ac <__adddf3>
 8016caa:	4642      	mov	r2, r8
 8016cac:	464b      	mov	r3, r9
 8016cae:	f7e9 fafd 	bl	80002ac <__adddf3>
 8016cb2:	4632      	mov	r2, r6
 8016cb4:	463b      	mov	r3, r7
 8016cb6:	f7e9 faf9 	bl	80002ac <__adddf3>
 8016cba:	9802      	ldr	r0, [sp, #8]
 8016cbc:	4632      	mov	r2, r6
 8016cbe:	463b      	mov	r3, r7
 8016cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016cc4:	f7e9 faf0 	bl	80002a8 <__aeabi_dsub>
 8016cc8:	4642      	mov	r2, r8
 8016cca:	464b      	mov	r3, r9
 8016ccc:	f7e9 faec 	bl	80002a8 <__aeabi_dsub>
 8016cd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016cd4:	e607      	b.n	80168e6 <__ieee754_pow+0x2ce>
 8016cd6:	f04f 0a01 	mov.w	sl, #1
 8016cda:	e6a5      	b.n	8016a28 <__ieee754_pow+0x410>
 8016cdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016d30 <__ieee754_pow+0x718>
 8016ce0:	e613      	b.n	801690a <__ieee754_pow+0x2f2>
 8016ce2:	bf00      	nop
 8016ce4:	f3af 8000 	nop.w
 8016ce8:	4a454eef 	.word	0x4a454eef
 8016cec:	3fca7e28 	.word	0x3fca7e28
 8016cf0:	93c9db65 	.word	0x93c9db65
 8016cf4:	3fcd864a 	.word	0x3fcd864a
 8016cf8:	a91d4101 	.word	0xa91d4101
 8016cfc:	3fd17460 	.word	0x3fd17460
 8016d00:	518f264d 	.word	0x518f264d
 8016d04:	3fd55555 	.word	0x3fd55555
 8016d08:	db6fabff 	.word	0xdb6fabff
 8016d0c:	3fdb6db6 	.word	0x3fdb6db6
 8016d10:	33333303 	.word	0x33333303
 8016d14:	3fe33333 	.word	0x3fe33333
 8016d18:	e0000000 	.word	0xe0000000
 8016d1c:	3feec709 	.word	0x3feec709
 8016d20:	dc3a03fd 	.word	0xdc3a03fd
 8016d24:	3feec709 	.word	0x3feec709
 8016d28:	145b01f5 	.word	0x145b01f5
 8016d2c:	be3e2fe0 	.word	0xbe3e2fe0
 8016d30:	00000000 	.word	0x00000000
 8016d34:	3ff00000 	.word	0x3ff00000
 8016d38:	43400000 	.word	0x43400000
 8016d3c:	0003988e 	.word	0x0003988e
 8016d40:	000bb679 	.word	0x000bb679
 8016d44:	08018128 	.word	0x08018128
 8016d48:	3ff00000 	.word	0x3ff00000
 8016d4c:	40080000 	.word	0x40080000
 8016d50:	08018148 	.word	0x08018148
 8016d54:	08018138 	.word	0x08018138
 8016d58:	a3b4      	add	r3, pc, #720	; (adr r3, 801702c <__ieee754_pow+0xa14>)
 8016d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d5e:	4640      	mov	r0, r8
 8016d60:	4649      	mov	r1, r9
 8016d62:	f7e9 faa3 	bl	80002ac <__adddf3>
 8016d66:	4622      	mov	r2, r4
 8016d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d6c:	462b      	mov	r3, r5
 8016d6e:	4630      	mov	r0, r6
 8016d70:	4639      	mov	r1, r7
 8016d72:	f7e9 fa99 	bl	80002a8 <__aeabi_dsub>
 8016d76:	4602      	mov	r2, r0
 8016d78:	460b      	mov	r3, r1
 8016d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016d7e:	f7e9 fedb 	bl	8000b38 <__aeabi_dcmpgt>
 8016d82:	2800      	cmp	r0, #0
 8016d84:	f47f adfe 	bne.w	8016984 <__ieee754_pow+0x36c>
 8016d88:	4aa3      	ldr	r2, [pc, #652]	; (8017018 <__ieee754_pow+0xa00>)
 8016d8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d8e:	4293      	cmp	r3, r2
 8016d90:	f340 810a 	ble.w	8016fa8 <__ieee754_pow+0x990>
 8016d94:	151b      	asrs	r3, r3, #20
 8016d96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016d9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016d9e:	fa4a f303 	asr.w	r3, sl, r3
 8016da2:	445b      	add	r3, fp
 8016da4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016da8:	4e9c      	ldr	r6, [pc, #624]	; (801701c <__ieee754_pow+0xa04>)
 8016daa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016dae:	4116      	asrs	r6, r2
 8016db0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016db4:	2000      	movs	r0, #0
 8016db6:	ea23 0106 	bic.w	r1, r3, r6
 8016dba:	f1c2 0214 	rsb	r2, r2, #20
 8016dbe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016dc2:	fa4a fa02 	asr.w	sl, sl, r2
 8016dc6:	f1bb 0f00 	cmp.w	fp, #0
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	4620      	mov	r0, r4
 8016dd0:	4629      	mov	r1, r5
 8016dd2:	bfb8      	it	lt
 8016dd4:	f1ca 0a00 	rsblt	sl, sl, #0
 8016dd8:	f7e9 fa66 	bl	80002a8 <__aeabi_dsub>
 8016ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8016de0:	4642      	mov	r2, r8
 8016de2:	464b      	mov	r3, r9
 8016de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016de8:	f7e9 fa60 	bl	80002ac <__adddf3>
 8016dec:	2000      	movs	r0, #0
 8016dee:	a378      	add	r3, pc, #480	; (adr r3, 8016fd0 <__ieee754_pow+0x9b8>)
 8016df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df4:	4604      	mov	r4, r0
 8016df6:	460d      	mov	r5, r1
 8016df8:	f7e9 fc0e 	bl	8000618 <__aeabi_dmul>
 8016dfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e00:	4606      	mov	r6, r0
 8016e02:	460f      	mov	r7, r1
 8016e04:	4620      	mov	r0, r4
 8016e06:	4629      	mov	r1, r5
 8016e08:	f7e9 fa4e 	bl	80002a8 <__aeabi_dsub>
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	460b      	mov	r3, r1
 8016e10:	4640      	mov	r0, r8
 8016e12:	4649      	mov	r1, r9
 8016e14:	f7e9 fa48 	bl	80002a8 <__aeabi_dsub>
 8016e18:	a36f      	add	r3, pc, #444	; (adr r3, 8016fd8 <__ieee754_pow+0x9c0>)
 8016e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e1e:	f7e9 fbfb 	bl	8000618 <__aeabi_dmul>
 8016e22:	a36f      	add	r3, pc, #444	; (adr r3, 8016fe0 <__ieee754_pow+0x9c8>)
 8016e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e28:	4680      	mov	r8, r0
 8016e2a:	4689      	mov	r9, r1
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	4629      	mov	r1, r5
 8016e30:	f7e9 fbf2 	bl	8000618 <__aeabi_dmul>
 8016e34:	4602      	mov	r2, r0
 8016e36:	460b      	mov	r3, r1
 8016e38:	4640      	mov	r0, r8
 8016e3a:	4649      	mov	r1, r9
 8016e3c:	f7e9 fa36 	bl	80002ac <__adddf3>
 8016e40:	4604      	mov	r4, r0
 8016e42:	460d      	mov	r5, r1
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	4630      	mov	r0, r6
 8016e4a:	4639      	mov	r1, r7
 8016e4c:	f7e9 fa2e 	bl	80002ac <__adddf3>
 8016e50:	4632      	mov	r2, r6
 8016e52:	463b      	mov	r3, r7
 8016e54:	4680      	mov	r8, r0
 8016e56:	4689      	mov	r9, r1
 8016e58:	f7e9 fa26 	bl	80002a8 <__aeabi_dsub>
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	460b      	mov	r3, r1
 8016e60:	4620      	mov	r0, r4
 8016e62:	4629      	mov	r1, r5
 8016e64:	f7e9 fa20 	bl	80002a8 <__aeabi_dsub>
 8016e68:	4642      	mov	r2, r8
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	460f      	mov	r7, r1
 8016e6e:	464b      	mov	r3, r9
 8016e70:	4640      	mov	r0, r8
 8016e72:	4649      	mov	r1, r9
 8016e74:	f7e9 fbd0 	bl	8000618 <__aeabi_dmul>
 8016e78:	a35b      	add	r3, pc, #364	; (adr r3, 8016fe8 <__ieee754_pow+0x9d0>)
 8016e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7e:	4604      	mov	r4, r0
 8016e80:	460d      	mov	r5, r1
 8016e82:	f7e9 fbc9 	bl	8000618 <__aeabi_dmul>
 8016e86:	a35a      	add	r3, pc, #360	; (adr r3, 8016ff0 <__ieee754_pow+0x9d8>)
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	f7e9 fa0c 	bl	80002a8 <__aeabi_dsub>
 8016e90:	4622      	mov	r2, r4
 8016e92:	462b      	mov	r3, r5
 8016e94:	f7e9 fbc0 	bl	8000618 <__aeabi_dmul>
 8016e98:	a357      	add	r3, pc, #348	; (adr r3, 8016ff8 <__ieee754_pow+0x9e0>)
 8016e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9e:	f7e9 fa05 	bl	80002ac <__adddf3>
 8016ea2:	4622      	mov	r2, r4
 8016ea4:	462b      	mov	r3, r5
 8016ea6:	f7e9 fbb7 	bl	8000618 <__aeabi_dmul>
 8016eaa:	a355      	add	r3, pc, #340	; (adr r3, 8017000 <__ieee754_pow+0x9e8>)
 8016eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb0:	f7e9 f9fa 	bl	80002a8 <__aeabi_dsub>
 8016eb4:	4622      	mov	r2, r4
 8016eb6:	462b      	mov	r3, r5
 8016eb8:	f7e9 fbae 	bl	8000618 <__aeabi_dmul>
 8016ebc:	a352      	add	r3, pc, #328	; (adr r3, 8017008 <__ieee754_pow+0x9f0>)
 8016ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec2:	f7e9 f9f3 	bl	80002ac <__adddf3>
 8016ec6:	4622      	mov	r2, r4
 8016ec8:	462b      	mov	r3, r5
 8016eca:	f7e9 fba5 	bl	8000618 <__aeabi_dmul>
 8016ece:	4602      	mov	r2, r0
 8016ed0:	460b      	mov	r3, r1
 8016ed2:	4640      	mov	r0, r8
 8016ed4:	4649      	mov	r1, r9
 8016ed6:	f7e9 f9e7 	bl	80002a8 <__aeabi_dsub>
 8016eda:	4604      	mov	r4, r0
 8016edc:	460d      	mov	r5, r1
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	4640      	mov	r0, r8
 8016ee4:	4649      	mov	r1, r9
 8016ee6:	f7e9 fb97 	bl	8000618 <__aeabi_dmul>
 8016eea:	2200      	movs	r2, #0
 8016eec:	e9cd 0100 	strd	r0, r1, [sp]
 8016ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	4629      	mov	r1, r5
 8016ef8:	f7e9 f9d6 	bl	80002a8 <__aeabi_dsub>
 8016efc:	4602      	mov	r2, r0
 8016efe:	460b      	mov	r3, r1
 8016f00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f04:	f7e9 fcb2 	bl	800086c <__aeabi_ddiv>
 8016f08:	4632      	mov	r2, r6
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	460d      	mov	r5, r1
 8016f0e:	463b      	mov	r3, r7
 8016f10:	4640      	mov	r0, r8
 8016f12:	4649      	mov	r1, r9
 8016f14:	f7e9 fb80 	bl	8000618 <__aeabi_dmul>
 8016f18:	4632      	mov	r2, r6
 8016f1a:	463b      	mov	r3, r7
 8016f1c:	f7e9 f9c6 	bl	80002ac <__adddf3>
 8016f20:	4602      	mov	r2, r0
 8016f22:	460b      	mov	r3, r1
 8016f24:	4620      	mov	r0, r4
 8016f26:	4629      	mov	r1, r5
 8016f28:	f7e9 f9be 	bl	80002a8 <__aeabi_dsub>
 8016f2c:	4642      	mov	r2, r8
 8016f2e:	464b      	mov	r3, r9
 8016f30:	f7e9 f9ba 	bl	80002a8 <__aeabi_dsub>
 8016f34:	4602      	mov	r2, r0
 8016f36:	460b      	mov	r3, r1
 8016f38:	2000      	movs	r0, #0
 8016f3a:	4939      	ldr	r1, [pc, #228]	; (8017020 <__ieee754_pow+0xa08>)
 8016f3c:	f7e9 f9b4 	bl	80002a8 <__aeabi_dsub>
 8016f40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016f44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016f48:	4602      	mov	r2, r0
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	da2f      	bge.n	8016fae <__ieee754_pow+0x996>
 8016f4e:	4650      	mov	r0, sl
 8016f50:	ec43 2b10 	vmov	d0, r2, r3
 8016f54:	f000 fc80 	bl	8017858 <scalbn>
 8016f58:	ec51 0b10 	vmov	r0, r1, d0
 8016f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016f60:	f7ff bbf1 	b.w	8016746 <__ieee754_pow+0x12e>
 8016f64:	4b2f      	ldr	r3, [pc, #188]	; (8017024 <__ieee754_pow+0xa0c>)
 8016f66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016f6a:	429e      	cmp	r6, r3
 8016f6c:	f77f af0c 	ble.w	8016d88 <__ieee754_pow+0x770>
 8016f70:	4b2d      	ldr	r3, [pc, #180]	; (8017028 <__ieee754_pow+0xa10>)
 8016f72:	440b      	add	r3, r1
 8016f74:	4303      	orrs	r3, r0
 8016f76:	d00b      	beq.n	8016f90 <__ieee754_pow+0x978>
 8016f78:	a325      	add	r3, pc, #148	; (adr r3, 8017010 <__ieee754_pow+0x9f8>)
 8016f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f82:	f7e9 fb49 	bl	8000618 <__aeabi_dmul>
 8016f86:	a322      	add	r3, pc, #136	; (adr r3, 8017010 <__ieee754_pow+0x9f8>)
 8016f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f8c:	f7ff bbdb 	b.w	8016746 <__ieee754_pow+0x12e>
 8016f90:	4622      	mov	r2, r4
 8016f92:	462b      	mov	r3, r5
 8016f94:	f7e9 f988 	bl	80002a8 <__aeabi_dsub>
 8016f98:	4642      	mov	r2, r8
 8016f9a:	464b      	mov	r3, r9
 8016f9c:	f7e9 fdc2 	bl	8000b24 <__aeabi_dcmpge>
 8016fa0:	2800      	cmp	r0, #0
 8016fa2:	f43f aef1 	beq.w	8016d88 <__ieee754_pow+0x770>
 8016fa6:	e7e7      	b.n	8016f78 <__ieee754_pow+0x960>
 8016fa8:	f04f 0a00 	mov.w	sl, #0
 8016fac:	e718      	b.n	8016de0 <__ieee754_pow+0x7c8>
 8016fae:	4621      	mov	r1, r4
 8016fb0:	e7d4      	b.n	8016f5c <__ieee754_pow+0x944>
 8016fb2:	2000      	movs	r0, #0
 8016fb4:	491a      	ldr	r1, [pc, #104]	; (8017020 <__ieee754_pow+0xa08>)
 8016fb6:	f7ff bb8f 	b.w	80166d8 <__ieee754_pow+0xc0>
 8016fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016fbe:	f7ff bb8b 	b.w	80166d8 <__ieee754_pow+0xc0>
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	4639      	mov	r1, r7
 8016fc6:	f7ff bb87 	b.w	80166d8 <__ieee754_pow+0xc0>
 8016fca:	4693      	mov	fp, r2
 8016fcc:	f7ff bb98 	b.w	8016700 <__ieee754_pow+0xe8>
 8016fd0:	00000000 	.word	0x00000000
 8016fd4:	3fe62e43 	.word	0x3fe62e43
 8016fd8:	fefa39ef 	.word	0xfefa39ef
 8016fdc:	3fe62e42 	.word	0x3fe62e42
 8016fe0:	0ca86c39 	.word	0x0ca86c39
 8016fe4:	be205c61 	.word	0xbe205c61
 8016fe8:	72bea4d0 	.word	0x72bea4d0
 8016fec:	3e663769 	.word	0x3e663769
 8016ff0:	c5d26bf1 	.word	0xc5d26bf1
 8016ff4:	3ebbbd41 	.word	0x3ebbbd41
 8016ff8:	af25de2c 	.word	0xaf25de2c
 8016ffc:	3f11566a 	.word	0x3f11566a
 8017000:	16bebd93 	.word	0x16bebd93
 8017004:	3f66c16c 	.word	0x3f66c16c
 8017008:	5555553e 	.word	0x5555553e
 801700c:	3fc55555 	.word	0x3fc55555
 8017010:	c2f8f359 	.word	0xc2f8f359
 8017014:	01a56e1f 	.word	0x01a56e1f
 8017018:	3fe00000 	.word	0x3fe00000
 801701c:	000fffff 	.word	0x000fffff
 8017020:	3ff00000 	.word	0x3ff00000
 8017024:	4090cbff 	.word	0x4090cbff
 8017028:	3f6f3400 	.word	0x3f6f3400
 801702c:	652b82fe 	.word	0x652b82fe
 8017030:	3c971547 	.word	0x3c971547

08017034 <__ieee754_sqrt>:
 8017034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017038:	4955      	ldr	r1, [pc, #340]	; (8017190 <__ieee754_sqrt+0x15c>)
 801703a:	ec55 4b10 	vmov	r4, r5, d0
 801703e:	43a9      	bics	r1, r5
 8017040:	462b      	mov	r3, r5
 8017042:	462a      	mov	r2, r5
 8017044:	d112      	bne.n	801706c <__ieee754_sqrt+0x38>
 8017046:	ee10 2a10 	vmov	r2, s0
 801704a:	ee10 0a10 	vmov	r0, s0
 801704e:	4629      	mov	r1, r5
 8017050:	f7e9 fae2 	bl	8000618 <__aeabi_dmul>
 8017054:	4602      	mov	r2, r0
 8017056:	460b      	mov	r3, r1
 8017058:	4620      	mov	r0, r4
 801705a:	4629      	mov	r1, r5
 801705c:	f7e9 f926 	bl	80002ac <__adddf3>
 8017060:	4604      	mov	r4, r0
 8017062:	460d      	mov	r5, r1
 8017064:	ec45 4b10 	vmov	d0, r4, r5
 8017068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801706c:	2d00      	cmp	r5, #0
 801706e:	ee10 0a10 	vmov	r0, s0
 8017072:	4621      	mov	r1, r4
 8017074:	dc0f      	bgt.n	8017096 <__ieee754_sqrt+0x62>
 8017076:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801707a:	4330      	orrs	r0, r6
 801707c:	d0f2      	beq.n	8017064 <__ieee754_sqrt+0x30>
 801707e:	b155      	cbz	r5, 8017096 <__ieee754_sqrt+0x62>
 8017080:	ee10 2a10 	vmov	r2, s0
 8017084:	4620      	mov	r0, r4
 8017086:	4629      	mov	r1, r5
 8017088:	f7e9 f90e 	bl	80002a8 <__aeabi_dsub>
 801708c:	4602      	mov	r2, r0
 801708e:	460b      	mov	r3, r1
 8017090:	f7e9 fbec 	bl	800086c <__aeabi_ddiv>
 8017094:	e7e4      	b.n	8017060 <__ieee754_sqrt+0x2c>
 8017096:	151b      	asrs	r3, r3, #20
 8017098:	d073      	beq.n	8017182 <__ieee754_sqrt+0x14e>
 801709a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801709e:	07dd      	lsls	r5, r3, #31
 80170a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80170a4:	bf48      	it	mi
 80170a6:	0fc8      	lsrmi	r0, r1, #31
 80170a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80170ac:	bf44      	itt	mi
 80170ae:	0049      	lslmi	r1, r1, #1
 80170b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80170b4:	2500      	movs	r5, #0
 80170b6:	1058      	asrs	r0, r3, #1
 80170b8:	0fcb      	lsrs	r3, r1, #31
 80170ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80170be:	0049      	lsls	r1, r1, #1
 80170c0:	2316      	movs	r3, #22
 80170c2:	462c      	mov	r4, r5
 80170c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80170c8:	19a7      	adds	r7, r4, r6
 80170ca:	4297      	cmp	r7, r2
 80170cc:	bfde      	ittt	le
 80170ce:	19bc      	addle	r4, r7, r6
 80170d0:	1bd2      	suble	r2, r2, r7
 80170d2:	19ad      	addle	r5, r5, r6
 80170d4:	0fcf      	lsrs	r7, r1, #31
 80170d6:	3b01      	subs	r3, #1
 80170d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80170dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80170e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80170e4:	d1f0      	bne.n	80170c8 <__ieee754_sqrt+0x94>
 80170e6:	f04f 0c20 	mov.w	ip, #32
 80170ea:	469e      	mov	lr, r3
 80170ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80170f0:	42a2      	cmp	r2, r4
 80170f2:	eb06 070e 	add.w	r7, r6, lr
 80170f6:	dc02      	bgt.n	80170fe <__ieee754_sqrt+0xca>
 80170f8:	d112      	bne.n	8017120 <__ieee754_sqrt+0xec>
 80170fa:	428f      	cmp	r7, r1
 80170fc:	d810      	bhi.n	8017120 <__ieee754_sqrt+0xec>
 80170fe:	2f00      	cmp	r7, #0
 8017100:	eb07 0e06 	add.w	lr, r7, r6
 8017104:	da42      	bge.n	801718c <__ieee754_sqrt+0x158>
 8017106:	f1be 0f00 	cmp.w	lr, #0
 801710a:	db3f      	blt.n	801718c <__ieee754_sqrt+0x158>
 801710c:	f104 0801 	add.w	r8, r4, #1
 8017110:	1b12      	subs	r2, r2, r4
 8017112:	428f      	cmp	r7, r1
 8017114:	bf88      	it	hi
 8017116:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801711a:	1bc9      	subs	r1, r1, r7
 801711c:	4433      	add	r3, r6
 801711e:	4644      	mov	r4, r8
 8017120:	0052      	lsls	r2, r2, #1
 8017122:	f1bc 0c01 	subs.w	ip, ip, #1
 8017126:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801712a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801712e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017132:	d1dd      	bne.n	80170f0 <__ieee754_sqrt+0xbc>
 8017134:	430a      	orrs	r2, r1
 8017136:	d006      	beq.n	8017146 <__ieee754_sqrt+0x112>
 8017138:	1c5c      	adds	r4, r3, #1
 801713a:	bf13      	iteet	ne
 801713c:	3301      	addne	r3, #1
 801713e:	3501      	addeq	r5, #1
 8017140:	4663      	moveq	r3, ip
 8017142:	f023 0301 	bicne.w	r3, r3, #1
 8017146:	106a      	asrs	r2, r5, #1
 8017148:	085b      	lsrs	r3, r3, #1
 801714a:	07e9      	lsls	r1, r5, #31
 801714c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017150:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017154:	bf48      	it	mi
 8017156:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801715a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801715e:	461c      	mov	r4, r3
 8017160:	e780      	b.n	8017064 <__ieee754_sqrt+0x30>
 8017162:	0aca      	lsrs	r2, r1, #11
 8017164:	3815      	subs	r0, #21
 8017166:	0549      	lsls	r1, r1, #21
 8017168:	2a00      	cmp	r2, #0
 801716a:	d0fa      	beq.n	8017162 <__ieee754_sqrt+0x12e>
 801716c:	02d6      	lsls	r6, r2, #11
 801716e:	d50a      	bpl.n	8017186 <__ieee754_sqrt+0x152>
 8017170:	f1c3 0420 	rsb	r4, r3, #32
 8017174:	fa21 f404 	lsr.w	r4, r1, r4
 8017178:	1e5d      	subs	r5, r3, #1
 801717a:	4099      	lsls	r1, r3
 801717c:	4322      	orrs	r2, r4
 801717e:	1b43      	subs	r3, r0, r5
 8017180:	e78b      	b.n	801709a <__ieee754_sqrt+0x66>
 8017182:	4618      	mov	r0, r3
 8017184:	e7f0      	b.n	8017168 <__ieee754_sqrt+0x134>
 8017186:	0052      	lsls	r2, r2, #1
 8017188:	3301      	adds	r3, #1
 801718a:	e7ef      	b.n	801716c <__ieee754_sqrt+0x138>
 801718c:	46a0      	mov	r8, r4
 801718e:	e7bf      	b.n	8017110 <__ieee754_sqrt+0xdc>
 8017190:	7ff00000 	.word	0x7ff00000

08017194 <__ieee754_powf>:
 8017194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017198:	ee10 5a90 	vmov	r5, s1
 801719c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80171a0:	ed2d 8b02 	vpush	{d8}
 80171a4:	eeb0 8a40 	vmov.f32	s16, s0
 80171a8:	eef0 8a60 	vmov.f32	s17, s1
 80171ac:	f000 8293 	beq.w	80176d6 <__ieee754_powf+0x542>
 80171b0:	ee10 8a10 	vmov	r8, s0
 80171b4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80171b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80171bc:	dc06      	bgt.n	80171cc <__ieee754_powf+0x38>
 80171be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80171c2:	dd0a      	ble.n	80171da <__ieee754_powf+0x46>
 80171c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80171c8:	f000 8285 	beq.w	80176d6 <__ieee754_powf+0x542>
 80171cc:	ecbd 8b02 	vpop	{d8}
 80171d0:	48d9      	ldr	r0, [pc, #868]	; (8017538 <__ieee754_powf+0x3a4>)
 80171d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171d6:	f000 bbc7 	b.w	8017968 <nanf>
 80171da:	f1b8 0f00 	cmp.w	r8, #0
 80171de:	da1d      	bge.n	801721c <__ieee754_powf+0x88>
 80171e0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80171e4:	da2c      	bge.n	8017240 <__ieee754_powf+0xac>
 80171e6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80171ea:	db30      	blt.n	801724e <__ieee754_powf+0xba>
 80171ec:	15fb      	asrs	r3, r7, #23
 80171ee:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80171f2:	fa47 f603 	asr.w	r6, r7, r3
 80171f6:	fa06 f303 	lsl.w	r3, r6, r3
 80171fa:	42bb      	cmp	r3, r7
 80171fc:	d127      	bne.n	801724e <__ieee754_powf+0xba>
 80171fe:	f006 0601 	and.w	r6, r6, #1
 8017202:	f1c6 0602 	rsb	r6, r6, #2
 8017206:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801720a:	d122      	bne.n	8017252 <__ieee754_powf+0xbe>
 801720c:	2d00      	cmp	r5, #0
 801720e:	f280 8268 	bge.w	80176e2 <__ieee754_powf+0x54e>
 8017212:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017216:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801721a:	e00d      	b.n	8017238 <__ieee754_powf+0xa4>
 801721c:	2600      	movs	r6, #0
 801721e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017222:	d1f0      	bne.n	8017206 <__ieee754_powf+0x72>
 8017224:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017228:	f000 8255 	beq.w	80176d6 <__ieee754_powf+0x542>
 801722c:	dd0a      	ble.n	8017244 <__ieee754_powf+0xb0>
 801722e:	2d00      	cmp	r5, #0
 8017230:	f280 8254 	bge.w	80176dc <__ieee754_powf+0x548>
 8017234:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801753c <__ieee754_powf+0x3a8>
 8017238:	ecbd 8b02 	vpop	{d8}
 801723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017240:	2602      	movs	r6, #2
 8017242:	e7ec      	b.n	801721e <__ieee754_powf+0x8a>
 8017244:	2d00      	cmp	r5, #0
 8017246:	daf5      	bge.n	8017234 <__ieee754_powf+0xa0>
 8017248:	eeb1 0a68 	vneg.f32	s0, s17
 801724c:	e7f4      	b.n	8017238 <__ieee754_powf+0xa4>
 801724e:	2600      	movs	r6, #0
 8017250:	e7d9      	b.n	8017206 <__ieee754_powf+0x72>
 8017252:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8017256:	d102      	bne.n	801725e <__ieee754_powf+0xca>
 8017258:	ee28 0a08 	vmul.f32	s0, s16, s16
 801725c:	e7ec      	b.n	8017238 <__ieee754_powf+0xa4>
 801725e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8017262:	eeb0 0a48 	vmov.f32	s0, s16
 8017266:	d108      	bne.n	801727a <__ieee754_powf+0xe6>
 8017268:	f1b8 0f00 	cmp.w	r8, #0
 801726c:	db05      	blt.n	801727a <__ieee754_powf+0xe6>
 801726e:	ecbd 8b02 	vpop	{d8}
 8017272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017276:	f000 ba4d 	b.w	8017714 <__ieee754_sqrtf>
 801727a:	f000 fb63 	bl	8017944 <fabsf>
 801727e:	b124      	cbz	r4, 801728a <__ieee754_powf+0xf6>
 8017280:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8017284:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017288:	d117      	bne.n	80172ba <__ieee754_powf+0x126>
 801728a:	2d00      	cmp	r5, #0
 801728c:	bfbc      	itt	lt
 801728e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8017292:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8017296:	f1b8 0f00 	cmp.w	r8, #0
 801729a:	dacd      	bge.n	8017238 <__ieee754_powf+0xa4>
 801729c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80172a0:	ea54 0306 	orrs.w	r3, r4, r6
 80172a4:	d104      	bne.n	80172b0 <__ieee754_powf+0x11c>
 80172a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80172aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80172ae:	e7c3      	b.n	8017238 <__ieee754_powf+0xa4>
 80172b0:	2e01      	cmp	r6, #1
 80172b2:	d1c1      	bne.n	8017238 <__ieee754_powf+0xa4>
 80172b4:	eeb1 0a40 	vneg.f32	s0, s0
 80172b8:	e7be      	b.n	8017238 <__ieee754_powf+0xa4>
 80172ba:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80172be:	3801      	subs	r0, #1
 80172c0:	ea56 0300 	orrs.w	r3, r6, r0
 80172c4:	d104      	bne.n	80172d0 <__ieee754_powf+0x13c>
 80172c6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80172ca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80172ce:	e7b3      	b.n	8017238 <__ieee754_powf+0xa4>
 80172d0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80172d4:	dd6d      	ble.n	80173b2 <__ieee754_powf+0x21e>
 80172d6:	4b9a      	ldr	r3, [pc, #616]	; (8017540 <__ieee754_powf+0x3ac>)
 80172d8:	429c      	cmp	r4, r3
 80172da:	dc06      	bgt.n	80172ea <__ieee754_powf+0x156>
 80172dc:	2d00      	cmp	r5, #0
 80172de:	daa9      	bge.n	8017234 <__ieee754_powf+0xa0>
 80172e0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8017544 <__ieee754_powf+0x3b0>
 80172e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80172e8:	e7a6      	b.n	8017238 <__ieee754_powf+0xa4>
 80172ea:	4b97      	ldr	r3, [pc, #604]	; (8017548 <__ieee754_powf+0x3b4>)
 80172ec:	429c      	cmp	r4, r3
 80172ee:	dd02      	ble.n	80172f6 <__ieee754_powf+0x162>
 80172f0:	2d00      	cmp	r5, #0
 80172f2:	dcf5      	bgt.n	80172e0 <__ieee754_powf+0x14c>
 80172f4:	e79e      	b.n	8017234 <__ieee754_powf+0xa0>
 80172f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80172fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80172fe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801754c <__ieee754_powf+0x3b8>
 8017302:	eef1 6a40 	vneg.f32	s13, s0
 8017306:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801730a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801730e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017312:	eee7 7a40 	vfms.f32	s15, s14, s0
 8017316:	ee60 0a00 	vmul.f32	s1, s0, s0
 801731a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8017550 <__ieee754_powf+0x3bc>
 801731e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017322:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8017554 <__ieee754_powf+0x3c0>
 8017326:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801732a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801732e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8017558 <__ieee754_powf+0x3c4>
 8017332:	eeb0 6a67 	vmov.f32	s12, s15
 8017336:	eea0 6a07 	vfma.f32	s12, s0, s14
 801733a:	ee16 3a10 	vmov	r3, s12
 801733e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017342:	f023 030f 	bic.w	r3, r3, #15
 8017346:	ee00 3a90 	vmov	s1, r3
 801734a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801734e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017352:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8017356:	f025 050f 	bic.w	r5, r5, #15
 801735a:	ee07 5a10 	vmov	s14, r5
 801735e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8017362:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8017366:	ee07 3a90 	vmov	s15, r3
 801736a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801736e:	3e01      	subs	r6, #1
 8017370:	ea56 0200 	orrs.w	r2, r6, r0
 8017374:	ee07 5a10 	vmov	s14, r5
 8017378:	ee67 7a87 	vmul.f32	s15, s15, s14
 801737c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8017380:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8017384:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017388:	ee17 4a10 	vmov	r4, s14
 801738c:	bf08      	it	eq
 801738e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8017392:	2c00      	cmp	r4, #0
 8017394:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017398:	f340 8184 	ble.w	80176a4 <__ieee754_powf+0x510>
 801739c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80173a0:	f340 80fc 	ble.w	801759c <__ieee754_powf+0x408>
 80173a4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8017544 <__ieee754_powf+0x3b0>
 80173a8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80173ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80173b0:	e742      	b.n	8017238 <__ieee754_powf+0xa4>
 80173b2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80173b6:	bfbf      	itttt	lt
 80173b8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801755c <__ieee754_powf+0x3c8>
 80173bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80173c0:	f06f 0217 	mvnlt.w	r2, #23
 80173c4:	ee17 4a90 	vmovlt	r4, s15
 80173c8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80173cc:	bfa8      	it	ge
 80173ce:	2200      	movge	r2, #0
 80173d0:	3b7f      	subs	r3, #127	; 0x7f
 80173d2:	4413      	add	r3, r2
 80173d4:	4a62      	ldr	r2, [pc, #392]	; (8017560 <__ieee754_powf+0x3cc>)
 80173d6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80173da:	4294      	cmp	r4, r2
 80173dc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80173e0:	dd06      	ble.n	80173f0 <__ieee754_powf+0x25c>
 80173e2:	4a60      	ldr	r2, [pc, #384]	; (8017564 <__ieee754_powf+0x3d0>)
 80173e4:	4294      	cmp	r4, r2
 80173e6:	f340 80a5 	ble.w	8017534 <__ieee754_powf+0x3a0>
 80173ea:	3301      	adds	r3, #1
 80173ec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80173f0:	2400      	movs	r4, #0
 80173f2:	4a5d      	ldr	r2, [pc, #372]	; (8017568 <__ieee754_powf+0x3d4>)
 80173f4:	00a7      	lsls	r7, r4, #2
 80173f6:	443a      	add	r2, r7
 80173f8:	ee07 1a90 	vmov	s15, r1
 80173fc:	ed92 7a00 	vldr	s14, [r2]
 8017400:	4a5a      	ldr	r2, [pc, #360]	; (801756c <__ieee754_powf+0x3d8>)
 8017402:	ee37 6a27 	vadd.f32	s12, s14, s15
 8017406:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801740a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801740e:	1049      	asrs	r1, r1, #1
 8017410:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8017414:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8017418:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801741c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8017420:	ee06 1a10 	vmov	s12, r1
 8017424:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8017428:	ee14 ca90 	vmov	ip, s9
 801742c:	ea02 0c0c 	and.w	ip, r2, ip
 8017430:	ee05 ca10 	vmov	s10, ip
 8017434:	eeb1 4a45 	vneg.f32	s8, s10
 8017438:	eee4 5a06 	vfma.f32	s11, s8, s12
 801743c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017440:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8017570 <__ieee754_powf+0x3dc>
 8017444:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017448:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801744c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8017450:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8017454:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8017458:	eddf 5a46 	vldr	s11, [pc, #280]	; 8017574 <__ieee754_powf+0x3e0>
 801745c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017460:	eddf 5a45 	vldr	s11, [pc, #276]	; 8017578 <__ieee754_powf+0x3e4>
 8017464:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017468:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801754c <__ieee754_powf+0x3b8>
 801746c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017470:	eddf 5a42 	vldr	s11, [pc, #264]	; 801757c <__ieee754_powf+0x3e8>
 8017474:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017478:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8017580 <__ieee754_powf+0x3ec>
 801747c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8017480:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017484:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017488:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801748c:	eef0 7a65 	vmov.f32	s15, s11
 8017490:	eee3 6a87 	vfma.f32	s13, s7, s14
 8017494:	eee5 7a05 	vfma.f32	s15, s10, s10
 8017498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801749c:	ee17 1a90 	vmov	r1, s15
 80174a0:	4011      	ands	r1, r2
 80174a2:	ee07 1a90 	vmov	s15, r1
 80174a6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80174aa:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017584 <__ieee754_powf+0x3f0>
 80174ae:	eea4 7a05 	vfma.f32	s14, s8, s10
 80174b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80174b6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80174ba:	eea7 7a86 	vfma.f32	s14, s15, s12
 80174be:	eeb0 6a47 	vmov.f32	s12, s14
 80174c2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80174c6:	ee16 1a10 	vmov	r1, s12
 80174ca:	4011      	ands	r1, r2
 80174cc:	ee06 1a90 	vmov	s13, r1
 80174d0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80174d4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8017588 <__ieee754_powf+0x3f4>
 80174d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80174dc:	ee06 1a10 	vmov	s12, r1
 80174e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80174e4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801758c <__ieee754_powf+0x3f8>
 80174e8:	4929      	ldr	r1, [pc, #164]	; (8017590 <__ieee754_powf+0x3fc>)
 80174ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 80174ee:	4439      	add	r1, r7
 80174f0:	edd1 7a00 	vldr	s15, [r1]
 80174f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80174f8:	ee07 3a90 	vmov	s15, r3
 80174fc:	eef0 0a47 	vmov.f32	s1, s14
 8017500:	4b24      	ldr	r3, [pc, #144]	; (8017594 <__ieee754_powf+0x400>)
 8017502:	eee6 0a25 	vfma.f32	s1, s12, s11
 8017506:	443b      	add	r3, r7
 8017508:	ed93 5a00 	vldr	s10, [r3]
 801750c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017510:	ee70 0a85 	vadd.f32	s1, s1, s10
 8017514:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8017518:	ee17 3a90 	vmov	r3, s15
 801751c:	4013      	ands	r3, r2
 801751e:	ee07 3a90 	vmov	s15, r3
 8017522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017526:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801752a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801752e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017532:	e70e      	b.n	8017352 <__ieee754_powf+0x1be>
 8017534:	2401      	movs	r4, #1
 8017536:	e75c      	b.n	80173f2 <__ieee754_powf+0x25e>
 8017538:	08017f77 	.word	0x08017f77
 801753c:	00000000 	.word	0x00000000
 8017540:	3f7ffff7 	.word	0x3f7ffff7
 8017544:	7149f2ca 	.word	0x7149f2ca
 8017548:	3f800007 	.word	0x3f800007
 801754c:	3eaaaaab 	.word	0x3eaaaaab
 8017550:	36eca570 	.word	0x36eca570
 8017554:	3fb8aa3b 	.word	0x3fb8aa3b
 8017558:	3fb8aa00 	.word	0x3fb8aa00
 801755c:	4b800000 	.word	0x4b800000
 8017560:	001cc471 	.word	0x001cc471
 8017564:	005db3d6 	.word	0x005db3d6
 8017568:	08018158 	.word	0x08018158
 801756c:	fffff000 	.word	0xfffff000
 8017570:	3e6c3255 	.word	0x3e6c3255
 8017574:	3e53f142 	.word	0x3e53f142
 8017578:	3e8ba305 	.word	0x3e8ba305
 801757c:	3edb6db7 	.word	0x3edb6db7
 8017580:	3f19999a 	.word	0x3f19999a
 8017584:	3f763800 	.word	0x3f763800
 8017588:	3f76384f 	.word	0x3f76384f
 801758c:	369dc3a0 	.word	0x369dc3a0
 8017590:	08018168 	.word	0x08018168
 8017594:	08018160 	.word	0x08018160
 8017598:	3338aa3c 	.word	0x3338aa3c
 801759c:	f040 8092 	bne.w	80176c4 <__ieee754_powf+0x530>
 80175a0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8017598 <__ieee754_powf+0x404>
 80175a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175a8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80175ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80175b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b4:	f73f aef6 	bgt.w	80173a4 <__ieee754_powf+0x210>
 80175b8:	15db      	asrs	r3, r3, #23
 80175ba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80175be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80175c2:	4103      	asrs	r3, r0
 80175c4:	4423      	add	r3, r4
 80175c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80175ca:	4947      	ldr	r1, [pc, #284]	; (80176e8 <__ieee754_powf+0x554>)
 80175cc:	3a7f      	subs	r2, #127	; 0x7f
 80175ce:	4111      	asrs	r1, r2
 80175d0:	ea23 0101 	bic.w	r1, r3, r1
 80175d4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80175d8:	ee07 1a10 	vmov	s14, r1
 80175dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80175e0:	f1c2 0217 	rsb	r2, r2, #23
 80175e4:	4110      	asrs	r0, r2
 80175e6:	2c00      	cmp	r4, #0
 80175e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175ec:	bfb8      	it	lt
 80175ee:	4240      	neglt	r0, r0
 80175f0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80175f4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80176ec <__ieee754_powf+0x558>
 80175f8:	ee17 3a10 	vmov	r3, s14
 80175fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017600:	f023 030f 	bic.w	r3, r3, #15
 8017604:	ee07 3a10 	vmov	s14, r3
 8017608:	ee77 7a67 	vsub.f32	s15, s14, s15
 801760c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017610:	eddf 7a37 	vldr	s15, [pc, #220]	; 80176f0 <__ieee754_powf+0x55c>
 8017614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017618:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801761c:	eddf 6a35 	vldr	s13, [pc, #212]	; 80176f4 <__ieee754_powf+0x560>
 8017620:	eeb0 0a67 	vmov.f32	s0, s15
 8017624:	eea7 0a26 	vfma.f32	s0, s14, s13
 8017628:	eeb0 6a40 	vmov.f32	s12, s0
 801762c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8017630:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017634:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017638:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80176f8 <__ieee754_powf+0x564>
 801763c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80176fc <__ieee754_powf+0x568>
 8017640:	eea7 6a26 	vfma.f32	s12, s14, s13
 8017644:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8017700 <__ieee754_powf+0x56c>
 8017648:	eee6 6a07 	vfma.f32	s13, s12, s14
 801764c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8017704 <__ieee754_powf+0x570>
 8017650:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017654:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8017708 <__ieee754_powf+0x574>
 8017658:	eee6 6a07 	vfma.f32	s13, s12, s14
 801765c:	eeb0 6a40 	vmov.f32	s12, s0
 8017660:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8017664:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017668:	eeb0 7a46 	vmov.f32	s14, s12
 801766c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8017670:	ee20 6a06 	vmul.f32	s12, s0, s12
 8017674:	eee0 7a27 	vfma.f32	s15, s0, s15
 8017678:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801767c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017680:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017684:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017688:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801768c:	ee10 3a10 	vmov	r3, s0
 8017690:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8017694:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017698:	da1a      	bge.n	80176d0 <__ieee754_powf+0x53c>
 801769a:	f000 f9c5 	bl	8017a28 <scalbnf>
 801769e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80176a2:	e5c9      	b.n	8017238 <__ieee754_powf+0xa4>
 80176a4:	4a19      	ldr	r2, [pc, #100]	; (801770c <__ieee754_powf+0x578>)
 80176a6:	4293      	cmp	r3, r2
 80176a8:	dd02      	ble.n	80176b0 <__ieee754_powf+0x51c>
 80176aa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8017710 <__ieee754_powf+0x57c>
 80176ae:	e67b      	b.n	80173a8 <__ieee754_powf+0x214>
 80176b0:	d108      	bne.n	80176c4 <__ieee754_powf+0x530>
 80176b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80176ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176be:	f6ff af7b 	blt.w	80175b8 <__ieee754_powf+0x424>
 80176c2:	e7f2      	b.n	80176aa <__ieee754_powf+0x516>
 80176c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80176c8:	f73f af76 	bgt.w	80175b8 <__ieee754_powf+0x424>
 80176cc:	2000      	movs	r0, #0
 80176ce:	e78f      	b.n	80175f0 <__ieee754_powf+0x45c>
 80176d0:	ee00 3a10 	vmov	s0, r3
 80176d4:	e7e3      	b.n	801769e <__ieee754_powf+0x50a>
 80176d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80176da:	e5ad      	b.n	8017238 <__ieee754_powf+0xa4>
 80176dc:	eeb0 0a68 	vmov.f32	s0, s17
 80176e0:	e5aa      	b.n	8017238 <__ieee754_powf+0xa4>
 80176e2:	eeb0 0a48 	vmov.f32	s0, s16
 80176e6:	e5a7      	b.n	8017238 <__ieee754_powf+0xa4>
 80176e8:	007fffff 	.word	0x007fffff
 80176ec:	3f317218 	.word	0x3f317218
 80176f0:	35bfbe8c 	.word	0x35bfbe8c
 80176f4:	3f317200 	.word	0x3f317200
 80176f8:	3331bb4c 	.word	0x3331bb4c
 80176fc:	b5ddea0e 	.word	0xb5ddea0e
 8017700:	388ab355 	.word	0x388ab355
 8017704:	bb360b61 	.word	0xbb360b61
 8017708:	3e2aaaab 	.word	0x3e2aaaab
 801770c:	43160000 	.word	0x43160000
 8017710:	0da24260 	.word	0x0da24260

08017714 <__ieee754_sqrtf>:
 8017714:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017718:	4770      	bx	lr

0801771a <fabs>:
 801771a:	ec51 0b10 	vmov	r0, r1, d0
 801771e:	ee10 2a10 	vmov	r2, s0
 8017722:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017726:	ec43 2b10 	vmov	d0, r2, r3
 801772a:	4770      	bx	lr

0801772c <finite>:
 801772c:	ee10 3a90 	vmov	r3, s1
 8017730:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017734:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017738:	0fc0      	lsrs	r0, r0, #31
 801773a:	4770      	bx	lr

0801773c <matherr>:
 801773c:	2000      	movs	r0, #0
 801773e:	4770      	bx	lr

08017740 <nan>:
 8017740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017748 <nan+0x8>
 8017744:	4770      	bx	lr
 8017746:	bf00      	nop
 8017748:	00000000 	.word	0x00000000
 801774c:	7ff80000 	.word	0x7ff80000

08017750 <rint>:
 8017750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017752:	ec51 0b10 	vmov	r0, r1, d0
 8017756:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801775a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801775e:	2e13      	cmp	r6, #19
 8017760:	460b      	mov	r3, r1
 8017762:	ee10 4a10 	vmov	r4, s0
 8017766:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801776a:	dc56      	bgt.n	801781a <rint+0xca>
 801776c:	2e00      	cmp	r6, #0
 801776e:	da2b      	bge.n	80177c8 <rint+0x78>
 8017770:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017774:	4302      	orrs	r2, r0
 8017776:	d023      	beq.n	80177c0 <rint+0x70>
 8017778:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801777c:	4302      	orrs	r2, r0
 801777e:	4254      	negs	r4, r2
 8017780:	4314      	orrs	r4, r2
 8017782:	0c4b      	lsrs	r3, r1, #17
 8017784:	0b24      	lsrs	r4, r4, #12
 8017786:	045b      	lsls	r3, r3, #17
 8017788:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801778c:	ea44 0103 	orr.w	r1, r4, r3
 8017790:	460b      	mov	r3, r1
 8017792:	492f      	ldr	r1, [pc, #188]	; (8017850 <rint+0x100>)
 8017794:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017798:	e9d1 6700 	ldrd	r6, r7, [r1]
 801779c:	4602      	mov	r2, r0
 801779e:	4639      	mov	r1, r7
 80177a0:	4630      	mov	r0, r6
 80177a2:	f7e8 fd83 	bl	80002ac <__adddf3>
 80177a6:	e9cd 0100 	strd	r0, r1, [sp]
 80177aa:	463b      	mov	r3, r7
 80177ac:	4632      	mov	r2, r6
 80177ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177b2:	f7e8 fd79 	bl	80002a8 <__aeabi_dsub>
 80177b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80177ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80177be:	4639      	mov	r1, r7
 80177c0:	ec41 0b10 	vmov	d0, r0, r1
 80177c4:	b003      	add	sp, #12
 80177c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177c8:	4a22      	ldr	r2, [pc, #136]	; (8017854 <rint+0x104>)
 80177ca:	4132      	asrs	r2, r6
 80177cc:	ea01 0702 	and.w	r7, r1, r2
 80177d0:	4307      	orrs	r7, r0
 80177d2:	d0f5      	beq.n	80177c0 <rint+0x70>
 80177d4:	0852      	lsrs	r2, r2, #1
 80177d6:	4011      	ands	r1, r2
 80177d8:	430c      	orrs	r4, r1
 80177da:	d00b      	beq.n	80177f4 <rint+0xa4>
 80177dc:	ea23 0202 	bic.w	r2, r3, r2
 80177e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80177e4:	2e13      	cmp	r6, #19
 80177e6:	fa43 f306 	asr.w	r3, r3, r6
 80177ea:	bf0c      	ite	eq
 80177ec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80177f0:	2400      	movne	r4, #0
 80177f2:	4313      	orrs	r3, r2
 80177f4:	4916      	ldr	r1, [pc, #88]	; (8017850 <rint+0x100>)
 80177f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80177fa:	4622      	mov	r2, r4
 80177fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017800:	4620      	mov	r0, r4
 8017802:	4629      	mov	r1, r5
 8017804:	f7e8 fd52 	bl	80002ac <__adddf3>
 8017808:	e9cd 0100 	strd	r0, r1, [sp]
 801780c:	4622      	mov	r2, r4
 801780e:	462b      	mov	r3, r5
 8017810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017814:	f7e8 fd48 	bl	80002a8 <__aeabi_dsub>
 8017818:	e7d2      	b.n	80177c0 <rint+0x70>
 801781a:	2e33      	cmp	r6, #51	; 0x33
 801781c:	dd07      	ble.n	801782e <rint+0xde>
 801781e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017822:	d1cd      	bne.n	80177c0 <rint+0x70>
 8017824:	ee10 2a10 	vmov	r2, s0
 8017828:	f7e8 fd40 	bl	80002ac <__adddf3>
 801782c:	e7c8      	b.n	80177c0 <rint+0x70>
 801782e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017836:	40f2      	lsrs	r2, r6
 8017838:	4210      	tst	r0, r2
 801783a:	d0c1      	beq.n	80177c0 <rint+0x70>
 801783c:	0852      	lsrs	r2, r2, #1
 801783e:	4210      	tst	r0, r2
 8017840:	bf1f      	itttt	ne
 8017842:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017846:	ea20 0202 	bicne.w	r2, r0, r2
 801784a:	4134      	asrne	r4, r6
 801784c:	4314      	orrne	r4, r2
 801784e:	e7d1      	b.n	80177f4 <rint+0xa4>
 8017850:	08018170 	.word	0x08018170
 8017854:	000fffff 	.word	0x000fffff

08017858 <scalbn>:
 8017858:	b570      	push	{r4, r5, r6, lr}
 801785a:	ec55 4b10 	vmov	r4, r5, d0
 801785e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017862:	4606      	mov	r6, r0
 8017864:	462b      	mov	r3, r5
 8017866:	b9aa      	cbnz	r2, 8017894 <scalbn+0x3c>
 8017868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801786c:	4323      	orrs	r3, r4
 801786e:	d03b      	beq.n	80178e8 <scalbn+0x90>
 8017870:	4b31      	ldr	r3, [pc, #196]	; (8017938 <scalbn+0xe0>)
 8017872:	4629      	mov	r1, r5
 8017874:	2200      	movs	r2, #0
 8017876:	ee10 0a10 	vmov	r0, s0
 801787a:	f7e8 fecd 	bl	8000618 <__aeabi_dmul>
 801787e:	4b2f      	ldr	r3, [pc, #188]	; (801793c <scalbn+0xe4>)
 8017880:	429e      	cmp	r6, r3
 8017882:	4604      	mov	r4, r0
 8017884:	460d      	mov	r5, r1
 8017886:	da12      	bge.n	80178ae <scalbn+0x56>
 8017888:	a327      	add	r3, pc, #156	; (adr r3, 8017928 <scalbn+0xd0>)
 801788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801788e:	f7e8 fec3 	bl	8000618 <__aeabi_dmul>
 8017892:	e009      	b.n	80178a8 <scalbn+0x50>
 8017894:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017898:	428a      	cmp	r2, r1
 801789a:	d10c      	bne.n	80178b6 <scalbn+0x5e>
 801789c:	ee10 2a10 	vmov	r2, s0
 80178a0:	4620      	mov	r0, r4
 80178a2:	4629      	mov	r1, r5
 80178a4:	f7e8 fd02 	bl	80002ac <__adddf3>
 80178a8:	4604      	mov	r4, r0
 80178aa:	460d      	mov	r5, r1
 80178ac:	e01c      	b.n	80178e8 <scalbn+0x90>
 80178ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80178b2:	460b      	mov	r3, r1
 80178b4:	3a36      	subs	r2, #54	; 0x36
 80178b6:	4432      	add	r2, r6
 80178b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80178bc:	428a      	cmp	r2, r1
 80178be:	dd0b      	ble.n	80178d8 <scalbn+0x80>
 80178c0:	ec45 4b11 	vmov	d1, r4, r5
 80178c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017930 <scalbn+0xd8>
 80178c8:	f000 f90e 	bl	8017ae8 <copysign>
 80178cc:	a318      	add	r3, pc, #96	; (adr r3, 8017930 <scalbn+0xd8>)
 80178ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d2:	ec51 0b10 	vmov	r0, r1, d0
 80178d6:	e7da      	b.n	801788e <scalbn+0x36>
 80178d8:	2a00      	cmp	r2, #0
 80178da:	dd08      	ble.n	80178ee <scalbn+0x96>
 80178dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80178e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80178e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80178e8:	ec45 4b10 	vmov	d0, r4, r5
 80178ec:	bd70      	pop	{r4, r5, r6, pc}
 80178ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80178f2:	da0d      	bge.n	8017910 <scalbn+0xb8>
 80178f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80178f8:	429e      	cmp	r6, r3
 80178fa:	ec45 4b11 	vmov	d1, r4, r5
 80178fe:	dce1      	bgt.n	80178c4 <scalbn+0x6c>
 8017900:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017928 <scalbn+0xd0>
 8017904:	f000 f8f0 	bl	8017ae8 <copysign>
 8017908:	a307      	add	r3, pc, #28	; (adr r3, 8017928 <scalbn+0xd0>)
 801790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790e:	e7e0      	b.n	80178d2 <scalbn+0x7a>
 8017910:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017914:	3236      	adds	r2, #54	; 0x36
 8017916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801791a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801791e:	4620      	mov	r0, r4
 8017920:	4629      	mov	r1, r5
 8017922:	2200      	movs	r2, #0
 8017924:	4b06      	ldr	r3, [pc, #24]	; (8017940 <scalbn+0xe8>)
 8017926:	e7b2      	b.n	801788e <scalbn+0x36>
 8017928:	c2f8f359 	.word	0xc2f8f359
 801792c:	01a56e1f 	.word	0x01a56e1f
 8017930:	8800759c 	.word	0x8800759c
 8017934:	7e37e43c 	.word	0x7e37e43c
 8017938:	43500000 	.word	0x43500000
 801793c:	ffff3cb0 	.word	0xffff3cb0
 8017940:	3c900000 	.word	0x3c900000

08017944 <fabsf>:
 8017944:	ee10 3a10 	vmov	r3, s0
 8017948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801794c:	ee00 3a10 	vmov	s0, r3
 8017950:	4770      	bx	lr

08017952 <finitef>:
 8017952:	ee10 3a10 	vmov	r3, s0
 8017956:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801795a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801795e:	bfac      	ite	ge
 8017960:	2000      	movge	r0, #0
 8017962:	2001      	movlt	r0, #1
 8017964:	4770      	bx	lr
	...

08017968 <nanf>:
 8017968:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017970 <nanf+0x8>
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	7fc00000 	.word	0x7fc00000

08017974 <rintf>:
 8017974:	b513      	push	{r0, r1, r4, lr}
 8017976:	ee10 1a10 	vmov	r1, s0
 801797a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801797e:	0ddc      	lsrs	r4, r3, #23
 8017980:	3c7f      	subs	r4, #127	; 0x7f
 8017982:	2c16      	cmp	r4, #22
 8017984:	dc46      	bgt.n	8017a14 <rintf+0xa0>
 8017986:	b32b      	cbz	r3, 80179d4 <rintf+0x60>
 8017988:	2c00      	cmp	r4, #0
 801798a:	ee10 2a10 	vmov	r2, s0
 801798e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8017992:	da21      	bge.n	80179d8 <rintf+0x64>
 8017994:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8017998:	425b      	negs	r3, r3
 801799a:	4a21      	ldr	r2, [pc, #132]	; (8017a20 <rintf+0xac>)
 801799c:	0a5b      	lsrs	r3, r3, #9
 801799e:	0d09      	lsrs	r1, r1, #20
 80179a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80179a4:	0509      	lsls	r1, r1, #20
 80179a6:	430b      	orrs	r3, r1
 80179a8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80179ac:	ee07 3a90 	vmov	s15, r3
 80179b0:	edd2 6a00 	vldr	s13, [r2]
 80179b4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80179b8:	ed8d 7a01 	vstr	s14, [sp, #4]
 80179bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80179c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80179c4:	ee17 3a90 	vmov	r3, s15
 80179c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80179cc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80179d0:	ee00 3a10 	vmov	s0, r3
 80179d4:	b002      	add	sp, #8
 80179d6:	bd10      	pop	{r4, pc}
 80179d8:	4b12      	ldr	r3, [pc, #72]	; (8017a24 <rintf+0xb0>)
 80179da:	4123      	asrs	r3, r4
 80179dc:	4219      	tst	r1, r3
 80179de:	d0f9      	beq.n	80179d4 <rintf+0x60>
 80179e0:	085b      	lsrs	r3, r3, #1
 80179e2:	4219      	tst	r1, r3
 80179e4:	d006      	beq.n	80179f4 <rintf+0x80>
 80179e6:	ea21 0203 	bic.w	r2, r1, r3
 80179ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80179ee:	fa43 f404 	asr.w	r4, r3, r4
 80179f2:	4322      	orrs	r2, r4
 80179f4:	4b0a      	ldr	r3, [pc, #40]	; (8017a20 <rintf+0xac>)
 80179f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80179fa:	ed90 7a00 	vldr	s14, [r0]
 80179fe:	ee07 2a90 	vmov	s15, r2
 8017a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a06:	edcd 7a01 	vstr	s15, [sp, #4]
 8017a0a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017a0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017a12:	e7df      	b.n	80179d4 <rintf+0x60>
 8017a14:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a18:	d3dc      	bcc.n	80179d4 <rintf+0x60>
 8017a1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a1e:	e7d9      	b.n	80179d4 <rintf+0x60>
 8017a20:	08018180 	.word	0x08018180
 8017a24:	007fffff 	.word	0x007fffff

08017a28 <scalbnf>:
 8017a28:	b508      	push	{r3, lr}
 8017a2a:	ee10 2a10 	vmov	r2, s0
 8017a2e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017a32:	ed2d 8b02 	vpush	{d8}
 8017a36:	eef0 0a40 	vmov.f32	s1, s0
 8017a3a:	d004      	beq.n	8017a46 <scalbnf+0x1e>
 8017a3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a40:	d306      	bcc.n	8017a50 <scalbnf+0x28>
 8017a42:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017a46:	ecbd 8b02 	vpop	{d8}
 8017a4a:	eeb0 0a60 	vmov.f32	s0, s1
 8017a4e:	bd08      	pop	{r3, pc}
 8017a50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017a54:	d21c      	bcs.n	8017a90 <scalbnf+0x68>
 8017a56:	4b1f      	ldr	r3, [pc, #124]	; (8017ad4 <scalbnf+0xac>)
 8017a58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017ad8 <scalbnf+0xb0>
 8017a5c:	4298      	cmp	r0, r3
 8017a5e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017a62:	db10      	blt.n	8017a86 <scalbnf+0x5e>
 8017a64:	ee10 2a90 	vmov	r2, s1
 8017a68:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017a6c:	3b19      	subs	r3, #25
 8017a6e:	4403      	add	r3, r0
 8017a70:	2bfe      	cmp	r3, #254	; 0xfe
 8017a72:	dd0f      	ble.n	8017a94 <scalbnf+0x6c>
 8017a74:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017adc <scalbnf+0xb4>
 8017a78:	eeb0 0a48 	vmov.f32	s0, s16
 8017a7c:	f000 f843 	bl	8017b06 <copysignf>
 8017a80:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017a84:	e7df      	b.n	8017a46 <scalbnf+0x1e>
 8017a86:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017ae0 <scalbnf+0xb8>
 8017a8a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017a8e:	e7da      	b.n	8017a46 <scalbnf+0x1e>
 8017a90:	0ddb      	lsrs	r3, r3, #23
 8017a92:	e7ec      	b.n	8017a6e <scalbnf+0x46>
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	dd06      	ble.n	8017aa6 <scalbnf+0x7e>
 8017a98:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017a9c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017aa0:	ee00 3a90 	vmov	s1, r3
 8017aa4:	e7cf      	b.n	8017a46 <scalbnf+0x1e>
 8017aa6:	f113 0f16 	cmn.w	r3, #22
 8017aaa:	da06      	bge.n	8017aba <scalbnf+0x92>
 8017aac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017ab0:	4298      	cmp	r0, r3
 8017ab2:	dcdf      	bgt.n	8017a74 <scalbnf+0x4c>
 8017ab4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017ae0 <scalbnf+0xb8>
 8017ab8:	e7de      	b.n	8017a78 <scalbnf+0x50>
 8017aba:	3319      	adds	r3, #25
 8017abc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017ac0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017ac4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017ae4 <scalbnf+0xbc>
 8017ac8:	ee07 3a10 	vmov	s14, r3
 8017acc:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017ad0:	e7b9      	b.n	8017a46 <scalbnf+0x1e>
 8017ad2:	bf00      	nop
 8017ad4:	ffff3cb0 	.word	0xffff3cb0
 8017ad8:	4c000000 	.word	0x4c000000
 8017adc:	7149f2ca 	.word	0x7149f2ca
 8017ae0:	0da24260 	.word	0x0da24260
 8017ae4:	33000000 	.word	0x33000000

08017ae8 <copysign>:
 8017ae8:	ec51 0b10 	vmov	r0, r1, d0
 8017aec:	ee11 0a90 	vmov	r0, s3
 8017af0:	ee10 2a10 	vmov	r2, s0
 8017af4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017af8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017afc:	ea41 0300 	orr.w	r3, r1, r0
 8017b00:	ec43 2b10 	vmov	d0, r2, r3
 8017b04:	4770      	bx	lr

08017b06 <copysignf>:
 8017b06:	ee10 3a10 	vmov	r3, s0
 8017b0a:	ee10 2a90 	vmov	r2, s1
 8017b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017b16:	4313      	orrs	r3, r2
 8017b18:	ee00 3a10 	vmov	s0, r3
 8017b1c:	4770      	bx	lr
	...

08017b20 <_init>:
 8017b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b22:	bf00      	nop
 8017b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b26:	bc08      	pop	{r3}
 8017b28:	469e      	mov	lr, r3
 8017b2a:	4770      	bx	lr

08017b2c <_fini>:
 8017b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b2e:	bf00      	nop
 8017b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b32:	bc08      	pop	{r3}
 8017b34:	469e      	mov	lr, r3
 8017b36:	4770      	bx	lr
